syntax = "proto3";
package prodvana.release_channel;
option go_package = "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/release_channel";
import "google/api/annotations.proto";
import "prodvana/events/events.proto";
import "prodvana/release_channel/object.proto";
import "prodvana/release_channel/release_channel_config.proto";
import "prodvana/version/source_metadata.proto";
import "validate/validate.proto";

message ConfigureReleaseChannelReq {
    string application = 4 [(validate.rules).string.min_len = 1];
    ReleaseChannelConfig release_channel = 1;
    prodvana.version.Source source = 5;
    prodvana.version.SourceMetadata source_metadata = 6;
    bool force_create_new_version = 7;  // create new version even if there are no detected changes

    reserved 2, 3;
    reserved "cluster_id", "cluster_name";

    // next tag: 8
}

message ConfigureReleaseChannelResp {
	// application version
    string version = 1;
    bool created_new_version = 2;
}

message DeleteReleaseChannelReq {
    string release_channel = 1;
    string application = 2 [(validate.rules).string.min_len = 1];
    prodvana.version.Source source = 3;
    prodvana.version.SourceMetadata source_metadata = 4;
}

message DeleteReleaseChannelResp {
	// application version
    string version = 1;
}

message ListReleaseChannelsReq {
    string application = 1;
}

message ListReleaseChannelsResp {
    repeated ReleaseChannel release_channels = 1;
}

message GetReleaseChannelReq {
    string application = 1;
    string release_channel = 2;
}

message GetReleaseChannelResp {
    ReleaseChannel release_channel = 1;
}

message GetReleaseChannelConfigReq {
    string application = 1 [(validate.rules).string.min_len = 1];
    string release_channel = 2;
    string version = 3; // omit to get latest version
}

message GetReleaseChannelConfigResp {
    ReleaseChannelConfig config = 1;  // config as passed in by user
    string version = 2;
    ReleaseChannelConfig compiled_config = 3;  // config with defaults applied
}

message GetReleaseChannelEventsReq {
    string application = 1 [(validate.rules).string.min_len = 1];
    string release_channel = 2 [(validate.rules).string.min_len = 1];
    string page_token = 3;
    int32 page_size = 4;
    bool order_by_desc_timestamp = 5;
}

message GetReleaseChannelEventsResp {
    repeated prodvana.events.Event events = 1;
    string next_page_token = 2;
}

service ReleaseChannelManager {
    rpc ConfigureReleaseChannel (ConfigureReleaseChannelReq) returns (ConfigureReleaseChannelResp) {
        option (google.api.http) = {
            post: "/v1/applications/{application=*}/release-channels/configure"
            body: "*"
        };
    }
    rpc ListReleaseChannels (ListReleaseChannelsReq) returns (ListReleaseChannelsResp) {
        option (google.api.http) = {
            get: "/v1/applications/{application=*}/release-channels"
        };
    }
    rpc DeleteReleaseChannel(DeleteReleaseChannelReq) returns (DeleteReleaseChannelResp) {
        option (google.api.http) = {
            delete: "/v1/release-channels/{release_channel=*}/delete"
        };
    }

    // identical to ListReleaseChannels, kept for backwards compatibility
    rpc ListReleaseChannelsV2 (ListReleaseChannelsReq) returns (ListReleaseChannelsResp) {
    }

    rpc GetReleaseChannel (GetReleaseChannelReq) returns (GetReleaseChannelResp) {
        option (google.api.http) = {
            get: "/v1/applications/{application=*}/release-channels/{release_channel=*}"
        };
    }

    rpc GetReleaseChannelConfig (GetReleaseChannelConfigReq) returns (GetReleaseChannelConfigResp) {
        option (google.api.http) = {
            get: "/v1/applications/{application=*}/release-channels/{release_channel=*}/config"
        };
    }

    rpc GetReleaseChannelEvents (GetReleaseChannelEventsReq) returns (GetReleaseChannelEventsResp) {
        option (google.api.http) = {
            get: "/v1/applications/{application=*}/release-channels/{release_channel=*}/events"
        };
    }
}
