syntax = "proto3";
package prodvana.service;
option go_package = "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/service";
import "google/api/annotations.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "prodvana/common_config/parameters.proto";
import "prodvana/service/service_config.proto";
import "prodvana/service/user_metadata.proto";
import "prodvana/service/object.proto";
import "prodvana/stat/efficiency.proto";
import "prodvana/metrics/metrics.proto";
import "prodvana/insights/insights.proto";
import "prodvana/repo/repo.proto";
import "prodvana/version/source_metadata.proto";
import "validate/validate.proto";

message ServiceConfigVersionReference {
    string application = 1; // TODO(naphat) unify with ConfigureServiceReq below
    string service = 2 [(validate.rules).string.min_len = 1];
    string service_config_version = 3 [(validate.rules).string.min_len = 1];
}

message ConfigureServiceReq {
    message PerReleaseChannel {
        string release_channel = 1 [(validate.rules).string.min_len = 1];
        // takes precedence over any parameters set at top level
        repeated prodvana.common_config.ParameterValue parameters = 2 [(validate.rules).repeated.items.message.required = true];
    }
    oneof oneof {
        option (validate.required) = true;
        ServiceConfig service_config = 1;
        ServiceConfigVersionReference service_config_version = 8;
    }
    repeated prodvana.common_config.ParameterValue parameters = 9 [(validate.rules).repeated.items.message.required = true];

    // skip any kind of attempts to contact container registry, e.g. to check if image exists or get program defaults
    bool test_only_skip_registry_check = 4;

    // application can be specified here or as part of service config
    string application = 5;

    prodvana.version.Source source = 6;
    prodvana.version.SourceMetadata source_metadata = 7;

    reserved 2, 3;
    reserved "release_channels", "compute_efficiency";

    // next tag: 10
}

message ConfigureServiceResp {
    string service_id = 1;
    string version = 2;

    // only set if compute_efficiency was set in request
    stat.EfficiencyStat efficiency_stat = 3;
}

message ValidateConfigureServiceResp {
    ServiceConfig config = 1;  // config as passed in by user
    ServiceConfig compiled_config = 2;  // config with defaults applied
    string app_version = 3; // the app version that is used for validation
    repeated CompiledServiceInstanceConfig compiled_service_instance_configs = 4; // compiled config per release channel, with per-release-channel overrides applied
}

message GetServiceConfigReq {
    string service = 1 [(validate.rules).string.min_len = 1];
    string version = 2; // omit to get latest version
    string application = 3;
}

message GetServiceConfigResp {
    ServiceConfig config = 1;  // config as passed in by user
    string version = 2;
    ServiceConfig compiled_config = 3;  // config with defaults applied
    repeated CompiledServiceInstanceConfig compiled_service_instance_configs = 4; // compiled config per release channel, with per-release-channel overrides applied
}

message DeleteServiceReq {
    string service = 1 [(validate.rules).string.min_len = 1];
    string application = 2;
}

message DeleteServiceResp {
}

message ListServicesReq {
    string application = 1 [(validate.rules).string.min_len = 1];
    bool detailed = 2; // if not set, only meta without version is returned
}

message ListServicesResp {
    repeated Service services = 1;
}

message GetServiceReq {
    string application = 1 [(validate.rules).string.min_len = 1];
    string service = 2 [(validate.rules).string.min_len = 1];
}

message GetServiceResp {
    Service service = 1;
}

message ListServiceInstancesReq {
    string application = 1 [(validate.rules).string.min_len = 1];
    string service = 2 [(validate.rules).string.min_len = 1];
}

message ListServiceInstancesResp {
    repeated ServiceInstance service_instances = 1;
}

message GetServiceInstanceReq {
    string application = 1 [(validate.rules).string.min_len = 1];
    string service = 2 [(validate.rules).string.min_len = 1];
    string release_channel = 3 [(validate.rules).string.min_len = 1];
}

message GetServiceInstanceResp {
    ServiceInstance service_instance = 1;
}

message GetServiceMetricsReq {
    string application = 1 [(validate.rules).string.min_len = 1];
    string service = 2 [(validate.rules).string.min_len = 1];
    google.protobuf.Timestamp start_timestamp = 3;
    google.protobuf.Timestamp end_timestamp = 4;
    bool include_cost = 5;
}

message GetServiceMetricsResp {
    prodvana.metrics.DeploymentMetrics deployment_metrics = 1;
    prodvana.metrics.Cost cost = 2;
}

message GetServiceInsightsReq {
    string application = 1 [(validate.rules).string.min_len = 1];
    string service = 2 [(validate.rules).string.min_len = 1];
}

message ListCommitsReq {
    string application = 1 [(validate.rules).string.min_len = 1];
    string service = 2 [(validate.rules).string.min_len = 1];
    string page_token = 3;
    int32 page_size = 4;
}

message ListCommitsResp {
    repeated prodvana.repo.Commit commits = 1;
    string next_page_token = 2;
}

message GetServiceInsightsResp {
    repeated prodvana.insights.Insight insights = 1;
}

message SnoozeServiceInsightReq {
    string application = 1 [(validate.rules).string.min_len = 1];
    string service = 2 [(validate.rules).string.min_len = 1];
    prodvana.insights.Class class = 3 [(validate.rules).enum.defined_only = true];
    google.protobuf.Duration duration = 4 [(validate.rules).duration = {
        required: true,
        gt: {
            seconds: 0,
        }
    }];
}

message SnoozeServiceInsightResp {
}

message GetServiceMetadataReq {
    string application = 1 [(validate.rules).string.min_len = 1];
    string service = 2 [(validate.rules).string.min_len = 1];
}

message GetServiceMetadataResp {
    // metadata with no variables substitution, no modifications from parents
    ServiceUserMetadata metadata = 1;
}

message SetServiceMetadataReq {
    string application = 1 [(validate.rules).string.min_len = 1];
    string service = 2 [(validate.rules).string.min_len = 1];
    ServiceUserMetadata metadata = 3 [(validate.rules).message.required = true];
}

message SetServiceMetadataResp {
}

message ListServiceVersionsReq {
    string application = 1 [(validate.rules).string.min_len = 1];
    string service = 2 [(validate.rules).string.min_len = 1];
    string page_token = 3;
    int32 page_size = 4;
}

message ListServiceVersionsResp {
    message VersionMetadata {
        string version = 1;
        google.protobuf.Timestamp creation_timestamp = 2;
    }
    repeated VersionMetadata versions = 1;
    string next_page_token = 2;
}

message ConfigureService2Req {
    string application = 1 [(validate.rules).string.min_len = 1];
    ServiceConfig service_config = 2 [(validate.rules).message.required = true];
    prodvana.version.Source source = 3;
    prodvana.version.SourceMetadata source_metadata = 4;
}

message ConfigureService2Resp {
    string service_id = 1;
    string config_version = 2;
}

message ListServiceConfigVersionsReq {
    string application = 1 [(validate.rules).string.min_len = 1];
    string service = 2 [(validate.rules).string.min_len = 1];
    string page_token = 3;
    int32 page_size = 4;
}

message ListServiceConfigVersionsResp {
    message VersionMetadata {
        string version = 1;
        google.protobuf.Timestamp creation_timestamp = 2;
    }
    repeated VersionMetadata versions = 1;
    string next_page_token = 2;
}

message GetServiceConfig2Req {
    string application = 1 [(validate.rules).string.min_len = 1];
    string service = 2 [(validate.rules).string.min_len = 1];
    string config_version = 3 [(validate.rules).string.min_len = 1];
}

message GetServiceConfig2Resp {
    ServiceConfig config = 1;
}

service ServiceManager {
    // TODO(naphat) rename this to ConfigureService
    rpc ConfigureService2 (ConfigureService2Req) returns (ConfigureService2Resp) {
        option (google.api.http) = {
            post: "/v1/{application=*}/services/configure2"
            body: "*"
        };
    }
    rpc ListServiceConfigVersions (ListServiceConfigVersionsReq) returns (ListServiceConfigVersionsResp) {
        option (google.api.http) = {
            get: "/v1/{application=*}/services/{service=*}/config2"
        };
    }
    rpc GetServiceConfig2 (GetServiceConfig2Req) returns (GetServiceConfig2Resp) {
        option (google.api.http) = {
            get: "/v1/{application=*}/services/{service=*}/config2/{config_version=*}"
        };
    }
    // TODO(naphat) rename this to ApplyParameters
    rpc ConfigureService (ConfigureServiceReq) returns (ConfigureServiceResp) {
        option (google.api.http) = {
            post: "/v1/{application=*}/services/configure"
            body: "*"
        };
    }
    rpc ValidateConfigureService (ConfigureServiceReq) returns (ValidateConfigureServiceResp) {
        option (google.api.http) = {
            post: "/v1/{application=*}/services/configure/validate"
            body: "*"
        };
    }
    // TODO(naphat) rename this to GetServiceVersion and make it specifically about materialized versions
    rpc GetServiceConfig(GetServiceConfigReq) returns (GetServiceConfigResp) {
        option (google.api.http) = {
            get: "/v1/{application=*}/services/{service=*}/config"
        };
    }
    rpc ListServiceVersions(ListServiceVersionsReq) returns (ListServiceVersionsResp) {
        option (google.api.http) = {
            get: "/v1/{application=*}/services/{service=*}/versions"
        };
    }
    rpc DeleteService(DeleteServiceReq) returns (DeleteServiceResp) {
        option (google.api.http) = {
            delete: "/v1/{application=*}/services/{service=*}/delete"
        };
    }

    rpc ListServices(ListServicesReq) returns (ListServicesResp) {
        option (google.api.http) = {
            get: "/v1/applications/{application=*}/services"
        };
    }
    // identical to ListServices, kept around for compatibility purposes
    rpc ListServicesV2(ListServicesReq) returns (ListServicesResp) {
    }
    rpc ListCommits(ListCommitsReq) returns (ListCommitsResp) {
        option (google.api.http) = {
            get: "/v1/applications/{application=*}/services/{service=*}/commits"
        };
    }
    rpc GetService(GetServiceReq) returns (GetServiceResp) {
        option (google.api.http) = {
            get: "/v1/applications/{application=*}/services/{service=*}"
        };
    }
    // identical to GetService, kept around for compatibility purposes
    rpc GetServiceV2(GetServiceReq) returns (GetServiceResp) {
    }
    rpc ListServiceInstances(ListServiceInstancesReq) returns (ListServiceInstancesResp) {
        option (google.api.http) = {
            get: "/v1/applications/{application=*}/services/{service=*}/release-channels"
        };
    }
    // identical to ListServiceInstances, kept around for compatibility purposes
    rpc ListServiceInstancesV2(ListServiceInstancesReq) returns (ListServiceInstancesResp) {
    }
    rpc GetServiceInstance(GetServiceInstanceReq) returns (GetServiceInstanceResp) {
        option (google.api.http) = {
            get: "/v1/applications/{application=*}/services/{service=*}/release-channels/{release_channel=*}"
        };
    }
    // identical to GetServiceInstance, kept around for compatibility purposes
    rpc GetServiceInstanceV2(GetServiceInstanceReq) returns (GetServiceInstanceResp) {
    }
    rpc GetServiceMetrics(GetServiceMetricsReq) returns (GetServiceMetricsResp) {
        option (google.api.http) = {
            get: "/v1/applications/{application=*}/services/{service=*}/metrics"
        };
    }
    rpc GetServiceInsights(GetServiceInsightsReq) returns (GetServiceInsightsResp) {
        option (google.api.http) = {
            get: "/v1/applications/{application=*}/services/{service=*}/insights"
        };
    }
    rpc SnoozeServiceInsight(SnoozeServiceInsightReq) returns (SnoozeServiceInsightResp) {
        option (google.api.http) = {
            put: "/v1/applications/{application=*}/services/{service=*}/insights/snooze"
        };
    }
    rpc GetServiceMetadata(GetServiceMetadataReq) returns (GetServiceMetadataResp) {
        option (google.api.http) = {
            get: "/v1/applications/{application=*}/services/{service=*}/metadata"
        };
    }
    rpc SetServiceMetadata(SetServiceMetadataReq) returns (SetServiceMetadataResp) {
        option (google.api.http) = {
            post: "/v1/applications/{application=*}/services/{service=*}/metadata"
            body: "*"
        };
    }
}
