syntax = "proto3";
package prodvana.desired_state.model;
option go_package = "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/desired_state/model";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "validate/validate.proto";
import "prodvana/common_config/program.proto";
import "prodvana/common_config/retry.proto";
import "prodvana/protection/protection_reference.proto";

enum Type {
    UNKNOWN = 0;
    SERVICE = 1;
    SERVICE_INSTANCE = 2;
    SERVICE_GROUP = 3;
    RUNTIME_OBJECT = 4;
    MANUAL_APPROVAL = 5;
    CUSTOM_TASK = 6;
    PROTECTION_ATTACHMENT = 7;
    PROTECTION_LINK = 8;
}

enum CustomTaskType {
    CUSTOM_TASK_TYPE_UNKNOWN = 0;
    // Runs before everything else. May wait for any dependent RCs to be stable.
    PRE_APPROVAL_TASK = 1;
    // Approval tasks, manual or automated. Must wait for all PRE_APPROVAL_TASK to be satisfied.
    APPROVAL = 2;
    // Runs after approval, just before service push.
    POST_APPROVAL_TASK = 3;
    // Runs as long as service push is in progress.
    PUSH_TASK = 4;
    // Runs after service push succeeds (pods are replaced and healthy, ...), before declaring the service CONVERGED.
    POST_PUSH_TASK = 5;
}

message ProtectionLink {
    prodvana.protection.ProtectionLifecycle lifecycle = 3;
    string attachment_id = 4;

    reserved 1, 2;
    // next tag: 5
}

message Condition {
    // TODO(naphat) conditions need health
    message ReleaseChannelStableCondition {
        string application = 1;
        string service = 2; // service name or id
        string service_id = 3; // service id, normalized. Set internally by Prodvana
        string release_channel = 4; // release channel name or id
        string release_channel_id = 5; // release channel id, normalized. Set internally by Prodvana
        string service_version = 6;
    }

    message ManualApproval {
        string topic = 1;
    }

    message CustomTaskSuccessfulCondition {
        message Protection {
            string name = 1;
            CustomTaskType task_type = 3;
        }

        string custom_task_name = 1;
        oneof source {
            Protection protection = 2;
        }
    }

    oneof condition {
        ReleaseChannelStableCondition rc_cond = 1;
        ManualApproval manual_approval = 2;
        CustomTaskSuccessfulCondition custom_task = 3;
    }

    // Generated during SetDesiredState.
    // Do not set as part of input unless reusing an existing precondition, e.g., patching an existing desired state without regenerating some preconditions.
    string desired_state_id = 4;
}

message Identifier {
    Type type = 1;
    // globally unique identifier
    string name = 2;
}

message Metadata {
    repeated Condition preconditions = 1;
    repeated Condition invariants = 2;
    Identifier self = 3;
    string desired_state_id = 4;
    string root_desired_state_id = 5;
    repeated ProtectionLink protection_links = 6;
    repeated ProtectionAttachment protections = 7;
}

enum Status {
    UNKNOWN_STATUS = 0;
    CONVERGING = 1;
    CONVERGED = 2;
    FAILED = 3;
    ROLLING_BACK = 4;
    ROLLED_BACK = 5;
    PAUSED = 6;
    CHILD_PAUSED = 7; // entity itself not paused, but one of its children is paused, so it is not making any progress
    WAITING_PRECONDITIONS = 8; // Waiting for non-manual approval preconditions
    REPLACED = 9;
    WAITING_MANUAL_APPROVAL = 10; // Waiting only for manual approval
    DELETED = 11;
}

enum SimpleStatus {
    SS_UNKNOWN = 0;
    SS_CONVERGING = 1;
    SS_CONVERGED = 2;
    SS_FAILED = 3;
}

enum StatusReason {
    REASON_UNKNOWN = 0;
    // Prodvana has not fetched the data it needs to act on the entity
    NO_CURRENT_STATE = 1;
    // the command to apply target state failed
    APPLY_FAILED = 2;
    // unhealthy pods detected
    UNHEALTHY_PODS = 3;
    // pods are being updated
    UPDATING_PODS = 4;
    // no update in progress, but there are pods on the wrong version. This could be a transient state with the runtime, or something was updated out of band
    VERSION_MISMATCH = 5;
    // after applying successfully, the object arrived at a failed state
    RUNTIME_OBJECT_FAILED = 6;
    // a precondition failed in an unrecoverable way
    PRECONDITIONS_FAILED = 7;
    MANUAL_APPROVAL_REJECTED = 8;
    // Entity has not been updated in a long time
    STUCK_ENTITY = 9;
}

message StatusExplanation {
    Identifier subject = 1;  // the id of the object that resulted in this status. In the case of parent entities, this may be one of the child entities, or itself.
    StatusReason reason = 2;
    // Optional freeform message to be shown to the user alongside reason.
    // only one of the two will be set
    string message = 3;
    repeated string messages = 4;
}

enum ActionType {
    ACTION_TYPE_UNKNOWN = 0;
    // DD is currently apply target state - if its doing this for too long, probably means apply is stuck.
    ACTION_TYPE_APPLYING = 1;
    // DD has applied target state - waiting for object to converge.
    ACTION_TYPE_APPLIED = 2;
    // Reached terminal state - DD is doing nothing further.
    ACTION_TYPE_COMPLETE = 3;
}

// What action is DD taking now?
message ActionExplanation {
    google.protobuf.Timestamp ts = 1;
    ActionType action_type = 2;
    string message = 3;
}

message Version {
    string service_version = 1;
    int32 replicas = 2; // Created/running replicas, can be in any state
    int32 available_replicas = 8; // Replicas which have passed healthchecks for required duration.
    google.protobuf.Timestamp push_timestamp = 4;
    // A version is active if it is the version in which the underlying object is converging to.
    // A runtime object will have exactly one active version, while a service instance may have one or more
    // depending on if it maps to more than one runtime object.
    bool active = 5;
    int32 target_replicas = 6;

    reserved 3, 7;
    reserved "unhealthy", "unhealthy_reasons";

    // next tag: 9
}

message ServiceInstanceState {
    Metadata meta = 1;
    string application = 2;
    string service = 3;
    string release_channel = 4;
    string service_id = 8;  // set internally by prodvana
    string release_channel_id = 9;  // set internally by prodvana
    repeated Version versions = 5;
    Version rollback_version = 6;
    bool rollback = 7;
    DeliveryState delivery = 10;

    // next tag: 11
}

message ServiceState {
    Metadata meta = 1;
    string application = 2;
    string service = 3;
    string service_id = 5;  // set internally by prodvana
    repeated ServiceInstanceState release_channels = 6;
    // Definitions for custom tasks used by this service. Must be empty if part of service group.
    repeated CustomTaskState custom_tasks = 7;
    reserved 4, 8;
    // next tag: 9
}

message ServiceGroupState {
    Metadata meta = 1;
    repeated ServiceState services = 2;
    // Definitions for custom tasks used by this service group.
    repeated CustomTaskState custom_tasks = 3;
    reserved 4;
    // next tag: 5
}

message CanaryProgressState {
    enum Status {
        UNKNOWN = 0;
        PENDING = 1;
        PAUSED = 2;
        COMPLETED = 3;
    }
    Status status = 1;
    // current canary weight
    int32 canary_weight = 2 [(validate.rules).int32 = { gte: 0,  lte: 100 }];
    // pause duration at this weight before advancing
    google.protobuf.Duration duration = 3;
    // when status = PAUSED this indicates when the pause started
    google.protobuf.Timestamp pause_start_timestamp = 4;
}

message DeliveryState {
    enum Status {
        STATUS_UNKNOWN = 0;
        STATUS_PROGRESSING = 1;
        STATUS_PAUSED = 2;
        STATUS_HEALTHY = 3;
        STATUS_UNHEALTHY = 4;
    }
    string desired_state_id = 12;
    // overall delivery status
    Status status = 8;
    // human readable message from the delivery controller
    string message = 6;
    // current state of all Canary progression
    repeated CanaryProgressState canary_progress = 11;
    bool first_run = 13;
    // string unique to each PD controller convergence,
    // e.g. when Argo Rollouts starts a new rollout, this will change.
    string generation = 14;

    reserved 1, 2, 3,  4, 5, 7, 9, 10;

    // next: 14
}

message RuntimeObject {
    Metadata meta = 1;
    string object_type = 2;
    string namespace = 3;
    string name = 4;
    enum Status {
        PENDING = 0;
        SUCCEEDED = 1;
        FAILED = 2;
    }
    repeated Version versions = 5;
    Status status = 6;
    Version rollback_version = 7;
    DeliveryState delivery = 8;
    bool version_agnostic = 10; // This object just needs to exist - it doesn't change from version to version
    bytes state_hash = 11; // Some deterministic summary which can be used to detect if state has changed (to determine if LogDebugInfo should be called)
    string message = 12; // Human readable message (typically for errors).

    reserved 9;
    reserved "unhealthy_pods";
}

enum ConditionStatus {
    CONDITION_UNKNOWN_STATUS = 0;
    CONDITION_PENDING = 1;
    CONDITION_SATISFIED = 2;
    CONDITION_MANUALLY_BYPASSED = 3;
    CONDITION_FAILED = 4;
}

message ConditionState {
    ConditionStatus status = 1;
}

message ControlState {
    bool rollback = 1;
    repeated ConditionState precondition_states = 2;
    repeated ConditionState invariant_states = 3;
    // An entity is paused if itself or any of its ancestors have paused field set.
    // Unlike rollback, this field does not get propagated to children.
    // Doing so would make to differentiate unpausing vs. the field not being set,
    // especially if pausing can happen at any layer.
    bool paused = 4;

    // explanation for current status, will have more than one in the event multiple children have the same status
    repeated StatusExplanation status_explanations = 5;

    // What is DD doing now?
    ActionExplanation action_explanation = 6;
}

enum ManualApprovalStatus {
    PENDING = 0;
    APPROVED = 1;
    REJECTED = 2;
}

message ManualApprovalState {
    Metadata meta = 1;
    ManualApprovalStatus status = 2;
    string topic = 3;
}

message State {
    oneof state_oneof {
        ServiceState service = 1;
        ServiceInstanceState service_instance = 2;
        ServiceGroupState service_group = 3;
        RuntimeObject runtime_object = 4;
        ManualApprovalState manual_approval = 5;
        CustomTaskState custom_task = 6;
        ProtectionAttachment protection_attachment = 7;
        ProtectionLinkState protection_link = 8;
    }
}

message Annotations {
    message Annotation {
        string key = 1;
        string value = 2;
    }
    repeated Annotation annotations = 1;
}

enum CustomTaskStatus {
    CUSTOM_TASK_PENDING = 0;
    CUSTOM_TASK_SUCCESSFUL = 1;
    CUSTOM_TASK_RETRIES_EXHAUSTED = 2;
    CUSTOM_TASK_TIMED_OUT = 3;
}

message CustomTaskExecutionState {
    CustomTaskStatus status = 1;
    int64 attempts = 2;
    google.protobuf.Timestamp latest_attempt_end_timestamp = 3;
}

message CustomTaskState {
    Metadata meta = 1;
    string name = 2 [(validate.rules).string.min_len = 1];
    string description = 3 [(validate.rules).string.min_len = 1];
    string application = 4;
    string application_id = 5;
    string release_channel = 6;
    string release_channel_id = 7;

    prodvana.common_config.ProgramConfig program = 9 [(validate.rules).message.required = true];
    CustomTaskExecutionState task_state = 12;
    // if not set, the custom task will not be retried once it starts executing once.
    prodvana.common_config.RetryConfig retry_config = 13;

    repeated string service_ids = 14;

    reserved 8, 10, 11;
}

message ProtectionLinkState {
    Metadata meta = 1;
    ConditionStatus status = 2;
    // Copy of ProtectionLink description. Used in FetchState to know retries, durations etc.
    ProtectionLink link = 3;

    // When did we start polling this protection? If not set, this protection has not started polling.
    google.protobuf.Timestamp started_timestamp = 4;

    // When did we stop polling this protection? If set, this protection will no longer change status (except to be manually bypassed).
    google.protobuf.Timestamp stopped_timestamp = 5;
    enum StopReason {
        UNKNOWN = 0;
        LIFECYCLE_COMPLETED = 1;
        SUCCEEDED_ONCE = 2;
        SUCCEEDED_FOR_DURATION = 3;
        TIMED_OUT = 4;
        FAILED = 5;
    }
    StopReason stopped_reason = 6;

    // Will be set the first time this attachment returned success.
    // Useful for time-based protections (post-push - check X succeeds for N mins). We make the ProtectionLink return CONVERGING till time expires.
    google.protobuf.Timestamp first_success_timestamp = 7;
}

message ProtectionAttachment {
    Metadata meta = 1;
    repeated Version versions = 2;
    repeated Version last_completed_versions = 5;
    google.protobuf.Timestamp last_completed_timestamp = 6;
    SimpleStatus last_completed_status = 7;
    repeated StatusExplanation last_completed_status_explanations = 8;
    string last_completed_applied_version = 9;
    string protection_id = 3;
    string attachment_id = 4;
    // next tag: 9
}

enum SignalType {
    SIGNAL_UNKNOWN = 0;
    DELIVERY_PROMOTION = 1;
}

message Signal {
    SignalType type = 1;

    message DeliveryPromotionConfig {
        // which canary progress stage to promote
        int64 stage = 1;
        // when true, indicates delivery should be promoted fully, e.g. 100%
        bool full = 2;
    }

    oneof config {
        DeliveryPromotionConfig delivery_promotion = 2;
    }
}

message DebugLog {
    google.protobuf.Timestamp ts = 1;
    string log = 2;
}
