syntax = "proto3";
package prodvana.desired_state.model;
option go_package = "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/desired_state/model";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "validate/validate.proto";
import "vtproto/ext.proto";
import "prodvana/common_config/external_link.proto";
import "prodvana/common_config/parameters.proto";
import "prodvana/common_config/program.proto";
import "prodvana/common_config/retry.proto";
import "prodvana/common_config/task.proto";
import "prodvana/environment/clusters.proto";
import "prodvana/protection/protection_reference.proto";
import "prodvana/pvn_wrapper/output.proto";
import "prodvana/runtimes/extensions/fetch.proto";
import "prodvana/runtimes/debug_event.proto";
import "prodvana/version/source_metadata.proto";

enum Type {
    UNKNOWN = 0;
    SERVICE = 1;
    SERVICE_INSTANCE = 2;
    SERVICE_GROUP = 3;
    RUNTIME_OBJECT = 4;
    MANUAL_APPROVAL = 5;
    CUSTOM_TASK = 6;
    PROTECTION_ATTACHMENT = 7;
    PROTECTION_LINK = 8;
    DELIVERY_EXTENSION = 9;
}

enum CustomTaskType {
    CUSTOM_TASK_TYPE_UNKNOWN = 0;
    // Runs before everything else. May wait for any dependent RCs to be stable.
    PRE_APPROVAL_TASK = 1;
    // Approval tasks, manual or automated. Must wait for all PRE_APPROVAL_TASK to be satisfied.
    APPROVAL = 2;
    // Runs after approval, just before service push.
    POST_APPROVAL_TASK = 3;
    // Runs as long as service push is in progress.
    DEPLOYMENT_TASK = 4;
    // Runs after service push succeeds (pods are replaced and healthy, ...), before declaring the service CONVERGED.
    POST_DEPLOYMENT_TASK = 5;
}

message ProtectionLink {
    prodvana.protection.ProtectionLifecycle lifecycle = 3;
    string attachment_id = 4;

    reserved 1, 2;
    // next tag: 5
}

message Condition {
    // TODO(naphat) conditions need health
    message ReleaseChannelStableCondition {
        string application = 1;
        string service = 2; // service name or id
        string service_id = 3; // service id, normalized. Set internally by Prodvana
        string release_channel = 4; // release channel name or id
        string release_channel_id = 5; // release channel id, normalized. Set internally by Prodvana
        string service_version = 6;
        // Set internally by Prodvana. If true, this condition has already been satisfied, but the
        // dependent release channel has been replaced with a new service version.
        // If set, this condition should be considered satisfied immediately.
        bool internal_only_satisfied_in_replaced_desired_state = 7;
    }

    message ManualApproval {
        string topic = 1;
        string description = 2;
        int32 min_approvers = 3;
    }

    message CustomTaskSuccessfulCondition {
        message Protection {
            string name = 1;
            CustomTaskType task_type = 3;
        }

        string custom_task_name = 1;
        oneof source {
            Protection protection = 2;
        }
    }

    oneof condition {
        ReleaseChannelStableCondition rc_cond = 1;
        ManualApproval manual_approval = 2;
        CustomTaskSuccessfulCondition custom_task = 3;
    }

    // Generated during SetDesiredState.
    // Do not set as part of input unless reusing an existing precondition, e.g., patching an existing desired state without regenerating some preconditions.
    string desired_state_id = 4;
}

message DeliveryExtension {
    string instance_id = 1;
    prodvana.common_config.TaskLifecycle lifecycle = 2;
    repeated Identifier references = 3;
}

message ProtectionAttachmentDefinition {
    string protection_id = 1;
    string attachment_id = 2;
    string protection_version = 3;
    // next tag: 4
}

message Identifier {
    Type type = 1;
    // globally unique identifier
    string name = 2;
}

message ConcurrencyLimit {
    string limit_id = 1;
    string description = 2;
}

message Metadata {
    repeated Condition preconditions = 1;
    repeated Condition invariants = 2;
    Identifier self = 3;
    string desired_state_id = 4;
    string root_desired_state_id = 5;
    string release_id = 14;
    repeated ProtectionLink protection_links = 6;
    repeated DeliveryExtension delivery_extensions = 8;
    repeated ProtectionAttachmentDefinition convergence_protection_attachments = 13;
    repeated ConcurrencyLimit concurrency_limits = 15;
    // if true, the entity does not set its own target state. instead, the target state will be set when the parent decides to set target state.
    bool target_state_set_by_parent = 9;
    bool require_approval_before_apply = 10;
    bool applies_in_observer_mode = 11;

    // How long after apply ran the first time should it be restarted if the entity still has not converged.
    // This duration is computed from the *start* of apply run.
    google.protobuf.Duration convergence_grace_period = 12;

    reserved 7;
    reserved "protections";

    // next tag: 16
}

enum Status {
    UNKNOWN_STATUS = 0;
    CONVERGING = 1;
    CONVERGED = 2;
    FAILED = 3;
    ROLLING_BACK = 4;
    ROLLED_BACK = 5;
    FAILED_ROLLBACK = 12;
    PAUSED = 6;
    CHILD_PAUSED = 7; // entity itself not paused, but one of its children is paused, so it is not making any progress
    WAITING_PRECONDITIONS = 8; // Waiting for non-manual approval preconditions
    REPLACED = 9;
    WAITING_MANUAL_APPROVAL = 10; // Waiting only for manual approval
    DELETED = 11;
    PREVIEW = 13; // status for all entities in a preview desired state. will never show up in a real desired state.
    PENDING_SET_DESIRED_STATE = 14;
    BLOCKED = 15;
    // next tag: 16
}

enum SimpleStatus {
    SS_UNKNOWN = 0;
    SS_CONVERGING = 1;
    SS_CONVERGED = 2;
    SS_FAILED = 3;
    SS_WAITING_FOR_APPROVAL = 4;

    // next tag: 5
}

enum StatusReason {
    REASON_UNKNOWN = 0;
    // Prodvana has not fetched the data it needs to act on the entity
    NO_CURRENT_STATE = 1;
    // the command to apply target state failed
    APPLY_FAILED = 2;
    // unhealthy pods detected
    UNHEALTHY_PODS = 3;
    // pods are being updated
    UPDATING_PODS = 4;
    // no update in progress, but there are pods on the wrong version. This could be a transient state with the runtime, or something was updated out of band
    VERSION_MISMATCH = 5;
    // after applying successfully, the object arrived at a failed state
    RUNTIME_OBJECT_FAILED = 6;
    // a precondition failed in an unrecoverable way
    PRECONDITIONS_FAILED = 7;
    MANUAL_APPROVAL_REJECTED = 8;
    // Entity has not been updated in a long time
    STUCK_ENTITY = 9;
    // the active version is explicitly marked as dirty
    VERSION_DIRTY = 10;
    // the Runtime indicated an apply is needed
    RUNTIME_OBJECT_APPLY_NEEDED = 11;
    // one of protections or convergence extensions are either failing or pending
    LIFECYCLE_CHECK_FAILED = 13;
    LIFECYCLE_CHECK_PENDING = 14;

    CONCURRENCY_LIMIT_EXCEEDED = 15;
    RELEASE_CHANNEL_DEPENDENCY_UNMET = 16;

    // next tag: 17
}

message StatusExplanation {
    Identifier subject = 1;  // the id of the object that resulted in this status. In the case of parent entities, this may be one of the child entities, or itself.
    string desired_state_id = 5; // desired state id of the subject
    Identifier service_instance = 6; // if set, the service instance ID that the explanation got rolled up through.
    StatusReason reason = 2;
    // Optional freeform message to be shown to the user alongside reason.
    // only one of the two will be set
    string message = 3;
    repeated string messages = 4;
    // next tag: 7
}

enum ActionType {
    ACTION_TYPE_UNKNOWN = 0;
    // DD is currently apply target state - if its doing this for too long, probably means apply is stuck.
    ACTION_TYPE_APPLYING = 1;
    // DD has applied target state - waiting for object to converge.
    ACTION_TYPE_APPLIED = 2;
    // Reached terminal state - DD is doing nothing further.
    ACTION_TYPE_COMPLETE = 3;
}

// What action is DD taking now?
message ActionExplanation {
    google.protobuf.Timestamp ts = 1;
    ActionType action_type = 2;
    string message = 3;
}

message Version {
    string version = 1;
    int32 replicas = 2; // Created/running replicas, can be in any state
    int32 available_replicas = 8; // Replicas which have passed healthchecks for required duration.
    google.protobuf.Timestamp push_timestamp = 4;
    // A version is active if it is the version in which the underlying object is converging to.
    // A runtime object will have exactly one active version, while a service instance may have one or more
    // depending on if it maps to more than one runtime object.
    bool active = 5;
    int32 target_replicas = 6;
    // A version is dirty if its state no longer matches desired state and must be fixed by a redeploy.
    // For example, a terraform version is dirty if its plan output returns differences.
    // DD will only take action on dirty if the version is also active.
    bool dirty = 9;

    bool skip_in_ui = 10;

    reserved 3, 7;
    reserved "unhealthy", "unhealthy_reasons";

    // next tag: 10
}

message ServiceInstanceState {
    Metadata meta = 1 [(vtproto.unstable_for_equal) = true];
    string application = 2;
    string service = 3;
    string release_channel = 4;
    string service_id = 8;  // set internally by prodvana
    string release_channel_id = 9;  // set internally by prodvana
    repeated Version versions = 5;
    oneof autorollback_oneof {
        // set an explicit auto rollback version
        Version rollback_version = 6;
        // use the last converged version as the auto rollback version
        // will not do anything if the *latest* service config has auto rollback disabled
        bool compute_rollback_version = 11;
    }
    bool rollback = 7;
    DeliveryState delivery = 10;

    bool deployment_owned_by_children = 12; // used internally by prodvana. If set, the deployment action (apply) is done by the children, not by the Service Instance itself.
    string autorollback_disabled_reason = 13; // used internally by Prodvana. For display purposes only.

    bool needs_apply = 14;

    // next tag: 15
}

message ServiceState {
    Metadata meta = 1 [(vtproto.unstable_for_equal) = true];
    string application = 2;
    string service = 3;
    string service_id = 5;  // set internally by prodvana
    repeated ServiceInstanceState release_channels = 6;
    // Definitions for custom tasks used by this service. Must be empty if part of service group.
    repeated CustomTaskState custom_tasks = 7;
    repeated DeliveryExtensionState delivery_extensions = 9;

    // in leau of listing out individual release channels, specify versions for release channels using label selectors instead.
    // This can only be used as input to SetDesiredState and will never be returned as output from a convergence summary.
    repeated ServiceInstanceLabelSelector release_channel_label_selectors = 10;

    reserved 4, 8;
    // next tag: 11
}

message ServiceInstanceLabelSelector {
    oneof selector_oneof {
        option (validate.required) = true;
        string release_channel_selector = 1;  // release channel selector, automatically scoped to `@type=release-channel @application=<app>`
        bool all = 2; // target all release channels
    }

    repeated Version versions = 3;
    oneof autorollback_oneof {
        // set an explicit auto rollback version
        Version rollback_version = 4;
        // use the last converged version as the auto rollback version
        bool compute_rollback_version = 5;
    }

    // set internally by Prodvana in compiled desired state to track what this selector evaluated to. This includes all release channels,
    // including ones that would be overridden by something else.
    repeated string materialized_release_channels = 6;
}

message ServiceGroupState {
    Metadata meta = 1 [(vtproto.unstable_for_equal) = true];
    repeated ServiceState services = 2;
    // Definitions for custom tasks used by this service group.
    repeated CustomTaskState custom_tasks = 3;
    repeated DeliveryExtensionState delivery_extensions = 5;
    reserved 4;
    // next tag: 6
}

message CanaryProgressState {
    enum Status {
        UNKNOWN = 0;
        PENDING = 1;
        PAUSED = 2;
        COMPLETED = 3;
    }
    Status status = 1;
    // current canary weight
    int32 canary_weight = 2 [(validate.rules).int32 = { gte: 0,  lte: 100 }];
    // pause duration at this weight before advancing
    google.protobuf.Duration duration = 3;
    // when status = PAUSED this indicates when the pause started
    google.protobuf.Timestamp pause_start_timestamp = 4;
}

message BlueGreenProgressState {
    enum Status {
        UNKNOWN = 0;
        PENDING = 1;
        SCALING_UP = 2;
        PAUSED_PREVIEW = 3;
        SCALING_DOWN = 4;
        COMPLETED = 5;
        ABORTED = 6;
    }

    Status status = 1;
}

message DeliveryState {
    enum Status {
        STATUS_UNKNOWN = 0;
        STATUS_PROGRESSING = 1;
        STATUS_PAUSED = 2;
        STATUS_HEALTHY = 3;
        STATUS_UNHEALTHY = 4;
    }
    string desired_state_id = 12;
    // overall delivery status
    Status status = 8;
    // human readable message from the delivery controller
    string message = 6;
    // current state of all Canary progression
    repeated CanaryProgressState canary_progress = 11;
    bool first_run = 13;
    // string unique to each PD controller convergence,
    // e.g. when Argo Rollouts starts a new rollout, this will change.
    string generation = 14;

    BlueGreenProgressState blue_green_progress = 15;

    reserved 1, 2, 3, 4, 5, 7, 9, 10;

    // next: 16
}

message FetchDetails {
    enum FetchStatus {
        UNKNOWN = 0;
        DRIFTED = 1;
        CONVERGED = 2;
        FAILED = 3;
    }
    // when the fetch job started
    google.protobuf.Timestamp started_timestamp = 1;
    // when the fetch job completed
    google.protobuf.Timestamp completed_timestamp = 2;
    // for fetch commands that return a plan, this is the plan blob id
    string fetch_plan_blob_id = 3 [(vtproto.unstable_for_equal) = true]; // optional
    // additionally, for fetch commands that return a plan with a separate explanation text, this is the explanation blob id
    string fetch_plan_explanation_blob_id = 4 [(vtproto.unstable_for_equal) = true]; // optional
    // the version of the service associated with this fetch run
    string version = 5;
    // the resulting versions computed from the fetch.
    // for exit code, this is always going to match version but with a dirty bit set
    // for structured output, this is whatever the fetch returns.
    repeated Version versions = 10 [(vtproto.unstable_for_equal) = true];
    RuntimeObject.Status runtime_object_status = 11 [(vtproto.unstable_for_equal) = true];
    repeated prodvana.runtimes.extensions.ExternalObject external_objects = 12 [(vtproto.unstable_for_equal) = true];
    FetchStatus fetch_status = 6;
    string fetcher_desired_state_id = 7;
    // freeform message from the convergence engine explaining the fetch result
    string message = 8 [(vtproto.unstable_for_equal) = true];
    prodvana.runtimes.extensions.FetchMode fetch_mode = 9;
    // the run of the fetch task
    TaskRun task_run = 13 [(vtproto.unstable_for_equal) = true];
    // next tag: 14
}

message RuntimeExtensionFetchOutput {
    // details of an actively executing fetch, may be null if no fetch is currently executing
    FetchDetails ongoing_fetch = 8;
    // details of the last fetch that completed successfully (as in, either DRIFTED or CONVERGED), may be null if no fetch has ever executed
    FetchDetails last_successful_fetch = 9;
    // if the latest completed fetch is FAILED, then it is stored here.
    // if the latest completed fetch is not FAILED, then this is null.
    FetchDetails last_failed_fetch = 10;

    reserved 1, 2, 3, 4, 5, 6, 7;
    reserved "fetch_plan_blob_id", "fetch_plan_explanation_blob_id", "version", "fetch_status", "started_timestamp", "completed_timestamp";

    // next tag: 11
}

message RuntimeExtensionGetInfoOutputContent {
    string name = 1;
    string blob_id = 2;
}

message RuntimeExtensionGetInfoDetails {
    enum Status {
        UNKNOWN = 0;
        CONVERGED = 1;
        FAILED = 2;
    }
    // system message generated by prodvana
    string system_message = 1 [(vtproto.unstable_for_equal) = true];
    // output from user process
    repeated RuntimeExtensionGetInfoOutputContent contents = 2;
    Status status = 3;
    // when the debug job started
    google.protobuf.Timestamp started_timestamp = 4;
    // when the debug job completed
    google.protobuf.Timestamp completed_timestamp = 5;
    // the version of the service associated with this debug run
    string version = 6;
}

message RuntimeExtensionGetInfoOutput {
    RuntimeExtensionGetInfoDetails get_info_details = 1;
}

message ApplyDetails {
    enum ApplyStatus {
        UNKNOWN = 0;
        CONVERGED = 1;
        FAILED = 2;
        RETRYABLE = 3;
    }
    // when the apply job started
    google.protobuf.Timestamp started_timestamp = 1;
    // when the apply job completed
    google.protobuf.Timestamp completed_timestamp = 2;
    // the version of the service associated with this apply run
    string version = 3;
    ApplyStatus apply_status = 4;
    // the fetch details used for this particular apply, including any plan id
    FetchDetails fetch_details = 5;
    // why did Prodvana decide to run apply?
    string has_work_reason = 7 [(vtproto.unstable_for_equal) = true];
    // the run of the fetch task
    TaskRun task_run = 8 [(vtproto.unstable_for_equal) = true];
    reserved 6;
    reserved "aggregate_object_snapshot";
}

message RuntimeExtensionApplyOutput {
    // details of an actively executing apply, may be null if no apply is currently executing
    ApplyDetails ongoing_apply = 1;
    // details of the last apply that completed, may be null if no apply has ever executed
    ApplyDetails last_apply = 2;
}

message RuntimeObject {
    message RuntimeExtension {
        // aggregate object will have all commands set. fetch and get_info will only have appropriate commands set.
        prodvana.environment.CompiledExtensionCommand apply = 3;
        prodvana.environment.CompiledExtensionCommand fetch = 1;
        prodvana.environment.CompiledExtensionCommand get_info = 17;
        google.protobuf.Duration fetch_interval = 4;
        google.protobuf.Duration fetch_steady_state_interval = 11;
        google.protobuf.Duration get_info_interval = 19;
        string service_id = 2;
        string release_channel_id = 6;
        repeated prodvana.common_config.ParameterDefinition parameters = 7;
        repeated prodvana.common_config.ParameterValue parameter_values = 8;
        prodvana.environment.ExtensionType type = 9;
        RuntimeExtensionFetchOutput fetch_output = 10;
        RuntimeExtensionGetInfoOutput get_info_output = 16;
        RuntimeExtensionApplyOutput apply_output = 12;
        prodvana.environment.RetryPolicy fetch_retry_policy = 13;
        prodvana.environment.RetryPolicy apply_retry_policy = 14;
        prodvana.environment.RetryPolicy get_info_retry_policy = 18;
        repeated int32 apply_retryable_exit_codes = 15;
        prodvana.runtimes.extensions.FetchMode fetch_mode = 20;
        reserved 5;
        reserved "fetch_timeout";
        // next tag: 21
    }
    Metadata meta = 1 [(vtproto.unstable_for_equal) = true];
    string object_type = 2;
    string namespace = 3;
    string name = 4;
    string generate_name = 24; // if set, this runtime object will have a name that is generated at creation time, by the runtime implementation
    enum Status {
        PENDING = 0;
        SUCCEEDED = 1;
        FAILED = 2;
    }
    repeated Version versions = 5;
    Version fetch_version = 29; // if set, this is the version of the fetch command that resulted in the rest of this object
    string apply_id = 34;
    Status status = 6;
    Version rollback_version = 7;
    DeliveryState delivery = 8;
    bool version_agnostic = 10; // This object just needs to exist - it doesn't change from version to version
    bool desired_version_dirty_only = 20;  // when checking for whether or not to apply, only use the desired version and check if it's active and not dirty. that is, active && at desired version && dirty = hasWork, no work otherwise.
    string message = 12 [(vtproto.unstable_for_equal) = true]; // Human readable message (typically for errors) explaining the status
    bool needs_apply = 33;
    repeated prodvana.runtimes.DebugEvent debug_events = 31 [(vtproto.unstable_for_equal) = true];
    RuntimeExtension runtime_extension = 13; // additional config if this runtime object belongs to a runtime extension
    google.protobuf.Duration interval = 15; // if set, runtime object is continuously applied instead of being done once when there is a version mismatch
    google.protobuf.Duration steady_state_interval = 26;

    // output_blob_ids and exit_codes are in the same order, assuming output is saved
    repeated string output_blob_ids = 18; // if output is saved, this is the ID of the blob to retrieve it, only for run-to-completion objects.
    repeated int32 exit_codes = 19; // exit codes, only for run-to-completion objects like jobs
    bool require_approval_before_apply = 21;

    string raw_config = 23 [(vtproto.unstable_for_equal) = true]; // raw runtime-specific config, e.g. k8s yaml

    enum ManagementStatus {
        PVN_MANAGED = 0;
        UNMANAGED = 1;
    }

    ManagementStatus management_status = 25;

    TaskRun last_completed_task_run = 27; // For entities that run jobs/tasks multiple times, what is the most recent status we have?

    repeated prodvana.common_config.ExternalLink external_links = 28;

    repeated prodvana.runtimes.extensions.ExternalObject external_objects = 30;  // external objects tracked by this runtime, not represented in entity graph but useful to display to users
    bool rollback = 32;

    reserved 9, 11, 14, 16, 17, 22;
    reserved "unhealthy_pods", "state_hash", "missing_approval", "timeout";
    // next tag: 35
}

enum ConditionStatus {
    CONDITION_UNKNOWN_STATUS = 0;
    CONDITION_PENDING = 1;
    CONDITION_SATISFIED = 2;
    CONDITION_MANUALLY_BYPASSED = 3;
    CONDITION_FAILED = 4;
}

message ConditionState {
    ConditionStatus status = 1;
}

message ApplyError {
    string message = 1;
}

message NotificationInfo {
    int32 failure_count = 1;
    google.protobuf.Timestamp most_recent_failure = 2;

    ApplyError runtime_fetch_invoke_error = 11;
    ApplyError runtime_apply_invoke_error = 12;
    repeated ConcurrencyLimitExceeded concurrency_limit_exceeded_errors = 13;
}

message KeyDeliveryDecision {
    enum Decision  {
        UNKNOWN = 0;
        ROLLBACK_INITIATED = 1;
        FAILED = 2;
    }
    message EntitySnapshot {
        Identifier id = 1;
        Status status = 2;
        State current = 3;
    }
    Decision decision = 1;
    string explanation = 2;
    Status status = 3;  // convergence status at the time of the delivery decision
    repeated StatusExplanation status_explanations = 4;
    repeated EntitySnapshot status_explanation_entities = 5;
    State current = 6;  // current state at the time of the delivery decision
    google.protobuf.Timestamp timestamp = 7;
}

message ControlState {
    bool rollback = 1;
    // last delivery decision for rollback=false
    KeyDeliveryDecision key_delivery_decision = 14;
    // last delivery decision for rollback=true
    KeyDeliveryDecision rollback_key_delivery_decision = 15;
    repeated ConditionState precondition_states = 2;
    repeated ConditionState invariant_states = 3;
    // An entity is paused if itself or any of its ancestors have paused field set.
    // Unlike rollback, this field does not get propagated to children.
    // Doing so would make to differentiate unpausing vs. the field not being set,
    // especially if pausing can happen at any layer.
    bool paused = 4;

    // explanation for current status, will have more than one in the event multiple children have the same status
    repeated StatusExplanation status_explanations = 5;

    // What is DD doing now?
    ActionExplanation action_explanation = 6;

    google.protobuf.Timestamp last_fetched_timestamp = 7 [(vtproto.unstable_for_equal) = true];
    google.protobuf.Timestamp last_applied_timestamp = 8 [(vtproto.unstable_for_equal) = true];
    google.protobuf.Timestamp expected_next_apply_timestamp = 13 [(vtproto.unstable_for_equal) = true];
    MissingApproval missing_approval = 9;

    bool observer_mode = 10;

    ApplyError apply_error = 11;

    NotificationInfo notification_info = 12;

    // next tag: 15
}

enum ManualApprovalStatus {
    PENDING = 0;
    APPROVED = 1;
    REJECTED = 2;
}

message ManualApprovalState {
    Metadata meta = 1 [(vtproto.unstable_for_equal) = true];
    ManualApprovalStatus status = 2;
    string topic = 3;
    string description = 4;
    message Approver {
        prodvana.version.Source source = 1;
        prodvana.version.SourceMetadata source_metadata = 2;
        ManualApprovalStatus status = 3;
        google.protobuf.Timestamp timestamp = 4;
    }
    repeated Approver approvers = 5 [(vtproto.unstable_for_equal) = true];
    int32 min_approvers = 6;
}

message State {
    oneof state_oneof {
        ServiceState service = 1;
        ServiceInstanceState service_instance = 2;
        ServiceGroupState service_group = 3;
        RuntimeObject runtime_object = 4;
        ManualApprovalState manual_approval = 5;
        CustomTaskState custom_task = 6;
        ProtectionAttachment protection_attachment = 7;
        ProtectionLinkState protection_link = 8;
        DeliveryExtensionState delivery_extension = 9;
    }
}

message Annotations {
    message Annotation {
        string key = 1;
        string value = 2;
    }
    repeated Annotation annotations = 1;
}

enum CustomTaskStatus {
    CUSTOM_TASK_PENDING = 0;
    CUSTOM_TASK_SUCCESSFUL = 1;
    CUSTOM_TASK_RETRIES_EXHAUSTED = 2;
    CUSTOM_TASK_TIMED_OUT = 3;
}

message CustomTaskExecutionState {
    CustomTaskStatus status = 1;
    int64 attempts = 2;
    google.protobuf.Timestamp latest_attempt_end_timestamp = 3;
}

message CustomTaskState {
    Metadata meta = 1 [(vtproto.unstable_for_equal) = true];
    string name = 2 [(validate.rules).string.min_len = 1];
    string description = 3 [(validate.rules).string.min_len = 1];
    string application = 4;
    string application_id = 5;
    string release_channel = 6;
    string release_channel_id = 7;

    prodvana.common_config.ProgramConfig program = 9 [(validate.rules).message.required = true];
    CustomTaskExecutionState task_state = 12;
    // if not set, the custom task will not be retried once it starts executing once.
    prodvana.common_config.RetryConfig retry_config = 13;

    repeated string service_ids = 14;

    reserved 8, 10, 11;
}

message ProtectionLinkState {
    Metadata meta = 1 [(vtproto.unstable_for_equal) = true];
    string attachment_name = 8;
    Status last_seen_attachment_status = 9;  // status of the attachment, used to compute link status
    ProtectionAttachmentResult last_seen_attachment_result = 10;
    ConditionStatus status = 2; // status of the link
    // Copy of ProtectionLink description. Used in FetchState to know retries, durations etc.
    ProtectionLink link = 3;

    // When did we start polling this protection? If not set, this protection has not started polling.
    google.protobuf.Timestamp started_timestamp = 4;

    // When did we stop polling this protection? If set, this protection will no longer change status (except to be manually bypassed).
    google.protobuf.Timestamp stopped_timestamp = 5;
    enum StopReason {
        UNKNOWN = 0;
        LIFECYCLE_COMPLETED = 1;
        SUCCEEDED_ONCE = 2;
        SUCCEEDED_FOR_DURATION = 3;
        TIMED_OUT = 4;
        FAILED = 5;
        DELETED = 6;
        MANUALLY_BYPASSED = 7;
    }
    StopReason stopped_reason = 6;

    // Will be set the first time this attachment returned success.
    // Useful for time-based protections (post-push - check X succeeds for N mins). We make the ProtectionLink return CONVERGING till time expires.
    google.protobuf.Timestamp first_success_timestamp = 7;

    // next tag: 11
}

message ProtectionAttachmentResult {
    enum Status {
        UNKNOWN = 0;
        PASSING = 1;
        BLOCKING = 2;
        CONFIGURATION_ERROR = 3;
        INTERNAL_ERROR = 4;
    }
    Status status = 1;
    string message = 2;
    string system_debug_message = 3;
    string version = 4; // protection attachment version that executed
    google.protobuf.Timestamp execution_timestamp = 5;
}

// TODO: Rename to ProtectionAttachmentState to be consistent with other entities.
message ProtectionAttachment {
    Metadata meta = 1 [(vtproto.unstable_for_equal) = true];
    repeated Version versions = 2;
    repeated Version last_completed_versions = 5;
    google.protobuf.Timestamp last_completed_timestamp = 6;
    SimpleStatus last_completed_status = 7;
    repeated StatusExplanation last_completed_status_explanations = 8;
    string last_completed_applied_version = 9;
    string protection_id = 3;
    string attachment_id = 4;
    ProtectionAttachmentResult result = 10;
    // next tag: 11
}

message DeliveryExtensionState {
    Metadata meta = 1 [(vtproto.unstable_for_equal) = true];
    repeated Version versions = 2;
    string extension_id = 3;
    string extension_instance_id = 10;
    prodvana.common_config.TaskLifecycle lifecycle = 11;

    TaskRun ongoing_run = 16; // only set if there is an ongoing run

    // last couple of runs for this extension.
    // may not contain the full list, but guaranteed to contain the last.
    repeated TaskRun last_runs = 15;

    google.protobuf.Timestamp last_completed_timestamp = 6;
    SimpleStatus last_completed_status = 7;
    repeated StatusExplanation last_completed_status_explanations = 8;
    string last_completed_applied_version = 9;

    // In desired/target state, this refers to the max number of attempts to run the extension. 0 means no limit.
    // In current state, this refers to total number of attempts to run the extension (unsuccessful attempts
    // because 1 successful attempt will stop the extension).
    int32 attempts = 14;

    repeated Identifier references = 12;

    reserved 13;
    reserved "status";
    // next tag: 17
}

enum SignalType {
    SIGNAL_UNKNOWN = 0;
    DELIVERY_PROMOTION = 1;
    PROTECTION_BYPASS = 2;
    RUNTIME_EXTENSION_APPROVAL = 3;
    SIGNAL_MANUAL_APPROVAL = 4;
    RELEASE_CHANNEL_BYPASS = 5;
    CONCURRENCY_LIMIT_BYPASS = 6;
}

message Signal {
    SignalType type = 1;

    message DeliveryPromotionConfig {
        // which canary progress stage to promote
        int64 stage = 1;
        // when true, indicates delivery should be promoted fully, e.g. 100%
        bool full = 2;

        bool reject = 3;
    }

    message ProtectionBypass {
    }

    message RuntimeExtensionApproval {
        // When was the approval issued?
        // If this is after last run timestamp, apply can proceed.
        google.protobuf.Timestamp timestamp = 1;
        bool reject = 2;
        string plan_blob_id = 3;  // if set, approve specifically for this plan
        // TODO: Add actor info - who/what approved and how?
        // TODO: Add some kind of token derived from corresponding fetch which can be passed down to apply.
    }

    message ReleaseChannelBypass {
        repeated string entity_ids = 1;
    }

    message ConcurrencyLimitBypass {
    }

    oneof config {
        DeliveryPromotionConfig delivery_promotion = 2;
        ProtectionBypass protection_bypass = 3;
        RuntimeExtensionApproval runtime_extension_approval = 4;
        ReleaseChannelBypass release_channel_bypass = 5;
        ConcurrencyLimitBypass concurrency_limit_bypass = 6;
    }
}

message DebugLog {
    google.protobuf.Timestamp ts = 1;
    string log = 2;
}

message RuntimeExtensionMetadata {
    RuntimeExtensionFetchOutput output = 1;  // the plan this approval is for, if any
    string apply_desired_state_id = 2;
}

message ManualApprovalConfig {
    oneof config {
        RuntimeExtensionMetadata runtime_extension = 1;
    }
    int32 min_approvers = 2;
}

message MissingApproval {
    string desired_state_id = 1;
    prodvana.desired_state.model.SignalType signal_type = 2;
    string topic = 3;
    RuntimeExtensionMetadata runtime_extension = 4;
    bool current = 5;

    // next tag: 6
}

message ConcurrencyLimitExceeded {
    message Blocker {
        Identifier entity_id = 1;
        string desired_state_id = 2;
        string root_desired_state_id = 3;
        string release_id = 4;
        // time since this blocker has held on to its lease. This is *not* the time since this entity has been blocked.
        google.protobuf.Timestamp held_since_timestamp = 5;
    }
    // apply cannot run due to a concurrency limit
    Identifier entity_id = 1; // entity being blocked
    string desired_state_id = 5;
    string release_id = 6;

    repeated Blocker blockers = 4; // list of entities that are blocking this entity
    string limit_description = 3;
    string limit_id = 7;

    // next tag: 8
    reserved 2;
    reserved "blocking_ids";
}

message ApplyConditionUnsatisfied {
    message InternalMissingApproval {
        string desired_state_id = 1;
        prodvana.desired_state.model.SignalType signal_type = 2;
        string topic = 3;
        RuntimeExtensionMetadata runtime_extension = 4;
        // What created this missing approval?
        // If any of these desired state ids have been superseded,
        // this approval should be considered not current.
        repeated string generator_desired_state_ids = 5;
    }


    oneof reason {
        // Cannot apply because this entity requires additional approval.
        InternalMissingApproval missing_approval = 1;
        ConcurrencyLimitExceeded concurrency_limit_exceeded = 2;
        // TODO: Add reasons like paused entities.
    }
}

// metadata about how a RuntimeExtension fetch task was started
message FetchTaskStartDetails {
    prodvana.runtimes.extensions.FetchMode fetch_mode = 1;
}

message ConcurrencyLease {
    string limit_id = 1;
    string lease_id = 2;
}

message TaskRun {
    message RuntimeObjectMetadata {
        // light, incomplete metadata about runtime object to identify the object
        Identifier id = 1;
        string name = 2;
        string object_type = 3;
        string namespace = 4;
    }
    enum Phase {
        RUNNING = 0;
        NOT_STARTED = 1;
    }
    SimpleStatus status = 1;
    repeated StatusExplanation status_explanations = 2;
    string version = 3;
    repeated Version seen_versions = 4;
    // IDs for the entity that started this task
    string desired_state_id = 18;
    string release_id = 19;

    google.protobuf.Timestamp created_timestamp = 5;
    google.protobuf.Timestamp started_timestamp = 15;
    google.protobuf.Timestamp completed_timestamp = 6;
    string started_by_process_id = 16;
    // these fields are only populated for completed tasks
    repeated string output_blob_ids = 7;
    repeated int32 exit_codes = 8;
    repeated RuntimeObjectMetadata runtime_object_metadatas = 23;

    // if set, output_blob_ids, exit_codes and runtime objects can be ignored (it'll contain the output that will eventually lead to this pvn-wrapper output)
    prodvana.pvn_wrapper.Output pvn_wrapper_output = 22;
    // all entities that make up the task
    repeated Identifier task_entities = 9;

    // if there is any intersection between these and exit_codes, and the status is FAILED, then the retryable bit below will be
    // set to true.
    repeated int32 retryable_exit_codes = 11;
    bool retryable = 12;

    // tasks are created first in the NOT_STARTED phase
    Phase phase = 13;

    // metadata about how the task was started

    // for runtime extension aggregate objects only, the fetch details used to start the task (will contain plan id)
    FetchDetails fetch_details = 10;
    FetchTaskStartDetails fetch_task_start_details = 14;
    string has_work_reason = 21;

    // if set, the entity who started this task has a concurrency limit that needs to be renewed and released
    repeated ConcurrencyLease concurrency_leases = 17;

    string apply_id = 24;

    reserved 20;
    reserved "aggregate_object_snapshot";

    // next tag: 25
}

message TaskEntityContext {
    TaskRun last_completed_run = 1;
    TaskRun last_run = 2;

    string last_successful_apply_id = 6;

    message ApplyIdWithVersion {
        string apply_id = 1;
        string version = 2;
        // True if it is the version in which the underlying object is converging to.
        bool active = 3;
        // Did this applyId get successfully applied?
        bool successful = 4;
    }

    ApplyIdWithVersion apply_id_version_override = 7; // DEPRECATED
    repeated ApplyIdWithVersion apply_id_with_versions = 8;

    reserved 3, 4, 5;
    reserved "is_active", "missing_approval", "is_not_in_grace_period";
    // next tag: 9
}

// metadata about the desired state, set at the time of SetDesiredState
message SetDesiredStateMetadata {
    bool rollback = 1;
    bool bypass_preconditions_and_protections = 2;
}
