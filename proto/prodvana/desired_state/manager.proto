syntax = "proto3";
package prodvana.desired_state;
option go_package = "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/desired_state";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "prodvana/async_task/task_metadata.proto";
import "prodvana/desired_state/model/desired_state.proto";
import "prodvana/desired_state/model/entity.proto";
import "prodvana/service/service_config.proto";
import "prodvana/version/source_metadata.proto";
import "validate/validate.proto";

message SetDesiredStateReq {
    prodvana.desired_state.model.State desired_state = 1 [(validate.rules).message.required = true];
    // set if this is a rollback, which will generate a desired state with faster preconditions
    bool rollback = 2;
    prodvana.version.Source source = 3;
    prodvana.version.SourceMetadata source_metadata = 4;
    // internal use only
    bool force_async_set_desired_state = 5;
}

message ValidateDesiredStateReq {
    prodvana.desired_state.model.State desired_state = 1 [(validate.rules).message.required = true];
    // set if this is a rollback, which will generate a desired state with faster preconditions
    bool rollback = 2;
    // optional, if set, use these service configs instead of fetching from db. can be useful when doing a ValidateApplyParameters followed by a ValidateDesiredState
    repeated prodvana.service.CompiledServiceInstanceConfig service_instance_configs = 3;

    // only do label expansion instead of the full compilation, can be useful for speedup if the only desired outcome is to look at the materialized release channels
    bool label_expansion_only = 4;

    // assume service versions in the request are invalid and do not try to fetch them.
    bool disregard_service_versions = 5;
}

message SetDesiredStateResp {
    string desired_state_id = 1;  // unique identifier for the desired state that was just set
}

message PreviewEntityGraphResp {
    prodvana.desired_state.model.EntityGraph entity_graph = 1;
    string desired_state_id = 2;  // unique identifier the preview entity graph that was just created. This same ID can be used across any endpoints that inspect desired states, e.g. GetDesiredState
}

message GetServiceDesiredStateConvergenceSummaryReq {
    string application = 1 [(validate.rules).string.min_len = 1];
    string service = 2 [(validate.rules).string.min_len = 1];
    bool fast_no_deprecated_fields = 3; // unused
}

message StatusExplanations {
    repeated prodvana.desired_state.model.StatusExplanation status_explanations = 1;
}

message DebugLogs {
    repeated prodvana.desired_state.model.DebugLog debug_logs = 1;
}

message PendingSetDesiredState {
    string desired_state_id = 4;
    prodvana.desired_state.model.State compiled_desired_state = 1;
    // will never contain SUCCESS, by definition, but may contain FAILED
    prodvana.async_task.TaskStatus task_status = 2;
    // will only be set for FAILED
    prodvana.async_task.TaskResult task_result = 3;
    // next tag: 5
}

message DesiredStateSummary {
    prodvana.desired_state.model.EntityGraph entity_graph = 15;
    google.protobuf.Timestamp creation_timestamp = 5;
    google.protobuf.Timestamp last_update_timestamp = 6;
    // will only be set if desired state has been replaced
    google.protobuf.Timestamp replaced_timestamp = 7;
    // uncompiled desired state originally passed as input to SetDesiredState
    prodvana.desired_state.model.State input_desired_state = 16;
    // compiled desired state
    prodvana.desired_state.model.State desired_state = 3;
    prodvana.desired_state.model.State starting_state = 1;
    prodvana.desired_state.model.State last_seen_state = 2;
    prodvana.desired_state.model.Status status = 19;
    // who set the desired state
    prodvana.version.Source source = 17;
    prodvana.version.SourceMetadata source_metadata = 18;
    // the latest pending or failed set desired state request
    PendingSetDesiredState pending_set_desired_state = 20;


    // fields below are deprecated
    // status of the desired state, all its descendents, and the root desired state.
    map<string, prodvana.desired_state.model.Status> statuses = 4;
    // State of all preconditions involved in the desired state.
    // Key format - "{desired_state_id}-{index}", e.g., "des-0752d6c76a6943abbfcf0515634584ba-0".
    map<string, prodvana.desired_state.model.ConditionState> precondition_statuses = 8;
    map<string, StatusExplanations> status_explanations = 9;
    map<string, DebugLogs> debug_logs = 10;
    map<string, prodvana.desired_state.model.ActionExplanation> action_explanations = 11;
    // last_update_timestamp, last_fetched_timestamp, and last_applied_timestamp are only returned for the latest desired state
    map<string, google.protobuf.Timestamp> last_update_timestamps = 12;
    map<string, google.protobuf.Timestamp> last_fetched_timestamps = 13;
    map<string, google.protobuf.Timestamp> last_applied_timestamps = 14;

    // next tag: 21
}

message GetDesiredStateConvergenceReq {
    string desired_state_id = 1 [(validate.rules).string.min_len = 1];
    bool fast_no_deprecated_fields = 2; // unused
}

message GetDesiredStateConvergenceSummaryResp {
    DesiredStateSummary summary = 1;
}

message GetServiceDesiredStateConvergenceSummaryResp {
    DesiredStateSummary summary = 1;
}

message GetServiceLastConvergedStateReq {
    string application = 1 [(validate.rules).string.min_len = 1];
    string service = 2 [(validate.rules).string.min_len = 1];
}

message GetServiceLastConvergedStateResp {
    repeated prodvana.desired_state.model.ServiceInstanceState service_instance_states = 1;
}

message GetServiceDesiredStateHistoryReq {
    string application = 1 [(validate.rules).string.min_len = 1];
    string service = 2 [(validate.rules).string.min_len = 1];
    string page_token = 3;
    int32 page_size = 4;
    bool fast_no_deprecated_fields = 5; // unused
}

message GetServiceDesiredStateHistoryResp {
    repeated DesiredStateSummary desired_states = 1;
    string next_page_token = 2;
}

message GetDesiredStateReq {
    string desired_state_id = 1 [(validate.rules).string.min_len = 1];
}

message GetDesiredStateResp {
    prodvana.desired_state.model.State desired_state = 1;
    prodvana.desired_state.model.State compiled_desired_state = 2;
}

message ValidateDesiredStateResp {
    prodvana.desired_state.model.State desired_state = 1;
    prodvana.desired_state.model.State compiled_desired_state = 2;
}

message SetManualApprovalReq {
    string desired_state_id = 1 [(validate.rules).string.min_len = 1];
    // string application = 2 [(validate.rules).string.min_len = 1];
    // string service = 3 [(validate.rules).string.min_len = 1];
    // string release_channel = 4 [(validate.rules).string.min_len = 1];
    string topic = 2 [(validate.rules).string.min_len =1];
    bool reject = 3;
    string signal_type = 5;

    reserved 4;
}

message SetManualApprovalResp {
}

message PromoteDeliveryReq {
    string desired_state_id = 1 [(validate.rules).string.min_len = 1];
    int64 stage = 2;
    bool full = 3;
    string source = 4 [(validate.rules).string.min_len = 1];
}

message PromoteDeliveryResp {
}

message BypassProtectionReq {
    string desired_state_id = 1 [(validate.rules).string.min_len = 1];
    string source = 2 [(validate.rules).string.min_len = 1];
}

message BypassProtectionResp {
}

service DesiredStateManager {
    rpc SetDesiredState(SetDesiredStateReq) returns (SetDesiredStateResp) {
        option (google.api.http) = {
            post: "/v1/desired_states"
            body: "*"
        };
    }
    // validate a SetDesiredState call and return a preview entity graph
    // TODO(naphat) delete ValidateDesiredState and replace with this
    rpc PreviewEntityGraph(SetDesiredStateReq) returns (PreviewEntityGraphResp) {
        option (google.api.http) = {
            post: "/v1/desired_states/preview"
            body: "*"
        };
    }
    rpc GetServiceDesiredStateConvergenceSummary(GetServiceDesiredStateConvergenceSummaryReq) returns (GetServiceDesiredStateConvergenceSummaryResp) {
        option (google.api.http) = {
            get: "/v1/applications/{application=*}/services/{service=*}/latest_desired_state"
        };
    }
    rpc GetServiceLastConvergedStates(GetServiceLastConvergedStateReq) returns (GetServiceLastConvergedStateResp) {
        option (google.api.http) = {
            get: "/v1/applications/{application=*}/services/{service=*}/last_converged"
        };
    }
    rpc GetServiceDesiredStateHistory(GetServiceDesiredStateHistoryReq) returns (GetServiceDesiredStateHistoryResp) {
        option (google.api.http) = {
            get: "/v1/applications/{application=*}/services/{service=*}/desired_states"
        };
    }
    rpc GetDesiredState(GetDesiredStateReq) returns (GetDesiredStateResp) {
        option (google.api.http) = {
            get: "/v1/desired_states/{desired_state_id=*}"
        };
    }
    rpc GetDesiredStateConvergenceSummary(GetDesiredStateConvergenceReq) returns (GetDesiredStateConvergenceSummaryResp) {
        option (google.api.http) = {
            get: "/v1/desired_states/{desired_state_id=*}/summary"
        };
    }
    rpc ValidateDesiredState(ValidateDesiredStateReq) returns (ValidateDesiredStateResp) {
        option (google.api.http) = {
            post: "/v1/desired_states/validate"
            body: "*"
        };
    }
    rpc SetManualApproval(SetManualApprovalReq) returns (SetManualApprovalResp) {
        option (google.api.http) = {
            post: "/v1/desired_states/approve_manual_condition"
            body: "*"
        };
    }
    rpc PromoteDelivery(PromoteDeliveryReq) returns (PromoteDeliveryResp) {
        option (google.api.http) = {
            post: "/v1/desired_states/promote_delivery"
            body: "*"
        };
    }
    rpc BypassProtection(BypassProtectionReq) returns (BypassProtectionResp) {
        option (google.api.http) = {
            post: "/v1/desired_states/bypass_protection"
            body: "*"
        };
    }
}
