syntax = "proto3";
package prodvana.common_config;
option go_package = "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/common_config";

import "prodvana/common_config/env.proto";
import "google/protobuf/duration.proto";
import "validate/validate.proto";

message PortConfig {
    enum Protocol {
        UNKNOWN = 0;
        HTTP = 1;
        HTTP2 = 2;
        GRPC = 3;
        TCP = 4;

        reserved 5;
        reserved "HTTPS";

        // next: 6
    }
    int32 port = 1 [(validate.rules).int32 = {
        gte: 0,  // if exactly 0, treated as unset and default will be taken from docker image
        lte: 65535,
    }];
    // optional, default to the same value as `port`
    int32 target_port = 2 [(validate.rules).int32 = {
        gte: 0,
        lte: 65535,
    }];
	// if this port should be exposed to the public internet
	bool external = 3;
    Protocol protocol = 4;
    // if the connection should use TLS
    bool tls = 5;
}


message ResourceList {
    string memory = 1;
    string cpu = 2;
}

message ResourceRequirements {
    ResourceList requests = 1;

    // We are leaving this out because for the moment we don't think users should be allowed to specify limit
    // ResourceList limits = 2;
}

message HttpProbe {
    string path = 1;
    int32 port = 2 [(validate.rules).int32 = {
        gt: 0,
        lte: 65535,
    }];
    bool tls = 3;
}

message CmdProbe {
    repeated string command = 1;
}

message TcpProbe {
    int32 port = 1 [(validate.rules).int32 = {
        gt: 0,
        lte: 65535,
    }];
    string host = 2;
}

message HealthCheck {
    oneof probe_config {
        option (validate.required) = true;
        HttpProbe http = 1;
        CmdProbe cmd = 2;
        TcpProbe tcp = 3;
    }
    google.protobuf.Duration delay = 4;
    google.protobuf.Duration period = 5;
}

message ImageRegistryInfo {
    // both container_registry_id and container_registry are supported, but only set one not both
    string container_registry_id = 1;
    string container_registry = 2;

    // Not the URL, everything after: username/reponame
    // leaving it as once field because the spec considers it 1 field
    // in theory you can have no username, or nest the repo names
    string image_repository = 7 [(validate.rules).string.min_len = 1];
}

message ImageDetails {
    ImageRegistryInfo registry_info = 1 [(validate.rules).message.required = true];
    // image tag or digest
    string identifier = 2 [(validate.rules).string.min_len = 1];
}

// This ProgramConfig is used in multiple places, including service configuration and custom pipeline tasks.
// The validations expressed here represent the lowest common denominator of the use cases.
message ProgramConfig {
    string name = 1 [
        (validate.rules).string = {
            // min_len is actually 1 when used with service_config
            min_len: 0,
            max_len: 63,
            pattern: '^[a-z]?([a-z0-9-]*[a-z0-9]){0,1}$',
        }
    ];
    string image = 2;
    string image_tag = 14;
    ImageRegistryInfo image_registry_info = 9;  // optional, not guaranteed to be compatible with `image` (e.g. if user decides to paste in a public image string)
    repeated string cmd = 3;
    repeated string entrypoint = 4;
    map<string, EnvValue> env = 5 [(validate.rules).map = {
        keys: {
            string: {
                pattern: '^[a-zA-Z_]+[a-zA-Z0-9_]*$',
            },
        },
        no_sparse: true,
    }];
    ResourceRequirements resources = 6;
    HealthCheck health_check = 7;
    // empty list is ok, default from docker image will be used
    repeated PortConfig ports = 8 [(validate.rules).repeated = {
        items: {
            message: {
                required: true
            }
        }
    }];

    // Only set when this ServiceConfig represents a ServiceTemplate
    // When set, this program will be added in whole to the target service's
    // programs in full, and will not partially apply to a program with the
    // same name in the target service's config.
    bool template_complete = 10;

    reserved 11;
    reserved "commit";

    // next tag: 15
}

message PerReleaseChannelProgramConfig {
    string name = 1 [
        (validate.rules).string = {
            min_len: 1,
            max_len: 63,
            pattern: '^[a-z]([a-z0-9-]*[a-z0-9]){0,1}$',
        }
    ];  // must match a program in top-level program config
    map<string, prodvana.common_config.EnvValue> env = 2 [(validate.rules).map = {
        keys: {
            string: {
                pattern: '^[a-zA-Z_]+[a-zA-Z0-9_]*$',
            },
        },
        no_sparse: true,
    }];;  // takes precedence over anything specified in top-level program config

    // If present, overrides main program config.
    // TODO: If users need to enforce that different RCs require different images, add requires_separate_images option to ProgramConfig.
    // This will prevent accidentally undoing separate images via the UI or autopush.
    string image = 3;

    prodvana.common_config.ImageRegistryInfo image_registry_info = 4;  // optional, not guaranteed to be compatible with `image` (e.g. if user decides to paste in a public image string)

    string image_tag = 5;
}
