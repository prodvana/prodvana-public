syntax = "proto3";
package prodvana.common_config;
option go_package = "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/common_config";
import "validate/validate.proto";
import "prodvana/common_config/kubernetes_config.proto";

message RemoteHelmChart {
    oneof repo_oneof {
        option (validate.required) = true;
        string repo = 1;
        // TODO(naphat) add integration support for private repositories
    }
    string chart = 2 [(validate.rules).string.min_len = 1];
    string chart_version = 3 [(validate.rules).string.min_len = 1];
}

message HelmValuesOverrides {
    oneof override_oneof {
        option (validate.required) = true;
        string inlined = 1 [(validate.rules).string.min_len = 1];
        LocalConfig local = 2;
        RemoteConfig remote = 4;
    }
    reserved 3;
    reserved "map";
    // next tag: 5
}

message HelmConfig {
    oneof chart_oneof {
        option (validate.required) = true;
        RemoteHelmChart remote = 1;
        LocalConfig local = 5;
        string helm_tarball_blob_id = 6;
    }
    repeated HelmValuesOverrides values_overrides = 2;
    // optional release name, leave blank to have Prodvana generate one.
    // Mainly useful for migrating an existing helm release into Prodvana.
    string release_name = 3;

    // used internally by Prodvana, do not set.
    string namespace = 4 [(validate.rules).string.max_len = 0];

    // Before running helm commands, first fixup labels and annotations of the Kubernetes objects
    // to match the expected state. This is useful for migrating an existing Kubernetes object to be managed
    // by Helm.
    bool fixup_ownership = 8;

    reserved 7;
    reserved "force";

    // next tag: 9
}
