syntax = "proto3";
package prodvana.events;
option go_package = "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/events";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "validate/validate.proto";
import "prodvana/events/events.proto";
import "prodvana/events/types.proto";

message ServiceLookup {
    string application = 1 [(validate.rules).string.min_len = 1];
    string service = 2 [(validate.rules).string.min_len = 1];
}

message ReleaseChannelLookup {
    string application = 1 [(validate.rules).string.min_len = 1];
    string release_channel = 2 [(validate.rules).string.min_len = 1];
}

message Lookup {
    oneof lookup_oneof {
        option (validate.required) = true;
        string root_desired_state_id = 1;
        string desired_state_id = 3;
        ServiceLookup service = 4;
        ReleaseChannelLookup release_channel = 5;
    }
    // entity_id not supported yet because there is no backing index
    reserved 2;
    reserved "entity_id";
}

message GetEventsReq {
    repeated Lookup lookups = 1 [(validate.rules).repeated = {
        min_items: 1,
        items: {
            message: {
                required: true,
            },
        },
    }];
    // empty means to include all types
    repeated EventType types = 2;
    string page_token = 3;
    int32 page_size = 4;
    bool order_by_asc_timestamp = 6;
    bool useOr = 7;
    google.protobuf.Timestamp before_timestamp = 8;
    google.protobuf.Timestamp after_timestamp = 9;
    reserved 5;
    reserved "order_by_desc_timestamp";
}

message GetEventsResp {
    repeated Event events = 1;
    string next_page_token = 2;
}

service EventsManager {
    rpc GetEvents(GetEventsReq) returns (GetEventsResp) {
        option (google.api.http) = {
            // actually just GET, but otherwise the generated openapi cannot take complex structs
            post: "/v1/events"
            body: "*"
        };
    }
}
