syntax = "proto3";
package prodvana.environment;
option go_package = "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/environment";

import "google/protobuf/timestamp.proto";
import "validate/validate.proto";
import "prodvana/common_config/task.proto";
import "prodvana/common_config/kubernetes_config.proto";
import "prodvana/common_config/parameters.proto";
import "prodvana/runtimes/runtimes_config.proto";

message ClusterAuth {
    string endpoint = 1;
    string ca_cert = 2;
    string token = 3;
    string service_account = 4;

    message ECSAuth {
        string access_key = 1;
        string secret_key = 2;
        string region = 3;
        string assume_role_arn = 4;
        string cluster_arn = 5;
    }
    message GenericDockerAuth {
    }
    message K8sAuth {
        map<string, string> agent_env = 1;
    }

    oneof auth_oneof {
        ECSAuth ecs = 5;
        GenericDockerAuth generic_docker = 7;
        K8sAuth k8s = 8;
    }
    bool k8s_agent_auth = 6;

    // next tag: 9
}

enum ClusterType {
    UNKNOWN = 0;
    K8S = 1;
    ECS = 2;
    FAKE = 3;
    GENERIC_DOCKER = 4;
}

message Cluster {
    // Origin specifies where the cluster came from.
    enum Origin {
        UNKNOWN = 0;
        PRODVANA = 1; // our infra created it
        EXTERNAL = 2; // created externally and added
    }
    string name = 1;
    string cluster_id = 2;
    Origin origin = 3;
    ClusterAuth auth = 4;
    ClusterType type = 5;
    ClusterConfig config = 6;
    google.protobuf.Timestamp last_heartbeat_timestamp = 7;
}

message FakeClusterConfig {
    message CrashingProgramPatterns {
        string image_regex = 1;
        string cmd_regex = 2;
        string log_output = 3;
    }
    repeated CrashingProgramPatterns crashing_programs = 1;
}

message GenericDockerCommand {
    oneof exec_config {
        option (validate.required) = true;
        prodvana.common_config.TaskConfig task_config = 1;
        prodvana.common_config.KubernetesConfig kubernetes_config = 2;
    }
}

message GenericDockerClusterConfig {
    GenericDockerCommand apply = 1 [(validate.rules).message.required = true];
    GenericDockerCommand get_current_state = 2;
    repeated prodvana.common_config.ParameterDefinition parameters = 3 [(validate.rules).repeated.items.message.required = true];
    prodvana.runtimes.RuntimeExecutionConfig proxy_runtime = 4 [(validate.rules).message.required = true];
}

message ClusterConfig {
    string name = 14;
    bool disable_flagger = 1;
    bool disable_istio = 2;

    message Kubecost {
        bool enabled = 1;
        bool managed = 2;
        string kubecost_namespace = 3;
    }
    Kubecost kubecost = 3;

    message Datadog {
        bool enabled = 1;
        bool managed = 2;
        string datadog_namespace = 3;
        string api_key = 4;
        string site = 5;
    }
    Datadog datadog = 4;

    message ALBIngress {
        bool enabled = 1;
        string ingress_class = 2 [(validate.rules).string.min_len = 1];
        // Attributes from https://docs.aws.amazon.com/elasticloadbalancing/latest/application/application-load-balancers.html#load-balancer-attributes
        // that are added to all Ingresses/LBs created in this runtime.
        repeated string default_balancer_attributes = 3;
    }
    ALBIngress alb_ingress = 6;

    message ArgoRollouts {
        message AnalysisTemplate {
            enum ArgValue {
                UNKNOWN = 0;
                SERVICE = 1;
                RELEASE_CHANNEL = 2;
            }
            string name = 1;
            // template argument name to prodvana value to inject
            map<string, ArgValue> arg_mapping = 2;
        }
        bool enabled = 1;
        repeated AnalysisTemplate templates = 2;
    }
    ArgoRollouts argo_rollouts = 7;

    message GKEIngress {
        bool enabled = 1;
        // Enables container native load balancing, allowing GCP LBs to target k8s pods directly.
        // See: https://cloud.google.com/kubernetes-engine/docs/how-to/container-native-load-balancing
        bool container_native = 2;
    }
    GKEIngress gke_ingress = 8;

    // Self-Managed GKE Ingress - exposes configuration options for GKE Ingress
    // but does not create an ingress object for you
    GKEIngress self_managed_gke_ingress = 11;

    enum CloudProvider {
        UNKNOWN = 0;
        EKS = 1;
        GKE = 2;
        AKS = 3;
        ONPREM = 4;
        OTHER_CLOUD = 5;
    }
    CloudProvider cloud_provider = 9;

    oneof cluster_oneof {
        // only used for fake runtimes
        FakeClusterConfig fake = 10;
        GenericDockerClusterConfig generic_docker = 12;
    }

    reserved 5;
    reserved "aws_alb_ingress";

    // next tag: 14
}
