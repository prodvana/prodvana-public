syntax = "proto3";
package prodvana.release;
option go_package = "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/release";
import "google/protobuf/timestamp.proto";
import "prodvana/object/meta.proto";
import "prodvana/repo/repo.proto";
import "validate/validate.proto";

enum ReleaseStatus {
    UNKNOWN_STATUS = 0;
    PENDING = 1;
    SUCCEEDED = 2;
    FAILED = 3;
    PREVIEW = 4;
}

message ReleaseConfig {
    google.protobuf.Timestamp creation_timestamp = 1; // must be unset on input
    string deployment_system = 2 [(validate.rules).string.min_len = 1];
    // required when recording releases from external systems
    string service = 3;
    // required when recording releases from external systems
    string release_channel = 4;
    // required when recording releases from external systems
    string application = 8;
    string repository = 5; // e.g. github.com/foo/bar
    string commit_id = 6; // commit hash
    string user = 7; // if known

    // The following fields only make sense if managed by Prodvana.

    string application_id = 9;
    string service_id = 10;
    string release_channel_id = 11;
    string service_version = 12;
    string desired_state_id = 13;
    // next tag: 14
}

message ReleaseState {
    ReleaseStatus status = 1;
    google.protobuf.Timestamp last_update_timestamp = 2;
}

message CommitAnalysis {
    int64 commits_added = 1;
    int64 commits_removed = 2;
    ImpactAnalysisComparison impact_analysis = 3;
}

message ImpactAnalysisComparison {
    // commits likely to be impactful, prev_commit_id and new_commit_id have a merge base
    repeated prodvana.repo.Commit relevant_added_commits = 1;
    repeated prodvana.repo.Commit relevant_removed_commits = 3;
    int64 unanalyzed_commits = 2;
}

message ReleaseComparison {
    prodvana.object.ObjectMeta prev = 1;
    string prev_repository = 2;
    string new_repository = 3;
    string prev_commit_id = 4;
    string new_commit_id = 5;
    CommitAnalysis commit_analysis = 14;  // only set if the previous commit is set and is from the same repo, and the repo is linked to prodvana
    // only set for Prodvana managed releases
    string prev_service_id = 8;
    string prev_release_channel_id = 9;
    string prev_service_version = 10;
    string new_service_id = 11;
    string new_release_channel_id = 12;
    string new_service_version = 13;
    reserved "impact_analysis", "total_commits";
    reserved 6, 7;
    // next tag: 15
}

message Release {
    prodvana.object.ObjectMeta meta = 1;
    ReleaseConfig config = 2;
    // TODO(naphat) should this really be part of the proto here, or should it be a separate endpoint so we can request arbitrary comparison?
    ReleaseComparison comparison = 3;
    ReleaseState state = 4;
}
