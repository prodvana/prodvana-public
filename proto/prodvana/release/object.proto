syntax = "proto3";
package prodvana.release;
option go_package = "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/release";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "prodvana/object/meta.proto";
import "prodvana/repo/repo.proto";
import "validate/validate.proto";

enum ReleaseStatus {
    UNKNOWN_STATUS = 0;
    PENDING = 1;
    SUCCEEDED = 2;
    FAILED = 3;
}

message ReleaseConfig {
    google.protobuf.Timestamp creation_timestamp = 1; // must be unset on input
    string deployment_system = 2 [(validate.rules).string.min_len = 1];
    string service = 3 [(validate.rules).string.min_len = 1];
    string release_channel = 4 [(validate.rules).string.min_len = 1];
    string application = 8 [(validate.rules).string.min_len = 1];
    string repository = 5; // e.g. github.com/foo/bar
    string commit_id = 6; // commit hash
    string user = 7; // if known
    // next tag: 8
}

message ReleaseState {
    ReleaseStatus status = 1;
    google.protobuf.Timestamp last_update_timestamp = 2;
}

message ImpactAnalysisComparison {
    // commits likely to be impactful, prev_commit_id and new_commit_id have a merge base
    repeated prodvana.repo.Commit relevant_commits = 1;
    int64 unanalyzed_commits = 2;
}

message ReleaseComparison {
    prodvana.object.ObjectMeta prev = 1;
    string prev_repository = 2;
    string new_repository = 3;
    string prev_commit_id = 4;
    string new_commit_id = 5;
    ImpactAnalysisComparison impact_analysis = 6;
    google.protobuf.Int64Value total_commits = 7; // only set if the previous commit is set and is from the same repo, and the repo is linked to prodvana
}

message Release {
    prodvana.object.ObjectMeta meta = 1;
    ReleaseConfig config = 2;
    // TODO(naphat) should this really be part of the proto here, or should it be a separate endpoint so we can request arbitrary comparison?
    ReleaseComparison comparison = 3;
    ReleaseState state = 4;
}
