syntax = "proto3";
package prodvana.release;
option go_package = "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/release";
import "google/api/annotations.proto";
import "prodvana/deployment/manager.proto";

service ReleaseManager {
    rpc RecordRelease(prodvana.deployment.RecordDeploymentReq) returns (prodvana.deployment.RecordDeploymentResp) {
        option (google.api.http) = {
            post: "/v1/releases"
            body: "*"
        };
    }
    rpc UpdateReleaseStatus(prodvana.deployment.UpdateDeploymentStatusReq) returns (prodvana.deployment.UpdateDeploymentStatusResp) {
        option (google.api.http) = {
            post: "/v1/releases/{deployment_id=*}/status"
            body: "*"
        };
    }
    rpc ListReleases(prodvana.deployment.ListDeploymentsReq) returns (prodvana.deployment.ListDeploymentsResp) {
        option (google.api.http) = {
            get: "/v1/releases"
        };
    }
    // page tokens arguments are ignored here
    rpc ListReleasesStream(prodvana.deployment.ListDeploymentsReq) returns (stream prodvana.deployment.ListDeploymentsResp) {}

    rpc CompareRelease(prodvana.deployment.CompareDeploymentReq) returns (prodvana.deployment.CompareDeploymentResp) {
        option (google.api.http) = {
            post: "/v1/releases/compare"
            body: "*"
        };
    }
    rpc PreviewRelease(prodvana.deployment.PreviewDeploymentReq) returns (prodvana.deployment.PreviewDeploymentResp) {
        option (google.api.http) = {
            post: "/v1/releases/preview"
            body: "*"
        };
    }

    // returns the latest releases for each (application, service, release channel) tuple.
    rpc GetLatestReleases(prodvana.deployment.GetLatestDeploymentsReq) returns (prodvana.deployment.GetLatestDeploymentsResp) {
        option (google.api.http) = {
            get: "/v1/releases/latest"
        };
    }

    rpc CheckCommitInRelease(prodvana.deployment.CheckCommitInDeploymentReq) returns (prodvana.deployment.CheckCommitInDeploymentResp) {
        option (google.api.http) = {
            get: "/v1/releases/check_commit"
        };
    }
}
