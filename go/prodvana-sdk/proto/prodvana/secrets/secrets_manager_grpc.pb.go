// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.10
// source: prodvana/secrets/secrets_manager.proto

package secrets

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SecretsManager_ListSecrets_FullMethodName         = "/prodvana.environment.SecretsManager/ListSecrets"
	SecretsManager_ListSecretVersions_FullMethodName  = "/prodvana.environment.SecretsManager/ListSecretVersions"
	SecretsManager_SetSecret_FullMethodName           = "/prodvana.environment.SecretsManager/SetSecret"
	SecretsManager_DeleteSecret_FullMethodName        = "/prodvana.environment.SecretsManager/DeleteSecret"
	SecretsManager_DeleteSecretVersion_FullMethodName = "/prodvana.environment.SecretsManager/DeleteSecretVersion"
)

// SecretsManagerClient is the client API for SecretsManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SecretsManagerClient interface {
	ListSecrets(ctx context.Context, in *ListSecretsReq, opts ...grpc.CallOption) (*ListSecretsResp, error)
	ListSecretVersions(ctx context.Context, in *ListSecretVersionsReq, opts ...grpc.CallOption) (*ListSecretVersionsResp, error)
	SetSecret(ctx context.Context, in *SetSecretReq, opts ...grpc.CallOption) (*SetSecretResp, error)
	DeleteSecret(ctx context.Context, in *DeleteSecretReq, opts ...grpc.CallOption) (*DeleteSecretResp, error)
	DeleteSecretVersion(ctx context.Context, in *DeleteSecretVersionReq, opts ...grpc.CallOption) (*DeleteSecretVersionResp, error)
}

type secretsManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewSecretsManagerClient(cc grpc.ClientConnInterface) SecretsManagerClient {
	return &secretsManagerClient{cc}
}

func (c *secretsManagerClient) ListSecrets(ctx context.Context, in *ListSecretsReq, opts ...grpc.CallOption) (*ListSecretsResp, error) {
	out := new(ListSecretsResp)
	err := c.cc.Invoke(ctx, SecretsManager_ListSecrets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretsManagerClient) ListSecretVersions(ctx context.Context, in *ListSecretVersionsReq, opts ...grpc.CallOption) (*ListSecretVersionsResp, error) {
	out := new(ListSecretVersionsResp)
	err := c.cc.Invoke(ctx, SecretsManager_ListSecretVersions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretsManagerClient) SetSecret(ctx context.Context, in *SetSecretReq, opts ...grpc.CallOption) (*SetSecretResp, error) {
	out := new(SetSecretResp)
	err := c.cc.Invoke(ctx, SecretsManager_SetSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretsManagerClient) DeleteSecret(ctx context.Context, in *DeleteSecretReq, opts ...grpc.CallOption) (*DeleteSecretResp, error) {
	out := new(DeleteSecretResp)
	err := c.cc.Invoke(ctx, SecretsManager_DeleteSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretsManagerClient) DeleteSecretVersion(ctx context.Context, in *DeleteSecretVersionReq, opts ...grpc.CallOption) (*DeleteSecretVersionResp, error) {
	out := new(DeleteSecretVersionResp)
	err := c.cc.Invoke(ctx, SecretsManager_DeleteSecretVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecretsManagerServer is the server API for SecretsManager service.
// All implementations must embed UnimplementedSecretsManagerServer
// for forward compatibility
type SecretsManagerServer interface {
	ListSecrets(context.Context, *ListSecretsReq) (*ListSecretsResp, error)
	ListSecretVersions(context.Context, *ListSecretVersionsReq) (*ListSecretVersionsResp, error)
	SetSecret(context.Context, *SetSecretReq) (*SetSecretResp, error)
	DeleteSecret(context.Context, *DeleteSecretReq) (*DeleteSecretResp, error)
	DeleteSecretVersion(context.Context, *DeleteSecretVersionReq) (*DeleteSecretVersionResp, error)
	mustEmbedUnimplementedSecretsManagerServer()
}

// UnimplementedSecretsManagerServer must be embedded to have forward compatible implementations.
type UnimplementedSecretsManagerServer struct {
}

func (UnimplementedSecretsManagerServer) ListSecrets(context.Context, *ListSecretsReq) (*ListSecretsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSecrets not implemented")
}
func (UnimplementedSecretsManagerServer) ListSecretVersions(context.Context, *ListSecretVersionsReq) (*ListSecretVersionsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSecretVersions not implemented")
}
func (UnimplementedSecretsManagerServer) SetSecret(context.Context, *SetSecretReq) (*SetSecretResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSecret not implemented")
}
func (UnimplementedSecretsManagerServer) DeleteSecret(context.Context, *DeleteSecretReq) (*DeleteSecretResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSecret not implemented")
}
func (UnimplementedSecretsManagerServer) DeleteSecretVersion(context.Context, *DeleteSecretVersionReq) (*DeleteSecretVersionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSecretVersion not implemented")
}
func (UnimplementedSecretsManagerServer) mustEmbedUnimplementedSecretsManagerServer() {}

// UnsafeSecretsManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecretsManagerServer will
// result in compilation errors.
type UnsafeSecretsManagerServer interface {
	mustEmbedUnimplementedSecretsManagerServer()
}

func RegisterSecretsManagerServer(s grpc.ServiceRegistrar, srv SecretsManagerServer) {
	s.RegisterService(&SecretsManager_ServiceDesc, srv)
}

func _SecretsManager_ListSecrets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSecretsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretsManagerServer).ListSecrets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretsManager_ListSecrets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretsManagerServer).ListSecrets(ctx, req.(*ListSecretsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretsManager_ListSecretVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSecretVersionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretsManagerServer).ListSecretVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretsManager_ListSecretVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretsManagerServer).ListSecretVersions(ctx, req.(*ListSecretVersionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretsManager_SetSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSecretReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretsManagerServer).SetSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretsManager_SetSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretsManagerServer).SetSecret(ctx, req.(*SetSecretReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretsManager_DeleteSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSecretReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretsManagerServer).DeleteSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretsManager_DeleteSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretsManagerServer).DeleteSecret(ctx, req.(*DeleteSecretReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretsManager_DeleteSecretVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSecretVersionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretsManagerServer).DeleteSecretVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretsManager_DeleteSecretVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretsManagerServer).DeleteSecretVersion(ctx, req.(*DeleteSecretVersionReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SecretsManager_ServiceDesc is the grpc.ServiceDesc for SecretsManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SecretsManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "prodvana.environment.SecretsManager",
	HandlerType: (*SecretsManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSecrets",
			Handler:    _SecretsManager_ListSecrets_Handler,
		},
		{
			MethodName: "ListSecretVersions",
			Handler:    _SecretsManager_ListSecretVersions_Handler,
		},
		{
			MethodName: "SetSecret",
			Handler:    _SecretsManager_SetSecret_Handler,
		},
		{
			MethodName: "DeleteSecret",
			Handler:    _SecretsManager_DeleteSecret_Handler,
		},
		{
			MethodName: "DeleteSecretVersion",
			Handler:    _SecretsManager_DeleteSecretVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "prodvana/secrets/secrets_manager.proto",
}
