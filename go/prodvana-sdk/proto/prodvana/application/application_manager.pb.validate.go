// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: prodvana/application/application_manager.proto

package application

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	insights "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/insights"

	version "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/version"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = insights.Class(0)

	_ = version.Source(0)
)

// Validate checks the field values on ListApplicationsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListApplicationsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListApplicationsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListApplicationsReqMultiError, or nil if none found.
func (m *ListApplicationsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListApplicationsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Detailed

	if len(errors) > 0 {
		return ListApplicationsReqMultiError(errors)
	}

	return nil
}

// ListApplicationsReqMultiError is an error wrapping multiple validation
// errors returned by ListApplicationsReq.ValidateAll() if the designated
// constraints aren't met.
type ListApplicationsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListApplicationsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListApplicationsReqMultiError) AllErrors() []error { return m }

// ListApplicationsReqValidationError is the validation error returned by
// ListApplicationsReq.Validate if the designated constraints aren't met.
type ListApplicationsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListApplicationsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListApplicationsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListApplicationsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListApplicationsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListApplicationsReqValidationError) ErrorName() string {
	return "ListApplicationsReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListApplicationsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListApplicationsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListApplicationsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListApplicationsReqValidationError{}

// Validate checks the field values on ListApplicationsResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListApplicationsResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListApplicationsResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListApplicationsRespMultiError, or nil if none found.
func (m *ListApplicationsResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListApplicationsResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetApplications() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListApplicationsRespValidationError{
						field:  fmt.Sprintf("Applications[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListApplicationsRespValidationError{
						field:  fmt.Sprintf("Applications[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListApplicationsRespValidationError{
					field:  fmt.Sprintf("Applications[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListApplicationsRespMultiError(errors)
	}

	return nil
}

// ListApplicationsRespMultiError is an error wrapping multiple validation
// errors returned by ListApplicationsResp.ValidateAll() if the designated
// constraints aren't met.
type ListApplicationsRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListApplicationsRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListApplicationsRespMultiError) AllErrors() []error { return m }

// ListApplicationsRespValidationError is the validation error returned by
// ListApplicationsResp.Validate if the designated constraints aren't met.
type ListApplicationsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListApplicationsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListApplicationsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListApplicationsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListApplicationsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListApplicationsRespValidationError) ErrorName() string {
	return "ListApplicationsRespValidationError"
}

// Error satisfies the builtin error interface
func (e ListApplicationsRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListApplicationsResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListApplicationsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListApplicationsRespValidationError{}

// Validate checks the field values on GetApplicationReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetApplicationReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetApplicationReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetApplicationReqMultiError, or nil if none found.
func (m *GetApplicationReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetApplicationReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetApplication()) < 1 {
		err := GetApplicationReqValidationError{
			field:  "Application",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetApplicationReqMultiError(errors)
	}

	return nil
}

// GetApplicationReqMultiError is an error wrapping multiple validation errors
// returned by GetApplicationReq.ValidateAll() if the designated constraints
// aren't met.
type GetApplicationReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetApplicationReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetApplicationReqMultiError) AllErrors() []error { return m }

// GetApplicationReqValidationError is the validation error returned by
// GetApplicationReq.Validate if the designated constraints aren't met.
type GetApplicationReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApplicationReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApplicationReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApplicationReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApplicationReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApplicationReqValidationError) ErrorName() string {
	return "GetApplicationReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetApplicationReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApplicationReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApplicationReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApplicationReqValidationError{}

// Validate checks the field values on GetApplicationResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetApplicationResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetApplicationResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetApplicationRespMultiError, or nil if none found.
func (m *GetApplicationResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetApplicationResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetApplication()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetApplicationRespValidationError{
					field:  "Application",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetApplicationRespValidationError{
					field:  "Application",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApplication()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetApplicationRespValidationError{
				field:  "Application",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetApplicationRespMultiError(errors)
	}

	return nil
}

// GetApplicationRespMultiError is an error wrapping multiple validation errors
// returned by GetApplicationResp.ValidateAll() if the designated constraints
// aren't met.
type GetApplicationRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetApplicationRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetApplicationRespMultiError) AllErrors() []error { return m }

// GetApplicationRespValidationError is the validation error returned by
// GetApplicationResp.Validate if the designated constraints aren't met.
type GetApplicationRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApplicationRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApplicationRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApplicationRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApplicationRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApplicationRespValidationError) ErrorName() string {
	return "GetApplicationRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetApplicationRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApplicationResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApplicationRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApplicationRespValidationError{}

// Validate checks the field values on ConfigureApplicationReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfigureApplicationReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigureApplicationReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfigureApplicationReqMultiError, or nil if none found.
func (m *ConfigureApplicationReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigureApplicationReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetApplicationConfig() == nil {
		err := ConfigureApplicationReqValidationError{
			field:  "ApplicationConfig",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetApplicationConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfigureApplicationReqValidationError{
					field:  "ApplicationConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfigureApplicationReqValidationError{
					field:  "ApplicationConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApplicationConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfigureApplicationReqValidationError{
				field:  "ApplicationConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Source

	if all {
		switch v := interface{}(m.GetSourceMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfigureApplicationReqValidationError{
					field:  "SourceMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfigureApplicationReqValidationError{
					field:  "SourceMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSourceMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfigureApplicationReqValidationError{
				field:  "SourceMetadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for BaseVersion

	if len(errors) > 0 {
		return ConfigureApplicationReqMultiError(errors)
	}

	return nil
}

// ConfigureApplicationReqMultiError is an error wrapping multiple validation
// errors returned by ConfigureApplicationReq.ValidateAll() if the designated
// constraints aren't met.
type ConfigureApplicationReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigureApplicationReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigureApplicationReqMultiError) AllErrors() []error { return m }

// ConfigureApplicationReqValidationError is the validation error returned by
// ConfigureApplicationReq.Validate if the designated constraints aren't met.
type ConfigureApplicationReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigureApplicationReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigureApplicationReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigureApplicationReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigureApplicationReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigureApplicationReqValidationError) ErrorName() string {
	return "ConfigureApplicationReqValidationError"
}

// Error satisfies the builtin error interface
func (e ConfigureApplicationReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigureApplicationReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigureApplicationReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigureApplicationReqValidationError{}

// Validate checks the field values on ConfigureApplicationResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfigureApplicationResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigureApplicationResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfigureApplicationRespMultiError, or nil if none found.
func (m *ConfigureApplicationResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigureApplicationResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMeta()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfigureApplicationRespValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfigureApplicationRespValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfigureApplicationRespValidationError{
				field:  "Meta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ConfigureApplicationRespMultiError(errors)
	}

	return nil
}

// ConfigureApplicationRespMultiError is an error wrapping multiple validation
// errors returned by ConfigureApplicationResp.ValidateAll() if the designated
// constraints aren't met.
type ConfigureApplicationRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigureApplicationRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigureApplicationRespMultiError) AllErrors() []error { return m }

// ConfigureApplicationRespValidationError is the validation error returned by
// ConfigureApplicationResp.Validate if the designated constraints aren't met.
type ConfigureApplicationRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigureApplicationRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigureApplicationRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigureApplicationRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigureApplicationRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigureApplicationRespValidationError) ErrorName() string {
	return "ConfigureApplicationRespValidationError"
}

// Error satisfies the builtin error interface
func (e ConfigureApplicationRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigureApplicationResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigureApplicationRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigureApplicationRespValidationError{}

// Validate checks the field values on ValidateConfigureApplicationResp with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ValidateConfigureApplicationResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidateConfigureApplicationResp with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ValidateConfigureApplicationRespMultiError, or nil if none found.
func (m *ValidateConfigureApplicationResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidateConfigureApplicationResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ValidateConfigureApplicationRespValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ValidateConfigureApplicationRespValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ValidateConfigureApplicationRespValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCompiledConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ValidateConfigureApplicationRespValidationError{
					field:  "CompiledConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ValidateConfigureApplicationRespValidationError{
					field:  "CompiledConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCompiledConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ValidateConfigureApplicationRespValidationError{
				field:  "CompiledConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetDangerousActions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ValidateConfigureApplicationRespValidationError{
						field:  fmt.Sprintf("DangerousActions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ValidateConfigureApplicationRespValidationError{
						field:  fmt.Sprintf("DangerousActions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ValidateConfigureApplicationRespValidationError{
					field:  fmt.Sprintf("DangerousActions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ValidateConfigureApplicationRespMultiError(errors)
	}

	return nil
}

// ValidateConfigureApplicationRespMultiError is an error wrapping multiple
// validation errors returned by
// ValidateConfigureApplicationResp.ValidateAll() if the designated
// constraints aren't met.
type ValidateConfigureApplicationRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidateConfigureApplicationRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidateConfigureApplicationRespMultiError) AllErrors() []error { return m }

// ValidateConfigureApplicationRespValidationError is the validation error
// returned by ValidateConfigureApplicationResp.Validate if the designated
// constraints aren't met.
type ValidateConfigureApplicationRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateConfigureApplicationRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateConfigureApplicationRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateConfigureApplicationRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateConfigureApplicationRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateConfigureApplicationRespValidationError) ErrorName() string {
	return "ValidateConfigureApplicationRespValidationError"
}

// Error satisfies the builtin error interface
func (e ValidateConfigureApplicationRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateConfigureApplicationResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateConfigureApplicationRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateConfigureApplicationRespValidationError{}

// Validate checks the field values on GetApplicationConfigReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetApplicationConfigReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetApplicationConfigReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetApplicationConfigReqMultiError, or nil if none found.
func (m *GetApplicationConfigReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetApplicationConfigReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetApplication()) < 1 {
		err := GetApplicationConfigReqValidationError{
			field:  "Application",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Version

	if len(errors) > 0 {
		return GetApplicationConfigReqMultiError(errors)
	}

	return nil
}

// GetApplicationConfigReqMultiError is an error wrapping multiple validation
// errors returned by GetApplicationConfigReq.ValidateAll() if the designated
// constraints aren't met.
type GetApplicationConfigReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetApplicationConfigReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetApplicationConfigReqMultiError) AllErrors() []error { return m }

// GetApplicationConfigReqValidationError is the validation error returned by
// GetApplicationConfigReq.Validate if the designated constraints aren't met.
type GetApplicationConfigReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApplicationConfigReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApplicationConfigReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApplicationConfigReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApplicationConfigReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApplicationConfigReqValidationError) ErrorName() string {
	return "GetApplicationConfigReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetApplicationConfigReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApplicationConfigReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApplicationConfigReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApplicationConfigReqValidationError{}

// Validate checks the field values on GetApplicationConfigResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetApplicationConfigResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetApplicationConfigResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetApplicationConfigRespMultiError, or nil if none found.
func (m *GetApplicationConfigResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetApplicationConfigResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetApplicationConfigRespValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetApplicationConfigRespValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetApplicationConfigRespValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Version

	if all {
		switch v := interface{}(m.GetCompiledConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetApplicationConfigRespValidationError{
					field:  "CompiledConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetApplicationConfigRespValidationError{
					field:  "CompiledConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCompiledConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetApplicationConfigRespValidationError{
				field:  "CompiledConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetApplicationConfigRespMultiError(errors)
	}

	return nil
}

// GetApplicationConfigRespMultiError is an error wrapping multiple validation
// errors returned by GetApplicationConfigResp.ValidateAll() if the designated
// constraints aren't met.
type GetApplicationConfigRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetApplicationConfigRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetApplicationConfigRespMultiError) AllErrors() []error { return m }

// GetApplicationConfigRespValidationError is the validation error returned by
// GetApplicationConfigResp.Validate if the designated constraints aren't met.
type GetApplicationConfigRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApplicationConfigRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApplicationConfigRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApplicationConfigRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApplicationConfigRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApplicationConfigRespValidationError) ErrorName() string {
	return "GetApplicationConfigRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetApplicationConfigRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApplicationConfigResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApplicationConfigRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApplicationConfigRespValidationError{}

// Validate checks the field values on DeleteApplicationReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteApplicationReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteApplicationReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteApplicationReqMultiError, or nil if none found.
func (m *DeleteApplicationReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteApplicationReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetApplication()) < 1 {
		err := DeleteApplicationReqValidationError{
			field:  "Application",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteApplicationReqMultiError(errors)
	}

	return nil
}

// DeleteApplicationReqMultiError is an error wrapping multiple validation
// errors returned by DeleteApplicationReq.ValidateAll() if the designated
// constraints aren't met.
type DeleteApplicationReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteApplicationReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteApplicationReqMultiError) AllErrors() []error { return m }

// DeleteApplicationReqValidationError is the validation error returned by
// DeleteApplicationReq.Validate if the designated constraints aren't met.
type DeleteApplicationReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteApplicationReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteApplicationReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteApplicationReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteApplicationReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteApplicationReqValidationError) ErrorName() string {
	return "DeleteApplicationReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteApplicationReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteApplicationReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteApplicationReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteApplicationReqValidationError{}

// Validate checks the field values on DeleteApplicationResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteApplicationResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteApplicationResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteApplicationRespMultiError, or nil if none found.
func (m *DeleteApplicationResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteApplicationResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteApplicationRespMultiError(errors)
	}

	return nil
}

// DeleteApplicationRespMultiError is an error wrapping multiple validation
// errors returned by DeleteApplicationResp.ValidateAll() if the designated
// constraints aren't met.
type DeleteApplicationRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteApplicationRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteApplicationRespMultiError) AllErrors() []error { return m }

// DeleteApplicationRespValidationError is the validation error returned by
// DeleteApplicationResp.Validate if the designated constraints aren't met.
type DeleteApplicationRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteApplicationRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteApplicationRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteApplicationRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteApplicationRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteApplicationRespValidationError) ErrorName() string {
	return "DeleteApplicationRespValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteApplicationRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteApplicationResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteApplicationRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteApplicationRespValidationError{}

// Validate checks the field values on GetApplicationMetricsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetApplicationMetricsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetApplicationMetricsReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetApplicationMetricsReqMultiError, or nil if none found.
func (m *GetApplicationMetricsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetApplicationMetricsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetApplication()) < 1 {
		err := GetApplicationMetricsReqValidationError{
			field:  "Application",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetStartTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetApplicationMetricsReqValidationError{
					field:  "StartTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetApplicationMetricsReqValidationError{
					field:  "StartTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetApplicationMetricsReqValidationError{
				field:  "StartTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetApplicationMetricsReqValidationError{
					field:  "EndTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetApplicationMetricsReqValidationError{
					field:  "EndTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetApplicationMetricsReqValidationError{
				field:  "EndTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetApplicationMetricsReqMultiError(errors)
	}

	return nil
}

// GetApplicationMetricsReqMultiError is an error wrapping multiple validation
// errors returned by GetApplicationMetricsReq.ValidateAll() if the designated
// constraints aren't met.
type GetApplicationMetricsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetApplicationMetricsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetApplicationMetricsReqMultiError) AllErrors() []error { return m }

// GetApplicationMetricsReqValidationError is the validation error returned by
// GetApplicationMetricsReq.Validate if the designated constraints aren't met.
type GetApplicationMetricsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApplicationMetricsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApplicationMetricsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApplicationMetricsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApplicationMetricsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApplicationMetricsReqValidationError) ErrorName() string {
	return "GetApplicationMetricsReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetApplicationMetricsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApplicationMetricsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApplicationMetricsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApplicationMetricsReqValidationError{}

// Validate checks the field values on GetApplicationMetricsResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetApplicationMetricsResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetApplicationMetricsResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetApplicationMetricsRespMultiError, or nil if none found.
func (m *GetApplicationMetricsResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetApplicationMetricsResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDeploymentMetrics()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetApplicationMetricsRespValidationError{
					field:  "DeploymentMetrics",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetApplicationMetricsRespValidationError{
					field:  "DeploymentMetrics",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeploymentMetrics()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetApplicationMetricsRespValidationError{
				field:  "DeploymentMetrics",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetApplicationMetricsRespMultiError(errors)
	}

	return nil
}

// GetApplicationMetricsRespMultiError is an error wrapping multiple validation
// errors returned by GetApplicationMetricsResp.ValidateAll() if the
// designated constraints aren't met.
type GetApplicationMetricsRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetApplicationMetricsRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetApplicationMetricsRespMultiError) AllErrors() []error { return m }

// GetApplicationMetricsRespValidationError is the validation error returned by
// GetApplicationMetricsResp.Validate if the designated constraints aren't met.
type GetApplicationMetricsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApplicationMetricsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApplicationMetricsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApplicationMetricsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApplicationMetricsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApplicationMetricsRespValidationError) ErrorName() string {
	return "GetApplicationMetricsRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetApplicationMetricsRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApplicationMetricsResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApplicationMetricsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApplicationMetricsRespValidationError{}

// Validate checks the field values on GetApplicationInsightsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetApplicationInsightsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetApplicationInsightsReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetApplicationInsightsReqMultiError, or nil if none found.
func (m *GetApplicationInsightsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetApplicationInsightsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetApplication()) < 1 {
		err := GetApplicationInsightsReqValidationError{
			field:  "Application",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetApplicationInsightsReqMultiError(errors)
	}

	return nil
}

// GetApplicationInsightsReqMultiError is an error wrapping multiple validation
// errors returned by GetApplicationInsightsReq.ValidateAll() if the
// designated constraints aren't met.
type GetApplicationInsightsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetApplicationInsightsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetApplicationInsightsReqMultiError) AllErrors() []error { return m }

// GetApplicationInsightsReqValidationError is the validation error returned by
// GetApplicationInsightsReq.Validate if the designated constraints aren't met.
type GetApplicationInsightsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApplicationInsightsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApplicationInsightsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApplicationInsightsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApplicationInsightsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApplicationInsightsReqValidationError) ErrorName() string {
	return "GetApplicationInsightsReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetApplicationInsightsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApplicationInsightsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApplicationInsightsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApplicationInsightsReqValidationError{}

// Validate checks the field values on GetApplicationInsightsResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetApplicationInsightsResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetApplicationInsightsResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetApplicationInsightsRespMultiError, or nil if none found.
func (m *GetApplicationInsightsResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetApplicationInsightsResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetInsights() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetApplicationInsightsRespValidationError{
						field:  fmt.Sprintf("Insights[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetApplicationInsightsRespValidationError{
						field:  fmt.Sprintf("Insights[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetApplicationInsightsRespValidationError{
					field:  fmt.Sprintf("Insights[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetApplicationInsightsRespMultiError(errors)
	}

	return nil
}

// GetApplicationInsightsRespMultiError is an error wrapping multiple
// validation errors returned by GetApplicationInsightsResp.ValidateAll() if
// the designated constraints aren't met.
type GetApplicationInsightsRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetApplicationInsightsRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetApplicationInsightsRespMultiError) AllErrors() []error { return m }

// GetApplicationInsightsRespValidationError is the validation error returned
// by GetApplicationInsightsResp.Validate if the designated constraints aren't met.
type GetApplicationInsightsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApplicationInsightsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApplicationInsightsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApplicationInsightsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApplicationInsightsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApplicationInsightsRespValidationError) ErrorName() string {
	return "GetApplicationInsightsRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetApplicationInsightsRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApplicationInsightsResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApplicationInsightsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApplicationInsightsRespValidationError{}

// Validate checks the field values on SnoozeApplicationInsightReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SnoozeApplicationInsightReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SnoozeApplicationInsightReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SnoozeApplicationInsightReqMultiError, or nil if none found.
func (m *SnoozeApplicationInsightReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SnoozeApplicationInsightReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetApplication()) < 1 {
		err := SnoozeApplicationInsightReqValidationError{
			field:  "Application",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := insights.Class_name[int32(m.GetClass())]; !ok {
		err := SnoozeApplicationInsightReqValidationError{
			field:  "Class",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetDuration() == nil {
		err := SnoozeApplicationInsightReqValidationError{
			field:  "Duration",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if d := m.GetDuration(); d != nil {
		dur, err := d.AsDuration(), d.CheckValid()
		if err != nil {
			err = SnoozeApplicationInsightReqValidationError{
				field:  "Duration",
				reason: "value is not a valid duration",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {

			gt := time.Duration(0*time.Second + 0*time.Nanosecond)

			if dur <= gt {
				err := SnoozeApplicationInsightReqValidationError{
					field:  "Duration",
					reason: "value must be greater than 0s",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if len(errors) > 0 {
		return SnoozeApplicationInsightReqMultiError(errors)
	}

	return nil
}

// SnoozeApplicationInsightReqMultiError is an error wrapping multiple
// validation errors returned by SnoozeApplicationInsightReq.ValidateAll() if
// the designated constraints aren't met.
type SnoozeApplicationInsightReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SnoozeApplicationInsightReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SnoozeApplicationInsightReqMultiError) AllErrors() []error { return m }

// SnoozeApplicationInsightReqValidationError is the validation error returned
// by SnoozeApplicationInsightReq.Validate if the designated constraints
// aren't met.
type SnoozeApplicationInsightReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SnoozeApplicationInsightReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SnoozeApplicationInsightReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SnoozeApplicationInsightReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SnoozeApplicationInsightReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SnoozeApplicationInsightReqValidationError) ErrorName() string {
	return "SnoozeApplicationInsightReqValidationError"
}

// Error satisfies the builtin error interface
func (e SnoozeApplicationInsightReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSnoozeApplicationInsightReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SnoozeApplicationInsightReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SnoozeApplicationInsightReqValidationError{}

// Validate checks the field values on SnoozeApplicationInsightResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SnoozeApplicationInsightResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SnoozeApplicationInsightResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SnoozeApplicationInsightRespMultiError, or nil if none found.
func (m *SnoozeApplicationInsightResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SnoozeApplicationInsightResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SnoozeApplicationInsightRespMultiError(errors)
	}

	return nil
}

// SnoozeApplicationInsightRespMultiError is an error wrapping multiple
// validation errors returned by SnoozeApplicationInsightResp.ValidateAll() if
// the designated constraints aren't met.
type SnoozeApplicationInsightRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SnoozeApplicationInsightRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SnoozeApplicationInsightRespMultiError) AllErrors() []error { return m }

// SnoozeApplicationInsightRespValidationError is the validation error returned
// by SnoozeApplicationInsightResp.Validate if the designated constraints
// aren't met.
type SnoozeApplicationInsightRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SnoozeApplicationInsightRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SnoozeApplicationInsightRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SnoozeApplicationInsightRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SnoozeApplicationInsightRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SnoozeApplicationInsightRespValidationError) ErrorName() string {
	return "SnoozeApplicationInsightRespValidationError"
}

// Error satisfies the builtin error interface
func (e SnoozeApplicationInsightRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSnoozeApplicationInsightResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SnoozeApplicationInsightRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SnoozeApplicationInsightRespValidationError{}

// Validate checks the field values on GetApplicationMetadataReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetApplicationMetadataReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetApplicationMetadataReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetApplicationMetadataReqMultiError, or nil if none found.
func (m *GetApplicationMetadataReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetApplicationMetadataReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetApplication()) < 1 {
		err := GetApplicationMetadataReqValidationError{
			field:  "Application",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetApplicationMetadataReqMultiError(errors)
	}

	return nil
}

// GetApplicationMetadataReqMultiError is an error wrapping multiple validation
// errors returned by GetApplicationMetadataReq.ValidateAll() if the
// designated constraints aren't met.
type GetApplicationMetadataReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetApplicationMetadataReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetApplicationMetadataReqMultiError) AllErrors() []error { return m }

// GetApplicationMetadataReqValidationError is the validation error returned by
// GetApplicationMetadataReq.Validate if the designated constraints aren't met.
type GetApplicationMetadataReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApplicationMetadataReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApplicationMetadataReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApplicationMetadataReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApplicationMetadataReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApplicationMetadataReqValidationError) ErrorName() string {
	return "GetApplicationMetadataReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetApplicationMetadataReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApplicationMetadataReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApplicationMetadataReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApplicationMetadataReqValidationError{}

// Validate checks the field values on GetApplicationMetadataResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetApplicationMetadataResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetApplicationMetadataResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetApplicationMetadataRespMultiError, or nil if none found.
func (m *GetApplicationMetadataResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetApplicationMetadataResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetApplicationMetadataRespValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetApplicationMetadataRespValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetApplicationMetadataRespValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetApplicationMetadataRespMultiError(errors)
	}

	return nil
}

// GetApplicationMetadataRespMultiError is an error wrapping multiple
// validation errors returned by GetApplicationMetadataResp.ValidateAll() if
// the designated constraints aren't met.
type GetApplicationMetadataRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetApplicationMetadataRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetApplicationMetadataRespMultiError) AllErrors() []error { return m }

// GetApplicationMetadataRespValidationError is the validation error returned
// by GetApplicationMetadataResp.Validate if the designated constraints aren't met.
type GetApplicationMetadataRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApplicationMetadataRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApplicationMetadataRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApplicationMetadataRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApplicationMetadataRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApplicationMetadataRespValidationError) ErrorName() string {
	return "GetApplicationMetadataRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetApplicationMetadataRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApplicationMetadataResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApplicationMetadataRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApplicationMetadataRespValidationError{}

// Validate checks the field values on SetApplicationMetadataReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetApplicationMetadataReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetApplicationMetadataReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetApplicationMetadataReqMultiError, or nil if none found.
func (m *SetApplicationMetadataReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetApplicationMetadataReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetApplication()) < 1 {
		err := SetApplicationMetadataReqValidationError{
			field:  "Application",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetMetadata() == nil {
		err := SetApplicationMetadataReqValidationError{
			field:  "Metadata",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetApplicationMetadataReqValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetApplicationMetadataReqValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetApplicationMetadataReqValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetApplicationMetadataReqMultiError(errors)
	}

	return nil
}

// SetApplicationMetadataReqMultiError is an error wrapping multiple validation
// errors returned by SetApplicationMetadataReq.ValidateAll() if the
// designated constraints aren't met.
type SetApplicationMetadataReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetApplicationMetadataReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetApplicationMetadataReqMultiError) AllErrors() []error { return m }

// SetApplicationMetadataReqValidationError is the validation error returned by
// SetApplicationMetadataReq.Validate if the designated constraints aren't met.
type SetApplicationMetadataReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetApplicationMetadataReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetApplicationMetadataReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetApplicationMetadataReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetApplicationMetadataReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetApplicationMetadataReqValidationError) ErrorName() string {
	return "SetApplicationMetadataReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetApplicationMetadataReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetApplicationMetadataReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetApplicationMetadataReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetApplicationMetadataReqValidationError{}

// Validate checks the field values on SetApplicationMetadataResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetApplicationMetadataResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetApplicationMetadataResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetApplicationMetadataRespMultiError, or nil if none found.
func (m *SetApplicationMetadataResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SetApplicationMetadataResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetApplicationMetadataRespMultiError(errors)
	}

	return nil
}

// SetApplicationMetadataRespMultiError is an error wrapping multiple
// validation errors returned by SetApplicationMetadataResp.ValidateAll() if
// the designated constraints aren't met.
type SetApplicationMetadataRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetApplicationMetadataRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetApplicationMetadataRespMultiError) AllErrors() []error { return m }

// SetApplicationMetadataRespValidationError is the validation error returned
// by SetApplicationMetadataResp.Validate if the designated constraints aren't met.
type SetApplicationMetadataRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetApplicationMetadataRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetApplicationMetadataRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetApplicationMetadataRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetApplicationMetadataRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetApplicationMetadataRespValidationError) ErrorName() string {
	return "SetApplicationMetadataRespValidationError"
}

// Error satisfies the builtin error interface
func (e SetApplicationMetadataRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetApplicationMetadataResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetApplicationMetadataRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetApplicationMetadataRespValidationError{}
