// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.10
// source: prodvana/application/application_manager.proto

package application

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ApplicationManager_ConfigureApplication_FullMethodName          = "/prodvana.application.ApplicationManager/ConfigureApplication"
	ApplicationManager_ValidateConfigureApplication_FullMethodName  = "/prodvana.application.ApplicationManager/ValidateConfigureApplication"
	ApplicationManager_ListApplications_FullMethodName              = "/prodvana.application.ApplicationManager/ListApplications"
	ApplicationManager_GetApplicationConfig_FullMethodName          = "/prodvana.application.ApplicationManager/GetApplicationConfig"
	ApplicationManager_ListApplicationConfigVersions_FullMethodName = "/prodvana.application.ApplicationManager/ListApplicationConfigVersions"
	ApplicationManager_GetApplication_FullMethodName                = "/prodvana.application.ApplicationManager/GetApplication"
	ApplicationManager_DeleteApplication_FullMethodName             = "/prodvana.application.ApplicationManager/DeleteApplication"
	ApplicationManager_GetApplicationMetrics_FullMethodName         = "/prodvana.application.ApplicationManager/GetApplicationMetrics"
	ApplicationManager_GetApplicationInsights_FullMethodName        = "/prodvana.application.ApplicationManager/GetApplicationInsights"
	ApplicationManager_SnoozeApplicationInsight_FullMethodName      = "/prodvana.application.ApplicationManager/SnoozeApplicationInsight"
	ApplicationManager_GetApplicationMetadata_FullMethodName        = "/prodvana.application.ApplicationManager/GetApplicationMetadata"
	ApplicationManager_SetApplicationMetadata_FullMethodName        = "/prodvana.application.ApplicationManager/SetApplicationMetadata"
)

// ApplicationManagerClient is the client API for ApplicationManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApplicationManagerClient interface {
	ConfigureApplication(ctx context.Context, in *ConfigureApplicationReq, opts ...grpc.CallOption) (*ConfigureApplicationResp, error)
	ValidateConfigureApplication(ctx context.Context, in *ConfigureApplicationReq, opts ...grpc.CallOption) (*ValidateConfigureApplicationResp, error)
	ListApplications(ctx context.Context, in *ListApplicationsReq, opts ...grpc.CallOption) (*ListApplicationsResp, error)
	GetApplicationConfig(ctx context.Context, in *GetApplicationConfigReq, opts ...grpc.CallOption) (*GetApplicationConfigResp, error)
	ListApplicationConfigVersions(ctx context.Context, in *ListApplicationConfigVersionsReq, opts ...grpc.CallOption) (*ListApplicationConfigVersionsResp, error)
	GetApplication(ctx context.Context, in *GetApplicationReq, opts ...grpc.CallOption) (*GetApplicationResp, error)
	DeleteApplication(ctx context.Context, in *DeleteApplicationReq, opts ...grpc.CallOption) (*DeleteApplicationResp, error)
	GetApplicationMetrics(ctx context.Context, in *GetApplicationMetricsReq, opts ...grpc.CallOption) (*GetApplicationMetricsResp, error)
	GetApplicationInsights(ctx context.Context, in *GetApplicationInsightsReq, opts ...grpc.CallOption) (*GetApplicationInsightsResp, error)
	SnoozeApplicationInsight(ctx context.Context, in *SnoozeApplicationInsightReq, opts ...grpc.CallOption) (*SnoozeApplicationInsightResp, error)
	// Get application metadata, useful for constructing edit workflows for metadata
	GetApplicationMetadata(ctx context.Context, in *GetApplicationMetadataReq, opts ...grpc.CallOption) (*GetApplicationMetadataResp, error)
	SetApplicationMetadata(ctx context.Context, in *SetApplicationMetadataReq, opts ...grpc.CallOption) (*SetApplicationMetadataResp, error)
}

type applicationManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewApplicationManagerClient(cc grpc.ClientConnInterface) ApplicationManagerClient {
	return &applicationManagerClient{cc}
}

func (c *applicationManagerClient) ConfigureApplication(ctx context.Context, in *ConfigureApplicationReq, opts ...grpc.CallOption) (*ConfigureApplicationResp, error) {
	out := new(ConfigureApplicationResp)
	err := c.cc.Invoke(ctx, ApplicationManager_ConfigureApplication_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagerClient) ValidateConfigureApplication(ctx context.Context, in *ConfigureApplicationReq, opts ...grpc.CallOption) (*ValidateConfigureApplicationResp, error) {
	out := new(ValidateConfigureApplicationResp)
	err := c.cc.Invoke(ctx, ApplicationManager_ValidateConfigureApplication_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagerClient) ListApplications(ctx context.Context, in *ListApplicationsReq, opts ...grpc.CallOption) (*ListApplicationsResp, error) {
	out := new(ListApplicationsResp)
	err := c.cc.Invoke(ctx, ApplicationManager_ListApplications_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagerClient) GetApplicationConfig(ctx context.Context, in *GetApplicationConfigReq, opts ...grpc.CallOption) (*GetApplicationConfigResp, error) {
	out := new(GetApplicationConfigResp)
	err := c.cc.Invoke(ctx, ApplicationManager_GetApplicationConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagerClient) ListApplicationConfigVersions(ctx context.Context, in *ListApplicationConfigVersionsReq, opts ...grpc.CallOption) (*ListApplicationConfigVersionsResp, error) {
	out := new(ListApplicationConfigVersionsResp)
	err := c.cc.Invoke(ctx, ApplicationManager_ListApplicationConfigVersions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagerClient) GetApplication(ctx context.Context, in *GetApplicationReq, opts ...grpc.CallOption) (*GetApplicationResp, error) {
	out := new(GetApplicationResp)
	err := c.cc.Invoke(ctx, ApplicationManager_GetApplication_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagerClient) DeleteApplication(ctx context.Context, in *DeleteApplicationReq, opts ...grpc.CallOption) (*DeleteApplicationResp, error) {
	out := new(DeleteApplicationResp)
	err := c.cc.Invoke(ctx, ApplicationManager_DeleteApplication_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagerClient) GetApplicationMetrics(ctx context.Context, in *GetApplicationMetricsReq, opts ...grpc.CallOption) (*GetApplicationMetricsResp, error) {
	out := new(GetApplicationMetricsResp)
	err := c.cc.Invoke(ctx, ApplicationManager_GetApplicationMetrics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagerClient) GetApplicationInsights(ctx context.Context, in *GetApplicationInsightsReq, opts ...grpc.CallOption) (*GetApplicationInsightsResp, error) {
	out := new(GetApplicationInsightsResp)
	err := c.cc.Invoke(ctx, ApplicationManager_GetApplicationInsights_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagerClient) SnoozeApplicationInsight(ctx context.Context, in *SnoozeApplicationInsightReq, opts ...grpc.CallOption) (*SnoozeApplicationInsightResp, error) {
	out := new(SnoozeApplicationInsightResp)
	err := c.cc.Invoke(ctx, ApplicationManager_SnoozeApplicationInsight_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagerClient) GetApplicationMetadata(ctx context.Context, in *GetApplicationMetadataReq, opts ...grpc.CallOption) (*GetApplicationMetadataResp, error) {
	out := new(GetApplicationMetadataResp)
	err := c.cc.Invoke(ctx, ApplicationManager_GetApplicationMetadata_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagerClient) SetApplicationMetadata(ctx context.Context, in *SetApplicationMetadataReq, opts ...grpc.CallOption) (*SetApplicationMetadataResp, error) {
	out := new(SetApplicationMetadataResp)
	err := c.cc.Invoke(ctx, ApplicationManager_SetApplicationMetadata_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApplicationManagerServer is the server API for ApplicationManager service.
// All implementations must embed UnimplementedApplicationManagerServer
// for forward compatibility
type ApplicationManagerServer interface {
	ConfigureApplication(context.Context, *ConfigureApplicationReq) (*ConfigureApplicationResp, error)
	ValidateConfigureApplication(context.Context, *ConfigureApplicationReq) (*ValidateConfigureApplicationResp, error)
	ListApplications(context.Context, *ListApplicationsReq) (*ListApplicationsResp, error)
	GetApplicationConfig(context.Context, *GetApplicationConfigReq) (*GetApplicationConfigResp, error)
	ListApplicationConfigVersions(context.Context, *ListApplicationConfigVersionsReq) (*ListApplicationConfigVersionsResp, error)
	GetApplication(context.Context, *GetApplicationReq) (*GetApplicationResp, error)
	DeleteApplication(context.Context, *DeleteApplicationReq) (*DeleteApplicationResp, error)
	GetApplicationMetrics(context.Context, *GetApplicationMetricsReq) (*GetApplicationMetricsResp, error)
	GetApplicationInsights(context.Context, *GetApplicationInsightsReq) (*GetApplicationInsightsResp, error)
	SnoozeApplicationInsight(context.Context, *SnoozeApplicationInsightReq) (*SnoozeApplicationInsightResp, error)
	// Get application metadata, useful for constructing edit workflows for metadata
	GetApplicationMetadata(context.Context, *GetApplicationMetadataReq) (*GetApplicationMetadataResp, error)
	SetApplicationMetadata(context.Context, *SetApplicationMetadataReq) (*SetApplicationMetadataResp, error)
	mustEmbedUnimplementedApplicationManagerServer()
}

// UnimplementedApplicationManagerServer must be embedded to have forward compatible implementations.
type UnimplementedApplicationManagerServer struct {
}

func (UnimplementedApplicationManagerServer) ConfigureApplication(context.Context, *ConfigureApplicationReq) (*ConfigureApplicationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureApplication not implemented")
}
func (UnimplementedApplicationManagerServer) ValidateConfigureApplication(context.Context, *ConfigureApplicationReq) (*ValidateConfigureApplicationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateConfigureApplication not implemented")
}
func (UnimplementedApplicationManagerServer) ListApplications(context.Context, *ListApplicationsReq) (*ListApplicationsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApplications not implemented")
}
func (UnimplementedApplicationManagerServer) GetApplicationConfig(context.Context, *GetApplicationConfigReq) (*GetApplicationConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplicationConfig not implemented")
}
func (UnimplementedApplicationManagerServer) ListApplicationConfigVersions(context.Context, *ListApplicationConfigVersionsReq) (*ListApplicationConfigVersionsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApplicationConfigVersions not implemented")
}
func (UnimplementedApplicationManagerServer) GetApplication(context.Context, *GetApplicationReq) (*GetApplicationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplication not implemented")
}
func (UnimplementedApplicationManagerServer) DeleteApplication(context.Context, *DeleteApplicationReq) (*DeleteApplicationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApplication not implemented")
}
func (UnimplementedApplicationManagerServer) GetApplicationMetrics(context.Context, *GetApplicationMetricsReq) (*GetApplicationMetricsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplicationMetrics not implemented")
}
func (UnimplementedApplicationManagerServer) GetApplicationInsights(context.Context, *GetApplicationInsightsReq) (*GetApplicationInsightsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplicationInsights not implemented")
}
func (UnimplementedApplicationManagerServer) SnoozeApplicationInsight(context.Context, *SnoozeApplicationInsightReq) (*SnoozeApplicationInsightResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SnoozeApplicationInsight not implemented")
}
func (UnimplementedApplicationManagerServer) GetApplicationMetadata(context.Context, *GetApplicationMetadataReq) (*GetApplicationMetadataResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplicationMetadata not implemented")
}
func (UnimplementedApplicationManagerServer) SetApplicationMetadata(context.Context, *SetApplicationMetadataReq) (*SetApplicationMetadataResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetApplicationMetadata not implemented")
}
func (UnimplementedApplicationManagerServer) mustEmbedUnimplementedApplicationManagerServer() {}

// UnsafeApplicationManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApplicationManagerServer will
// result in compilation errors.
type UnsafeApplicationManagerServer interface {
	mustEmbedUnimplementedApplicationManagerServer()
}

func RegisterApplicationManagerServer(s grpc.ServiceRegistrar, srv ApplicationManagerServer) {
	s.RegisterService(&ApplicationManager_ServiceDesc, srv)
}

func _ApplicationManager_ConfigureApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureApplicationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagerServer).ConfigureApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationManager_ConfigureApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagerServer).ConfigureApplication(ctx, req.(*ConfigureApplicationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManager_ValidateConfigureApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureApplicationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagerServer).ValidateConfigureApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationManager_ValidateConfigureApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagerServer).ValidateConfigureApplication(ctx, req.(*ConfigureApplicationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManager_ListApplications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListApplicationsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagerServer).ListApplications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationManager_ListApplications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagerServer).ListApplications(ctx, req.(*ListApplicationsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManager_GetApplicationConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicationConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagerServer).GetApplicationConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationManager_GetApplicationConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagerServer).GetApplicationConfig(ctx, req.(*GetApplicationConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManager_ListApplicationConfigVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListApplicationConfigVersionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagerServer).ListApplicationConfigVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationManager_ListApplicationConfigVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagerServer).ListApplicationConfigVersions(ctx, req.(*ListApplicationConfigVersionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManager_GetApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagerServer).GetApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationManager_GetApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagerServer).GetApplication(ctx, req.(*GetApplicationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManager_DeleteApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApplicationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagerServer).DeleteApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationManager_DeleteApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagerServer).DeleteApplication(ctx, req.(*DeleteApplicationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManager_GetApplicationMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicationMetricsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagerServer).GetApplicationMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationManager_GetApplicationMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagerServer).GetApplicationMetrics(ctx, req.(*GetApplicationMetricsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManager_GetApplicationInsights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicationInsightsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagerServer).GetApplicationInsights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationManager_GetApplicationInsights_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagerServer).GetApplicationInsights(ctx, req.(*GetApplicationInsightsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManager_SnoozeApplicationInsight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnoozeApplicationInsightReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagerServer).SnoozeApplicationInsight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationManager_SnoozeApplicationInsight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagerServer).SnoozeApplicationInsight(ctx, req.(*SnoozeApplicationInsightReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManager_GetApplicationMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicationMetadataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagerServer).GetApplicationMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationManager_GetApplicationMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagerServer).GetApplicationMetadata(ctx, req.(*GetApplicationMetadataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManager_SetApplicationMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetApplicationMetadataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagerServer).SetApplicationMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationManager_SetApplicationMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagerServer).SetApplicationMetadata(ctx, req.(*SetApplicationMetadataReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ApplicationManager_ServiceDesc is the grpc.ServiceDesc for ApplicationManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApplicationManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "prodvana.application.ApplicationManager",
	HandlerType: (*ApplicationManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConfigureApplication",
			Handler:    _ApplicationManager_ConfigureApplication_Handler,
		},
		{
			MethodName: "ValidateConfigureApplication",
			Handler:    _ApplicationManager_ValidateConfigureApplication_Handler,
		},
		{
			MethodName: "ListApplications",
			Handler:    _ApplicationManager_ListApplications_Handler,
		},
		{
			MethodName: "GetApplicationConfig",
			Handler:    _ApplicationManager_GetApplicationConfig_Handler,
		},
		{
			MethodName: "ListApplicationConfigVersions",
			Handler:    _ApplicationManager_ListApplicationConfigVersions_Handler,
		},
		{
			MethodName: "GetApplication",
			Handler:    _ApplicationManager_GetApplication_Handler,
		},
		{
			MethodName: "DeleteApplication",
			Handler:    _ApplicationManager_DeleteApplication_Handler,
		},
		{
			MethodName: "GetApplicationMetrics",
			Handler:    _ApplicationManager_GetApplicationMetrics_Handler,
		},
		{
			MethodName: "GetApplicationInsights",
			Handler:    _ApplicationManager_GetApplicationInsights_Handler,
		},
		{
			MethodName: "SnoozeApplicationInsight",
			Handler:    _ApplicationManager_SnoozeApplicationInsight_Handler,
		},
		{
			MethodName: "GetApplicationMetadata",
			Handler:    _ApplicationManager_GetApplicationMetadata_Handler,
		},
		{
			MethodName: "SetApplicationMetadata",
			Handler:    _ApplicationManager_SetApplicationMetadata_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "prodvana/application/application_manager.proto",
}
