// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.10
// source: prodvana/billing/manager.proto

package billing

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BillingManager_GetUsageMetrics_FullMethodName = "/prodvana.billing.BillingManager/GetUsageMetrics"
)

// BillingManagerClient is the client API for BillingManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BillingManagerClient interface {
	GetUsageMetrics(ctx context.Context, in *GetUsageMetricsReq, opts ...grpc.CallOption) (*GetUsageMetricsResp, error)
}

type billingManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewBillingManagerClient(cc grpc.ClientConnInterface) BillingManagerClient {
	return &billingManagerClient{cc}
}

func (c *billingManagerClient) GetUsageMetrics(ctx context.Context, in *GetUsageMetricsReq, opts ...grpc.CallOption) (*GetUsageMetricsResp, error) {
	out := new(GetUsageMetricsResp)
	err := c.cc.Invoke(ctx, BillingManager_GetUsageMetrics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BillingManagerServer is the server API for BillingManager service.
// All implementations must embed UnimplementedBillingManagerServer
// for forward compatibility
type BillingManagerServer interface {
	GetUsageMetrics(context.Context, *GetUsageMetricsReq) (*GetUsageMetricsResp, error)
	mustEmbedUnimplementedBillingManagerServer()
}

// UnimplementedBillingManagerServer must be embedded to have forward compatible implementations.
type UnimplementedBillingManagerServer struct {
}

func (UnimplementedBillingManagerServer) GetUsageMetrics(context.Context, *GetUsageMetricsReq) (*GetUsageMetricsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsageMetrics not implemented")
}
func (UnimplementedBillingManagerServer) mustEmbedUnimplementedBillingManagerServer() {}

// UnsafeBillingManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BillingManagerServer will
// result in compilation errors.
type UnsafeBillingManagerServer interface {
	mustEmbedUnimplementedBillingManagerServer()
}

func RegisterBillingManagerServer(s grpc.ServiceRegistrar, srv BillingManagerServer) {
	s.RegisterService(&BillingManager_ServiceDesc, srv)
}

func _BillingManager_GetUsageMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsageMetricsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingManagerServer).GetUsageMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingManager_GetUsageMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingManagerServer).GetUsageMetrics(ctx, req.(*GetUsageMetricsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// BillingManager_ServiceDesc is the grpc.ServiceDesc for BillingManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BillingManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "prodvana.billing.BillingManager",
	HandlerType: (*BillingManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUsageMetrics",
			Handler:    _BillingManager_GetUsageMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "prodvana/billing/manager.proto",
}
