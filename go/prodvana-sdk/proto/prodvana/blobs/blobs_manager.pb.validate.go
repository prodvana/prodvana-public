// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: prodvana/blobs/blobs_manager.proto

package blobs

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetCasBlobReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetCasBlobReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCasBlobReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetCasBlobReqMultiError, or
// nil if none found.
func (m *GetCasBlobReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCasBlobReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := GetCasBlobReqValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetCasBlobReqMultiError(errors)
	}

	return nil
}

// GetCasBlobReqMultiError is an error wrapping multiple validation errors
// returned by GetCasBlobReq.ValidateAll() if the designated constraints
// aren't met.
type GetCasBlobReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCasBlobReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCasBlobReqMultiError) AllErrors() []error { return m }

// GetCasBlobReqValidationError is the validation error returned by
// GetCasBlobReq.Validate if the designated constraints aren't met.
type GetCasBlobReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCasBlobReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCasBlobReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCasBlobReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCasBlobReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCasBlobReqValidationError) ErrorName() string { return "GetCasBlobReqValidationError" }

// Error satisfies the builtin error interface
func (e GetCasBlobReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCasBlobReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCasBlobReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCasBlobReqValidationError{}

// Validate checks the field values on GetCasBlobResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetCasBlobResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCasBlobResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetCasBlobRespMultiError,
// or nil if none found.
func (m *GetCasBlobResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCasBlobResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Bytes

	if len(errors) > 0 {
		return GetCasBlobRespMultiError(errors)
	}

	return nil
}

// GetCasBlobRespMultiError is an error wrapping multiple validation errors
// returned by GetCasBlobResp.ValidateAll() if the designated constraints
// aren't met.
type GetCasBlobRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCasBlobRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCasBlobRespMultiError) AllErrors() []error { return m }

// GetCasBlobRespValidationError is the validation error returned by
// GetCasBlobResp.Validate if the designated constraints aren't met.
type GetCasBlobRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCasBlobRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCasBlobRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCasBlobRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCasBlobRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCasBlobRespValidationError) ErrorName() string { return "GetCasBlobRespValidationError" }

// Error satisfies the builtin error interface
func (e GetCasBlobRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCasBlobResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCasBlobRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCasBlobRespValidationError{}

// Validate checks the field values on UploadCasBlobReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UploadCasBlobReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadCasBlobReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UploadCasBlobReqMultiError, or nil if none found.
func (m *UploadCasBlobReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadCasBlobReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Bytes

	if len(errors) > 0 {
		return UploadCasBlobReqMultiError(errors)
	}

	return nil
}

// UploadCasBlobReqMultiError is an error wrapping multiple validation errors
// returned by UploadCasBlobReq.ValidateAll() if the designated constraints
// aren't met.
type UploadCasBlobReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadCasBlobReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadCasBlobReqMultiError) AllErrors() []error { return m }

// UploadCasBlobReqValidationError is the validation error returned by
// UploadCasBlobReq.Validate if the designated constraints aren't met.
type UploadCasBlobReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadCasBlobReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadCasBlobReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadCasBlobReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadCasBlobReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadCasBlobReqValidationError) ErrorName() string { return "UploadCasBlobReqValidationError" }

// Error satisfies the builtin error interface
func (e UploadCasBlobReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadCasBlobReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadCasBlobReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadCasBlobReqValidationError{}

// Validate checks the field values on UploadCasBlobResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UploadCasBlobResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadCasBlobResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UploadCasBlobRespMultiError, or nil if none found.
func (m *UploadCasBlobResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadCasBlobResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return UploadCasBlobRespMultiError(errors)
	}

	return nil
}

// UploadCasBlobRespMultiError is an error wrapping multiple validation errors
// returned by UploadCasBlobResp.ValidateAll() if the designated constraints
// aren't met.
type UploadCasBlobRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadCasBlobRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadCasBlobRespMultiError) AllErrors() []error { return m }

// UploadCasBlobRespValidationError is the validation error returned by
// UploadCasBlobResp.Validate if the designated constraints aren't met.
type UploadCasBlobRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadCasBlobRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadCasBlobRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadCasBlobRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadCasBlobRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadCasBlobRespValidationError) ErrorName() string {
	return "UploadCasBlobRespValidationError"
}

// Error satisfies the builtin error interface
func (e UploadCasBlobRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadCasBlobResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadCasBlobRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadCasBlobRespValidationError{}
