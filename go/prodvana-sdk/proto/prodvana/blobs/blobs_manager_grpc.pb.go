// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.10
// source: prodvana/blobs/blobs_manager.proto

package blobs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BlobsManager_GetCasBlob_FullMethodName = "/prodvana.blobs.BlobsManager/GetCasBlob"
)

// BlobsManagerClient is the client API for BlobsManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlobsManagerClient interface {
	GetCasBlob(ctx context.Context, in *GetCasBlobReq, opts ...grpc.CallOption) (BlobsManager_GetCasBlobClient, error)
}

type blobsManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewBlobsManagerClient(cc grpc.ClientConnInterface) BlobsManagerClient {
	return &blobsManagerClient{cc}
}

func (c *blobsManagerClient) GetCasBlob(ctx context.Context, in *GetCasBlobReq, opts ...grpc.CallOption) (BlobsManager_GetCasBlobClient, error) {
	stream, err := c.cc.NewStream(ctx, &BlobsManager_ServiceDesc.Streams[0], BlobsManager_GetCasBlob_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &blobsManagerGetCasBlobClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BlobsManager_GetCasBlobClient interface {
	Recv() (*GetCasBlobResp, error)
	grpc.ClientStream
}

type blobsManagerGetCasBlobClient struct {
	grpc.ClientStream
}

func (x *blobsManagerGetCasBlobClient) Recv() (*GetCasBlobResp, error) {
	m := new(GetCasBlobResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BlobsManagerServer is the server API for BlobsManager service.
// All implementations must embed UnimplementedBlobsManagerServer
// for forward compatibility
type BlobsManagerServer interface {
	GetCasBlob(*GetCasBlobReq, BlobsManager_GetCasBlobServer) error
	mustEmbedUnimplementedBlobsManagerServer()
}

// UnimplementedBlobsManagerServer must be embedded to have forward compatible implementations.
type UnimplementedBlobsManagerServer struct {
}

func (UnimplementedBlobsManagerServer) GetCasBlob(*GetCasBlobReq, BlobsManager_GetCasBlobServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCasBlob not implemented")
}
func (UnimplementedBlobsManagerServer) mustEmbedUnimplementedBlobsManagerServer() {}

// UnsafeBlobsManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlobsManagerServer will
// result in compilation errors.
type UnsafeBlobsManagerServer interface {
	mustEmbedUnimplementedBlobsManagerServer()
}

func RegisterBlobsManagerServer(s grpc.ServiceRegistrar, srv BlobsManagerServer) {
	s.RegisterService(&BlobsManager_ServiceDesc, srv)
}

func _BlobsManager_GetCasBlob_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetCasBlobReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlobsManagerServer).GetCasBlob(m, &blobsManagerGetCasBlobServer{stream})
}

type BlobsManager_GetCasBlobServer interface {
	Send(*GetCasBlobResp) error
	grpc.ServerStream
}

type blobsManagerGetCasBlobServer struct {
	grpc.ServerStream
}

func (x *blobsManagerGetCasBlobServer) Send(m *GetCasBlobResp) error {
	return x.ServerStream.SendMsg(m)
}

// BlobsManager_ServiceDesc is the grpc.ServiceDesc for BlobsManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlobsManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "prodvana.blobs.BlobsManager",
	HandlerType: (*BlobsManagerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetCasBlob",
			Handler:       _BlobsManager_GetCasBlob_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "prodvana/blobs/blobs_manager.proto",
}
