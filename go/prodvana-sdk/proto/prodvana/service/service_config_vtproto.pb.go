// Code generated by protoc-gen-go-vtproto. DO NOT EDIT.
// protoc-gen-go-vtproto version: v0.6.0
// source: prodvana/service/service_config.proto

package service

import (
	durationpb1 "github.com/planetscale/vtprotobuf/types/known/durationpb"
	common_config "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/common_config"
	delivery_extension "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/delivery_extension"
	fly "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/fly"
	protection "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/protection"
	volumes "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/volumes"
	proto "google.golang.org/protobuf/proto"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

func (m *ReplicasConfig) CloneVT() *ReplicasConfig {
	if m == nil {
		return (*ReplicasConfig)(nil)
	}
	r := new(ReplicasConfig)
	if m.ConfigOneof != nil {
		r.ConfigOneof = m.ConfigOneof.(interface {
			CloneVT() isReplicasConfig_ConfigOneof
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ReplicasConfig) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ReplicasConfig_Fixed) CloneVT() isReplicasConfig_ConfigOneof {
	if m == nil {
		return (*ReplicasConfig_Fixed)(nil)
	}
	r := new(ReplicasConfig_Fixed)
	r.Fixed = m.Fixed
	return r
}

func (m *MetricAnalysis_SuccessRateConfig) CloneVT() *MetricAnalysis_SuccessRateConfig {
	if m == nil {
		return (*MetricAnalysis_SuccessRateConfig)(nil)
	}
	r := new(MetricAnalysis_SuccessRateConfig)
	r.MinThresholdPercent = m.MinThresholdPercent
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *MetricAnalysis_SuccessRateConfig) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *MetricAnalysis_LatencyConfig) CloneVT() *MetricAnalysis_LatencyConfig {
	if m == nil {
		return (*MetricAnalysis_LatencyConfig)(nil)
	}
	r := new(MetricAnalysis_LatencyConfig)
	r.MaxLatency = (*durationpb.Duration)((*durationpb1.Duration)(m.MaxLatency).CloneVT())
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *MetricAnalysis_LatencyConfig) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *MetricAnalysis) CloneVT() *MetricAnalysis {
	if m == nil {
		return (*MetricAnalysis)(nil)
	}
	r := new(MetricAnalysis)
	if m.AnalysisOneof != nil {
		r.AnalysisOneof = m.AnalysisOneof.(interface {
			CloneVT() isMetricAnalysis_AnalysisOneof
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *MetricAnalysis) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *MetricAnalysis_SuccessRate) CloneVT() isMetricAnalysis_AnalysisOneof {
	if m == nil {
		return (*MetricAnalysis_SuccessRate)(nil)
	}
	r := new(MetricAnalysis_SuccessRate)
	r.SuccessRate = m.SuccessRate.CloneVT()
	return r
}

func (m *MetricAnalysis_LatencyP95) CloneVT() isMetricAnalysis_AnalysisOneof {
	if m == nil {
		return (*MetricAnalysis_LatencyP95)(nil)
	}
	r := new(MetricAnalysis_LatencyP95)
	r.LatencyP95 = m.LatencyP95.CloneVT()
	return r
}

func (m *ReleaseStrategyConfig) CloneVT() *ReleaseStrategyConfig {
	if m == nil {
		return (*ReleaseStrategyConfig)(nil)
	}
	r := new(ReleaseStrategyConfig)
	r.IndividualStageDeadline = (*durationpb.Duration)((*durationpb1.Duration)(m.IndividualStageDeadline).CloneVT())
	r.AutomatedTestingDuration = (*durationpb.Duration)((*durationpb1.Duration)(m.AutomatedTestingDuration).CloneVT())
	r.ManualApproval = m.ManualApproval
	r.CheckInterval = (*durationpb.Duration)((*durationpb1.Duration)(m.CheckInterval).CloneVT())
	r.FailureThreshold = m.FailureThreshold
	if rhs := m.MetricsAnalysis; rhs != nil {
		tmpContainer := make([]*MetricAnalysis, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.MetricsAnalysis = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ReleaseStrategyConfig) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *TLSSecret) CloneVT() *TLSSecret {
	if m == nil {
		return (*TLSSecret)(nil)
	}
	r := new(TLSSecret)
	if m.TlsSecret != nil {
		r.TlsSecret = m.TlsSecret.(interface{ CloneVT() isTLSSecret_TlsSecret }).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *TLSSecret) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *TLSSecret_RawSecret) CloneVT() isTLSSecret_TlsSecret {
	if m == nil {
		return (*TLSSecret_RawSecret)(nil)
	}
	r := new(TLSSecret_RawSecret)
	r.RawSecret = m.RawSecret
	return r
}

func (m *TLSSecret_Secret) CloneVT() isTLSSecret_TlsSecret {
	if m == nil {
		return (*TLSSecret_Secret)(nil)
	}
	r := new(TLSSecret_Secret)
	r.Secret = m.Secret.CloneVT()
	return r
}

func (m *TLSCertificate) CloneVT() *TLSCertificate {
	if m == nil {
		return (*TLSCertificate)(nil)
	}
	r := new(TLSCertificate)
	r.TlsCert = m.TlsCert.CloneVT()
	r.TlsKey = m.TlsKey.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *TLSCertificate) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *Certificate) CloneVT() *Certificate {
	if m == nil {
		return (*Certificate)(nil)
	}
	r := new(Certificate)
	if m.Certificate != nil {
		r.Certificate = m.Certificate.(interface {
			CloneVT() isCertificate_Certificate
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Certificate) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *Certificate_Tls) CloneVT() isCertificate_Certificate {
	if m == nil {
		return (*Certificate_Tls)(nil)
	}
	r := new(Certificate_Tls)
	r.Tls = m.Tls.CloneVT()
	return r
}

func (m *Certificate_AwsAcmCert) CloneVT() isCertificate_Certificate {
	if m == nil {
		return (*Certificate_AwsAcmCert)(nil)
	}
	r := new(Certificate_AwsAcmCert)
	r.AwsAcmCert = m.AwsAcmCert
	return r
}

func (m *PerReleaseChannelConfig) CloneVT() *PerReleaseChannelConfig {
	if m == nil {
		return (*PerReleaseChannelConfig)(nil)
	}
	r := new(PerReleaseChannelConfig)
	r.ReleaseChannel = m.ReleaseChannel
	r.Cert = m.Cert.CloneVT()
	r.DeliveryConfig = m.DeliveryConfig.CloneVT()
	r.Replicas = m.Replicas.CloneVT()
	r.RuntimeSpecific = m.RuntimeSpecific.CloneVT()
	r.RuntimeConnection = m.RuntimeConnection
	if rhs := m.CustomHostnames; rhs != nil {
		tmpContainer := make([]string, len(rhs))
		copy(tmpContainer, rhs)
		r.CustomHostnames = tmpContainer
	}
	if rhs := m.Programs; rhs != nil {
		tmpContainer := make([]*common_config.PerReleaseChannelProgramConfig, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Programs = tmpContainer
	}
	if rhs := m.Volumes; rhs != nil {
		tmpContainer := make([]*volumes.Volume, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Volumes = tmpContainer
	}
	if rhs := m.PrePushTasks; rhs != nil {
		tmpContainer := make([]*TaskConfig, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.PrePushTasks = tmpContainer
	}
	if rhs := m.DeliveryExtensions; rhs != nil {
		tmpContainer := make([]*DeliveryExtensionConfig, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.DeliveryExtensions = tmpContainer
	}
	if rhs := m.ConvergenceExtensions; rhs != nil {
		tmpContainer := make([]*DeliveryExtensionConfig, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.ConvergenceExtensions = tmpContainer
	}
	if m.ConfigOneof != nil {
		r.ConfigOneof = m.ConfigOneof.(interface {
			CloneVT() isPerReleaseChannelConfig_ConfigOneof
		}).CloneVT()
	}
	if rhs := m.Env; rhs != nil {
		tmpContainer := make(map[string]*common_config.EnvValue, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Env = tmpContainer
	}
	if rhs := m.Constants; rhs != nil {
		tmpContainer := make([]*common_config.Constant, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Constants = tmpContainer
	}
	if rhs := m.Protections; rhs != nil {
		tmpContainer := make([]*protection.ProtectionAttachmentConfig, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Protections = tmpContainer
	}
	if rhs := m.ConvergenceProtections; rhs != nil {
		tmpContainer := make([]*protection.ProtectionAttachmentConfig, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.ConvergenceProtections = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *PerReleaseChannelConfig) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *PerReleaseChannelConfig_RuntimeExtension) CloneVT() isPerReleaseChannelConfig_ConfigOneof {
	if m == nil {
		return (*PerReleaseChannelConfig_RuntimeExtension)(nil)
	}
	r := new(PerReleaseChannelConfig_RuntimeExtension)
	r.RuntimeExtension = m.RuntimeExtension.CloneVT()
	return r
}

func (m *PerReleaseChannelConfig_CustomRuntime) CloneVT() isPerReleaseChannelConfig_ConfigOneof {
	if m == nil {
		return (*PerReleaseChannelConfig_CustomRuntime)(nil)
	}
	r := new(PerReleaseChannelConfig_CustomRuntime)
	r.CustomRuntime = m.CustomRuntime.CloneVT()
	return r
}

func (m *PerReleaseChannelConfig_KubernetesConfig) CloneVT() isPerReleaseChannelConfig_ConfigOneof {
	if m == nil {
		return (*PerReleaseChannelConfig_KubernetesConfig)(nil)
	}
	r := new(PerReleaseChannelConfig_KubernetesConfig)
	r.KubernetesConfig = m.KubernetesConfig.CloneVT()
	return r
}

func (m *PerReleaseChannelConfig_ExternalConfig) CloneVT() isPerReleaseChannelConfig_ConfigOneof {
	if m == nil {
		return (*PerReleaseChannelConfig_ExternalConfig)(nil)
	}
	r := new(PerReleaseChannelConfig_ExternalConfig)
	r.ExternalConfig = m.ExternalConfig.CloneVT()
	return r
}

func (m *PerReleaseChannelConfig_Helm) CloneVT() isPerReleaseChannelConfig_ConfigOneof {
	if m == nil {
		return (*PerReleaseChannelConfig_Helm)(nil)
	}
	r := new(PerReleaseChannelConfig_Helm)
	r.Helm = m.Helm.CloneVT()
	return r
}

func (m *PerReleaseChannelConfig_AwsEcs) CloneVT() isPerReleaseChannelConfig_ConfigOneof {
	if m == nil {
		return (*PerReleaseChannelConfig_AwsEcs)(nil)
	}
	r := new(PerReleaseChannelConfig_AwsEcs)
	r.AwsEcs = m.AwsEcs.CloneVT()
	return r
}

func (m *PerReleaseChannelConfig_GoogleCloudRun) CloneVT() isPerReleaseChannelConfig_ConfigOneof {
	if m == nil {
		return (*PerReleaseChannelConfig_GoogleCloudRun)(nil)
	}
	r := new(PerReleaseChannelConfig_GoogleCloudRun)
	r.GoogleCloudRun = m.GoogleCloudRun.CloneVT()
	return r
}

func (m *PerReleaseChannelConfig_Fly) CloneVT() isPerReleaseChannelConfig_ConfigOneof {
	if m == nil {
		return (*PerReleaseChannelConfig_Fly)(nil)
	}
	r := new(PerReleaseChannelConfig_Fly)
	r.Fly = m.Fly.CloneVT()
	return r
}

func (m *CapabilityReference) CloneVT() *CapabilityReference {
	if m == nil {
		return (*CapabilityReference)(nil)
	}
	r := new(CapabilityReference)
	r.Name = m.Name
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CapabilityReference) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CompiledCapabilityConfig) CloneVT() *CompiledCapabilityConfig {
	if m == nil {
		return (*CompiledCapabilityConfig)(nil)
	}
	r := new(CompiledCapabilityConfig)
	r.Capability = m.Capability.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CompiledCapabilityConfig) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ProgramReference) CloneVT() *ProgramReference {
	if m == nil {
		return (*ProgramReference)(nil)
	}
	r := new(ProgramReference)
	if m.Ref != nil {
		r.Ref = m.Ref.(interface{ CloneVT() isProgramReference_Ref }).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ProgramReference) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ProgramReference_Name) CloneVT() isProgramReference_Ref {
	if m == nil {
		return (*ProgramReference_Name)(nil)
	}
	r := new(ProgramReference_Name)
	r.Name = m.Name
	return r
}

func (m *TaskReference) CloneVT() *TaskReference {
	if m == nil {
		return (*TaskReference)(nil)
	}
	r := new(TaskReference)
	if m.Ref != nil {
		r.Ref = m.Ref.(interface{ CloneVT() isTaskReference_Ref }).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *TaskReference) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *TaskReference_ReleaseChannel) CloneVT() isTaskReference_Ref {
	if m == nil {
		return (*TaskReference_ReleaseChannel)(nil)
	}
	r := new(TaskReference_ReleaseChannel)
	r.ReleaseChannel = m.ReleaseChannel
	return r
}

func (m *TaskConfig) CloneVT() *TaskConfig {
	if m == nil {
		return (*TaskConfig)(nil)
	}
	r := new(TaskConfig)
	r.Program = m.Program.CloneVT()
	r.BaseProgram = m.BaseProgram.CloneVT()
	r.RetryConfig = m.RetryConfig.CloneVT()
	r.Ref = m.Ref.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *TaskConfig) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ProtectionLink) CloneVT() *ProtectionLink {
	if m == nil {
		return (*ProtectionLink)(nil)
	}
	r := new(ProtectionLink)
	r.Lifecycle = m.Lifecycle.CloneVT()
	r.AttachmentId = m.AttachmentId
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ProtectionLink) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *DeliveryExtensionConfig) CloneVT() *DeliveryExtensionConfig {
	if m == nil {
		return (*DeliveryExtensionConfig)(nil)
	}
	r := new(DeliveryExtensionConfig)
	r.Lifecycle = m.Lifecycle
	if m.Definition != nil {
		r.Definition = m.Definition.(interface {
			CloneVT() isDeliveryExtensionConfig_Definition
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *DeliveryExtensionConfig) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *DeliveryExtensionConfig_Inlined) CloneVT() isDeliveryExtensionConfig_Definition {
	if m == nil {
		return (*DeliveryExtensionConfig_Inlined)(nil)
	}
	r := new(DeliveryExtensionConfig_Inlined)
	r.Inlined = m.Inlined.CloneVT()
	return r
}

func (m *DeliveryExtensionConfig_Instance) CloneVT() isDeliveryExtensionConfig_Definition {
	if m == nil {
		return (*DeliveryExtensionConfig_Instance)(nil)
	}
	r := new(DeliveryExtensionConfig_Instance)
	r.Instance = m.Instance
	return r
}

func (m *DeliveryExtensionConfig_Ref) CloneVT() isDeliveryExtensionConfig_Definition {
	if m == nil {
		return (*DeliveryExtensionConfig_Ref)(nil)
	}
	r := new(DeliveryExtensionConfig_Ref)
	r.Ref = m.Ref.CloneVT()
	return r
}

func (m *DeliveryExtensionInstance) CloneVT() *DeliveryExtensionInstance {
	if m == nil {
		return (*DeliveryExtensionInstance)(nil)
	}
	r := new(DeliveryExtensionInstance)
	r.Name = m.Name
	if m.Definition != nil {
		r.Definition = m.Definition.(interface {
			CloneVT() isDeliveryExtensionInstance_Definition
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *DeliveryExtensionInstance) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *DeliveryExtensionInstance_Inlined) CloneVT() isDeliveryExtensionInstance_Definition {
	if m == nil {
		return (*DeliveryExtensionInstance_Inlined)(nil)
	}
	r := new(DeliveryExtensionInstance_Inlined)
	r.Inlined = m.Inlined.CloneVT()
	return r
}

func (m *DeliveryExtensionInstance_Ref) CloneVT() isDeliveryExtensionInstance_Definition {
	if m == nil {
		return (*DeliveryExtensionInstance_Ref)(nil)
	}
	r := new(DeliveryExtensionInstance_Ref)
	r.Ref = m.Ref.CloneVT()
	return r
}

func (m *RuntimeSpecificConfig_K8SConfig) CloneVT() *RuntimeSpecificConfig_K8SConfig {
	if m == nil {
		return (*RuntimeSpecificConfig_K8SConfig)(nil)
	}
	r := new(RuntimeSpecificConfig_K8SConfig)
	if rhs := m.ServiceAnnotations; rhs != nil {
		tmpContainer := make(map[string]string, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v
		}
		r.ServiceAnnotations = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RuntimeSpecificConfig_K8SConfig) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RuntimeSpecificConfig) CloneVT() *RuntimeSpecificConfig {
	if m == nil {
		return (*RuntimeSpecificConfig)(nil)
	}
	r := new(RuntimeSpecificConfig)
	if m.RuntimeConfig != nil {
		r.RuntimeConfig = m.RuntimeConfig.(interface {
			CloneVT() isRuntimeSpecificConfig_RuntimeConfig
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RuntimeSpecificConfig) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RuntimeSpecificConfig_K8S) CloneVT() isRuntimeSpecificConfig_RuntimeConfig {
	if m == nil {
		return (*RuntimeSpecificConfig_K8S)(nil)
	}
	r := new(RuntimeSpecificConfig_K8S)
	r.K8S = m.K8S.CloneVT()
	return r
}

func (m *RuntimeExtensionConfig) CloneVT() *RuntimeExtensionConfig {
	if m == nil {
		return (*RuntimeExtensionConfig)(nil)
	}
	r := new(RuntimeExtensionConfig)
	r.ClearOnPerReleaseChannelMerge = m.ClearOnPerReleaseChannelMerge
	if rhs := m.ParameterValues; rhs != nil {
		tmpContainer := make([]*common_config.ParameterValue, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.ParameterValues = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RuntimeExtensionConfig) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *AwsEcsConfig_Spec) CloneVT() *AwsEcsConfig_Spec {
	if m == nil {
		return (*AwsEcsConfig_Spec)(nil)
	}
	r := new(AwsEcsConfig_Spec)
	if m.SpecOneof != nil {
		r.SpecOneof = m.SpecOneof.(interface {
			CloneVT() isAwsEcsConfig_Spec_SpecOneof
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *AwsEcsConfig_Spec) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *AwsEcsConfig_Spec_Inlined) CloneVT() isAwsEcsConfig_Spec_SpecOneof {
	if m == nil {
		return (*AwsEcsConfig_Spec_Inlined)(nil)
	}
	r := new(AwsEcsConfig_Spec_Inlined)
	r.Inlined = m.Inlined
	return r
}

func (m *AwsEcsConfig_Spec_Local) CloneVT() isAwsEcsConfig_Spec_SpecOneof {
	if m == nil {
		return (*AwsEcsConfig_Spec_Local)(nil)
	}
	r := new(AwsEcsConfig_Spec_Local)
	r.Local = m.Local.CloneVT()
	return r
}

func (m *AwsEcsConfig_Spec_Remote) CloneVT() isAwsEcsConfig_Spec_SpecOneof {
	if m == nil {
		return (*AwsEcsConfig_Spec_Remote)(nil)
	}
	r := new(AwsEcsConfig_Spec_Remote)
	r.Remote = m.Remote.CloneVT()
	return r
}

func (m *AwsEcsConfig) CloneVT() *AwsEcsConfig {
	if m == nil {
		return (*AwsEcsConfig)(nil)
	}
	r := new(AwsEcsConfig)
	r.EcsServiceNameOverride = m.EcsServiceNameOverride
	r.TaskDefinition = m.TaskDefinition.CloneVT()
	r.ServiceDefinition = m.ServiceDefinition.CloneVT()
	r.UpdateTaskDefinitionOnly = m.UpdateTaskDefinitionOnly
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *AwsEcsConfig) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *GoogleCloudRunConfig) CloneVT() *GoogleCloudRunConfig {
	if m == nil {
		return (*GoogleCloudRunConfig)(nil)
	}
	r := new(GoogleCloudRunConfig)
	if m.SpecOneof != nil {
		r.SpecOneof = m.SpecOneof.(interface {
			CloneVT() isGoogleCloudRunConfig_SpecOneof
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *GoogleCloudRunConfig) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *GoogleCloudRunConfig_Inlined) CloneVT() isGoogleCloudRunConfig_SpecOneof {
	if m == nil {
		return (*GoogleCloudRunConfig_Inlined)(nil)
	}
	r := new(GoogleCloudRunConfig_Inlined)
	r.Inlined = m.Inlined
	return r
}

func (m *GoogleCloudRunConfig_Local) CloneVT() isGoogleCloudRunConfig_SpecOneof {
	if m == nil {
		return (*GoogleCloudRunConfig_Local)(nil)
	}
	r := new(GoogleCloudRunConfig_Local)
	r.Local = m.Local.CloneVT()
	return r
}

func (m *GoogleCloudRunConfig_Remote) CloneVT() isGoogleCloudRunConfig_SpecOneof {
	if m == nil {
		return (*GoogleCloudRunConfig_Remote)(nil)
	}
	r := new(GoogleCloudRunConfig_Remote)
	r.Remote = m.Remote.CloneVT()
	return r
}

func (m *ServiceConfig) CloneVT() *ServiceConfig {
	if m == nil {
		return (*ServiceConfig)(nil)
	}
	r := new(ServiceConfig)
	r.Name = m.Name
	r.Application = m.Application
	r.Replicas = m.Replicas.CloneVT()
	r.ReleaseStrategy = m.ReleaseStrategy.CloneVT()
	r.DeliveryConfig = m.DeliveryConfig.CloneVT()
	r.DeployAnnotations = m.DeployAnnotations.CloneVT()
	r.RuntimeSpecific = m.RuntimeSpecific.CloneVT()
	r.RuntimeConnection = m.RuntimeConnection
	r.ParameterValues = m.ParameterValues.CloneVT()
	r.ProgressDeadline = (*durationpb.Duration)((*durationpb1.Duration)(m.ProgressDeadline).CloneVT())
	r.ParametersAutogen = m.ParametersAutogen
	r.AutoRollback = m.AutoRollback.CloneVT()
	r.NoCleanupOnDelete = m.NoCleanupOnDelete
	r.AsyncSetDesiredState = m.AsyncSetDesiredState
	r.Maestro = m.Maestro.CloneVT()
	r.BundleName = m.BundleName
	if rhs := m.Programs; rhs != nil {
		tmpContainer := make([]*common_config.ProgramConfig, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Programs = tmpContainer
	}
	if rhs := m.PerReleaseChannel; rhs != nil {
		tmpContainer := make([]*PerReleaseChannelConfig, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.PerReleaseChannel = tmpContainer
	}
	if rhs := m.Capabilities; rhs != nil {
		tmpContainer := make([]*CapabilityReference, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Capabilities = tmpContainer
	}
	if rhs := m.Volumes; rhs != nil {
		tmpContainer := make([]*volumes.Volume, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Volumes = tmpContainer
	}
	if rhs := m.PrePushTasks; rhs != nil {
		tmpContainer := make([]*TaskConfig, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.PrePushTasks = tmpContainer
	}
	if rhs := m.DeliveryExtensions; rhs != nil {
		tmpContainer := make([]*DeliveryExtensionConfig, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.DeliveryExtensions = tmpContainer
	}
	if rhs := m.DeliveryExtensionInstances; rhs != nil {
		tmpContainer := make([]*DeliveryExtensionInstance, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.DeliveryExtensionInstances = tmpContainer
	}
	if rhs := m.ConvergenceExtensions; rhs != nil {
		tmpContainer := make([]*DeliveryExtensionConfig, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.ConvergenceExtensions = tmpContainer
	}
	if rhs := m.ConvergenceExtensionInstances; rhs != nil {
		tmpContainer := make([]*DeliveryExtensionInstance, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.ConvergenceExtensionInstances = tmpContainer
	}
	if rhs := m.ConvergenceProtections; rhs != nil {
		tmpContainer := make([]*protection.ProtectionAttachmentConfig, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.ConvergenceProtections = tmpContainer
	}
	if rhs := m.Parameters; rhs != nil {
		tmpContainer := make([]*common_config.ParameterDefinition, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Parameters = tmpContainer
	}
	if rhs := m.Constants; rhs != nil {
		tmpContainer := make([]*common_config.Constant, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Constants = tmpContainer
	}
	if m.ConfigOneof != nil {
		r.ConfigOneof = m.ConfigOneof.(interface {
			CloneVT() isServiceConfig_ConfigOneof
		}).CloneVT()
	}
	if rhs := m.Env; rhs != nil {
		tmpContainer := make(map[string]*common_config.EnvValue, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Env = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ServiceConfig) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ServiceConfig_RuntimeExtension) CloneVT() isServiceConfig_ConfigOneof {
	if m == nil {
		return (*ServiceConfig_RuntimeExtension)(nil)
	}
	r := new(ServiceConfig_RuntimeExtension)
	r.RuntimeExtension = m.RuntimeExtension.CloneVT()
	return r
}

func (m *ServiceConfig_CustomRuntime) CloneVT() isServiceConfig_ConfigOneof {
	if m == nil {
		return (*ServiceConfig_CustomRuntime)(nil)
	}
	r := new(ServiceConfig_CustomRuntime)
	r.CustomRuntime = m.CustomRuntime.CloneVT()
	return r
}

func (m *ServiceConfig_KubernetesConfig) CloneVT() isServiceConfig_ConfigOneof {
	if m == nil {
		return (*ServiceConfig_KubernetesConfig)(nil)
	}
	r := new(ServiceConfig_KubernetesConfig)
	r.KubernetesConfig = m.KubernetesConfig.CloneVT()
	return r
}

func (m *ServiceConfig_ExternalConfig) CloneVT() isServiceConfig_ConfigOneof {
	if m == nil {
		return (*ServiceConfig_ExternalConfig)(nil)
	}
	r := new(ServiceConfig_ExternalConfig)
	r.ExternalConfig = m.ExternalConfig.CloneVT()
	return r
}

func (m *ServiceConfig_Helm) CloneVT() isServiceConfig_ConfigOneof {
	if m == nil {
		return (*ServiceConfig_Helm)(nil)
	}
	r := new(ServiceConfig_Helm)
	r.Helm = m.Helm.CloneVT()
	return r
}

func (m *ServiceConfig_AwsEcs) CloneVT() isServiceConfig_ConfigOneof {
	if m == nil {
		return (*ServiceConfig_AwsEcs)(nil)
	}
	r := new(ServiceConfig_AwsEcs)
	r.AwsEcs = m.AwsEcs.CloneVT()
	return r
}

func (m *ServiceConfig_GoogleCloudRun) CloneVT() isServiceConfig_ConfigOneof {
	if m == nil {
		return (*ServiceConfig_GoogleCloudRun)(nil)
	}
	r := new(ServiceConfig_GoogleCloudRun)
	r.GoogleCloudRun = m.GoogleCloudRun.CloneVT()
	return r
}

func (m *ServiceConfig_Fly) CloneVT() isServiceConfig_ConfigOneof {
	if m == nil {
		return (*ServiceConfig_Fly)(nil)
	}
	r := new(ServiceConfig_Fly)
	r.Fly = m.Fly.CloneVT()
	return r
}

func (m *CompiledServiceInstanceConfig) CloneVT() *CompiledServiceInstanceConfig {
	if m == nil {
		return (*CompiledServiceInstanceConfig)(nil)
	}
	r := new(CompiledServiceInstanceConfig)
	r.Service = m.Service
	r.Application = m.Application
	r.ReleaseChannel = m.ReleaseChannel
	r.Replicas = m.Replicas.CloneVT()
	r.Maturity = m.Maturity
	r.ReleaseStrategy = m.ReleaseStrategy.CloneVT()
	r.Cert = m.Cert.CloneVT()
	r.Runtime = m.Runtime.CloneVT()
	r.RuntimeExecution = m.RuntimeExecution.CloneVT()
	r.DeliveryConfig = m.DeliveryConfig.CloneVT()
	r.DeployAnnotations = m.DeployAnnotations.CloneVT()
	r.RuntimeSpecific = m.RuntimeSpecific.CloneVT()
	r.ProgressDeadline = (*durationpb.Duration)((*durationpb1.Duration)(m.ProgressDeadline).CloneVT())
	r.NoCleanupOnDelete = m.NoCleanupOnDelete
	r.BundleName = m.BundleName
	if rhs := m.Programs; rhs != nil {
		tmpContainer := make([]*common_config.ProgramConfig, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Programs = tmpContainer
	}
	if rhs := m.CustomHostnames; rhs != nil {
		tmpContainer := make([]string, len(rhs))
		copy(tmpContainer, rhs)
		r.CustomHostnames = tmpContainer
	}
	if rhs := m.Capabilities; rhs != nil {
		tmpContainer := make([]*CompiledCapabilityConfig, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Capabilities = tmpContainer
	}
	if rhs := m.Volumes; rhs != nil {
		tmpContainer := make([]*volumes.Volume, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Volumes = tmpContainer
	}
	if rhs := m.PrePushTasks; rhs != nil {
		tmpContainer := make([]*TaskConfig, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.PrePushTasks = tmpContainer
	}
	if rhs := m.ConvergenceExtensions; rhs != nil {
		tmpContainer := make([]*DeliveryExtensionConfig, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.ConvergenceExtensions = tmpContainer
	}
	if rhs := m.ConvergenceExtensionInstances; rhs != nil {
		tmpContainer := make([]*DeliveryExtensionInstance, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.ConvergenceExtensionInstances = tmpContainer
	}
	if rhs := m.Parameters; rhs != nil {
		tmpContainer := make([]*common_config.ParameterDefinition, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Parameters = tmpContainer
	}
	if rhs := m.ParameterValues; rhs != nil {
		tmpContainer := make([]*common_config.ParameterValue, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.ParameterValues = tmpContainer
	}
	if rhs := m.Constants; rhs != nil {
		tmpContainer := make([]*common_config.Constant, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Constants = tmpContainer
	}
	if m.ConfigOneof != nil {
		r.ConfigOneof = m.ConfigOneof.(interface {
			CloneVT() isCompiledServiceInstanceConfig_ConfigOneof
		}).CloneVT()
	}
	if rhs := m.Env; rhs != nil {
		tmpContainer := make(map[string]*common_config.EnvValue, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Env = tmpContainer
	}
	if rhs := m.Protections; rhs != nil {
		tmpContainer := make([]*protection.ProtectionAttachmentConfig, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Protections = tmpContainer
	}
	if rhs := m.ConvergenceProtections; rhs != nil {
		tmpContainer := make([]*protection.ProtectionAttachmentConfig, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.ConvergenceProtections = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CompiledServiceInstanceConfig) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CompiledServiceInstanceConfig_CustomRuntime) CloneVT() isCompiledServiceInstanceConfig_ConfigOneof {
	if m == nil {
		return (*CompiledServiceInstanceConfig_CustomRuntime)(nil)
	}
	r := new(CompiledServiceInstanceConfig_CustomRuntime)
	r.CustomRuntime = m.CustomRuntime.CloneVT()
	return r
}

func (m *CompiledServiceInstanceConfig_KubernetesConfig) CloneVT() isCompiledServiceInstanceConfig_ConfigOneof {
	if m == nil {
		return (*CompiledServiceInstanceConfig_KubernetesConfig)(nil)
	}
	r := new(CompiledServiceInstanceConfig_KubernetesConfig)
	r.KubernetesConfig = m.KubernetesConfig.CloneVT()
	return r
}

func (m *CompiledServiceInstanceConfig_Helm) CloneVT() isCompiledServiceInstanceConfig_ConfigOneof {
	if m == nil {
		return (*CompiledServiceInstanceConfig_Helm)(nil)
	}
	r := new(CompiledServiceInstanceConfig_Helm)
	r.Helm = m.Helm.CloneVT()
	return r
}

func (m *CompiledServiceInstanceConfig_AwsEcs) CloneVT() isCompiledServiceInstanceConfig_ConfigOneof {
	if m == nil {
		return (*CompiledServiceInstanceConfig_AwsEcs)(nil)
	}
	r := new(CompiledServiceInstanceConfig_AwsEcs)
	r.AwsEcs = m.AwsEcs.CloneVT()
	return r
}

func (m *CompiledServiceInstanceConfig_GoogleCloudRun) CloneVT() isCompiledServiceInstanceConfig_ConfigOneof {
	if m == nil {
		return (*CompiledServiceInstanceConfig_GoogleCloudRun)(nil)
	}
	r := new(CompiledServiceInstanceConfig_GoogleCloudRun)
	r.GoogleCloudRun = m.GoogleCloudRun.CloneVT()
	return r
}

func (m *CompiledServiceInstanceConfig_Fly) CloneVT() isCompiledServiceInstanceConfig_ConfigOneof {
	if m == nil {
		return (*CompiledServiceInstanceConfig_Fly)(nil)
	}
	r := new(CompiledServiceInstanceConfig_Fly)
	r.Fly = m.Fly.CloneVT()
	return r
}

func (m *CompiledJobConfig) CloneVT() *CompiledJobConfig {
	if m == nil {
		return (*CompiledJobConfig)(nil)
	}
	r := new(CompiledJobConfig)
	r.NamePrefix = m.NamePrefix
	r.ReleaseChannel = m.ReleaseChannel
	r.Runtime = m.Runtime.CloneVT()
	r.RuntimeExecution = m.RuntimeExecution.CloneVT()
	if rhs := m.Programs; rhs != nil {
		tmpContainer := make([]*common_config.ProgramConfig, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Programs = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CompiledJobConfig) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (this *ReplicasConfig) StableEqualVT(that *ReplicasConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.ConfigOneof == nil && that.ConfigOneof != nil {
		return false
	} else if this.ConfigOneof != nil {
		if that.ConfigOneof == nil {
			return false
		}
		if !this.ConfigOneof.(interface {
			StableEqualVT(isReplicasConfig_ConfigOneof) bool
		}).StableEqualVT(that.ConfigOneof) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ReplicasConfig) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ReplicasConfig)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ReplicasConfig_Fixed) StableEqualVT(thatIface isReplicasConfig_ConfigOneof) bool {
	that, ok := thatIface.(*ReplicasConfig_Fixed)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.Fixed != that.Fixed {
		return false
	}
	return true
}

func (this *ReplicasConfig) EqualVT(that *ReplicasConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.ConfigOneof == nil && that.ConfigOneof != nil {
		return false
	} else if this.ConfigOneof != nil {
		if that.ConfigOneof == nil {
			return false
		}
		if !this.ConfigOneof.(interface {
			EqualVT(isReplicasConfig_ConfigOneof) bool
		}).EqualVT(that.ConfigOneof) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ReplicasConfig) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ReplicasConfig)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ReplicasConfig_Fixed) EqualVT(thatIface isReplicasConfig_ConfigOneof) bool {
	that, ok := thatIface.(*ReplicasConfig_Fixed)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.Fixed != that.Fixed {
		return false
	}
	return true
}

func (this *MetricAnalysis_SuccessRateConfig) StableEqualVT(that *MetricAnalysis_SuccessRateConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.MinThresholdPercent != that.MinThresholdPercent {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *MetricAnalysis_SuccessRateConfig) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*MetricAnalysis_SuccessRateConfig)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *MetricAnalysis_LatencyConfig) StableEqualVT(that *MetricAnalysis_LatencyConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*durationpb1.Duration)(this.MaxLatency).StableEqualVT((*durationpb1.Duration)(that.MaxLatency)) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *MetricAnalysis_LatencyConfig) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*MetricAnalysis_LatencyConfig)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *MetricAnalysis) StableEqualVT(that *MetricAnalysis) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.AnalysisOneof == nil && that.AnalysisOneof != nil {
		return false
	} else if this.AnalysisOneof != nil {
		if that.AnalysisOneof == nil {
			return false
		}
		if !this.AnalysisOneof.(interface {
			StableEqualVT(isMetricAnalysis_AnalysisOneof) bool
		}).StableEqualVT(that.AnalysisOneof) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *MetricAnalysis) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*MetricAnalysis)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *MetricAnalysis_SuccessRate) StableEqualVT(thatIface isMetricAnalysis_AnalysisOneof) bool {
	that, ok := thatIface.(*MetricAnalysis_SuccessRate)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.SuccessRate, that.SuccessRate; p != q {
		if p == nil {
			p = &MetricAnalysis_SuccessRateConfig{}
		}
		if q == nil {
			q = &MetricAnalysis_SuccessRateConfig{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MetricAnalysis_LatencyP95) StableEqualVT(thatIface isMetricAnalysis_AnalysisOneof) bool {
	that, ok := thatIface.(*MetricAnalysis_LatencyP95)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.LatencyP95, that.LatencyP95; p != q {
		if p == nil {
			p = &MetricAnalysis_LatencyConfig{}
		}
		if q == nil {
			q = &MetricAnalysis_LatencyConfig{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MetricAnalysis_SuccessRateConfig) EqualVT(that *MetricAnalysis_SuccessRateConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.MinThresholdPercent != that.MinThresholdPercent {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *MetricAnalysis_SuccessRateConfig) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*MetricAnalysis_SuccessRateConfig)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *MetricAnalysis_LatencyConfig) EqualVT(that *MetricAnalysis_LatencyConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*durationpb1.Duration)(this.MaxLatency).EqualVT((*durationpb1.Duration)(that.MaxLatency)) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *MetricAnalysis_LatencyConfig) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*MetricAnalysis_LatencyConfig)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *MetricAnalysis) EqualVT(that *MetricAnalysis) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.AnalysisOneof == nil && that.AnalysisOneof != nil {
		return false
	} else if this.AnalysisOneof != nil {
		if that.AnalysisOneof == nil {
			return false
		}
		if !this.AnalysisOneof.(interface {
			EqualVT(isMetricAnalysis_AnalysisOneof) bool
		}).EqualVT(that.AnalysisOneof) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *MetricAnalysis) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*MetricAnalysis)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *MetricAnalysis_SuccessRate) EqualVT(thatIface isMetricAnalysis_AnalysisOneof) bool {
	that, ok := thatIface.(*MetricAnalysis_SuccessRate)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.SuccessRate, that.SuccessRate; p != q {
		if p == nil {
			p = &MetricAnalysis_SuccessRateConfig{}
		}
		if q == nil {
			q = &MetricAnalysis_SuccessRateConfig{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MetricAnalysis_LatencyP95) EqualVT(thatIface isMetricAnalysis_AnalysisOneof) bool {
	that, ok := thatIface.(*MetricAnalysis_LatencyP95)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.LatencyP95, that.LatencyP95; p != q {
		if p == nil {
			p = &MetricAnalysis_LatencyConfig{}
		}
		if q == nil {
			q = &MetricAnalysis_LatencyConfig{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ReleaseStrategyConfig) StableEqualVT(that *ReleaseStrategyConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*durationpb1.Duration)(this.IndividualStageDeadline).StableEqualVT((*durationpb1.Duration)(that.IndividualStageDeadline)) {
		return false
	}
	if !(*durationpb1.Duration)(this.AutomatedTestingDuration).StableEqualVT((*durationpb1.Duration)(that.AutomatedTestingDuration)) {
		return false
	}
	if len(this.MetricsAnalysis) != len(that.MetricsAnalysis) {
		return false
	}
	for i, vx := range this.MetricsAnalysis {
		vy := that.MetricsAnalysis[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &MetricAnalysis{}
			}
			if q == nil {
				q = &MetricAnalysis{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if this.ManualApproval != that.ManualApproval {
		return false
	}
	if !(*durationpb1.Duration)(this.CheckInterval).StableEqualVT((*durationpb1.Duration)(that.CheckInterval)) {
		return false
	}
	if this.FailureThreshold != that.FailureThreshold {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ReleaseStrategyConfig) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ReleaseStrategyConfig)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ReleaseStrategyConfig) EqualVT(that *ReleaseStrategyConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*durationpb1.Duration)(this.IndividualStageDeadline).EqualVT((*durationpb1.Duration)(that.IndividualStageDeadline)) {
		return false
	}
	if !(*durationpb1.Duration)(this.AutomatedTestingDuration).EqualVT((*durationpb1.Duration)(that.AutomatedTestingDuration)) {
		return false
	}
	if len(this.MetricsAnalysis) != len(that.MetricsAnalysis) {
		return false
	}
	for i, vx := range this.MetricsAnalysis {
		vy := that.MetricsAnalysis[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &MetricAnalysis{}
			}
			if q == nil {
				q = &MetricAnalysis{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if this.ManualApproval != that.ManualApproval {
		return false
	}
	if !(*durationpb1.Duration)(this.CheckInterval).EqualVT((*durationpb1.Duration)(that.CheckInterval)) {
		return false
	}
	if this.FailureThreshold != that.FailureThreshold {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ReleaseStrategyConfig) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ReleaseStrategyConfig)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *TLSSecret) StableEqualVT(that *TLSSecret) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.TlsSecret == nil && that.TlsSecret != nil {
		return false
	} else if this.TlsSecret != nil {
		if that.TlsSecret == nil {
			return false
		}
		if !this.TlsSecret.(interface {
			StableEqualVT(isTLSSecret_TlsSecret) bool
		}).StableEqualVT(that.TlsSecret) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *TLSSecret) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*TLSSecret)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *TLSSecret_RawSecret) StableEqualVT(thatIface isTLSSecret_TlsSecret) bool {
	that, ok := thatIface.(*TLSSecret_RawSecret)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.RawSecret != that.RawSecret {
		return false
	}
	return true
}

func (this *TLSSecret_Secret) StableEqualVT(thatIface isTLSSecret_TlsSecret) bool {
	that, ok := thatIface.(*TLSSecret_Secret)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Secret, that.Secret; p != q {
		if p == nil {
			p = &common_config.Secret{}
		}
		if q == nil {
			q = &common_config.Secret{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *TLSSecret) EqualVT(that *TLSSecret) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.TlsSecret == nil && that.TlsSecret != nil {
		return false
	} else if this.TlsSecret != nil {
		if that.TlsSecret == nil {
			return false
		}
		if !this.TlsSecret.(interface {
			EqualVT(isTLSSecret_TlsSecret) bool
		}).EqualVT(that.TlsSecret) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *TLSSecret) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*TLSSecret)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *TLSSecret_RawSecret) EqualVT(thatIface isTLSSecret_TlsSecret) bool {
	that, ok := thatIface.(*TLSSecret_RawSecret)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.RawSecret != that.RawSecret {
		return false
	}
	return true
}

func (this *TLSSecret_Secret) EqualVT(thatIface isTLSSecret_TlsSecret) bool {
	that, ok := thatIface.(*TLSSecret_Secret)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Secret, that.Secret; p != q {
		if p == nil {
			p = &common_config.Secret{}
		}
		if q == nil {
			q = &common_config.Secret{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *TLSCertificate) StableEqualVT(that *TLSCertificate) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.TlsCert.StableEqualVT(that.TlsCert) {
		return false
	}
	if !this.TlsKey.StableEqualVT(that.TlsKey) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *TLSCertificate) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*TLSCertificate)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *TLSCertificate) EqualVT(that *TLSCertificate) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.TlsCert.EqualVT(that.TlsCert) {
		return false
	}
	if !this.TlsKey.EqualVT(that.TlsKey) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *TLSCertificate) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*TLSCertificate)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Certificate) StableEqualVT(that *Certificate) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Certificate == nil && that.Certificate != nil {
		return false
	} else if this.Certificate != nil {
		if that.Certificate == nil {
			return false
		}
		if !this.Certificate.(interface {
			StableEqualVT(isCertificate_Certificate) bool
		}).StableEqualVT(that.Certificate) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Certificate) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Certificate)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *Certificate_Tls) StableEqualVT(thatIface isCertificate_Certificate) bool {
	that, ok := thatIface.(*Certificate_Tls)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Tls, that.Tls; p != q {
		if p == nil {
			p = &TLSCertificate{}
		}
		if q == nil {
			q = &TLSCertificate{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Certificate_AwsAcmCert) StableEqualVT(thatIface isCertificate_Certificate) bool {
	that, ok := thatIface.(*Certificate_AwsAcmCert)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.AwsAcmCert != that.AwsAcmCert {
		return false
	}
	return true
}

func (this *Certificate) EqualVT(that *Certificate) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Certificate == nil && that.Certificate != nil {
		return false
	} else if this.Certificate != nil {
		if that.Certificate == nil {
			return false
		}
		if !this.Certificate.(interface {
			EqualVT(isCertificate_Certificate) bool
		}).EqualVT(that.Certificate) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Certificate) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Certificate)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Certificate_Tls) EqualVT(thatIface isCertificate_Certificate) bool {
	that, ok := thatIface.(*Certificate_Tls)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Tls, that.Tls; p != q {
		if p == nil {
			p = &TLSCertificate{}
		}
		if q == nil {
			q = &TLSCertificate{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Certificate_AwsAcmCert) EqualVT(thatIface isCertificate_Certificate) bool {
	that, ok := thatIface.(*Certificate_AwsAcmCert)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.AwsAcmCert != that.AwsAcmCert {
		return false
	}
	return true
}

func (this *PerReleaseChannelConfig) StableEqualVT(that *PerReleaseChannelConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.ConfigOneof == nil && that.ConfigOneof != nil {
		return false
	} else if this.ConfigOneof != nil {
		if that.ConfigOneof == nil {
			return false
		}
		if !this.ConfigOneof.(interface {
			StableEqualVT(isPerReleaseChannelConfig_ConfigOneof) bool
		}).StableEqualVT(that.ConfigOneof) {
			return false
		}
	}
	if this.ReleaseChannel != that.ReleaseChannel {
		return false
	}
	if len(this.CustomHostnames) != len(that.CustomHostnames) {
		return false
	}
	for i, vx := range this.CustomHostnames {
		vy := that.CustomHostnames[i]
		if vx != vy {
			return false
		}
	}
	if len(this.Programs) != len(that.Programs) {
		return false
	}
	for i, vx := range this.Programs {
		vy := that.Programs[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &common_config.PerReleaseChannelProgramConfig{}
			}
			if q == nil {
				q = &common_config.PerReleaseChannelProgramConfig{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if !this.Cert.StableEqualVT(that.Cert) {
		return false
	}
	if !this.DeliveryConfig.StableEqualVT(that.DeliveryConfig) {
		return false
	}
	if len(this.Volumes) != len(that.Volumes) {
		return false
	}
	for i, vx := range this.Volumes {
		vy := that.Volumes[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &volumes.Volume{}
			}
			if q == nil {
				q = &volumes.Volume{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if !this.Replicas.StableEqualVT(that.Replicas) {
		return false
	}
	if len(this.PrePushTasks) != len(that.PrePushTasks) {
		return false
	}
	for i, vx := range this.PrePushTasks {
		vy := that.PrePushTasks[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &TaskConfig{}
			}
			if q == nil {
				q = &TaskConfig{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if !this.RuntimeSpecific.StableEqualVT(that.RuntimeSpecific) {
		return false
	}
	if this.RuntimeConnection != that.RuntimeConnection {
		return false
	}
	if len(this.DeliveryExtensions) != len(that.DeliveryExtensions) {
		return false
	}
	for i, vx := range this.DeliveryExtensions {
		vy := that.DeliveryExtensions[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &DeliveryExtensionConfig{}
			}
			if q == nil {
				q = &DeliveryExtensionConfig{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if len(this.Env) != len(that.Env) {
		return false
	}
	for i, vx := range this.Env {
		vy, ok := that.Env[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &common_config.EnvValue{}
			}
			if q == nil {
				q = &common_config.EnvValue{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if len(this.Constants) != len(that.Constants) {
		return false
	}
	for i, vx := range this.Constants {
		vy := that.Constants[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &common_config.Constant{}
			}
			if q == nil {
				q = &common_config.Constant{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if len(this.Protections) != len(that.Protections) {
		return false
	}
	for i, vx := range this.Protections {
		vy := that.Protections[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &protection.ProtectionAttachmentConfig{}
			}
			if q == nil {
				q = &protection.ProtectionAttachmentConfig{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if len(this.ConvergenceProtections) != len(that.ConvergenceProtections) {
		return false
	}
	for i, vx := range this.ConvergenceProtections {
		vy := that.ConvergenceProtections[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &protection.ProtectionAttachmentConfig{}
			}
			if q == nil {
				q = &protection.ProtectionAttachmentConfig{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if len(this.ConvergenceExtensions) != len(that.ConvergenceExtensions) {
		return false
	}
	for i, vx := range this.ConvergenceExtensions {
		vy := that.ConvergenceExtensions[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &DeliveryExtensionConfig{}
			}
			if q == nil {
				q = &DeliveryExtensionConfig{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *PerReleaseChannelConfig) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*PerReleaseChannelConfig)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *PerReleaseChannelConfig_RuntimeExtension) StableEqualVT(thatIface isPerReleaseChannelConfig_ConfigOneof) bool {
	that, ok := thatIface.(*PerReleaseChannelConfig_RuntimeExtension)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.RuntimeExtension, that.RuntimeExtension; p != q {
		if p == nil {
			p = &RuntimeExtensionConfig{}
		}
		if q == nil {
			q = &RuntimeExtensionConfig{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *PerReleaseChannelConfig_KubernetesConfig) StableEqualVT(thatIface isPerReleaseChannelConfig_ConfigOneof) bool {
	that, ok := thatIface.(*PerReleaseChannelConfig_KubernetesConfig)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.KubernetesConfig, that.KubernetesConfig; p != q {
		if p == nil {
			p = &common_config.KubernetesConfig{}
		}
		if q == nil {
			q = &common_config.KubernetesConfig{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *PerReleaseChannelConfig_Helm) StableEqualVT(thatIface isPerReleaseChannelConfig_ConfigOneof) bool {
	that, ok := thatIface.(*PerReleaseChannelConfig_Helm)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Helm, that.Helm; p != q {
		if p == nil {
			p = &common_config.HelmConfig{}
		}
		if q == nil {
			q = &common_config.HelmConfig{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *PerReleaseChannelConfig_ExternalConfig) StableEqualVT(thatIface isPerReleaseChannelConfig_ConfigOneof) bool {
	that, ok := thatIface.(*PerReleaseChannelConfig_ExternalConfig)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ExternalConfig, that.ExternalConfig; p != q {
		if p == nil {
			p = &common_config.KubernetesConfig{}
		}
		if q == nil {
			q = &common_config.KubernetesConfig{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *PerReleaseChannelConfig_AwsEcs) StableEqualVT(thatIface isPerReleaseChannelConfig_ConfigOneof) bool {
	that, ok := thatIface.(*PerReleaseChannelConfig_AwsEcs)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.AwsEcs, that.AwsEcs; p != q {
		if p == nil {
			p = &AwsEcsConfig{}
		}
		if q == nil {
			q = &AwsEcsConfig{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *PerReleaseChannelConfig_GoogleCloudRun) StableEqualVT(thatIface isPerReleaseChannelConfig_ConfigOneof) bool {
	that, ok := thatIface.(*PerReleaseChannelConfig_GoogleCloudRun)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.GoogleCloudRun, that.GoogleCloudRun; p != q {
		if p == nil {
			p = &GoogleCloudRunConfig{}
		}
		if q == nil {
			q = &GoogleCloudRunConfig{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *PerReleaseChannelConfig_CustomRuntime) StableEqualVT(thatIface isPerReleaseChannelConfig_ConfigOneof) bool {
	that, ok := thatIface.(*PerReleaseChannelConfig_CustomRuntime)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.CustomRuntime, that.CustomRuntime; p != q {
		if p == nil {
			p = &RuntimeExtensionConfig{}
		}
		if q == nil {
			q = &RuntimeExtensionConfig{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *PerReleaseChannelConfig_Fly) StableEqualVT(thatIface isPerReleaseChannelConfig_ConfigOneof) bool {
	that, ok := thatIface.(*PerReleaseChannelConfig_Fly)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Fly, that.Fly; p != q {
		if p == nil {
			p = &fly.FlyConfig{}
		}
		if q == nil {
			q = &fly.FlyConfig{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *PerReleaseChannelConfig) EqualVT(that *PerReleaseChannelConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.ConfigOneof == nil && that.ConfigOneof != nil {
		return false
	} else if this.ConfigOneof != nil {
		if that.ConfigOneof == nil {
			return false
		}
		if !this.ConfigOneof.(interface {
			EqualVT(isPerReleaseChannelConfig_ConfigOneof) bool
		}).EqualVT(that.ConfigOneof) {
			return false
		}
	}
	if this.ReleaseChannel != that.ReleaseChannel {
		return false
	}
	if len(this.CustomHostnames) != len(that.CustomHostnames) {
		return false
	}
	for i, vx := range this.CustomHostnames {
		vy := that.CustomHostnames[i]
		if vx != vy {
			return false
		}
	}
	if len(this.Programs) != len(that.Programs) {
		return false
	}
	for i, vx := range this.Programs {
		vy := that.Programs[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &common_config.PerReleaseChannelProgramConfig{}
			}
			if q == nil {
				q = &common_config.PerReleaseChannelProgramConfig{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if !this.Cert.EqualVT(that.Cert) {
		return false
	}
	if !this.DeliveryConfig.EqualVT(that.DeliveryConfig) {
		return false
	}
	if len(this.Volumes) != len(that.Volumes) {
		return false
	}
	for i, vx := range this.Volumes {
		vy := that.Volumes[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &volumes.Volume{}
			}
			if q == nil {
				q = &volumes.Volume{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if !this.Replicas.EqualVT(that.Replicas) {
		return false
	}
	if len(this.PrePushTasks) != len(that.PrePushTasks) {
		return false
	}
	for i, vx := range this.PrePushTasks {
		vy := that.PrePushTasks[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &TaskConfig{}
			}
			if q == nil {
				q = &TaskConfig{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if !this.RuntimeSpecific.EqualVT(that.RuntimeSpecific) {
		return false
	}
	if this.RuntimeConnection != that.RuntimeConnection {
		return false
	}
	if len(this.DeliveryExtensions) != len(that.DeliveryExtensions) {
		return false
	}
	for i, vx := range this.DeliveryExtensions {
		vy := that.DeliveryExtensions[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &DeliveryExtensionConfig{}
			}
			if q == nil {
				q = &DeliveryExtensionConfig{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if len(this.Env) != len(that.Env) {
		return false
	}
	for i, vx := range this.Env {
		vy, ok := that.Env[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &common_config.EnvValue{}
			}
			if q == nil {
				q = &common_config.EnvValue{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if len(this.Constants) != len(that.Constants) {
		return false
	}
	for i, vx := range this.Constants {
		vy := that.Constants[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &common_config.Constant{}
			}
			if q == nil {
				q = &common_config.Constant{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if len(this.Protections) != len(that.Protections) {
		return false
	}
	for i, vx := range this.Protections {
		vy := that.Protections[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &protection.ProtectionAttachmentConfig{}
			}
			if q == nil {
				q = &protection.ProtectionAttachmentConfig{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if len(this.ConvergenceProtections) != len(that.ConvergenceProtections) {
		return false
	}
	for i, vx := range this.ConvergenceProtections {
		vy := that.ConvergenceProtections[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &protection.ProtectionAttachmentConfig{}
			}
			if q == nil {
				q = &protection.ProtectionAttachmentConfig{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if len(this.ConvergenceExtensions) != len(that.ConvergenceExtensions) {
		return false
	}
	for i, vx := range this.ConvergenceExtensions {
		vy := that.ConvergenceExtensions[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &DeliveryExtensionConfig{}
			}
			if q == nil {
				q = &DeliveryExtensionConfig{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *PerReleaseChannelConfig) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*PerReleaseChannelConfig)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *PerReleaseChannelConfig_RuntimeExtension) EqualVT(thatIface isPerReleaseChannelConfig_ConfigOneof) bool {
	that, ok := thatIface.(*PerReleaseChannelConfig_RuntimeExtension)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.RuntimeExtension, that.RuntimeExtension; p != q {
		if p == nil {
			p = &RuntimeExtensionConfig{}
		}
		if q == nil {
			q = &RuntimeExtensionConfig{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *PerReleaseChannelConfig_KubernetesConfig) EqualVT(thatIface isPerReleaseChannelConfig_ConfigOneof) bool {
	that, ok := thatIface.(*PerReleaseChannelConfig_KubernetesConfig)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.KubernetesConfig, that.KubernetesConfig; p != q {
		if p == nil {
			p = &common_config.KubernetesConfig{}
		}
		if q == nil {
			q = &common_config.KubernetesConfig{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *PerReleaseChannelConfig_Helm) EqualVT(thatIface isPerReleaseChannelConfig_ConfigOneof) bool {
	that, ok := thatIface.(*PerReleaseChannelConfig_Helm)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Helm, that.Helm; p != q {
		if p == nil {
			p = &common_config.HelmConfig{}
		}
		if q == nil {
			q = &common_config.HelmConfig{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *PerReleaseChannelConfig_ExternalConfig) EqualVT(thatIface isPerReleaseChannelConfig_ConfigOneof) bool {
	that, ok := thatIface.(*PerReleaseChannelConfig_ExternalConfig)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ExternalConfig, that.ExternalConfig; p != q {
		if p == nil {
			p = &common_config.KubernetesConfig{}
		}
		if q == nil {
			q = &common_config.KubernetesConfig{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *PerReleaseChannelConfig_AwsEcs) EqualVT(thatIface isPerReleaseChannelConfig_ConfigOneof) bool {
	that, ok := thatIface.(*PerReleaseChannelConfig_AwsEcs)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.AwsEcs, that.AwsEcs; p != q {
		if p == nil {
			p = &AwsEcsConfig{}
		}
		if q == nil {
			q = &AwsEcsConfig{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *PerReleaseChannelConfig_GoogleCloudRun) EqualVT(thatIface isPerReleaseChannelConfig_ConfigOneof) bool {
	that, ok := thatIface.(*PerReleaseChannelConfig_GoogleCloudRun)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.GoogleCloudRun, that.GoogleCloudRun; p != q {
		if p == nil {
			p = &GoogleCloudRunConfig{}
		}
		if q == nil {
			q = &GoogleCloudRunConfig{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *PerReleaseChannelConfig_CustomRuntime) EqualVT(thatIface isPerReleaseChannelConfig_ConfigOneof) bool {
	that, ok := thatIface.(*PerReleaseChannelConfig_CustomRuntime)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.CustomRuntime, that.CustomRuntime; p != q {
		if p == nil {
			p = &RuntimeExtensionConfig{}
		}
		if q == nil {
			q = &RuntimeExtensionConfig{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *PerReleaseChannelConfig_Fly) EqualVT(thatIface isPerReleaseChannelConfig_ConfigOneof) bool {
	that, ok := thatIface.(*PerReleaseChannelConfig_Fly)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Fly, that.Fly; p != q {
		if p == nil {
			p = &fly.FlyConfig{}
		}
		if q == nil {
			q = &fly.FlyConfig{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CapabilityReference) StableEqualVT(that *CapabilityReference) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CapabilityReference) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CapabilityReference)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *CapabilityReference) EqualVT(that *CapabilityReference) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CapabilityReference) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CapabilityReference)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CompiledCapabilityConfig) StableEqualVT(that *CompiledCapabilityConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Capability.StableEqualVT(that.Capability) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CompiledCapabilityConfig) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CompiledCapabilityConfig)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *CompiledCapabilityConfig) EqualVT(that *CompiledCapabilityConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Capability.EqualVT(that.Capability) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CompiledCapabilityConfig) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CompiledCapabilityConfig)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ProgramReference) StableEqualVT(that *ProgramReference) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Ref == nil && that.Ref != nil {
		return false
	} else if this.Ref != nil {
		if that.Ref == nil {
			return false
		}
		if !this.Ref.(interface {
			StableEqualVT(isProgramReference_Ref) bool
		}).StableEqualVT(that.Ref) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ProgramReference) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ProgramReference)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ProgramReference_Name) StableEqualVT(thatIface isProgramReference_Ref) bool {
	that, ok := thatIface.(*ProgramReference_Name)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	return true
}

func (this *ProgramReference) EqualVT(that *ProgramReference) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Ref == nil && that.Ref != nil {
		return false
	} else if this.Ref != nil {
		if that.Ref == nil {
			return false
		}
		if !this.Ref.(interface {
			EqualVT(isProgramReference_Ref) bool
		}).EqualVT(that.Ref) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ProgramReference) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ProgramReference)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ProgramReference_Name) EqualVT(thatIface isProgramReference_Ref) bool {
	that, ok := thatIface.(*ProgramReference_Name)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	return true
}

func (this *TaskReference) StableEqualVT(that *TaskReference) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Ref == nil && that.Ref != nil {
		return false
	} else if this.Ref != nil {
		if that.Ref == nil {
			return false
		}
		if !this.Ref.(interface {
			StableEqualVT(isTaskReference_Ref) bool
		}).StableEqualVT(that.Ref) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *TaskReference) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*TaskReference)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *TaskReference_ReleaseChannel) StableEqualVT(thatIface isTaskReference_Ref) bool {
	that, ok := thatIface.(*TaskReference_ReleaseChannel)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.ReleaseChannel != that.ReleaseChannel {
		return false
	}
	return true
}

func (this *TaskReference) EqualVT(that *TaskReference) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Ref == nil && that.Ref != nil {
		return false
	} else if this.Ref != nil {
		if that.Ref == nil {
			return false
		}
		if !this.Ref.(interface {
			EqualVT(isTaskReference_Ref) bool
		}).EqualVT(that.Ref) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *TaskReference) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*TaskReference)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *TaskReference_ReleaseChannel) EqualVT(thatIface isTaskReference_Ref) bool {
	that, ok := thatIface.(*TaskReference_ReleaseChannel)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.ReleaseChannel != that.ReleaseChannel {
		return false
	}
	return true
}

func (this *TaskConfig) StableEqualVT(that *TaskConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Program.StableEqualVT(that.Program) {
		return false
	}
	if !this.BaseProgram.StableEqualVT(that.BaseProgram) {
		return false
	}
	if !this.RetryConfig.StableEqualVT(that.RetryConfig) {
		return false
	}
	if !this.Ref.StableEqualVT(that.Ref) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *TaskConfig) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*TaskConfig)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *TaskConfig) EqualVT(that *TaskConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Program.EqualVT(that.Program) {
		return false
	}
	if !this.BaseProgram.EqualVT(that.BaseProgram) {
		return false
	}
	if !this.RetryConfig.EqualVT(that.RetryConfig) {
		return false
	}
	if !this.Ref.EqualVT(that.Ref) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *TaskConfig) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*TaskConfig)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ProtectionLink) StableEqualVT(that *ProtectionLink) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Lifecycle.StableEqualVT(that.Lifecycle) {
		return false
	}
	if this.AttachmentId != that.AttachmentId {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ProtectionLink) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ProtectionLink)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ProtectionLink) EqualVT(that *ProtectionLink) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Lifecycle.EqualVT(that.Lifecycle) {
		return false
	}
	if this.AttachmentId != that.AttachmentId {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ProtectionLink) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ProtectionLink)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *DeliveryExtensionConfig) StableEqualVT(that *DeliveryExtensionConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Definition == nil && that.Definition != nil {
		return false
	} else if this.Definition != nil {
		if that.Definition == nil {
			return false
		}
		if !this.Definition.(interface {
			StableEqualVT(isDeliveryExtensionConfig_Definition) bool
		}).StableEqualVT(that.Definition) {
			return false
		}
	}
	if this.Lifecycle != that.Lifecycle {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *DeliveryExtensionConfig) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*DeliveryExtensionConfig)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *DeliveryExtensionConfig_Inlined) StableEqualVT(thatIface isDeliveryExtensionConfig_Definition) bool {
	that, ok := thatIface.(*DeliveryExtensionConfig_Inlined)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Inlined, that.Inlined; p != q {
		if p == nil {
			p = &delivery_extension.DeliveryExtensionConfig{}
		}
		if q == nil {
			q = &delivery_extension.DeliveryExtensionConfig{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *DeliveryExtensionConfig_Instance) StableEqualVT(thatIface isDeliveryExtensionConfig_Definition) bool {
	that, ok := thatIface.(*DeliveryExtensionConfig_Instance)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.Instance != that.Instance {
		return false
	}
	return true
}

func (this *DeliveryExtensionConfig_Ref) StableEqualVT(thatIface isDeliveryExtensionConfig_Definition) bool {
	that, ok := thatIface.(*DeliveryExtensionConfig_Ref)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Ref, that.Ref; p != q {
		if p == nil {
			p = &delivery_extension.DeliveryExtensionInstanceRef{}
		}
		if q == nil {
			q = &delivery_extension.DeliveryExtensionInstanceRef{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *DeliveryExtensionConfig) EqualVT(that *DeliveryExtensionConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Definition == nil && that.Definition != nil {
		return false
	} else if this.Definition != nil {
		if that.Definition == nil {
			return false
		}
		if !this.Definition.(interface {
			EqualVT(isDeliveryExtensionConfig_Definition) bool
		}).EqualVT(that.Definition) {
			return false
		}
	}
	if this.Lifecycle != that.Lifecycle {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *DeliveryExtensionConfig) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*DeliveryExtensionConfig)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *DeliveryExtensionConfig_Inlined) EqualVT(thatIface isDeliveryExtensionConfig_Definition) bool {
	that, ok := thatIface.(*DeliveryExtensionConfig_Inlined)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Inlined, that.Inlined; p != q {
		if p == nil {
			p = &delivery_extension.DeliveryExtensionConfig{}
		}
		if q == nil {
			q = &delivery_extension.DeliveryExtensionConfig{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *DeliveryExtensionConfig_Instance) EqualVT(thatIface isDeliveryExtensionConfig_Definition) bool {
	that, ok := thatIface.(*DeliveryExtensionConfig_Instance)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.Instance != that.Instance {
		return false
	}
	return true
}

func (this *DeliveryExtensionConfig_Ref) EqualVT(thatIface isDeliveryExtensionConfig_Definition) bool {
	that, ok := thatIface.(*DeliveryExtensionConfig_Ref)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Ref, that.Ref; p != q {
		if p == nil {
			p = &delivery_extension.DeliveryExtensionInstanceRef{}
		}
		if q == nil {
			q = &delivery_extension.DeliveryExtensionInstanceRef{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *DeliveryExtensionInstance) StableEqualVT(that *DeliveryExtensionInstance) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Definition == nil && that.Definition != nil {
		return false
	} else if this.Definition != nil {
		if that.Definition == nil {
			return false
		}
		if !this.Definition.(interface {
			StableEqualVT(isDeliveryExtensionInstance_Definition) bool
		}).StableEqualVT(that.Definition) {
			return false
		}
	}
	if this.Name != that.Name {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *DeliveryExtensionInstance) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*DeliveryExtensionInstance)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *DeliveryExtensionInstance_Inlined) StableEqualVT(thatIface isDeliveryExtensionInstance_Definition) bool {
	that, ok := thatIface.(*DeliveryExtensionInstance_Inlined)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Inlined, that.Inlined; p != q {
		if p == nil {
			p = &delivery_extension.DeliveryExtensionConfig{}
		}
		if q == nil {
			q = &delivery_extension.DeliveryExtensionConfig{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *DeliveryExtensionInstance_Ref) StableEqualVT(thatIface isDeliveryExtensionInstance_Definition) bool {
	that, ok := thatIface.(*DeliveryExtensionInstance_Ref)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Ref, that.Ref; p != q {
		if p == nil {
			p = &delivery_extension.DeliveryExtensionInstanceRef{}
		}
		if q == nil {
			q = &delivery_extension.DeliveryExtensionInstanceRef{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *DeliveryExtensionInstance) EqualVT(that *DeliveryExtensionInstance) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Definition == nil && that.Definition != nil {
		return false
	} else if this.Definition != nil {
		if that.Definition == nil {
			return false
		}
		if !this.Definition.(interface {
			EqualVT(isDeliveryExtensionInstance_Definition) bool
		}).EqualVT(that.Definition) {
			return false
		}
	}
	if this.Name != that.Name {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *DeliveryExtensionInstance) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*DeliveryExtensionInstance)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *DeliveryExtensionInstance_Inlined) EqualVT(thatIface isDeliveryExtensionInstance_Definition) bool {
	that, ok := thatIface.(*DeliveryExtensionInstance_Inlined)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Inlined, that.Inlined; p != q {
		if p == nil {
			p = &delivery_extension.DeliveryExtensionConfig{}
		}
		if q == nil {
			q = &delivery_extension.DeliveryExtensionConfig{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *DeliveryExtensionInstance_Ref) EqualVT(thatIface isDeliveryExtensionInstance_Definition) bool {
	that, ok := thatIface.(*DeliveryExtensionInstance_Ref)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Ref, that.Ref; p != q {
		if p == nil {
			p = &delivery_extension.DeliveryExtensionInstanceRef{}
		}
		if q == nil {
			q = &delivery_extension.DeliveryExtensionInstanceRef{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeSpecificConfig_K8SConfig) StableEqualVT(that *RuntimeSpecificConfig_K8SConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.ServiceAnnotations) != len(that.ServiceAnnotations) {
		return false
	}
	for i, vx := range this.ServiceAnnotations {
		vy, ok := that.ServiceAnnotations[i]
		if !ok {
			return false
		}
		if vx != vy {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RuntimeSpecificConfig_K8SConfig) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RuntimeSpecificConfig_K8SConfig)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *RuntimeSpecificConfig) StableEqualVT(that *RuntimeSpecificConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.RuntimeConfig == nil && that.RuntimeConfig != nil {
		return false
	} else if this.RuntimeConfig != nil {
		if that.RuntimeConfig == nil {
			return false
		}
		if !this.RuntimeConfig.(interface {
			StableEqualVT(isRuntimeSpecificConfig_RuntimeConfig) bool
		}).StableEqualVT(that.RuntimeConfig) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RuntimeSpecificConfig) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RuntimeSpecificConfig)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *RuntimeSpecificConfig_K8S) StableEqualVT(thatIface isRuntimeSpecificConfig_RuntimeConfig) bool {
	that, ok := thatIface.(*RuntimeSpecificConfig_K8S)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.K8S, that.K8S; p != q {
		if p == nil {
			p = &RuntimeSpecificConfig_K8SConfig{}
		}
		if q == nil {
			q = &RuntimeSpecificConfig_K8SConfig{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeSpecificConfig_K8SConfig) EqualVT(that *RuntimeSpecificConfig_K8SConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.ServiceAnnotations) != len(that.ServiceAnnotations) {
		return false
	}
	for i, vx := range this.ServiceAnnotations {
		vy, ok := that.ServiceAnnotations[i]
		if !ok {
			return false
		}
		if vx != vy {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RuntimeSpecificConfig_K8SConfig) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RuntimeSpecificConfig_K8SConfig)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RuntimeSpecificConfig) EqualVT(that *RuntimeSpecificConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.RuntimeConfig == nil && that.RuntimeConfig != nil {
		return false
	} else if this.RuntimeConfig != nil {
		if that.RuntimeConfig == nil {
			return false
		}
		if !this.RuntimeConfig.(interface {
			EqualVT(isRuntimeSpecificConfig_RuntimeConfig) bool
		}).EqualVT(that.RuntimeConfig) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RuntimeSpecificConfig) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RuntimeSpecificConfig)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RuntimeSpecificConfig_K8S) EqualVT(thatIface isRuntimeSpecificConfig_RuntimeConfig) bool {
	that, ok := thatIface.(*RuntimeSpecificConfig_K8S)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.K8S, that.K8S; p != q {
		if p == nil {
			p = &RuntimeSpecificConfig_K8SConfig{}
		}
		if q == nil {
			q = &RuntimeSpecificConfig_K8SConfig{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeExtensionConfig) StableEqualVT(that *RuntimeExtensionConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.ParameterValues) != len(that.ParameterValues) {
		return false
	}
	for i, vx := range this.ParameterValues {
		vy := that.ParameterValues[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &common_config.ParameterValue{}
			}
			if q == nil {
				q = &common_config.ParameterValue{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if this.ClearOnPerReleaseChannelMerge != that.ClearOnPerReleaseChannelMerge {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RuntimeExtensionConfig) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RuntimeExtensionConfig)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *RuntimeExtensionConfig) EqualVT(that *RuntimeExtensionConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.ParameterValues) != len(that.ParameterValues) {
		return false
	}
	for i, vx := range this.ParameterValues {
		vy := that.ParameterValues[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &common_config.ParameterValue{}
			}
			if q == nil {
				q = &common_config.ParameterValue{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if this.ClearOnPerReleaseChannelMerge != that.ClearOnPerReleaseChannelMerge {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RuntimeExtensionConfig) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RuntimeExtensionConfig)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *AwsEcsConfig_Spec) StableEqualVT(that *AwsEcsConfig_Spec) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.SpecOneof == nil && that.SpecOneof != nil {
		return false
	} else if this.SpecOneof != nil {
		if that.SpecOneof == nil {
			return false
		}
		if !this.SpecOneof.(interface {
			StableEqualVT(isAwsEcsConfig_Spec_SpecOneof) bool
		}).StableEqualVT(that.SpecOneof) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *AwsEcsConfig_Spec) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*AwsEcsConfig_Spec)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *AwsEcsConfig_Spec_Inlined) StableEqualVT(thatIface isAwsEcsConfig_Spec_SpecOneof) bool {
	that, ok := thatIface.(*AwsEcsConfig_Spec_Inlined)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.Inlined != that.Inlined {
		return false
	}
	return true
}

func (this *AwsEcsConfig_Spec_Local) StableEqualVT(thatIface isAwsEcsConfig_Spec_SpecOneof) bool {
	that, ok := thatIface.(*AwsEcsConfig_Spec_Local)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Local, that.Local; p != q {
		if p == nil {
			p = &common_config.LocalConfig{}
		}
		if q == nil {
			q = &common_config.LocalConfig{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *AwsEcsConfig_Spec_Remote) StableEqualVT(thatIface isAwsEcsConfig_Spec_SpecOneof) bool {
	that, ok := thatIface.(*AwsEcsConfig_Spec_Remote)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Remote, that.Remote; p != q {
		if p == nil {
			p = &common_config.RemoteConfig{}
		}
		if q == nil {
			q = &common_config.RemoteConfig{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *AwsEcsConfig) StableEqualVT(that *AwsEcsConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.EcsServiceNameOverride != that.EcsServiceNameOverride {
		return false
	}
	if !this.TaskDefinition.StableEqualVT(that.TaskDefinition) {
		return false
	}
	if this.UpdateTaskDefinitionOnly != that.UpdateTaskDefinitionOnly {
		return false
	}
	if !this.ServiceDefinition.StableEqualVT(that.ServiceDefinition) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *AwsEcsConfig) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*AwsEcsConfig)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *AwsEcsConfig_Spec) EqualVT(that *AwsEcsConfig_Spec) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.SpecOneof == nil && that.SpecOneof != nil {
		return false
	} else if this.SpecOneof != nil {
		if that.SpecOneof == nil {
			return false
		}
		if !this.SpecOneof.(interface {
			EqualVT(isAwsEcsConfig_Spec_SpecOneof) bool
		}).EqualVT(that.SpecOneof) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *AwsEcsConfig_Spec) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*AwsEcsConfig_Spec)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *AwsEcsConfig_Spec_Inlined) EqualVT(thatIface isAwsEcsConfig_Spec_SpecOneof) bool {
	that, ok := thatIface.(*AwsEcsConfig_Spec_Inlined)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.Inlined != that.Inlined {
		return false
	}
	return true
}

func (this *AwsEcsConfig_Spec_Local) EqualVT(thatIface isAwsEcsConfig_Spec_SpecOneof) bool {
	that, ok := thatIface.(*AwsEcsConfig_Spec_Local)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Local, that.Local; p != q {
		if p == nil {
			p = &common_config.LocalConfig{}
		}
		if q == nil {
			q = &common_config.LocalConfig{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *AwsEcsConfig_Spec_Remote) EqualVT(thatIface isAwsEcsConfig_Spec_SpecOneof) bool {
	that, ok := thatIface.(*AwsEcsConfig_Spec_Remote)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Remote, that.Remote; p != q {
		if p == nil {
			p = &common_config.RemoteConfig{}
		}
		if q == nil {
			q = &common_config.RemoteConfig{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *AwsEcsConfig) EqualVT(that *AwsEcsConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.EcsServiceNameOverride != that.EcsServiceNameOverride {
		return false
	}
	if !this.TaskDefinition.EqualVT(that.TaskDefinition) {
		return false
	}
	if this.UpdateTaskDefinitionOnly != that.UpdateTaskDefinitionOnly {
		return false
	}
	if !this.ServiceDefinition.EqualVT(that.ServiceDefinition) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *AwsEcsConfig) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*AwsEcsConfig)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *GoogleCloudRunConfig) StableEqualVT(that *GoogleCloudRunConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.SpecOneof == nil && that.SpecOneof != nil {
		return false
	} else if this.SpecOneof != nil {
		if that.SpecOneof == nil {
			return false
		}
		if !this.SpecOneof.(interface {
			StableEqualVT(isGoogleCloudRunConfig_SpecOneof) bool
		}).StableEqualVT(that.SpecOneof) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GoogleCloudRunConfig) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GoogleCloudRunConfig)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *GoogleCloudRunConfig_Inlined) StableEqualVT(thatIface isGoogleCloudRunConfig_SpecOneof) bool {
	that, ok := thatIface.(*GoogleCloudRunConfig_Inlined)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.Inlined != that.Inlined {
		return false
	}
	return true
}

func (this *GoogleCloudRunConfig_Local) StableEqualVT(thatIface isGoogleCloudRunConfig_SpecOneof) bool {
	that, ok := thatIface.(*GoogleCloudRunConfig_Local)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Local, that.Local; p != q {
		if p == nil {
			p = &common_config.LocalConfig{}
		}
		if q == nil {
			q = &common_config.LocalConfig{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *GoogleCloudRunConfig_Remote) StableEqualVT(thatIface isGoogleCloudRunConfig_SpecOneof) bool {
	that, ok := thatIface.(*GoogleCloudRunConfig_Remote)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Remote, that.Remote; p != q {
		if p == nil {
			p = &common_config.RemoteConfig{}
		}
		if q == nil {
			q = &common_config.RemoteConfig{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *GoogleCloudRunConfig) EqualVT(that *GoogleCloudRunConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.SpecOneof == nil && that.SpecOneof != nil {
		return false
	} else if this.SpecOneof != nil {
		if that.SpecOneof == nil {
			return false
		}
		if !this.SpecOneof.(interface {
			EqualVT(isGoogleCloudRunConfig_SpecOneof) bool
		}).EqualVT(that.SpecOneof) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GoogleCloudRunConfig) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GoogleCloudRunConfig)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *GoogleCloudRunConfig_Inlined) EqualVT(thatIface isGoogleCloudRunConfig_SpecOneof) bool {
	that, ok := thatIface.(*GoogleCloudRunConfig_Inlined)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.Inlined != that.Inlined {
		return false
	}
	return true
}

func (this *GoogleCloudRunConfig_Local) EqualVT(thatIface isGoogleCloudRunConfig_SpecOneof) bool {
	that, ok := thatIface.(*GoogleCloudRunConfig_Local)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Local, that.Local; p != q {
		if p == nil {
			p = &common_config.LocalConfig{}
		}
		if q == nil {
			q = &common_config.LocalConfig{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *GoogleCloudRunConfig_Remote) EqualVT(thatIface isGoogleCloudRunConfig_SpecOneof) bool {
	that, ok := thatIface.(*GoogleCloudRunConfig_Remote)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Remote, that.Remote; p != q {
		if p == nil {
			p = &common_config.RemoteConfig{}
		}
		if q == nil {
			q = &common_config.RemoteConfig{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ServiceConfig) StableEqualVT(that *ServiceConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.ConfigOneof == nil && that.ConfigOneof != nil {
		return false
	} else if this.ConfigOneof != nil {
		if that.ConfigOneof == nil {
			return false
		}
		if !this.ConfigOneof.(interface {
			StableEqualVT(isServiceConfig_ConfigOneof) bool
		}).StableEqualVT(that.ConfigOneof) {
			return false
		}
	}
	if this.Name != that.Name {
		return false
	}
	if len(this.Programs) != len(that.Programs) {
		return false
	}
	for i, vx := range this.Programs {
		vy := that.Programs[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &common_config.ProgramConfig{}
			}
			if q == nil {
				q = &common_config.ProgramConfig{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if !this.Replicas.StableEqualVT(that.Replicas) {
		return false
	}
	if !this.ReleaseStrategy.StableEqualVT(that.ReleaseStrategy) {
		return false
	}
	if len(this.PerReleaseChannel) != len(that.PerReleaseChannel) {
		return false
	}
	for i, vx := range this.PerReleaseChannel {
		vy := that.PerReleaseChannel[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &PerReleaseChannelConfig{}
			}
			if q == nil {
				q = &PerReleaseChannelConfig{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if len(this.Capabilities) != len(that.Capabilities) {
		return false
	}
	for i, vx := range this.Capabilities {
		vy := that.Capabilities[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &CapabilityReference{}
			}
			if q == nil {
				q = &CapabilityReference{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if !this.DeliveryConfig.StableEqualVT(that.DeliveryConfig) {
		return false
	}
	if len(this.Volumes) != len(that.Volumes) {
		return false
	}
	for i, vx := range this.Volumes {
		vy := that.Volumes[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &volumes.Volume{}
			}
			if q == nil {
				q = &volumes.Volume{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if !this.DeployAnnotations.StableEqualVT(that.DeployAnnotations) {
		return false
	}
	if len(this.PrePushTasks) != len(that.PrePushTasks) {
		return false
	}
	for i, vx := range this.PrePushTasks {
		vy := that.PrePushTasks[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &TaskConfig{}
			}
			if q == nil {
				q = &TaskConfig{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if !this.RuntimeSpecific.StableEqualVT(that.RuntimeSpecific) {
		return false
	}
	if this.Application != that.Application {
		return false
	}
	if len(this.Parameters) != len(that.Parameters) {
		return false
	}
	for i, vx := range this.Parameters {
		vy := that.Parameters[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &common_config.ParameterDefinition{}
			}
			if q == nil {
				q = &common_config.ParameterDefinition{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if !this.ParameterValues.StableEqualVT(that.ParameterValues) {
		return false
	}
	if this.ParametersAutogen != that.ParametersAutogen {
		return false
	}
	if !(*durationpb1.Duration)(this.ProgressDeadline).StableEqualVT((*durationpb1.Duration)(that.ProgressDeadline)) {
		return false
	}
	if !this.AutoRollback.StableEqualVT(that.AutoRollback) {
		return false
	}
	if this.RuntimeConnection != that.RuntimeConnection {
		return false
	}
	if len(this.DeliveryExtensions) != len(that.DeliveryExtensions) {
		return false
	}
	for i, vx := range this.DeliveryExtensions {
		vy := that.DeliveryExtensions[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &DeliveryExtensionConfig{}
			}
			if q == nil {
				q = &DeliveryExtensionConfig{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if len(this.DeliveryExtensionInstances) != len(that.DeliveryExtensionInstances) {
		return false
	}
	for i, vx := range this.DeliveryExtensionInstances {
		vy := that.DeliveryExtensionInstances[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &DeliveryExtensionInstance{}
			}
			if q == nil {
				q = &DeliveryExtensionInstance{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if this.NoCleanupOnDelete != that.NoCleanupOnDelete {
		return false
	}
	if len(this.Env) != len(that.Env) {
		return false
	}
	for i, vx := range this.Env {
		vy, ok := that.Env[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &common_config.EnvValue{}
			}
			if q == nil {
				q = &common_config.EnvValue{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if len(this.Constants) != len(that.Constants) {
		return false
	}
	for i, vx := range this.Constants {
		vy := that.Constants[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &common_config.Constant{}
			}
			if q == nil {
				q = &common_config.Constant{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if this.AsyncSetDesiredState != that.AsyncSetDesiredState {
		return false
	}
	if len(this.ConvergenceProtections) != len(that.ConvergenceProtections) {
		return false
	}
	for i, vx := range this.ConvergenceProtections {
		vy := that.ConvergenceProtections[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &protection.ProtectionAttachmentConfig{}
			}
			if q == nil {
				q = &protection.ProtectionAttachmentConfig{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if !this.Maestro.StableEqualVT(that.Maestro) {
		return false
	}
	if len(this.ConvergenceExtensions) != len(that.ConvergenceExtensions) {
		return false
	}
	for i, vx := range this.ConvergenceExtensions {
		vy := that.ConvergenceExtensions[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &DeliveryExtensionConfig{}
			}
			if q == nil {
				q = &DeliveryExtensionConfig{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if len(this.ConvergenceExtensionInstances) != len(that.ConvergenceExtensionInstances) {
		return false
	}
	for i, vx := range this.ConvergenceExtensionInstances {
		vy := that.ConvergenceExtensionInstances[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &DeliveryExtensionInstance{}
			}
			if q == nil {
				q = &DeliveryExtensionInstance{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if this.BundleName != that.BundleName {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ServiceConfig) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ServiceConfig)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ServiceConfig_RuntimeExtension) StableEqualVT(thatIface isServiceConfig_ConfigOneof) bool {
	that, ok := thatIface.(*ServiceConfig_RuntimeExtension)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.RuntimeExtension, that.RuntimeExtension; p != q {
		if p == nil {
			p = &RuntimeExtensionConfig{}
		}
		if q == nil {
			q = &RuntimeExtensionConfig{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ServiceConfig_KubernetesConfig) StableEqualVT(thatIface isServiceConfig_ConfigOneof) bool {
	that, ok := thatIface.(*ServiceConfig_KubernetesConfig)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.KubernetesConfig, that.KubernetesConfig; p != q {
		if p == nil {
			p = &common_config.KubernetesConfig{}
		}
		if q == nil {
			q = &common_config.KubernetesConfig{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ServiceConfig_Helm) StableEqualVT(thatIface isServiceConfig_ConfigOneof) bool {
	that, ok := thatIface.(*ServiceConfig_Helm)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Helm, that.Helm; p != q {
		if p == nil {
			p = &common_config.HelmConfig{}
		}
		if q == nil {
			q = &common_config.HelmConfig{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ServiceConfig_ExternalConfig) StableEqualVT(thatIface isServiceConfig_ConfigOneof) bool {
	that, ok := thatIface.(*ServiceConfig_ExternalConfig)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ExternalConfig, that.ExternalConfig; p != q {
		if p == nil {
			p = &common_config.KubernetesConfig{}
		}
		if q == nil {
			q = &common_config.KubernetesConfig{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ServiceConfig_AwsEcs) StableEqualVT(thatIface isServiceConfig_ConfigOneof) bool {
	that, ok := thatIface.(*ServiceConfig_AwsEcs)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.AwsEcs, that.AwsEcs; p != q {
		if p == nil {
			p = &AwsEcsConfig{}
		}
		if q == nil {
			q = &AwsEcsConfig{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ServiceConfig_GoogleCloudRun) StableEqualVT(thatIface isServiceConfig_ConfigOneof) bool {
	that, ok := thatIface.(*ServiceConfig_GoogleCloudRun)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.GoogleCloudRun, that.GoogleCloudRun; p != q {
		if p == nil {
			p = &GoogleCloudRunConfig{}
		}
		if q == nil {
			q = &GoogleCloudRunConfig{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ServiceConfig_CustomRuntime) StableEqualVT(thatIface isServiceConfig_ConfigOneof) bool {
	that, ok := thatIface.(*ServiceConfig_CustomRuntime)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.CustomRuntime, that.CustomRuntime; p != q {
		if p == nil {
			p = &RuntimeExtensionConfig{}
		}
		if q == nil {
			q = &RuntimeExtensionConfig{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ServiceConfig_Fly) StableEqualVT(thatIface isServiceConfig_ConfigOneof) bool {
	that, ok := thatIface.(*ServiceConfig_Fly)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Fly, that.Fly; p != q {
		if p == nil {
			p = &fly.FlyConfig{}
		}
		if q == nil {
			q = &fly.FlyConfig{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ServiceConfig) EqualVT(that *ServiceConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.ConfigOneof == nil && that.ConfigOneof != nil {
		return false
	} else if this.ConfigOneof != nil {
		if that.ConfigOneof == nil {
			return false
		}
		if !this.ConfigOneof.(interface {
			EqualVT(isServiceConfig_ConfigOneof) bool
		}).EqualVT(that.ConfigOneof) {
			return false
		}
	}
	if this.Name != that.Name {
		return false
	}
	if len(this.Programs) != len(that.Programs) {
		return false
	}
	for i, vx := range this.Programs {
		vy := that.Programs[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &common_config.ProgramConfig{}
			}
			if q == nil {
				q = &common_config.ProgramConfig{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if !this.Replicas.EqualVT(that.Replicas) {
		return false
	}
	if !this.ReleaseStrategy.EqualVT(that.ReleaseStrategy) {
		return false
	}
	if len(this.PerReleaseChannel) != len(that.PerReleaseChannel) {
		return false
	}
	for i, vx := range this.PerReleaseChannel {
		vy := that.PerReleaseChannel[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &PerReleaseChannelConfig{}
			}
			if q == nil {
				q = &PerReleaseChannelConfig{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if len(this.Capabilities) != len(that.Capabilities) {
		return false
	}
	for i, vx := range this.Capabilities {
		vy := that.Capabilities[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &CapabilityReference{}
			}
			if q == nil {
				q = &CapabilityReference{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if !this.DeliveryConfig.EqualVT(that.DeliveryConfig) {
		return false
	}
	if len(this.Volumes) != len(that.Volumes) {
		return false
	}
	for i, vx := range this.Volumes {
		vy := that.Volumes[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &volumes.Volume{}
			}
			if q == nil {
				q = &volumes.Volume{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if !this.DeployAnnotations.EqualVT(that.DeployAnnotations) {
		return false
	}
	if len(this.PrePushTasks) != len(that.PrePushTasks) {
		return false
	}
	for i, vx := range this.PrePushTasks {
		vy := that.PrePushTasks[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &TaskConfig{}
			}
			if q == nil {
				q = &TaskConfig{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if !this.RuntimeSpecific.EqualVT(that.RuntimeSpecific) {
		return false
	}
	if this.Application != that.Application {
		return false
	}
	if len(this.Parameters) != len(that.Parameters) {
		return false
	}
	for i, vx := range this.Parameters {
		vy := that.Parameters[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &common_config.ParameterDefinition{}
			}
			if q == nil {
				q = &common_config.ParameterDefinition{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if !this.ParameterValues.EqualVT(that.ParameterValues) {
		return false
	}
	if this.ParametersAutogen != that.ParametersAutogen {
		return false
	}
	if !(*durationpb1.Duration)(this.ProgressDeadline).EqualVT((*durationpb1.Duration)(that.ProgressDeadline)) {
		return false
	}
	if !this.AutoRollback.EqualVT(that.AutoRollback) {
		return false
	}
	if this.RuntimeConnection != that.RuntimeConnection {
		return false
	}
	if len(this.DeliveryExtensions) != len(that.DeliveryExtensions) {
		return false
	}
	for i, vx := range this.DeliveryExtensions {
		vy := that.DeliveryExtensions[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &DeliveryExtensionConfig{}
			}
			if q == nil {
				q = &DeliveryExtensionConfig{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if len(this.DeliveryExtensionInstances) != len(that.DeliveryExtensionInstances) {
		return false
	}
	for i, vx := range this.DeliveryExtensionInstances {
		vy := that.DeliveryExtensionInstances[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &DeliveryExtensionInstance{}
			}
			if q == nil {
				q = &DeliveryExtensionInstance{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if this.NoCleanupOnDelete != that.NoCleanupOnDelete {
		return false
	}
	if len(this.Env) != len(that.Env) {
		return false
	}
	for i, vx := range this.Env {
		vy, ok := that.Env[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &common_config.EnvValue{}
			}
			if q == nil {
				q = &common_config.EnvValue{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if len(this.Constants) != len(that.Constants) {
		return false
	}
	for i, vx := range this.Constants {
		vy := that.Constants[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &common_config.Constant{}
			}
			if q == nil {
				q = &common_config.Constant{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if this.AsyncSetDesiredState != that.AsyncSetDesiredState {
		return false
	}
	if len(this.ConvergenceProtections) != len(that.ConvergenceProtections) {
		return false
	}
	for i, vx := range this.ConvergenceProtections {
		vy := that.ConvergenceProtections[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &protection.ProtectionAttachmentConfig{}
			}
			if q == nil {
				q = &protection.ProtectionAttachmentConfig{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if !this.Maestro.EqualVT(that.Maestro) {
		return false
	}
	if len(this.ConvergenceExtensions) != len(that.ConvergenceExtensions) {
		return false
	}
	for i, vx := range this.ConvergenceExtensions {
		vy := that.ConvergenceExtensions[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &DeliveryExtensionConfig{}
			}
			if q == nil {
				q = &DeliveryExtensionConfig{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if len(this.ConvergenceExtensionInstances) != len(that.ConvergenceExtensionInstances) {
		return false
	}
	for i, vx := range this.ConvergenceExtensionInstances {
		vy := that.ConvergenceExtensionInstances[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &DeliveryExtensionInstance{}
			}
			if q == nil {
				q = &DeliveryExtensionInstance{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if this.BundleName != that.BundleName {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ServiceConfig) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ServiceConfig)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ServiceConfig_RuntimeExtension) EqualVT(thatIface isServiceConfig_ConfigOneof) bool {
	that, ok := thatIface.(*ServiceConfig_RuntimeExtension)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.RuntimeExtension, that.RuntimeExtension; p != q {
		if p == nil {
			p = &RuntimeExtensionConfig{}
		}
		if q == nil {
			q = &RuntimeExtensionConfig{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ServiceConfig_KubernetesConfig) EqualVT(thatIface isServiceConfig_ConfigOneof) bool {
	that, ok := thatIface.(*ServiceConfig_KubernetesConfig)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.KubernetesConfig, that.KubernetesConfig; p != q {
		if p == nil {
			p = &common_config.KubernetesConfig{}
		}
		if q == nil {
			q = &common_config.KubernetesConfig{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ServiceConfig_Helm) EqualVT(thatIface isServiceConfig_ConfigOneof) bool {
	that, ok := thatIface.(*ServiceConfig_Helm)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Helm, that.Helm; p != q {
		if p == nil {
			p = &common_config.HelmConfig{}
		}
		if q == nil {
			q = &common_config.HelmConfig{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ServiceConfig_ExternalConfig) EqualVT(thatIface isServiceConfig_ConfigOneof) bool {
	that, ok := thatIface.(*ServiceConfig_ExternalConfig)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ExternalConfig, that.ExternalConfig; p != q {
		if p == nil {
			p = &common_config.KubernetesConfig{}
		}
		if q == nil {
			q = &common_config.KubernetesConfig{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ServiceConfig_AwsEcs) EqualVT(thatIface isServiceConfig_ConfigOneof) bool {
	that, ok := thatIface.(*ServiceConfig_AwsEcs)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.AwsEcs, that.AwsEcs; p != q {
		if p == nil {
			p = &AwsEcsConfig{}
		}
		if q == nil {
			q = &AwsEcsConfig{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ServiceConfig_GoogleCloudRun) EqualVT(thatIface isServiceConfig_ConfigOneof) bool {
	that, ok := thatIface.(*ServiceConfig_GoogleCloudRun)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.GoogleCloudRun, that.GoogleCloudRun; p != q {
		if p == nil {
			p = &GoogleCloudRunConfig{}
		}
		if q == nil {
			q = &GoogleCloudRunConfig{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ServiceConfig_CustomRuntime) EqualVT(thatIface isServiceConfig_ConfigOneof) bool {
	that, ok := thatIface.(*ServiceConfig_CustomRuntime)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.CustomRuntime, that.CustomRuntime; p != q {
		if p == nil {
			p = &RuntimeExtensionConfig{}
		}
		if q == nil {
			q = &RuntimeExtensionConfig{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ServiceConfig_Fly) EqualVT(thatIface isServiceConfig_ConfigOneof) bool {
	that, ok := thatIface.(*ServiceConfig_Fly)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Fly, that.Fly; p != q {
		if p == nil {
			p = &fly.FlyConfig{}
		}
		if q == nil {
			q = &fly.FlyConfig{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CompiledServiceInstanceConfig) StableEqualVT(that *CompiledServiceInstanceConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.ConfigOneof == nil && that.ConfigOneof != nil {
		return false
	} else if this.ConfigOneof != nil {
		if that.ConfigOneof == nil {
			return false
		}
		if !this.ConfigOneof.(interface {
			StableEqualVT(isCompiledServiceInstanceConfig_ConfigOneof) bool
		}).StableEqualVT(that.ConfigOneof) {
			return false
		}
	}
	if this.Service != that.Service {
		return false
	}
	if this.ReleaseChannel != that.ReleaseChannel {
		return false
	}
	if len(this.Programs) != len(that.Programs) {
		return false
	}
	for i, vx := range this.Programs {
		vy := that.Programs[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &common_config.ProgramConfig{}
			}
			if q == nil {
				q = &common_config.ProgramConfig{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if !this.Replicas.StableEqualVT(that.Replicas) {
		return false
	}
	if this.Maturity != that.Maturity {
		return false
	}
	if !this.ReleaseStrategy.StableEqualVT(that.ReleaseStrategy) {
		return false
	}
	if len(this.CustomHostnames) != len(that.CustomHostnames) {
		return false
	}
	for i, vx := range this.CustomHostnames {
		vy := that.CustomHostnames[i]
		if vx != vy {
			return false
		}
	}
	if !this.Cert.StableEqualVT(that.Cert) {
		return false
	}
	if !this.Runtime.StableEqualVT(that.Runtime) {
		return false
	}
	if len(this.Capabilities) != len(that.Capabilities) {
		return false
	}
	for i, vx := range this.Capabilities {
		vy := that.Capabilities[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &CompiledCapabilityConfig{}
			}
			if q == nil {
				q = &CompiledCapabilityConfig{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if !this.DeliveryConfig.StableEqualVT(that.DeliveryConfig) {
		return false
	}
	if len(this.Volumes) != len(that.Volumes) {
		return false
	}
	for i, vx := range this.Volumes {
		vy := that.Volumes[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &volumes.Volume{}
			}
			if q == nil {
				q = &volumes.Volume{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if !this.DeployAnnotations.StableEqualVT(that.DeployAnnotations) {
		return false
	}
	if len(this.PrePushTasks) != len(that.PrePushTasks) {
		return false
	}
	for i, vx := range this.PrePushTasks {
		vy := that.PrePushTasks[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &TaskConfig{}
			}
			if q == nil {
				q = &TaskConfig{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if this.Application != that.Application {
		return false
	}
	if !this.RuntimeSpecific.StableEqualVT(that.RuntimeSpecific) {
		return false
	}
	if len(this.Parameters) != len(that.Parameters) {
		return false
	}
	for i, vx := range this.Parameters {
		vy := that.Parameters[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &common_config.ParameterDefinition{}
			}
			if q == nil {
				q = &common_config.ParameterDefinition{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if len(this.ParameterValues) != len(that.ParameterValues) {
		return false
	}
	for i, vx := range this.ParameterValues {
		vy := that.ParameterValues[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &common_config.ParameterValue{}
			}
			if q == nil {
				q = &common_config.ParameterValue{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if !(*durationpb1.Duration)(this.ProgressDeadline).StableEqualVT((*durationpb1.Duration)(that.ProgressDeadline)) {
		return false
	}
	if !this.RuntimeExecution.StableEqualVT(that.RuntimeExecution) {
		return false
	}
	if len(this.Env) != len(that.Env) {
		return false
	}
	for i, vx := range this.Env {
		vy, ok := that.Env[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &common_config.EnvValue{}
			}
			if q == nil {
				q = &common_config.EnvValue{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if len(this.ConvergenceExtensions) != len(that.ConvergenceExtensions) {
		return false
	}
	for i, vx := range this.ConvergenceExtensions {
		vy := that.ConvergenceExtensions[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &DeliveryExtensionConfig{}
			}
			if q == nil {
				q = &DeliveryExtensionConfig{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if len(this.ConvergenceExtensionInstances) != len(that.ConvergenceExtensionInstances) {
		return false
	}
	for i, vx := range this.ConvergenceExtensionInstances {
		vy := that.ConvergenceExtensionInstances[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &DeliveryExtensionInstance{}
			}
			if q == nil {
				q = &DeliveryExtensionInstance{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if this.NoCleanupOnDelete != that.NoCleanupOnDelete {
		return false
	}
	if len(this.Constants) != len(that.Constants) {
		return false
	}
	for i, vx := range this.Constants {
		vy := that.Constants[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &common_config.Constant{}
			}
			if q == nil {
				q = &common_config.Constant{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if len(this.Protections) != len(that.Protections) {
		return false
	}
	for i, vx := range this.Protections {
		vy := that.Protections[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &protection.ProtectionAttachmentConfig{}
			}
			if q == nil {
				q = &protection.ProtectionAttachmentConfig{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if len(this.ConvergenceProtections) != len(that.ConvergenceProtections) {
		return false
	}
	for i, vx := range this.ConvergenceProtections {
		vy := that.ConvergenceProtections[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &protection.ProtectionAttachmentConfig{}
			}
			if q == nil {
				q = &protection.ProtectionAttachmentConfig{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if this.BundleName != that.BundleName {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CompiledServiceInstanceConfig) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CompiledServiceInstanceConfig)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *CompiledServiceInstanceConfig_CustomRuntime) StableEqualVT(thatIface isCompiledServiceInstanceConfig_ConfigOneof) bool {
	that, ok := thatIface.(*CompiledServiceInstanceConfig_CustomRuntime)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.CustomRuntime, that.CustomRuntime; p != q {
		if p == nil {
			p = &RuntimeExtensionConfig{}
		}
		if q == nil {
			q = &RuntimeExtensionConfig{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CompiledServiceInstanceConfig_KubernetesConfig) StableEqualVT(thatIface isCompiledServiceInstanceConfig_ConfigOneof) bool {
	that, ok := thatIface.(*CompiledServiceInstanceConfig_KubernetesConfig)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.KubernetesConfig, that.KubernetesConfig; p != q {
		if p == nil {
			p = &common_config.KubernetesConfig{}
		}
		if q == nil {
			q = &common_config.KubernetesConfig{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CompiledServiceInstanceConfig_Helm) StableEqualVT(thatIface isCompiledServiceInstanceConfig_ConfigOneof) bool {
	that, ok := thatIface.(*CompiledServiceInstanceConfig_Helm)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Helm, that.Helm; p != q {
		if p == nil {
			p = &common_config.HelmConfig{}
		}
		if q == nil {
			q = &common_config.HelmConfig{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CompiledServiceInstanceConfig_AwsEcs) StableEqualVT(thatIface isCompiledServiceInstanceConfig_ConfigOneof) bool {
	that, ok := thatIface.(*CompiledServiceInstanceConfig_AwsEcs)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.AwsEcs, that.AwsEcs; p != q {
		if p == nil {
			p = &AwsEcsConfig{}
		}
		if q == nil {
			q = &AwsEcsConfig{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CompiledServiceInstanceConfig_GoogleCloudRun) StableEqualVT(thatIface isCompiledServiceInstanceConfig_ConfigOneof) bool {
	that, ok := thatIface.(*CompiledServiceInstanceConfig_GoogleCloudRun)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.GoogleCloudRun, that.GoogleCloudRun; p != q {
		if p == nil {
			p = &GoogleCloudRunConfig{}
		}
		if q == nil {
			q = &GoogleCloudRunConfig{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CompiledServiceInstanceConfig_Fly) StableEqualVT(thatIface isCompiledServiceInstanceConfig_ConfigOneof) bool {
	that, ok := thatIface.(*CompiledServiceInstanceConfig_Fly)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Fly, that.Fly; p != q {
		if p == nil {
			p = &fly.FlyConfig{}
		}
		if q == nil {
			q = &fly.FlyConfig{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CompiledServiceInstanceConfig) EqualVT(that *CompiledServiceInstanceConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.ConfigOneof == nil && that.ConfigOneof != nil {
		return false
	} else if this.ConfigOneof != nil {
		if that.ConfigOneof == nil {
			return false
		}
		if !this.ConfigOneof.(interface {
			EqualVT(isCompiledServiceInstanceConfig_ConfigOneof) bool
		}).EqualVT(that.ConfigOneof) {
			return false
		}
	}
	if this.Service != that.Service {
		return false
	}
	if this.ReleaseChannel != that.ReleaseChannel {
		return false
	}
	if len(this.Programs) != len(that.Programs) {
		return false
	}
	for i, vx := range this.Programs {
		vy := that.Programs[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &common_config.ProgramConfig{}
			}
			if q == nil {
				q = &common_config.ProgramConfig{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if !this.Replicas.EqualVT(that.Replicas) {
		return false
	}
	if this.Maturity != that.Maturity {
		return false
	}
	if !this.ReleaseStrategy.EqualVT(that.ReleaseStrategy) {
		return false
	}
	if len(this.CustomHostnames) != len(that.CustomHostnames) {
		return false
	}
	for i, vx := range this.CustomHostnames {
		vy := that.CustomHostnames[i]
		if vx != vy {
			return false
		}
	}
	if !this.Cert.EqualVT(that.Cert) {
		return false
	}
	if !this.Runtime.EqualVT(that.Runtime) {
		return false
	}
	if len(this.Capabilities) != len(that.Capabilities) {
		return false
	}
	for i, vx := range this.Capabilities {
		vy := that.Capabilities[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &CompiledCapabilityConfig{}
			}
			if q == nil {
				q = &CompiledCapabilityConfig{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if !this.DeliveryConfig.EqualVT(that.DeliveryConfig) {
		return false
	}
	if len(this.Volumes) != len(that.Volumes) {
		return false
	}
	for i, vx := range this.Volumes {
		vy := that.Volumes[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &volumes.Volume{}
			}
			if q == nil {
				q = &volumes.Volume{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if !this.DeployAnnotations.EqualVT(that.DeployAnnotations) {
		return false
	}
	if len(this.PrePushTasks) != len(that.PrePushTasks) {
		return false
	}
	for i, vx := range this.PrePushTasks {
		vy := that.PrePushTasks[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &TaskConfig{}
			}
			if q == nil {
				q = &TaskConfig{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if this.Application != that.Application {
		return false
	}
	if !this.RuntimeSpecific.EqualVT(that.RuntimeSpecific) {
		return false
	}
	if len(this.Parameters) != len(that.Parameters) {
		return false
	}
	for i, vx := range this.Parameters {
		vy := that.Parameters[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &common_config.ParameterDefinition{}
			}
			if q == nil {
				q = &common_config.ParameterDefinition{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if len(this.ParameterValues) != len(that.ParameterValues) {
		return false
	}
	for i, vx := range this.ParameterValues {
		vy := that.ParameterValues[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &common_config.ParameterValue{}
			}
			if q == nil {
				q = &common_config.ParameterValue{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if !(*durationpb1.Duration)(this.ProgressDeadline).EqualVT((*durationpb1.Duration)(that.ProgressDeadline)) {
		return false
	}
	if !this.RuntimeExecution.EqualVT(that.RuntimeExecution) {
		return false
	}
	if len(this.Env) != len(that.Env) {
		return false
	}
	for i, vx := range this.Env {
		vy, ok := that.Env[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &common_config.EnvValue{}
			}
			if q == nil {
				q = &common_config.EnvValue{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if len(this.ConvergenceExtensions) != len(that.ConvergenceExtensions) {
		return false
	}
	for i, vx := range this.ConvergenceExtensions {
		vy := that.ConvergenceExtensions[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &DeliveryExtensionConfig{}
			}
			if q == nil {
				q = &DeliveryExtensionConfig{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if len(this.ConvergenceExtensionInstances) != len(that.ConvergenceExtensionInstances) {
		return false
	}
	for i, vx := range this.ConvergenceExtensionInstances {
		vy := that.ConvergenceExtensionInstances[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &DeliveryExtensionInstance{}
			}
			if q == nil {
				q = &DeliveryExtensionInstance{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if this.NoCleanupOnDelete != that.NoCleanupOnDelete {
		return false
	}
	if len(this.Constants) != len(that.Constants) {
		return false
	}
	for i, vx := range this.Constants {
		vy := that.Constants[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &common_config.Constant{}
			}
			if q == nil {
				q = &common_config.Constant{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if len(this.Protections) != len(that.Protections) {
		return false
	}
	for i, vx := range this.Protections {
		vy := that.Protections[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &protection.ProtectionAttachmentConfig{}
			}
			if q == nil {
				q = &protection.ProtectionAttachmentConfig{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if len(this.ConvergenceProtections) != len(that.ConvergenceProtections) {
		return false
	}
	for i, vx := range this.ConvergenceProtections {
		vy := that.ConvergenceProtections[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &protection.ProtectionAttachmentConfig{}
			}
			if q == nil {
				q = &protection.ProtectionAttachmentConfig{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if this.BundleName != that.BundleName {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CompiledServiceInstanceConfig) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CompiledServiceInstanceConfig)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CompiledServiceInstanceConfig_CustomRuntime) EqualVT(thatIface isCompiledServiceInstanceConfig_ConfigOneof) bool {
	that, ok := thatIface.(*CompiledServiceInstanceConfig_CustomRuntime)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.CustomRuntime, that.CustomRuntime; p != q {
		if p == nil {
			p = &RuntimeExtensionConfig{}
		}
		if q == nil {
			q = &RuntimeExtensionConfig{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CompiledServiceInstanceConfig_KubernetesConfig) EqualVT(thatIface isCompiledServiceInstanceConfig_ConfigOneof) bool {
	that, ok := thatIface.(*CompiledServiceInstanceConfig_KubernetesConfig)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.KubernetesConfig, that.KubernetesConfig; p != q {
		if p == nil {
			p = &common_config.KubernetesConfig{}
		}
		if q == nil {
			q = &common_config.KubernetesConfig{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CompiledServiceInstanceConfig_Helm) EqualVT(thatIface isCompiledServiceInstanceConfig_ConfigOneof) bool {
	that, ok := thatIface.(*CompiledServiceInstanceConfig_Helm)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Helm, that.Helm; p != q {
		if p == nil {
			p = &common_config.HelmConfig{}
		}
		if q == nil {
			q = &common_config.HelmConfig{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CompiledServiceInstanceConfig_AwsEcs) EqualVT(thatIface isCompiledServiceInstanceConfig_ConfigOneof) bool {
	that, ok := thatIface.(*CompiledServiceInstanceConfig_AwsEcs)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.AwsEcs, that.AwsEcs; p != q {
		if p == nil {
			p = &AwsEcsConfig{}
		}
		if q == nil {
			q = &AwsEcsConfig{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CompiledServiceInstanceConfig_GoogleCloudRun) EqualVT(thatIface isCompiledServiceInstanceConfig_ConfigOneof) bool {
	that, ok := thatIface.(*CompiledServiceInstanceConfig_GoogleCloudRun)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.GoogleCloudRun, that.GoogleCloudRun; p != q {
		if p == nil {
			p = &GoogleCloudRunConfig{}
		}
		if q == nil {
			q = &GoogleCloudRunConfig{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CompiledServiceInstanceConfig_Fly) EqualVT(thatIface isCompiledServiceInstanceConfig_ConfigOneof) bool {
	that, ok := thatIface.(*CompiledServiceInstanceConfig_Fly)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Fly, that.Fly; p != q {
		if p == nil {
			p = &fly.FlyConfig{}
		}
		if q == nil {
			q = &fly.FlyConfig{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CompiledJobConfig) StableEqualVT(that *CompiledJobConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.NamePrefix != that.NamePrefix {
		return false
	}
	if this.ReleaseChannel != that.ReleaseChannel {
		return false
	}
	if len(this.Programs) != len(that.Programs) {
		return false
	}
	for i, vx := range this.Programs {
		vy := that.Programs[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &common_config.ProgramConfig{}
			}
			if q == nil {
				q = &common_config.ProgramConfig{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if !this.Runtime.StableEqualVT(that.Runtime) {
		return false
	}
	if !this.RuntimeExecution.StableEqualVT(that.RuntimeExecution) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CompiledJobConfig) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CompiledJobConfig)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *CompiledJobConfig) EqualVT(that *CompiledJobConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.NamePrefix != that.NamePrefix {
		return false
	}
	if this.ReleaseChannel != that.ReleaseChannel {
		return false
	}
	if len(this.Programs) != len(that.Programs) {
		return false
	}
	for i, vx := range this.Programs {
		vy := that.Programs[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &common_config.ProgramConfig{}
			}
			if q == nil {
				q = &common_config.ProgramConfig{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if !this.Runtime.EqualVT(that.Runtime) {
		return false
	}
	if !this.RuntimeExecution.EqualVT(that.RuntimeExecution) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CompiledJobConfig) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CompiledJobConfig)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
