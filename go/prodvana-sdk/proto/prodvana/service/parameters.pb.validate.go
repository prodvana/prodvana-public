// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: prodvana/service/parameters.proto

package service

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PerReleaseChannelParameterValues with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *PerReleaseChannelParameterValues) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PerReleaseChannelParameterValues with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PerReleaseChannelParameterValuesMultiError, or nil if none found.
func (m *PerReleaseChannelParameterValues) ValidateAll() error {
	return m.validate(true)
}

func (m *PerReleaseChannelParameterValues) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReleaseChannel

	for idx, item := range m.GetParameters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PerReleaseChannelParameterValuesValidationError{
						field:  fmt.Sprintf("Parameters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PerReleaseChannelParameterValuesValidationError{
						field:  fmt.Sprintf("Parameters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PerReleaseChannelParameterValuesValidationError{
					field:  fmt.Sprintf("Parameters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PerReleaseChannelParameterValuesMultiError(errors)
	}

	return nil
}

// PerReleaseChannelParameterValuesMultiError is an error wrapping multiple
// validation errors returned by
// PerReleaseChannelParameterValues.ValidateAll() if the designated
// constraints aren't met.
type PerReleaseChannelParameterValuesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PerReleaseChannelParameterValuesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PerReleaseChannelParameterValuesMultiError) AllErrors() []error { return m }

// PerReleaseChannelParameterValuesValidationError is the validation error
// returned by PerReleaseChannelParameterValues.Validate if the designated
// constraints aren't met.
type PerReleaseChannelParameterValuesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PerReleaseChannelParameterValuesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PerReleaseChannelParameterValuesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PerReleaseChannelParameterValuesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PerReleaseChannelParameterValuesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PerReleaseChannelParameterValuesValidationError) ErrorName() string {
	return "PerReleaseChannelParameterValuesValidationError"
}

// Error satisfies the builtin error interface
func (e PerReleaseChannelParameterValuesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPerReleaseChannelParameterValues.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PerReleaseChannelParameterValuesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PerReleaseChannelParameterValuesValidationError{}

// Validate checks the field values on ServiceParameterValues with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServiceParameterValues) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServiceParameterValues with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServiceParameterValuesMultiError, or nil if none found.
func (m *ServiceParameterValues) ValidateAll() error {
	return m.validate(true)
}

func (m *ServiceParameterValues) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetParameters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServiceParameterValuesValidationError{
						field:  fmt.Sprintf("Parameters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServiceParameterValuesValidationError{
						field:  fmt.Sprintf("Parameters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServiceParameterValuesValidationError{
					field:  fmt.Sprintf("Parameters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetPerReleaseChannel() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServiceParameterValuesValidationError{
						field:  fmt.Sprintf("PerReleaseChannel[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServiceParameterValuesValidationError{
						field:  fmt.Sprintf("PerReleaseChannel[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServiceParameterValuesValidationError{
					field:  fmt.Sprintf("PerReleaseChannel[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ServiceParameterValuesMultiError(errors)
	}

	return nil
}

// ServiceParameterValuesMultiError is an error wrapping multiple validation
// errors returned by ServiceParameterValues.ValidateAll() if the designated
// constraints aren't met.
type ServiceParameterValuesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceParameterValuesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceParameterValuesMultiError) AllErrors() []error { return m }

// ServiceParameterValuesValidationError is the validation error returned by
// ServiceParameterValues.Validate if the designated constraints aren't met.
type ServiceParameterValuesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceParameterValuesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceParameterValuesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceParameterValuesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceParameterValuesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceParameterValuesValidationError) ErrorName() string {
	return "ServiceParameterValuesValidationError"
}

// Error satisfies the builtin error interface
func (e ServiceParameterValuesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceParameterValues.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceParameterValuesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceParameterValuesValidationError{}
