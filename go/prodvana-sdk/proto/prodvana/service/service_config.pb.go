// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.1
// 	protoc        v3.21.10
// source: prodvana/service/service_config.proto

package service

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	capability "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/capability"
	common_config "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/common_config"
	delivery "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/delivery"
	protection "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/protection"
	release_channel "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/release_channel"
	runtimes "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/runtimes"
	volumes "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/volumes"
	workflow "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/workflow"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ServiceConfig_ParametersAutogen int32

const (
	ServiceConfig_UNKNOWN ServiceConfig_ParametersAutogen = 0
	// no autogen
	ServiceConfig_NONE ServiceConfig_ParametersAutogen = 1
	// autogen one parameter per program for the image
	ServiceConfig_IMAGE ServiceConfig_ParametersAutogen = 2
	// IMAGE + autogen a parameter for replicas count
	ServiceConfig_IMAGE_AND_REPLICAS ServiceConfig_ParametersAutogen = 3
)

// Enum value maps for ServiceConfig_ParametersAutogen.
var (
	ServiceConfig_ParametersAutogen_name = map[int32]string{
		0: "UNKNOWN",
		1: "NONE",
		2: "IMAGE",
		3: "IMAGE_AND_REPLICAS",
	}
	ServiceConfig_ParametersAutogen_value = map[string]int32{
		"UNKNOWN":            0,
		"NONE":               1,
		"IMAGE":              2,
		"IMAGE_AND_REPLICAS": 3,
	}
)

func (x ServiceConfig_ParametersAutogen) Enum() *ServiceConfig_ParametersAutogen {
	p := new(ServiceConfig_ParametersAutogen)
	*p = x
	return p
}

func (x ServiceConfig_ParametersAutogen) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceConfig_ParametersAutogen) Descriptor() protoreflect.EnumDescriptor {
	return file_prodvana_service_service_config_proto_enumTypes[0].Descriptor()
}

func (ServiceConfig_ParametersAutogen) Type() protoreflect.EnumType {
	return &file_prodvana_service_service_config_proto_enumTypes[0]
}

func (x ServiceConfig_ParametersAutogen) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceConfig_ParametersAutogen.Descriptor instead.
func (ServiceConfig_ParametersAutogen) EnumDescriptor() ([]byte, []int) {
	return file_prodvana_service_service_config_proto_rawDescGZIP(), []int{16, 0}
}

type ReplicasConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ConfigOneof:
	//
	//	*ReplicasConfig_Fixed
	ConfigOneof isReplicasConfig_ConfigOneof `protobuf_oneof:"config_oneof"`
}

func (x *ReplicasConfig) Reset() {
	*x = ReplicasConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_service_service_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicasConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicasConfig) ProtoMessage() {}

func (x *ReplicasConfig) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_service_service_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicasConfig.ProtoReflect.Descriptor instead.
func (*ReplicasConfig) Descriptor() ([]byte, []int) {
	return file_prodvana_service_service_config_proto_rawDescGZIP(), []int{0}
}

func (m *ReplicasConfig) GetConfigOneof() isReplicasConfig_ConfigOneof {
	if m != nil {
		return m.ConfigOneof
	}
	return nil
}

func (x *ReplicasConfig) GetFixed() int32 {
	if x, ok := x.GetConfigOneof().(*ReplicasConfig_Fixed); ok {
		return x.Fixed
	}
	return 0
}

type isReplicasConfig_ConfigOneof interface {
	isReplicasConfig_ConfigOneof()
}

type ReplicasConfig_Fixed struct {
	// no validations, server side has defaults
	Fixed int32 `protobuf:"varint,1,opt,name=fixed,proto3,oneof"`
}

func (*ReplicasConfig_Fixed) isReplicasConfig_ConfigOneof() {}

type MetricAnalysis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to AnalysisOneof:
	//
	//	*MetricAnalysis_SuccessRate
	//	*MetricAnalysis_LatencyP95
	AnalysisOneof isMetricAnalysis_AnalysisOneof `protobuf_oneof:"analysis_oneof"`
}

func (x *MetricAnalysis) Reset() {
	*x = MetricAnalysis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_service_service_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricAnalysis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricAnalysis) ProtoMessage() {}

func (x *MetricAnalysis) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_service_service_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricAnalysis.ProtoReflect.Descriptor instead.
func (*MetricAnalysis) Descriptor() ([]byte, []int) {
	return file_prodvana_service_service_config_proto_rawDescGZIP(), []int{1}
}

func (m *MetricAnalysis) GetAnalysisOneof() isMetricAnalysis_AnalysisOneof {
	if m != nil {
		return m.AnalysisOneof
	}
	return nil
}

func (x *MetricAnalysis) GetSuccessRate() *MetricAnalysis_SuccessRateConfig {
	if x, ok := x.GetAnalysisOneof().(*MetricAnalysis_SuccessRate); ok {
		return x.SuccessRate
	}
	return nil
}

func (x *MetricAnalysis) GetLatencyP95() *MetricAnalysis_LatencyConfig {
	if x, ok := x.GetAnalysisOneof().(*MetricAnalysis_LatencyP95); ok {
		return x.LatencyP95
	}
	return nil
}

type isMetricAnalysis_AnalysisOneof interface {
	isMetricAnalysis_AnalysisOneof()
}

type MetricAnalysis_SuccessRate struct {
	SuccessRate *MetricAnalysis_SuccessRateConfig `protobuf:"bytes,2,opt,name=success_rate,json=successRate,proto3,oneof"`
}

type MetricAnalysis_LatencyP95 struct {
	LatencyP95 *MetricAnalysis_LatencyConfig `protobuf:"bytes,3,opt,name=latency_p95,json=latencyP95,proto3,oneof"`
}

func (*MetricAnalysis_SuccessRate) isMetricAnalysis_AnalysisOneof() {}

func (*MetricAnalysis_LatencyP95) isMetricAnalysis_AnalysisOneof() {}

type ReleaseStrategyConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndividualStageDeadline  *durationpb.Duration `protobuf:"bytes,1,opt,name=individual_stage_deadline,json=individualStageDeadline,proto3" json:"individual_stage_deadline,omitempty"`    // deadline in each stage before the push is rolled back. Includes the time it takes for pods to be healthy. Defaults to 10 minutes.
	AutomatedTestingDuration *durationpb.Duration `protobuf:"bytes,2,opt,name=automated_testing_duration,json=automatedTestingDuration,proto3" json:"automated_testing_duration,omitempty"` // duration of the automated testing phase, before manual approval. Defaults to 30m.
	MetricsAnalysis          []*MetricAnalysis    `protobuf:"bytes,3,rep,name=metrics_analysis,json=metricsAnalysis,proto3" json:"metrics_analysis,omitempty"`
	ManualApproval           bool                 `protobuf:"varint,4,opt,name=manual_approval,json=manualApproval,proto3" json:"manual_approval,omitempty"`
	// advanced settings that do not typically need to be set. Exposed mainly for testing purposes.
	CheckInterval    *durationpb.Duration `protobuf:"bytes,5,opt,name=check_interval,json=checkInterval,proto3" json:"check_interval,omitempty"`           // defaults to 30s
	FailureThreshold int32                `protobuf:"varint,6,opt,name=failure_threshold,json=failureThreshold,proto3" json:"failure_threshold,omitempty"` // defaults to 5
}

func (x *ReleaseStrategyConfig) Reset() {
	*x = ReleaseStrategyConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_service_service_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseStrategyConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseStrategyConfig) ProtoMessage() {}

func (x *ReleaseStrategyConfig) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_service_service_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseStrategyConfig.ProtoReflect.Descriptor instead.
func (*ReleaseStrategyConfig) Descriptor() ([]byte, []int) {
	return file_prodvana_service_service_config_proto_rawDescGZIP(), []int{2}
}

func (x *ReleaseStrategyConfig) GetIndividualStageDeadline() *durationpb.Duration {
	if x != nil {
		return x.IndividualStageDeadline
	}
	return nil
}

func (x *ReleaseStrategyConfig) GetAutomatedTestingDuration() *durationpb.Duration {
	if x != nil {
		return x.AutomatedTestingDuration
	}
	return nil
}

func (x *ReleaseStrategyConfig) GetMetricsAnalysis() []*MetricAnalysis {
	if x != nil {
		return x.MetricsAnalysis
	}
	return nil
}

func (x *ReleaseStrategyConfig) GetManualApproval() bool {
	if x != nil {
		return x.ManualApproval
	}
	return false
}

func (x *ReleaseStrategyConfig) GetCheckInterval() *durationpb.Duration {
	if x != nil {
		return x.CheckInterval
	}
	return nil
}

func (x *ReleaseStrategyConfig) GetFailureThreshold() int32 {
	if x != nil {
		return x.FailureThreshold
	}
	return 0
}

type TLSSecret struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to TlsSecret:
	//
	//	*TLSSecret_RawSecret
	//	*TLSSecret_Secret
	TlsSecret isTLSSecret_TlsSecret `protobuf_oneof:"tls_secret"`
}

func (x *TLSSecret) Reset() {
	*x = TLSSecret{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_service_service_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLSSecret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSSecret) ProtoMessage() {}

func (x *TLSSecret) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_service_service_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSSecret.ProtoReflect.Descriptor instead.
func (*TLSSecret) Descriptor() ([]byte, []int) {
	return file_prodvana_service_service_config_proto_rawDescGZIP(), []int{3}
}

func (m *TLSSecret) GetTlsSecret() isTLSSecret_TlsSecret {
	if m != nil {
		return m.TlsSecret
	}
	return nil
}

func (x *TLSSecret) GetRawSecret() string {
	if x, ok := x.GetTlsSecret().(*TLSSecret_RawSecret); ok {
		return x.RawSecret
	}
	return ""
}

func (x *TLSSecret) GetSecret() *common_config.Secret {
	if x, ok := x.GetTlsSecret().(*TLSSecret_Secret); ok {
		return x.Secret
	}
	return nil
}

type isTLSSecret_TlsSecret interface {
	isTLSSecret_TlsSecret()
}

type TLSSecret_RawSecret struct {
	// Raw secret value to be used for user-editable YAML and RPC calls.
	RawSecret string `protobuf:"bytes,3,opt,name=raw_secret,json=rawSecret,proto3,oneof"`
}

type TLSSecret_Secret struct {
	// Externally stored secret.
	Secret *common_config.Secret `protobuf:"bytes,4,opt,name=secret,proto3,oneof"`
}

func (*TLSSecret_RawSecret) isTLSSecret_TlsSecret() {}

func (*TLSSecret_Secret) isTLSSecret_TlsSecret() {}

type TLSCertificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TlsCert *TLSSecret `protobuf:"bytes,1,opt,name=tls_cert,json=tlsCert,proto3" json:"tls_cert,omitempty"`
	TlsKey  *TLSSecret `protobuf:"bytes,2,opt,name=tls_key,json=tlsKey,proto3" json:"tls_key,omitempty"`
}

func (x *TLSCertificate) Reset() {
	*x = TLSCertificate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_service_service_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLSCertificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSCertificate) ProtoMessage() {}

func (x *TLSCertificate) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_service_service_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSCertificate.ProtoReflect.Descriptor instead.
func (*TLSCertificate) Descriptor() ([]byte, []int) {
	return file_prodvana_service_service_config_proto_rawDescGZIP(), []int{4}
}

func (x *TLSCertificate) GetTlsCert() *TLSSecret {
	if x != nil {
		return x.TlsCert
	}
	return nil
}

func (x *TLSCertificate) GetTlsKey() *TLSSecret {
	if x != nil {
		return x.TlsKey
	}
	return nil
}

type Certificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Certificate:
	//
	//	*Certificate_Tls
	//	*Certificate_AwsAcmCert
	Certificate isCertificate_Certificate `protobuf_oneof:"certificate"`
}

func (x *Certificate) Reset() {
	*x = Certificate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_service_service_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Certificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Certificate) ProtoMessage() {}

func (x *Certificate) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_service_service_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Certificate.ProtoReflect.Descriptor instead.
func (*Certificate) Descriptor() ([]byte, []int) {
	return file_prodvana_service_service_config_proto_rawDescGZIP(), []int{5}
}

func (m *Certificate) GetCertificate() isCertificate_Certificate {
	if m != nil {
		return m.Certificate
	}
	return nil
}

func (x *Certificate) GetTls() *TLSCertificate {
	if x, ok := x.GetCertificate().(*Certificate_Tls); ok {
		return x.Tls
	}
	return nil
}

func (x *Certificate) GetAwsAcmCert() string {
	if x, ok := x.GetCertificate().(*Certificate_AwsAcmCert); ok {
		return x.AwsAcmCert
	}
	return ""
}

type isCertificate_Certificate interface {
	isCertificate_Certificate()
}

type Certificate_Tls struct {
	Tls *TLSCertificate `protobuf:"bytes,1,opt,name=tls,proto3,oneof"`
}

type Certificate_AwsAcmCert struct {
	AwsAcmCert string `protobuf:"bytes,2,opt,name=aws_acm_cert,json=awsAcmCert,proto3,oneof"`
}

func (*Certificate_Tls) isCertificate_Certificate() {}

func (*Certificate_AwsAcmCert) isCertificate_Certificate() {}

type PerReleaseChannelConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReleaseChannel  string                                          `protobuf:"bytes,1,opt,name=release_channel,json=releaseChannel,proto3" json:"release_channel,omitempty"`
	CustomHostnames []string                                        `protobuf:"bytes,2,rep,name=custom_hostnames,json=customHostnames,proto3" json:"custom_hostnames,omitempty"`
	Programs        []*common_config.PerReleaseChannelProgramConfig `protobuf:"bytes,5,rep,name=programs,proto3" json:"programs,omitempty"`
	Cert            *Certificate                                    `protobuf:"bytes,6,opt,name=cert,proto3" json:"cert,omitempty"`
	DeliveryConfig  *delivery.DeliveryConfig                        `protobuf:"bytes,7,opt,name=delivery_config,json=deliveryConfig,proto3" json:"delivery_config,omitempty"`
	Volumes         []*volumes.Volume                               `protobuf:"bytes,8,rep,name=volumes,proto3" json:"volumes,omitempty"`
	Replicas        *ReplicasConfig                                 `protobuf:"bytes,9,opt,name=replicas,proto3" json:"replicas,omitempty"`
	PrePushTasks    []*TaskConfig                                   `protobuf:"bytes,10,rep,name=pre_push_tasks,json=prePushTasks,proto3" json:"pre_push_tasks,omitempty"`
	RuntimeSpecific *RuntimeSpecificConfig                          `protobuf:"bytes,11,opt,name=runtime_specific,json=runtimeSpecific,proto3" json:"runtime_specific,omitempty"`
	// Types that are assignable to ConfigOneof:
	//
	//	*PerReleaseChannelConfig_GenericRuntime
	//	*PerReleaseChannelConfig_KubernetesConfig
	//	*PerReleaseChannelConfig_ExternalConfig
	//	*PerReleaseChannelConfig_Helm
	ConfigOneof isPerReleaseChannelConfig_ConfigOneof `protobuf_oneof:"config_oneof"`
}

func (x *PerReleaseChannelConfig) Reset() {
	*x = PerReleaseChannelConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_service_service_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerReleaseChannelConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerReleaseChannelConfig) ProtoMessage() {}

func (x *PerReleaseChannelConfig) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_service_service_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerReleaseChannelConfig.ProtoReflect.Descriptor instead.
func (*PerReleaseChannelConfig) Descriptor() ([]byte, []int) {
	return file_prodvana_service_service_config_proto_rawDescGZIP(), []int{6}
}

func (x *PerReleaseChannelConfig) GetReleaseChannel() string {
	if x != nil {
		return x.ReleaseChannel
	}
	return ""
}

func (x *PerReleaseChannelConfig) GetCustomHostnames() []string {
	if x != nil {
		return x.CustomHostnames
	}
	return nil
}

func (x *PerReleaseChannelConfig) GetPrograms() []*common_config.PerReleaseChannelProgramConfig {
	if x != nil {
		return x.Programs
	}
	return nil
}

func (x *PerReleaseChannelConfig) GetCert() *Certificate {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *PerReleaseChannelConfig) GetDeliveryConfig() *delivery.DeliveryConfig {
	if x != nil {
		return x.DeliveryConfig
	}
	return nil
}

func (x *PerReleaseChannelConfig) GetVolumes() []*volumes.Volume {
	if x != nil {
		return x.Volumes
	}
	return nil
}

func (x *PerReleaseChannelConfig) GetReplicas() *ReplicasConfig {
	if x != nil {
		return x.Replicas
	}
	return nil
}

func (x *PerReleaseChannelConfig) GetPrePushTasks() []*TaskConfig {
	if x != nil {
		return x.PrePushTasks
	}
	return nil
}

func (x *PerReleaseChannelConfig) GetRuntimeSpecific() *RuntimeSpecificConfig {
	if x != nil {
		return x.RuntimeSpecific
	}
	return nil
}

func (m *PerReleaseChannelConfig) GetConfigOneof() isPerReleaseChannelConfig_ConfigOneof {
	if m != nil {
		return m.ConfigOneof
	}
	return nil
}

func (x *PerReleaseChannelConfig) GetGenericRuntime() *GenericRuntimeConfig {
	if x, ok := x.GetConfigOneof().(*PerReleaseChannelConfig_GenericRuntime); ok {
		return x.GenericRuntime
	}
	return nil
}

func (x *PerReleaseChannelConfig) GetKubernetesConfig() *common_config.KubernetesConfig {
	if x, ok := x.GetConfigOneof().(*PerReleaseChannelConfig_KubernetesConfig); ok {
		return x.KubernetesConfig
	}
	return nil
}

func (x *PerReleaseChannelConfig) GetExternalConfig() *common_config.KubernetesConfig {
	if x, ok := x.GetConfigOneof().(*PerReleaseChannelConfig_ExternalConfig); ok {
		return x.ExternalConfig
	}
	return nil
}

func (x *PerReleaseChannelConfig) GetHelm() *common_config.HelmConfig {
	if x, ok := x.GetConfigOneof().(*PerReleaseChannelConfig_Helm); ok {
		return x.Helm
	}
	return nil
}

type isPerReleaseChannelConfig_ConfigOneof interface {
	isPerReleaseChannelConfig_ConfigOneof()
}

type PerReleaseChannelConfig_GenericRuntime struct {
	GenericRuntime *GenericRuntimeConfig `protobuf:"bytes,13,opt,name=generic_runtime,json=genericRuntime,proto3,oneof"`
}

type PerReleaseChannelConfig_KubernetesConfig struct {
	KubernetesConfig *common_config.KubernetesConfig `protobuf:"bytes,14,opt,name=kubernetes_config,json=kubernetesConfig,proto3,oneof"`
}

type PerReleaseChannelConfig_ExternalConfig struct {
	// deprecated, pass this as kubernetes_config instead
	ExternalConfig *common_config.KubernetesConfig `protobuf:"bytes,16,opt,name=external_config,json=externalConfig,proto3,oneof"`
}

type PerReleaseChannelConfig_Helm struct {
	Helm *common_config.HelmConfig `protobuf:"bytes,15,opt,name=helm,proto3,oneof"`
}

func (*PerReleaseChannelConfig_GenericRuntime) isPerReleaseChannelConfig_ConfigOneof() {}

func (*PerReleaseChannelConfig_KubernetesConfig) isPerReleaseChannelConfig_ConfigOneof() {}

func (*PerReleaseChannelConfig_ExternalConfig) isPerReleaseChannelConfig_ConfigOneof() {}

func (*PerReleaseChannelConfig_Helm) isPerReleaseChannelConfig_ConfigOneof() {}

type CapabilityReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CapabilityReference) Reset() {
	*x = CapabilityReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_service_service_config_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapabilityReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapabilityReference) ProtoMessage() {}

func (x *CapabilityReference) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_service_service_config_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapabilityReference.ProtoReflect.Descriptor instead.
func (*CapabilityReference) Descriptor() ([]byte, []int) {
	return file_prodvana_service_service_config_proto_rawDescGZIP(), []int{7}
}

func (x *CapabilityReference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CompiledCapabilityConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Capability *capability.CapabilityConfig `protobuf:"bytes,1,opt,name=capability,proto3" json:"capability,omitempty"`
}

func (x *CompiledCapabilityConfig) Reset() {
	*x = CompiledCapabilityConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_service_service_config_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompiledCapabilityConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompiledCapabilityConfig) ProtoMessage() {}

func (x *CompiledCapabilityConfig) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_service_service_config_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompiledCapabilityConfig.ProtoReflect.Descriptor instead.
func (*CompiledCapabilityConfig) Descriptor() ([]byte, []int) {
	return file_prodvana_service_service_config_proto_rawDescGZIP(), []int{8}
}

func (x *CompiledCapabilityConfig) GetCapability() *capability.CapabilityConfig {
	if x != nil {
		return x.Capability
	}
	return nil
}

type ProgramReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Ref:
	//
	//	*ProgramReference_Name
	Ref isProgramReference_Ref `protobuf_oneof:"ref"`
}

func (x *ProgramReference) Reset() {
	*x = ProgramReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_service_service_config_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProgramReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProgramReference) ProtoMessage() {}

func (x *ProgramReference) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_service_service_config_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProgramReference.ProtoReflect.Descriptor instead.
func (*ProgramReference) Descriptor() ([]byte, []int) {
	return file_prodvana_service_service_config_proto_rawDescGZIP(), []int{9}
}

func (m *ProgramReference) GetRef() isProgramReference_Ref {
	if m != nil {
		return m.Ref
	}
	return nil
}

func (x *ProgramReference) GetName() string {
	if x, ok := x.GetRef().(*ProgramReference_Name); ok {
		return x.Name
	}
	return ""
}

type isProgramReference_Ref interface {
	isProgramReference_Ref()
}

type ProgramReference_Name struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3,oneof"`
}

func (*ProgramReference_Name) isProgramReference_Ref() {}

type TaskReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Ref:
	//
	//	*TaskReference_ReleaseChannel
	Ref isTaskReference_Ref `protobuf_oneof:"ref"`
}

func (x *TaskReference) Reset() {
	*x = TaskReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_service_service_config_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskReference) ProtoMessage() {}

func (x *TaskReference) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_service_service_config_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskReference.ProtoReflect.Descriptor instead.
func (*TaskReference) Descriptor() ([]byte, []int) {
	return file_prodvana_service_service_config_proto_rawDescGZIP(), []int{10}
}

func (m *TaskReference) GetRef() isTaskReference_Ref {
	if m != nil {
		return m.Ref
	}
	return nil
}

func (x *TaskReference) GetReleaseChannel() string {
	if x, ok := x.GetRef().(*TaskReference_ReleaseChannel); ok {
		return x.ReleaseChannel
	}
	return ""
}

type isTaskReference_Ref interface {
	isTaskReference_Ref()
}

type TaskReference_ReleaseChannel struct {
	ReleaseChannel string `protobuf:"bytes,1,opt,name=release_channel,json=releaseChannel,proto3,oneof"`
}

func (*TaskReference_ReleaseChannel) isTaskReference_Ref() {}

type TaskConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Program *common_config.ProgramConfig `protobuf:"bytes,1,opt,name=program,proto3" json:"program,omitempty"`
	// optional base program to take configs from. If specified, `program` field will act
	// like an override instead.
	BaseProgram *ProgramReference `protobuf:"bytes,2,opt,name=base_program,json=baseProgram,proto3" json:"base_program,omitempty"`
	// if not set, the task will not be retried once it starts executing once.
	RetryConfig *common_config.RetryConfig `protobuf:"bytes,3,opt,name=retry_config,json=retryConfig,proto3" json:"retry_config,omitempty"`
	// Instead of defining a new task, reference an existing custom task and use that. This is meant
	// to be used in conjunection with per_release_channel to allow multiple release channels to use
	// a single custom task. If set, the program definition is ignored except for program name.
	Ref *TaskReference `protobuf:"bytes,4,opt,name=ref,proto3" json:"ref,omitempty"`
}

func (x *TaskConfig) Reset() {
	*x = TaskConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_service_service_config_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskConfig) ProtoMessage() {}

func (x *TaskConfig) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_service_service_config_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskConfig.ProtoReflect.Descriptor instead.
func (*TaskConfig) Descriptor() ([]byte, []int) {
	return file_prodvana_service_service_config_proto_rawDescGZIP(), []int{11}
}

func (x *TaskConfig) GetProgram() *common_config.ProgramConfig {
	if x != nil {
		return x.Program
	}
	return nil
}

func (x *TaskConfig) GetBaseProgram() *ProgramReference {
	if x != nil {
		return x.BaseProgram
	}
	return nil
}

func (x *TaskConfig) GetRetryConfig() *common_config.RetryConfig {
	if x != nil {
		return x.RetryConfig
	}
	return nil
}

func (x *TaskConfig) GetRef() *TaskReference {
	if x != nil {
		return x.Ref
	}
	return nil
}

// RuntimeSpecificConfig contains Service level configuration options that only make sense for a
// specific Runtime type. Configuration added here should only apply to a single Service; if the
// Runtime specific configuration relates to all services, it should be configured as at the
// Runtime cluster level (or as a runtime extension).
type RuntimeSpecificConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to RuntimeConfig:
	//
	//	*RuntimeSpecificConfig_K8S
	RuntimeConfig isRuntimeSpecificConfig_RuntimeConfig `protobuf_oneof:"runtime_config"`
}

func (x *RuntimeSpecificConfig) Reset() {
	*x = RuntimeSpecificConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_service_service_config_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuntimeSpecificConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeSpecificConfig) ProtoMessage() {}

func (x *RuntimeSpecificConfig) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_service_service_config_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeSpecificConfig.ProtoReflect.Descriptor instead.
func (*RuntimeSpecificConfig) Descriptor() ([]byte, []int) {
	return file_prodvana_service_service_config_proto_rawDescGZIP(), []int{12}
}

func (m *RuntimeSpecificConfig) GetRuntimeConfig() isRuntimeSpecificConfig_RuntimeConfig {
	if m != nil {
		return m.RuntimeConfig
	}
	return nil
}

func (x *RuntimeSpecificConfig) GetK8S() *RuntimeSpecificConfig_K8SConfig {
	if x, ok := x.GetRuntimeConfig().(*RuntimeSpecificConfig_K8S); ok {
		return x.K8S
	}
	return nil
}

type isRuntimeSpecificConfig_RuntimeConfig interface {
	isRuntimeSpecificConfig_RuntimeConfig()
}

type RuntimeSpecificConfig_K8S struct {
	K8S *RuntimeSpecificConfig_K8SConfig `protobuf:"bytes,1,opt,name=k8s,proto3,oneof"`
}

func (*RuntimeSpecificConfig_K8S) isRuntimeSpecificConfig_RuntimeConfig() {}

type GenericRuntimeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuntimeConnection string                          `protobuf:"bytes,1,opt,name=runtime_connection,json=runtimeConnection,proto3" json:"runtime_connection,omitempty"`
	ParameterValues   []*common_config.ParameterValue `protobuf:"bytes,2,rep,name=parameter_values,json=parameterValues,proto3" json:"parameter_values,omitempty"`
}

func (x *GenericRuntimeConfig) Reset() {
	*x = GenericRuntimeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_service_service_config_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenericRuntimeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericRuntimeConfig) ProtoMessage() {}

func (x *GenericRuntimeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_service_service_config_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericRuntimeConfig.ProtoReflect.Descriptor instead.
func (*GenericRuntimeConfig) Descriptor() ([]byte, []int) {
	return file_prodvana_service_service_config_proto_rawDescGZIP(), []int{13}
}

func (x *GenericRuntimeConfig) GetRuntimeConnection() string {
	if x != nil {
		return x.RuntimeConnection
	}
	return ""
}

func (x *GenericRuntimeConfig) GetParameterValues() []*common_config.ParameterValue {
	if x != nil {
		return x.ParameterValues
	}
	return nil
}

type AutoRollbackConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Disabled bool `protobuf:"varint,1,opt,name=disabled,proto3" json:"disabled,omitempty"`
}

func (x *AutoRollbackConfig) Reset() {
	*x = AutoRollbackConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_service_service_config_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoRollbackConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoRollbackConfig) ProtoMessage() {}

func (x *AutoRollbackConfig) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_service_service_config_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoRollbackConfig.ProtoReflect.Descriptor instead.
func (*AutoRollbackConfig) Descriptor() ([]byte, []int) {
	return file_prodvana_service_service_config_proto_rawDescGZIP(), []int{14}
}

func (x *AutoRollbackConfig) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

type ProtectionConvergenceAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string                            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // optional, default to protection name
	Ref       *protection.ProtectionReference   `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
	Lifecycle []*protection.ProtectionLifecycle `protobuf:"bytes,3,rep,name=lifecycle,proto3" json:"lifecycle,omitempty"`
}

func (x *ProtectionConvergenceAttachment) Reset() {
	*x = ProtectionConvergenceAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_service_service_config_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtectionConvergenceAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtectionConvergenceAttachment) ProtoMessage() {}

func (x *ProtectionConvergenceAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_service_service_config_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtectionConvergenceAttachment.ProtoReflect.Descriptor instead.
func (*ProtectionConvergenceAttachment) Descriptor() ([]byte, []int) {
	return file_prodvana_service_service_config_proto_rawDescGZIP(), []int{15}
}

func (x *ProtectionConvergenceAttachment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProtectionConvergenceAttachment) GetRef() *protection.ProtectionReference {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (x *ProtectionConvergenceAttachment) GetLifecycle() []*protection.ProtectionLifecycle {
	if x != nil {
		return x.Lifecycle
	}
	return nil
}

type ServiceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string                               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Application       string                               `protobuf:"bytes,20,opt,name=application,proto3" json:"application,omitempty"`
	Programs          []*common_config.ProgramConfig       `protobuf:"bytes,2,rep,name=programs,proto3" json:"programs,omitempty"`
	Replicas          *ReplicasConfig                      `protobuf:"bytes,4,opt,name=replicas,proto3" json:"replicas,omitempty"`
	ReleaseStrategy   *ReleaseStrategyConfig               `protobuf:"bytes,5,opt,name=release_strategy,json=releaseStrategy,proto3" json:"release_strategy,omitempty"`
	PerReleaseChannel []*PerReleaseChannelConfig           `protobuf:"bytes,9,rep,name=per_release_channel,json=perReleaseChannel,proto3" json:"per_release_channel,omitempty"`
	Capabilities      []*CapabilityReference               `protobuf:"bytes,10,rep,name=capabilities,proto3" json:"capabilities,omitempty"`
	DeliveryConfig    *delivery.DeliveryConfig             `protobuf:"bytes,11,opt,name=delivery_config,json=deliveryConfig,proto3" json:"delivery_config,omitempty"`
	Volumes           []*volumes.Volume                    `protobuf:"bytes,12,rep,name=volumes,proto3" json:"volumes,omitempty"`
	DeployAnnotations *workflow.AnnotationsConfig          `protobuf:"bytes,13,opt,name=deploy_annotations,json=deployAnnotations,proto3" json:"deploy_annotations,omitempty"`
	BaseTemplate      *common_config.ServiceTemplateRef    `protobuf:"bytes,14,opt,name=base_template,json=baseTemplate,proto3" json:"base_template,omitempty"`
	PrePushTasks      []*TaskConfig                        `protobuf:"bytes,15,rep,name=pre_push_tasks,json=prePushTasks,proto3" json:"pre_push_tasks,omitempty"`
	RuntimeSpecific   *RuntimeSpecificConfig               `protobuf:"bytes,16,opt,name=runtime_specific,json=runtimeSpecific,proto3" json:"runtime_specific,omitempty"`
	Parameters        []*common_config.ParameterDefinition `protobuf:"bytes,21,rep,name=parameters,proto3" json:"parameters,omitempty"`
	// only valid to set in compiled configs by Prodvana
	ParameterValues *ServiceParameterValues `protobuf:"bytes,22,opt,name=parameter_values,json=parameterValues,proto3" json:"parameter_values,omitempty"`
	// how long to wait before marking deployment as failed
	ProgressDeadline *durationpb.Duration `protobuf:"bytes,24,opt,name=progress_deadline,json=progressDeadline,proto3" json:"progress_deadline,omitempty"`
	// Types that are assignable to ConfigOneof:
	//
	//	*ServiceConfig_GenericRuntime
	//	*ServiceConfig_KubernetesConfig
	//	*ServiceConfig_ExternalConfig
	//	*ServiceConfig_Helm
	ConfigOneof isServiceConfig_ConfigOneof `protobuf_oneof:"config_oneof"`
	// How to autogenerate parameters, defaults to IMAGE
	ParametersAutogen ServiceConfig_ParametersAutogen `protobuf:"varint,23,opt,name=parameters_autogen,json=parametersAutogen,proto3,enum=prodvana.service.ServiceConfig_ParametersAutogen" json:"parameters_autogen,omitempty"`
	AutoRollback      *AutoRollbackConfig             `protobuf:"bytes,25,opt,name=auto_rollback,json=autoRollback,proto3" json:"auto_rollback,omitempty"`
}

func (x *ServiceConfig) Reset() {
	*x = ServiceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_service_service_config_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceConfig) ProtoMessage() {}

func (x *ServiceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_service_service_config_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceConfig.ProtoReflect.Descriptor instead.
func (*ServiceConfig) Descriptor() ([]byte, []int) {
	return file_prodvana_service_service_config_proto_rawDescGZIP(), []int{16}
}

func (x *ServiceConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServiceConfig) GetApplication() string {
	if x != nil {
		return x.Application
	}
	return ""
}

func (x *ServiceConfig) GetPrograms() []*common_config.ProgramConfig {
	if x != nil {
		return x.Programs
	}
	return nil
}

func (x *ServiceConfig) GetReplicas() *ReplicasConfig {
	if x != nil {
		return x.Replicas
	}
	return nil
}

func (x *ServiceConfig) GetReleaseStrategy() *ReleaseStrategyConfig {
	if x != nil {
		return x.ReleaseStrategy
	}
	return nil
}

func (x *ServiceConfig) GetPerReleaseChannel() []*PerReleaseChannelConfig {
	if x != nil {
		return x.PerReleaseChannel
	}
	return nil
}

func (x *ServiceConfig) GetCapabilities() []*CapabilityReference {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

func (x *ServiceConfig) GetDeliveryConfig() *delivery.DeliveryConfig {
	if x != nil {
		return x.DeliveryConfig
	}
	return nil
}

func (x *ServiceConfig) GetVolumes() []*volumes.Volume {
	if x != nil {
		return x.Volumes
	}
	return nil
}

func (x *ServiceConfig) GetDeployAnnotations() *workflow.AnnotationsConfig {
	if x != nil {
		return x.DeployAnnotations
	}
	return nil
}

func (x *ServiceConfig) GetBaseTemplate() *common_config.ServiceTemplateRef {
	if x != nil {
		return x.BaseTemplate
	}
	return nil
}

func (x *ServiceConfig) GetPrePushTasks() []*TaskConfig {
	if x != nil {
		return x.PrePushTasks
	}
	return nil
}

func (x *ServiceConfig) GetRuntimeSpecific() *RuntimeSpecificConfig {
	if x != nil {
		return x.RuntimeSpecific
	}
	return nil
}

func (x *ServiceConfig) GetParameters() []*common_config.ParameterDefinition {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *ServiceConfig) GetParameterValues() *ServiceParameterValues {
	if x != nil {
		return x.ParameterValues
	}
	return nil
}

func (x *ServiceConfig) GetProgressDeadline() *durationpb.Duration {
	if x != nil {
		return x.ProgressDeadline
	}
	return nil
}

func (m *ServiceConfig) GetConfigOneof() isServiceConfig_ConfigOneof {
	if m != nil {
		return m.ConfigOneof
	}
	return nil
}

func (x *ServiceConfig) GetGenericRuntime() *GenericRuntimeConfig {
	if x, ok := x.GetConfigOneof().(*ServiceConfig_GenericRuntime); ok {
		return x.GenericRuntime
	}
	return nil
}

func (x *ServiceConfig) GetKubernetesConfig() *common_config.KubernetesConfig {
	if x, ok := x.GetConfigOneof().(*ServiceConfig_KubernetesConfig); ok {
		return x.KubernetesConfig
	}
	return nil
}

func (x *ServiceConfig) GetExternalConfig() *common_config.KubernetesConfig {
	if x, ok := x.GetConfigOneof().(*ServiceConfig_ExternalConfig); ok {
		return x.ExternalConfig
	}
	return nil
}

func (x *ServiceConfig) GetHelm() *common_config.HelmConfig {
	if x, ok := x.GetConfigOneof().(*ServiceConfig_Helm); ok {
		return x.Helm
	}
	return nil
}

func (x *ServiceConfig) GetParametersAutogen() ServiceConfig_ParametersAutogen {
	if x != nil {
		return x.ParametersAutogen
	}
	return ServiceConfig_UNKNOWN
}

func (x *ServiceConfig) GetAutoRollback() *AutoRollbackConfig {
	if x != nil {
		return x.AutoRollback
	}
	return nil
}

type isServiceConfig_ConfigOneof interface {
	isServiceConfig_ConfigOneof()
}

type ServiceConfig_GenericRuntime struct {
	GenericRuntime *GenericRuntimeConfig `protobuf:"bytes,18,opt,name=generic_runtime,json=genericRuntime,proto3,oneof"`
}

type ServiceConfig_KubernetesConfig struct {
	KubernetesConfig *common_config.KubernetesConfig `protobuf:"bytes,19,opt,name=kubernetes_config,json=kubernetesConfig,proto3,oneof"`
}

type ServiceConfig_ExternalConfig struct {
	// deprecated, pass this as kubernetes_config instead
	ExternalConfig *common_config.KubernetesConfig `protobuf:"bytes,27,opt,name=external_config,json=externalConfig,proto3,oneof"`
}

type ServiceConfig_Helm struct {
	Helm *common_config.HelmConfig `protobuf:"bytes,26,opt,name=helm,proto3,oneof"`
}

func (*ServiceConfig_GenericRuntime) isServiceConfig_ConfigOneof() {}

func (*ServiceConfig_KubernetesConfig) isServiceConfig_ConfigOneof() {}

func (*ServiceConfig_ExternalConfig) isServiceConfig_ConfigOneof() {}

func (*ServiceConfig_Helm) isServiceConfig_ConfigOneof() {}

// a compiled version of ServiceConfig specific to a service instance, with release-channel configs applied
type CompiledServiceInstanceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Service           string                                       `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Application       string                                       `protobuf:"bytes,18,opt,name=application,proto3" json:"application,omitempty"`
	ReleaseChannel    string                                       `protobuf:"bytes,2,opt,name=release_channel,json=releaseChannel,proto3" json:"release_channel,omitempty"`
	Programs          []*common_config.ProgramConfig               `protobuf:"bytes,3,rep,name=programs,proto3" json:"programs,omitempty"`
	Replicas          *ReplicasConfig                              `protobuf:"bytes,4,opt,name=replicas,proto3" json:"replicas,omitempty"`
	Maturity          common_config.Maturity                       `protobuf:"varint,5,opt,name=maturity,proto3,enum=prodvana.common_config.Maturity" json:"maturity,omitempty"`
	ReleaseStrategy   *ReleaseStrategyConfig                       `protobuf:"bytes,6,opt,name=release_strategy,json=releaseStrategy,proto3" json:"release_strategy,omitempty"`
	CustomHostnames   []string                                     `protobuf:"bytes,7,rep,name=custom_hostnames,json=customHostnames,proto3" json:"custom_hostnames,omitempty"`
	Cert              *Certificate                                 `protobuf:"bytes,10,opt,name=cert,proto3" json:"cert,omitempty"`
	Runtime           *release_channel.ReleaseChannelRuntimeConfig `protobuf:"bytes,11,opt,name=runtime,proto3" json:"runtime,omitempty"`
	RuntimeExecution  *runtimes.RuntimeExecutionConfig             `protobuf:"bytes,27,opt,name=runtime_execution,json=runtimeExecution,proto3" json:"runtime_execution,omitempty"`
	Capabilities      []*CompiledCapabilityConfig                  `protobuf:"bytes,12,rep,name=capabilities,proto3" json:"capabilities,omitempty"`
	DeliveryConfig    *delivery.DeliveryConfig                     `protobuf:"bytes,13,opt,name=delivery_config,json=deliveryConfig,proto3" json:"delivery_config,omitempty"`
	Volumes           []*volumes.Volume                            `protobuf:"bytes,14,rep,name=volumes,proto3" json:"volumes,omitempty"`
	DeployAnnotations *workflow.AnnotationsConfig                  `protobuf:"bytes,15,opt,name=deploy_annotations,json=deployAnnotations,proto3" json:"deploy_annotations,omitempty"`
	BaseTemplate      *common_config.ServiceTemplateRef            `protobuf:"bytes,16,opt,name=base_template,json=baseTemplate,proto3" json:"base_template,omitempty"`
	PrePushTasks      []*TaskConfig                                `protobuf:"bytes,17,rep,name=pre_push_tasks,json=prePushTasks,proto3" json:"pre_push_tasks,omitempty"`
	RuntimeSpecific   *RuntimeSpecificConfig                       `protobuf:"bytes,19,opt,name=runtime_specific,json=runtimeSpecific,proto3" json:"runtime_specific,omitempty"`
	Parameters        []*common_config.ParameterDefinition         `protobuf:"bytes,24,rep,name=parameters,proto3" json:"parameters,omitempty"`
	ParameterValues   []*common_config.ParameterValue              `protobuf:"bytes,25,rep,name=parameter_values,json=parameterValues,proto3" json:"parameter_values,omitempty"`
	// how long to wait before marking deployment as failed
	ProgressDeadline *durationpb.Duration `protobuf:"bytes,26,opt,name=progress_deadline,json=progressDeadline,proto3" json:"progress_deadline,omitempty"`
	// Types that are assignable to ConfigOneof:
	//
	//	*CompiledServiceInstanceConfig_GenericRuntime
	//	*CompiledServiceInstanceConfig_KubernetesConfig
	//	*CompiledServiceInstanceConfig_Helm
	ConfigOneof isCompiledServiceInstanceConfig_ConfigOneof `protobuf_oneof:"config_oneof"`
	// The compiled environment for this instance's context, e.g.  Release Channel.
	// This is used to inject these values into external configs.
	Env map[string]*common_config.EnvValue `protobuf:"bytes,28,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CompiledServiceInstanceConfig) Reset() {
	*x = CompiledServiceInstanceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_service_service_config_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompiledServiceInstanceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompiledServiceInstanceConfig) ProtoMessage() {}

func (x *CompiledServiceInstanceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_service_service_config_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompiledServiceInstanceConfig.ProtoReflect.Descriptor instead.
func (*CompiledServiceInstanceConfig) Descriptor() ([]byte, []int) {
	return file_prodvana_service_service_config_proto_rawDescGZIP(), []int{17}
}

func (x *CompiledServiceInstanceConfig) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *CompiledServiceInstanceConfig) GetApplication() string {
	if x != nil {
		return x.Application
	}
	return ""
}

func (x *CompiledServiceInstanceConfig) GetReleaseChannel() string {
	if x != nil {
		return x.ReleaseChannel
	}
	return ""
}

func (x *CompiledServiceInstanceConfig) GetPrograms() []*common_config.ProgramConfig {
	if x != nil {
		return x.Programs
	}
	return nil
}

func (x *CompiledServiceInstanceConfig) GetReplicas() *ReplicasConfig {
	if x != nil {
		return x.Replicas
	}
	return nil
}

func (x *CompiledServiceInstanceConfig) GetMaturity() common_config.Maturity {
	if x != nil {
		return x.Maturity
	}
	return common_config.Maturity(0)
}

func (x *CompiledServiceInstanceConfig) GetReleaseStrategy() *ReleaseStrategyConfig {
	if x != nil {
		return x.ReleaseStrategy
	}
	return nil
}

func (x *CompiledServiceInstanceConfig) GetCustomHostnames() []string {
	if x != nil {
		return x.CustomHostnames
	}
	return nil
}

func (x *CompiledServiceInstanceConfig) GetCert() *Certificate {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *CompiledServiceInstanceConfig) GetRuntime() *release_channel.ReleaseChannelRuntimeConfig {
	if x != nil {
		return x.Runtime
	}
	return nil
}

func (x *CompiledServiceInstanceConfig) GetRuntimeExecution() *runtimes.RuntimeExecutionConfig {
	if x != nil {
		return x.RuntimeExecution
	}
	return nil
}

func (x *CompiledServiceInstanceConfig) GetCapabilities() []*CompiledCapabilityConfig {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

func (x *CompiledServiceInstanceConfig) GetDeliveryConfig() *delivery.DeliveryConfig {
	if x != nil {
		return x.DeliveryConfig
	}
	return nil
}

func (x *CompiledServiceInstanceConfig) GetVolumes() []*volumes.Volume {
	if x != nil {
		return x.Volumes
	}
	return nil
}

func (x *CompiledServiceInstanceConfig) GetDeployAnnotations() *workflow.AnnotationsConfig {
	if x != nil {
		return x.DeployAnnotations
	}
	return nil
}

func (x *CompiledServiceInstanceConfig) GetBaseTemplate() *common_config.ServiceTemplateRef {
	if x != nil {
		return x.BaseTemplate
	}
	return nil
}

func (x *CompiledServiceInstanceConfig) GetPrePushTasks() []*TaskConfig {
	if x != nil {
		return x.PrePushTasks
	}
	return nil
}

func (x *CompiledServiceInstanceConfig) GetRuntimeSpecific() *RuntimeSpecificConfig {
	if x != nil {
		return x.RuntimeSpecific
	}
	return nil
}

func (x *CompiledServiceInstanceConfig) GetParameters() []*common_config.ParameterDefinition {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *CompiledServiceInstanceConfig) GetParameterValues() []*common_config.ParameterValue {
	if x != nil {
		return x.ParameterValues
	}
	return nil
}

func (x *CompiledServiceInstanceConfig) GetProgressDeadline() *durationpb.Duration {
	if x != nil {
		return x.ProgressDeadline
	}
	return nil
}

func (m *CompiledServiceInstanceConfig) GetConfigOneof() isCompiledServiceInstanceConfig_ConfigOneof {
	if m != nil {
		return m.ConfigOneof
	}
	return nil
}

func (x *CompiledServiceInstanceConfig) GetGenericRuntime() *GenericRuntimeConfig {
	if x, ok := x.GetConfigOneof().(*CompiledServiceInstanceConfig_GenericRuntime); ok {
		return x.GenericRuntime
	}
	return nil
}

func (x *CompiledServiceInstanceConfig) GetKubernetesConfig() *common_config.KubernetesConfig {
	if x, ok := x.GetConfigOneof().(*CompiledServiceInstanceConfig_KubernetesConfig); ok {
		return x.KubernetesConfig
	}
	return nil
}

func (x *CompiledServiceInstanceConfig) GetHelm() *common_config.HelmConfig {
	if x, ok := x.GetConfigOneof().(*CompiledServiceInstanceConfig_Helm); ok {
		return x.Helm
	}
	return nil
}

func (x *CompiledServiceInstanceConfig) GetEnv() map[string]*common_config.EnvValue {
	if x != nil {
		return x.Env
	}
	return nil
}

type isCompiledServiceInstanceConfig_ConfigOneof interface {
	isCompiledServiceInstanceConfig_ConfigOneof()
}

type CompiledServiceInstanceConfig_GenericRuntime struct {
	GenericRuntime *GenericRuntimeConfig `protobuf:"bytes,22,opt,name=generic_runtime,json=genericRuntime,proto3,oneof"`
}

type CompiledServiceInstanceConfig_KubernetesConfig struct {
	KubernetesConfig *common_config.KubernetesConfig `protobuf:"bytes,23,opt,name=kubernetes_config,json=kubernetesConfig,proto3,oneof"`
}

type CompiledServiceInstanceConfig_Helm struct {
	Helm *common_config.HelmConfig `protobuf:"bytes,29,opt,name=helm,proto3,oneof"`
}

func (*CompiledServiceInstanceConfig_GenericRuntime) isCompiledServiceInstanceConfig_ConfigOneof() {}

func (*CompiledServiceInstanceConfig_KubernetesConfig) isCompiledServiceInstanceConfig_ConfigOneof() {
}

func (*CompiledServiceInstanceConfig_Helm) isCompiledServiceInstanceConfig_ConfigOneof() {}

type CompiledJobConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NamePrefix       string                                       `protobuf:"bytes,1,opt,name=name_prefix,json=namePrefix,proto3" json:"name_prefix,omitempty"`
	ReleaseChannel   string                                       `protobuf:"bytes,2,opt,name=release_channel,json=releaseChannel,proto3" json:"release_channel,omitempty"`
	Programs         []*common_config.ProgramConfig               `protobuf:"bytes,3,rep,name=programs,proto3" json:"programs,omitempty"`
	Runtime          *release_channel.ReleaseChannelRuntimeConfig `protobuf:"bytes,4,opt,name=runtime,proto3" json:"runtime,omitempty"`
	RuntimeExecution *runtimes.RuntimeExecutionConfig             `protobuf:"bytes,5,opt,name=runtime_execution,json=runtimeExecution,proto3" json:"runtime_execution,omitempty"`
}

func (x *CompiledJobConfig) Reset() {
	*x = CompiledJobConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_service_service_config_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompiledJobConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompiledJobConfig) ProtoMessage() {}

func (x *CompiledJobConfig) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_service_service_config_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompiledJobConfig.ProtoReflect.Descriptor instead.
func (*CompiledJobConfig) Descriptor() ([]byte, []int) {
	return file_prodvana_service_service_config_proto_rawDescGZIP(), []int{18}
}

func (x *CompiledJobConfig) GetNamePrefix() string {
	if x != nil {
		return x.NamePrefix
	}
	return ""
}

func (x *CompiledJobConfig) GetReleaseChannel() string {
	if x != nil {
		return x.ReleaseChannel
	}
	return ""
}

func (x *CompiledJobConfig) GetPrograms() []*common_config.ProgramConfig {
	if x != nil {
		return x.Programs
	}
	return nil
}

func (x *CompiledJobConfig) GetRuntime() *release_channel.ReleaseChannelRuntimeConfig {
	if x != nil {
		return x.Runtime
	}
	return nil
}

func (x *CompiledJobConfig) GetRuntimeExecution() *runtimes.RuntimeExecutionConfig {
	if x != nil {
		return x.RuntimeExecution
	}
	return nil
}

type MetricAnalysis_SuccessRateConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinThresholdPercent float64 `protobuf:"fixed64,1,opt,name=min_threshold_percent,json=minThresholdPercent,proto3" json:"min_threshold_percent,omitempty"`
}

func (x *MetricAnalysis_SuccessRateConfig) Reset() {
	*x = MetricAnalysis_SuccessRateConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_service_service_config_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricAnalysis_SuccessRateConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricAnalysis_SuccessRateConfig) ProtoMessage() {}

func (x *MetricAnalysis_SuccessRateConfig) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_service_service_config_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricAnalysis_SuccessRateConfig.ProtoReflect.Descriptor instead.
func (*MetricAnalysis_SuccessRateConfig) Descriptor() ([]byte, []int) {
	return file_prodvana_service_service_config_proto_rawDescGZIP(), []int{1, 0}
}

func (x *MetricAnalysis_SuccessRateConfig) GetMinThresholdPercent() float64 {
	if x != nil {
		return x.MinThresholdPercent
	}
	return 0
}

type MetricAnalysis_LatencyConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxLatency *durationpb.Duration `protobuf:"bytes,1,opt,name=max_latency,json=maxLatency,proto3" json:"max_latency,omitempty"`
}

func (x *MetricAnalysis_LatencyConfig) Reset() {
	*x = MetricAnalysis_LatencyConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_service_service_config_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricAnalysis_LatencyConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricAnalysis_LatencyConfig) ProtoMessage() {}

func (x *MetricAnalysis_LatencyConfig) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_service_service_config_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricAnalysis_LatencyConfig.ProtoReflect.Descriptor instead.
func (*MetricAnalysis_LatencyConfig) Descriptor() ([]byte, []int) {
	return file_prodvana_service_service_config_proto_rawDescGZIP(), []int{1, 1}
}

func (x *MetricAnalysis_LatencyConfig) GetMaxLatency() *durationpb.Duration {
	if x != nil {
		return x.MaxLatency
	}
	return nil
}

type RuntimeSpecificConfig_K8SConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Annotations to add to the Kubernetes Service object
	ServiceAnnotations map[string]string `protobuf:"bytes,1,rep,name=service_annotations,json=serviceAnnotations,proto3" json:"service_annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RuntimeSpecificConfig_K8SConfig) Reset() {
	*x = RuntimeSpecificConfig_K8SConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_service_service_config_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuntimeSpecificConfig_K8SConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeSpecificConfig_K8SConfig) ProtoMessage() {}

func (x *RuntimeSpecificConfig_K8SConfig) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_service_service_config_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeSpecificConfig_K8SConfig.ProtoReflect.Descriptor instead.
func (*RuntimeSpecificConfig_K8SConfig) Descriptor() ([]byte, []int) {
	return file_prodvana_service_service_config_proto_rawDescGZIP(), []int{12, 0}
}

func (x *RuntimeSpecificConfig_K8SConfig) GetServiceAnnotations() map[string]string {
	if x != nil {
		return x.ServiceAnnotations
	}
	return nil
}

var File_prodvana_service_service_config_proto protoreflect.FileDescriptor

var file_prodvana_service_service_config_proto_rawDesc = []byte{
	0x0a, 0x25, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e,
	0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2f, 0x63,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x20, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e, 0x76, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x21, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x68, 0x65, 0x6c, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x61, 0x74,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x70, 0x72, 0x6f,
	0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x70, 0x72, 0x6f, 0x64,
	0x76, 0x61, 0x6e, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x72, 0x65, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x27, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x2f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x35, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x27, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61,
	0x6e, 0x61, 0x2f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x2f, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x38, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x05, 0x66, 0x69, 0x78, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x66, 0x69, 0x78, 0x65, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x22, 0xe4, 0x02, 0x0a, 0x0e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x12, 0x57,
	0x0a, 0x0c, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x52, 0x61, 0x74, 0x65, 0x12, 0x51, 0x0a, 0x0b, 0x6c, 0x61, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x70, 0x39, 0x35, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x4c,
	0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0a,
	0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x39, 0x35, 0x1a, 0x47, 0x0a, 0x11, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x32, 0x0a, 0x15, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13,
	0x6d, 0x69, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x1a, 0x4b, 0x0a, 0x0d, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x3a, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x61, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x42, 0x10, 0x0a, 0x0e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x22, 0xac, 0x03, 0x0a, 0x15, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x55, 0x0a, 0x19,
	0x69, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x5f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x17, 0x69, 0x6e, 0x64, 0x69,
	0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61, 0x64, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x57, 0x0a, 0x1a, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x18, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x10,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e,
	0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x0f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x12, 0x40, 0x0a, 0x0e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x11, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x10, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x22, 0x79, 0x0a, 0x09, 0x54, 0x4c, 0x53, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x1f,
	0x0a, 0x0a, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x72, 0x61, 0x77, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12,
	0x38, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x48,
	0x00, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x42, 0x11, 0x0a, 0x0a, 0x74, 0x6c, 0x73,
	0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0x92, 0x01, 0x0a,
	0x0e, 0x54, 0x4c, 0x53, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12,
	0x40, 0x0a, 0x08, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x4c, 0x53, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x07, 0x74, 0x6c, 0x73, 0x43, 0x65, 0x72,
	0x74, 0x12, 0x3e, 0x0a, 0x07, 0x74, 0x6c, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x4c, 0x53, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x74, 0x6c, 0x73, 0x4b, 0x65,
	0x79, 0x22, 0x7b, 0x0a, 0x0b, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x12, 0x34, 0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x54, 0x4c, 0x53, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x48,
	0x00, 0x52, 0x03, 0x74, 0x6c, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x77, 0x73, 0x5f, 0x61, 0x63,
	0x6d, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a,
	0x61, 0x77, 0x73, 0x41, 0x63, 0x6d, 0x43, 0x65, 0x72, 0x74, 0x42, 0x12, 0x0a, 0x0b, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0xf8,
	0x07, 0x0a, 0x17, 0x50, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x30, 0x0a, 0x0f, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x37, 0x0a, 0x10,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0c, 0xfa, 0x42, 0x09, 0x92, 0x01, 0x06, 0x22, 0x04,
	0x72, 0x02, 0x68, 0x01, 0x52, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x48, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x61, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61,
	0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x50, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x0d, 0xfa, 0x42, 0x0a, 0x92, 0x01, 0x07, 0x22, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x31, 0x0a, 0x04, 0x63, 0x65, 0x72, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e,
	0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x04, 0x63, 0x65, 0x72, 0x74, 0x12, 0x4a, 0x0a, 0x0f, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x41, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2e, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x2e, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x92, 0x01, 0x07, 0x22, 0x05, 0x8a, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x08, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x08,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x51, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x5f,
	0x70, 0x75, 0x73, 0x68, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x0d,
	0xfa, 0x42, 0x0a, 0x92, 0x01, 0x07, 0x22, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x70,
	0x72, 0x65, 0x50, 0x75, 0x73, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x52, 0x0a, 0x10, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12,
	0x51, 0x0a, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x69, 0x63, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x48, 0x00, 0x52, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x57, 0x0a, 0x11, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x10, 0x6b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x53, 0x0a, 0x0f, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00,
	0x52, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x38, 0x0a, 0x04, 0x68, 0x65, 0x6c, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x65, 0x6c, 0x6d, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x48, 0x00, 0x52, 0x04, 0x68, 0x65, 0x6c, 0x6d, 0x42, 0x0e, 0x0a, 0x0c, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04,
	0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x0c, 0x10, 0x0d, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x32, 0x0a, 0x13, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x61, 0x0a,
	0x18, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x45, 0x0a, 0x0a, 0x63, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x22, 0x34, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x03, 0x72, 0x65,
	0x66, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0x46, 0x0a, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x0f, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x42, 0x0a, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0x99,
	0x02, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x49, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x45, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12,
	0x46, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52,
	0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x72,
	0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x31, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x03, 0x72, 0x65, 0x66, 0x22, 0xc1, 0x02, 0x0a, 0x15, 0x52,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x45, 0x0a, 0x03, 0x6b, 0x38, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4b, 0x38, 0x53, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x03, 0x6b, 0x38, 0x73, 0x1a, 0xce, 0x01, 0x0a, 0x09,
	0x4b, 0x38, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x7a, 0x0a, 0x13, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e,
	0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4b, 0x38, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x45, 0x0a, 0x17, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x10, 0x0a, 0x0e,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xa1,
	0x01, 0x0a, 0x14, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x36, 0x0a, 0x12, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x11, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x51, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x76, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x22, 0x30, 0x0a, 0x12, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x22, 0x82, 0x02, 0x0a, 0x1f, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0xfa, 0x42, 0x29, 0x72, 0x27, 0x10, 0x00, 0x18,
	0x3f, 0x32, 0x21, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x3f, 0x28, 0x5b, 0x61, 0x2d, 0x7a, 0x30,
	0x2d, 0x39, 0x2d, 0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x7b, 0x30,
	0x2c, 0x31, 0x7d, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x03, 0x72, 0x65,
	0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61,
	0x6e, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x03, 0x72, 0x65, 0x66,
	0x12, 0x57, 0x0a, 0x09, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x42, 0x0f, 0xfa,
	0x42, 0x0c, 0x92, 0x01, 0x09, 0x08, 0x01, 0x22, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x09,
	0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x22, 0xff, 0x0e, 0x0a, 0x0d, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3f, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xfa, 0x42, 0x28, 0x72, 0x26,
	0x10, 0x01, 0x18, 0x3f, 0x32, 0x20, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x5b, 0x61, 0x2d,
	0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29,
	0x7b, 0x30, 0x2c, 0x31, 0x7d, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x92, 0x01, 0x07, 0x22,
	0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x3c, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x52,
	0x0a, 0x10, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x12, 0x68, 0x0a, 0x13, 0x70, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x92,
	0x01, 0x07, 0x22, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x11, 0x70, 0x65, 0x72, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x58, 0x0a, 0x0c,
	0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x92, 0x01,
	0x07, 0x22, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x41, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x42, 0x0d, 0xfa,
	0x42, 0x0a, 0x92, 0x01, 0x07, 0x22, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x07, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x12, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x11, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4f, 0x0a, 0x0d, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x52, 0x0c, 0x62,
	0x61, 0x73, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x70,
	0x72, 0x65, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x50, 0x75, 0x73, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12,
	0x52, 0x0a, 0x10, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x76, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x0f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x12, 0x5a, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61,
	0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x92, 0x01, 0x07, 0x22, 0x05, 0x8a, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x53, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x76, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x51, 0x0a, 0x0f,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63,
	0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52,
	0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x57, 0x0a, 0x11, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x10, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x53, 0x0a, 0x0f, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0e, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x38, 0x0a,
	0x04, 0x68, 0x65, 0x6c, 0x6d, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x65, 0x6c, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48,
	0x00, 0x52, 0x04, 0x68, 0x65, 0x6c, 0x6d, 0x12, 0x60, 0x0a, 0x12, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x41,
	0x75, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x52, 0x11, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x12, 0x49, 0x0a, 0x0d, 0x61, 0x75, 0x74,
	0x6f, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x6f, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x22, 0x4d, 0x0a, 0x11, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01,
	0x12, 0x09, 0x0a, 0x05, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x49,
	0x4d, 0x41, 0x47, 0x45, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41,
	0x53, 0x10, 0x03, 0x42, 0x0e, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x4a,
	0x04, 0x08, 0x08, 0x10, 0x09, 0x4a, 0x04, 0x08, 0x11, 0x10, 0x12, 0x52, 0x08, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x10, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x9b, 0x0f, 0x0a, 0x1d,
	0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x41, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x3c, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61,
	0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x73, 0x12, 0x3c, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d,
	0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x52, 0x0a, 0x10, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x12, 0x31, 0x0a, 0x04, 0x63, 0x65, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x04, 0x63,
	0x65, 0x72, 0x74, 0x12, 0x4f, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x56, 0x0a, 0x11, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x0c,
	0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c,
	0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x0f,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61,
	0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x41, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x76, 0x61, 0x6e, 0x61, 0x2e, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x2e, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x92, 0x01, 0x07, 0x22, 0x05, 0x8a, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x12, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61,
	0x6e, 0x61, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x11, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x4f, 0x0a, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61,
	0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x66, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x12, 0x42, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x74, 0x61,
	0x73, 0x6b, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x76, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x50, 0x75, 0x73, 0x68,
	0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x52, 0x0a, 0x10, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x4b, 0x0a, 0x0a, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x51, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x11, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x10, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0x51, 0x0a, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x69, 0x63, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x48, 0x00, 0x52, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x52, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x57, 0x0a, 0x11, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x10, 0x6b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x38, 0x0a,
	0x04, 0x68, 0x65, 0x6c, 0x6d, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x65, 0x6c, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48,
	0x00, 0x52, 0x04, 0x68, 0x65, 0x6c, 0x6d, 0x12, 0x73, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x1c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x27,
	0xfa, 0x42, 0x24, 0x9a, 0x01, 0x21, 0x18, 0x01, 0x22, 0x1d, 0x72, 0x1b, 0x32, 0x19, 0x5e, 0x5b,
	0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5f, 0x5d, 0x2b, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a,
	0x30, 0x2d, 0x39, 0x5f, 0x5d, 0x2a, 0x24, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x1a, 0x58, 0x0a, 0x08,
	0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x76, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x4a, 0x04, 0x08, 0x09,
	0x10, 0x0a, 0x4a, 0x04, 0x08, 0x14, 0x10, 0x15, 0x4a, 0x04, 0x08, 0x15, 0x10, 0x16, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0c, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xc9, 0x02, 0x0a, 0x11, 0x43, 0x6f,
	0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x1f, 0x0a, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x41, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x4f, 0x0a, 0x07,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x56, 0x0a,
	0x11, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x2e, 0x52, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x10, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x4c, 0x5a, 0x4a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x70, 0x72, 0x6f,
	0x64, 0x76, 0x61, 0x6e, 0x61, 0x2d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x67, 0x6f, 0x2f,
	0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_prodvana_service_service_config_proto_rawDescOnce sync.Once
	file_prodvana_service_service_config_proto_rawDescData = file_prodvana_service_service_config_proto_rawDesc
)

func file_prodvana_service_service_config_proto_rawDescGZIP() []byte {
	file_prodvana_service_service_config_proto_rawDescOnce.Do(func() {
		file_prodvana_service_service_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_prodvana_service_service_config_proto_rawDescData)
	})
	return file_prodvana_service_service_config_proto_rawDescData
}

var file_prodvana_service_service_config_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_prodvana_service_service_config_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_prodvana_service_service_config_proto_goTypes = []interface{}{
	(ServiceConfig_ParametersAutogen)(0),                 // 0: prodvana.service.ServiceConfig.ParametersAutogen
	(*ReplicasConfig)(nil),                               // 1: prodvana.service.ReplicasConfig
	(*MetricAnalysis)(nil),                               // 2: prodvana.service.MetricAnalysis
	(*ReleaseStrategyConfig)(nil),                        // 3: prodvana.service.ReleaseStrategyConfig
	(*TLSSecret)(nil),                                    // 4: prodvana.service.TLSSecret
	(*TLSCertificate)(nil),                               // 5: prodvana.service.TLSCertificate
	(*Certificate)(nil),                                  // 6: prodvana.service.Certificate
	(*PerReleaseChannelConfig)(nil),                      // 7: prodvana.service.PerReleaseChannelConfig
	(*CapabilityReference)(nil),                          // 8: prodvana.service.CapabilityReference
	(*CompiledCapabilityConfig)(nil),                     // 9: prodvana.service.CompiledCapabilityConfig
	(*ProgramReference)(nil),                             // 10: prodvana.service.ProgramReference
	(*TaskReference)(nil),                                // 11: prodvana.service.TaskReference
	(*TaskConfig)(nil),                                   // 12: prodvana.service.TaskConfig
	(*RuntimeSpecificConfig)(nil),                        // 13: prodvana.service.RuntimeSpecificConfig
	(*GenericRuntimeConfig)(nil),                         // 14: prodvana.service.GenericRuntimeConfig
	(*AutoRollbackConfig)(nil),                           // 15: prodvana.service.AutoRollbackConfig
	(*ProtectionConvergenceAttachment)(nil),              // 16: prodvana.service.ProtectionConvergenceAttachment
	(*ServiceConfig)(nil),                                // 17: prodvana.service.ServiceConfig
	(*CompiledServiceInstanceConfig)(nil),                // 18: prodvana.service.CompiledServiceInstanceConfig
	(*CompiledJobConfig)(nil),                            // 19: prodvana.service.CompiledJobConfig
	(*MetricAnalysis_SuccessRateConfig)(nil),             // 20: prodvana.service.MetricAnalysis.SuccessRateConfig
	(*MetricAnalysis_LatencyConfig)(nil),                 // 21: prodvana.service.MetricAnalysis.LatencyConfig
	(*RuntimeSpecificConfig_K8SConfig)(nil),              // 22: prodvana.service.RuntimeSpecificConfig.K8SConfig
	nil,                                                  // 23: prodvana.service.RuntimeSpecificConfig.K8SConfig.ServiceAnnotationsEntry
	nil,                                                  // 24: prodvana.service.CompiledServiceInstanceConfig.EnvEntry
	(*durationpb.Duration)(nil),                          // 25: google.protobuf.Duration
	(*common_config.Secret)(nil),                         // 26: prodvana.common_config.Secret
	(*common_config.PerReleaseChannelProgramConfig)(nil), // 27: prodvana.common_config.PerReleaseChannelProgramConfig
	(*delivery.DeliveryConfig)(nil),                      // 28: prodvana.delivery.DeliveryConfig
	(*volumes.Volume)(nil),                               // 29: prodvana.volumes.Volume
	(*common_config.KubernetesConfig)(nil),               // 30: prodvana.common_config.KubernetesConfig
	(*common_config.HelmConfig)(nil),                     // 31: prodvana.common_config.HelmConfig
	(*capability.CapabilityConfig)(nil),                  // 32: prodvana.capability.CapabilityConfig
	(*common_config.ProgramConfig)(nil),                  // 33: prodvana.common_config.ProgramConfig
	(*common_config.RetryConfig)(nil),                    // 34: prodvana.common_config.RetryConfig
	(*common_config.ParameterValue)(nil),                 // 35: prodvana.common_config.ParameterValue
	(*protection.ProtectionReference)(nil),               // 36: prodvana.protection.ProtectionReference
	(*protection.ProtectionLifecycle)(nil),               // 37: prodvana.protection.ProtectionLifecycle
	(*workflow.AnnotationsConfig)(nil),                   // 38: prodvana.workflow.AnnotationsConfig
	(*common_config.ServiceTemplateRef)(nil),             // 39: prodvana.common_config.ServiceTemplateRef
	(*common_config.ParameterDefinition)(nil),            // 40: prodvana.common_config.ParameterDefinition
	(*ServiceParameterValues)(nil),                       // 41: prodvana.service.ServiceParameterValues
	(common_config.Maturity)(0),                          // 42: prodvana.common_config.Maturity
	(*release_channel.ReleaseChannelRuntimeConfig)(nil),  // 43: prodvana.release_channel.ReleaseChannelRuntimeConfig
	(*runtimes.RuntimeExecutionConfig)(nil),              // 44: prodvana.runtimes.RuntimeExecutionConfig
	(*common_config.EnvValue)(nil),                       // 45: prodvana.common_config.EnvValue
}
var file_prodvana_service_service_config_proto_depIdxs = []int32{
	20, // 0: prodvana.service.MetricAnalysis.success_rate:type_name -> prodvana.service.MetricAnalysis.SuccessRateConfig
	21, // 1: prodvana.service.MetricAnalysis.latency_p95:type_name -> prodvana.service.MetricAnalysis.LatencyConfig
	25, // 2: prodvana.service.ReleaseStrategyConfig.individual_stage_deadline:type_name -> google.protobuf.Duration
	25, // 3: prodvana.service.ReleaseStrategyConfig.automated_testing_duration:type_name -> google.protobuf.Duration
	2,  // 4: prodvana.service.ReleaseStrategyConfig.metrics_analysis:type_name -> prodvana.service.MetricAnalysis
	25, // 5: prodvana.service.ReleaseStrategyConfig.check_interval:type_name -> google.protobuf.Duration
	26, // 6: prodvana.service.TLSSecret.secret:type_name -> prodvana.common_config.Secret
	4,  // 7: prodvana.service.TLSCertificate.tls_cert:type_name -> prodvana.service.TLSSecret
	4,  // 8: prodvana.service.TLSCertificate.tls_key:type_name -> prodvana.service.TLSSecret
	5,  // 9: prodvana.service.Certificate.tls:type_name -> prodvana.service.TLSCertificate
	27, // 10: prodvana.service.PerReleaseChannelConfig.programs:type_name -> prodvana.common_config.PerReleaseChannelProgramConfig
	6,  // 11: prodvana.service.PerReleaseChannelConfig.cert:type_name -> prodvana.service.Certificate
	28, // 12: prodvana.service.PerReleaseChannelConfig.delivery_config:type_name -> prodvana.delivery.DeliveryConfig
	29, // 13: prodvana.service.PerReleaseChannelConfig.volumes:type_name -> prodvana.volumes.Volume
	1,  // 14: prodvana.service.PerReleaseChannelConfig.replicas:type_name -> prodvana.service.ReplicasConfig
	12, // 15: prodvana.service.PerReleaseChannelConfig.pre_push_tasks:type_name -> prodvana.service.TaskConfig
	13, // 16: prodvana.service.PerReleaseChannelConfig.runtime_specific:type_name -> prodvana.service.RuntimeSpecificConfig
	14, // 17: prodvana.service.PerReleaseChannelConfig.generic_runtime:type_name -> prodvana.service.GenericRuntimeConfig
	30, // 18: prodvana.service.PerReleaseChannelConfig.kubernetes_config:type_name -> prodvana.common_config.KubernetesConfig
	30, // 19: prodvana.service.PerReleaseChannelConfig.external_config:type_name -> prodvana.common_config.KubernetesConfig
	31, // 20: prodvana.service.PerReleaseChannelConfig.helm:type_name -> prodvana.common_config.HelmConfig
	32, // 21: prodvana.service.CompiledCapabilityConfig.capability:type_name -> prodvana.capability.CapabilityConfig
	33, // 22: prodvana.service.TaskConfig.program:type_name -> prodvana.common_config.ProgramConfig
	10, // 23: prodvana.service.TaskConfig.base_program:type_name -> prodvana.service.ProgramReference
	34, // 24: prodvana.service.TaskConfig.retry_config:type_name -> prodvana.common_config.RetryConfig
	11, // 25: prodvana.service.TaskConfig.ref:type_name -> prodvana.service.TaskReference
	22, // 26: prodvana.service.RuntimeSpecificConfig.k8s:type_name -> prodvana.service.RuntimeSpecificConfig.K8SConfig
	35, // 27: prodvana.service.GenericRuntimeConfig.parameter_values:type_name -> prodvana.common_config.ParameterValue
	36, // 28: prodvana.service.ProtectionConvergenceAttachment.ref:type_name -> prodvana.protection.ProtectionReference
	37, // 29: prodvana.service.ProtectionConvergenceAttachment.lifecycle:type_name -> prodvana.protection.ProtectionLifecycle
	33, // 30: prodvana.service.ServiceConfig.programs:type_name -> prodvana.common_config.ProgramConfig
	1,  // 31: prodvana.service.ServiceConfig.replicas:type_name -> prodvana.service.ReplicasConfig
	3,  // 32: prodvana.service.ServiceConfig.release_strategy:type_name -> prodvana.service.ReleaseStrategyConfig
	7,  // 33: prodvana.service.ServiceConfig.per_release_channel:type_name -> prodvana.service.PerReleaseChannelConfig
	8,  // 34: prodvana.service.ServiceConfig.capabilities:type_name -> prodvana.service.CapabilityReference
	28, // 35: prodvana.service.ServiceConfig.delivery_config:type_name -> prodvana.delivery.DeliveryConfig
	29, // 36: prodvana.service.ServiceConfig.volumes:type_name -> prodvana.volumes.Volume
	38, // 37: prodvana.service.ServiceConfig.deploy_annotations:type_name -> prodvana.workflow.AnnotationsConfig
	39, // 38: prodvana.service.ServiceConfig.base_template:type_name -> prodvana.common_config.ServiceTemplateRef
	12, // 39: prodvana.service.ServiceConfig.pre_push_tasks:type_name -> prodvana.service.TaskConfig
	13, // 40: prodvana.service.ServiceConfig.runtime_specific:type_name -> prodvana.service.RuntimeSpecificConfig
	40, // 41: prodvana.service.ServiceConfig.parameters:type_name -> prodvana.common_config.ParameterDefinition
	41, // 42: prodvana.service.ServiceConfig.parameter_values:type_name -> prodvana.service.ServiceParameterValues
	25, // 43: prodvana.service.ServiceConfig.progress_deadline:type_name -> google.protobuf.Duration
	14, // 44: prodvana.service.ServiceConfig.generic_runtime:type_name -> prodvana.service.GenericRuntimeConfig
	30, // 45: prodvana.service.ServiceConfig.kubernetes_config:type_name -> prodvana.common_config.KubernetesConfig
	30, // 46: prodvana.service.ServiceConfig.external_config:type_name -> prodvana.common_config.KubernetesConfig
	31, // 47: prodvana.service.ServiceConfig.helm:type_name -> prodvana.common_config.HelmConfig
	0,  // 48: prodvana.service.ServiceConfig.parameters_autogen:type_name -> prodvana.service.ServiceConfig.ParametersAutogen
	15, // 49: prodvana.service.ServiceConfig.auto_rollback:type_name -> prodvana.service.AutoRollbackConfig
	33, // 50: prodvana.service.CompiledServiceInstanceConfig.programs:type_name -> prodvana.common_config.ProgramConfig
	1,  // 51: prodvana.service.CompiledServiceInstanceConfig.replicas:type_name -> prodvana.service.ReplicasConfig
	42, // 52: prodvana.service.CompiledServiceInstanceConfig.maturity:type_name -> prodvana.common_config.Maturity
	3,  // 53: prodvana.service.CompiledServiceInstanceConfig.release_strategy:type_name -> prodvana.service.ReleaseStrategyConfig
	6,  // 54: prodvana.service.CompiledServiceInstanceConfig.cert:type_name -> prodvana.service.Certificate
	43, // 55: prodvana.service.CompiledServiceInstanceConfig.runtime:type_name -> prodvana.release_channel.ReleaseChannelRuntimeConfig
	44, // 56: prodvana.service.CompiledServiceInstanceConfig.runtime_execution:type_name -> prodvana.runtimes.RuntimeExecutionConfig
	9,  // 57: prodvana.service.CompiledServiceInstanceConfig.capabilities:type_name -> prodvana.service.CompiledCapabilityConfig
	28, // 58: prodvana.service.CompiledServiceInstanceConfig.delivery_config:type_name -> prodvana.delivery.DeliveryConfig
	29, // 59: prodvana.service.CompiledServiceInstanceConfig.volumes:type_name -> prodvana.volumes.Volume
	38, // 60: prodvana.service.CompiledServiceInstanceConfig.deploy_annotations:type_name -> prodvana.workflow.AnnotationsConfig
	39, // 61: prodvana.service.CompiledServiceInstanceConfig.base_template:type_name -> prodvana.common_config.ServiceTemplateRef
	12, // 62: prodvana.service.CompiledServiceInstanceConfig.pre_push_tasks:type_name -> prodvana.service.TaskConfig
	13, // 63: prodvana.service.CompiledServiceInstanceConfig.runtime_specific:type_name -> prodvana.service.RuntimeSpecificConfig
	40, // 64: prodvana.service.CompiledServiceInstanceConfig.parameters:type_name -> prodvana.common_config.ParameterDefinition
	35, // 65: prodvana.service.CompiledServiceInstanceConfig.parameter_values:type_name -> prodvana.common_config.ParameterValue
	25, // 66: prodvana.service.CompiledServiceInstanceConfig.progress_deadline:type_name -> google.protobuf.Duration
	14, // 67: prodvana.service.CompiledServiceInstanceConfig.generic_runtime:type_name -> prodvana.service.GenericRuntimeConfig
	30, // 68: prodvana.service.CompiledServiceInstanceConfig.kubernetes_config:type_name -> prodvana.common_config.KubernetesConfig
	31, // 69: prodvana.service.CompiledServiceInstanceConfig.helm:type_name -> prodvana.common_config.HelmConfig
	24, // 70: prodvana.service.CompiledServiceInstanceConfig.env:type_name -> prodvana.service.CompiledServiceInstanceConfig.EnvEntry
	33, // 71: prodvana.service.CompiledJobConfig.programs:type_name -> prodvana.common_config.ProgramConfig
	43, // 72: prodvana.service.CompiledJobConfig.runtime:type_name -> prodvana.release_channel.ReleaseChannelRuntimeConfig
	44, // 73: prodvana.service.CompiledJobConfig.runtime_execution:type_name -> prodvana.runtimes.RuntimeExecutionConfig
	25, // 74: prodvana.service.MetricAnalysis.LatencyConfig.max_latency:type_name -> google.protobuf.Duration
	23, // 75: prodvana.service.RuntimeSpecificConfig.K8SConfig.service_annotations:type_name -> prodvana.service.RuntimeSpecificConfig.K8SConfig.ServiceAnnotationsEntry
	45, // 76: prodvana.service.CompiledServiceInstanceConfig.EnvEntry.value:type_name -> prodvana.common_config.EnvValue
	77, // [77:77] is the sub-list for method output_type
	77, // [77:77] is the sub-list for method input_type
	77, // [77:77] is the sub-list for extension type_name
	77, // [77:77] is the sub-list for extension extendee
	0,  // [0:77] is the sub-list for field type_name
}

func init() { file_prodvana_service_service_config_proto_init() }
func file_prodvana_service_service_config_proto_init() {
	if File_prodvana_service_service_config_proto != nil {
		return
	}
	file_prodvana_service_parameters_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_prodvana_service_service_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicasConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_service_service_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricAnalysis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_service_service_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseStrategyConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_service_service_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLSSecret); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_service_service_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLSCertificate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_service_service_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Certificate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_service_service_config_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerReleaseChannelConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_service_service_config_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapabilityReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_service_service_config_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompiledCapabilityConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_service_service_config_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProgramReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_service_service_config_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_service_service_config_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_service_service_config_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuntimeSpecificConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_service_service_config_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenericRuntimeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_service_service_config_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoRollbackConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_service_service_config_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtectionConvergenceAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_service_service_config_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_service_service_config_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompiledServiceInstanceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_service_service_config_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompiledJobConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_service_service_config_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricAnalysis_SuccessRateConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_service_service_config_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricAnalysis_LatencyConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_service_service_config_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuntimeSpecificConfig_K8SConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_prodvana_service_service_config_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ReplicasConfig_Fixed)(nil),
	}
	file_prodvana_service_service_config_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*MetricAnalysis_SuccessRate)(nil),
		(*MetricAnalysis_LatencyP95)(nil),
	}
	file_prodvana_service_service_config_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*TLSSecret_RawSecret)(nil),
		(*TLSSecret_Secret)(nil),
	}
	file_prodvana_service_service_config_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*Certificate_Tls)(nil),
		(*Certificate_AwsAcmCert)(nil),
	}
	file_prodvana_service_service_config_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*PerReleaseChannelConfig_GenericRuntime)(nil),
		(*PerReleaseChannelConfig_KubernetesConfig)(nil),
		(*PerReleaseChannelConfig_ExternalConfig)(nil),
		(*PerReleaseChannelConfig_Helm)(nil),
	}
	file_prodvana_service_service_config_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*ProgramReference_Name)(nil),
	}
	file_prodvana_service_service_config_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*TaskReference_ReleaseChannel)(nil),
	}
	file_prodvana_service_service_config_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*RuntimeSpecificConfig_K8S)(nil),
	}
	file_prodvana_service_service_config_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*ServiceConfig_GenericRuntime)(nil),
		(*ServiceConfig_KubernetesConfig)(nil),
		(*ServiceConfig_ExternalConfig)(nil),
		(*ServiceConfig_Helm)(nil),
	}
	file_prodvana_service_service_config_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*CompiledServiceInstanceConfig_GenericRuntime)(nil),
		(*CompiledServiceInstanceConfig_KubernetesConfig)(nil),
		(*CompiledServiceInstanceConfig_Helm)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_prodvana_service_service_config_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_prodvana_service_service_config_proto_goTypes,
		DependencyIndexes: file_prodvana_service_service_config_proto_depIdxs,
		EnumInfos:         file_prodvana_service_service_config_proto_enumTypes,
		MessageInfos:      file_prodvana_service_service_config_proto_msgTypes,
	}.Build()
	File_prodvana_service_service_config_proto = out.File
	file_prodvana_service_service_config_proto_rawDesc = nil
	file_prodvana_service_service_config_proto_goTypes = nil
	file_prodvana_service_service_config_proto_depIdxs = nil
}
