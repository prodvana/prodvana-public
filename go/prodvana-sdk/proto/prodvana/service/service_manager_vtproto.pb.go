// Code generated by protoc-gen-go-vtproto. DO NOT EDIT.
// protoc-gen-go-vtproto version: v0.6.0
// source: prodvana/service/service_manager.proto

package service

import (
	durationpb1 "github.com/planetscale/vtprotobuf/types/known/durationpb"
	timestamppb1 "github.com/planetscale/vtprotobuf/types/known/timestamppb"
	common_config "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/common_config"
	insights "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/insights"
	repo "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/repo"
	proto "google.golang.org/protobuf/proto"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

func (m *ServiceConfigVersionReference) CloneVT() *ServiceConfigVersionReference {
	if m == nil {
		return (*ServiceConfigVersionReference)(nil)
	}
	r := new(ServiceConfigVersionReference)
	r.Application = m.Application
	r.Service = m.Service
	r.ServiceConfigVersion = m.ServiceConfigVersion
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ServiceConfigVersionReference) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *GenerateVersionNameReq) CloneVT() *GenerateVersionNameReq {
	if m == nil {
		return (*GenerateVersionNameReq)(nil)
	}
	r := new(GenerateVersionNameReq)
	r.Application = m.Application
	r.Service = m.Service
	r.ServiceConfigVersion = m.ServiceConfigVersion
	if rhs := m.Parameters; rhs != nil {
		tmpContainer := make([]*common_config.ParameterValue, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Parameters = tmpContainer
	}
	if rhs := m.PerReleaseChannel; rhs != nil {
		tmpContainer := make([]*ApplyParametersReq_PerReleaseChannel, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.PerReleaseChannel = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *GenerateVersionNameReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *GenerateVersionNameResp) CloneVT() *GenerateVersionNameResp {
	if m == nil {
		return (*GenerateVersionNameResp)(nil)
	}
	r := new(GenerateVersionNameResp)
	r.Version = m.Version
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *GenerateVersionNameResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ApplyParametersReq_PerReleaseChannel) CloneVT() *ApplyParametersReq_PerReleaseChannel {
	if m == nil {
		return (*ApplyParametersReq_PerReleaseChannel)(nil)
	}
	r := new(ApplyParametersReq_PerReleaseChannel)
	r.ReleaseChannel = m.ReleaseChannel
	if rhs := m.Parameters; rhs != nil {
		tmpContainer := make([]*common_config.ParameterValue, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Parameters = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ApplyParametersReq_PerReleaseChannel) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ApplyParametersReq) CloneVT() *ApplyParametersReq {
	if m == nil {
		return (*ApplyParametersReq)(nil)
	}
	r := new(ApplyParametersReq)
	r.TestOnlySkipRegistryCheck = m.TestOnlySkipRegistryCheck
	r.Application = m.Application
	r.Source = m.Source
	r.SourceMetadata = m.SourceMetadata.CloneVT()
	r.BundleNameOverride = m.BundleNameOverride
	r.HandleBundleNameDuplicate = m.HandleBundleNameDuplicate
	r.SkipRuntimeValidation = m.SkipRuntimeValidation
	if m.Oneof != nil {
		r.Oneof = m.Oneof.(interface {
			CloneVT() isApplyParametersReq_Oneof
		}).CloneVT()
	}
	if rhs := m.Parameters; rhs != nil {
		tmpContainer := make([]*common_config.ParameterValue, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Parameters = tmpContainer
	}
	if rhs := m.PerReleaseChannel; rhs != nil {
		tmpContainer := make([]*ApplyParametersReq_PerReleaseChannel, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.PerReleaseChannel = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ApplyParametersReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ApplyParametersReq_ServiceConfig) CloneVT() isApplyParametersReq_Oneof {
	if m == nil {
		return (*ApplyParametersReq_ServiceConfig)(nil)
	}
	r := new(ApplyParametersReq_ServiceConfig)
	r.ServiceConfig = m.ServiceConfig.CloneVT()
	return r
}

func (m *ApplyParametersReq_ServiceConfigVersion) CloneVT() isApplyParametersReq_Oneof {
	if m == nil {
		return (*ApplyParametersReq_ServiceConfigVersion)(nil)
	}
	r := new(ApplyParametersReq_ServiceConfigVersion)
	r.ServiceConfigVersion = m.ServiceConfigVersion.CloneVT()
	return r
}

func (m *ApplyParametersResp) CloneVT() *ApplyParametersResp {
	if m == nil {
		return (*ApplyParametersResp)(nil)
	}
	r := new(ApplyParametersResp)
	r.ServiceId = m.ServiceId
	r.Version = m.Version
	r.EfficiencyStat = m.EfficiencyStat.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ApplyParametersResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ValidateApplyParametersResp) CloneVT() *ValidateApplyParametersResp {
	if m == nil {
		return (*ValidateApplyParametersResp)(nil)
	}
	r := new(ValidateApplyParametersResp)
	r.Config = m.Config.CloneVT()
	r.CompiledConfig = m.CompiledConfig.CloneVT()
	r.AppVersion = m.AppVersion
	if rhs := m.CompiledServiceInstanceConfigs; rhs != nil {
		tmpContainer := make([]*CompiledServiceInstanceConfig, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.CompiledServiceInstanceConfigs = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ValidateApplyParametersResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *GetMaterializedConfigReq) CloneVT() *GetMaterializedConfigReq {
	if m == nil {
		return (*GetMaterializedConfigReq)(nil)
	}
	r := new(GetMaterializedConfigReq)
	r.Service = m.Service
	r.Version = m.Version
	r.Application = m.Application
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *GetMaterializedConfigReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *GetMaterializedConfigResp) CloneVT() *GetMaterializedConfigResp {
	if m == nil {
		return (*GetMaterializedConfigResp)(nil)
	}
	r := new(GetMaterializedConfigResp)
	r.Config = m.Config.CloneVT()
	r.Version = m.Version
	r.CompiledConfig = m.CompiledConfig.CloneVT()
	r.VersionMetadata = m.VersionMetadata.CloneVT()
	if rhs := m.CompiledServiceInstanceConfigs; rhs != nil {
		tmpContainer := make([]*CompiledServiceInstanceConfig, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.CompiledServiceInstanceConfigs = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *GetMaterializedConfigResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *DeleteServiceReq) CloneVT() *DeleteServiceReq {
	if m == nil {
		return (*DeleteServiceReq)(nil)
	}
	r := new(DeleteServiceReq)
	r.Service = m.Service
	r.Application = m.Application
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *DeleteServiceReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *DeleteServiceResp) CloneVT() *DeleteServiceResp {
	if m == nil {
		return (*DeleteServiceResp)(nil)
	}
	r := new(DeleteServiceResp)
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *DeleteServiceResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ListServicesReq) CloneVT() *ListServicesReq {
	if m == nil {
		return (*ListServicesReq)(nil)
	}
	r := new(ListServicesReq)
	r.Application = m.Application
	r.Detailed = m.Detailed
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ListServicesReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ListServicesResp) CloneVT() *ListServicesResp {
	if m == nil {
		return (*ListServicesResp)(nil)
	}
	r := new(ListServicesResp)
	if rhs := m.Services; rhs != nil {
		tmpContainer := make([]*Service, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Services = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ListServicesResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *GetServiceReq) CloneVT() *GetServiceReq {
	if m == nil {
		return (*GetServiceReq)(nil)
	}
	r := new(GetServiceReq)
	r.Application = m.Application
	r.Service = m.Service
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *GetServiceReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *GetServiceResp) CloneVT() *GetServiceResp {
	if m == nil {
		return (*GetServiceResp)(nil)
	}
	r := new(GetServiceResp)
	r.Service = m.Service.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *GetServiceResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ListServiceInstancesReq) CloneVT() *ListServiceInstancesReq {
	if m == nil {
		return (*ListServiceInstancesReq)(nil)
	}
	r := new(ListServiceInstancesReq)
	r.Application = m.Application
	r.Service = m.Service
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ListServiceInstancesReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ListServiceInstancesResp) CloneVT() *ListServiceInstancesResp {
	if m == nil {
		return (*ListServiceInstancesResp)(nil)
	}
	r := new(ListServiceInstancesResp)
	if rhs := m.ServiceInstances; rhs != nil {
		tmpContainer := make([]*ServiceInstance, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.ServiceInstances = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ListServiceInstancesResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *GetServiceInstanceReq) CloneVT() *GetServiceInstanceReq {
	if m == nil {
		return (*GetServiceInstanceReq)(nil)
	}
	r := new(GetServiceInstanceReq)
	r.Application = m.Application
	r.Service = m.Service
	r.ReleaseChannel = m.ReleaseChannel
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *GetServiceInstanceReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *GetServiceInstanceResp) CloneVT() *GetServiceInstanceResp {
	if m == nil {
		return (*GetServiceInstanceResp)(nil)
	}
	r := new(GetServiceInstanceResp)
	r.ServiceInstance = m.ServiceInstance.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *GetServiceInstanceResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *GetServiceMetricsReq) CloneVT() *GetServiceMetricsReq {
	if m == nil {
		return (*GetServiceMetricsReq)(nil)
	}
	r := new(GetServiceMetricsReq)
	r.Application = m.Application
	r.Service = m.Service
	r.StartTimestamp = (*timestamppb.Timestamp)((*timestamppb1.Timestamp)(m.StartTimestamp).CloneVT())
	r.EndTimestamp = (*timestamppb.Timestamp)((*timestamppb1.Timestamp)(m.EndTimestamp).CloneVT())
	r.IncludeCost = m.IncludeCost
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *GetServiceMetricsReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *GetServiceMetricsResp) CloneVT() *GetServiceMetricsResp {
	if m == nil {
		return (*GetServiceMetricsResp)(nil)
	}
	r := new(GetServiceMetricsResp)
	r.DeploymentMetrics = m.DeploymentMetrics.CloneVT()
	r.Cost = m.Cost.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *GetServiceMetricsResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *GetServiceInsightsReq) CloneVT() *GetServiceInsightsReq {
	if m == nil {
		return (*GetServiceInsightsReq)(nil)
	}
	r := new(GetServiceInsightsReq)
	r.Application = m.Application
	r.Service = m.Service
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *GetServiceInsightsReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ListCommitsReq) CloneVT() *ListCommitsReq {
	if m == nil {
		return (*ListCommitsReq)(nil)
	}
	r := new(ListCommitsReq)
	r.Application = m.Application
	r.Service = m.Service
	r.PageToken = m.PageToken
	r.PageSize = m.PageSize
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ListCommitsReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ListCommitsResp) CloneVT() *ListCommitsResp {
	if m == nil {
		return (*ListCommitsResp)(nil)
	}
	r := new(ListCommitsResp)
	r.NextPageToken = m.NextPageToken
	if rhs := m.Commits; rhs != nil {
		tmpContainer := make([]*repo.Commit, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Commits = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ListCommitsResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *GetServiceInsightsResp) CloneVT() *GetServiceInsightsResp {
	if m == nil {
		return (*GetServiceInsightsResp)(nil)
	}
	r := new(GetServiceInsightsResp)
	if rhs := m.Insights; rhs != nil {
		tmpContainer := make([]*insights.Insight, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Insights = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *GetServiceInsightsResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *SnoozeServiceInsightReq) CloneVT() *SnoozeServiceInsightReq {
	if m == nil {
		return (*SnoozeServiceInsightReq)(nil)
	}
	r := new(SnoozeServiceInsightReq)
	r.Application = m.Application
	r.Service = m.Service
	r.Class = m.Class
	r.Duration = (*durationpb.Duration)((*durationpb1.Duration)(m.Duration).CloneVT())
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *SnoozeServiceInsightReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *SnoozeServiceInsightResp) CloneVT() *SnoozeServiceInsightResp {
	if m == nil {
		return (*SnoozeServiceInsightResp)(nil)
	}
	r := new(SnoozeServiceInsightResp)
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *SnoozeServiceInsightResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *GetServiceMetadataReq) CloneVT() *GetServiceMetadataReq {
	if m == nil {
		return (*GetServiceMetadataReq)(nil)
	}
	r := new(GetServiceMetadataReq)
	r.Application = m.Application
	r.Service = m.Service
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *GetServiceMetadataReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *GetServiceMetadataResp) CloneVT() *GetServiceMetadataResp {
	if m == nil {
		return (*GetServiceMetadataResp)(nil)
	}
	r := new(GetServiceMetadataResp)
	r.Metadata = m.Metadata.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *GetServiceMetadataResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *SetServiceMetadataReq) CloneVT() *SetServiceMetadataReq {
	if m == nil {
		return (*SetServiceMetadataReq)(nil)
	}
	r := new(SetServiceMetadataReq)
	r.Application = m.Application
	r.Service = m.Service
	r.Metadata = m.Metadata.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *SetServiceMetadataReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *SetServiceMetadataResp) CloneVT() *SetServiceMetadataResp {
	if m == nil {
		return (*SetServiceMetadataResp)(nil)
	}
	r := new(SetServiceMetadataResp)
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *SetServiceMetadataResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *SetServiceConvergenceModeReq) CloneVT() *SetServiceConvergenceModeReq {
	if m == nil {
		return (*SetServiceConvergenceModeReq)(nil)
	}
	r := new(SetServiceConvergenceModeReq)
	r.Application = m.Application
	r.Service = m.Service
	r.ConvergenceMode = m.ConvergenceMode
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *SetServiceConvergenceModeReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *SetServiceConvergenceModeResp) CloneVT() *SetServiceConvergenceModeResp {
	if m == nil {
		return (*SetServiceConvergenceModeResp)(nil)
	}
	r := new(SetServiceConvergenceModeResp)
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *SetServiceConvergenceModeResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ListMaterializedConfigVersionsReq) CloneVT() *ListMaterializedConfigVersionsReq {
	if m == nil {
		return (*ListMaterializedConfigVersionsReq)(nil)
	}
	r := new(ListMaterializedConfigVersionsReq)
	r.Application = m.Application
	r.Service = m.Service
	r.PageToken = m.PageToken
	r.PageSize = m.PageSize
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ListMaterializedConfigVersionsReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ListMaterializedConfigVersionsResp_VersionMetadata) CloneVT() *ListMaterializedConfigVersionsResp_VersionMetadata {
	if m == nil {
		return (*ListMaterializedConfigVersionsResp_VersionMetadata)(nil)
	}
	r := new(ListMaterializedConfigVersionsResp_VersionMetadata)
	r.Version = m.Version
	r.CreationTimestamp = (*timestamppb.Timestamp)((*timestamppb1.Timestamp)(m.CreationTimestamp).CloneVT())
	r.ConfigVersion = m.ConfigVersion
	r.ParameterValues = m.ParameterValues.CloneVT()
	r.Source = m.Source
	r.SourceMetadata = m.SourceMetadata.CloneVT()
	r.AppVersion = m.AppVersion
	if rhs := m.Parameters; rhs != nil {
		tmpContainer := make([]*common_config.ParameterDefinition, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Parameters = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ListMaterializedConfigVersionsResp_VersionMetadata) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ListMaterializedConfigVersionsResp) CloneVT() *ListMaterializedConfigVersionsResp {
	if m == nil {
		return (*ListMaterializedConfigVersionsResp)(nil)
	}
	r := new(ListMaterializedConfigVersionsResp)
	r.NextPageToken = m.NextPageToken
	if rhs := m.Versions; rhs != nil {
		tmpContainer := make([]*ListMaterializedConfigVersionsResp_VersionMetadata, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Versions = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ListMaterializedConfigVersionsResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ConfigureServiceReq) CloneVT() *ConfigureServiceReq {
	if m == nil {
		return (*ConfigureServiceReq)(nil)
	}
	r := new(ConfigureServiceReq)
	r.Application = m.Application
	r.ServiceConfig = m.ServiceConfig.CloneVT()
	r.Source = m.Source
	r.SourceMetadata = m.SourceMetadata.CloneVT()
	r.BundleNameOverride = m.BundleNameOverride
	r.SkipRuntimeValidation = m.SkipRuntimeValidation
	r.ForceCreateNewVersion = m.ForceCreateNewVersion
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ConfigureServiceReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ConfigureServiceResp) CloneVT() *ConfigureServiceResp {
	if m == nil {
		return (*ConfigureServiceResp)(nil)
	}
	r := new(ConfigureServiceResp)
	r.ServiceId = m.ServiceId
	r.ConfigVersion = m.ConfigVersion
	r.CreatedNewVersion = m.CreatedNewVersion
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ConfigureServiceResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ValidateConfigureServiceResp) CloneVT() *ValidateConfigureServiceResp {
	if m == nil {
		return (*ValidateConfigureServiceResp)(nil)
	}
	r := new(ValidateConfigureServiceResp)
	r.InputConfig = m.InputConfig.CloneVT()
	r.CompiledConfig = m.CompiledConfig.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ValidateConfigureServiceResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ListServiceConfigVersionsReq) CloneVT() *ListServiceConfigVersionsReq {
	if m == nil {
		return (*ListServiceConfigVersionsReq)(nil)
	}
	r := new(ListServiceConfigVersionsReq)
	r.Application = m.Application
	r.Service = m.Service
	r.PageToken = m.PageToken
	r.PageSize = m.PageSize
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ListServiceConfigVersionsReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ListServiceConfigVersionsResp_VersionMetadata) CloneVT() *ListServiceConfigVersionsResp_VersionMetadata {
	if m == nil {
		return (*ListServiceConfigVersionsResp_VersionMetadata)(nil)
	}
	r := new(ListServiceConfigVersionsResp_VersionMetadata)
	r.Version = m.Version
	r.CreationTimestamp = (*timestamppb.Timestamp)((*timestamppb1.Timestamp)(m.CreationTimestamp).CloneVT())
	r.Source = m.Source
	r.SourceMetadata = m.SourceMetadata.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ListServiceConfigVersionsResp_VersionMetadata) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ListServiceConfigVersionsResp) CloneVT() *ListServiceConfigVersionsResp {
	if m == nil {
		return (*ListServiceConfigVersionsResp)(nil)
	}
	r := new(ListServiceConfigVersionsResp)
	r.NextPageToken = m.NextPageToken
	if rhs := m.Versions; rhs != nil {
		tmpContainer := make([]*ListServiceConfigVersionsResp_VersionMetadata, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Versions = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ListServiceConfigVersionsResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *GetServiceConfigReq) CloneVT() *GetServiceConfigReq {
	if m == nil {
		return (*GetServiceConfigReq)(nil)
	}
	r := new(GetServiceConfigReq)
	r.Application = m.Application
	r.Service = m.Service
	r.ConfigVersion = m.ConfigVersion
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *GetServiceConfigReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *GetServiceConfigResp) CloneVT() *GetServiceConfigResp {
	if m == nil {
		return (*GetServiceConfigResp)(nil)
	}
	r := new(GetServiceConfigResp)
	r.Config = m.Config.CloneVT()
	r.InputConfig = m.InputConfig.CloneVT()
	r.CompiledConfig = m.CompiledConfig.CloneVT()
	r.ConfigVersion = m.ConfigVersion
	r.ConfigVersionMetadata = m.ConfigVersionMetadata.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *GetServiceConfigResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (this *ServiceConfigVersionReference) EqualVT(that *ServiceConfigVersionReference) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Application != that.Application {
		return false
	}
	if this.Service != that.Service {
		return false
	}
	if this.ServiceConfigVersion != that.ServiceConfigVersion {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ServiceConfigVersionReference) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ServiceConfigVersionReference)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *GenerateVersionNameReq) EqualVT(that *GenerateVersionNameReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Application != that.Application {
		return false
	}
	if this.Service != that.Service {
		return false
	}
	if this.ServiceConfigVersion != that.ServiceConfigVersion {
		return false
	}
	if len(this.Parameters) != len(that.Parameters) {
		return false
	}
	for i, vx := range this.Parameters {
		vy := that.Parameters[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &common_config.ParameterValue{}
			}
			if q == nil {
				q = &common_config.ParameterValue{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if len(this.PerReleaseChannel) != len(that.PerReleaseChannel) {
		return false
	}
	for i, vx := range this.PerReleaseChannel {
		vy := that.PerReleaseChannel[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &ApplyParametersReq_PerReleaseChannel{}
			}
			if q == nil {
				q = &ApplyParametersReq_PerReleaseChannel{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GenerateVersionNameReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GenerateVersionNameReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *GenerateVersionNameResp) EqualVT(that *GenerateVersionNameResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Version != that.Version {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GenerateVersionNameResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GenerateVersionNameResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ApplyParametersReq_PerReleaseChannel) EqualVT(that *ApplyParametersReq_PerReleaseChannel) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.ReleaseChannel != that.ReleaseChannel {
		return false
	}
	if len(this.Parameters) != len(that.Parameters) {
		return false
	}
	for i, vx := range this.Parameters {
		vy := that.Parameters[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &common_config.ParameterValue{}
			}
			if q == nil {
				q = &common_config.ParameterValue{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ApplyParametersReq_PerReleaseChannel) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ApplyParametersReq_PerReleaseChannel)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ApplyParametersReq) EqualVT(that *ApplyParametersReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Oneof == nil && that.Oneof != nil {
		return false
	} else if this.Oneof != nil {
		if that.Oneof == nil {
			return false
		}
		if !this.Oneof.(interface {
			EqualVT(isApplyParametersReq_Oneof) bool
		}).EqualVT(that.Oneof) {
			return false
		}
	}
	if this.TestOnlySkipRegistryCheck != that.TestOnlySkipRegistryCheck {
		return false
	}
	if this.Application != that.Application {
		return false
	}
	if this.Source != that.Source {
		return false
	}
	if !this.SourceMetadata.EqualVT(that.SourceMetadata) {
		return false
	}
	if len(this.Parameters) != len(that.Parameters) {
		return false
	}
	for i, vx := range this.Parameters {
		vy := that.Parameters[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &common_config.ParameterValue{}
			}
			if q == nil {
				q = &common_config.ParameterValue{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if len(this.PerReleaseChannel) != len(that.PerReleaseChannel) {
		return false
	}
	for i, vx := range this.PerReleaseChannel {
		vy := that.PerReleaseChannel[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &ApplyParametersReq_PerReleaseChannel{}
			}
			if q == nil {
				q = &ApplyParametersReq_PerReleaseChannel{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if this.BundleNameOverride != that.BundleNameOverride {
		return false
	}
	if this.SkipRuntimeValidation != that.SkipRuntimeValidation {
		return false
	}
	if this.HandleBundleNameDuplicate != that.HandleBundleNameDuplicate {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ApplyParametersReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ApplyParametersReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ApplyParametersReq_ServiceConfig) EqualVT(thatIface isApplyParametersReq_Oneof) bool {
	that, ok := thatIface.(*ApplyParametersReq_ServiceConfig)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ServiceConfig, that.ServiceConfig; p != q {
		if p == nil {
			p = &ServiceConfig{}
		}
		if q == nil {
			q = &ServiceConfig{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ApplyParametersReq_ServiceConfigVersion) EqualVT(thatIface isApplyParametersReq_Oneof) bool {
	that, ok := thatIface.(*ApplyParametersReq_ServiceConfigVersion)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ServiceConfigVersion, that.ServiceConfigVersion; p != q {
		if p == nil {
			p = &ServiceConfigVersionReference{}
		}
		if q == nil {
			q = &ServiceConfigVersionReference{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ApplyParametersResp) EqualVT(that *ApplyParametersResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.ServiceId != that.ServiceId {
		return false
	}
	if this.Version != that.Version {
		return false
	}
	if !this.EfficiencyStat.EqualVT(that.EfficiencyStat) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ApplyParametersResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ApplyParametersResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ValidateApplyParametersResp) EqualVT(that *ValidateApplyParametersResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Config.EqualVT(that.Config) {
		return false
	}
	if !this.CompiledConfig.EqualVT(that.CompiledConfig) {
		return false
	}
	if this.AppVersion != that.AppVersion {
		return false
	}
	if len(this.CompiledServiceInstanceConfigs) != len(that.CompiledServiceInstanceConfigs) {
		return false
	}
	for i, vx := range this.CompiledServiceInstanceConfigs {
		vy := that.CompiledServiceInstanceConfigs[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &CompiledServiceInstanceConfig{}
			}
			if q == nil {
				q = &CompiledServiceInstanceConfig{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ValidateApplyParametersResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ValidateApplyParametersResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *GetMaterializedConfigReq) EqualVT(that *GetMaterializedConfigReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Service != that.Service {
		return false
	}
	if this.Version != that.Version {
		return false
	}
	if this.Application != that.Application {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetMaterializedConfigReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetMaterializedConfigReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *GetMaterializedConfigResp) EqualVT(that *GetMaterializedConfigResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Config.EqualVT(that.Config) {
		return false
	}
	if this.Version != that.Version {
		return false
	}
	if !this.CompiledConfig.EqualVT(that.CompiledConfig) {
		return false
	}
	if len(this.CompiledServiceInstanceConfigs) != len(that.CompiledServiceInstanceConfigs) {
		return false
	}
	for i, vx := range this.CompiledServiceInstanceConfigs {
		vy := that.CompiledServiceInstanceConfigs[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &CompiledServiceInstanceConfig{}
			}
			if q == nil {
				q = &CompiledServiceInstanceConfig{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if !this.VersionMetadata.EqualVT(that.VersionMetadata) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetMaterializedConfigResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetMaterializedConfigResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *DeleteServiceReq) EqualVT(that *DeleteServiceReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Service != that.Service {
		return false
	}
	if this.Application != that.Application {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *DeleteServiceReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*DeleteServiceReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *DeleteServiceResp) EqualVT(that *DeleteServiceResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *DeleteServiceResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*DeleteServiceResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ListServicesReq) EqualVT(that *ListServicesReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Application != that.Application {
		return false
	}
	if this.Detailed != that.Detailed {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ListServicesReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ListServicesReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ListServicesResp) EqualVT(that *ListServicesResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Services) != len(that.Services) {
		return false
	}
	for i, vx := range this.Services {
		vy := that.Services[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Service{}
			}
			if q == nil {
				q = &Service{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ListServicesResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ListServicesResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *GetServiceReq) EqualVT(that *GetServiceReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Application != that.Application {
		return false
	}
	if this.Service != that.Service {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetServiceReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetServiceReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *GetServiceResp) EqualVT(that *GetServiceResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Service.EqualVT(that.Service) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetServiceResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetServiceResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ListServiceInstancesReq) EqualVT(that *ListServiceInstancesReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Application != that.Application {
		return false
	}
	if this.Service != that.Service {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ListServiceInstancesReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ListServiceInstancesReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ListServiceInstancesResp) EqualVT(that *ListServiceInstancesResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.ServiceInstances) != len(that.ServiceInstances) {
		return false
	}
	for i, vx := range this.ServiceInstances {
		vy := that.ServiceInstances[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &ServiceInstance{}
			}
			if q == nil {
				q = &ServiceInstance{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ListServiceInstancesResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ListServiceInstancesResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *GetServiceInstanceReq) EqualVT(that *GetServiceInstanceReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Application != that.Application {
		return false
	}
	if this.Service != that.Service {
		return false
	}
	if this.ReleaseChannel != that.ReleaseChannel {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetServiceInstanceReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetServiceInstanceReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *GetServiceInstanceResp) EqualVT(that *GetServiceInstanceResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.ServiceInstance.EqualVT(that.ServiceInstance) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetServiceInstanceResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetServiceInstanceResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *GetServiceMetricsReq) EqualVT(that *GetServiceMetricsReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Application != that.Application {
		return false
	}
	if this.Service != that.Service {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.StartTimestamp).EqualVT((*timestamppb1.Timestamp)(that.StartTimestamp)) {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.EndTimestamp).EqualVT((*timestamppb1.Timestamp)(that.EndTimestamp)) {
		return false
	}
	if this.IncludeCost != that.IncludeCost {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetServiceMetricsReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetServiceMetricsReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *GetServiceMetricsResp) EqualVT(that *GetServiceMetricsResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.DeploymentMetrics.EqualVT(that.DeploymentMetrics) {
		return false
	}
	if !this.Cost.EqualVT(that.Cost) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetServiceMetricsResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetServiceMetricsResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *GetServiceInsightsReq) EqualVT(that *GetServiceInsightsReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Application != that.Application {
		return false
	}
	if this.Service != that.Service {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetServiceInsightsReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetServiceInsightsReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ListCommitsReq) EqualVT(that *ListCommitsReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Application != that.Application {
		return false
	}
	if this.Service != that.Service {
		return false
	}
	if this.PageToken != that.PageToken {
		return false
	}
	if this.PageSize != that.PageSize {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ListCommitsReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ListCommitsReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ListCommitsResp) EqualVT(that *ListCommitsResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Commits) != len(that.Commits) {
		return false
	}
	for i, vx := range this.Commits {
		vy := that.Commits[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &repo.Commit{}
			}
			if q == nil {
				q = &repo.Commit{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if this.NextPageToken != that.NextPageToken {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ListCommitsResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ListCommitsResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *GetServiceInsightsResp) EqualVT(that *GetServiceInsightsResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Insights) != len(that.Insights) {
		return false
	}
	for i, vx := range this.Insights {
		vy := that.Insights[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &insights.Insight{}
			}
			if q == nil {
				q = &insights.Insight{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetServiceInsightsResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetServiceInsightsResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *SnoozeServiceInsightReq) EqualVT(that *SnoozeServiceInsightReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Application != that.Application {
		return false
	}
	if this.Service != that.Service {
		return false
	}
	if this.Class != that.Class {
		return false
	}
	if !(*durationpb1.Duration)(this.Duration).EqualVT((*durationpb1.Duration)(that.Duration)) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *SnoozeServiceInsightReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*SnoozeServiceInsightReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *SnoozeServiceInsightResp) EqualVT(that *SnoozeServiceInsightResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *SnoozeServiceInsightResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*SnoozeServiceInsightResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *GetServiceMetadataReq) EqualVT(that *GetServiceMetadataReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Application != that.Application {
		return false
	}
	if this.Service != that.Service {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetServiceMetadataReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetServiceMetadataReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *GetServiceMetadataResp) EqualVT(that *GetServiceMetadataResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Metadata.EqualVT(that.Metadata) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetServiceMetadataResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetServiceMetadataResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *SetServiceMetadataReq) EqualVT(that *SetServiceMetadataReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Application != that.Application {
		return false
	}
	if this.Service != that.Service {
		return false
	}
	if !this.Metadata.EqualVT(that.Metadata) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *SetServiceMetadataReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*SetServiceMetadataReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *SetServiceMetadataResp) EqualVT(that *SetServiceMetadataResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *SetServiceMetadataResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*SetServiceMetadataResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *SetServiceConvergenceModeReq) EqualVT(that *SetServiceConvergenceModeReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Application != that.Application {
		return false
	}
	if this.Service != that.Service {
		return false
	}
	if this.ConvergenceMode != that.ConvergenceMode {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *SetServiceConvergenceModeReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*SetServiceConvergenceModeReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *SetServiceConvergenceModeResp) EqualVT(that *SetServiceConvergenceModeResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *SetServiceConvergenceModeResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*SetServiceConvergenceModeResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ListMaterializedConfigVersionsReq) EqualVT(that *ListMaterializedConfigVersionsReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Application != that.Application {
		return false
	}
	if this.Service != that.Service {
		return false
	}
	if this.PageToken != that.PageToken {
		return false
	}
	if this.PageSize != that.PageSize {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ListMaterializedConfigVersionsReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ListMaterializedConfigVersionsReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ListMaterializedConfigVersionsResp_VersionMetadata) EqualVT(that *ListMaterializedConfigVersionsResp_VersionMetadata) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Version != that.Version {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.CreationTimestamp).EqualVT((*timestamppb1.Timestamp)(that.CreationTimestamp)) {
		return false
	}
	if this.ConfigVersion != that.ConfigVersion {
		return false
	}
	if !this.ParameterValues.EqualVT(that.ParameterValues) {
		return false
	}
	if this.Source != that.Source {
		return false
	}
	if !this.SourceMetadata.EqualVT(that.SourceMetadata) {
		return false
	}
	if len(this.Parameters) != len(that.Parameters) {
		return false
	}
	for i, vx := range this.Parameters {
		vy := that.Parameters[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &common_config.ParameterDefinition{}
			}
			if q == nil {
				q = &common_config.ParameterDefinition{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if this.AppVersion != that.AppVersion {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ListMaterializedConfigVersionsResp_VersionMetadata) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ListMaterializedConfigVersionsResp_VersionMetadata)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ListMaterializedConfigVersionsResp) EqualVT(that *ListMaterializedConfigVersionsResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Versions) != len(that.Versions) {
		return false
	}
	for i, vx := range this.Versions {
		vy := that.Versions[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &ListMaterializedConfigVersionsResp_VersionMetadata{}
			}
			if q == nil {
				q = &ListMaterializedConfigVersionsResp_VersionMetadata{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if this.NextPageToken != that.NextPageToken {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ListMaterializedConfigVersionsResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ListMaterializedConfigVersionsResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ConfigureServiceReq) EqualVT(that *ConfigureServiceReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Application != that.Application {
		return false
	}
	if !this.ServiceConfig.EqualVT(that.ServiceConfig) {
		return false
	}
	if this.Source != that.Source {
		return false
	}
	if !this.SourceMetadata.EqualVT(that.SourceMetadata) {
		return false
	}
	if this.BundleNameOverride != that.BundleNameOverride {
		return false
	}
	if this.SkipRuntimeValidation != that.SkipRuntimeValidation {
		return false
	}
	if this.ForceCreateNewVersion != that.ForceCreateNewVersion {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ConfigureServiceReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ConfigureServiceReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ConfigureServiceResp) EqualVT(that *ConfigureServiceResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.ServiceId != that.ServiceId {
		return false
	}
	if this.ConfigVersion != that.ConfigVersion {
		return false
	}
	if this.CreatedNewVersion != that.CreatedNewVersion {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ConfigureServiceResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ConfigureServiceResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ValidateConfigureServiceResp) EqualVT(that *ValidateConfigureServiceResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.InputConfig.EqualVT(that.InputConfig) {
		return false
	}
	if !this.CompiledConfig.EqualVT(that.CompiledConfig) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ValidateConfigureServiceResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ValidateConfigureServiceResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ListServiceConfigVersionsReq) EqualVT(that *ListServiceConfigVersionsReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Application != that.Application {
		return false
	}
	if this.Service != that.Service {
		return false
	}
	if this.PageToken != that.PageToken {
		return false
	}
	if this.PageSize != that.PageSize {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ListServiceConfigVersionsReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ListServiceConfigVersionsReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ListServiceConfigVersionsResp_VersionMetadata) EqualVT(that *ListServiceConfigVersionsResp_VersionMetadata) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Version != that.Version {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.CreationTimestamp).EqualVT((*timestamppb1.Timestamp)(that.CreationTimestamp)) {
		return false
	}
	if this.Source != that.Source {
		return false
	}
	if !this.SourceMetadata.EqualVT(that.SourceMetadata) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ListServiceConfigVersionsResp_VersionMetadata) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ListServiceConfigVersionsResp_VersionMetadata)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ListServiceConfigVersionsResp) EqualVT(that *ListServiceConfigVersionsResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Versions) != len(that.Versions) {
		return false
	}
	for i, vx := range this.Versions {
		vy := that.Versions[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &ListServiceConfigVersionsResp_VersionMetadata{}
			}
			if q == nil {
				q = &ListServiceConfigVersionsResp_VersionMetadata{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if this.NextPageToken != that.NextPageToken {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ListServiceConfigVersionsResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ListServiceConfigVersionsResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *GetServiceConfigReq) EqualVT(that *GetServiceConfigReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Application != that.Application {
		return false
	}
	if this.Service != that.Service {
		return false
	}
	if this.ConfigVersion != that.ConfigVersion {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetServiceConfigReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetServiceConfigReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *GetServiceConfigResp) EqualVT(that *GetServiceConfigResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Config.EqualVT(that.Config) {
		return false
	}
	if this.ConfigVersion != that.ConfigVersion {
		return false
	}
	if !this.ConfigVersionMetadata.EqualVT(that.ConfigVersionMetadata) {
		return false
	}
	if !this.InputConfig.EqualVT(that.InputConfig) {
		return false
	}
	if !this.CompiledConfig.EqualVT(that.CompiledConfig) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetServiceConfigResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetServiceConfigResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
