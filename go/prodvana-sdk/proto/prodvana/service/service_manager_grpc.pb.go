// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.10
// source: prodvana/service/service_manager.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ServiceManager_ConfigureService2_FullMethodName              = "/prodvana.service.ServiceManager/ConfigureService2"
	ServiceManager_ListServiceConfigVersions_FullMethodName      = "/prodvana.service.ServiceManager/ListServiceConfigVersions"
	ServiceManager_GetServiceConfig2_FullMethodName              = "/prodvana.service.ServiceManager/GetServiceConfig2"
	ServiceManager_ApplyParameters_FullMethodName                = "/prodvana.service.ServiceManager/ApplyParameters"
	ServiceManager_ValidateApplyParameters_FullMethodName        = "/prodvana.service.ServiceManager/ValidateApplyParameters"
	ServiceManager_GetMaterializedConfig_FullMethodName          = "/prodvana.service.ServiceManager/GetMaterializedConfig"
	ServiceManager_ListMaterializedConfigVersions_FullMethodName = "/prodvana.service.ServiceManager/ListMaterializedConfigVersions"
	ServiceManager_DeleteService_FullMethodName                  = "/prodvana.service.ServiceManager/DeleteService"
	ServiceManager_ListServices_FullMethodName                   = "/prodvana.service.ServiceManager/ListServices"
	ServiceManager_ListServicesV2_FullMethodName                 = "/prodvana.service.ServiceManager/ListServicesV2"
	ServiceManager_ListCommits_FullMethodName                    = "/prodvana.service.ServiceManager/ListCommits"
	ServiceManager_GetService_FullMethodName                     = "/prodvana.service.ServiceManager/GetService"
	ServiceManager_GetServiceV2_FullMethodName                   = "/prodvana.service.ServiceManager/GetServiceV2"
	ServiceManager_ListServiceInstances_FullMethodName           = "/prodvana.service.ServiceManager/ListServiceInstances"
	ServiceManager_ListServiceInstancesV2_FullMethodName         = "/prodvana.service.ServiceManager/ListServiceInstancesV2"
	ServiceManager_GetServiceInstance_FullMethodName             = "/prodvana.service.ServiceManager/GetServiceInstance"
	ServiceManager_GetServiceInstanceV2_FullMethodName           = "/prodvana.service.ServiceManager/GetServiceInstanceV2"
	ServiceManager_GetServiceMetrics_FullMethodName              = "/prodvana.service.ServiceManager/GetServiceMetrics"
	ServiceManager_GetServiceInsights_FullMethodName             = "/prodvana.service.ServiceManager/GetServiceInsights"
	ServiceManager_SnoozeServiceInsight_FullMethodName           = "/prodvana.service.ServiceManager/SnoozeServiceInsight"
	ServiceManager_GetServiceMetadata_FullMethodName             = "/prodvana.service.ServiceManager/GetServiceMetadata"
	ServiceManager_SetServiceMetadata_FullMethodName             = "/prodvana.service.ServiceManager/SetServiceMetadata"
)

// ServiceManagerClient is the client API for ServiceManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceManagerClient interface {
	// TODO(naphat) rename this to ConfigureService
	ConfigureService2(ctx context.Context, in *ConfigureService2Req, opts ...grpc.CallOption) (*ConfigureService2Resp, error)
	ListServiceConfigVersions(ctx context.Context, in *ListServiceConfigVersionsReq, opts ...grpc.CallOption) (*ListServiceConfigVersionsResp, error)
	// unparametrized configs
	GetServiceConfig2(ctx context.Context, in *GetServiceConfig2Req, opts ...grpc.CallOption) (*GetServiceConfig2Resp, error)
	ApplyParameters(ctx context.Context, in *ApplyParametersReq, opts ...grpc.CallOption) (*ApplyParametersResp, error)
	ValidateApplyParameters(ctx context.Context, in *ApplyParametersReq, opts ...grpc.CallOption) (*ValidateApplyParametersResp, error)
	GetMaterializedConfig(ctx context.Context, in *GetMaterializedConfigReq, opts ...grpc.CallOption) (*GetMaterializedConfigResp, error)
	ListMaterializedConfigVersions(ctx context.Context, in *ListMaterializedConfigVersionsReq, opts ...grpc.CallOption) (*ListMaterializedConfigVersionsResp, error)
	DeleteService(ctx context.Context, in *DeleteServiceReq, opts ...grpc.CallOption) (*DeleteServiceResp, error)
	ListServices(ctx context.Context, in *ListServicesReq, opts ...grpc.CallOption) (*ListServicesResp, error)
	// identical to ListServices, kept around for compatibility purposes
	ListServicesV2(ctx context.Context, in *ListServicesReq, opts ...grpc.CallOption) (*ListServicesResp, error)
	ListCommits(ctx context.Context, in *ListCommitsReq, opts ...grpc.CallOption) (*ListCommitsResp, error)
	GetService(ctx context.Context, in *GetServiceReq, opts ...grpc.CallOption) (*GetServiceResp, error)
	// identical to GetService, kept around for compatibility purposes
	GetServiceV2(ctx context.Context, in *GetServiceReq, opts ...grpc.CallOption) (*GetServiceResp, error)
	ListServiceInstances(ctx context.Context, in *ListServiceInstancesReq, opts ...grpc.CallOption) (*ListServiceInstancesResp, error)
	// identical to ListServiceInstances, kept around for compatibility purposes
	ListServiceInstancesV2(ctx context.Context, in *ListServiceInstancesReq, opts ...grpc.CallOption) (*ListServiceInstancesResp, error)
	GetServiceInstance(ctx context.Context, in *GetServiceInstanceReq, opts ...grpc.CallOption) (*GetServiceInstanceResp, error)
	// identical to GetServiceInstance, kept around for compatibility purposes
	GetServiceInstanceV2(ctx context.Context, in *GetServiceInstanceReq, opts ...grpc.CallOption) (*GetServiceInstanceResp, error)
	GetServiceMetrics(ctx context.Context, in *GetServiceMetricsReq, opts ...grpc.CallOption) (*GetServiceMetricsResp, error)
	GetServiceInsights(ctx context.Context, in *GetServiceInsightsReq, opts ...grpc.CallOption) (*GetServiceInsightsResp, error)
	SnoozeServiceInsight(ctx context.Context, in *SnoozeServiceInsightReq, opts ...grpc.CallOption) (*SnoozeServiceInsightResp, error)
	GetServiceMetadata(ctx context.Context, in *GetServiceMetadataReq, opts ...grpc.CallOption) (*GetServiceMetadataResp, error)
	SetServiceMetadata(ctx context.Context, in *SetServiceMetadataReq, opts ...grpc.CallOption) (*SetServiceMetadataResp, error)
}

type serviceManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceManagerClient(cc grpc.ClientConnInterface) ServiceManagerClient {
	return &serviceManagerClient{cc}
}

func (c *serviceManagerClient) ConfigureService2(ctx context.Context, in *ConfigureService2Req, opts ...grpc.CallOption) (*ConfigureService2Resp, error) {
	out := new(ConfigureService2Resp)
	err := c.cc.Invoke(ctx, ServiceManager_ConfigureService2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceManagerClient) ListServiceConfigVersions(ctx context.Context, in *ListServiceConfigVersionsReq, opts ...grpc.CallOption) (*ListServiceConfigVersionsResp, error) {
	out := new(ListServiceConfigVersionsResp)
	err := c.cc.Invoke(ctx, ServiceManager_ListServiceConfigVersions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceManagerClient) GetServiceConfig2(ctx context.Context, in *GetServiceConfig2Req, opts ...grpc.CallOption) (*GetServiceConfig2Resp, error) {
	out := new(GetServiceConfig2Resp)
	err := c.cc.Invoke(ctx, ServiceManager_GetServiceConfig2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceManagerClient) ApplyParameters(ctx context.Context, in *ApplyParametersReq, opts ...grpc.CallOption) (*ApplyParametersResp, error) {
	out := new(ApplyParametersResp)
	err := c.cc.Invoke(ctx, ServiceManager_ApplyParameters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceManagerClient) ValidateApplyParameters(ctx context.Context, in *ApplyParametersReq, opts ...grpc.CallOption) (*ValidateApplyParametersResp, error) {
	out := new(ValidateApplyParametersResp)
	err := c.cc.Invoke(ctx, ServiceManager_ValidateApplyParameters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceManagerClient) GetMaterializedConfig(ctx context.Context, in *GetMaterializedConfigReq, opts ...grpc.CallOption) (*GetMaterializedConfigResp, error) {
	out := new(GetMaterializedConfigResp)
	err := c.cc.Invoke(ctx, ServiceManager_GetMaterializedConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceManagerClient) ListMaterializedConfigVersions(ctx context.Context, in *ListMaterializedConfigVersionsReq, opts ...grpc.CallOption) (*ListMaterializedConfigVersionsResp, error) {
	out := new(ListMaterializedConfigVersionsResp)
	err := c.cc.Invoke(ctx, ServiceManager_ListMaterializedConfigVersions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceManagerClient) DeleteService(ctx context.Context, in *DeleteServiceReq, opts ...grpc.CallOption) (*DeleteServiceResp, error) {
	out := new(DeleteServiceResp)
	err := c.cc.Invoke(ctx, ServiceManager_DeleteService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceManagerClient) ListServices(ctx context.Context, in *ListServicesReq, opts ...grpc.CallOption) (*ListServicesResp, error) {
	out := new(ListServicesResp)
	err := c.cc.Invoke(ctx, ServiceManager_ListServices_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceManagerClient) ListServicesV2(ctx context.Context, in *ListServicesReq, opts ...grpc.CallOption) (*ListServicesResp, error) {
	out := new(ListServicesResp)
	err := c.cc.Invoke(ctx, ServiceManager_ListServicesV2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceManagerClient) ListCommits(ctx context.Context, in *ListCommitsReq, opts ...grpc.CallOption) (*ListCommitsResp, error) {
	out := new(ListCommitsResp)
	err := c.cc.Invoke(ctx, ServiceManager_ListCommits_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceManagerClient) GetService(ctx context.Context, in *GetServiceReq, opts ...grpc.CallOption) (*GetServiceResp, error) {
	out := new(GetServiceResp)
	err := c.cc.Invoke(ctx, ServiceManager_GetService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceManagerClient) GetServiceV2(ctx context.Context, in *GetServiceReq, opts ...grpc.CallOption) (*GetServiceResp, error) {
	out := new(GetServiceResp)
	err := c.cc.Invoke(ctx, ServiceManager_GetServiceV2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceManagerClient) ListServiceInstances(ctx context.Context, in *ListServiceInstancesReq, opts ...grpc.CallOption) (*ListServiceInstancesResp, error) {
	out := new(ListServiceInstancesResp)
	err := c.cc.Invoke(ctx, ServiceManager_ListServiceInstances_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceManagerClient) ListServiceInstancesV2(ctx context.Context, in *ListServiceInstancesReq, opts ...grpc.CallOption) (*ListServiceInstancesResp, error) {
	out := new(ListServiceInstancesResp)
	err := c.cc.Invoke(ctx, ServiceManager_ListServiceInstancesV2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceManagerClient) GetServiceInstance(ctx context.Context, in *GetServiceInstanceReq, opts ...grpc.CallOption) (*GetServiceInstanceResp, error) {
	out := new(GetServiceInstanceResp)
	err := c.cc.Invoke(ctx, ServiceManager_GetServiceInstance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceManagerClient) GetServiceInstanceV2(ctx context.Context, in *GetServiceInstanceReq, opts ...grpc.CallOption) (*GetServiceInstanceResp, error) {
	out := new(GetServiceInstanceResp)
	err := c.cc.Invoke(ctx, ServiceManager_GetServiceInstanceV2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceManagerClient) GetServiceMetrics(ctx context.Context, in *GetServiceMetricsReq, opts ...grpc.CallOption) (*GetServiceMetricsResp, error) {
	out := new(GetServiceMetricsResp)
	err := c.cc.Invoke(ctx, ServiceManager_GetServiceMetrics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceManagerClient) GetServiceInsights(ctx context.Context, in *GetServiceInsightsReq, opts ...grpc.CallOption) (*GetServiceInsightsResp, error) {
	out := new(GetServiceInsightsResp)
	err := c.cc.Invoke(ctx, ServiceManager_GetServiceInsights_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceManagerClient) SnoozeServiceInsight(ctx context.Context, in *SnoozeServiceInsightReq, opts ...grpc.CallOption) (*SnoozeServiceInsightResp, error) {
	out := new(SnoozeServiceInsightResp)
	err := c.cc.Invoke(ctx, ServiceManager_SnoozeServiceInsight_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceManagerClient) GetServiceMetadata(ctx context.Context, in *GetServiceMetadataReq, opts ...grpc.CallOption) (*GetServiceMetadataResp, error) {
	out := new(GetServiceMetadataResp)
	err := c.cc.Invoke(ctx, ServiceManager_GetServiceMetadata_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceManagerClient) SetServiceMetadata(ctx context.Context, in *SetServiceMetadataReq, opts ...grpc.CallOption) (*SetServiceMetadataResp, error) {
	out := new(SetServiceMetadataResp)
	err := c.cc.Invoke(ctx, ServiceManager_SetServiceMetadata_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceManagerServer is the server API for ServiceManager service.
// All implementations must embed UnimplementedServiceManagerServer
// for forward compatibility
type ServiceManagerServer interface {
	// TODO(naphat) rename this to ConfigureService
	ConfigureService2(context.Context, *ConfigureService2Req) (*ConfigureService2Resp, error)
	ListServiceConfigVersions(context.Context, *ListServiceConfigVersionsReq) (*ListServiceConfigVersionsResp, error)
	// unparametrized configs
	GetServiceConfig2(context.Context, *GetServiceConfig2Req) (*GetServiceConfig2Resp, error)
	ApplyParameters(context.Context, *ApplyParametersReq) (*ApplyParametersResp, error)
	ValidateApplyParameters(context.Context, *ApplyParametersReq) (*ValidateApplyParametersResp, error)
	GetMaterializedConfig(context.Context, *GetMaterializedConfigReq) (*GetMaterializedConfigResp, error)
	ListMaterializedConfigVersions(context.Context, *ListMaterializedConfigVersionsReq) (*ListMaterializedConfigVersionsResp, error)
	DeleteService(context.Context, *DeleteServiceReq) (*DeleteServiceResp, error)
	ListServices(context.Context, *ListServicesReq) (*ListServicesResp, error)
	// identical to ListServices, kept around for compatibility purposes
	ListServicesV2(context.Context, *ListServicesReq) (*ListServicesResp, error)
	ListCommits(context.Context, *ListCommitsReq) (*ListCommitsResp, error)
	GetService(context.Context, *GetServiceReq) (*GetServiceResp, error)
	// identical to GetService, kept around for compatibility purposes
	GetServiceV2(context.Context, *GetServiceReq) (*GetServiceResp, error)
	ListServiceInstances(context.Context, *ListServiceInstancesReq) (*ListServiceInstancesResp, error)
	// identical to ListServiceInstances, kept around for compatibility purposes
	ListServiceInstancesV2(context.Context, *ListServiceInstancesReq) (*ListServiceInstancesResp, error)
	GetServiceInstance(context.Context, *GetServiceInstanceReq) (*GetServiceInstanceResp, error)
	// identical to GetServiceInstance, kept around for compatibility purposes
	GetServiceInstanceV2(context.Context, *GetServiceInstanceReq) (*GetServiceInstanceResp, error)
	GetServiceMetrics(context.Context, *GetServiceMetricsReq) (*GetServiceMetricsResp, error)
	GetServiceInsights(context.Context, *GetServiceInsightsReq) (*GetServiceInsightsResp, error)
	SnoozeServiceInsight(context.Context, *SnoozeServiceInsightReq) (*SnoozeServiceInsightResp, error)
	GetServiceMetadata(context.Context, *GetServiceMetadataReq) (*GetServiceMetadataResp, error)
	SetServiceMetadata(context.Context, *SetServiceMetadataReq) (*SetServiceMetadataResp, error)
	mustEmbedUnimplementedServiceManagerServer()
}

// UnimplementedServiceManagerServer must be embedded to have forward compatible implementations.
type UnimplementedServiceManagerServer struct {
}

func (UnimplementedServiceManagerServer) ConfigureService2(context.Context, *ConfigureService2Req) (*ConfigureService2Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureService2 not implemented")
}
func (UnimplementedServiceManagerServer) ListServiceConfigVersions(context.Context, *ListServiceConfigVersionsReq) (*ListServiceConfigVersionsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServiceConfigVersions not implemented")
}
func (UnimplementedServiceManagerServer) GetServiceConfig2(context.Context, *GetServiceConfig2Req) (*GetServiceConfig2Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceConfig2 not implemented")
}
func (UnimplementedServiceManagerServer) ApplyParameters(context.Context, *ApplyParametersReq) (*ApplyParametersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyParameters not implemented")
}
func (UnimplementedServiceManagerServer) ValidateApplyParameters(context.Context, *ApplyParametersReq) (*ValidateApplyParametersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateApplyParameters not implemented")
}
func (UnimplementedServiceManagerServer) GetMaterializedConfig(context.Context, *GetMaterializedConfigReq) (*GetMaterializedConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMaterializedConfig not implemented")
}
func (UnimplementedServiceManagerServer) ListMaterializedConfigVersions(context.Context, *ListMaterializedConfigVersionsReq) (*ListMaterializedConfigVersionsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMaterializedConfigVersions not implemented")
}
func (UnimplementedServiceManagerServer) DeleteService(context.Context, *DeleteServiceReq) (*DeleteServiceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteService not implemented")
}
func (UnimplementedServiceManagerServer) ListServices(context.Context, *ListServicesReq) (*ListServicesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServices not implemented")
}
func (UnimplementedServiceManagerServer) ListServicesV2(context.Context, *ListServicesReq) (*ListServicesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServicesV2 not implemented")
}
func (UnimplementedServiceManagerServer) ListCommits(context.Context, *ListCommitsReq) (*ListCommitsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommits not implemented")
}
func (UnimplementedServiceManagerServer) GetService(context.Context, *GetServiceReq) (*GetServiceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetService not implemented")
}
func (UnimplementedServiceManagerServer) GetServiceV2(context.Context, *GetServiceReq) (*GetServiceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceV2 not implemented")
}
func (UnimplementedServiceManagerServer) ListServiceInstances(context.Context, *ListServiceInstancesReq) (*ListServiceInstancesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServiceInstances not implemented")
}
func (UnimplementedServiceManagerServer) ListServiceInstancesV2(context.Context, *ListServiceInstancesReq) (*ListServiceInstancesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServiceInstancesV2 not implemented")
}
func (UnimplementedServiceManagerServer) GetServiceInstance(context.Context, *GetServiceInstanceReq) (*GetServiceInstanceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceInstance not implemented")
}
func (UnimplementedServiceManagerServer) GetServiceInstanceV2(context.Context, *GetServiceInstanceReq) (*GetServiceInstanceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceInstanceV2 not implemented")
}
func (UnimplementedServiceManagerServer) GetServiceMetrics(context.Context, *GetServiceMetricsReq) (*GetServiceMetricsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceMetrics not implemented")
}
func (UnimplementedServiceManagerServer) GetServiceInsights(context.Context, *GetServiceInsightsReq) (*GetServiceInsightsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceInsights not implemented")
}
func (UnimplementedServiceManagerServer) SnoozeServiceInsight(context.Context, *SnoozeServiceInsightReq) (*SnoozeServiceInsightResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SnoozeServiceInsight not implemented")
}
func (UnimplementedServiceManagerServer) GetServiceMetadata(context.Context, *GetServiceMetadataReq) (*GetServiceMetadataResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceMetadata not implemented")
}
func (UnimplementedServiceManagerServer) SetServiceMetadata(context.Context, *SetServiceMetadataReq) (*SetServiceMetadataResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetServiceMetadata not implemented")
}
func (UnimplementedServiceManagerServer) mustEmbedUnimplementedServiceManagerServer() {}

// UnsafeServiceManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceManagerServer will
// result in compilation errors.
type UnsafeServiceManagerServer interface {
	mustEmbedUnimplementedServiceManagerServer()
}

func RegisterServiceManagerServer(s grpc.ServiceRegistrar, srv ServiceManagerServer) {
	s.RegisterService(&ServiceManager_ServiceDesc, srv)
}

func _ServiceManager_ConfigureService2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureService2Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceManagerServer).ConfigureService2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceManager_ConfigureService2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceManagerServer).ConfigureService2(ctx, req.(*ConfigureService2Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceManager_ListServiceConfigVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServiceConfigVersionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceManagerServer).ListServiceConfigVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceManager_ListServiceConfigVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceManagerServer).ListServiceConfigVersions(ctx, req.(*ListServiceConfigVersionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceManager_GetServiceConfig2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceConfig2Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceManagerServer).GetServiceConfig2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceManager_GetServiceConfig2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceManagerServer).GetServiceConfig2(ctx, req.(*GetServiceConfig2Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceManager_ApplyParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyParametersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceManagerServer).ApplyParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceManager_ApplyParameters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceManagerServer).ApplyParameters(ctx, req.(*ApplyParametersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceManager_ValidateApplyParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyParametersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceManagerServer).ValidateApplyParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceManager_ValidateApplyParameters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceManagerServer).ValidateApplyParameters(ctx, req.(*ApplyParametersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceManager_GetMaterializedConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMaterializedConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceManagerServer).GetMaterializedConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceManager_GetMaterializedConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceManagerServer).GetMaterializedConfig(ctx, req.(*GetMaterializedConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceManager_ListMaterializedConfigVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMaterializedConfigVersionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceManagerServer).ListMaterializedConfigVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceManager_ListMaterializedConfigVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceManagerServer).ListMaterializedConfigVersions(ctx, req.(*ListMaterializedConfigVersionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceManager_DeleteService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceManagerServer).DeleteService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceManager_DeleteService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceManagerServer).DeleteService(ctx, req.(*DeleteServiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceManager_ListServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServicesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceManagerServer).ListServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceManager_ListServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceManagerServer).ListServices(ctx, req.(*ListServicesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceManager_ListServicesV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServicesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceManagerServer).ListServicesV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceManager_ListServicesV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceManagerServer).ListServicesV2(ctx, req.(*ListServicesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceManager_ListCommits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommitsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceManagerServer).ListCommits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceManager_ListCommits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceManagerServer).ListCommits(ctx, req.(*ListCommitsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceManager_GetService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceManagerServer).GetService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceManager_GetService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceManagerServer).GetService(ctx, req.(*GetServiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceManager_GetServiceV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceManagerServer).GetServiceV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceManager_GetServiceV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceManagerServer).GetServiceV2(ctx, req.(*GetServiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceManager_ListServiceInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServiceInstancesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceManagerServer).ListServiceInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceManager_ListServiceInstances_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceManagerServer).ListServiceInstances(ctx, req.(*ListServiceInstancesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceManager_ListServiceInstancesV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServiceInstancesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceManagerServer).ListServiceInstancesV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceManager_ListServiceInstancesV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceManagerServer).ListServiceInstancesV2(ctx, req.(*ListServiceInstancesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceManager_GetServiceInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceInstanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceManagerServer).GetServiceInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceManager_GetServiceInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceManagerServer).GetServiceInstance(ctx, req.(*GetServiceInstanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceManager_GetServiceInstanceV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceInstanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceManagerServer).GetServiceInstanceV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceManager_GetServiceInstanceV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceManagerServer).GetServiceInstanceV2(ctx, req.(*GetServiceInstanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceManager_GetServiceMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceMetricsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceManagerServer).GetServiceMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceManager_GetServiceMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceManagerServer).GetServiceMetrics(ctx, req.(*GetServiceMetricsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceManager_GetServiceInsights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceInsightsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceManagerServer).GetServiceInsights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceManager_GetServiceInsights_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceManagerServer).GetServiceInsights(ctx, req.(*GetServiceInsightsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceManager_SnoozeServiceInsight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnoozeServiceInsightReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceManagerServer).SnoozeServiceInsight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceManager_SnoozeServiceInsight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceManagerServer).SnoozeServiceInsight(ctx, req.(*SnoozeServiceInsightReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceManager_GetServiceMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceMetadataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceManagerServer).GetServiceMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceManager_GetServiceMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceManagerServer).GetServiceMetadata(ctx, req.(*GetServiceMetadataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceManager_SetServiceMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetServiceMetadataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceManagerServer).SetServiceMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceManager_SetServiceMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceManagerServer).SetServiceMetadata(ctx, req.(*SetServiceMetadataReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceManager_ServiceDesc is the grpc.ServiceDesc for ServiceManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "prodvana.service.ServiceManager",
	HandlerType: (*ServiceManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConfigureService2",
			Handler:    _ServiceManager_ConfigureService2_Handler,
		},
		{
			MethodName: "ListServiceConfigVersions",
			Handler:    _ServiceManager_ListServiceConfigVersions_Handler,
		},
		{
			MethodName: "GetServiceConfig2",
			Handler:    _ServiceManager_GetServiceConfig2_Handler,
		},
		{
			MethodName: "ApplyParameters",
			Handler:    _ServiceManager_ApplyParameters_Handler,
		},
		{
			MethodName: "ValidateApplyParameters",
			Handler:    _ServiceManager_ValidateApplyParameters_Handler,
		},
		{
			MethodName: "GetMaterializedConfig",
			Handler:    _ServiceManager_GetMaterializedConfig_Handler,
		},
		{
			MethodName: "ListMaterializedConfigVersions",
			Handler:    _ServiceManager_ListMaterializedConfigVersions_Handler,
		},
		{
			MethodName: "DeleteService",
			Handler:    _ServiceManager_DeleteService_Handler,
		},
		{
			MethodName: "ListServices",
			Handler:    _ServiceManager_ListServices_Handler,
		},
		{
			MethodName: "ListServicesV2",
			Handler:    _ServiceManager_ListServicesV2_Handler,
		},
		{
			MethodName: "ListCommits",
			Handler:    _ServiceManager_ListCommits_Handler,
		},
		{
			MethodName: "GetService",
			Handler:    _ServiceManager_GetService_Handler,
		},
		{
			MethodName: "GetServiceV2",
			Handler:    _ServiceManager_GetServiceV2_Handler,
		},
		{
			MethodName: "ListServiceInstances",
			Handler:    _ServiceManager_ListServiceInstances_Handler,
		},
		{
			MethodName: "ListServiceInstancesV2",
			Handler:    _ServiceManager_ListServiceInstancesV2_Handler,
		},
		{
			MethodName: "GetServiceInstance",
			Handler:    _ServiceManager_GetServiceInstance_Handler,
		},
		{
			MethodName: "GetServiceInstanceV2",
			Handler:    _ServiceManager_GetServiceInstanceV2_Handler,
		},
		{
			MethodName: "GetServiceMetrics",
			Handler:    _ServiceManager_GetServiceMetrics_Handler,
		},
		{
			MethodName: "GetServiceInsights",
			Handler:    _ServiceManager_GetServiceInsights_Handler,
		},
		{
			MethodName: "SnoozeServiceInsight",
			Handler:    _ServiceManager_SnoozeServiceInsight_Handler,
		},
		{
			MethodName: "GetServiceMetadata",
			Handler:    _ServiceManager_GetServiceMetadata_Handler,
		},
		{
			MethodName: "SetServiceMetadata",
			Handler:    _ServiceManager_SetServiceMetadata_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "prodvana/service/service_manager.proto",
}
