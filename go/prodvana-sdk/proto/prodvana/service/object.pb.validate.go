// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: prodvana/service/object.proto

package service

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ExternalAddr with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ExternalAddr) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExternalAddr with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExternalAddrMultiError, or
// nil if none found.
func (m *ExternalAddr) ValidateAll() error {
	return m.validate(true)
}

func (m *ExternalAddr) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Addr

	// no validation rules for Type

	if len(errors) > 0 {
		return ExternalAddrMultiError(errors)
	}

	return nil
}

// ExternalAddrMultiError is an error wrapping multiple validation errors
// returned by ExternalAddr.ValidateAll() if the designated constraints aren't met.
type ExternalAddrMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExternalAddrMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExternalAddrMultiError) AllErrors() []error { return m }

// ExternalAddrValidationError is the validation error returned by
// ExternalAddr.Validate if the designated constraints aren't met.
type ExternalAddrValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExternalAddrValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExternalAddrValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExternalAddrValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExternalAddrValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExternalAddrValidationError) ErrorName() string { return "ExternalAddrValidationError" }

// Error satisfies the builtin error interface
func (e ExternalAddrValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExternalAddr.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExternalAddrValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExternalAddrValidationError{}

// Validate checks the field values on Push with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Push) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Push with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PushMultiError, or nil if none found.
func (m *Push) ValidateAll() error {
	return m.validate(true)
}

func (m *Push) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceId

	// no validation rules for ServiceName

	// no validation rules for ReleaseChannelId

	// no validation rules for ReleaseChannelName

	if all {
		switch v := interface{}(m.GetPushCreationTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PushValidationError{
					field:  "PushCreationTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PushValidationError{
					field:  "PushCreationTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPushCreationTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PushValidationError{
				field:  "PushCreationTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Version

	// no validation rules for Initiator

	// no validation rules for State

	if all {
		switch v := interface{}(m.GetLastUpdateTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PushValidationError{
					field:  "LastUpdateTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PushValidationError{
					field:  "LastUpdateTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastUpdateTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PushValidationError{
				field:  "LastUpdateTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Terminal

	if all {
		switch v := interface{}(m.GetCompiledConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PushValidationError{
					field:  "CompiledConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PushValidationError{
					field:  "CompiledConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCompiledConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PushValidationError{
				field:  "CompiledConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PushMultiError(errors)
	}

	return nil
}

// PushMultiError is an error wrapping multiple validation errors returned by
// Push.ValidateAll() if the designated constraints aren't met.
type PushMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushMultiError) AllErrors() []error { return m }

// PushValidationError is the validation error returned by Push.Validate if the
// designated constraints aren't met.
type PushValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushValidationError) ErrorName() string { return "PushValidationError" }

// Error satisfies the builtin error interface
func (e PushValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPush.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushValidationError{}

// Validate checks the field values on ServiceInstancePodContainer with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServiceInstancePodContainer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServiceInstancePodContainer with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServiceInstancePodContainerMultiError, or nil if none found.
func (m *ServiceInstancePodContainer) ValidateAll() error {
	return m.validate(true)
}

func (m *ServiceInstancePodContainer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for State

	// no validation rules for Reason

	// no validation rules for Restarts

	if len(errors) > 0 {
		return ServiceInstancePodContainerMultiError(errors)
	}

	return nil
}

// ServiceInstancePodContainerMultiError is an error wrapping multiple
// validation errors returned by ServiceInstancePodContainer.ValidateAll() if
// the designated constraints aren't met.
type ServiceInstancePodContainerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceInstancePodContainerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceInstancePodContainerMultiError) AllErrors() []error { return m }

// ServiceInstancePodContainerValidationError is the validation error returned
// by ServiceInstancePodContainer.Validate if the designated constraints
// aren't met.
type ServiceInstancePodContainerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceInstancePodContainerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceInstancePodContainerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceInstancePodContainerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceInstancePodContainerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceInstancePodContainerValidationError) ErrorName() string {
	return "ServiceInstancePodContainerValidationError"
}

// Error satisfies the builtin error interface
func (e ServiceInstancePodContainerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceInstancePodContainer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceInstancePodContainerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceInstancePodContainerValidationError{}

// Validate checks the field values on ServiceInstancePod with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServiceInstancePod) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServiceInstancePod with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServiceInstancePodMultiError, or nil if none found.
func (m *ServiceInstancePod) ValidateAll() error {
	return m.validate(true)
}

func (m *ServiceInstancePod) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for ServiceVersion

	// no validation rules for State

	// no validation rules for NeedsAttention

	for idx, item := range m.GetContainers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServiceInstancePodValidationError{
						field:  fmt.Sprintf("Containers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServiceInstancePodValidationError{
						field:  fmt.Sprintf("Containers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServiceInstancePodValidationError{
					field:  fmt.Sprintf("Containers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for IsOngoingPush

	if len(errors) > 0 {
		return ServiceInstancePodMultiError(errors)
	}

	return nil
}

// ServiceInstancePodMultiError is an error wrapping multiple validation errors
// returned by ServiceInstancePod.ValidateAll() if the designated constraints
// aren't met.
type ServiceInstancePodMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceInstancePodMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceInstancePodMultiError) AllErrors() []error { return m }

// ServiceInstancePodValidationError is the validation error returned by
// ServiceInstancePod.Validate if the designated constraints aren't met.
type ServiceInstancePodValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceInstancePodValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceInstancePodValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceInstancePodValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceInstancePodValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceInstancePodValidationError) ErrorName() string {
	return "ServiceInstancePodValidationError"
}

// Error satisfies the builtin error interface
func (e ServiceInstancePodValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceInstancePod.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceInstancePodValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceInstancePodValidationError{}

// Validate checks the field values on ServiceState with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ServiceState) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServiceState with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ServiceStateMultiError, or
// nil if none found.
func (m *ServiceState) ValidateAll() error {
	return m.validate(true)
}

func (m *ServiceState) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOngoingPipelineRuns() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServiceStateValidationError{
						field:  fmt.Sprintf("OngoingPipelineRuns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServiceStateValidationError{
						field:  fmt.Sprintf("OngoingPipelineRuns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServiceStateValidationError{
					field:  fmt.Sprintf("OngoingPipelineRuns[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for State

	if len(errors) > 0 {
		return ServiceStateMultiError(errors)
	}

	return nil
}

// ServiceStateMultiError is an error wrapping multiple validation errors
// returned by ServiceState.ValidateAll() if the designated constraints aren't met.
type ServiceStateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceStateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceStateMultiError) AllErrors() []error { return m }

// ServiceStateValidationError is the validation error returned by
// ServiceState.Validate if the designated constraints aren't met.
type ServiceStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceStateValidationError) ErrorName() string { return "ServiceStateValidationError" }

// Error satisfies the builtin error interface
func (e ServiceStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceStateValidationError{}

// Validate checks the field values on Service with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Service) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Service with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ServiceMultiError, or nil if none found.
func (m *Service) ValidateAll() error {
	return m.validate(true)
}

func (m *Service) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMeta()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServiceValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServiceValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceValidationError{
				field:  "Meta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServiceValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServiceValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetState()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServiceValidationError{
					field:  "State",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServiceValidationError{
					field:  "State",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceValidationError{
				field:  "State",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUserMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServiceValidationError{
					field:  "UserMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServiceValidationError{
					field:  "UserMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceValidationError{
				field:  "UserMetadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ServiceMultiError(errors)
	}

	return nil
}

// ServiceMultiError is an error wrapping multiple validation errors returned
// by Service.ValidateAll() if the designated constraints aren't met.
type ServiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceMultiError) AllErrors() []error { return m }

// ServiceValidationError is the validation error returned by Service.Validate
// if the designated constraints aren't met.
type ServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceValidationError) ErrorName() string { return "ServiceValidationError" }

// Error satisfies the builtin error interface
func (e ServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sService.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceValidationError{}

// Validate checks the field values on ServiceInstanceCanaryState with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServiceInstanceCanaryState) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServiceInstanceCanaryState with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServiceInstanceCanaryStateMultiError, or nil if none found.
func (m *ServiceInstanceCanaryState) ValidateAll() error {
	return m.validate(true)
}

func (m *ServiceInstanceCanaryState) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetCanaryWeight(); val < 0 || val > 100 {
		err := ServiceInstanceCanaryStateValidationError{
			field:  "CanaryWeight",
			reason: "value must be inside range [0, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	// no validation rules for Message

	// no validation rules for CurrentStage

	// no validation rules for TotalStages

	if len(errors) > 0 {
		return ServiceInstanceCanaryStateMultiError(errors)
	}

	return nil
}

// ServiceInstanceCanaryStateMultiError is an error wrapping multiple
// validation errors returned by ServiceInstanceCanaryState.ValidateAll() if
// the designated constraints aren't met.
type ServiceInstanceCanaryStateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceInstanceCanaryStateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceInstanceCanaryStateMultiError) AllErrors() []error { return m }

// ServiceInstanceCanaryStateValidationError is the validation error returned
// by ServiceInstanceCanaryState.Validate if the designated constraints aren't met.
type ServiceInstanceCanaryStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceInstanceCanaryStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceInstanceCanaryStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceInstanceCanaryStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceInstanceCanaryStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceInstanceCanaryStateValidationError) ErrorName() string {
	return "ServiceInstanceCanaryStateValidationError"
}

// Error satisfies the builtin error interface
func (e ServiceInstanceCanaryStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceInstanceCanaryState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceInstanceCanaryStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceInstanceCanaryStateValidationError{}

// Validate checks the field values on ServiceInstanceDeliveryState with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServiceInstanceDeliveryState) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServiceInstanceDeliveryState with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServiceInstanceDeliveryStateMultiError, or nil if none found.
func (m *ServiceInstanceDeliveryState) ValidateAll() error {
	return m.validate(true)
}

func (m *ServiceInstanceDeliveryState) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetCanary()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServiceInstanceDeliveryStateValidationError{
					field:  "Canary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServiceInstanceDeliveryStateValidationError{
					field:  "Canary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCanary()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceInstanceDeliveryStateValidationError{
				field:  "Canary",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CurrentStage

	// no validation rules for TotalStages

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetPauseStartTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServiceInstanceDeliveryStateValidationError{
					field:  "PauseStartTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServiceInstanceDeliveryStateValidationError{
					field:  "PauseStartTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPauseStartTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceInstanceDeliveryStateValidationError{
				field:  "PauseStartTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPauseDuration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServiceInstanceDeliveryStateValidationError{
					field:  "PauseDuration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServiceInstanceDeliveryStateValidationError{
					field:  "PauseDuration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPauseDuration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceInstanceDeliveryStateValidationError{
				field:  "PauseDuration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ServiceInstanceDeliveryStateMultiError(errors)
	}

	return nil
}

// ServiceInstanceDeliveryStateMultiError is an error wrapping multiple
// validation errors returned by ServiceInstanceDeliveryState.ValidateAll() if
// the designated constraints aren't met.
type ServiceInstanceDeliveryStateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceInstanceDeliveryStateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceInstanceDeliveryStateMultiError) AllErrors() []error { return m }

// ServiceInstanceDeliveryStateValidationError is the validation error returned
// by ServiceInstanceDeliveryState.Validate if the designated constraints
// aren't met.
type ServiceInstanceDeliveryStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceInstanceDeliveryStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceInstanceDeliveryStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceInstanceDeliveryStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceInstanceDeliveryStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceInstanceDeliveryStateValidationError) ErrorName() string {
	return "ServiceInstanceDeliveryStateValidationError"
}

// Error satisfies the builtin error interface
func (e ServiceInstanceDeliveryStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceInstanceDeliveryState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceInstanceDeliveryStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceInstanceDeliveryStateValidationError{}

// Validate checks the field values on ServiceInstanceState with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServiceInstanceState) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServiceInstanceState with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServiceInstanceStateMultiError, or nil if none found.
func (m *ServiceInstanceState) ValidateAll() error {
	return m.validate(true)
}

func (m *ServiceInstanceState) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for State

	// no validation rules for AvailablePods

	// no validation rules for DesiredPods

	for idx, item := range m.GetPods() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServiceInstanceStateValidationError{
						field:  fmt.Sprintf("Pods[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServiceInstanceStateValidationError{
						field:  fmt.Sprintf("Pods[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServiceInstanceStateValidationError{
					field:  fmt.Sprintf("Pods[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetLatestSuccessfulProdvanaPush()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServiceInstanceStateValidationError{
					field:  "LatestSuccessfulProdvanaPush",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServiceInstanceStateValidationError{
					field:  "LatestSuccessfulProdvanaPush",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLatestSuccessfulProdvanaPush()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceInstanceStateValidationError{
				field:  "LatestSuccessfulProdvanaPush",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLatestSuccessfulUnknownPushAfterProdvanaPush()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServiceInstanceStateValidationError{
					field:  "LatestSuccessfulUnknownPushAfterProdvanaPush",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServiceInstanceStateValidationError{
					field:  "LatestSuccessfulUnknownPushAfterProdvanaPush",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLatestSuccessfulUnknownPushAfterProdvanaPush()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceInstanceStateValidationError{
				field:  "LatestSuccessfulUnknownPushAfterProdvanaPush",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOngoingPush()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServiceInstanceStateValidationError{
					field:  "OngoingPush",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServiceInstanceStateValidationError{
					field:  "OngoingPush",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOngoingPush()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceInstanceStateValidationError{
				field:  "OngoingPush",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetExternalAddrs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServiceInstanceStateValidationError{
						field:  fmt.Sprintf("ExternalAddrs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServiceInstanceStateValidationError{
						field:  fmt.Sprintf("ExternalAddrs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServiceInstanceStateValidationError{
					field:  fmt.Sprintf("ExternalAddrs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetWritebackConfig() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServiceInstanceStateValidationError{
						field:  fmt.Sprintf("WritebackConfig[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServiceInstanceStateValidationError{
						field:  fmt.Sprintf("WritebackConfig[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServiceInstanceStateValidationError{
					field:  fmt.Sprintf("WritebackConfig[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for RuntimeId

	// no validation rules for RuntimeName

	if all {
		switch v := interface{}(m.GetDeliveryState()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServiceInstanceStateValidationError{
					field:  "DeliveryState",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServiceInstanceStateValidationError{
					field:  "DeliveryState",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeliveryState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceInstanceStateValidationError{
				field:  "DeliveryState",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ServiceInstanceStateMultiError(errors)
	}

	return nil
}

// ServiceInstanceStateMultiError is an error wrapping multiple validation
// errors returned by ServiceInstanceState.ValidateAll() if the designated
// constraints aren't met.
type ServiceInstanceStateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceInstanceStateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceInstanceStateMultiError) AllErrors() []error { return m }

// ServiceInstanceStateValidationError is the validation error returned by
// ServiceInstanceState.Validate if the designated constraints aren't met.
type ServiceInstanceStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceInstanceStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceInstanceStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceInstanceStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceInstanceStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceInstanceStateValidationError) ErrorName() string {
	return "ServiceInstanceStateValidationError"
}

// Error satisfies the builtin error interface
func (e ServiceInstanceStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceInstanceState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceInstanceStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceInstanceStateValidationError{}

// Validate checks the field values on ServiceInstance with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ServiceInstance) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServiceInstance with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServiceInstanceMultiError, or nil if none found.
func (m *ServiceInstance) ValidateAll() error {
	return m.validate(true)
}

func (m *ServiceInstance) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMeta()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServiceInstanceValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServiceInstanceValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceInstanceValidationError{
				field:  "Meta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServiceInstanceValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServiceInstanceValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceInstanceValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetState()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServiceInstanceValidationError{
					field:  "State",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServiceInstanceValidationError{
					field:  "State",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceInstanceValidationError{
				field:  "State",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ServiceInstanceMultiError(errors)
	}

	return nil
}

// ServiceInstanceMultiError is an error wrapping multiple validation errors
// returned by ServiceInstance.ValidateAll() if the designated constraints
// aren't met.
type ServiceInstanceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceInstanceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceInstanceMultiError) AllErrors() []error { return m }

// ServiceInstanceValidationError is the validation error returned by
// ServiceInstance.Validate if the designated constraints aren't met.
type ServiceInstanceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceInstanceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceInstanceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceInstanceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceInstanceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceInstanceValidationError) ErrorName() string { return "ServiceInstanceValidationError" }

// Error satisfies the builtin error interface
func (e ServiceInstanceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceInstance.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceInstanceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceInstanceValidationError{}
