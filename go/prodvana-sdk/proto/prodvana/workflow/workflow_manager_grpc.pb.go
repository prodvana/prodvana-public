// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.10
// source: prodvana/workflow/workflow_manager.proto

package workflow

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WorkflowManager_ListIntegrations_FullMethodName                   = "/prodvana.workflow.WorkflowManager/ListIntegrations"
	WorkflowManager_DeleteIntegration_FullMethodName                  = "/prodvana.workflow.WorkflowManager/DeleteIntegration"
	WorkflowManager_CreateContainerRegistryIntegration_FullMethodName = "/prodvana.workflow.WorkflowManager/CreateContainerRegistryIntegration"
	WorkflowManager_DeleteContainerRegistryIntegration_FullMethodName = "/prodvana.workflow.WorkflowManager/DeleteContainerRegistryIntegration"
	WorkflowManager_ListContainerRegistryIntegrations_FullMethodName  = "/prodvana.workflow.WorkflowManager/ListContainerRegistryIntegrations"
	WorkflowManager_GetContainerRegistryIntegration_FullMethodName    = "/prodvana.workflow.WorkflowManager/GetContainerRegistryIntegration"
	WorkflowManager_GetServiceImageInfo_FullMethodName                = "/prodvana.workflow.WorkflowManager/GetServiceImageInfo"
	WorkflowManager_GetContainerRegistryImages_FullMethodName         = "/prodvana.workflow.WorkflowManager/GetContainerRegistryImages"
	WorkflowManager_ListTrackedImageRepositories_FullMethodName       = "/prodvana.workflow.WorkflowManager/ListTrackedImageRepositories"
	WorkflowManager_GetTrackedImageRepository_FullMethodName          = "/prodvana.workflow.WorkflowManager/GetTrackedImageRepository"
	WorkflowManager_TrackImageRepositories_FullMethodName             = "/prodvana.workflow.WorkflowManager/TrackImageRepositories"
	WorkflowManager_StopTrackingImageRepository_FullMethodName        = "/prodvana.workflow.WorkflowManager/StopTrackingImageRepository"
	WorkflowManager_GetProgramDefaults_FullMethodName                 = "/prodvana.workflow.WorkflowManager/GetProgramDefaults"
	WorkflowManager_GetImageCommitInfo_FullMethodName                 = "/prodvana.workflow.WorkflowManager/GetImageCommitInfo"
	WorkflowManager_InstallSlack_FullMethodName                       = "/prodvana.workflow.WorkflowManager/InstallSlack"
	WorkflowManager_UninstallSlack_FullMethodName                     = "/prodvana.workflow.WorkflowManager/UninstallSlack"
	WorkflowManager_GetInstallSlackUrl_FullMethodName                 = "/prodvana.workflow.WorkflowManager/GetInstallSlackUrl"
	WorkflowManager_InstallPagerDuty_FullMethodName                   = "/prodvana.workflow.WorkflowManager/InstallPagerDuty"
	WorkflowManager_GetInstallPagerDutyUrl_FullMethodName             = "/prodvana.workflow.WorkflowManager/GetInstallPagerDutyUrl"
	WorkflowManager_UninstallPagerDuty_FullMethodName                 = "/prodvana.workflow.WorkflowManager/UninstallPagerDuty"
	WorkflowManager_GetGrafanaInstallation_FullMethodName             = "/prodvana.workflow.WorkflowManager/GetGrafanaInstallation"
	WorkflowManager_InstallGrafana_FullMethodName                     = "/prodvana.workflow.WorkflowManager/InstallGrafana"
	WorkflowManager_UninstallGrafana_FullMethodName                   = "/prodvana.workflow.WorkflowManager/UninstallGrafana"
	WorkflowManager_ListHoneycombEnvironments_FullMethodName          = "/prodvana.workflow.WorkflowManager/ListHoneycombEnvironments"
	WorkflowManager_AddHoneycombEnvironment_FullMethodName            = "/prodvana.workflow.WorkflowManager/AddHoneycombEnvironment"
	WorkflowManager_UpdateHoneycombEnvironment_FullMethodName         = "/prodvana.workflow.WorkflowManager/UpdateHoneycombEnvironment"
	WorkflowManager_DeleteHoneycombEnvironment_FullMethodName         = "/prodvana.workflow.WorkflowManager/DeleteHoneycombEnvironment"
	WorkflowManager_UninstallHoneycomb_FullMethodName                 = "/prodvana.workflow.WorkflowManager/UninstallHoneycomb"
	WorkflowManager_CreateGitHubApp_FullMethodName                    = "/prodvana.workflow.WorkflowManager/CreateGitHubApp"
	WorkflowManager_InstallGitHub_FullMethodName                      = "/prodvana.workflow.WorkflowManager/InstallGitHub"
)

// WorkflowManagerClient is the client API for WorkflowManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkflowManagerClient interface {
	ListIntegrations(ctx context.Context, in *ListIntegrationsReq, opts ...grpc.CallOption) (*ListIntegrationsResp, error)
	DeleteIntegration(ctx context.Context, in *DeleteIntegrationReq, opts ...grpc.CallOption) (*DeleteIntegrationResp, error)
	CreateContainerRegistryIntegration(ctx context.Context, in *CreateContainerRegistryIntegrationReq, opts ...grpc.CallOption) (*CreateContainerRegistryIntegrationRes, error)
	DeleteContainerRegistryIntegration(ctx context.Context, in *DeleteContainerRegistryIntegrationReq, opts ...grpc.CallOption) (*DeleteContainerRegistryIntegrationResp, error)
	ListContainerRegistryIntegrations(ctx context.Context, in *ListContainerRegistryIntegrationsReq, opts ...grpc.CallOption) (*ListContainerRegistryIntegrationsResp, error)
	GetContainerRegistryIntegration(ctx context.Context, in *GetContainerRegistryIntegrationReq, opts ...grpc.CallOption) (*GetContainerRegistryIntegrationResp, error)
	GetServiceImageInfo(ctx context.Context, in *GetServiceImageInfoReq, opts ...grpc.CallOption) (*GetServiceImageInfoResp, error)
	GetContainerRegistryImages(ctx context.Context, in *GetContainerRegistryImagesReq, opts ...grpc.CallOption) (*GetContainerRegistryImagesRes, error)
	ListTrackedImageRepositories(ctx context.Context, in *ListTrackedImageRepositoriesReq, opts ...grpc.CallOption) (*ListTrackedImageRepositoriesResp, error)
	GetTrackedImageRepository(ctx context.Context, in *GetTrackedImageRepositoryReq, opts ...grpc.CallOption) (*GetTrackedImageRepositoryResp, error)
	TrackImageRepositories(ctx context.Context, in *TrackImageRepositoriesReq, opts ...grpc.CallOption) (*TrackImageRepositoriesResp, error)
	StopTrackingImageRepository(ctx context.Context, in *StopTrackingImageRepositoryReq, opts ...grpc.CallOption) (*StopTrackingImageRepositoryResp, error)
	GetProgramDefaults(ctx context.Context, in *GetProgramDefaultsReq, opts ...grpc.CallOption) (*GetProgramDefaultsResp, error)
	GetImageCommitInfo(ctx context.Context, in *GetImageCommitInfoReq, opts ...grpc.CallOption) (*GetImageCommitInfoResp, error)
	InstallSlack(ctx context.Context, in *InstallSlackReq, opts ...grpc.CallOption) (*InstallSlackResp, error)
	UninstallSlack(ctx context.Context, in *UninstallSlackReq, opts ...grpc.CallOption) (*UninstallSlackResp, error)
	GetInstallSlackUrl(ctx context.Context, in *GetInstallSlackUrlReq, opts ...grpc.CallOption) (*GetInstallSlackUrlResp, error)
	InstallPagerDuty(ctx context.Context, in *InstallPagerDutyReq, opts ...grpc.CallOption) (*InstallPagerDutyResp, error)
	GetInstallPagerDutyUrl(ctx context.Context, in *GetInstallPagerDutyUrlReq, opts ...grpc.CallOption) (*GetInstallPagerDutyUrlResp, error)
	UninstallPagerDuty(ctx context.Context, in *UninstallPagerDutyReq, opts ...grpc.CallOption) (*UninstallPagerDutyResp, error)
	GetGrafanaInstallation(ctx context.Context, in *GetGrafanaInstallationReq, opts ...grpc.CallOption) (*GetGrafanaInstallationResp, error)
	InstallGrafana(ctx context.Context, in *InstallGrafanaReq, opts ...grpc.CallOption) (*InstallGrafanaResp, error)
	UninstallGrafana(ctx context.Context, in *UninstallGrafanaReq, opts ...grpc.CallOption) (*UninstallGrafanaResp, error)
	ListHoneycombEnvironments(ctx context.Context, in *ListHoneycombEnvironmentsReq, opts ...grpc.CallOption) (*ListHoneycombEnvironmentsResp, error)
	AddHoneycombEnvironment(ctx context.Context, in *AddHoneycombEnvironmentReq, opts ...grpc.CallOption) (*AddHoneycombEnvironmentResp, error)
	UpdateHoneycombEnvironment(ctx context.Context, in *UpdateHoneycombEnvironmentReq, opts ...grpc.CallOption) (*UpdateHoneycombEnvironmentResp, error)
	DeleteHoneycombEnvironment(ctx context.Context, in *DeleteHoneycombEnvironmentReq, opts ...grpc.CallOption) (*DeleteHoneycombEnvironmentResp, error)
	UninstallHoneycomb(ctx context.Context, in *UninstallHoneycombReq, opts ...grpc.CallOption) (*UninstallHoneycombResp, error)
	CreateGitHubApp(ctx context.Context, in *CreateGitHubAppReq, opts ...grpc.CallOption) (*CreateGitHubAppResp, error)
	InstallGitHub(ctx context.Context, in *InstallGitHubReq, opts ...grpc.CallOption) (*InstallGitHubResp, error)
}

type workflowManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkflowManagerClient(cc grpc.ClientConnInterface) WorkflowManagerClient {
	return &workflowManagerClient{cc}
}

func (c *workflowManagerClient) ListIntegrations(ctx context.Context, in *ListIntegrationsReq, opts ...grpc.CallOption) (*ListIntegrationsResp, error) {
	out := new(ListIntegrationsResp)
	err := c.cc.Invoke(ctx, WorkflowManager_ListIntegrations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowManagerClient) DeleteIntegration(ctx context.Context, in *DeleteIntegrationReq, opts ...grpc.CallOption) (*DeleteIntegrationResp, error) {
	out := new(DeleteIntegrationResp)
	err := c.cc.Invoke(ctx, WorkflowManager_DeleteIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowManagerClient) CreateContainerRegistryIntegration(ctx context.Context, in *CreateContainerRegistryIntegrationReq, opts ...grpc.CallOption) (*CreateContainerRegistryIntegrationRes, error) {
	out := new(CreateContainerRegistryIntegrationRes)
	err := c.cc.Invoke(ctx, WorkflowManager_CreateContainerRegistryIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowManagerClient) DeleteContainerRegistryIntegration(ctx context.Context, in *DeleteContainerRegistryIntegrationReq, opts ...grpc.CallOption) (*DeleteContainerRegistryIntegrationResp, error) {
	out := new(DeleteContainerRegistryIntegrationResp)
	err := c.cc.Invoke(ctx, WorkflowManager_DeleteContainerRegistryIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowManagerClient) ListContainerRegistryIntegrations(ctx context.Context, in *ListContainerRegistryIntegrationsReq, opts ...grpc.CallOption) (*ListContainerRegistryIntegrationsResp, error) {
	out := new(ListContainerRegistryIntegrationsResp)
	err := c.cc.Invoke(ctx, WorkflowManager_ListContainerRegistryIntegrations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowManagerClient) GetContainerRegistryIntegration(ctx context.Context, in *GetContainerRegistryIntegrationReq, opts ...grpc.CallOption) (*GetContainerRegistryIntegrationResp, error) {
	out := new(GetContainerRegistryIntegrationResp)
	err := c.cc.Invoke(ctx, WorkflowManager_GetContainerRegistryIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowManagerClient) GetServiceImageInfo(ctx context.Context, in *GetServiceImageInfoReq, opts ...grpc.CallOption) (*GetServiceImageInfoResp, error) {
	out := new(GetServiceImageInfoResp)
	err := c.cc.Invoke(ctx, WorkflowManager_GetServiceImageInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowManagerClient) GetContainerRegistryImages(ctx context.Context, in *GetContainerRegistryImagesReq, opts ...grpc.CallOption) (*GetContainerRegistryImagesRes, error) {
	out := new(GetContainerRegistryImagesRes)
	err := c.cc.Invoke(ctx, WorkflowManager_GetContainerRegistryImages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowManagerClient) ListTrackedImageRepositories(ctx context.Context, in *ListTrackedImageRepositoriesReq, opts ...grpc.CallOption) (*ListTrackedImageRepositoriesResp, error) {
	out := new(ListTrackedImageRepositoriesResp)
	err := c.cc.Invoke(ctx, WorkflowManager_ListTrackedImageRepositories_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowManagerClient) GetTrackedImageRepository(ctx context.Context, in *GetTrackedImageRepositoryReq, opts ...grpc.CallOption) (*GetTrackedImageRepositoryResp, error) {
	out := new(GetTrackedImageRepositoryResp)
	err := c.cc.Invoke(ctx, WorkflowManager_GetTrackedImageRepository_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowManagerClient) TrackImageRepositories(ctx context.Context, in *TrackImageRepositoriesReq, opts ...grpc.CallOption) (*TrackImageRepositoriesResp, error) {
	out := new(TrackImageRepositoriesResp)
	err := c.cc.Invoke(ctx, WorkflowManager_TrackImageRepositories_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowManagerClient) StopTrackingImageRepository(ctx context.Context, in *StopTrackingImageRepositoryReq, opts ...grpc.CallOption) (*StopTrackingImageRepositoryResp, error) {
	out := new(StopTrackingImageRepositoryResp)
	err := c.cc.Invoke(ctx, WorkflowManager_StopTrackingImageRepository_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowManagerClient) GetProgramDefaults(ctx context.Context, in *GetProgramDefaultsReq, opts ...grpc.CallOption) (*GetProgramDefaultsResp, error) {
	out := new(GetProgramDefaultsResp)
	err := c.cc.Invoke(ctx, WorkflowManager_GetProgramDefaults_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowManagerClient) GetImageCommitInfo(ctx context.Context, in *GetImageCommitInfoReq, opts ...grpc.CallOption) (*GetImageCommitInfoResp, error) {
	out := new(GetImageCommitInfoResp)
	err := c.cc.Invoke(ctx, WorkflowManager_GetImageCommitInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowManagerClient) InstallSlack(ctx context.Context, in *InstallSlackReq, opts ...grpc.CallOption) (*InstallSlackResp, error) {
	out := new(InstallSlackResp)
	err := c.cc.Invoke(ctx, WorkflowManager_InstallSlack_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowManagerClient) UninstallSlack(ctx context.Context, in *UninstallSlackReq, opts ...grpc.CallOption) (*UninstallSlackResp, error) {
	out := new(UninstallSlackResp)
	err := c.cc.Invoke(ctx, WorkflowManager_UninstallSlack_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowManagerClient) GetInstallSlackUrl(ctx context.Context, in *GetInstallSlackUrlReq, opts ...grpc.CallOption) (*GetInstallSlackUrlResp, error) {
	out := new(GetInstallSlackUrlResp)
	err := c.cc.Invoke(ctx, WorkflowManager_GetInstallSlackUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowManagerClient) InstallPagerDuty(ctx context.Context, in *InstallPagerDutyReq, opts ...grpc.CallOption) (*InstallPagerDutyResp, error) {
	out := new(InstallPagerDutyResp)
	err := c.cc.Invoke(ctx, WorkflowManager_InstallPagerDuty_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowManagerClient) GetInstallPagerDutyUrl(ctx context.Context, in *GetInstallPagerDutyUrlReq, opts ...grpc.CallOption) (*GetInstallPagerDutyUrlResp, error) {
	out := new(GetInstallPagerDutyUrlResp)
	err := c.cc.Invoke(ctx, WorkflowManager_GetInstallPagerDutyUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowManagerClient) UninstallPagerDuty(ctx context.Context, in *UninstallPagerDutyReq, opts ...grpc.CallOption) (*UninstallPagerDutyResp, error) {
	out := new(UninstallPagerDutyResp)
	err := c.cc.Invoke(ctx, WorkflowManager_UninstallPagerDuty_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowManagerClient) GetGrafanaInstallation(ctx context.Context, in *GetGrafanaInstallationReq, opts ...grpc.CallOption) (*GetGrafanaInstallationResp, error) {
	out := new(GetGrafanaInstallationResp)
	err := c.cc.Invoke(ctx, WorkflowManager_GetGrafanaInstallation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowManagerClient) InstallGrafana(ctx context.Context, in *InstallGrafanaReq, opts ...grpc.CallOption) (*InstallGrafanaResp, error) {
	out := new(InstallGrafanaResp)
	err := c.cc.Invoke(ctx, WorkflowManager_InstallGrafana_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowManagerClient) UninstallGrafana(ctx context.Context, in *UninstallGrafanaReq, opts ...grpc.CallOption) (*UninstallGrafanaResp, error) {
	out := new(UninstallGrafanaResp)
	err := c.cc.Invoke(ctx, WorkflowManager_UninstallGrafana_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowManagerClient) ListHoneycombEnvironments(ctx context.Context, in *ListHoneycombEnvironmentsReq, opts ...grpc.CallOption) (*ListHoneycombEnvironmentsResp, error) {
	out := new(ListHoneycombEnvironmentsResp)
	err := c.cc.Invoke(ctx, WorkflowManager_ListHoneycombEnvironments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowManagerClient) AddHoneycombEnvironment(ctx context.Context, in *AddHoneycombEnvironmentReq, opts ...grpc.CallOption) (*AddHoneycombEnvironmentResp, error) {
	out := new(AddHoneycombEnvironmentResp)
	err := c.cc.Invoke(ctx, WorkflowManager_AddHoneycombEnvironment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowManagerClient) UpdateHoneycombEnvironment(ctx context.Context, in *UpdateHoneycombEnvironmentReq, opts ...grpc.CallOption) (*UpdateHoneycombEnvironmentResp, error) {
	out := new(UpdateHoneycombEnvironmentResp)
	err := c.cc.Invoke(ctx, WorkflowManager_UpdateHoneycombEnvironment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowManagerClient) DeleteHoneycombEnvironment(ctx context.Context, in *DeleteHoneycombEnvironmentReq, opts ...grpc.CallOption) (*DeleteHoneycombEnvironmentResp, error) {
	out := new(DeleteHoneycombEnvironmentResp)
	err := c.cc.Invoke(ctx, WorkflowManager_DeleteHoneycombEnvironment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowManagerClient) UninstallHoneycomb(ctx context.Context, in *UninstallHoneycombReq, opts ...grpc.CallOption) (*UninstallHoneycombResp, error) {
	out := new(UninstallHoneycombResp)
	err := c.cc.Invoke(ctx, WorkflowManager_UninstallHoneycomb_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowManagerClient) CreateGitHubApp(ctx context.Context, in *CreateGitHubAppReq, opts ...grpc.CallOption) (*CreateGitHubAppResp, error) {
	out := new(CreateGitHubAppResp)
	err := c.cc.Invoke(ctx, WorkflowManager_CreateGitHubApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowManagerClient) InstallGitHub(ctx context.Context, in *InstallGitHubReq, opts ...grpc.CallOption) (*InstallGitHubResp, error) {
	out := new(InstallGitHubResp)
	err := c.cc.Invoke(ctx, WorkflowManager_InstallGitHub_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkflowManagerServer is the server API for WorkflowManager service.
// All implementations must embed UnimplementedWorkflowManagerServer
// for forward compatibility
type WorkflowManagerServer interface {
	ListIntegrations(context.Context, *ListIntegrationsReq) (*ListIntegrationsResp, error)
	DeleteIntegration(context.Context, *DeleteIntegrationReq) (*DeleteIntegrationResp, error)
	CreateContainerRegistryIntegration(context.Context, *CreateContainerRegistryIntegrationReq) (*CreateContainerRegistryIntegrationRes, error)
	DeleteContainerRegistryIntegration(context.Context, *DeleteContainerRegistryIntegrationReq) (*DeleteContainerRegistryIntegrationResp, error)
	ListContainerRegistryIntegrations(context.Context, *ListContainerRegistryIntegrationsReq) (*ListContainerRegistryIntegrationsResp, error)
	GetContainerRegistryIntegration(context.Context, *GetContainerRegistryIntegrationReq) (*GetContainerRegistryIntegrationResp, error)
	GetServiceImageInfo(context.Context, *GetServiceImageInfoReq) (*GetServiceImageInfoResp, error)
	GetContainerRegistryImages(context.Context, *GetContainerRegistryImagesReq) (*GetContainerRegistryImagesRes, error)
	ListTrackedImageRepositories(context.Context, *ListTrackedImageRepositoriesReq) (*ListTrackedImageRepositoriesResp, error)
	GetTrackedImageRepository(context.Context, *GetTrackedImageRepositoryReq) (*GetTrackedImageRepositoryResp, error)
	TrackImageRepositories(context.Context, *TrackImageRepositoriesReq) (*TrackImageRepositoriesResp, error)
	StopTrackingImageRepository(context.Context, *StopTrackingImageRepositoryReq) (*StopTrackingImageRepositoryResp, error)
	GetProgramDefaults(context.Context, *GetProgramDefaultsReq) (*GetProgramDefaultsResp, error)
	GetImageCommitInfo(context.Context, *GetImageCommitInfoReq) (*GetImageCommitInfoResp, error)
	InstallSlack(context.Context, *InstallSlackReq) (*InstallSlackResp, error)
	UninstallSlack(context.Context, *UninstallSlackReq) (*UninstallSlackResp, error)
	GetInstallSlackUrl(context.Context, *GetInstallSlackUrlReq) (*GetInstallSlackUrlResp, error)
	InstallPagerDuty(context.Context, *InstallPagerDutyReq) (*InstallPagerDutyResp, error)
	GetInstallPagerDutyUrl(context.Context, *GetInstallPagerDutyUrlReq) (*GetInstallPagerDutyUrlResp, error)
	UninstallPagerDuty(context.Context, *UninstallPagerDutyReq) (*UninstallPagerDutyResp, error)
	GetGrafanaInstallation(context.Context, *GetGrafanaInstallationReq) (*GetGrafanaInstallationResp, error)
	InstallGrafana(context.Context, *InstallGrafanaReq) (*InstallGrafanaResp, error)
	UninstallGrafana(context.Context, *UninstallGrafanaReq) (*UninstallGrafanaResp, error)
	ListHoneycombEnvironments(context.Context, *ListHoneycombEnvironmentsReq) (*ListHoneycombEnvironmentsResp, error)
	AddHoneycombEnvironment(context.Context, *AddHoneycombEnvironmentReq) (*AddHoneycombEnvironmentResp, error)
	UpdateHoneycombEnvironment(context.Context, *UpdateHoneycombEnvironmentReq) (*UpdateHoneycombEnvironmentResp, error)
	DeleteHoneycombEnvironment(context.Context, *DeleteHoneycombEnvironmentReq) (*DeleteHoneycombEnvironmentResp, error)
	UninstallHoneycomb(context.Context, *UninstallHoneycombReq) (*UninstallHoneycombResp, error)
	CreateGitHubApp(context.Context, *CreateGitHubAppReq) (*CreateGitHubAppResp, error)
	InstallGitHub(context.Context, *InstallGitHubReq) (*InstallGitHubResp, error)
	mustEmbedUnimplementedWorkflowManagerServer()
}

// UnimplementedWorkflowManagerServer must be embedded to have forward compatible implementations.
type UnimplementedWorkflowManagerServer struct {
}

func (UnimplementedWorkflowManagerServer) ListIntegrations(context.Context, *ListIntegrationsReq) (*ListIntegrationsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIntegrations not implemented")
}
func (UnimplementedWorkflowManagerServer) DeleteIntegration(context.Context, *DeleteIntegrationReq) (*DeleteIntegrationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIntegration not implemented")
}
func (UnimplementedWorkflowManagerServer) CreateContainerRegistryIntegration(context.Context, *CreateContainerRegistryIntegrationReq) (*CreateContainerRegistryIntegrationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContainerRegistryIntegration not implemented")
}
func (UnimplementedWorkflowManagerServer) DeleteContainerRegistryIntegration(context.Context, *DeleteContainerRegistryIntegrationReq) (*DeleteContainerRegistryIntegrationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteContainerRegistryIntegration not implemented")
}
func (UnimplementedWorkflowManagerServer) ListContainerRegistryIntegrations(context.Context, *ListContainerRegistryIntegrationsReq) (*ListContainerRegistryIntegrationsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContainerRegistryIntegrations not implemented")
}
func (UnimplementedWorkflowManagerServer) GetContainerRegistryIntegration(context.Context, *GetContainerRegistryIntegrationReq) (*GetContainerRegistryIntegrationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContainerRegistryIntegration not implemented")
}
func (UnimplementedWorkflowManagerServer) GetServiceImageInfo(context.Context, *GetServiceImageInfoReq) (*GetServiceImageInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceImageInfo not implemented")
}
func (UnimplementedWorkflowManagerServer) GetContainerRegistryImages(context.Context, *GetContainerRegistryImagesReq) (*GetContainerRegistryImagesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContainerRegistryImages not implemented")
}
func (UnimplementedWorkflowManagerServer) ListTrackedImageRepositories(context.Context, *ListTrackedImageRepositoriesReq) (*ListTrackedImageRepositoriesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTrackedImageRepositories not implemented")
}
func (UnimplementedWorkflowManagerServer) GetTrackedImageRepository(context.Context, *GetTrackedImageRepositoryReq) (*GetTrackedImageRepositoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrackedImageRepository not implemented")
}
func (UnimplementedWorkflowManagerServer) TrackImageRepositories(context.Context, *TrackImageRepositoriesReq) (*TrackImageRepositoriesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrackImageRepositories not implemented")
}
func (UnimplementedWorkflowManagerServer) StopTrackingImageRepository(context.Context, *StopTrackingImageRepositoryReq) (*StopTrackingImageRepositoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopTrackingImageRepository not implemented")
}
func (UnimplementedWorkflowManagerServer) GetProgramDefaults(context.Context, *GetProgramDefaultsReq) (*GetProgramDefaultsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProgramDefaults not implemented")
}
func (UnimplementedWorkflowManagerServer) GetImageCommitInfo(context.Context, *GetImageCommitInfoReq) (*GetImageCommitInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImageCommitInfo not implemented")
}
func (UnimplementedWorkflowManagerServer) InstallSlack(context.Context, *InstallSlackReq) (*InstallSlackResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallSlack not implemented")
}
func (UnimplementedWorkflowManagerServer) UninstallSlack(context.Context, *UninstallSlackReq) (*UninstallSlackResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UninstallSlack not implemented")
}
func (UnimplementedWorkflowManagerServer) GetInstallSlackUrl(context.Context, *GetInstallSlackUrlReq) (*GetInstallSlackUrlResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstallSlackUrl not implemented")
}
func (UnimplementedWorkflowManagerServer) InstallPagerDuty(context.Context, *InstallPagerDutyReq) (*InstallPagerDutyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallPagerDuty not implemented")
}
func (UnimplementedWorkflowManagerServer) GetInstallPagerDutyUrl(context.Context, *GetInstallPagerDutyUrlReq) (*GetInstallPagerDutyUrlResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstallPagerDutyUrl not implemented")
}
func (UnimplementedWorkflowManagerServer) UninstallPagerDuty(context.Context, *UninstallPagerDutyReq) (*UninstallPagerDutyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UninstallPagerDuty not implemented")
}
func (UnimplementedWorkflowManagerServer) GetGrafanaInstallation(context.Context, *GetGrafanaInstallationReq) (*GetGrafanaInstallationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGrafanaInstallation not implemented")
}
func (UnimplementedWorkflowManagerServer) InstallGrafana(context.Context, *InstallGrafanaReq) (*InstallGrafanaResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallGrafana not implemented")
}
func (UnimplementedWorkflowManagerServer) UninstallGrafana(context.Context, *UninstallGrafanaReq) (*UninstallGrafanaResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UninstallGrafana not implemented")
}
func (UnimplementedWorkflowManagerServer) ListHoneycombEnvironments(context.Context, *ListHoneycombEnvironmentsReq) (*ListHoneycombEnvironmentsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHoneycombEnvironments not implemented")
}
func (UnimplementedWorkflowManagerServer) AddHoneycombEnvironment(context.Context, *AddHoneycombEnvironmentReq) (*AddHoneycombEnvironmentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddHoneycombEnvironment not implemented")
}
func (UnimplementedWorkflowManagerServer) UpdateHoneycombEnvironment(context.Context, *UpdateHoneycombEnvironmentReq) (*UpdateHoneycombEnvironmentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHoneycombEnvironment not implemented")
}
func (UnimplementedWorkflowManagerServer) DeleteHoneycombEnvironment(context.Context, *DeleteHoneycombEnvironmentReq) (*DeleteHoneycombEnvironmentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHoneycombEnvironment not implemented")
}
func (UnimplementedWorkflowManagerServer) UninstallHoneycomb(context.Context, *UninstallHoneycombReq) (*UninstallHoneycombResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UninstallHoneycomb not implemented")
}
func (UnimplementedWorkflowManagerServer) CreateGitHubApp(context.Context, *CreateGitHubAppReq) (*CreateGitHubAppResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGitHubApp not implemented")
}
func (UnimplementedWorkflowManagerServer) InstallGitHub(context.Context, *InstallGitHubReq) (*InstallGitHubResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallGitHub not implemented")
}
func (UnimplementedWorkflowManagerServer) mustEmbedUnimplementedWorkflowManagerServer() {}

// UnsafeWorkflowManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkflowManagerServer will
// result in compilation errors.
type UnsafeWorkflowManagerServer interface {
	mustEmbedUnimplementedWorkflowManagerServer()
}

func RegisterWorkflowManagerServer(s grpc.ServiceRegistrar, srv WorkflowManagerServer) {
	s.RegisterService(&WorkflowManager_ServiceDesc, srv)
}

func _WorkflowManager_ListIntegrations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIntegrationsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowManagerServer).ListIntegrations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowManager_ListIntegrations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowManagerServer).ListIntegrations(ctx, req.(*ListIntegrationsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowManager_DeleteIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIntegrationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowManagerServer).DeleteIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowManager_DeleteIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowManagerServer).DeleteIntegration(ctx, req.(*DeleteIntegrationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowManager_CreateContainerRegistryIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContainerRegistryIntegrationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowManagerServer).CreateContainerRegistryIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowManager_CreateContainerRegistryIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowManagerServer).CreateContainerRegistryIntegration(ctx, req.(*CreateContainerRegistryIntegrationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowManager_DeleteContainerRegistryIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteContainerRegistryIntegrationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowManagerServer).DeleteContainerRegistryIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowManager_DeleteContainerRegistryIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowManagerServer).DeleteContainerRegistryIntegration(ctx, req.(*DeleteContainerRegistryIntegrationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowManager_ListContainerRegistryIntegrations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListContainerRegistryIntegrationsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowManagerServer).ListContainerRegistryIntegrations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowManager_ListContainerRegistryIntegrations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowManagerServer).ListContainerRegistryIntegrations(ctx, req.(*ListContainerRegistryIntegrationsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowManager_GetContainerRegistryIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContainerRegistryIntegrationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowManagerServer).GetContainerRegistryIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowManager_GetContainerRegistryIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowManagerServer).GetContainerRegistryIntegration(ctx, req.(*GetContainerRegistryIntegrationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowManager_GetServiceImageInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceImageInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowManagerServer).GetServiceImageInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowManager_GetServiceImageInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowManagerServer).GetServiceImageInfo(ctx, req.(*GetServiceImageInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowManager_GetContainerRegistryImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContainerRegistryImagesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowManagerServer).GetContainerRegistryImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowManager_GetContainerRegistryImages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowManagerServer).GetContainerRegistryImages(ctx, req.(*GetContainerRegistryImagesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowManager_ListTrackedImageRepositories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTrackedImageRepositoriesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowManagerServer).ListTrackedImageRepositories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowManager_ListTrackedImageRepositories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowManagerServer).ListTrackedImageRepositories(ctx, req.(*ListTrackedImageRepositoriesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowManager_GetTrackedImageRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrackedImageRepositoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowManagerServer).GetTrackedImageRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowManager_GetTrackedImageRepository_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowManagerServer).GetTrackedImageRepository(ctx, req.(*GetTrackedImageRepositoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowManager_TrackImageRepositories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackImageRepositoriesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowManagerServer).TrackImageRepositories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowManager_TrackImageRepositories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowManagerServer).TrackImageRepositories(ctx, req.(*TrackImageRepositoriesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowManager_StopTrackingImageRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopTrackingImageRepositoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowManagerServer).StopTrackingImageRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowManager_StopTrackingImageRepository_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowManagerServer).StopTrackingImageRepository(ctx, req.(*StopTrackingImageRepositoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowManager_GetProgramDefaults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProgramDefaultsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowManagerServer).GetProgramDefaults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowManager_GetProgramDefaults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowManagerServer).GetProgramDefaults(ctx, req.(*GetProgramDefaultsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowManager_GetImageCommitInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImageCommitInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowManagerServer).GetImageCommitInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowManager_GetImageCommitInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowManagerServer).GetImageCommitInfo(ctx, req.(*GetImageCommitInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowManager_InstallSlack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallSlackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowManagerServer).InstallSlack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowManager_InstallSlack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowManagerServer).InstallSlack(ctx, req.(*InstallSlackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowManager_UninstallSlack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UninstallSlackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowManagerServer).UninstallSlack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowManager_UninstallSlack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowManagerServer).UninstallSlack(ctx, req.(*UninstallSlackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowManager_GetInstallSlackUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstallSlackUrlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowManagerServer).GetInstallSlackUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowManager_GetInstallSlackUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowManagerServer).GetInstallSlackUrl(ctx, req.(*GetInstallSlackUrlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowManager_InstallPagerDuty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallPagerDutyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowManagerServer).InstallPagerDuty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowManager_InstallPagerDuty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowManagerServer).InstallPagerDuty(ctx, req.(*InstallPagerDutyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowManager_GetInstallPagerDutyUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstallPagerDutyUrlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowManagerServer).GetInstallPagerDutyUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowManager_GetInstallPagerDutyUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowManagerServer).GetInstallPagerDutyUrl(ctx, req.(*GetInstallPagerDutyUrlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowManager_UninstallPagerDuty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UninstallPagerDutyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowManagerServer).UninstallPagerDuty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowManager_UninstallPagerDuty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowManagerServer).UninstallPagerDuty(ctx, req.(*UninstallPagerDutyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowManager_GetGrafanaInstallation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGrafanaInstallationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowManagerServer).GetGrafanaInstallation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowManager_GetGrafanaInstallation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowManagerServer).GetGrafanaInstallation(ctx, req.(*GetGrafanaInstallationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowManager_InstallGrafana_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallGrafanaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowManagerServer).InstallGrafana(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowManager_InstallGrafana_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowManagerServer).InstallGrafana(ctx, req.(*InstallGrafanaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowManager_UninstallGrafana_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UninstallGrafanaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowManagerServer).UninstallGrafana(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowManager_UninstallGrafana_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowManagerServer).UninstallGrafana(ctx, req.(*UninstallGrafanaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowManager_ListHoneycombEnvironments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHoneycombEnvironmentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowManagerServer).ListHoneycombEnvironments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowManager_ListHoneycombEnvironments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowManagerServer).ListHoneycombEnvironments(ctx, req.(*ListHoneycombEnvironmentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowManager_AddHoneycombEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddHoneycombEnvironmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowManagerServer).AddHoneycombEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowManager_AddHoneycombEnvironment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowManagerServer).AddHoneycombEnvironment(ctx, req.(*AddHoneycombEnvironmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowManager_UpdateHoneycombEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHoneycombEnvironmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowManagerServer).UpdateHoneycombEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowManager_UpdateHoneycombEnvironment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowManagerServer).UpdateHoneycombEnvironment(ctx, req.(*UpdateHoneycombEnvironmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowManager_DeleteHoneycombEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHoneycombEnvironmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowManagerServer).DeleteHoneycombEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowManager_DeleteHoneycombEnvironment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowManagerServer).DeleteHoneycombEnvironment(ctx, req.(*DeleteHoneycombEnvironmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowManager_UninstallHoneycomb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UninstallHoneycombReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowManagerServer).UninstallHoneycomb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowManager_UninstallHoneycomb_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowManagerServer).UninstallHoneycomb(ctx, req.(*UninstallHoneycombReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowManager_CreateGitHubApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGitHubAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowManagerServer).CreateGitHubApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowManager_CreateGitHubApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowManagerServer).CreateGitHubApp(ctx, req.(*CreateGitHubAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowManager_InstallGitHub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallGitHubReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowManagerServer).InstallGitHub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowManager_InstallGitHub_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowManagerServer).InstallGitHub(ctx, req.(*InstallGitHubReq))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkflowManager_ServiceDesc is the grpc.ServiceDesc for WorkflowManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkflowManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "prodvana.workflow.WorkflowManager",
	HandlerType: (*WorkflowManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListIntegrations",
			Handler:    _WorkflowManager_ListIntegrations_Handler,
		},
		{
			MethodName: "DeleteIntegration",
			Handler:    _WorkflowManager_DeleteIntegration_Handler,
		},
		{
			MethodName: "CreateContainerRegistryIntegration",
			Handler:    _WorkflowManager_CreateContainerRegistryIntegration_Handler,
		},
		{
			MethodName: "DeleteContainerRegistryIntegration",
			Handler:    _WorkflowManager_DeleteContainerRegistryIntegration_Handler,
		},
		{
			MethodName: "ListContainerRegistryIntegrations",
			Handler:    _WorkflowManager_ListContainerRegistryIntegrations_Handler,
		},
		{
			MethodName: "GetContainerRegistryIntegration",
			Handler:    _WorkflowManager_GetContainerRegistryIntegration_Handler,
		},
		{
			MethodName: "GetServiceImageInfo",
			Handler:    _WorkflowManager_GetServiceImageInfo_Handler,
		},
		{
			MethodName: "GetContainerRegistryImages",
			Handler:    _WorkflowManager_GetContainerRegistryImages_Handler,
		},
		{
			MethodName: "ListTrackedImageRepositories",
			Handler:    _WorkflowManager_ListTrackedImageRepositories_Handler,
		},
		{
			MethodName: "GetTrackedImageRepository",
			Handler:    _WorkflowManager_GetTrackedImageRepository_Handler,
		},
		{
			MethodName: "TrackImageRepositories",
			Handler:    _WorkflowManager_TrackImageRepositories_Handler,
		},
		{
			MethodName: "StopTrackingImageRepository",
			Handler:    _WorkflowManager_StopTrackingImageRepository_Handler,
		},
		{
			MethodName: "GetProgramDefaults",
			Handler:    _WorkflowManager_GetProgramDefaults_Handler,
		},
		{
			MethodName: "GetImageCommitInfo",
			Handler:    _WorkflowManager_GetImageCommitInfo_Handler,
		},
		{
			MethodName: "InstallSlack",
			Handler:    _WorkflowManager_InstallSlack_Handler,
		},
		{
			MethodName: "UninstallSlack",
			Handler:    _WorkflowManager_UninstallSlack_Handler,
		},
		{
			MethodName: "GetInstallSlackUrl",
			Handler:    _WorkflowManager_GetInstallSlackUrl_Handler,
		},
		{
			MethodName: "InstallPagerDuty",
			Handler:    _WorkflowManager_InstallPagerDuty_Handler,
		},
		{
			MethodName: "GetInstallPagerDutyUrl",
			Handler:    _WorkflowManager_GetInstallPagerDutyUrl_Handler,
		},
		{
			MethodName: "UninstallPagerDuty",
			Handler:    _WorkflowManager_UninstallPagerDuty_Handler,
		},
		{
			MethodName: "GetGrafanaInstallation",
			Handler:    _WorkflowManager_GetGrafanaInstallation_Handler,
		},
		{
			MethodName: "InstallGrafana",
			Handler:    _WorkflowManager_InstallGrafana_Handler,
		},
		{
			MethodName: "UninstallGrafana",
			Handler:    _WorkflowManager_UninstallGrafana_Handler,
		},
		{
			MethodName: "ListHoneycombEnvironments",
			Handler:    _WorkflowManager_ListHoneycombEnvironments_Handler,
		},
		{
			MethodName: "AddHoneycombEnvironment",
			Handler:    _WorkflowManager_AddHoneycombEnvironment_Handler,
		},
		{
			MethodName: "UpdateHoneycombEnvironment",
			Handler:    _WorkflowManager_UpdateHoneycombEnvironment_Handler,
		},
		{
			MethodName: "DeleteHoneycombEnvironment",
			Handler:    _WorkflowManager_DeleteHoneycombEnvironment_Handler,
		},
		{
			MethodName: "UninstallHoneycomb",
			Handler:    _WorkflowManager_UninstallHoneycomb_Handler,
		},
		{
			MethodName: "CreateGitHubApp",
			Handler:    _WorkflowManager_CreateGitHubApp_Handler,
		},
		{
			MethodName: "InstallGitHub",
			Handler:    _WorkflowManager_InstallGitHub_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "prodvana/workflow/workflow_manager.proto",
}
