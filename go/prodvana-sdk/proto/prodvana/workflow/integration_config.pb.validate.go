// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: prodvana/workflow/integration_config.proto

package workflow

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AlertingConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AlertingConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AlertingConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AlertingConfigMultiError,
// or nil if none found.
func (m *AlertingConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *AlertingConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagerduty()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AlertingConfigValidationError{
					field:  "Pagerduty",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AlertingConfigValidationError{
					field:  "Pagerduty",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagerduty()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AlertingConfigValidationError{
				field:  "Pagerduty",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AlertingConfigMultiError(errors)
	}

	return nil
}

// AlertingConfigMultiError is an error wrapping multiple validation errors
// returned by AlertingConfig.ValidateAll() if the designated constraints
// aren't met.
type AlertingConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AlertingConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AlertingConfigMultiError) AllErrors() []error { return m }

// AlertingConfigValidationError is the validation error returned by
// AlertingConfig.Validate if the designated constraints aren't met.
type AlertingConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AlertingConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AlertingConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AlertingConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AlertingConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AlertingConfigValidationError) ErrorName() string { return "AlertingConfigValidationError" }

// Error satisfies the builtin error interface
func (e AlertingConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAlertingConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AlertingConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AlertingConfigValidationError{}

// Validate checks the field values on AnnotationsConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AnnotationsConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AnnotationsConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AnnotationsConfigMultiError, or nil if none found.
func (m *AnnotationsConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *AnnotationsConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetHoneycomb()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AnnotationsConfigValidationError{
					field:  "Honeycomb",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AnnotationsConfigValidationError{
					field:  "Honeycomb",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHoneycomb()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AnnotationsConfigValidationError{
				field:  "Honeycomb",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AnnotationsConfigMultiError(errors)
	}

	return nil
}

// AnnotationsConfigMultiError is an error wrapping multiple validation errors
// returned by AnnotationsConfig.ValidateAll() if the designated constraints
// aren't met.
type AnnotationsConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AnnotationsConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AnnotationsConfigMultiError) AllErrors() []error { return m }

// AnnotationsConfigValidationError is the validation error returned by
// AnnotationsConfig.Validate if the designated constraints aren't met.
type AnnotationsConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AnnotationsConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AnnotationsConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AnnotationsConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AnnotationsConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AnnotationsConfigValidationError) ErrorName() string {
	return "AnnotationsConfigValidationError"
}

// Error satisfies the builtin error interface
func (e AnnotationsConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAnnotationsConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AnnotationsConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AnnotationsConfigValidationError{}

// Validate checks the field values on TokenConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TokenConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TokenConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TokenConfigMultiError, or
// nil if none found.
func (m *TokenConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *TokenConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TokenSecretKey

	// no validation rules for TokenSecretVersion

	if len(errors) > 0 {
		return TokenConfigMultiError(errors)
	}

	return nil
}

// TokenConfigMultiError is an error wrapping multiple validation errors
// returned by TokenConfig.ValidateAll() if the designated constraints aren't met.
type TokenConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TokenConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TokenConfigMultiError) AllErrors() []error { return m }

// TokenConfigValidationError is the validation error returned by
// TokenConfig.Validate if the designated constraints aren't met.
type TokenConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TokenConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TokenConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TokenConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TokenConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TokenConfigValidationError) ErrorName() string { return "TokenConfigValidationError" }

// Error satisfies the builtin error interface
func (e TokenConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTokenConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TokenConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TokenConfigValidationError{}

// Validate checks the field values on IntegrationConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IntegrationConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IntegrationConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IntegrationConfigMultiError, or nil if none found.
func (m *IntegrationConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *IntegrationConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	oneofConfigOneofPresent := false
	switch v := m.ConfigOneof.(type) {
	case *IntegrationConfig_SlackConfig:
		if v == nil {
			err := IntegrationConfigValidationError{
				field:  "ConfigOneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofConfigOneofPresent = true

		if all {
			switch v := interface{}(m.GetSlackConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IntegrationConfigValidationError{
						field:  "SlackConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IntegrationConfigValidationError{
						field:  "SlackConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSlackConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IntegrationConfigValidationError{
					field:  "SlackConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *IntegrationConfig_PagerdutyConfig:
		if v == nil {
			err := IntegrationConfigValidationError{
				field:  "ConfigOneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofConfigOneofPresent = true

		if all {
			switch v := interface{}(m.GetPagerdutyConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IntegrationConfigValidationError{
						field:  "PagerdutyConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IntegrationConfigValidationError{
						field:  "PagerdutyConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPagerdutyConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IntegrationConfigValidationError{
					field:  "PagerdutyConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofConfigOneofPresent {
		err := IntegrationConfigValidationError{
			field:  "ConfigOneof",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IntegrationConfigMultiError(errors)
	}

	return nil
}

// IntegrationConfigMultiError is an error wrapping multiple validation errors
// returned by IntegrationConfig.ValidateAll() if the designated constraints
// aren't met.
type IntegrationConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntegrationConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntegrationConfigMultiError) AllErrors() []error { return m }

// IntegrationConfigValidationError is the validation error returned by
// IntegrationConfig.Validate if the designated constraints aren't met.
type IntegrationConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntegrationConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntegrationConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntegrationConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntegrationConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntegrationConfigValidationError) ErrorName() string {
	return "IntegrationConfigValidationError"
}

// Error satisfies the builtin error interface
func (e IntegrationConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntegrationConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntegrationConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntegrationConfigValidationError{}

// Validate checks the field values on AlertingConfig_PagerDuty with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AlertingConfig_PagerDuty) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AlertingConfig_PagerDuty with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AlertingConfig_PagerDutyMultiError, or nil if none found.
func (m *AlertingConfig_PagerDuty) ValidateAll() error {
	return m.validate(true)
}

func (m *AlertingConfig_PagerDuty) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetService()) < 1 {
		err := AlertingConfig_PagerDutyValidationError{
			field:  "Service",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AlertingConfig_PagerDutyMultiError(errors)
	}

	return nil
}

// AlertingConfig_PagerDutyMultiError is an error wrapping multiple validation
// errors returned by AlertingConfig_PagerDuty.ValidateAll() if the designated
// constraints aren't met.
type AlertingConfig_PagerDutyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AlertingConfig_PagerDutyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AlertingConfig_PagerDutyMultiError) AllErrors() []error { return m }

// AlertingConfig_PagerDutyValidationError is the validation error returned by
// AlertingConfig_PagerDuty.Validate if the designated constraints aren't met.
type AlertingConfig_PagerDutyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AlertingConfig_PagerDutyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AlertingConfig_PagerDutyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AlertingConfig_PagerDutyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AlertingConfig_PagerDutyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AlertingConfig_PagerDutyValidationError) ErrorName() string {
	return "AlertingConfig_PagerDutyValidationError"
}

// Error satisfies the builtin error interface
func (e AlertingConfig_PagerDutyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAlertingConfig_PagerDuty.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AlertingConfig_PagerDutyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AlertingConfig_PagerDutyValidationError{}

// Validate checks the field values on AnnotationsConfig_Honeycomb with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AnnotationsConfig_Honeycomb) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AnnotationsConfig_Honeycomb with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AnnotationsConfig_HoneycombMultiError, or nil if none found.
func (m *AnnotationsConfig_Honeycomb) ValidateAll() error {
	return m.validate(true)
}

func (m *AnnotationsConfig_Honeycomb) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetEnvironment()) < 1 {
		err := AnnotationsConfig_HoneycombValidationError{
			field:  "Environment",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Dataset

	if len(errors) > 0 {
		return AnnotationsConfig_HoneycombMultiError(errors)
	}

	return nil
}

// AnnotationsConfig_HoneycombMultiError is an error wrapping multiple
// validation errors returned by AnnotationsConfig_Honeycomb.ValidateAll() if
// the designated constraints aren't met.
type AnnotationsConfig_HoneycombMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AnnotationsConfig_HoneycombMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AnnotationsConfig_HoneycombMultiError) AllErrors() []error { return m }

// AnnotationsConfig_HoneycombValidationError is the validation error returned
// by AnnotationsConfig_Honeycomb.Validate if the designated constraints
// aren't met.
type AnnotationsConfig_HoneycombValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AnnotationsConfig_HoneycombValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AnnotationsConfig_HoneycombValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AnnotationsConfig_HoneycombValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AnnotationsConfig_HoneycombValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AnnotationsConfig_HoneycombValidationError) ErrorName() string {
	return "AnnotationsConfig_HoneycombValidationError"
}

// Error satisfies the builtin error interface
func (e AnnotationsConfig_HoneycombValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAnnotationsConfig_Honeycomb.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AnnotationsConfig_HoneycombValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AnnotationsConfig_HoneycombValidationError{}
