// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: prodvana/workflow/workflow_manager.proto

package workflow

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on TrackedImageRepository with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TrackedImageRepository) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TrackedImageRepository with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TrackedImageRepositoryMultiError, or nil if none found.
func (m *TrackedImageRepository) ValidateAll() error {
	return m.validate(true)
}

func (m *TrackedImageRepository) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Repository

	if all {
		switch v := interface{}(m.GetLastIndex()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TrackedImageRepositoryValidationError{
					field:  "LastIndex",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TrackedImageRepositoryValidationError{
					field:  "LastIndex",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastIndex()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TrackedImageRepositoryValidationError{
				field:  "LastIndex",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IndexStatus

	if len(errors) > 0 {
		return TrackedImageRepositoryMultiError(errors)
	}

	return nil
}

// TrackedImageRepositoryMultiError is an error wrapping multiple validation
// errors returned by TrackedImageRepository.ValidateAll() if the designated
// constraints aren't met.
type TrackedImageRepositoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TrackedImageRepositoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TrackedImageRepositoryMultiError) AllErrors() []error { return m }

// TrackedImageRepositoryValidationError is the validation error returned by
// TrackedImageRepository.Validate if the designated constraints aren't met.
type TrackedImageRepositoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrackedImageRepositoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrackedImageRepositoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrackedImageRepositoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrackedImageRepositoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrackedImageRepositoryValidationError) ErrorName() string {
	return "TrackedImageRepositoryValidationError"
}

// Error satisfies the builtin error interface
func (e TrackedImageRepositoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrackedImageRepository.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrackedImageRepositoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrackedImageRepositoryValidationError{}

// Validate checks the field values on RegistryImage with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RegistryImage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegistryImage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RegistryImageMultiError, or
// nil if none found.
func (m *RegistryImage) ValidateAll() error {
	return m.validate(true)
}

func (m *RegistryImage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCreated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegistryImageValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegistryImageValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegistryImageValidationError{
				field:  "Created",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Url

	// no validation rules for Tag

	if all {
		switch v := interface{}(m.GetCommit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegistryImageValidationError{
					field:  "Commit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegistryImageValidationError{
					field:  "Commit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegistryImageValidationError{
				field:  "Commit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RegistryImageMultiError(errors)
	}

	return nil
}

// RegistryImageMultiError is an error wrapping multiple validation errors
// returned by RegistryImage.ValidateAll() if the designated constraints
// aren't met.
type RegistryImageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegistryImageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegistryImageMultiError) AllErrors() []error { return m }

// RegistryImageValidationError is the validation error returned by
// RegistryImage.Validate if the designated constraints aren't met.
type RegistryImageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegistryImageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegistryImageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegistryImageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegistryImageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegistryImageValidationError) ErrorName() string { return "RegistryImageValidationError" }

// Error satisfies the builtin error interface
func (e RegistryImageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegistryImage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegistryImageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegistryImageValidationError{}

// Validate checks the field values on ListRepoCommitsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRepoCommitsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRepoCommitsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRepoCommitsReqMultiError, or nil if none found.
func (m *ListRepoCommitsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRepoCommitsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Repository

	// no validation rules for StartingRef

	// no validation rules for PageToken

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListRepoCommitsReqMultiError(errors)
	}

	return nil
}

// ListRepoCommitsReqMultiError is an error wrapping multiple validation errors
// returned by ListRepoCommitsReq.ValidateAll() if the designated constraints
// aren't met.
type ListRepoCommitsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRepoCommitsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRepoCommitsReqMultiError) AllErrors() []error { return m }

// ListRepoCommitsReqValidationError is the validation error returned by
// ListRepoCommitsReq.Validate if the designated constraints aren't met.
type ListRepoCommitsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRepoCommitsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRepoCommitsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRepoCommitsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRepoCommitsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRepoCommitsReqValidationError) ErrorName() string {
	return "ListRepoCommitsReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListRepoCommitsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRepoCommitsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRepoCommitsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRepoCommitsReqValidationError{}

// Validate checks the field values on ListRepoCommitsResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRepoCommitsResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRepoCommitsResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRepoCommitsRespMultiError, or nil if none found.
func (m *ListRepoCommitsResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRepoCommitsResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCommits() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRepoCommitsRespValidationError{
						field:  fmt.Sprintf("Commits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRepoCommitsRespValidationError{
						field:  fmt.Sprintf("Commits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRepoCommitsRespValidationError{
					field:  fmt.Sprintf("Commits[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListRepoCommitsRespMultiError(errors)
	}

	return nil
}

// ListRepoCommitsRespMultiError is an error wrapping multiple validation
// errors returned by ListRepoCommitsResp.ValidateAll() if the designated
// constraints aren't met.
type ListRepoCommitsRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRepoCommitsRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRepoCommitsRespMultiError) AllErrors() []error { return m }

// ListRepoCommitsRespValidationError is the validation error returned by
// ListRepoCommitsResp.Validate if the designated constraints aren't met.
type ListRepoCommitsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRepoCommitsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRepoCommitsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRepoCommitsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRepoCommitsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRepoCommitsRespValidationError) ErrorName() string {
	return "ListRepoCommitsRespValidationError"
}

// Error satisfies the builtin error interface
func (e ListRepoCommitsRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRepoCommitsResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRepoCommitsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRepoCommitsRespValidationError{}

// Validate checks the field values on CreateContainerRegistryIntegrationReq
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateContainerRegistryIntegrationReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateContainerRegistryIntegrationReq
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateContainerRegistryIntegrationReqMultiError, or nil if none found.
func (m *CreateContainerRegistryIntegrationReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateContainerRegistryIntegrationReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 63 {
		err := CreateContainerRegistryIntegrationReqValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 63 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateContainerRegistryIntegrationReq_Name_Pattern.MatchString(m.GetName()) {
		err := CreateContainerRegistryIntegrationReqValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[a-z]([a-z0-9-]*[a-z0-9]){0,1}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Url

	// no validation rules for Username

	// no validation rules for Secret

	// no validation rules for Type

	switch v := m.RegistryOptions.(type) {
	case *CreateContainerRegistryIntegrationReq_EcrOptions:
		if v == nil {
			err := CreateContainerRegistryIntegrationReqValidationError{
				field:  "RegistryOptions",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetEcrOptions()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateContainerRegistryIntegrationReqValidationError{
						field:  "EcrOptions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateContainerRegistryIntegrationReqValidationError{
						field:  "EcrOptions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEcrOptions()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateContainerRegistryIntegrationReqValidationError{
					field:  "EcrOptions",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *CreateContainerRegistryIntegrationReq_PublicRegistryOptions_:
		if v == nil {
			err := CreateContainerRegistryIntegrationReqValidationError{
				field:  "RegistryOptions",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPublicRegistryOptions()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateContainerRegistryIntegrationReqValidationError{
						field:  "PublicRegistryOptions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateContainerRegistryIntegrationReqValidationError{
						field:  "PublicRegistryOptions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPublicRegistryOptions()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateContainerRegistryIntegrationReqValidationError{
					field:  "PublicRegistryOptions",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return CreateContainerRegistryIntegrationReqMultiError(errors)
	}

	return nil
}

// CreateContainerRegistryIntegrationReqMultiError is an error wrapping
// multiple validation errors returned by
// CreateContainerRegistryIntegrationReq.ValidateAll() if the designated
// constraints aren't met.
type CreateContainerRegistryIntegrationReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateContainerRegistryIntegrationReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateContainerRegistryIntegrationReqMultiError) AllErrors() []error { return m }

// CreateContainerRegistryIntegrationReqValidationError is the validation error
// returned by CreateContainerRegistryIntegrationReq.Validate if the
// designated constraints aren't met.
type CreateContainerRegistryIntegrationReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateContainerRegistryIntegrationReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateContainerRegistryIntegrationReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateContainerRegistryIntegrationReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateContainerRegistryIntegrationReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateContainerRegistryIntegrationReqValidationError) ErrorName() string {
	return "CreateContainerRegistryIntegrationReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateContainerRegistryIntegrationReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateContainerRegistryIntegrationReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateContainerRegistryIntegrationReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateContainerRegistryIntegrationReqValidationError{}

var _CreateContainerRegistryIntegrationReq_Name_Pattern = regexp.MustCompile("^[a-z]([a-z0-9-]*[a-z0-9]){0,1}$")

// Validate checks the field values on CreateContainerRegistryIntegrationRes
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateContainerRegistryIntegrationRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateContainerRegistryIntegrationRes
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateContainerRegistryIntegrationResMultiError, or nil if none found.
func (m *CreateContainerRegistryIntegrationRes) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateContainerRegistryIntegrationRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IntegrationId

	if len(errors) > 0 {
		return CreateContainerRegistryIntegrationResMultiError(errors)
	}

	return nil
}

// CreateContainerRegistryIntegrationResMultiError is an error wrapping
// multiple validation errors returned by
// CreateContainerRegistryIntegrationRes.ValidateAll() if the designated
// constraints aren't met.
type CreateContainerRegistryIntegrationResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateContainerRegistryIntegrationResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateContainerRegistryIntegrationResMultiError) AllErrors() []error { return m }

// CreateContainerRegistryIntegrationResValidationError is the validation error
// returned by CreateContainerRegistryIntegrationRes.Validate if the
// designated constraints aren't met.
type CreateContainerRegistryIntegrationResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateContainerRegistryIntegrationResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateContainerRegistryIntegrationResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateContainerRegistryIntegrationResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateContainerRegistryIntegrationResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateContainerRegistryIntegrationResValidationError) ErrorName() string {
	return "CreateContainerRegistryIntegrationResValidationError"
}

// Error satisfies the builtin error interface
func (e CreateContainerRegistryIntegrationResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateContainerRegistryIntegrationRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateContainerRegistryIntegrationResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateContainerRegistryIntegrationResValidationError{}

// Validate checks the field values on DeleteContainerRegistryIntegrationReq
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DeleteContainerRegistryIntegrationReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteContainerRegistryIntegrationReq
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteContainerRegistryIntegrationReqMultiError, or nil if none found.
func (m *DeleteContainerRegistryIntegrationReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteContainerRegistryIntegrationReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RegistryName

	if len(errors) > 0 {
		return DeleteContainerRegistryIntegrationReqMultiError(errors)
	}

	return nil
}

// DeleteContainerRegistryIntegrationReqMultiError is an error wrapping
// multiple validation errors returned by
// DeleteContainerRegistryIntegrationReq.ValidateAll() if the designated
// constraints aren't met.
type DeleteContainerRegistryIntegrationReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteContainerRegistryIntegrationReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteContainerRegistryIntegrationReqMultiError) AllErrors() []error { return m }

// DeleteContainerRegistryIntegrationReqValidationError is the validation error
// returned by DeleteContainerRegistryIntegrationReq.Validate if the
// designated constraints aren't met.
type DeleteContainerRegistryIntegrationReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteContainerRegistryIntegrationReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteContainerRegistryIntegrationReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteContainerRegistryIntegrationReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteContainerRegistryIntegrationReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteContainerRegistryIntegrationReqValidationError) ErrorName() string {
	return "DeleteContainerRegistryIntegrationReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteContainerRegistryIntegrationReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteContainerRegistryIntegrationReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteContainerRegistryIntegrationReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteContainerRegistryIntegrationReqValidationError{}

// Validate checks the field values on DeleteContainerRegistryIntegrationResp
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DeleteContainerRegistryIntegrationResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DeleteContainerRegistryIntegrationResp with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// DeleteContainerRegistryIntegrationRespMultiError, or nil if none found.
func (m *DeleteContainerRegistryIntegrationResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteContainerRegistryIntegrationResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteContainerRegistryIntegrationRespMultiError(errors)
	}

	return nil
}

// DeleteContainerRegistryIntegrationRespMultiError is an error wrapping
// multiple validation errors returned by
// DeleteContainerRegistryIntegrationResp.ValidateAll() if the designated
// constraints aren't met.
type DeleteContainerRegistryIntegrationRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteContainerRegistryIntegrationRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteContainerRegistryIntegrationRespMultiError) AllErrors() []error { return m }

// DeleteContainerRegistryIntegrationRespValidationError is the validation
// error returned by DeleteContainerRegistryIntegrationResp.Validate if the
// designated constraints aren't met.
type DeleteContainerRegistryIntegrationRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteContainerRegistryIntegrationRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteContainerRegistryIntegrationRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteContainerRegistryIntegrationRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteContainerRegistryIntegrationRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteContainerRegistryIntegrationRespValidationError) ErrorName() string {
	return "DeleteContainerRegistryIntegrationRespValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteContainerRegistryIntegrationRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteContainerRegistryIntegrationResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteContainerRegistryIntegrationRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteContainerRegistryIntegrationRespValidationError{}

// Validate checks the field values on ListContainerRegistryIntegrationsReq
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListContainerRegistryIntegrationsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListContainerRegistryIntegrationsReq
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListContainerRegistryIntegrationsReqMultiError, or nil if none found.
func (m *ListContainerRegistryIntegrationsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListContainerRegistryIntegrationsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FetchStatus

	if len(errors) > 0 {
		return ListContainerRegistryIntegrationsReqMultiError(errors)
	}

	return nil
}

// ListContainerRegistryIntegrationsReqMultiError is an error wrapping multiple
// validation errors returned by
// ListContainerRegistryIntegrationsReq.ValidateAll() if the designated
// constraints aren't met.
type ListContainerRegistryIntegrationsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListContainerRegistryIntegrationsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListContainerRegistryIntegrationsReqMultiError) AllErrors() []error { return m }

// ListContainerRegistryIntegrationsReqValidationError is the validation error
// returned by ListContainerRegistryIntegrationsReq.Validate if the designated
// constraints aren't met.
type ListContainerRegistryIntegrationsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListContainerRegistryIntegrationsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListContainerRegistryIntegrationsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListContainerRegistryIntegrationsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListContainerRegistryIntegrationsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListContainerRegistryIntegrationsReqValidationError) ErrorName() string {
	return "ListContainerRegistryIntegrationsReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListContainerRegistryIntegrationsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListContainerRegistryIntegrationsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListContainerRegistryIntegrationsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListContainerRegistryIntegrationsReqValidationError{}

// Validate checks the field values on ContainerRegistryIntegration with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContainerRegistryIntegration) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContainerRegistryIntegration with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContainerRegistryIntegrationMultiError, or nil if none found.
func (m *ContainerRegistryIntegration) ValidateAll() error {
	return m.validate(true)
}

func (m *ContainerRegistryIntegration) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IntegrationId

	// no validation rules for Name

	// no validation rules for Url

	// no validation rules for Type

	// no validation rules for Status

	for idx, item := range m.GetRepositories() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ContainerRegistryIntegrationValidationError{
						field:  fmt.Sprintf("Repositories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ContainerRegistryIntegrationValidationError{
						field:  fmt.Sprintf("Repositories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ContainerRegistryIntegrationValidationError{
					field:  fmt.Sprintf("Repositories[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	switch v := m.RegistryInfo.(type) {
	case *ContainerRegistryIntegration_EcrInfo:
		if v == nil {
			err := ContainerRegistryIntegrationValidationError{
				field:  "RegistryInfo",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetEcrInfo()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ContainerRegistryIntegrationValidationError{
						field:  "EcrInfo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ContainerRegistryIntegrationValidationError{
						field:  "EcrInfo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEcrInfo()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ContainerRegistryIntegrationValidationError{
					field:  "EcrInfo",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ContainerRegistryIntegrationMultiError(errors)
	}

	return nil
}

// ContainerRegistryIntegrationMultiError is an error wrapping multiple
// validation errors returned by ContainerRegistryIntegration.ValidateAll() if
// the designated constraints aren't met.
type ContainerRegistryIntegrationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContainerRegistryIntegrationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContainerRegistryIntegrationMultiError) AllErrors() []error { return m }

// ContainerRegistryIntegrationValidationError is the validation error returned
// by ContainerRegistryIntegration.Validate if the designated constraints
// aren't met.
type ContainerRegistryIntegrationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContainerRegistryIntegrationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContainerRegistryIntegrationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContainerRegistryIntegrationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContainerRegistryIntegrationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContainerRegistryIntegrationValidationError) ErrorName() string {
	return "ContainerRegistryIntegrationValidationError"
}

// Error satisfies the builtin error interface
func (e ContainerRegistryIntegrationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContainerRegistryIntegration.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContainerRegistryIntegrationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContainerRegistryIntegrationValidationError{}

// Validate checks the field values on ListContainerRegistryIntegrationsResp
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListContainerRegistryIntegrationsResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListContainerRegistryIntegrationsResp
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListContainerRegistryIntegrationsRespMultiError, or nil if none found.
func (m *ListContainerRegistryIntegrationsResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListContainerRegistryIntegrationsResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetContainerRegistries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListContainerRegistryIntegrationsRespValidationError{
						field:  fmt.Sprintf("ContainerRegistries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListContainerRegistryIntegrationsRespValidationError{
						field:  fmt.Sprintf("ContainerRegistries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListContainerRegistryIntegrationsRespValidationError{
					field:  fmt.Sprintf("ContainerRegistries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListContainerRegistryIntegrationsRespMultiError(errors)
	}

	return nil
}

// ListContainerRegistryIntegrationsRespMultiError is an error wrapping
// multiple validation errors returned by
// ListContainerRegistryIntegrationsResp.ValidateAll() if the designated
// constraints aren't met.
type ListContainerRegistryIntegrationsRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListContainerRegistryIntegrationsRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListContainerRegistryIntegrationsRespMultiError) AllErrors() []error { return m }

// ListContainerRegistryIntegrationsRespValidationError is the validation error
// returned by ListContainerRegistryIntegrationsResp.Validate if the
// designated constraints aren't met.
type ListContainerRegistryIntegrationsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListContainerRegistryIntegrationsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListContainerRegistryIntegrationsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListContainerRegistryIntegrationsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListContainerRegistryIntegrationsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListContainerRegistryIntegrationsRespValidationError) ErrorName() string {
	return "ListContainerRegistryIntegrationsRespValidationError"
}

// Error satisfies the builtin error interface
func (e ListContainerRegistryIntegrationsRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListContainerRegistryIntegrationsResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListContainerRegistryIntegrationsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListContainerRegistryIntegrationsRespValidationError{}

// Validate checks the field values on GetContainerRegistryIntegrationReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetContainerRegistryIntegrationReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetContainerRegistryIntegrationReq
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetContainerRegistryIntegrationReqMultiError, or nil if none found.
func (m *GetContainerRegistryIntegrationReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetContainerRegistryIntegrationReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RegistryName

	if len(errors) > 0 {
		return GetContainerRegistryIntegrationReqMultiError(errors)
	}

	return nil
}

// GetContainerRegistryIntegrationReqMultiError is an error wrapping multiple
// validation errors returned by
// GetContainerRegistryIntegrationReq.ValidateAll() if the designated
// constraints aren't met.
type GetContainerRegistryIntegrationReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetContainerRegistryIntegrationReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetContainerRegistryIntegrationReqMultiError) AllErrors() []error { return m }

// GetContainerRegistryIntegrationReqValidationError is the validation error
// returned by GetContainerRegistryIntegrationReq.Validate if the designated
// constraints aren't met.
type GetContainerRegistryIntegrationReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetContainerRegistryIntegrationReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetContainerRegistryIntegrationReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetContainerRegistryIntegrationReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetContainerRegistryIntegrationReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetContainerRegistryIntegrationReqValidationError) ErrorName() string {
	return "GetContainerRegistryIntegrationReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetContainerRegistryIntegrationReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetContainerRegistryIntegrationReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetContainerRegistryIntegrationReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetContainerRegistryIntegrationReqValidationError{}

// Validate checks the field values on GetContainerRegistryIntegrationResp with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetContainerRegistryIntegrationResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetContainerRegistryIntegrationResp
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetContainerRegistryIntegrationRespMultiError, or nil if none found.
func (m *GetContainerRegistryIntegrationResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetContainerRegistryIntegrationResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRegistry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetContainerRegistryIntegrationRespValidationError{
					field:  "Registry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetContainerRegistryIntegrationRespValidationError{
					field:  "Registry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRegistry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetContainerRegistryIntegrationRespValidationError{
				field:  "Registry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetContainerRegistryIntegrationRespMultiError(errors)
	}

	return nil
}

// GetContainerRegistryIntegrationRespMultiError is an error wrapping multiple
// validation errors returned by
// GetContainerRegistryIntegrationResp.ValidateAll() if the designated
// constraints aren't met.
type GetContainerRegistryIntegrationRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetContainerRegistryIntegrationRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetContainerRegistryIntegrationRespMultiError) AllErrors() []error { return m }

// GetContainerRegistryIntegrationRespValidationError is the validation error
// returned by GetContainerRegistryIntegrationResp.Validate if the designated
// constraints aren't met.
type GetContainerRegistryIntegrationRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetContainerRegistryIntegrationRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetContainerRegistryIntegrationRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetContainerRegistryIntegrationRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetContainerRegistryIntegrationRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetContainerRegistryIntegrationRespValidationError) ErrorName() string {
	return "GetContainerRegistryIntegrationRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetContainerRegistryIntegrationRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetContainerRegistryIntegrationResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetContainerRegistryIntegrationRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetContainerRegistryIntegrationRespValidationError{}

// Validate checks the field values on GetContainerRegistryImagesReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetContainerRegistryImagesReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetContainerRegistryImagesReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetContainerRegistryImagesReqMultiError, or nil if none found.
func (m *GetContainerRegistryImagesReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetContainerRegistryImagesReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IntegrationId

	// no validation rules for ImageRepository

	// no validation rules for SkipRegistryCache

	// no validation rules for PageToken

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetContainerRegistryImagesReqMultiError(errors)
	}

	return nil
}

// GetContainerRegistryImagesReqMultiError is an error wrapping multiple
// validation errors returned by GetContainerRegistryImagesReq.ValidateAll()
// if the designated constraints aren't met.
type GetContainerRegistryImagesReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetContainerRegistryImagesReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetContainerRegistryImagesReqMultiError) AllErrors() []error { return m }

// GetContainerRegistryImagesReqValidationError is the validation error
// returned by GetContainerRegistryImagesReq.Validate if the designated
// constraints aren't met.
type GetContainerRegistryImagesReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetContainerRegistryImagesReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetContainerRegistryImagesReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetContainerRegistryImagesReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetContainerRegistryImagesReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetContainerRegistryImagesReqValidationError) ErrorName() string {
	return "GetContainerRegistryImagesReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetContainerRegistryImagesReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetContainerRegistryImagesReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetContainerRegistryImagesReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetContainerRegistryImagesReqValidationError{}

// Validate checks the field values on GetContainerRegistryImagesRes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetContainerRegistryImagesRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetContainerRegistryImagesRes with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetContainerRegistryImagesResMultiError, or nil if none found.
func (m *GetContainerRegistryImagesRes) ValidateAll() error {
	return m.validate(true)
}

func (m *GetContainerRegistryImagesRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetImages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetContainerRegistryImagesResValidationError{
						field:  fmt.Sprintf("Images[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetContainerRegistryImagesResValidationError{
						field:  fmt.Sprintf("Images[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetContainerRegistryImagesResValidationError{
					field:  fmt.Sprintf("Images[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return GetContainerRegistryImagesResMultiError(errors)
	}

	return nil
}

// GetContainerRegistryImagesResMultiError is an error wrapping multiple
// validation errors returned by GetContainerRegistryImagesRes.ValidateAll()
// if the designated constraints aren't met.
type GetContainerRegistryImagesResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetContainerRegistryImagesResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetContainerRegistryImagesResMultiError) AllErrors() []error { return m }

// GetContainerRegistryImagesResValidationError is the validation error
// returned by GetContainerRegistryImagesRes.Validate if the designated
// constraints aren't met.
type GetContainerRegistryImagesResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetContainerRegistryImagesResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetContainerRegistryImagesResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetContainerRegistryImagesResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetContainerRegistryImagesResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetContainerRegistryImagesResValidationError) ErrorName() string {
	return "GetContainerRegistryImagesResValidationError"
}

// Error satisfies the builtin error interface
func (e GetContainerRegistryImagesResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetContainerRegistryImagesRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetContainerRegistryImagesResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetContainerRegistryImagesResValidationError{}

// Validate checks the field values on ListTrackedImageRepositoriesReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTrackedImageRepositoriesReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTrackedImageRepositoriesReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListTrackedImageRepositoriesReqMultiError, or nil if none found.
func (m *ListTrackedImageRepositoriesReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTrackedImageRepositoriesReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IntegrationId

	if len(errors) > 0 {
		return ListTrackedImageRepositoriesReqMultiError(errors)
	}

	return nil
}

// ListTrackedImageRepositoriesReqMultiError is an error wrapping multiple
// validation errors returned by ListTrackedImageRepositoriesReq.ValidateAll()
// if the designated constraints aren't met.
type ListTrackedImageRepositoriesReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTrackedImageRepositoriesReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTrackedImageRepositoriesReqMultiError) AllErrors() []error { return m }

// ListTrackedImageRepositoriesReqValidationError is the validation error
// returned by ListTrackedImageRepositoriesReq.Validate if the designated
// constraints aren't met.
type ListTrackedImageRepositoriesReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTrackedImageRepositoriesReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTrackedImageRepositoriesReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTrackedImageRepositoriesReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTrackedImageRepositoriesReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTrackedImageRepositoriesReqValidationError) ErrorName() string {
	return "ListTrackedImageRepositoriesReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListTrackedImageRepositoriesReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTrackedImageRepositoriesReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTrackedImageRepositoriesReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTrackedImageRepositoriesReqValidationError{}

// Validate checks the field values on ListTrackedImageRepositoriesResp with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListTrackedImageRepositoriesResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTrackedImageRepositoriesResp with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListTrackedImageRepositoriesRespMultiError, or nil if none found.
func (m *ListTrackedImageRepositoriesResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTrackedImageRepositoriesResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRepositories() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTrackedImageRepositoriesRespValidationError{
						field:  fmt.Sprintf("Repositories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTrackedImageRepositoriesRespValidationError{
						field:  fmt.Sprintf("Repositories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTrackedImageRepositoriesRespValidationError{
					field:  fmt.Sprintf("Repositories[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListTrackedImageRepositoriesRespMultiError(errors)
	}

	return nil
}

// ListTrackedImageRepositoriesRespMultiError is an error wrapping multiple
// validation errors returned by
// ListTrackedImageRepositoriesResp.ValidateAll() if the designated
// constraints aren't met.
type ListTrackedImageRepositoriesRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTrackedImageRepositoriesRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTrackedImageRepositoriesRespMultiError) AllErrors() []error { return m }

// ListTrackedImageRepositoriesRespValidationError is the validation error
// returned by ListTrackedImageRepositoriesResp.Validate if the designated
// constraints aren't met.
type ListTrackedImageRepositoriesRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTrackedImageRepositoriesRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTrackedImageRepositoriesRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTrackedImageRepositoriesRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTrackedImageRepositoriesRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTrackedImageRepositoriesRespValidationError) ErrorName() string {
	return "ListTrackedImageRepositoriesRespValidationError"
}

// Error satisfies the builtin error interface
func (e ListTrackedImageRepositoriesRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTrackedImageRepositoriesResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTrackedImageRepositoriesRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTrackedImageRepositoriesRespValidationError{}

// Validate checks the field values on GetTrackedImageRepositoryReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTrackedImageRepositoryReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTrackedImageRepositoryReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTrackedImageRepositoryReqMultiError, or nil if none found.
func (m *GetTrackedImageRepositoryReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTrackedImageRepositoryReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IntegrationId

	// no validation rules for Repository

	if len(errors) > 0 {
		return GetTrackedImageRepositoryReqMultiError(errors)
	}

	return nil
}

// GetTrackedImageRepositoryReqMultiError is an error wrapping multiple
// validation errors returned by GetTrackedImageRepositoryReq.ValidateAll() if
// the designated constraints aren't met.
type GetTrackedImageRepositoryReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTrackedImageRepositoryReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTrackedImageRepositoryReqMultiError) AllErrors() []error { return m }

// GetTrackedImageRepositoryReqValidationError is the validation error returned
// by GetTrackedImageRepositoryReq.Validate if the designated constraints
// aren't met.
type GetTrackedImageRepositoryReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTrackedImageRepositoryReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTrackedImageRepositoryReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTrackedImageRepositoryReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTrackedImageRepositoryReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTrackedImageRepositoryReqValidationError) ErrorName() string {
	return "GetTrackedImageRepositoryReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetTrackedImageRepositoryReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTrackedImageRepositoryReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTrackedImageRepositoryReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTrackedImageRepositoryReqValidationError{}

// Validate checks the field values on GetTrackedImageRepositoryResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTrackedImageRepositoryResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTrackedImageRepositoryResp with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetTrackedImageRepositoryRespMultiError, or nil if none found.
func (m *GetTrackedImageRepositoryResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTrackedImageRepositoryResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRepository()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTrackedImageRepositoryRespValidationError{
					field:  "Repository",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTrackedImageRepositoryRespValidationError{
					field:  "Repository",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRepository()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTrackedImageRepositoryRespValidationError{
				field:  "Repository",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTrackedImageRepositoryRespMultiError(errors)
	}

	return nil
}

// GetTrackedImageRepositoryRespMultiError is an error wrapping multiple
// validation errors returned by GetTrackedImageRepositoryResp.ValidateAll()
// if the designated constraints aren't met.
type GetTrackedImageRepositoryRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTrackedImageRepositoryRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTrackedImageRepositoryRespMultiError) AllErrors() []error { return m }

// GetTrackedImageRepositoryRespValidationError is the validation error
// returned by GetTrackedImageRepositoryResp.Validate if the designated
// constraints aren't met.
type GetTrackedImageRepositoryRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTrackedImageRepositoryRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTrackedImageRepositoryRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTrackedImageRepositoryRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTrackedImageRepositoryRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTrackedImageRepositoryRespValidationError) ErrorName() string {
	return "GetTrackedImageRepositoryRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetTrackedImageRepositoryRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTrackedImageRepositoryResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTrackedImageRepositoryRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTrackedImageRepositoryRespValidationError{}

// Validate checks the field values on TrackImageRepositoriesReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TrackImageRepositoriesReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TrackImageRepositoriesReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TrackImageRepositoriesReqMultiError, or nil if none found.
func (m *TrackImageRepositoriesReq) ValidateAll() error {
	return m.validate(true)
}

func (m *TrackImageRepositoriesReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IntegrationId

	if len(errors) > 0 {
		return TrackImageRepositoriesReqMultiError(errors)
	}

	return nil
}

// TrackImageRepositoriesReqMultiError is an error wrapping multiple validation
// errors returned by TrackImageRepositoriesReq.ValidateAll() if the
// designated constraints aren't met.
type TrackImageRepositoriesReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TrackImageRepositoriesReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TrackImageRepositoriesReqMultiError) AllErrors() []error { return m }

// TrackImageRepositoriesReqValidationError is the validation error returned by
// TrackImageRepositoriesReq.Validate if the designated constraints aren't met.
type TrackImageRepositoriesReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrackImageRepositoriesReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrackImageRepositoriesReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrackImageRepositoriesReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrackImageRepositoriesReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrackImageRepositoriesReqValidationError) ErrorName() string {
	return "TrackImageRepositoriesReqValidationError"
}

// Error satisfies the builtin error interface
func (e TrackImageRepositoriesReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrackImageRepositoriesReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrackImageRepositoriesReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrackImageRepositoriesReqValidationError{}

// Validate checks the field values on TrackImageRepositoriesResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TrackImageRepositoriesResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TrackImageRepositoriesResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TrackImageRepositoriesRespMultiError, or nil if none found.
func (m *TrackImageRepositoriesResp) ValidateAll() error {
	return m.validate(true)
}

func (m *TrackImageRepositoriesResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TrackImageRepositoriesRespMultiError(errors)
	}

	return nil
}

// TrackImageRepositoriesRespMultiError is an error wrapping multiple
// validation errors returned by TrackImageRepositoriesResp.ValidateAll() if
// the designated constraints aren't met.
type TrackImageRepositoriesRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TrackImageRepositoriesRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TrackImageRepositoriesRespMultiError) AllErrors() []error { return m }

// TrackImageRepositoriesRespValidationError is the validation error returned
// by TrackImageRepositoriesResp.Validate if the designated constraints aren't met.
type TrackImageRepositoriesRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrackImageRepositoriesRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrackImageRepositoriesRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrackImageRepositoriesRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrackImageRepositoriesRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrackImageRepositoriesRespValidationError) ErrorName() string {
	return "TrackImageRepositoriesRespValidationError"
}

// Error satisfies the builtin error interface
func (e TrackImageRepositoriesRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrackImageRepositoriesResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrackImageRepositoriesRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrackImageRepositoriesRespValidationError{}

// Validate checks the field values on StopTrackingImageRepositoryReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StopTrackingImageRepositoryReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StopTrackingImageRepositoryReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// StopTrackingImageRepositoryReqMultiError, or nil if none found.
func (m *StopTrackingImageRepositoryReq) ValidateAll() error {
	return m.validate(true)
}

func (m *StopTrackingImageRepositoryReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IntegrationId

	// no validation rules for Repository

	if len(errors) > 0 {
		return StopTrackingImageRepositoryReqMultiError(errors)
	}

	return nil
}

// StopTrackingImageRepositoryReqMultiError is an error wrapping multiple
// validation errors returned by StopTrackingImageRepositoryReq.ValidateAll()
// if the designated constraints aren't met.
type StopTrackingImageRepositoryReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StopTrackingImageRepositoryReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StopTrackingImageRepositoryReqMultiError) AllErrors() []error { return m }

// StopTrackingImageRepositoryReqValidationError is the validation error
// returned by StopTrackingImageRepositoryReq.Validate if the designated
// constraints aren't met.
type StopTrackingImageRepositoryReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StopTrackingImageRepositoryReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StopTrackingImageRepositoryReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StopTrackingImageRepositoryReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StopTrackingImageRepositoryReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StopTrackingImageRepositoryReqValidationError) ErrorName() string {
	return "StopTrackingImageRepositoryReqValidationError"
}

// Error satisfies the builtin error interface
func (e StopTrackingImageRepositoryReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStopTrackingImageRepositoryReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StopTrackingImageRepositoryReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StopTrackingImageRepositoryReqValidationError{}

// Validate checks the field values on StopTrackingImageRepositoryResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StopTrackingImageRepositoryResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StopTrackingImageRepositoryResp with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// StopTrackingImageRepositoryRespMultiError, or nil if none found.
func (m *StopTrackingImageRepositoryResp) ValidateAll() error {
	return m.validate(true)
}

func (m *StopTrackingImageRepositoryResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StopTrackingImageRepositoryRespMultiError(errors)
	}

	return nil
}

// StopTrackingImageRepositoryRespMultiError is an error wrapping multiple
// validation errors returned by StopTrackingImageRepositoryResp.ValidateAll()
// if the designated constraints aren't met.
type StopTrackingImageRepositoryRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StopTrackingImageRepositoryRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StopTrackingImageRepositoryRespMultiError) AllErrors() []error { return m }

// StopTrackingImageRepositoryRespValidationError is the validation error
// returned by StopTrackingImageRepositoryResp.Validate if the designated
// constraints aren't met.
type StopTrackingImageRepositoryRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StopTrackingImageRepositoryRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StopTrackingImageRepositoryRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StopTrackingImageRepositoryRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StopTrackingImageRepositoryRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StopTrackingImageRepositoryRespValidationError) ErrorName() string {
	return "StopTrackingImageRepositoryRespValidationError"
}

// Error satisfies the builtin error interface
func (e StopTrackingImageRepositoryRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStopTrackingImageRepositoryResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StopTrackingImageRepositoryRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StopTrackingImageRepositoryRespValidationError{}

// Validate checks the field values on GetImageCommitInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetImageCommitInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetImageCommitInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetImageCommitInfoReqMultiError, or nil if none found.
func (m *GetImageCommitInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetImageCommitInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IntegrationId

	// no validation rules for Repository

	switch v := m.ImageIdOneof.(type) {
	case *GetImageCommitInfoReq_Tag:
		if v == nil {
			err := GetImageCommitInfoReqValidationError{
				field:  "ImageIdOneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Tag
	case *GetImageCommitInfoReq_Image:
		if v == nil {
			err := GetImageCommitInfoReqValidationError{
				field:  "ImageIdOneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Image
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return GetImageCommitInfoReqMultiError(errors)
	}

	return nil
}

// GetImageCommitInfoReqMultiError is an error wrapping multiple validation
// errors returned by GetImageCommitInfoReq.ValidateAll() if the designated
// constraints aren't met.
type GetImageCommitInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetImageCommitInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetImageCommitInfoReqMultiError) AllErrors() []error { return m }

// GetImageCommitInfoReqValidationError is the validation error returned by
// GetImageCommitInfoReq.Validate if the designated constraints aren't met.
type GetImageCommitInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetImageCommitInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetImageCommitInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetImageCommitInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetImageCommitInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetImageCommitInfoReqValidationError) ErrorName() string {
	return "GetImageCommitInfoReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetImageCommitInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetImageCommitInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetImageCommitInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetImageCommitInfoReqValidationError{}

// Validate checks the field values on GetImageCommitInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetImageCommitInfoResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetImageCommitInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetImageCommitInfoRespMultiError, or nil if none found.
func (m *GetImageCommitInfoResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetImageCommitInfoResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetImageCommitInfoRespValidationError{
					field:  "Commit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetImageCommitInfoRespValidationError{
					field:  "Commit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetImageCommitInfoRespValidationError{
				field:  "Commit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetImageCommitInfoRespMultiError(errors)
	}

	return nil
}

// GetImageCommitInfoRespMultiError is an error wrapping multiple validation
// errors returned by GetImageCommitInfoResp.ValidateAll() if the designated
// constraints aren't met.
type GetImageCommitInfoRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetImageCommitInfoRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetImageCommitInfoRespMultiError) AllErrors() []error { return m }

// GetImageCommitInfoRespValidationError is the validation error returned by
// GetImageCommitInfoResp.Validate if the designated constraints aren't met.
type GetImageCommitInfoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetImageCommitInfoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetImageCommitInfoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetImageCommitInfoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetImageCommitInfoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetImageCommitInfoRespValidationError) ErrorName() string {
	return "GetImageCommitInfoRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetImageCommitInfoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetImageCommitInfoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetImageCommitInfoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetImageCommitInfoRespValidationError{}

// Validate checks the field values on GetProgramDefaultsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProgramDefaultsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProgramDefaultsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProgramDefaultsReqMultiError, or nil if none found.
func (m *GetProgramDefaultsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProgramDefaultsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IntegrationId

	// no validation rules for Repository

	// no validation rules for SkipRegistryCache

	switch v := m.ImageIdOneof.(type) {
	case *GetProgramDefaultsReq_Tag:
		if v == nil {
			err := GetProgramDefaultsReqValidationError{
				field:  "ImageIdOneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Tag
	case *GetProgramDefaultsReq_Image:
		if v == nil {
			err := GetProgramDefaultsReqValidationError{
				field:  "ImageIdOneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Image
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return GetProgramDefaultsReqMultiError(errors)
	}

	return nil
}

// GetProgramDefaultsReqMultiError is an error wrapping multiple validation
// errors returned by GetProgramDefaultsReq.ValidateAll() if the designated
// constraints aren't met.
type GetProgramDefaultsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProgramDefaultsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProgramDefaultsReqMultiError) AllErrors() []error { return m }

// GetProgramDefaultsReqValidationError is the validation error returned by
// GetProgramDefaultsReq.Validate if the designated constraints aren't met.
type GetProgramDefaultsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProgramDefaultsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProgramDefaultsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProgramDefaultsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProgramDefaultsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProgramDefaultsReqValidationError) ErrorName() string {
	return "GetProgramDefaultsReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetProgramDefaultsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProgramDefaultsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProgramDefaultsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProgramDefaultsReqValidationError{}

// Validate checks the field values on ProgramDefaults with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ProgramDefaults) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProgramDefaults with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProgramDefaultsMultiError, or nil if none found.
func (m *ProgramDefaults) ValidateAll() error {
	return m.validate(true)
}

func (m *ProgramDefaults) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetEnv()))
		i := 0
		for key := range m.GetEnv() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetEnv()[key]
			_ = val

			// no validation rules for Env[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ProgramDefaultsValidationError{
							field:  fmt.Sprintf("Env[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ProgramDefaultsValidationError{
							field:  fmt.Sprintf("Env[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ProgramDefaultsValidationError{
						field:  fmt.Sprintf("Env[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	for idx, item := range m.GetPorts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProgramDefaultsValidationError{
						field:  fmt.Sprintf("Ports[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProgramDefaultsValidationError{
						field:  fmt.Sprintf("Ports[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProgramDefaultsValidationError{
					field:  fmt.Sprintf("Ports[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ProgramDefaultsMultiError(errors)
	}

	return nil
}

// ProgramDefaultsMultiError is an error wrapping multiple validation errors
// returned by ProgramDefaults.ValidateAll() if the designated constraints
// aren't met.
type ProgramDefaultsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProgramDefaultsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProgramDefaultsMultiError) AllErrors() []error { return m }

// ProgramDefaultsValidationError is the validation error returned by
// ProgramDefaults.Validate if the designated constraints aren't met.
type ProgramDefaultsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProgramDefaultsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProgramDefaultsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProgramDefaultsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProgramDefaultsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProgramDefaultsValidationError) ErrorName() string { return "ProgramDefaultsValidationError" }

// Error satisfies the builtin error interface
func (e ProgramDefaultsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProgramDefaults.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProgramDefaultsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProgramDefaultsValidationError{}

// Validate checks the field values on GetProgramDefaultsResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProgramDefaultsResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProgramDefaultsResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProgramDefaultsRespMultiError, or nil if none found.
func (m *GetProgramDefaultsResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProgramDefaultsResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProgramDefaults()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProgramDefaultsRespValidationError{
					field:  "ProgramDefaults",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProgramDefaultsRespValidationError{
					field:  "ProgramDefaults",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProgramDefaults()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProgramDefaultsRespValidationError{
				field:  "ProgramDefaults",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetProgramDefaultsRespMultiError(errors)
	}

	return nil
}

// GetProgramDefaultsRespMultiError is an error wrapping multiple validation
// errors returned by GetProgramDefaultsResp.ValidateAll() if the designated
// constraints aren't met.
type GetProgramDefaultsRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProgramDefaultsRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProgramDefaultsRespMultiError) AllErrors() []error { return m }

// GetProgramDefaultsRespValidationError is the validation error returned by
// GetProgramDefaultsResp.Validate if the designated constraints aren't met.
type GetProgramDefaultsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProgramDefaultsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProgramDefaultsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProgramDefaultsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProgramDefaultsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProgramDefaultsRespValidationError) ErrorName() string {
	return "GetProgramDefaultsRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetProgramDefaultsRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProgramDefaultsResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProgramDefaultsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProgramDefaultsRespValidationError{}

// Validate checks the field values on GetServiceImageInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetServiceImageInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServiceImageInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetServiceImageInfoReqMultiError, or nil if none found.
func (m *GetServiceImageInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServiceImageInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Service

	// no validation rules for Application

	if len(errors) > 0 {
		return GetServiceImageInfoReqMultiError(errors)
	}

	return nil
}

// GetServiceImageInfoReqMultiError is an error wrapping multiple validation
// errors returned by GetServiceImageInfoReq.ValidateAll() if the designated
// constraints aren't met.
type GetServiceImageInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServiceImageInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServiceImageInfoReqMultiError) AllErrors() []error { return m }

// GetServiceImageInfoReqValidationError is the validation error returned by
// GetServiceImageInfoReq.Validate if the designated constraints aren't met.
type GetServiceImageInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServiceImageInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServiceImageInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServiceImageInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServiceImageInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServiceImageInfoReqValidationError) ErrorName() string {
	return "GetServiceImageInfoReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetServiceImageInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServiceImageInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServiceImageInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServiceImageInfoReqValidationError{}

// Validate checks the field values on GetServiceImageInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetServiceImageInfoResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServiceImageInfoResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetServiceImageInfoRespMultiError, or nil if none found.
func (m *GetServiceImageInfoResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServiceImageInfoResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceId

	// no validation rules for ServiceName

	for idx, item := range m.GetVersionInfos() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetServiceImageInfoRespValidationError{
						field:  fmt.Sprintf("VersionInfos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetServiceImageInfoRespValidationError{
						field:  fmt.Sprintf("VersionInfos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetServiceImageInfoRespValidationError{
					field:  fmt.Sprintf("VersionInfos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetServiceImageInfoRespMultiError(errors)
	}

	return nil
}

// GetServiceImageInfoRespMultiError is an error wrapping multiple validation
// errors returned by GetServiceImageInfoResp.ValidateAll() if the designated
// constraints aren't met.
type GetServiceImageInfoRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServiceImageInfoRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServiceImageInfoRespMultiError) AllErrors() []error { return m }

// GetServiceImageInfoRespValidationError is the validation error returned by
// GetServiceImageInfoResp.Validate if the designated constraints aren't met.
type GetServiceImageInfoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServiceImageInfoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServiceImageInfoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServiceImageInfoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServiceImageInfoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServiceImageInfoRespValidationError) ErrorName() string {
	return "GetServiceImageInfoRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetServiceImageInfoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServiceImageInfoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServiceImageInfoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServiceImageInfoRespValidationError{}

// Validate checks the field values on InstallSlackReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *InstallSlackReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstallSlackReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstallSlackReqMultiError, or nil if none found.
func (m *InstallSlackReq) ValidateAll() error {
	return m.validate(true)
}

func (m *InstallSlackReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Error

	// no validation rules for Code

	// no validation rules for RedirectUri

	if len(errors) > 0 {
		return InstallSlackReqMultiError(errors)
	}

	return nil
}

// InstallSlackReqMultiError is an error wrapping multiple validation errors
// returned by InstallSlackReq.ValidateAll() if the designated constraints
// aren't met.
type InstallSlackReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstallSlackReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstallSlackReqMultiError) AllErrors() []error { return m }

// InstallSlackReqValidationError is the validation error returned by
// InstallSlackReq.Validate if the designated constraints aren't met.
type InstallSlackReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstallSlackReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstallSlackReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstallSlackReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstallSlackReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstallSlackReqValidationError) ErrorName() string { return "InstallSlackReqValidationError" }

// Error satisfies the builtin error interface
func (e InstallSlackReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstallSlackReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstallSlackReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstallSlackReqValidationError{}

// Validate checks the field values on InstallSlackResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *InstallSlackResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstallSlackResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstallSlackRespMultiError, or nil if none found.
func (m *InstallSlackResp) ValidateAll() error {
	return m.validate(true)
}

func (m *InstallSlackResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return InstallSlackRespMultiError(errors)
	}

	return nil
}

// InstallSlackRespMultiError is an error wrapping multiple validation errors
// returned by InstallSlackResp.ValidateAll() if the designated constraints
// aren't met.
type InstallSlackRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstallSlackRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstallSlackRespMultiError) AllErrors() []error { return m }

// InstallSlackRespValidationError is the validation error returned by
// InstallSlackResp.Validate if the designated constraints aren't met.
type InstallSlackRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstallSlackRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstallSlackRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstallSlackRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstallSlackRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstallSlackRespValidationError) ErrorName() string { return "InstallSlackRespValidationError" }

// Error satisfies the builtin error interface
func (e InstallSlackRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstallSlackResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstallSlackRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstallSlackRespValidationError{}

// Validate checks the field values on GetInstallSlackUrlReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetInstallSlackUrlReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetInstallSlackUrlReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetInstallSlackUrlReqMultiError, or nil if none found.
func (m *GetInstallSlackUrlReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetInstallSlackUrlReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetInstallSlackUrlReqMultiError(errors)
	}

	return nil
}

// GetInstallSlackUrlReqMultiError is an error wrapping multiple validation
// errors returned by GetInstallSlackUrlReq.ValidateAll() if the designated
// constraints aren't met.
type GetInstallSlackUrlReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetInstallSlackUrlReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetInstallSlackUrlReqMultiError) AllErrors() []error { return m }

// GetInstallSlackUrlReqValidationError is the validation error returned by
// GetInstallSlackUrlReq.Validate if the designated constraints aren't met.
type GetInstallSlackUrlReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInstallSlackUrlReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInstallSlackUrlReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInstallSlackUrlReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInstallSlackUrlReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInstallSlackUrlReqValidationError) ErrorName() string {
	return "GetInstallSlackUrlReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetInstallSlackUrlReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInstallSlackUrlReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInstallSlackUrlReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInstallSlackUrlReqValidationError{}

// Validate checks the field values on GetInstallSlackUrlResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetInstallSlackUrlResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetInstallSlackUrlResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetInstallSlackUrlRespMultiError, or nil if none found.
func (m *GetInstallSlackUrlResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetInstallSlackUrlResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	if len(errors) > 0 {
		return GetInstallSlackUrlRespMultiError(errors)
	}

	return nil
}

// GetInstallSlackUrlRespMultiError is an error wrapping multiple validation
// errors returned by GetInstallSlackUrlResp.ValidateAll() if the designated
// constraints aren't met.
type GetInstallSlackUrlRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetInstallSlackUrlRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetInstallSlackUrlRespMultiError) AllErrors() []error { return m }

// GetInstallSlackUrlRespValidationError is the validation error returned by
// GetInstallSlackUrlResp.Validate if the designated constraints aren't met.
type GetInstallSlackUrlRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInstallSlackUrlRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInstallSlackUrlRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInstallSlackUrlRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInstallSlackUrlRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInstallSlackUrlRespValidationError) ErrorName() string {
	return "GetInstallSlackUrlRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetInstallSlackUrlRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInstallSlackUrlResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInstallSlackUrlRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInstallSlackUrlRespValidationError{}

// Validate checks the field values on UninstallSlackReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UninstallSlackReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UninstallSlackReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UninstallSlackReqMultiError, or nil if none found.
func (m *UninstallSlackReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UninstallSlackReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UninstallSlackReqMultiError(errors)
	}

	return nil
}

// UninstallSlackReqMultiError is an error wrapping multiple validation errors
// returned by UninstallSlackReq.ValidateAll() if the designated constraints
// aren't met.
type UninstallSlackReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UninstallSlackReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UninstallSlackReqMultiError) AllErrors() []error { return m }

// UninstallSlackReqValidationError is the validation error returned by
// UninstallSlackReq.Validate if the designated constraints aren't met.
type UninstallSlackReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UninstallSlackReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UninstallSlackReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UninstallSlackReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UninstallSlackReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UninstallSlackReqValidationError) ErrorName() string {
	return "UninstallSlackReqValidationError"
}

// Error satisfies the builtin error interface
func (e UninstallSlackReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUninstallSlackReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UninstallSlackReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UninstallSlackReqValidationError{}

// Validate checks the field values on UninstallSlackResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UninstallSlackResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UninstallSlackResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UninstallSlackRespMultiError, or nil if none found.
func (m *UninstallSlackResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UninstallSlackResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return UninstallSlackRespMultiError(errors)
	}

	return nil
}

// UninstallSlackRespMultiError is an error wrapping multiple validation errors
// returned by UninstallSlackResp.ValidateAll() if the designated constraints
// aren't met.
type UninstallSlackRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UninstallSlackRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UninstallSlackRespMultiError) AllErrors() []error { return m }

// UninstallSlackRespValidationError is the validation error returned by
// UninstallSlackResp.Validate if the designated constraints aren't met.
type UninstallSlackRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UninstallSlackRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UninstallSlackRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UninstallSlackRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UninstallSlackRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UninstallSlackRespValidationError) ErrorName() string {
	return "UninstallSlackRespValidationError"
}

// Error satisfies the builtin error interface
func (e UninstallSlackRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUninstallSlackResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UninstallSlackRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UninstallSlackRespValidationError{}

// Validate checks the field values on SlackChannel with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SlackChannel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SlackChannel with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SlackChannelMultiError, or
// nil if none found.
func (m *SlackChannel) ValidateAll() error {
	return m.validate(true)
}

func (m *SlackChannel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return SlackChannelMultiError(errors)
	}

	return nil
}

// SlackChannelMultiError is an error wrapping multiple validation errors
// returned by SlackChannel.ValidateAll() if the designated constraints aren't met.
type SlackChannelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SlackChannelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SlackChannelMultiError) AllErrors() []error { return m }

// SlackChannelValidationError is the validation error returned by
// SlackChannel.Validate if the designated constraints aren't met.
type SlackChannelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SlackChannelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SlackChannelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SlackChannelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SlackChannelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SlackChannelValidationError) ErrorName() string { return "SlackChannelValidationError" }

// Error satisfies the builtin error interface
func (e SlackChannelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSlackChannel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SlackChannelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SlackChannelValidationError{}

// Validate checks the field values on InstallPagerDutyReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstallPagerDutyReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstallPagerDutyReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstallPagerDutyReqMultiError, or nil if none found.
func (m *InstallPagerDutyReq) ValidateAll() error {
	return m.validate(true)
}

func (m *InstallPagerDutyReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Error

	// no validation rules for Code

	// no validation rules for RedirectUri

	if len(errors) > 0 {
		return InstallPagerDutyReqMultiError(errors)
	}

	return nil
}

// InstallPagerDutyReqMultiError is an error wrapping multiple validation
// errors returned by InstallPagerDutyReq.ValidateAll() if the designated
// constraints aren't met.
type InstallPagerDutyReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstallPagerDutyReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstallPagerDutyReqMultiError) AllErrors() []error { return m }

// InstallPagerDutyReqValidationError is the validation error returned by
// InstallPagerDutyReq.Validate if the designated constraints aren't met.
type InstallPagerDutyReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstallPagerDutyReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstallPagerDutyReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstallPagerDutyReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstallPagerDutyReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstallPagerDutyReqValidationError) ErrorName() string {
	return "InstallPagerDutyReqValidationError"
}

// Error satisfies the builtin error interface
func (e InstallPagerDutyReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstallPagerDutyReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstallPagerDutyReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstallPagerDutyReqValidationError{}

// Validate checks the field values on InstallPagerDutyResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstallPagerDutyResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstallPagerDutyResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstallPagerDutyRespMultiError, or nil if none found.
func (m *InstallPagerDutyResp) ValidateAll() error {
	return m.validate(true)
}

func (m *InstallPagerDutyResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return InstallPagerDutyRespMultiError(errors)
	}

	return nil
}

// InstallPagerDutyRespMultiError is an error wrapping multiple validation
// errors returned by InstallPagerDutyResp.ValidateAll() if the designated
// constraints aren't met.
type InstallPagerDutyRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstallPagerDutyRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstallPagerDutyRespMultiError) AllErrors() []error { return m }

// InstallPagerDutyRespValidationError is the validation error returned by
// InstallPagerDutyResp.Validate if the designated constraints aren't met.
type InstallPagerDutyRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstallPagerDutyRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstallPagerDutyRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstallPagerDutyRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstallPagerDutyRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstallPagerDutyRespValidationError) ErrorName() string {
	return "InstallPagerDutyRespValidationError"
}

// Error satisfies the builtin error interface
func (e InstallPagerDutyRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstallPagerDutyResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstallPagerDutyRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstallPagerDutyRespValidationError{}

// Validate checks the field values on GetInstallPagerDutyUrlReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetInstallPagerDutyUrlReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetInstallPagerDutyUrlReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetInstallPagerDutyUrlReqMultiError, or nil if none found.
func (m *GetInstallPagerDutyUrlReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetInstallPagerDutyUrlReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetInstallPagerDutyUrlReqMultiError(errors)
	}

	return nil
}

// GetInstallPagerDutyUrlReqMultiError is an error wrapping multiple validation
// errors returned by GetInstallPagerDutyUrlReq.ValidateAll() if the
// designated constraints aren't met.
type GetInstallPagerDutyUrlReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetInstallPagerDutyUrlReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetInstallPagerDutyUrlReqMultiError) AllErrors() []error { return m }

// GetInstallPagerDutyUrlReqValidationError is the validation error returned by
// GetInstallPagerDutyUrlReq.Validate if the designated constraints aren't met.
type GetInstallPagerDutyUrlReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInstallPagerDutyUrlReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInstallPagerDutyUrlReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInstallPagerDutyUrlReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInstallPagerDutyUrlReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInstallPagerDutyUrlReqValidationError) ErrorName() string {
	return "GetInstallPagerDutyUrlReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetInstallPagerDutyUrlReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInstallPagerDutyUrlReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInstallPagerDutyUrlReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInstallPagerDutyUrlReqValidationError{}

// Validate checks the field values on GetInstallPagerDutyUrlResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetInstallPagerDutyUrlResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetInstallPagerDutyUrlResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetInstallPagerDutyUrlRespMultiError, or nil if none found.
func (m *GetInstallPagerDutyUrlResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetInstallPagerDutyUrlResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	if len(errors) > 0 {
		return GetInstallPagerDutyUrlRespMultiError(errors)
	}

	return nil
}

// GetInstallPagerDutyUrlRespMultiError is an error wrapping multiple
// validation errors returned by GetInstallPagerDutyUrlResp.ValidateAll() if
// the designated constraints aren't met.
type GetInstallPagerDutyUrlRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetInstallPagerDutyUrlRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetInstallPagerDutyUrlRespMultiError) AllErrors() []error { return m }

// GetInstallPagerDutyUrlRespValidationError is the validation error returned
// by GetInstallPagerDutyUrlResp.Validate if the designated constraints aren't met.
type GetInstallPagerDutyUrlRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInstallPagerDutyUrlRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInstallPagerDutyUrlRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInstallPagerDutyUrlRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInstallPagerDutyUrlRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInstallPagerDutyUrlRespValidationError) ErrorName() string {
	return "GetInstallPagerDutyUrlRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetInstallPagerDutyUrlRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInstallPagerDutyUrlResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInstallPagerDutyUrlRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInstallPagerDutyUrlRespValidationError{}

// Validate checks the field values on UninstallPagerDutyReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UninstallPagerDutyReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UninstallPagerDutyReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UninstallPagerDutyReqMultiError, or nil if none found.
func (m *UninstallPagerDutyReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UninstallPagerDutyReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UninstallPagerDutyReqMultiError(errors)
	}

	return nil
}

// UninstallPagerDutyReqMultiError is an error wrapping multiple validation
// errors returned by UninstallPagerDutyReq.ValidateAll() if the designated
// constraints aren't met.
type UninstallPagerDutyReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UninstallPagerDutyReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UninstallPagerDutyReqMultiError) AllErrors() []error { return m }

// UninstallPagerDutyReqValidationError is the validation error returned by
// UninstallPagerDutyReq.Validate if the designated constraints aren't met.
type UninstallPagerDutyReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UninstallPagerDutyReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UninstallPagerDutyReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UninstallPagerDutyReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UninstallPagerDutyReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UninstallPagerDutyReqValidationError) ErrorName() string {
	return "UninstallPagerDutyReqValidationError"
}

// Error satisfies the builtin error interface
func (e UninstallPagerDutyReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUninstallPagerDutyReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UninstallPagerDutyReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UninstallPagerDutyReqValidationError{}

// Validate checks the field values on UninstallPagerDutyResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UninstallPagerDutyResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UninstallPagerDutyResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UninstallPagerDutyRespMultiError, or nil if none found.
func (m *UninstallPagerDutyResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UninstallPagerDutyResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return UninstallPagerDutyRespMultiError(errors)
	}

	return nil
}

// UninstallPagerDutyRespMultiError is an error wrapping multiple validation
// errors returned by UninstallPagerDutyResp.ValidateAll() if the designated
// constraints aren't met.
type UninstallPagerDutyRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UninstallPagerDutyRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UninstallPagerDutyRespMultiError) AllErrors() []error { return m }

// UninstallPagerDutyRespValidationError is the validation error returned by
// UninstallPagerDutyResp.Validate if the designated constraints aren't met.
type UninstallPagerDutyRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UninstallPagerDutyRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UninstallPagerDutyRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UninstallPagerDutyRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UninstallPagerDutyRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UninstallPagerDutyRespValidationError) ErrorName() string {
	return "UninstallPagerDutyRespValidationError"
}

// Error satisfies the builtin error interface
func (e UninstallPagerDutyRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUninstallPagerDutyResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UninstallPagerDutyRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UninstallPagerDutyRespValidationError{}

// Validate checks the field values on PagerDutyService with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PagerDutyService) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PagerDutyService with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PagerDutyServiceMultiError, or nil if none found.
func (m *PagerDutyService) ValidateAll() error {
	return m.validate(true)
}

func (m *PagerDutyService) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return PagerDutyServiceMultiError(errors)
	}

	return nil
}

// PagerDutyServiceMultiError is an error wrapping multiple validation errors
// returned by PagerDutyService.ValidateAll() if the designated constraints
// aren't met.
type PagerDutyServiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PagerDutyServiceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PagerDutyServiceMultiError) AllErrors() []error { return m }

// PagerDutyServiceValidationError is the validation error returned by
// PagerDutyService.Validate if the designated constraints aren't met.
type PagerDutyServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PagerDutyServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PagerDutyServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PagerDutyServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PagerDutyServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PagerDutyServiceValidationError) ErrorName() string { return "PagerDutyServiceValidationError" }

// Error satisfies the builtin error interface
func (e PagerDutyServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPagerDutyService.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PagerDutyServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PagerDutyServiceValidationError{}

// Validate checks the field values on InstallGrafanaReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *InstallGrafanaReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstallGrafanaReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstallGrafanaReqMultiError, or nil if none found.
func (m *InstallGrafanaReq) ValidateAll() error {
	return m.validate(true)
}

func (m *InstallGrafanaReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUrl()) < 1 {
		err := InstallGrafanaReqValidationError{
			field:  "Url",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetApiToken()) < 1 {
		err := InstallGrafanaReqValidationError{
			field:  "ApiToken",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return InstallGrafanaReqMultiError(errors)
	}

	return nil
}

// InstallGrafanaReqMultiError is an error wrapping multiple validation errors
// returned by InstallGrafanaReq.ValidateAll() if the designated constraints
// aren't met.
type InstallGrafanaReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstallGrafanaReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstallGrafanaReqMultiError) AllErrors() []error { return m }

// InstallGrafanaReqValidationError is the validation error returned by
// InstallGrafanaReq.Validate if the designated constraints aren't met.
type InstallGrafanaReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstallGrafanaReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstallGrafanaReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstallGrafanaReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstallGrafanaReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstallGrafanaReqValidationError) ErrorName() string {
	return "InstallGrafanaReqValidationError"
}

// Error satisfies the builtin error interface
func (e InstallGrafanaReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstallGrafanaReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstallGrafanaReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstallGrafanaReqValidationError{}

// Validate checks the field values on InstallGrafanaResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstallGrafanaResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstallGrafanaResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstallGrafanaRespMultiError, or nil if none found.
func (m *InstallGrafanaResp) ValidateAll() error {
	return m.validate(true)
}

func (m *InstallGrafanaResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IntegrationId

	if len(errors) > 0 {
		return InstallGrafanaRespMultiError(errors)
	}

	return nil
}

// InstallGrafanaRespMultiError is an error wrapping multiple validation errors
// returned by InstallGrafanaResp.ValidateAll() if the designated constraints
// aren't met.
type InstallGrafanaRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstallGrafanaRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstallGrafanaRespMultiError) AllErrors() []error { return m }

// InstallGrafanaRespValidationError is the validation error returned by
// InstallGrafanaResp.Validate if the designated constraints aren't met.
type InstallGrafanaRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstallGrafanaRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstallGrafanaRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstallGrafanaRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstallGrafanaRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstallGrafanaRespValidationError) ErrorName() string {
	return "InstallGrafanaRespValidationError"
}

// Error satisfies the builtin error interface
func (e InstallGrafanaRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstallGrafanaResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstallGrafanaRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstallGrafanaRespValidationError{}

// Validate checks the field values on UninstallGrafanaReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UninstallGrafanaReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UninstallGrafanaReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UninstallGrafanaReqMultiError, or nil if none found.
func (m *UninstallGrafanaReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UninstallGrafanaReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UninstallGrafanaReqMultiError(errors)
	}

	return nil
}

// UninstallGrafanaReqMultiError is an error wrapping multiple validation
// errors returned by UninstallGrafanaReq.ValidateAll() if the designated
// constraints aren't met.
type UninstallGrafanaReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UninstallGrafanaReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UninstallGrafanaReqMultiError) AllErrors() []error { return m }

// UninstallGrafanaReqValidationError is the validation error returned by
// UninstallGrafanaReq.Validate if the designated constraints aren't met.
type UninstallGrafanaReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UninstallGrafanaReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UninstallGrafanaReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UninstallGrafanaReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UninstallGrafanaReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UninstallGrafanaReqValidationError) ErrorName() string {
	return "UninstallGrafanaReqValidationError"
}

// Error satisfies the builtin error interface
func (e UninstallGrafanaReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUninstallGrafanaReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UninstallGrafanaReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UninstallGrafanaReqValidationError{}

// Validate checks the field values on UninstallGrafanaResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UninstallGrafanaResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UninstallGrafanaResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UninstallGrafanaRespMultiError, or nil if none found.
func (m *UninstallGrafanaResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UninstallGrafanaResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IntegrationId

	if len(errors) > 0 {
		return UninstallGrafanaRespMultiError(errors)
	}

	return nil
}

// UninstallGrafanaRespMultiError is an error wrapping multiple validation
// errors returned by UninstallGrafanaResp.ValidateAll() if the designated
// constraints aren't met.
type UninstallGrafanaRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UninstallGrafanaRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UninstallGrafanaRespMultiError) AllErrors() []error { return m }

// UninstallGrafanaRespValidationError is the validation error returned by
// UninstallGrafanaResp.Validate if the designated constraints aren't met.
type UninstallGrafanaRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UninstallGrafanaRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UninstallGrafanaRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UninstallGrafanaRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UninstallGrafanaRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UninstallGrafanaRespValidationError) ErrorName() string {
	return "UninstallGrafanaRespValidationError"
}

// Error satisfies the builtin error interface
func (e UninstallGrafanaRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUninstallGrafanaResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UninstallGrafanaRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UninstallGrafanaRespValidationError{}

// Validate checks the field values on GetGrafanaInstallationReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGrafanaInstallationReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGrafanaInstallationReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGrafanaInstallationReqMultiError, or nil if none found.
func (m *GetGrafanaInstallationReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGrafanaInstallationReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetGrafanaInstallationReqMultiError(errors)
	}

	return nil
}

// GetGrafanaInstallationReqMultiError is an error wrapping multiple validation
// errors returned by GetGrafanaInstallationReq.ValidateAll() if the
// designated constraints aren't met.
type GetGrafanaInstallationReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGrafanaInstallationReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGrafanaInstallationReqMultiError) AllErrors() []error { return m }

// GetGrafanaInstallationReqValidationError is the validation error returned by
// GetGrafanaInstallationReq.Validate if the designated constraints aren't met.
type GetGrafanaInstallationReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGrafanaInstallationReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGrafanaInstallationReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGrafanaInstallationReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGrafanaInstallationReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGrafanaInstallationReqValidationError) ErrorName() string {
	return "GetGrafanaInstallationReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetGrafanaInstallationReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGrafanaInstallationReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGrafanaInstallationReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGrafanaInstallationReqValidationError{}

// Validate checks the field values on GetGrafanaInstallationResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGrafanaInstallationResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGrafanaInstallationResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGrafanaInstallationRespMultiError, or nil if none found.
func (m *GetGrafanaInstallationResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGrafanaInstallationResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IntegrationId

	// no validation rules for Url

	if len(errors) > 0 {
		return GetGrafanaInstallationRespMultiError(errors)
	}

	return nil
}

// GetGrafanaInstallationRespMultiError is an error wrapping multiple
// validation errors returned by GetGrafanaInstallationResp.ValidateAll() if
// the designated constraints aren't met.
type GetGrafanaInstallationRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGrafanaInstallationRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGrafanaInstallationRespMultiError) AllErrors() []error { return m }

// GetGrafanaInstallationRespValidationError is the validation error returned
// by GetGrafanaInstallationResp.Validate if the designated constraints aren't met.
type GetGrafanaInstallationRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGrafanaInstallationRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGrafanaInstallationRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGrafanaInstallationRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGrafanaInstallationRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGrafanaInstallationRespValidationError) ErrorName() string {
	return "GetGrafanaInstallationRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetGrafanaInstallationRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGrafanaInstallationResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGrafanaInstallationRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGrafanaInstallationRespValidationError{}

// Validate checks the field values on ListHoneycombEnvironmentsReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListHoneycombEnvironmentsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListHoneycombEnvironmentsReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListHoneycombEnvironmentsReqMultiError, or nil if none found.
func (m *ListHoneycombEnvironmentsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListHoneycombEnvironmentsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListHoneycombEnvironmentsReqMultiError(errors)
	}

	return nil
}

// ListHoneycombEnvironmentsReqMultiError is an error wrapping multiple
// validation errors returned by ListHoneycombEnvironmentsReq.ValidateAll() if
// the designated constraints aren't met.
type ListHoneycombEnvironmentsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListHoneycombEnvironmentsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListHoneycombEnvironmentsReqMultiError) AllErrors() []error { return m }

// ListHoneycombEnvironmentsReqValidationError is the validation error returned
// by ListHoneycombEnvironmentsReq.Validate if the designated constraints
// aren't met.
type ListHoneycombEnvironmentsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListHoneycombEnvironmentsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListHoneycombEnvironmentsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListHoneycombEnvironmentsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListHoneycombEnvironmentsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListHoneycombEnvironmentsReqValidationError) ErrorName() string {
	return "ListHoneycombEnvironmentsReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListHoneycombEnvironmentsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListHoneycombEnvironmentsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListHoneycombEnvironmentsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListHoneycombEnvironmentsReqValidationError{}

// Validate checks the field values on ListHoneycombEnvironmentsResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListHoneycombEnvironmentsResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListHoneycombEnvironmentsResp with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListHoneycombEnvironmentsRespMultiError, or nil if none found.
func (m *ListHoneycombEnvironmentsResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListHoneycombEnvironmentsResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEnvironments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListHoneycombEnvironmentsRespValidationError{
						field:  fmt.Sprintf("Environments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListHoneycombEnvironmentsRespValidationError{
						field:  fmt.Sprintf("Environments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListHoneycombEnvironmentsRespValidationError{
					field:  fmt.Sprintf("Environments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListHoneycombEnvironmentsRespMultiError(errors)
	}

	return nil
}

// ListHoneycombEnvironmentsRespMultiError is an error wrapping multiple
// validation errors returned by ListHoneycombEnvironmentsResp.ValidateAll()
// if the designated constraints aren't met.
type ListHoneycombEnvironmentsRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListHoneycombEnvironmentsRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListHoneycombEnvironmentsRespMultiError) AllErrors() []error { return m }

// ListHoneycombEnvironmentsRespValidationError is the validation error
// returned by ListHoneycombEnvironmentsResp.Validate if the designated
// constraints aren't met.
type ListHoneycombEnvironmentsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListHoneycombEnvironmentsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListHoneycombEnvironmentsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListHoneycombEnvironmentsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListHoneycombEnvironmentsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListHoneycombEnvironmentsRespValidationError) ErrorName() string {
	return "ListHoneycombEnvironmentsRespValidationError"
}

// Error satisfies the builtin error interface
func (e ListHoneycombEnvironmentsRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListHoneycombEnvironmentsResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListHoneycombEnvironmentsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListHoneycombEnvironmentsRespValidationError{}

// Validate checks the field values on AddHoneycombEnvironmentReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddHoneycombEnvironmentReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddHoneycombEnvironmentReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddHoneycombEnvironmentReqMultiError, or nil if none found.
func (m *AddHoneycombEnvironmentReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddHoneycombEnvironmentReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := AddHoneycombEnvironmentReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetApiKey()) < 1 {
		err := AddHoneycombEnvironmentReqValidationError{
			field:  "ApiKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddHoneycombEnvironmentReqMultiError(errors)
	}

	return nil
}

// AddHoneycombEnvironmentReqMultiError is an error wrapping multiple
// validation errors returned by AddHoneycombEnvironmentReq.ValidateAll() if
// the designated constraints aren't met.
type AddHoneycombEnvironmentReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddHoneycombEnvironmentReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddHoneycombEnvironmentReqMultiError) AllErrors() []error { return m }

// AddHoneycombEnvironmentReqValidationError is the validation error returned
// by AddHoneycombEnvironmentReq.Validate if the designated constraints aren't met.
type AddHoneycombEnvironmentReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddHoneycombEnvironmentReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddHoneycombEnvironmentReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddHoneycombEnvironmentReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddHoneycombEnvironmentReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddHoneycombEnvironmentReqValidationError) ErrorName() string {
	return "AddHoneycombEnvironmentReqValidationError"
}

// Error satisfies the builtin error interface
func (e AddHoneycombEnvironmentReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddHoneycombEnvironmentReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddHoneycombEnvironmentReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddHoneycombEnvironmentReqValidationError{}

// Validate checks the field values on AddHoneycombEnvironmentResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddHoneycombEnvironmentResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddHoneycombEnvironmentResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddHoneycombEnvironmentRespMultiError, or nil if none found.
func (m *AddHoneycombEnvironmentResp) ValidateAll() error {
	return m.validate(true)
}

func (m *AddHoneycombEnvironmentResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IntegrationId

	if len(errors) > 0 {
		return AddHoneycombEnvironmentRespMultiError(errors)
	}

	return nil
}

// AddHoneycombEnvironmentRespMultiError is an error wrapping multiple
// validation errors returned by AddHoneycombEnvironmentResp.ValidateAll() if
// the designated constraints aren't met.
type AddHoneycombEnvironmentRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddHoneycombEnvironmentRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddHoneycombEnvironmentRespMultiError) AllErrors() []error { return m }

// AddHoneycombEnvironmentRespValidationError is the validation error returned
// by AddHoneycombEnvironmentResp.Validate if the designated constraints
// aren't met.
type AddHoneycombEnvironmentRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddHoneycombEnvironmentRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddHoneycombEnvironmentRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddHoneycombEnvironmentRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddHoneycombEnvironmentRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddHoneycombEnvironmentRespValidationError) ErrorName() string {
	return "AddHoneycombEnvironmentRespValidationError"
}

// Error satisfies the builtin error interface
func (e AddHoneycombEnvironmentRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddHoneycombEnvironmentResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddHoneycombEnvironmentRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddHoneycombEnvironmentRespValidationError{}

// Validate checks the field values on UpdateHoneycombEnvironmentReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateHoneycombEnvironmentReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateHoneycombEnvironmentReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateHoneycombEnvironmentReqMultiError, or nil if none found.
func (m *UpdateHoneycombEnvironmentReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateHoneycombEnvironmentReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for ApiKey

	if len(errors) > 0 {
		return UpdateHoneycombEnvironmentReqMultiError(errors)
	}

	return nil
}

// UpdateHoneycombEnvironmentReqMultiError is an error wrapping multiple
// validation errors returned by UpdateHoneycombEnvironmentReq.ValidateAll()
// if the designated constraints aren't met.
type UpdateHoneycombEnvironmentReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateHoneycombEnvironmentReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateHoneycombEnvironmentReqMultiError) AllErrors() []error { return m }

// UpdateHoneycombEnvironmentReqValidationError is the validation error
// returned by UpdateHoneycombEnvironmentReq.Validate if the designated
// constraints aren't met.
type UpdateHoneycombEnvironmentReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateHoneycombEnvironmentReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateHoneycombEnvironmentReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateHoneycombEnvironmentReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateHoneycombEnvironmentReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateHoneycombEnvironmentReqValidationError) ErrorName() string {
	return "UpdateHoneycombEnvironmentReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateHoneycombEnvironmentReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateHoneycombEnvironmentReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateHoneycombEnvironmentReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateHoneycombEnvironmentReqValidationError{}

// Validate checks the field values on UpdateHoneycombEnvironmentResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateHoneycombEnvironmentResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateHoneycombEnvironmentResp with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateHoneycombEnvironmentRespMultiError, or nil if none found.
func (m *UpdateHoneycombEnvironmentResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateHoneycombEnvironmentResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateHoneycombEnvironmentRespMultiError(errors)
	}

	return nil
}

// UpdateHoneycombEnvironmentRespMultiError is an error wrapping multiple
// validation errors returned by UpdateHoneycombEnvironmentResp.ValidateAll()
// if the designated constraints aren't met.
type UpdateHoneycombEnvironmentRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateHoneycombEnvironmentRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateHoneycombEnvironmentRespMultiError) AllErrors() []error { return m }

// UpdateHoneycombEnvironmentRespValidationError is the validation error
// returned by UpdateHoneycombEnvironmentResp.Validate if the designated
// constraints aren't met.
type UpdateHoneycombEnvironmentRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateHoneycombEnvironmentRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateHoneycombEnvironmentRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateHoneycombEnvironmentRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateHoneycombEnvironmentRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateHoneycombEnvironmentRespValidationError) ErrorName() string {
	return "UpdateHoneycombEnvironmentRespValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateHoneycombEnvironmentRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateHoneycombEnvironmentResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateHoneycombEnvironmentRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateHoneycombEnvironmentRespValidationError{}

// Validate checks the field values on DeleteHoneycombEnvironmentReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteHoneycombEnvironmentReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteHoneycombEnvironmentReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteHoneycombEnvironmentReqMultiError, or nil if none found.
func (m *DeleteHoneycombEnvironmentReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteHoneycombEnvironmentReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return DeleteHoneycombEnvironmentReqMultiError(errors)
	}

	return nil
}

// DeleteHoneycombEnvironmentReqMultiError is an error wrapping multiple
// validation errors returned by DeleteHoneycombEnvironmentReq.ValidateAll()
// if the designated constraints aren't met.
type DeleteHoneycombEnvironmentReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteHoneycombEnvironmentReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteHoneycombEnvironmentReqMultiError) AllErrors() []error { return m }

// DeleteHoneycombEnvironmentReqValidationError is the validation error
// returned by DeleteHoneycombEnvironmentReq.Validate if the designated
// constraints aren't met.
type DeleteHoneycombEnvironmentReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteHoneycombEnvironmentReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteHoneycombEnvironmentReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteHoneycombEnvironmentReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteHoneycombEnvironmentReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteHoneycombEnvironmentReqValidationError) ErrorName() string {
	return "DeleteHoneycombEnvironmentReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteHoneycombEnvironmentReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteHoneycombEnvironmentReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteHoneycombEnvironmentReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteHoneycombEnvironmentReqValidationError{}

// Validate checks the field values on DeleteHoneycombEnvironmentResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteHoneycombEnvironmentResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteHoneycombEnvironmentResp with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteHoneycombEnvironmentRespMultiError, or nil if none found.
func (m *DeleteHoneycombEnvironmentResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteHoneycombEnvironmentResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteHoneycombEnvironmentRespMultiError(errors)
	}

	return nil
}

// DeleteHoneycombEnvironmentRespMultiError is an error wrapping multiple
// validation errors returned by DeleteHoneycombEnvironmentResp.ValidateAll()
// if the designated constraints aren't met.
type DeleteHoneycombEnvironmentRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteHoneycombEnvironmentRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteHoneycombEnvironmentRespMultiError) AllErrors() []error { return m }

// DeleteHoneycombEnvironmentRespValidationError is the validation error
// returned by DeleteHoneycombEnvironmentResp.Validate if the designated
// constraints aren't met.
type DeleteHoneycombEnvironmentRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteHoneycombEnvironmentRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteHoneycombEnvironmentRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteHoneycombEnvironmentRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteHoneycombEnvironmentRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteHoneycombEnvironmentRespValidationError) ErrorName() string {
	return "DeleteHoneycombEnvironmentRespValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteHoneycombEnvironmentRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteHoneycombEnvironmentResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteHoneycombEnvironmentRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteHoneycombEnvironmentRespValidationError{}

// Validate checks the field values on UninstallHoneycombReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UninstallHoneycombReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UninstallHoneycombReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UninstallHoneycombReqMultiError, or nil if none found.
func (m *UninstallHoneycombReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UninstallHoneycombReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UninstallHoneycombReqMultiError(errors)
	}

	return nil
}

// UninstallHoneycombReqMultiError is an error wrapping multiple validation
// errors returned by UninstallHoneycombReq.ValidateAll() if the designated
// constraints aren't met.
type UninstallHoneycombReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UninstallHoneycombReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UninstallHoneycombReqMultiError) AllErrors() []error { return m }

// UninstallHoneycombReqValidationError is the validation error returned by
// UninstallHoneycombReq.Validate if the designated constraints aren't met.
type UninstallHoneycombReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UninstallHoneycombReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UninstallHoneycombReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UninstallHoneycombReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UninstallHoneycombReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UninstallHoneycombReqValidationError) ErrorName() string {
	return "UninstallHoneycombReqValidationError"
}

// Error satisfies the builtin error interface
func (e UninstallHoneycombReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUninstallHoneycombReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UninstallHoneycombReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UninstallHoneycombReqValidationError{}

// Validate checks the field values on UninstallHoneycombResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UninstallHoneycombResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UninstallHoneycombResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UninstallHoneycombRespMultiError, or nil if none found.
func (m *UninstallHoneycombResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UninstallHoneycombResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UninstallHoneycombRespMultiError(errors)
	}

	return nil
}

// UninstallHoneycombRespMultiError is an error wrapping multiple validation
// errors returned by UninstallHoneycombResp.ValidateAll() if the designated
// constraints aren't met.
type UninstallHoneycombRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UninstallHoneycombRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UninstallHoneycombRespMultiError) AllErrors() []error { return m }

// UninstallHoneycombRespValidationError is the validation error returned by
// UninstallHoneycombResp.Validate if the designated constraints aren't met.
type UninstallHoneycombRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UninstallHoneycombRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UninstallHoneycombRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UninstallHoneycombRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UninstallHoneycombRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UninstallHoneycombRespValidationError) ErrorName() string {
	return "UninstallHoneycombRespValidationError"
}

// Error satisfies the builtin error interface
func (e UninstallHoneycombRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUninstallHoneycombResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UninstallHoneycombRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UninstallHoneycombRespValidationError{}

// Validate checks the field values on CreateGitHubAppReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateGitHubAppReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGitHubAppReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateGitHubAppReqMultiError, or nil if none found.
func (m *CreateGitHubAppReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGitHubAppReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppId

	// no validation rules for PrivateKey

	// no validation rules for ClientSecret

	// no validation rules for WebhookSecret

	// no validation rules for GithubOrganization

	if len(errors) > 0 {
		return CreateGitHubAppReqMultiError(errors)
	}

	return nil
}

// CreateGitHubAppReqMultiError is an error wrapping multiple validation errors
// returned by CreateGitHubAppReq.ValidateAll() if the designated constraints
// aren't met.
type CreateGitHubAppReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGitHubAppReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGitHubAppReqMultiError) AllErrors() []error { return m }

// CreateGitHubAppReqValidationError is the validation error returned by
// CreateGitHubAppReq.Validate if the designated constraints aren't met.
type CreateGitHubAppReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGitHubAppReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGitHubAppReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGitHubAppReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGitHubAppReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGitHubAppReqValidationError) ErrorName() string {
	return "CreateGitHubAppReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGitHubAppReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGitHubAppReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGitHubAppReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGitHubAppReqValidationError{}

// Validate checks the field values on CreateGitHubAppResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateGitHubAppResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGitHubAppResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateGitHubAppRespMultiError, or nil if none found.
func (m *CreateGitHubAppResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGitHubAppResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IntegrationId

	if len(errors) > 0 {
		return CreateGitHubAppRespMultiError(errors)
	}

	return nil
}

// CreateGitHubAppRespMultiError is an error wrapping multiple validation
// errors returned by CreateGitHubAppResp.ValidateAll() if the designated
// constraints aren't met.
type CreateGitHubAppRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGitHubAppRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGitHubAppRespMultiError) AllErrors() []error { return m }

// CreateGitHubAppRespValidationError is the validation error returned by
// CreateGitHubAppResp.Validate if the designated constraints aren't met.
type CreateGitHubAppRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGitHubAppRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGitHubAppRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGitHubAppRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGitHubAppRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGitHubAppRespValidationError) ErrorName() string {
	return "CreateGitHubAppRespValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGitHubAppRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGitHubAppResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGitHubAppRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGitHubAppRespValidationError{}

// Validate checks the field values on InstallGitHubReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *InstallGitHubReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstallGitHubReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstallGitHubReqMultiError, or nil if none found.
func (m *InstallGitHubReq) ValidateAll() error {
	return m.validate(true)
}

func (m *InstallGitHubReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstallationId

	if len(errors) > 0 {
		return InstallGitHubReqMultiError(errors)
	}

	return nil
}

// InstallGitHubReqMultiError is an error wrapping multiple validation errors
// returned by InstallGitHubReq.ValidateAll() if the designated constraints
// aren't met.
type InstallGitHubReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstallGitHubReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstallGitHubReqMultiError) AllErrors() []error { return m }

// InstallGitHubReqValidationError is the validation error returned by
// InstallGitHubReq.Validate if the designated constraints aren't met.
type InstallGitHubReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstallGitHubReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstallGitHubReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstallGitHubReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstallGitHubReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstallGitHubReqValidationError) ErrorName() string { return "InstallGitHubReqValidationError" }

// Error satisfies the builtin error interface
func (e InstallGitHubReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstallGitHubReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstallGitHubReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstallGitHubReqValidationError{}

// Validate checks the field values on InstallGitHubResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *InstallGitHubResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstallGitHubResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstallGitHubRespMultiError, or nil if none found.
func (m *InstallGitHubResp) ValidateAll() error {
	return m.validate(true)
}

func (m *InstallGitHubResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return InstallGitHubRespMultiError(errors)
	}

	return nil
}

// InstallGitHubRespMultiError is an error wrapping multiple validation errors
// returned by InstallGitHubResp.ValidateAll() if the designated constraints
// aren't met.
type InstallGitHubRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstallGitHubRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstallGitHubRespMultiError) AllErrors() []error { return m }

// InstallGitHubRespValidationError is the validation error returned by
// InstallGitHubResp.Validate if the designated constraints aren't met.
type InstallGitHubRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstallGitHubRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstallGitHubRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstallGitHubRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstallGitHubRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstallGitHubRespValidationError) ErrorName() string {
	return "InstallGitHubRespValidationError"
}

// Error satisfies the builtin error interface
func (e InstallGitHubRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstallGitHubResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstallGitHubRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstallGitHubRespValidationError{}

// Validate checks the field values on Integration with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Integration) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Integration with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IntegrationMultiError, or
// nil if none found.
func (m *Integration) ValidateAll() error {
	return m.validate(true)
}

func (m *Integration) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Type

	if len(errors) > 0 {
		return IntegrationMultiError(errors)
	}

	return nil
}

// IntegrationMultiError is an error wrapping multiple validation errors
// returned by Integration.ValidateAll() if the designated constraints aren't met.
type IntegrationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntegrationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntegrationMultiError) AllErrors() []error { return m }

// IntegrationValidationError is the validation error returned by
// Integration.Validate if the designated constraints aren't met.
type IntegrationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntegrationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntegrationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntegrationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntegrationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntegrationValidationError) ErrorName() string { return "IntegrationValidationError" }

// Error satisfies the builtin error interface
func (e IntegrationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntegration.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntegrationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntegrationValidationError{}

// Validate checks the field values on ListIntegrationsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListIntegrationsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListIntegrationsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListIntegrationsReqMultiError, or nil if none found.
func (m *ListIntegrationsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListIntegrationsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListIntegrationsReqMultiError(errors)
	}

	return nil
}

// ListIntegrationsReqMultiError is an error wrapping multiple validation
// errors returned by ListIntegrationsReq.ValidateAll() if the designated
// constraints aren't met.
type ListIntegrationsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListIntegrationsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListIntegrationsReqMultiError) AllErrors() []error { return m }

// ListIntegrationsReqValidationError is the validation error returned by
// ListIntegrationsReq.Validate if the designated constraints aren't met.
type ListIntegrationsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListIntegrationsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListIntegrationsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListIntegrationsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListIntegrationsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListIntegrationsReqValidationError) ErrorName() string {
	return "ListIntegrationsReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListIntegrationsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListIntegrationsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListIntegrationsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListIntegrationsReqValidationError{}

// Validate checks the field values on ListIntegrationsResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListIntegrationsResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListIntegrationsResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListIntegrationsRespMultiError, or nil if none found.
func (m *ListIntegrationsResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListIntegrationsResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetIntegrations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListIntegrationsRespValidationError{
						field:  fmt.Sprintf("Integrations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListIntegrationsRespValidationError{
						field:  fmt.Sprintf("Integrations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListIntegrationsRespValidationError{
					field:  fmt.Sprintf("Integrations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListIntegrationsRespMultiError(errors)
	}

	return nil
}

// ListIntegrationsRespMultiError is an error wrapping multiple validation
// errors returned by ListIntegrationsResp.ValidateAll() if the designated
// constraints aren't met.
type ListIntegrationsRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListIntegrationsRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListIntegrationsRespMultiError) AllErrors() []error { return m }

// ListIntegrationsRespValidationError is the validation error returned by
// ListIntegrationsResp.Validate if the designated constraints aren't met.
type ListIntegrationsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListIntegrationsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListIntegrationsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListIntegrationsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListIntegrationsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListIntegrationsRespValidationError) ErrorName() string {
	return "ListIntegrationsRespValidationError"
}

// Error satisfies the builtin error interface
func (e ListIntegrationsRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListIntegrationsResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListIntegrationsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListIntegrationsRespValidationError{}

// Validate checks the field values on DeleteIntegrationReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteIntegrationReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteIntegrationReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteIntegrationReqMultiError, or nil if none found.
func (m *DeleteIntegrationReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteIntegrationReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IntegrationId

	if len(errors) > 0 {
		return DeleteIntegrationReqMultiError(errors)
	}

	return nil
}

// DeleteIntegrationReqMultiError is an error wrapping multiple validation
// errors returned by DeleteIntegrationReq.ValidateAll() if the designated
// constraints aren't met.
type DeleteIntegrationReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteIntegrationReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteIntegrationReqMultiError) AllErrors() []error { return m }

// DeleteIntegrationReqValidationError is the validation error returned by
// DeleteIntegrationReq.Validate if the designated constraints aren't met.
type DeleteIntegrationReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteIntegrationReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteIntegrationReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteIntegrationReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteIntegrationReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteIntegrationReqValidationError) ErrorName() string {
	return "DeleteIntegrationReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteIntegrationReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteIntegrationReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteIntegrationReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteIntegrationReqValidationError{}

// Validate checks the field values on DeleteIntegrationResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteIntegrationResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteIntegrationResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteIntegrationRespMultiError, or nil if none found.
func (m *DeleteIntegrationResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteIntegrationResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteIntegrationRespMultiError(errors)
	}

	return nil
}

// DeleteIntegrationRespMultiError is an error wrapping multiple validation
// errors returned by DeleteIntegrationResp.ValidateAll() if the designated
// constraints aren't met.
type DeleteIntegrationRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteIntegrationRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteIntegrationRespMultiError) AllErrors() []error { return m }

// DeleteIntegrationRespValidationError is the validation error returned by
// DeleteIntegrationResp.Validate if the designated constraints aren't met.
type DeleteIntegrationRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteIntegrationRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteIntegrationRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteIntegrationRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteIntegrationRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteIntegrationRespValidationError) ErrorName() string {
	return "DeleteIntegrationRespValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteIntegrationRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteIntegrationResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteIntegrationRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteIntegrationRespValidationError{}

// Validate checks the field values on
// CreateContainerRegistryIntegrationReq_ECROptions with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateContainerRegistryIntegrationReq_ECROptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateContainerRegistryIntegrationReq_ECROptions with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// CreateContainerRegistryIntegrationReq_ECROptionsMultiError, or nil if none found.
func (m *CreateContainerRegistryIntegrationReq_ECROptions) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateContainerRegistryIntegrationReq_ECROptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessKey

	// no validation rules for SecretKey

	// no validation rules for Region

	// no validation rules for RoleArn

	if len(errors) > 0 {
		return CreateContainerRegistryIntegrationReq_ECROptionsMultiError(errors)
	}

	return nil
}

// CreateContainerRegistryIntegrationReq_ECROptionsMultiError is an error
// wrapping multiple validation errors returned by
// CreateContainerRegistryIntegrationReq_ECROptions.ValidateAll() if the
// designated constraints aren't met.
type CreateContainerRegistryIntegrationReq_ECROptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateContainerRegistryIntegrationReq_ECROptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateContainerRegistryIntegrationReq_ECROptionsMultiError) AllErrors() []error { return m }

// CreateContainerRegistryIntegrationReq_ECROptionsValidationError is the
// validation error returned by
// CreateContainerRegistryIntegrationReq_ECROptions.Validate if the designated
// constraints aren't met.
type CreateContainerRegistryIntegrationReq_ECROptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateContainerRegistryIntegrationReq_ECROptionsValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e CreateContainerRegistryIntegrationReq_ECROptionsValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e CreateContainerRegistryIntegrationReq_ECROptionsValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e CreateContainerRegistryIntegrationReq_ECROptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateContainerRegistryIntegrationReq_ECROptionsValidationError) ErrorName() string {
	return "CreateContainerRegistryIntegrationReq_ECROptionsValidationError"
}

// Error satisfies the builtin error interface
func (e CreateContainerRegistryIntegrationReq_ECROptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateContainerRegistryIntegrationReq_ECROptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateContainerRegistryIntegrationReq_ECROptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateContainerRegistryIntegrationReq_ECROptionsValidationError{}

// Validate checks the field values on
// CreateContainerRegistryIntegrationReq_PublicRegistryOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateContainerRegistryIntegrationReq_PublicRegistryOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateContainerRegistryIntegrationReq_PublicRegistryOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateContainerRegistryIntegrationReq_PublicRegistryOptionsMultiError, or
// nil if none found.
func (m *CreateContainerRegistryIntegrationReq_PublicRegistryOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateContainerRegistryIntegrationReq_PublicRegistryOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateContainerRegistryIntegrationReq_PublicRegistryOptionsMultiError(errors)
	}

	return nil
}

// CreateContainerRegistryIntegrationReq_PublicRegistryOptionsMultiError is an
// error wrapping multiple validation errors returned by
// CreateContainerRegistryIntegrationReq_PublicRegistryOptions.ValidateAll()
// if the designated constraints aren't met.
type CreateContainerRegistryIntegrationReq_PublicRegistryOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateContainerRegistryIntegrationReq_PublicRegistryOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateContainerRegistryIntegrationReq_PublicRegistryOptionsMultiError) AllErrors() []error {
	return m
}

// CreateContainerRegistryIntegrationReq_PublicRegistryOptionsValidationError
// is the validation error returned by
// CreateContainerRegistryIntegrationReq_PublicRegistryOptions.Validate if the
// designated constraints aren't met.
type CreateContainerRegistryIntegrationReq_PublicRegistryOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateContainerRegistryIntegrationReq_PublicRegistryOptionsValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e CreateContainerRegistryIntegrationReq_PublicRegistryOptionsValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e CreateContainerRegistryIntegrationReq_PublicRegistryOptionsValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e CreateContainerRegistryIntegrationReq_PublicRegistryOptionsValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e CreateContainerRegistryIntegrationReq_PublicRegistryOptionsValidationError) ErrorName() string {
	return "CreateContainerRegistryIntegrationReq_PublicRegistryOptionsValidationError"
}

// Error satisfies the builtin error interface
func (e CreateContainerRegistryIntegrationReq_PublicRegistryOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateContainerRegistryIntegrationReq_PublicRegistryOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateContainerRegistryIntegrationReq_PublicRegistryOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateContainerRegistryIntegrationReq_PublicRegistryOptionsValidationError{}

// Validate checks the field values on ContainerRegistryIntegration_ECRInfo
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ContainerRegistryIntegration_ECRInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContainerRegistryIntegration_ECRInfo
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ContainerRegistryIntegration_ECRInfoMultiError, or nil if none found.
func (m *ContainerRegistryIntegration_ECRInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ContainerRegistryIntegration_ECRInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Region

	if len(errors) > 0 {
		return ContainerRegistryIntegration_ECRInfoMultiError(errors)
	}

	return nil
}

// ContainerRegistryIntegration_ECRInfoMultiError is an error wrapping multiple
// validation errors returned by
// ContainerRegistryIntegration_ECRInfo.ValidateAll() if the designated
// constraints aren't met.
type ContainerRegistryIntegration_ECRInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContainerRegistryIntegration_ECRInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContainerRegistryIntegration_ECRInfoMultiError) AllErrors() []error { return m }

// ContainerRegistryIntegration_ECRInfoValidationError is the validation error
// returned by ContainerRegistryIntegration_ECRInfo.Validate if the designated
// constraints aren't met.
type ContainerRegistryIntegration_ECRInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContainerRegistryIntegration_ECRInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContainerRegistryIntegration_ECRInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContainerRegistryIntegration_ECRInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContainerRegistryIntegration_ECRInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContainerRegistryIntegration_ECRInfoValidationError) ErrorName() string {
	return "ContainerRegistryIntegration_ECRInfoValidationError"
}

// Error satisfies the builtin error interface
func (e ContainerRegistryIntegration_ECRInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContainerRegistryIntegration_ECRInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContainerRegistryIntegration_ECRInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContainerRegistryIntegration_ECRInfoValidationError{}

// Validate checks the field values on
// ListContainerRegistryIntegrationsResp_ECRInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListContainerRegistryIntegrationsResp_ECRInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListContainerRegistryIntegrationsResp_ECRInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListContainerRegistryIntegrationsResp_ECRInfoMultiError, or nil if none found.
func (m *ListContainerRegistryIntegrationsResp_ECRInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ListContainerRegistryIntegrationsResp_ECRInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Region

	if len(errors) > 0 {
		return ListContainerRegistryIntegrationsResp_ECRInfoMultiError(errors)
	}

	return nil
}

// ListContainerRegistryIntegrationsResp_ECRInfoMultiError is an error wrapping
// multiple validation errors returned by
// ListContainerRegistryIntegrationsResp_ECRInfo.ValidateAll() if the
// designated constraints aren't met.
type ListContainerRegistryIntegrationsResp_ECRInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListContainerRegistryIntegrationsResp_ECRInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListContainerRegistryIntegrationsResp_ECRInfoMultiError) AllErrors() []error { return m }

// ListContainerRegistryIntegrationsResp_ECRInfoValidationError is the
// validation error returned by
// ListContainerRegistryIntegrationsResp_ECRInfo.Validate if the designated
// constraints aren't met.
type ListContainerRegistryIntegrationsResp_ECRInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListContainerRegistryIntegrationsResp_ECRInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListContainerRegistryIntegrationsResp_ECRInfoValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ListContainerRegistryIntegrationsResp_ECRInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListContainerRegistryIntegrationsResp_ECRInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListContainerRegistryIntegrationsResp_ECRInfoValidationError) ErrorName() string {
	return "ListContainerRegistryIntegrationsResp_ECRInfoValidationError"
}

// Error satisfies the builtin error interface
func (e ListContainerRegistryIntegrationsResp_ECRInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListContainerRegistryIntegrationsResp_ECRInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListContainerRegistryIntegrationsResp_ECRInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListContainerRegistryIntegrationsResp_ECRInfoValidationError{}

// Validate checks the field values on
// ListContainerRegistryIntegrationsResp_ContainerRegistryIntegrationInfo with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListContainerRegistryIntegrationsResp_ContainerRegistryIntegrationInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListContainerRegistryIntegrationsResp_ContainerRegistryIntegrationInfo with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListContainerRegistryIntegrationsResp_ContainerRegistryIntegrationInfoMultiError,
// or nil if none found.
func (m *ListContainerRegistryIntegrationsResp_ContainerRegistryIntegrationInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ListContainerRegistryIntegrationsResp_ContainerRegistryIntegrationInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IntegrationId

	// no validation rules for Name

	// no validation rules for Url

	// no validation rules for Type

	// no validation rules for Status

	switch v := m.RegistryInfo.(type) {
	case *ListContainerRegistryIntegrationsResp_ContainerRegistryIntegrationInfo_EcrInfo:
		if v == nil {
			err := ListContainerRegistryIntegrationsResp_ContainerRegistryIntegrationInfoValidationError{
				field:  "RegistryInfo",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetEcrInfo()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListContainerRegistryIntegrationsResp_ContainerRegistryIntegrationInfoValidationError{
						field:  "EcrInfo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListContainerRegistryIntegrationsResp_ContainerRegistryIntegrationInfoValidationError{
						field:  "EcrInfo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEcrInfo()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListContainerRegistryIntegrationsResp_ContainerRegistryIntegrationInfoValidationError{
					field:  "EcrInfo",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ListContainerRegistryIntegrationsResp_ContainerRegistryIntegrationInfoMultiError(errors)
	}

	return nil
}

// ListContainerRegistryIntegrationsResp_ContainerRegistryIntegrationInfoMultiError
// is an error wrapping multiple validation errors returned by
// ListContainerRegistryIntegrationsResp_ContainerRegistryIntegrationInfo.ValidateAll()
// if the designated constraints aren't met.
type ListContainerRegistryIntegrationsResp_ContainerRegistryIntegrationInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListContainerRegistryIntegrationsResp_ContainerRegistryIntegrationInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListContainerRegistryIntegrationsResp_ContainerRegistryIntegrationInfoMultiError) AllErrors() []error {
	return m
}

// ListContainerRegistryIntegrationsResp_ContainerRegistryIntegrationInfoValidationError
// is the validation error returned by
// ListContainerRegistryIntegrationsResp_ContainerRegistryIntegrationInfo.Validate
// if the designated constraints aren't met.
type ListContainerRegistryIntegrationsResp_ContainerRegistryIntegrationInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListContainerRegistryIntegrationsResp_ContainerRegistryIntegrationInfoValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ListContainerRegistryIntegrationsResp_ContainerRegistryIntegrationInfoValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ListContainerRegistryIntegrationsResp_ContainerRegistryIntegrationInfoValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ListContainerRegistryIntegrationsResp_ContainerRegistryIntegrationInfoValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e ListContainerRegistryIntegrationsResp_ContainerRegistryIntegrationInfoValidationError) ErrorName() string {
	return "ListContainerRegistryIntegrationsResp_ContainerRegistryIntegrationInfoValidationError"
}

// Error satisfies the builtin error interface
func (e ListContainerRegistryIntegrationsResp_ContainerRegistryIntegrationInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListContainerRegistryIntegrationsResp_ContainerRegistryIntegrationInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListContainerRegistryIntegrationsResp_ContainerRegistryIntegrationInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListContainerRegistryIntegrationsResp_ContainerRegistryIntegrationInfoValidationError{}

// Validate checks the field values on GetServiceImageInfoResp_VersionInfo with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetServiceImageInfoResp_VersionInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServiceImageInfoResp_VersionInfo
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetServiceImageInfoResp_VersionInfoMultiError, or nil if none found.
func (m *GetServiceImageInfoResp_VersionInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServiceImageInfoResp_VersionInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	for idx, item := range m.GetProgramInfos() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetServiceImageInfoResp_VersionInfoValidationError{
						field:  fmt.Sprintf("ProgramInfos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetServiceImageInfoResp_VersionInfoValidationError{
						field:  fmt.Sprintf("ProgramInfos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetServiceImageInfoResp_VersionInfoValidationError{
					field:  fmt.Sprintf("ProgramInfos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetPerReleaseChannel() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetServiceImageInfoResp_VersionInfoValidationError{
						field:  fmt.Sprintf("PerReleaseChannel[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetServiceImageInfoResp_VersionInfoValidationError{
						field:  fmt.Sprintf("PerReleaseChannel[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetServiceImageInfoResp_VersionInfoValidationError{
					field:  fmt.Sprintf("PerReleaseChannel[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetServiceImageInfoResp_VersionInfoMultiError(errors)
	}

	return nil
}

// GetServiceImageInfoResp_VersionInfoMultiError is an error wrapping multiple
// validation errors returned by
// GetServiceImageInfoResp_VersionInfo.ValidateAll() if the designated
// constraints aren't met.
type GetServiceImageInfoResp_VersionInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServiceImageInfoResp_VersionInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServiceImageInfoResp_VersionInfoMultiError) AllErrors() []error { return m }

// GetServiceImageInfoResp_VersionInfoValidationError is the validation error
// returned by GetServiceImageInfoResp_VersionInfo.Validate if the designated
// constraints aren't met.
type GetServiceImageInfoResp_VersionInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServiceImageInfoResp_VersionInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServiceImageInfoResp_VersionInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServiceImageInfoResp_VersionInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServiceImageInfoResp_VersionInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServiceImageInfoResp_VersionInfoValidationError) ErrorName() string {
	return "GetServiceImageInfoResp_VersionInfoValidationError"
}

// Error satisfies the builtin error interface
func (e GetServiceImageInfoResp_VersionInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServiceImageInfoResp_VersionInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServiceImageInfoResp_VersionInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServiceImageInfoResp_VersionInfoValidationError{}

// Validate checks the field values on GetServiceImageInfoResp_ProgramInfo with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetServiceImageInfoResp_ProgramInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServiceImageInfoResp_ProgramInfo
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetServiceImageInfoResp_ProgramInfoMultiError, or nil if none found.
func (m *GetServiceImageInfoResp_ProgramInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServiceImageInfoResp_ProgramInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ImageUrl

	if len(errors) > 0 {
		return GetServiceImageInfoResp_ProgramInfoMultiError(errors)
	}

	return nil
}

// GetServiceImageInfoResp_ProgramInfoMultiError is an error wrapping multiple
// validation errors returned by
// GetServiceImageInfoResp_ProgramInfo.ValidateAll() if the designated
// constraints aren't met.
type GetServiceImageInfoResp_ProgramInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServiceImageInfoResp_ProgramInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServiceImageInfoResp_ProgramInfoMultiError) AllErrors() []error { return m }

// GetServiceImageInfoResp_ProgramInfoValidationError is the validation error
// returned by GetServiceImageInfoResp_ProgramInfo.Validate if the designated
// constraints aren't met.
type GetServiceImageInfoResp_ProgramInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServiceImageInfoResp_ProgramInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServiceImageInfoResp_ProgramInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServiceImageInfoResp_ProgramInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServiceImageInfoResp_ProgramInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServiceImageInfoResp_ProgramInfoValidationError) ErrorName() string {
	return "GetServiceImageInfoResp_ProgramInfoValidationError"
}

// Error satisfies the builtin error interface
func (e GetServiceImageInfoResp_ProgramInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServiceImageInfoResp_ProgramInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServiceImageInfoResp_ProgramInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServiceImageInfoResp_ProgramInfoValidationError{}

// Validate checks the field values on
// GetServiceImageInfoResp_PerReleaseChannel with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetServiceImageInfoResp_PerReleaseChannel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetServiceImageInfoResp_PerReleaseChannel with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetServiceImageInfoResp_PerReleaseChannelMultiError, or nil if none found.
func (m *GetServiceImageInfoResp_PerReleaseChannel) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServiceImageInfoResp_PerReleaseChannel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReleaseChannel

	for idx, item := range m.GetProgramInfos() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetServiceImageInfoResp_PerReleaseChannelValidationError{
						field:  fmt.Sprintf("ProgramInfos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetServiceImageInfoResp_PerReleaseChannelValidationError{
						field:  fmt.Sprintf("ProgramInfos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetServiceImageInfoResp_PerReleaseChannelValidationError{
					field:  fmt.Sprintf("ProgramInfos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetServiceImageInfoResp_PerReleaseChannelMultiError(errors)
	}

	return nil
}

// GetServiceImageInfoResp_PerReleaseChannelMultiError is an error wrapping
// multiple validation errors returned by
// GetServiceImageInfoResp_PerReleaseChannel.ValidateAll() if the designated
// constraints aren't met.
type GetServiceImageInfoResp_PerReleaseChannelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServiceImageInfoResp_PerReleaseChannelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServiceImageInfoResp_PerReleaseChannelMultiError) AllErrors() []error { return m }

// GetServiceImageInfoResp_PerReleaseChannelValidationError is the validation
// error returned by GetServiceImageInfoResp_PerReleaseChannel.Validate if the
// designated constraints aren't met.
type GetServiceImageInfoResp_PerReleaseChannelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServiceImageInfoResp_PerReleaseChannelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServiceImageInfoResp_PerReleaseChannelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServiceImageInfoResp_PerReleaseChannelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServiceImageInfoResp_PerReleaseChannelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServiceImageInfoResp_PerReleaseChannelValidationError) ErrorName() string {
	return "GetServiceImageInfoResp_PerReleaseChannelValidationError"
}

// Error satisfies the builtin error interface
func (e GetServiceImageInfoResp_PerReleaseChannelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServiceImageInfoResp_PerReleaseChannel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServiceImageInfoResp_PerReleaseChannelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServiceImageInfoResp_PerReleaseChannelValidationError{}

// Validate checks the field values on
// ListHoneycombEnvironmentsResp_HoneycombEnvironment with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListHoneycombEnvironmentsResp_HoneycombEnvironment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListHoneycombEnvironmentsResp_HoneycombEnvironment with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// ListHoneycombEnvironmentsResp_HoneycombEnvironmentMultiError, or nil if
// none found.
func (m *ListHoneycombEnvironmentsResp_HoneycombEnvironment) ValidateAll() error {
	return m.validate(true)
}

func (m *ListHoneycombEnvironmentsResp_HoneycombEnvironment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IntegrationId

	// no validation rules for Name

	if len(errors) > 0 {
		return ListHoneycombEnvironmentsResp_HoneycombEnvironmentMultiError(errors)
	}

	return nil
}

// ListHoneycombEnvironmentsResp_HoneycombEnvironmentMultiError is an error
// wrapping multiple validation errors returned by
// ListHoneycombEnvironmentsResp_HoneycombEnvironment.ValidateAll() if the
// designated constraints aren't met.
type ListHoneycombEnvironmentsResp_HoneycombEnvironmentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListHoneycombEnvironmentsResp_HoneycombEnvironmentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListHoneycombEnvironmentsResp_HoneycombEnvironmentMultiError) AllErrors() []error { return m }

// ListHoneycombEnvironmentsResp_HoneycombEnvironmentValidationError is the
// validation error returned by
// ListHoneycombEnvironmentsResp_HoneycombEnvironment.Validate if the
// designated constraints aren't met.
type ListHoneycombEnvironmentsResp_HoneycombEnvironmentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListHoneycombEnvironmentsResp_HoneycombEnvironmentValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ListHoneycombEnvironmentsResp_HoneycombEnvironmentValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ListHoneycombEnvironmentsResp_HoneycombEnvironmentValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ListHoneycombEnvironmentsResp_HoneycombEnvironmentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListHoneycombEnvironmentsResp_HoneycombEnvironmentValidationError) ErrorName() string {
	return "ListHoneycombEnvironmentsResp_HoneycombEnvironmentValidationError"
}

// Error satisfies the builtin error interface
func (e ListHoneycombEnvironmentsResp_HoneycombEnvironmentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListHoneycombEnvironmentsResp_HoneycombEnvironment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListHoneycombEnvironmentsResp_HoneycombEnvironmentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListHoneycombEnvironmentsResp_HoneycombEnvironmentValidationError{}
