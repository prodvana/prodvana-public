// Code generated by protoc-gen-go-vtproto. DO NOT EDIT.
// protoc-gen-go-vtproto version: v0.6.0
// source: prodvana/workflow/workflow_manager.proto

package workflow

import (
	timestamppb1 "github.com/planetscale/vtprotobuf/types/known/timestamppb"
	common_config "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/common_config"
	repo "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/repo"
	proto "google.golang.org/protobuf/proto"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

func (m *TrackedImageRepository) CloneVT() *TrackedImageRepository {
	if m == nil {
		return (*TrackedImageRepository)(nil)
	}
	r := new(TrackedImageRepository)
	r.Repository = m.Repository
	r.LastIndex = (*timestamppb.Timestamp)((*timestamppb1.Timestamp)(m.LastIndex).CloneVT())
	r.IndexStatus = m.IndexStatus
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *TrackedImageRepository) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RegistryImage) CloneVT() *RegistryImage {
	if m == nil {
		return (*RegistryImage)(nil)
	}
	r := new(RegistryImage)
	r.Created = (*timestamppb.Timestamp)((*timestamppb1.Timestamp)(m.Created).CloneVT())
	r.Url = m.Url
	r.Tag = m.Tag
	r.Commit = m.Commit.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RegistryImage) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ListRepoCommitsReq) CloneVT() *ListRepoCommitsReq {
	if m == nil {
		return (*ListRepoCommitsReq)(nil)
	}
	r := new(ListRepoCommitsReq)
	r.Repository = m.Repository
	r.StartingRef = m.StartingRef
	r.PageToken = m.PageToken
	r.PageSize = m.PageSize
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ListRepoCommitsReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ListRepoCommitsResp) CloneVT() *ListRepoCommitsResp {
	if m == nil {
		return (*ListRepoCommitsResp)(nil)
	}
	r := new(ListRepoCommitsResp)
	r.NextPageToken = m.NextPageToken
	if rhs := m.Commits; rhs != nil {
		tmpContainer := make([]*repo.Commit, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Commits = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ListRepoCommitsResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CreateContainerRegistryIntegrationReq_ECROptions) CloneVT() *CreateContainerRegistryIntegrationReq_ECROptions {
	if m == nil {
		return (*CreateContainerRegistryIntegrationReq_ECROptions)(nil)
	}
	r := new(CreateContainerRegistryIntegrationReq_ECROptions)
	r.AccessKey = m.AccessKey
	r.SecretKey = m.SecretKey
	r.Region = m.Region
	r.RoleArn = m.RoleArn
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CreateContainerRegistryIntegrationReq_ECROptions) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CreateContainerRegistryIntegrationReq_PublicRegistryOptions) CloneVT() *CreateContainerRegistryIntegrationReq_PublicRegistryOptions {
	if m == nil {
		return (*CreateContainerRegistryIntegrationReq_PublicRegistryOptions)(nil)
	}
	r := new(CreateContainerRegistryIntegrationReq_PublicRegistryOptions)
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CreateContainerRegistryIntegrationReq_PublicRegistryOptions) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CreateContainerRegistryIntegrationReq) CloneVT() *CreateContainerRegistryIntegrationReq {
	if m == nil {
		return (*CreateContainerRegistryIntegrationReq)(nil)
	}
	r := new(CreateContainerRegistryIntegrationReq)
	r.Name = m.Name
	r.Url = m.Url
	r.Username = m.Username
	r.Secret = m.Secret
	r.Type = m.Type
	if m.RegistryOptions != nil {
		r.RegistryOptions = m.RegistryOptions.(interface {
			CloneVT() isCreateContainerRegistryIntegrationReq_RegistryOptions
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CreateContainerRegistryIntegrationReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CreateContainerRegistryIntegrationReq_EcrOptions) CloneVT() isCreateContainerRegistryIntegrationReq_RegistryOptions {
	if m == nil {
		return (*CreateContainerRegistryIntegrationReq_EcrOptions)(nil)
	}
	r := new(CreateContainerRegistryIntegrationReq_EcrOptions)
	r.EcrOptions = m.EcrOptions.CloneVT()
	return r
}

func (m *CreateContainerRegistryIntegrationReq_PublicRegistryOptions_) CloneVT() isCreateContainerRegistryIntegrationReq_RegistryOptions {
	if m == nil {
		return (*CreateContainerRegistryIntegrationReq_PublicRegistryOptions_)(nil)
	}
	r := new(CreateContainerRegistryIntegrationReq_PublicRegistryOptions_)
	r.PublicRegistryOptions = m.PublicRegistryOptions.CloneVT()
	return r
}

func (m *CreateContainerRegistryIntegrationRes) CloneVT() *CreateContainerRegistryIntegrationRes {
	if m == nil {
		return (*CreateContainerRegistryIntegrationRes)(nil)
	}
	r := new(CreateContainerRegistryIntegrationRes)
	r.IntegrationId = m.IntegrationId
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CreateContainerRegistryIntegrationRes) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *DeleteContainerRegistryIntegrationReq) CloneVT() *DeleteContainerRegistryIntegrationReq {
	if m == nil {
		return (*DeleteContainerRegistryIntegrationReq)(nil)
	}
	r := new(DeleteContainerRegistryIntegrationReq)
	r.RegistryName = m.RegistryName
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *DeleteContainerRegistryIntegrationReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *DeleteContainerRegistryIntegrationResp) CloneVT() *DeleteContainerRegistryIntegrationResp {
	if m == nil {
		return (*DeleteContainerRegistryIntegrationResp)(nil)
	}
	r := new(DeleteContainerRegistryIntegrationResp)
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *DeleteContainerRegistryIntegrationResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ListContainerRegistryIntegrationsReq) CloneVT() *ListContainerRegistryIntegrationsReq {
	if m == nil {
		return (*ListContainerRegistryIntegrationsReq)(nil)
	}
	r := new(ListContainerRegistryIntegrationsReq)
	r.FetchStatus = m.FetchStatus
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ListContainerRegistryIntegrationsReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ContainerRegistryIntegration_ECRInfo) CloneVT() *ContainerRegistryIntegration_ECRInfo {
	if m == nil {
		return (*ContainerRegistryIntegration_ECRInfo)(nil)
	}
	r := new(ContainerRegistryIntegration_ECRInfo)
	r.Region = m.Region
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ContainerRegistryIntegration_ECRInfo) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ContainerRegistryIntegration) CloneVT() *ContainerRegistryIntegration {
	if m == nil {
		return (*ContainerRegistryIntegration)(nil)
	}
	r := new(ContainerRegistryIntegration)
	r.IntegrationId = m.IntegrationId
	r.Name = m.Name
	r.Url = m.Url
	r.Type = m.Type
	r.Status = m.Status
	if m.RegistryInfo != nil {
		r.RegistryInfo = m.RegistryInfo.(interface {
			CloneVT() isContainerRegistryIntegration_RegistryInfo
		}).CloneVT()
	}
	if rhs := m.Repositories; rhs != nil {
		tmpContainer := make([]*TrackedImageRepository, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Repositories = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ContainerRegistryIntegration) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ContainerRegistryIntegration_EcrInfo) CloneVT() isContainerRegistryIntegration_RegistryInfo {
	if m == nil {
		return (*ContainerRegistryIntegration_EcrInfo)(nil)
	}
	r := new(ContainerRegistryIntegration_EcrInfo)
	r.EcrInfo = m.EcrInfo.CloneVT()
	return r
}

func (m *ListContainerRegistryIntegrationsResp_ECRInfo) CloneVT() *ListContainerRegistryIntegrationsResp_ECRInfo {
	if m == nil {
		return (*ListContainerRegistryIntegrationsResp_ECRInfo)(nil)
	}
	r := new(ListContainerRegistryIntegrationsResp_ECRInfo)
	r.Region = m.Region
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ListContainerRegistryIntegrationsResp_ECRInfo) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ListContainerRegistryIntegrationsResp_ContainerRegistryIntegrationInfo) CloneVT() *ListContainerRegistryIntegrationsResp_ContainerRegistryIntegrationInfo {
	if m == nil {
		return (*ListContainerRegistryIntegrationsResp_ContainerRegistryIntegrationInfo)(nil)
	}
	r := new(ListContainerRegistryIntegrationsResp_ContainerRegistryIntegrationInfo)
	r.IntegrationId = m.IntegrationId
	r.Name = m.Name
	r.Url = m.Url
	r.Type = m.Type
	r.Status = m.Status
	if m.RegistryInfo != nil {
		r.RegistryInfo = m.RegistryInfo.(interface {
			CloneVT() isListContainerRegistryIntegrationsResp_ContainerRegistryIntegrationInfo_RegistryInfo
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ListContainerRegistryIntegrationsResp_ContainerRegistryIntegrationInfo) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ListContainerRegistryIntegrationsResp_ContainerRegistryIntegrationInfo_EcrInfo) CloneVT() isListContainerRegistryIntegrationsResp_ContainerRegistryIntegrationInfo_RegistryInfo {
	if m == nil {
		return (*ListContainerRegistryIntegrationsResp_ContainerRegistryIntegrationInfo_EcrInfo)(nil)
	}
	r := new(ListContainerRegistryIntegrationsResp_ContainerRegistryIntegrationInfo_EcrInfo)
	r.EcrInfo = m.EcrInfo.CloneVT()
	return r
}

func (m *ListContainerRegistryIntegrationsResp) CloneVT() *ListContainerRegistryIntegrationsResp {
	if m == nil {
		return (*ListContainerRegistryIntegrationsResp)(nil)
	}
	r := new(ListContainerRegistryIntegrationsResp)
	if rhs := m.ContainerRegistries; rhs != nil {
		tmpContainer := make([]*ListContainerRegistryIntegrationsResp_ContainerRegistryIntegrationInfo, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.ContainerRegistries = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ListContainerRegistryIntegrationsResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *GetContainerRegistryIntegrationReq) CloneVT() *GetContainerRegistryIntegrationReq {
	if m == nil {
		return (*GetContainerRegistryIntegrationReq)(nil)
	}
	r := new(GetContainerRegistryIntegrationReq)
	r.RegistryName = m.RegistryName
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *GetContainerRegistryIntegrationReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *GetContainerRegistryIntegrationResp) CloneVT() *GetContainerRegistryIntegrationResp {
	if m == nil {
		return (*GetContainerRegistryIntegrationResp)(nil)
	}
	r := new(GetContainerRegistryIntegrationResp)
	r.Registry = m.Registry.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *GetContainerRegistryIntegrationResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *GetContainerRegistryImagesReq) CloneVT() *GetContainerRegistryImagesReq {
	if m == nil {
		return (*GetContainerRegistryImagesReq)(nil)
	}
	r := new(GetContainerRegistryImagesReq)
	r.IntegrationId = m.IntegrationId
	r.ImageRepository = m.ImageRepository
	r.SkipRegistryCache = m.SkipRegistryCache
	r.PageToken = m.PageToken
	r.PageSize = m.PageSize
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *GetContainerRegistryImagesReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *GetContainerRegistryImagesRes) CloneVT() *GetContainerRegistryImagesRes {
	if m == nil {
		return (*GetContainerRegistryImagesRes)(nil)
	}
	r := new(GetContainerRegistryImagesRes)
	r.NextPageToken = m.NextPageToken
	if rhs := m.Images; rhs != nil {
		tmpContainer := make([]*RegistryImage, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Images = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *GetContainerRegistryImagesRes) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ListTrackedImageRepositoriesReq) CloneVT() *ListTrackedImageRepositoriesReq {
	if m == nil {
		return (*ListTrackedImageRepositoriesReq)(nil)
	}
	r := new(ListTrackedImageRepositoriesReq)
	r.IntegrationId = m.IntegrationId
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ListTrackedImageRepositoriesReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ListTrackedImageRepositoriesResp) CloneVT() *ListTrackedImageRepositoriesResp {
	if m == nil {
		return (*ListTrackedImageRepositoriesResp)(nil)
	}
	r := new(ListTrackedImageRepositoriesResp)
	if rhs := m.Repositories; rhs != nil {
		tmpContainer := make([]*TrackedImageRepository, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Repositories = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ListTrackedImageRepositoriesResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *GetTrackedImageRepositoryReq) CloneVT() *GetTrackedImageRepositoryReq {
	if m == nil {
		return (*GetTrackedImageRepositoryReq)(nil)
	}
	r := new(GetTrackedImageRepositoryReq)
	r.IntegrationId = m.IntegrationId
	r.Repository = m.Repository
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *GetTrackedImageRepositoryReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *GetTrackedImageRepositoryResp) CloneVT() *GetTrackedImageRepositoryResp {
	if m == nil {
		return (*GetTrackedImageRepositoryResp)(nil)
	}
	r := new(GetTrackedImageRepositoryResp)
	r.Repository = m.Repository.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *GetTrackedImageRepositoryResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *TrackImageRepositoriesReq) CloneVT() *TrackImageRepositoriesReq {
	if m == nil {
		return (*TrackImageRepositoriesReq)(nil)
	}
	r := new(TrackImageRepositoriesReq)
	r.IntegrationId = m.IntegrationId
	if rhs := m.Repositories; rhs != nil {
		tmpContainer := make([]string, len(rhs))
		copy(tmpContainer, rhs)
		r.Repositories = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *TrackImageRepositoriesReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *TrackImageRepositoriesResp) CloneVT() *TrackImageRepositoriesResp {
	if m == nil {
		return (*TrackImageRepositoriesResp)(nil)
	}
	r := new(TrackImageRepositoriesResp)
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *TrackImageRepositoriesResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *StopTrackingImageRepositoryReq) CloneVT() *StopTrackingImageRepositoryReq {
	if m == nil {
		return (*StopTrackingImageRepositoryReq)(nil)
	}
	r := new(StopTrackingImageRepositoryReq)
	r.IntegrationId = m.IntegrationId
	r.Repository = m.Repository
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *StopTrackingImageRepositoryReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *StopTrackingImageRepositoryResp) CloneVT() *StopTrackingImageRepositoryResp {
	if m == nil {
		return (*StopTrackingImageRepositoryResp)(nil)
	}
	r := new(StopTrackingImageRepositoryResp)
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *StopTrackingImageRepositoryResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *GetImageCommitInfoReq) CloneVT() *GetImageCommitInfoReq {
	if m == nil {
		return (*GetImageCommitInfoReq)(nil)
	}
	r := new(GetImageCommitInfoReq)
	r.IntegrationId = m.IntegrationId
	r.Repository = m.Repository
	if m.ImageIdOneof != nil {
		r.ImageIdOneof = m.ImageIdOneof.(interface {
			CloneVT() isGetImageCommitInfoReq_ImageIdOneof
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *GetImageCommitInfoReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *GetImageCommitInfoReq_Tag) CloneVT() isGetImageCommitInfoReq_ImageIdOneof {
	if m == nil {
		return (*GetImageCommitInfoReq_Tag)(nil)
	}
	r := new(GetImageCommitInfoReq_Tag)
	r.Tag = m.Tag
	return r
}

func (m *GetImageCommitInfoReq_Image) CloneVT() isGetImageCommitInfoReq_ImageIdOneof {
	if m == nil {
		return (*GetImageCommitInfoReq_Image)(nil)
	}
	r := new(GetImageCommitInfoReq_Image)
	r.Image = m.Image
	return r
}

func (m *GetImageCommitInfoResp) CloneVT() *GetImageCommitInfoResp {
	if m == nil {
		return (*GetImageCommitInfoResp)(nil)
	}
	r := new(GetImageCommitInfoResp)
	r.Commit = m.Commit.CloneVT()
	r.Repository = m.Repository
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *GetImageCommitInfoResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *GetCommitInfoReq) CloneVT() *GetCommitInfoReq {
	if m == nil {
		return (*GetCommitInfoReq)(nil)
	}
	r := new(GetCommitInfoReq)
	r.Repository = m.Repository
	r.CommitId = m.CommitId
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *GetCommitInfoReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *GetCommitInfoResp) CloneVT() *GetCommitInfoResp {
	if m == nil {
		return (*GetCommitInfoResp)(nil)
	}
	r := new(GetCommitInfoResp)
	r.Commit = m.Commit.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *GetCommitInfoResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *GetProgramDefaultsReq) CloneVT() *GetProgramDefaultsReq {
	if m == nil {
		return (*GetProgramDefaultsReq)(nil)
	}
	r := new(GetProgramDefaultsReq)
	r.IntegrationId = m.IntegrationId
	r.Repository = m.Repository
	r.SkipRegistryCache = m.SkipRegistryCache
	if m.ImageIdOneof != nil {
		r.ImageIdOneof = m.ImageIdOneof.(interface {
			CloneVT() isGetProgramDefaultsReq_ImageIdOneof
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *GetProgramDefaultsReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *GetProgramDefaultsReq_Tag) CloneVT() isGetProgramDefaultsReq_ImageIdOneof {
	if m == nil {
		return (*GetProgramDefaultsReq_Tag)(nil)
	}
	r := new(GetProgramDefaultsReq_Tag)
	r.Tag = m.Tag
	return r
}

func (m *GetProgramDefaultsReq_Image) CloneVT() isGetProgramDefaultsReq_ImageIdOneof {
	if m == nil {
		return (*GetProgramDefaultsReq_Image)(nil)
	}
	r := new(GetProgramDefaultsReq_Image)
	r.Image = m.Image
	return r
}

func (m *ProgramDefaults) CloneVT() *ProgramDefaults {
	if m == nil {
		return (*ProgramDefaults)(nil)
	}
	r := new(ProgramDefaults)
	if rhs := m.Cmd; rhs != nil {
		tmpContainer := make([]string, len(rhs))
		copy(tmpContainer, rhs)
		r.Cmd = tmpContainer
	}
	if rhs := m.Entrypoint; rhs != nil {
		tmpContainer := make([]string, len(rhs))
		copy(tmpContainer, rhs)
		r.Entrypoint = tmpContainer
	}
	if rhs := m.Env; rhs != nil {
		tmpContainer := make(map[string]*common_config.EnvValue, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Env = tmpContainer
	}
	if rhs := m.Ports; rhs != nil {
		tmpContainer := make([]*common_config.PortConfig, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Ports = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ProgramDefaults) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *GetProgramDefaultsResp) CloneVT() *GetProgramDefaultsResp {
	if m == nil {
		return (*GetProgramDefaultsResp)(nil)
	}
	r := new(GetProgramDefaultsResp)
	r.ProgramDefaults = m.ProgramDefaults.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *GetProgramDefaultsResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *GetServiceImageInfoReq) CloneVT() *GetServiceImageInfoReq {
	if m == nil {
		return (*GetServiceImageInfoReq)(nil)
	}
	r := new(GetServiceImageInfoReq)
	r.Service = m.Service
	r.Application = m.Application
	if rhs := m.Versions; rhs != nil {
		tmpContainer := make([]string, len(rhs))
		copy(tmpContainer, rhs)
		r.Versions = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *GetServiceImageInfoReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *GetServiceImageInfoResp_VersionInfo) CloneVT() *GetServiceImageInfoResp_VersionInfo {
	if m == nil {
		return (*GetServiceImageInfoResp_VersionInfo)(nil)
	}
	r := new(GetServiceImageInfoResp_VersionInfo)
	r.Version = m.Version
	if rhs := m.ProgramInfos; rhs != nil {
		tmpContainer := make([]*GetServiceImageInfoResp_ProgramInfo, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.ProgramInfos = tmpContainer
	}
	if rhs := m.PerReleaseChannel; rhs != nil {
		tmpContainer := make([]*GetServiceImageInfoResp_PerReleaseChannel, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.PerReleaseChannel = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *GetServiceImageInfoResp_VersionInfo) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *GetServiceImageInfoResp_ProgramInfo) CloneVT() *GetServiceImageInfoResp_ProgramInfo {
	if m == nil {
		return (*GetServiceImageInfoResp_ProgramInfo)(nil)
	}
	r := new(GetServiceImageInfoResp_ProgramInfo)
	r.ImageUrl = m.ImageUrl
	if rhs := m.Tags; rhs != nil {
		tmpContainer := make([]string, len(rhs))
		copy(tmpContainer, rhs)
		r.Tags = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *GetServiceImageInfoResp_ProgramInfo) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *GetServiceImageInfoResp_PerReleaseChannel) CloneVT() *GetServiceImageInfoResp_PerReleaseChannel {
	if m == nil {
		return (*GetServiceImageInfoResp_PerReleaseChannel)(nil)
	}
	r := new(GetServiceImageInfoResp_PerReleaseChannel)
	r.ReleaseChannel = m.ReleaseChannel
	if rhs := m.ProgramInfos; rhs != nil {
		tmpContainer := make([]*GetServiceImageInfoResp_ProgramInfo, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.ProgramInfos = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *GetServiceImageInfoResp_PerReleaseChannel) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *GetServiceImageInfoResp) CloneVT() *GetServiceImageInfoResp {
	if m == nil {
		return (*GetServiceImageInfoResp)(nil)
	}
	r := new(GetServiceImageInfoResp)
	r.ServiceId = m.ServiceId
	r.ServiceName = m.ServiceName
	if rhs := m.VersionInfos; rhs != nil {
		tmpContainer := make([]*GetServiceImageInfoResp_VersionInfo, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.VersionInfos = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *GetServiceImageInfoResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *InstallSlackReq) CloneVT() *InstallSlackReq {
	if m == nil {
		return (*InstallSlackReq)(nil)
	}
	r := new(InstallSlackReq)
	r.Error = m.Error
	r.Code = m.Code
	r.RedirectUri = m.RedirectUri
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *InstallSlackReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *InstallSlackResp) CloneVT() *InstallSlackResp {
	if m == nil {
		return (*InstallSlackResp)(nil)
	}
	r := new(InstallSlackResp)
	r.Success = m.Success
	r.Message = m.Message
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *InstallSlackResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *GetInstallSlackUrlReq) CloneVT() *GetInstallSlackUrlReq {
	if m == nil {
		return (*GetInstallSlackUrlReq)(nil)
	}
	r := new(GetInstallSlackUrlReq)
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *GetInstallSlackUrlReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *GetInstallSlackUrlResp) CloneVT() *GetInstallSlackUrlResp {
	if m == nil {
		return (*GetInstallSlackUrlResp)(nil)
	}
	r := new(GetInstallSlackUrlResp)
	r.Url = m.Url
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *GetInstallSlackUrlResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *UninstallSlackReq) CloneVT() *UninstallSlackReq {
	if m == nil {
		return (*UninstallSlackReq)(nil)
	}
	r := new(UninstallSlackReq)
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *UninstallSlackReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *UninstallSlackResp) CloneVT() *UninstallSlackResp {
	if m == nil {
		return (*UninstallSlackResp)(nil)
	}
	r := new(UninstallSlackResp)
	r.Success = m.Success
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *UninstallSlackResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *SlackChannel) CloneVT() *SlackChannel {
	if m == nil {
		return (*SlackChannel)(nil)
	}
	r := new(SlackChannel)
	r.Id = m.Id
	r.Name = m.Name
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *SlackChannel) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *InstallPagerDutyReq) CloneVT() *InstallPagerDutyReq {
	if m == nil {
		return (*InstallPagerDutyReq)(nil)
	}
	r := new(InstallPagerDutyReq)
	r.Error = m.Error
	r.Code = m.Code
	r.RedirectUri = m.RedirectUri
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *InstallPagerDutyReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *InstallPagerDutyResp) CloneVT() *InstallPagerDutyResp {
	if m == nil {
		return (*InstallPagerDutyResp)(nil)
	}
	r := new(InstallPagerDutyResp)
	r.Success = m.Success
	r.Message = m.Message
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *InstallPagerDutyResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *GetInstallPagerDutyUrlReq) CloneVT() *GetInstallPagerDutyUrlReq {
	if m == nil {
		return (*GetInstallPagerDutyUrlReq)(nil)
	}
	r := new(GetInstallPagerDutyUrlReq)
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *GetInstallPagerDutyUrlReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *GetInstallPagerDutyUrlResp) CloneVT() *GetInstallPagerDutyUrlResp {
	if m == nil {
		return (*GetInstallPagerDutyUrlResp)(nil)
	}
	r := new(GetInstallPagerDutyUrlResp)
	r.Url = m.Url
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *GetInstallPagerDutyUrlResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *UninstallPagerDutyReq) CloneVT() *UninstallPagerDutyReq {
	if m == nil {
		return (*UninstallPagerDutyReq)(nil)
	}
	r := new(UninstallPagerDutyReq)
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *UninstallPagerDutyReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *UninstallPagerDutyResp) CloneVT() *UninstallPagerDutyResp {
	if m == nil {
		return (*UninstallPagerDutyResp)(nil)
	}
	r := new(UninstallPagerDutyResp)
	r.Success = m.Success
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *UninstallPagerDutyResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *PagerDutyService) CloneVT() *PagerDutyService {
	if m == nil {
		return (*PagerDutyService)(nil)
	}
	r := new(PagerDutyService)
	r.Id = m.Id
	r.Name = m.Name
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *PagerDutyService) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *InstallGrafanaReq) CloneVT() *InstallGrafanaReq {
	if m == nil {
		return (*InstallGrafanaReq)(nil)
	}
	r := new(InstallGrafanaReq)
	r.Url = m.Url
	r.ApiToken = m.ApiToken
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *InstallGrafanaReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *InstallGrafanaResp) CloneVT() *InstallGrafanaResp {
	if m == nil {
		return (*InstallGrafanaResp)(nil)
	}
	r := new(InstallGrafanaResp)
	r.IntegrationId = m.IntegrationId
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *InstallGrafanaResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *UninstallGrafanaReq) CloneVT() *UninstallGrafanaReq {
	if m == nil {
		return (*UninstallGrafanaReq)(nil)
	}
	r := new(UninstallGrafanaReq)
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *UninstallGrafanaReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *UninstallGrafanaResp) CloneVT() *UninstallGrafanaResp {
	if m == nil {
		return (*UninstallGrafanaResp)(nil)
	}
	r := new(UninstallGrafanaResp)
	r.IntegrationId = m.IntegrationId
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *UninstallGrafanaResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *GetGrafanaInstallationReq) CloneVT() *GetGrafanaInstallationReq {
	if m == nil {
		return (*GetGrafanaInstallationReq)(nil)
	}
	r := new(GetGrafanaInstallationReq)
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *GetGrafanaInstallationReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *GetGrafanaInstallationResp) CloneVT() *GetGrafanaInstallationResp {
	if m == nil {
		return (*GetGrafanaInstallationResp)(nil)
	}
	r := new(GetGrafanaInstallationResp)
	r.IntegrationId = m.IntegrationId
	r.Url = m.Url
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *GetGrafanaInstallationResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ListHoneycombEnvironmentsReq) CloneVT() *ListHoneycombEnvironmentsReq {
	if m == nil {
		return (*ListHoneycombEnvironmentsReq)(nil)
	}
	r := new(ListHoneycombEnvironmentsReq)
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ListHoneycombEnvironmentsReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ListHoneycombEnvironmentsResp_HoneycombEnvironment) CloneVT() *ListHoneycombEnvironmentsResp_HoneycombEnvironment {
	if m == nil {
		return (*ListHoneycombEnvironmentsResp_HoneycombEnvironment)(nil)
	}
	r := new(ListHoneycombEnvironmentsResp_HoneycombEnvironment)
	r.IntegrationId = m.IntegrationId
	r.Name = m.Name
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ListHoneycombEnvironmentsResp_HoneycombEnvironment) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ListHoneycombEnvironmentsResp) CloneVT() *ListHoneycombEnvironmentsResp {
	if m == nil {
		return (*ListHoneycombEnvironmentsResp)(nil)
	}
	r := new(ListHoneycombEnvironmentsResp)
	if rhs := m.Environments; rhs != nil {
		tmpContainer := make([]*ListHoneycombEnvironmentsResp_HoneycombEnvironment, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Environments = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ListHoneycombEnvironmentsResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *AddHoneycombEnvironmentReq) CloneVT() *AddHoneycombEnvironmentReq {
	if m == nil {
		return (*AddHoneycombEnvironmentReq)(nil)
	}
	r := new(AddHoneycombEnvironmentReq)
	r.Name = m.Name
	r.ApiKey = m.ApiKey
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *AddHoneycombEnvironmentReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *AddHoneycombEnvironmentResp) CloneVT() *AddHoneycombEnvironmentResp {
	if m == nil {
		return (*AddHoneycombEnvironmentResp)(nil)
	}
	r := new(AddHoneycombEnvironmentResp)
	r.IntegrationId = m.IntegrationId
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *AddHoneycombEnvironmentResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *UpdateHoneycombEnvironmentReq) CloneVT() *UpdateHoneycombEnvironmentReq {
	if m == nil {
		return (*UpdateHoneycombEnvironmentReq)(nil)
	}
	r := new(UpdateHoneycombEnvironmentReq)
	r.Name = m.Name
	r.ApiKey = m.ApiKey
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *UpdateHoneycombEnvironmentReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *UpdateHoneycombEnvironmentResp) CloneVT() *UpdateHoneycombEnvironmentResp {
	if m == nil {
		return (*UpdateHoneycombEnvironmentResp)(nil)
	}
	r := new(UpdateHoneycombEnvironmentResp)
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *UpdateHoneycombEnvironmentResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *DeleteHoneycombEnvironmentReq) CloneVT() *DeleteHoneycombEnvironmentReq {
	if m == nil {
		return (*DeleteHoneycombEnvironmentReq)(nil)
	}
	r := new(DeleteHoneycombEnvironmentReq)
	r.Name = m.Name
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *DeleteHoneycombEnvironmentReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *DeleteHoneycombEnvironmentResp) CloneVT() *DeleteHoneycombEnvironmentResp {
	if m == nil {
		return (*DeleteHoneycombEnvironmentResp)(nil)
	}
	r := new(DeleteHoneycombEnvironmentResp)
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *DeleteHoneycombEnvironmentResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *UninstallHoneycombReq) CloneVT() *UninstallHoneycombReq {
	if m == nil {
		return (*UninstallHoneycombReq)(nil)
	}
	r := new(UninstallHoneycombReq)
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *UninstallHoneycombReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *UninstallHoneycombResp) CloneVT() *UninstallHoneycombResp {
	if m == nil {
		return (*UninstallHoneycombResp)(nil)
	}
	r := new(UninstallHoneycombResp)
	if rhs := m.IntegrationIds; rhs != nil {
		tmpContainer := make([]string, len(rhs))
		copy(tmpContainer, rhs)
		r.IntegrationIds = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *UninstallHoneycombResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CreateGitHubAppReq) CloneVT() *CreateGitHubAppReq {
	if m == nil {
		return (*CreateGitHubAppReq)(nil)
	}
	r := new(CreateGitHubAppReq)
	r.AppId = m.AppId
	r.PrivateKey = m.PrivateKey
	r.ClientSecret = m.ClientSecret
	r.WebhookSecret = m.WebhookSecret
	r.GithubOrganization = m.GithubOrganization
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CreateGitHubAppReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CreateGitHubAppResp) CloneVT() *CreateGitHubAppResp {
	if m == nil {
		return (*CreateGitHubAppResp)(nil)
	}
	r := new(CreateGitHubAppResp)
	r.IntegrationId = m.IntegrationId
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CreateGitHubAppResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *InstallGitHubReq) CloneVT() *InstallGitHubReq {
	if m == nil {
		return (*InstallGitHubReq)(nil)
	}
	r := new(InstallGitHubReq)
	r.InstallationId = m.InstallationId
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *InstallGitHubReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *InstallGitHubResp) CloneVT() *InstallGitHubResp {
	if m == nil {
		return (*InstallGitHubResp)(nil)
	}
	r := new(InstallGitHubResp)
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *InstallGitHubResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *Integration) CloneVT() *Integration {
	if m == nil {
		return (*Integration)(nil)
	}
	r := new(Integration)
	r.Id = m.Id
	r.Name = m.Name
	r.Type = m.Type
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Integration) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ListIntegrationsReq) CloneVT() *ListIntegrationsReq {
	if m == nil {
		return (*ListIntegrationsReq)(nil)
	}
	r := new(ListIntegrationsReq)
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ListIntegrationsReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ListIntegrationsResp) CloneVT() *ListIntegrationsResp {
	if m == nil {
		return (*ListIntegrationsResp)(nil)
	}
	r := new(ListIntegrationsResp)
	if rhs := m.Integrations; rhs != nil {
		tmpContainer := make([]*Integration, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Integrations = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ListIntegrationsResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *DeleteIntegrationReq) CloneVT() *DeleteIntegrationReq {
	if m == nil {
		return (*DeleteIntegrationReq)(nil)
	}
	r := new(DeleteIntegrationReq)
	r.IntegrationId = m.IntegrationId
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *DeleteIntegrationReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *DeleteIntegrationResp) CloneVT() *DeleteIntegrationResp {
	if m == nil {
		return (*DeleteIntegrationResp)(nil)
	}
	r := new(DeleteIntegrationResp)
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *DeleteIntegrationResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *GetInstallGitHubUrlReq) CloneVT() *GetInstallGitHubUrlReq {
	if m == nil {
		return (*GetInstallGitHubUrlReq)(nil)
	}
	r := new(GetInstallGitHubUrlReq)
	r.GithubOrg = m.GithubOrg
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *GetInstallGitHubUrlReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *GetInstallGitHubUrlResp) CloneVT() *GetInstallGitHubUrlResp {
	if m == nil {
		return (*GetInstallGitHubUrlResp)(nil)
	}
	r := new(GetInstallGitHubUrlResp)
	r.Url = m.Url
	r.Manifest = m.Manifest
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *GetInstallGitHubUrlResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (this *TrackedImageRepository) StableEqualVT(that *TrackedImageRepository) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Repository != that.Repository {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.LastIndex).StableEqualVT((*timestamppb1.Timestamp)(that.LastIndex)) {
		return false
	}
	if this.IndexStatus != that.IndexStatus {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *TrackedImageRepository) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*TrackedImageRepository)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *TrackedImageRepository) EqualVT(that *TrackedImageRepository) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Repository != that.Repository {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.LastIndex).EqualVT((*timestamppb1.Timestamp)(that.LastIndex)) {
		return false
	}
	if this.IndexStatus != that.IndexStatus {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *TrackedImageRepository) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*TrackedImageRepository)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RegistryImage) StableEqualVT(that *RegistryImage) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.Created).StableEqualVT((*timestamppb1.Timestamp)(that.Created)) {
		return false
	}
	if this.Url != that.Url {
		return false
	}
	if this.Tag != that.Tag {
		return false
	}
	if !this.Commit.StableEqualVT(that.Commit) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RegistryImage) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RegistryImage)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *RegistryImage) EqualVT(that *RegistryImage) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.Created).EqualVT((*timestamppb1.Timestamp)(that.Created)) {
		return false
	}
	if this.Url != that.Url {
		return false
	}
	if this.Tag != that.Tag {
		return false
	}
	if !this.Commit.EqualVT(that.Commit) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RegistryImage) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RegistryImage)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ListRepoCommitsReq) StableEqualVT(that *ListRepoCommitsReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Repository != that.Repository {
		return false
	}
	if this.StartingRef != that.StartingRef {
		return false
	}
	if this.PageToken != that.PageToken {
		return false
	}
	if this.PageSize != that.PageSize {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ListRepoCommitsReq) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ListRepoCommitsReq)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ListRepoCommitsReq) EqualVT(that *ListRepoCommitsReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Repository != that.Repository {
		return false
	}
	if this.StartingRef != that.StartingRef {
		return false
	}
	if this.PageToken != that.PageToken {
		return false
	}
	if this.PageSize != that.PageSize {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ListRepoCommitsReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ListRepoCommitsReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ListRepoCommitsResp) StableEqualVT(that *ListRepoCommitsResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Commits) != len(that.Commits) {
		return false
	}
	for i, vx := range this.Commits {
		vy := that.Commits[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &repo.Commit{}
			}
			if q == nil {
				q = &repo.Commit{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if this.NextPageToken != that.NextPageToken {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ListRepoCommitsResp) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ListRepoCommitsResp)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ListRepoCommitsResp) EqualVT(that *ListRepoCommitsResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Commits) != len(that.Commits) {
		return false
	}
	for i, vx := range this.Commits {
		vy := that.Commits[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &repo.Commit{}
			}
			if q == nil {
				q = &repo.Commit{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if this.NextPageToken != that.NextPageToken {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ListRepoCommitsResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ListRepoCommitsResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CreateContainerRegistryIntegrationReq_ECROptions) StableEqualVT(that *CreateContainerRegistryIntegrationReq_ECROptions) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.AccessKey != that.AccessKey {
		return false
	}
	if this.SecretKey != that.SecretKey {
		return false
	}
	if this.Region != that.Region {
		return false
	}
	if this.RoleArn != that.RoleArn {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CreateContainerRegistryIntegrationReq_ECROptions) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CreateContainerRegistryIntegrationReq_ECROptions)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *CreateContainerRegistryIntegrationReq_PublicRegistryOptions) StableEqualVT(that *CreateContainerRegistryIntegrationReq_PublicRegistryOptions) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CreateContainerRegistryIntegrationReq_PublicRegistryOptions) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CreateContainerRegistryIntegrationReq_PublicRegistryOptions)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *CreateContainerRegistryIntegrationReq) StableEqualVT(that *CreateContainerRegistryIntegrationReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.RegistryOptions == nil && that.RegistryOptions != nil {
		return false
	} else if this.RegistryOptions != nil {
		if that.RegistryOptions == nil {
			return false
		}
		if !this.RegistryOptions.(interface {
			StableEqualVT(isCreateContainerRegistryIntegrationReq_RegistryOptions) bool
		}).StableEqualVT(that.RegistryOptions) {
			return false
		}
	}
	if this.Url != that.Url {
		return false
	}
	if this.Username != that.Username {
		return false
	}
	if this.Secret != that.Secret {
		return false
	}
	if this.Type != that.Type {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CreateContainerRegistryIntegrationReq) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CreateContainerRegistryIntegrationReq)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *CreateContainerRegistryIntegrationReq_EcrOptions) StableEqualVT(thatIface isCreateContainerRegistryIntegrationReq_RegistryOptions) bool {
	that, ok := thatIface.(*CreateContainerRegistryIntegrationReq_EcrOptions)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.EcrOptions, that.EcrOptions; p != q {
		if p == nil {
			p = &CreateContainerRegistryIntegrationReq_ECROptions{}
		}
		if q == nil {
			q = &CreateContainerRegistryIntegrationReq_ECROptions{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CreateContainerRegistryIntegrationReq_PublicRegistryOptions_) StableEqualVT(thatIface isCreateContainerRegistryIntegrationReq_RegistryOptions) bool {
	that, ok := thatIface.(*CreateContainerRegistryIntegrationReq_PublicRegistryOptions_)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.PublicRegistryOptions, that.PublicRegistryOptions; p != q {
		if p == nil {
			p = &CreateContainerRegistryIntegrationReq_PublicRegistryOptions{}
		}
		if q == nil {
			q = &CreateContainerRegistryIntegrationReq_PublicRegistryOptions{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CreateContainerRegistryIntegrationReq_ECROptions) EqualVT(that *CreateContainerRegistryIntegrationReq_ECROptions) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.AccessKey != that.AccessKey {
		return false
	}
	if this.SecretKey != that.SecretKey {
		return false
	}
	if this.Region != that.Region {
		return false
	}
	if this.RoleArn != that.RoleArn {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CreateContainerRegistryIntegrationReq_ECROptions) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CreateContainerRegistryIntegrationReq_ECROptions)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CreateContainerRegistryIntegrationReq_PublicRegistryOptions) EqualVT(that *CreateContainerRegistryIntegrationReq_PublicRegistryOptions) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CreateContainerRegistryIntegrationReq_PublicRegistryOptions) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CreateContainerRegistryIntegrationReq_PublicRegistryOptions)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CreateContainerRegistryIntegrationReq) EqualVT(that *CreateContainerRegistryIntegrationReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.RegistryOptions == nil && that.RegistryOptions != nil {
		return false
	} else if this.RegistryOptions != nil {
		if that.RegistryOptions == nil {
			return false
		}
		if !this.RegistryOptions.(interface {
			EqualVT(isCreateContainerRegistryIntegrationReq_RegistryOptions) bool
		}).EqualVT(that.RegistryOptions) {
			return false
		}
	}
	if this.Url != that.Url {
		return false
	}
	if this.Username != that.Username {
		return false
	}
	if this.Secret != that.Secret {
		return false
	}
	if this.Type != that.Type {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CreateContainerRegistryIntegrationReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CreateContainerRegistryIntegrationReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CreateContainerRegistryIntegrationReq_EcrOptions) EqualVT(thatIface isCreateContainerRegistryIntegrationReq_RegistryOptions) bool {
	that, ok := thatIface.(*CreateContainerRegistryIntegrationReq_EcrOptions)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.EcrOptions, that.EcrOptions; p != q {
		if p == nil {
			p = &CreateContainerRegistryIntegrationReq_ECROptions{}
		}
		if q == nil {
			q = &CreateContainerRegistryIntegrationReq_ECROptions{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CreateContainerRegistryIntegrationReq_PublicRegistryOptions_) EqualVT(thatIface isCreateContainerRegistryIntegrationReq_RegistryOptions) bool {
	that, ok := thatIface.(*CreateContainerRegistryIntegrationReq_PublicRegistryOptions_)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.PublicRegistryOptions, that.PublicRegistryOptions; p != q {
		if p == nil {
			p = &CreateContainerRegistryIntegrationReq_PublicRegistryOptions{}
		}
		if q == nil {
			q = &CreateContainerRegistryIntegrationReq_PublicRegistryOptions{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CreateContainerRegistryIntegrationRes) StableEqualVT(that *CreateContainerRegistryIntegrationRes) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.IntegrationId != that.IntegrationId {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CreateContainerRegistryIntegrationRes) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CreateContainerRegistryIntegrationRes)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *CreateContainerRegistryIntegrationRes) EqualVT(that *CreateContainerRegistryIntegrationRes) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.IntegrationId != that.IntegrationId {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CreateContainerRegistryIntegrationRes) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CreateContainerRegistryIntegrationRes)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *DeleteContainerRegistryIntegrationReq) StableEqualVT(that *DeleteContainerRegistryIntegrationReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.RegistryName != that.RegistryName {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *DeleteContainerRegistryIntegrationReq) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*DeleteContainerRegistryIntegrationReq)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *DeleteContainerRegistryIntegrationReq) EqualVT(that *DeleteContainerRegistryIntegrationReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.RegistryName != that.RegistryName {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *DeleteContainerRegistryIntegrationReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*DeleteContainerRegistryIntegrationReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *DeleteContainerRegistryIntegrationResp) StableEqualVT(that *DeleteContainerRegistryIntegrationResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *DeleteContainerRegistryIntegrationResp) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*DeleteContainerRegistryIntegrationResp)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *DeleteContainerRegistryIntegrationResp) EqualVT(that *DeleteContainerRegistryIntegrationResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *DeleteContainerRegistryIntegrationResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*DeleteContainerRegistryIntegrationResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ListContainerRegistryIntegrationsReq) StableEqualVT(that *ListContainerRegistryIntegrationsReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.FetchStatus != that.FetchStatus {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ListContainerRegistryIntegrationsReq) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ListContainerRegistryIntegrationsReq)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ListContainerRegistryIntegrationsReq) EqualVT(that *ListContainerRegistryIntegrationsReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.FetchStatus != that.FetchStatus {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ListContainerRegistryIntegrationsReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ListContainerRegistryIntegrationsReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ContainerRegistryIntegration_ECRInfo) StableEqualVT(that *ContainerRegistryIntegration_ECRInfo) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Region != that.Region {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ContainerRegistryIntegration_ECRInfo) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ContainerRegistryIntegration_ECRInfo)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ContainerRegistryIntegration) StableEqualVT(that *ContainerRegistryIntegration) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.RegistryInfo == nil && that.RegistryInfo != nil {
		return false
	} else if this.RegistryInfo != nil {
		if that.RegistryInfo == nil {
			return false
		}
		if !this.RegistryInfo.(interface {
			StableEqualVT(isContainerRegistryIntegration_RegistryInfo) bool
		}).StableEqualVT(that.RegistryInfo) {
			return false
		}
	}
	if this.IntegrationId != that.IntegrationId {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	if this.Url != that.Url {
		return false
	}
	if this.Type != that.Type {
		return false
	}
	if this.Status != that.Status {
		return false
	}
	if len(this.Repositories) != len(that.Repositories) {
		return false
	}
	for i, vx := range this.Repositories {
		vy := that.Repositories[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &TrackedImageRepository{}
			}
			if q == nil {
				q = &TrackedImageRepository{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ContainerRegistryIntegration) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ContainerRegistryIntegration)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ContainerRegistryIntegration_EcrInfo) StableEqualVT(thatIface isContainerRegistryIntegration_RegistryInfo) bool {
	that, ok := thatIface.(*ContainerRegistryIntegration_EcrInfo)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.EcrInfo, that.EcrInfo; p != q {
		if p == nil {
			p = &ContainerRegistryIntegration_ECRInfo{}
		}
		if q == nil {
			q = &ContainerRegistryIntegration_ECRInfo{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ContainerRegistryIntegration_ECRInfo) EqualVT(that *ContainerRegistryIntegration_ECRInfo) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Region != that.Region {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ContainerRegistryIntegration_ECRInfo) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ContainerRegistryIntegration_ECRInfo)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ContainerRegistryIntegration) EqualVT(that *ContainerRegistryIntegration) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.RegistryInfo == nil && that.RegistryInfo != nil {
		return false
	} else if this.RegistryInfo != nil {
		if that.RegistryInfo == nil {
			return false
		}
		if !this.RegistryInfo.(interface {
			EqualVT(isContainerRegistryIntegration_RegistryInfo) bool
		}).EqualVT(that.RegistryInfo) {
			return false
		}
	}
	if this.IntegrationId != that.IntegrationId {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	if this.Url != that.Url {
		return false
	}
	if this.Type != that.Type {
		return false
	}
	if this.Status != that.Status {
		return false
	}
	if len(this.Repositories) != len(that.Repositories) {
		return false
	}
	for i, vx := range this.Repositories {
		vy := that.Repositories[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &TrackedImageRepository{}
			}
			if q == nil {
				q = &TrackedImageRepository{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ContainerRegistryIntegration) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ContainerRegistryIntegration)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ContainerRegistryIntegration_EcrInfo) EqualVT(thatIface isContainerRegistryIntegration_RegistryInfo) bool {
	that, ok := thatIface.(*ContainerRegistryIntegration_EcrInfo)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.EcrInfo, that.EcrInfo; p != q {
		if p == nil {
			p = &ContainerRegistryIntegration_ECRInfo{}
		}
		if q == nil {
			q = &ContainerRegistryIntegration_ECRInfo{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ListContainerRegistryIntegrationsResp_ECRInfo) StableEqualVT(that *ListContainerRegistryIntegrationsResp_ECRInfo) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Region != that.Region {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ListContainerRegistryIntegrationsResp_ECRInfo) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ListContainerRegistryIntegrationsResp_ECRInfo)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ListContainerRegistryIntegrationsResp_ContainerRegistryIntegrationInfo) StableEqualVT(that *ListContainerRegistryIntegrationsResp_ContainerRegistryIntegrationInfo) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.RegistryInfo == nil && that.RegistryInfo != nil {
		return false
	} else if this.RegistryInfo != nil {
		if that.RegistryInfo == nil {
			return false
		}
		if !this.RegistryInfo.(interface {
			StableEqualVT(isListContainerRegistryIntegrationsResp_ContainerRegistryIntegrationInfo_RegistryInfo) bool
		}).StableEqualVT(that.RegistryInfo) {
			return false
		}
	}
	if this.IntegrationId != that.IntegrationId {
		return false
	}
	if this.Url != that.Url {
		return false
	}
	if this.Type != that.Type {
		return false
	}
	if this.Status != that.Status {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ListContainerRegistryIntegrationsResp_ContainerRegistryIntegrationInfo) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ListContainerRegistryIntegrationsResp_ContainerRegistryIntegrationInfo)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ListContainerRegistryIntegrationsResp_ContainerRegistryIntegrationInfo_EcrInfo) StableEqualVT(thatIface isListContainerRegistryIntegrationsResp_ContainerRegistryIntegrationInfo_RegistryInfo) bool {
	that, ok := thatIface.(*ListContainerRegistryIntegrationsResp_ContainerRegistryIntegrationInfo_EcrInfo)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.EcrInfo, that.EcrInfo; p != q {
		if p == nil {
			p = &ListContainerRegistryIntegrationsResp_ECRInfo{}
		}
		if q == nil {
			q = &ListContainerRegistryIntegrationsResp_ECRInfo{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ListContainerRegistryIntegrationsResp) StableEqualVT(that *ListContainerRegistryIntegrationsResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.ContainerRegistries) != len(that.ContainerRegistries) {
		return false
	}
	for i, vx := range this.ContainerRegistries {
		vy := that.ContainerRegistries[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &ListContainerRegistryIntegrationsResp_ContainerRegistryIntegrationInfo{}
			}
			if q == nil {
				q = &ListContainerRegistryIntegrationsResp_ContainerRegistryIntegrationInfo{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ListContainerRegistryIntegrationsResp) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ListContainerRegistryIntegrationsResp)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ListContainerRegistryIntegrationsResp_ECRInfo) EqualVT(that *ListContainerRegistryIntegrationsResp_ECRInfo) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Region != that.Region {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ListContainerRegistryIntegrationsResp_ECRInfo) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ListContainerRegistryIntegrationsResp_ECRInfo)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ListContainerRegistryIntegrationsResp_ContainerRegistryIntegrationInfo) EqualVT(that *ListContainerRegistryIntegrationsResp_ContainerRegistryIntegrationInfo) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.RegistryInfo == nil && that.RegistryInfo != nil {
		return false
	} else if this.RegistryInfo != nil {
		if that.RegistryInfo == nil {
			return false
		}
		if !this.RegistryInfo.(interface {
			EqualVT(isListContainerRegistryIntegrationsResp_ContainerRegistryIntegrationInfo_RegistryInfo) bool
		}).EqualVT(that.RegistryInfo) {
			return false
		}
	}
	if this.IntegrationId != that.IntegrationId {
		return false
	}
	if this.Url != that.Url {
		return false
	}
	if this.Type != that.Type {
		return false
	}
	if this.Status != that.Status {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ListContainerRegistryIntegrationsResp_ContainerRegistryIntegrationInfo) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ListContainerRegistryIntegrationsResp_ContainerRegistryIntegrationInfo)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ListContainerRegistryIntegrationsResp_ContainerRegistryIntegrationInfo_EcrInfo) EqualVT(thatIface isListContainerRegistryIntegrationsResp_ContainerRegistryIntegrationInfo_RegistryInfo) bool {
	that, ok := thatIface.(*ListContainerRegistryIntegrationsResp_ContainerRegistryIntegrationInfo_EcrInfo)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.EcrInfo, that.EcrInfo; p != q {
		if p == nil {
			p = &ListContainerRegistryIntegrationsResp_ECRInfo{}
		}
		if q == nil {
			q = &ListContainerRegistryIntegrationsResp_ECRInfo{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ListContainerRegistryIntegrationsResp) EqualVT(that *ListContainerRegistryIntegrationsResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.ContainerRegistries) != len(that.ContainerRegistries) {
		return false
	}
	for i, vx := range this.ContainerRegistries {
		vy := that.ContainerRegistries[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &ListContainerRegistryIntegrationsResp_ContainerRegistryIntegrationInfo{}
			}
			if q == nil {
				q = &ListContainerRegistryIntegrationsResp_ContainerRegistryIntegrationInfo{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ListContainerRegistryIntegrationsResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ListContainerRegistryIntegrationsResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *GetContainerRegistryIntegrationReq) StableEqualVT(that *GetContainerRegistryIntegrationReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.RegistryName != that.RegistryName {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetContainerRegistryIntegrationReq) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetContainerRegistryIntegrationReq)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *GetContainerRegistryIntegrationReq) EqualVT(that *GetContainerRegistryIntegrationReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.RegistryName != that.RegistryName {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetContainerRegistryIntegrationReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetContainerRegistryIntegrationReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *GetContainerRegistryIntegrationResp) StableEqualVT(that *GetContainerRegistryIntegrationResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Registry.StableEqualVT(that.Registry) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetContainerRegistryIntegrationResp) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetContainerRegistryIntegrationResp)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *GetContainerRegistryIntegrationResp) EqualVT(that *GetContainerRegistryIntegrationResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Registry.EqualVT(that.Registry) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetContainerRegistryIntegrationResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetContainerRegistryIntegrationResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *GetContainerRegistryImagesReq) StableEqualVT(that *GetContainerRegistryImagesReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.IntegrationId != that.IntegrationId {
		return false
	}
	if this.ImageRepository != that.ImageRepository {
		return false
	}
	if this.SkipRegistryCache != that.SkipRegistryCache {
		return false
	}
	if this.PageToken != that.PageToken {
		return false
	}
	if this.PageSize != that.PageSize {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetContainerRegistryImagesReq) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetContainerRegistryImagesReq)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *GetContainerRegistryImagesReq) EqualVT(that *GetContainerRegistryImagesReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.IntegrationId != that.IntegrationId {
		return false
	}
	if this.ImageRepository != that.ImageRepository {
		return false
	}
	if this.SkipRegistryCache != that.SkipRegistryCache {
		return false
	}
	if this.PageToken != that.PageToken {
		return false
	}
	if this.PageSize != that.PageSize {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetContainerRegistryImagesReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetContainerRegistryImagesReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *GetContainerRegistryImagesRes) StableEqualVT(that *GetContainerRegistryImagesRes) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Images) != len(that.Images) {
		return false
	}
	for i, vx := range this.Images {
		vy := that.Images[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &RegistryImage{}
			}
			if q == nil {
				q = &RegistryImage{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if this.NextPageToken != that.NextPageToken {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetContainerRegistryImagesRes) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetContainerRegistryImagesRes)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *GetContainerRegistryImagesRes) EqualVT(that *GetContainerRegistryImagesRes) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Images) != len(that.Images) {
		return false
	}
	for i, vx := range this.Images {
		vy := that.Images[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &RegistryImage{}
			}
			if q == nil {
				q = &RegistryImage{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if this.NextPageToken != that.NextPageToken {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetContainerRegistryImagesRes) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetContainerRegistryImagesRes)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ListTrackedImageRepositoriesReq) StableEqualVT(that *ListTrackedImageRepositoriesReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.IntegrationId != that.IntegrationId {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ListTrackedImageRepositoriesReq) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ListTrackedImageRepositoriesReq)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ListTrackedImageRepositoriesReq) EqualVT(that *ListTrackedImageRepositoriesReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.IntegrationId != that.IntegrationId {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ListTrackedImageRepositoriesReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ListTrackedImageRepositoriesReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ListTrackedImageRepositoriesResp) StableEqualVT(that *ListTrackedImageRepositoriesResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Repositories) != len(that.Repositories) {
		return false
	}
	for i, vx := range this.Repositories {
		vy := that.Repositories[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &TrackedImageRepository{}
			}
			if q == nil {
				q = &TrackedImageRepository{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ListTrackedImageRepositoriesResp) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ListTrackedImageRepositoriesResp)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ListTrackedImageRepositoriesResp) EqualVT(that *ListTrackedImageRepositoriesResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Repositories) != len(that.Repositories) {
		return false
	}
	for i, vx := range this.Repositories {
		vy := that.Repositories[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &TrackedImageRepository{}
			}
			if q == nil {
				q = &TrackedImageRepository{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ListTrackedImageRepositoriesResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ListTrackedImageRepositoriesResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *GetTrackedImageRepositoryReq) StableEqualVT(that *GetTrackedImageRepositoryReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.IntegrationId != that.IntegrationId {
		return false
	}
	if this.Repository != that.Repository {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetTrackedImageRepositoryReq) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetTrackedImageRepositoryReq)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *GetTrackedImageRepositoryReq) EqualVT(that *GetTrackedImageRepositoryReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.IntegrationId != that.IntegrationId {
		return false
	}
	if this.Repository != that.Repository {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetTrackedImageRepositoryReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetTrackedImageRepositoryReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *GetTrackedImageRepositoryResp) StableEqualVT(that *GetTrackedImageRepositoryResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Repository.StableEqualVT(that.Repository) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetTrackedImageRepositoryResp) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetTrackedImageRepositoryResp)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *GetTrackedImageRepositoryResp) EqualVT(that *GetTrackedImageRepositoryResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Repository.EqualVT(that.Repository) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetTrackedImageRepositoryResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetTrackedImageRepositoryResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *TrackImageRepositoriesReq) StableEqualVT(that *TrackImageRepositoriesReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.IntegrationId != that.IntegrationId {
		return false
	}
	if len(this.Repositories) != len(that.Repositories) {
		return false
	}
	for i, vx := range this.Repositories {
		vy := that.Repositories[i]
		if vx != vy {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *TrackImageRepositoriesReq) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*TrackImageRepositoriesReq)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *TrackImageRepositoriesReq) EqualVT(that *TrackImageRepositoriesReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.IntegrationId != that.IntegrationId {
		return false
	}
	if len(this.Repositories) != len(that.Repositories) {
		return false
	}
	for i, vx := range this.Repositories {
		vy := that.Repositories[i]
		if vx != vy {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *TrackImageRepositoriesReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*TrackImageRepositoriesReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *TrackImageRepositoriesResp) StableEqualVT(that *TrackImageRepositoriesResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *TrackImageRepositoriesResp) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*TrackImageRepositoriesResp)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *TrackImageRepositoriesResp) EqualVT(that *TrackImageRepositoriesResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *TrackImageRepositoriesResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*TrackImageRepositoriesResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *StopTrackingImageRepositoryReq) StableEqualVT(that *StopTrackingImageRepositoryReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.IntegrationId != that.IntegrationId {
		return false
	}
	if this.Repository != that.Repository {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *StopTrackingImageRepositoryReq) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*StopTrackingImageRepositoryReq)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *StopTrackingImageRepositoryReq) EqualVT(that *StopTrackingImageRepositoryReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.IntegrationId != that.IntegrationId {
		return false
	}
	if this.Repository != that.Repository {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *StopTrackingImageRepositoryReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*StopTrackingImageRepositoryReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *StopTrackingImageRepositoryResp) StableEqualVT(that *StopTrackingImageRepositoryResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *StopTrackingImageRepositoryResp) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*StopTrackingImageRepositoryResp)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *StopTrackingImageRepositoryResp) EqualVT(that *StopTrackingImageRepositoryResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *StopTrackingImageRepositoryResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*StopTrackingImageRepositoryResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *GetImageCommitInfoReq) StableEqualVT(that *GetImageCommitInfoReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.ImageIdOneof == nil && that.ImageIdOneof != nil {
		return false
	} else if this.ImageIdOneof != nil {
		if that.ImageIdOneof == nil {
			return false
		}
		if !this.ImageIdOneof.(interface {
			StableEqualVT(isGetImageCommitInfoReq_ImageIdOneof) bool
		}).StableEqualVT(that.ImageIdOneof) {
			return false
		}
	}
	if this.IntegrationId != that.IntegrationId {
		return false
	}
	if this.Repository != that.Repository {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetImageCommitInfoReq) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetImageCommitInfoReq)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *GetImageCommitInfoReq_Tag) StableEqualVT(thatIface isGetImageCommitInfoReq_ImageIdOneof) bool {
	that, ok := thatIface.(*GetImageCommitInfoReq_Tag)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.Tag != that.Tag {
		return false
	}
	return true
}

func (this *GetImageCommitInfoReq_Image) StableEqualVT(thatIface isGetImageCommitInfoReq_ImageIdOneof) bool {
	that, ok := thatIface.(*GetImageCommitInfoReq_Image)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.Image != that.Image {
		return false
	}
	return true
}

func (this *GetImageCommitInfoReq) EqualVT(that *GetImageCommitInfoReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.ImageIdOneof == nil && that.ImageIdOneof != nil {
		return false
	} else if this.ImageIdOneof != nil {
		if that.ImageIdOneof == nil {
			return false
		}
		if !this.ImageIdOneof.(interface {
			EqualVT(isGetImageCommitInfoReq_ImageIdOneof) bool
		}).EqualVT(that.ImageIdOneof) {
			return false
		}
	}
	if this.IntegrationId != that.IntegrationId {
		return false
	}
	if this.Repository != that.Repository {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetImageCommitInfoReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetImageCommitInfoReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *GetImageCommitInfoReq_Tag) EqualVT(thatIface isGetImageCommitInfoReq_ImageIdOneof) bool {
	that, ok := thatIface.(*GetImageCommitInfoReq_Tag)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.Tag != that.Tag {
		return false
	}
	return true
}

func (this *GetImageCommitInfoReq_Image) EqualVT(thatIface isGetImageCommitInfoReq_ImageIdOneof) bool {
	that, ok := thatIface.(*GetImageCommitInfoReq_Image)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.Image != that.Image {
		return false
	}
	return true
}

func (this *GetImageCommitInfoResp) StableEqualVT(that *GetImageCommitInfoResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Commit.StableEqualVT(that.Commit) {
		return false
	}
	if this.Repository != that.Repository {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetImageCommitInfoResp) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetImageCommitInfoResp)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *GetImageCommitInfoResp) EqualVT(that *GetImageCommitInfoResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Commit.EqualVT(that.Commit) {
		return false
	}
	if this.Repository != that.Repository {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetImageCommitInfoResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetImageCommitInfoResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *GetCommitInfoReq) StableEqualVT(that *GetCommitInfoReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Repository != that.Repository {
		return false
	}
	if this.CommitId != that.CommitId {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetCommitInfoReq) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetCommitInfoReq)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *GetCommitInfoReq) EqualVT(that *GetCommitInfoReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Repository != that.Repository {
		return false
	}
	if this.CommitId != that.CommitId {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetCommitInfoReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetCommitInfoReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *GetCommitInfoResp) StableEqualVT(that *GetCommitInfoResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Commit.StableEqualVT(that.Commit) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetCommitInfoResp) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetCommitInfoResp)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *GetCommitInfoResp) EqualVT(that *GetCommitInfoResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Commit.EqualVT(that.Commit) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetCommitInfoResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetCommitInfoResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *GetProgramDefaultsReq) StableEqualVT(that *GetProgramDefaultsReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.ImageIdOneof == nil && that.ImageIdOneof != nil {
		return false
	} else if this.ImageIdOneof != nil {
		if that.ImageIdOneof == nil {
			return false
		}
		if !this.ImageIdOneof.(interface {
			StableEqualVT(isGetProgramDefaultsReq_ImageIdOneof) bool
		}).StableEqualVT(that.ImageIdOneof) {
			return false
		}
	}
	if this.IntegrationId != that.IntegrationId {
		return false
	}
	if this.Repository != that.Repository {
		return false
	}
	if this.SkipRegistryCache != that.SkipRegistryCache {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetProgramDefaultsReq) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetProgramDefaultsReq)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *GetProgramDefaultsReq_Tag) StableEqualVT(thatIface isGetProgramDefaultsReq_ImageIdOneof) bool {
	that, ok := thatIface.(*GetProgramDefaultsReq_Tag)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.Tag != that.Tag {
		return false
	}
	return true
}

func (this *GetProgramDefaultsReq_Image) StableEqualVT(thatIface isGetProgramDefaultsReq_ImageIdOneof) bool {
	that, ok := thatIface.(*GetProgramDefaultsReq_Image)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.Image != that.Image {
		return false
	}
	return true
}

func (this *GetProgramDefaultsReq) EqualVT(that *GetProgramDefaultsReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.ImageIdOneof == nil && that.ImageIdOneof != nil {
		return false
	} else if this.ImageIdOneof != nil {
		if that.ImageIdOneof == nil {
			return false
		}
		if !this.ImageIdOneof.(interface {
			EqualVT(isGetProgramDefaultsReq_ImageIdOneof) bool
		}).EqualVT(that.ImageIdOneof) {
			return false
		}
	}
	if this.IntegrationId != that.IntegrationId {
		return false
	}
	if this.Repository != that.Repository {
		return false
	}
	if this.SkipRegistryCache != that.SkipRegistryCache {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetProgramDefaultsReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetProgramDefaultsReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *GetProgramDefaultsReq_Tag) EqualVT(thatIface isGetProgramDefaultsReq_ImageIdOneof) bool {
	that, ok := thatIface.(*GetProgramDefaultsReq_Tag)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.Tag != that.Tag {
		return false
	}
	return true
}

func (this *GetProgramDefaultsReq_Image) EqualVT(thatIface isGetProgramDefaultsReq_ImageIdOneof) bool {
	that, ok := thatIface.(*GetProgramDefaultsReq_Image)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.Image != that.Image {
		return false
	}
	return true
}

func (this *ProgramDefaults) StableEqualVT(that *ProgramDefaults) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Cmd) != len(that.Cmd) {
		return false
	}
	for i, vx := range this.Cmd {
		vy := that.Cmd[i]
		if vx != vy {
			return false
		}
	}
	if len(this.Entrypoint) != len(that.Entrypoint) {
		return false
	}
	for i, vx := range this.Entrypoint {
		vy := that.Entrypoint[i]
		if vx != vy {
			return false
		}
	}
	if len(this.Env) != len(that.Env) {
		return false
	}
	for i, vx := range this.Env {
		vy, ok := that.Env[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &common_config.EnvValue{}
			}
			if q == nil {
				q = &common_config.EnvValue{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if len(this.Ports) != len(that.Ports) {
		return false
	}
	for i, vx := range this.Ports {
		vy := that.Ports[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &common_config.PortConfig{}
			}
			if q == nil {
				q = &common_config.PortConfig{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ProgramDefaults) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ProgramDefaults)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ProgramDefaults) EqualVT(that *ProgramDefaults) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Cmd) != len(that.Cmd) {
		return false
	}
	for i, vx := range this.Cmd {
		vy := that.Cmd[i]
		if vx != vy {
			return false
		}
	}
	if len(this.Entrypoint) != len(that.Entrypoint) {
		return false
	}
	for i, vx := range this.Entrypoint {
		vy := that.Entrypoint[i]
		if vx != vy {
			return false
		}
	}
	if len(this.Env) != len(that.Env) {
		return false
	}
	for i, vx := range this.Env {
		vy, ok := that.Env[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &common_config.EnvValue{}
			}
			if q == nil {
				q = &common_config.EnvValue{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if len(this.Ports) != len(that.Ports) {
		return false
	}
	for i, vx := range this.Ports {
		vy := that.Ports[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &common_config.PortConfig{}
			}
			if q == nil {
				q = &common_config.PortConfig{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ProgramDefaults) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ProgramDefaults)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *GetProgramDefaultsResp) StableEqualVT(that *GetProgramDefaultsResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.ProgramDefaults.StableEqualVT(that.ProgramDefaults) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetProgramDefaultsResp) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetProgramDefaultsResp)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *GetProgramDefaultsResp) EqualVT(that *GetProgramDefaultsResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.ProgramDefaults.EqualVT(that.ProgramDefaults) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetProgramDefaultsResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetProgramDefaultsResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *GetServiceImageInfoReq) StableEqualVT(that *GetServiceImageInfoReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Service != that.Service {
		return false
	}
	if len(this.Versions) != len(that.Versions) {
		return false
	}
	for i, vx := range this.Versions {
		vy := that.Versions[i]
		if vx != vy {
			return false
		}
	}
	if this.Application != that.Application {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetServiceImageInfoReq) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetServiceImageInfoReq)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *GetServiceImageInfoReq) EqualVT(that *GetServiceImageInfoReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Service != that.Service {
		return false
	}
	if len(this.Versions) != len(that.Versions) {
		return false
	}
	for i, vx := range this.Versions {
		vy := that.Versions[i]
		if vx != vy {
			return false
		}
	}
	if this.Application != that.Application {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetServiceImageInfoReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetServiceImageInfoReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *GetServiceImageInfoResp_VersionInfo) StableEqualVT(that *GetServiceImageInfoResp_VersionInfo) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Version != that.Version {
		return false
	}
	if len(this.ProgramInfos) != len(that.ProgramInfos) {
		return false
	}
	for i, vx := range this.ProgramInfos {
		vy := that.ProgramInfos[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &GetServiceImageInfoResp_ProgramInfo{}
			}
			if q == nil {
				q = &GetServiceImageInfoResp_ProgramInfo{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if len(this.PerReleaseChannel) != len(that.PerReleaseChannel) {
		return false
	}
	for i, vx := range this.PerReleaseChannel {
		vy := that.PerReleaseChannel[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &GetServiceImageInfoResp_PerReleaseChannel{}
			}
			if q == nil {
				q = &GetServiceImageInfoResp_PerReleaseChannel{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetServiceImageInfoResp_VersionInfo) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetServiceImageInfoResp_VersionInfo)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *GetServiceImageInfoResp_ProgramInfo) StableEqualVT(that *GetServiceImageInfoResp_ProgramInfo) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.ImageUrl != that.ImageUrl {
		return false
	}
	if len(this.Tags) != len(that.Tags) {
		return false
	}
	for i, vx := range this.Tags {
		vy := that.Tags[i]
		if vx != vy {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetServiceImageInfoResp_ProgramInfo) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetServiceImageInfoResp_ProgramInfo)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *GetServiceImageInfoResp_PerReleaseChannel) StableEqualVT(that *GetServiceImageInfoResp_PerReleaseChannel) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.ReleaseChannel != that.ReleaseChannel {
		return false
	}
	if len(this.ProgramInfos) != len(that.ProgramInfos) {
		return false
	}
	for i, vx := range this.ProgramInfos {
		vy := that.ProgramInfos[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &GetServiceImageInfoResp_ProgramInfo{}
			}
			if q == nil {
				q = &GetServiceImageInfoResp_ProgramInfo{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetServiceImageInfoResp_PerReleaseChannel) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetServiceImageInfoResp_PerReleaseChannel)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *GetServiceImageInfoResp) StableEqualVT(that *GetServiceImageInfoResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.ServiceId != that.ServiceId {
		return false
	}
	if this.ServiceName != that.ServiceName {
		return false
	}
	if len(this.VersionInfos) != len(that.VersionInfos) {
		return false
	}
	for i, vx := range this.VersionInfos {
		vy := that.VersionInfos[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &GetServiceImageInfoResp_VersionInfo{}
			}
			if q == nil {
				q = &GetServiceImageInfoResp_VersionInfo{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetServiceImageInfoResp) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetServiceImageInfoResp)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *GetServiceImageInfoResp_VersionInfo) EqualVT(that *GetServiceImageInfoResp_VersionInfo) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Version != that.Version {
		return false
	}
	if len(this.ProgramInfos) != len(that.ProgramInfos) {
		return false
	}
	for i, vx := range this.ProgramInfos {
		vy := that.ProgramInfos[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &GetServiceImageInfoResp_ProgramInfo{}
			}
			if q == nil {
				q = &GetServiceImageInfoResp_ProgramInfo{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if len(this.PerReleaseChannel) != len(that.PerReleaseChannel) {
		return false
	}
	for i, vx := range this.PerReleaseChannel {
		vy := that.PerReleaseChannel[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &GetServiceImageInfoResp_PerReleaseChannel{}
			}
			if q == nil {
				q = &GetServiceImageInfoResp_PerReleaseChannel{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetServiceImageInfoResp_VersionInfo) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetServiceImageInfoResp_VersionInfo)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *GetServiceImageInfoResp_ProgramInfo) EqualVT(that *GetServiceImageInfoResp_ProgramInfo) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.ImageUrl != that.ImageUrl {
		return false
	}
	if len(this.Tags) != len(that.Tags) {
		return false
	}
	for i, vx := range this.Tags {
		vy := that.Tags[i]
		if vx != vy {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetServiceImageInfoResp_ProgramInfo) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetServiceImageInfoResp_ProgramInfo)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *GetServiceImageInfoResp_PerReleaseChannel) EqualVT(that *GetServiceImageInfoResp_PerReleaseChannel) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.ReleaseChannel != that.ReleaseChannel {
		return false
	}
	if len(this.ProgramInfos) != len(that.ProgramInfos) {
		return false
	}
	for i, vx := range this.ProgramInfos {
		vy := that.ProgramInfos[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &GetServiceImageInfoResp_ProgramInfo{}
			}
			if q == nil {
				q = &GetServiceImageInfoResp_ProgramInfo{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetServiceImageInfoResp_PerReleaseChannel) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetServiceImageInfoResp_PerReleaseChannel)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *GetServiceImageInfoResp) EqualVT(that *GetServiceImageInfoResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.ServiceId != that.ServiceId {
		return false
	}
	if this.ServiceName != that.ServiceName {
		return false
	}
	if len(this.VersionInfos) != len(that.VersionInfos) {
		return false
	}
	for i, vx := range this.VersionInfos {
		vy := that.VersionInfos[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &GetServiceImageInfoResp_VersionInfo{}
			}
			if q == nil {
				q = &GetServiceImageInfoResp_VersionInfo{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetServiceImageInfoResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetServiceImageInfoResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *InstallSlackReq) StableEqualVT(that *InstallSlackReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Error != that.Error {
		return false
	}
	if this.Code != that.Code {
		return false
	}
	if this.RedirectUri != that.RedirectUri {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *InstallSlackReq) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*InstallSlackReq)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *InstallSlackReq) EqualVT(that *InstallSlackReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Error != that.Error {
		return false
	}
	if this.Code != that.Code {
		return false
	}
	if this.RedirectUri != that.RedirectUri {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *InstallSlackReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*InstallSlackReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *InstallSlackResp) StableEqualVT(that *InstallSlackResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Success != that.Success {
		return false
	}
	if this.Message != that.Message {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *InstallSlackResp) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*InstallSlackResp)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *InstallSlackResp) EqualVT(that *InstallSlackResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Success != that.Success {
		return false
	}
	if this.Message != that.Message {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *InstallSlackResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*InstallSlackResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *GetInstallSlackUrlReq) StableEqualVT(that *GetInstallSlackUrlReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetInstallSlackUrlReq) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetInstallSlackUrlReq)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *GetInstallSlackUrlReq) EqualVT(that *GetInstallSlackUrlReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetInstallSlackUrlReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetInstallSlackUrlReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *GetInstallSlackUrlResp) StableEqualVT(that *GetInstallSlackUrlResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Url != that.Url {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetInstallSlackUrlResp) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetInstallSlackUrlResp)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *GetInstallSlackUrlResp) EqualVT(that *GetInstallSlackUrlResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Url != that.Url {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetInstallSlackUrlResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetInstallSlackUrlResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *UninstallSlackReq) StableEqualVT(that *UninstallSlackReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *UninstallSlackReq) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*UninstallSlackReq)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *UninstallSlackReq) EqualVT(that *UninstallSlackReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *UninstallSlackReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*UninstallSlackReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *UninstallSlackResp) StableEqualVT(that *UninstallSlackResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Success != that.Success {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *UninstallSlackResp) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*UninstallSlackResp)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *UninstallSlackResp) EqualVT(that *UninstallSlackResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Success != that.Success {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *UninstallSlackResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*UninstallSlackResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *SlackChannel) StableEqualVT(that *SlackChannel) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Id != that.Id {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *SlackChannel) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*SlackChannel)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *SlackChannel) EqualVT(that *SlackChannel) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Id != that.Id {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *SlackChannel) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*SlackChannel)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *InstallPagerDutyReq) StableEqualVT(that *InstallPagerDutyReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Error != that.Error {
		return false
	}
	if this.Code != that.Code {
		return false
	}
	if this.RedirectUri != that.RedirectUri {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *InstallPagerDutyReq) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*InstallPagerDutyReq)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *InstallPagerDutyReq) EqualVT(that *InstallPagerDutyReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Error != that.Error {
		return false
	}
	if this.Code != that.Code {
		return false
	}
	if this.RedirectUri != that.RedirectUri {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *InstallPagerDutyReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*InstallPagerDutyReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *InstallPagerDutyResp) StableEqualVT(that *InstallPagerDutyResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Success != that.Success {
		return false
	}
	if this.Message != that.Message {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *InstallPagerDutyResp) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*InstallPagerDutyResp)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *InstallPagerDutyResp) EqualVT(that *InstallPagerDutyResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Success != that.Success {
		return false
	}
	if this.Message != that.Message {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *InstallPagerDutyResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*InstallPagerDutyResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *GetInstallPagerDutyUrlReq) StableEqualVT(that *GetInstallPagerDutyUrlReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetInstallPagerDutyUrlReq) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetInstallPagerDutyUrlReq)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *GetInstallPagerDutyUrlReq) EqualVT(that *GetInstallPagerDutyUrlReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetInstallPagerDutyUrlReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetInstallPagerDutyUrlReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *GetInstallPagerDutyUrlResp) StableEqualVT(that *GetInstallPagerDutyUrlResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Url != that.Url {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetInstallPagerDutyUrlResp) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetInstallPagerDutyUrlResp)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *GetInstallPagerDutyUrlResp) EqualVT(that *GetInstallPagerDutyUrlResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Url != that.Url {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetInstallPagerDutyUrlResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetInstallPagerDutyUrlResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *UninstallPagerDutyReq) StableEqualVT(that *UninstallPagerDutyReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *UninstallPagerDutyReq) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*UninstallPagerDutyReq)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *UninstallPagerDutyReq) EqualVT(that *UninstallPagerDutyReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *UninstallPagerDutyReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*UninstallPagerDutyReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *UninstallPagerDutyResp) StableEqualVT(that *UninstallPagerDutyResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Success != that.Success {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *UninstallPagerDutyResp) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*UninstallPagerDutyResp)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *UninstallPagerDutyResp) EqualVT(that *UninstallPagerDutyResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Success != that.Success {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *UninstallPagerDutyResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*UninstallPagerDutyResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *PagerDutyService) StableEqualVT(that *PagerDutyService) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Id != that.Id {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *PagerDutyService) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*PagerDutyService)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *PagerDutyService) EqualVT(that *PagerDutyService) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Id != that.Id {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *PagerDutyService) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*PagerDutyService)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *InstallGrafanaReq) StableEqualVT(that *InstallGrafanaReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Url != that.Url {
		return false
	}
	if this.ApiToken != that.ApiToken {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *InstallGrafanaReq) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*InstallGrafanaReq)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *InstallGrafanaReq) EqualVT(that *InstallGrafanaReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Url != that.Url {
		return false
	}
	if this.ApiToken != that.ApiToken {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *InstallGrafanaReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*InstallGrafanaReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *InstallGrafanaResp) StableEqualVT(that *InstallGrafanaResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.IntegrationId != that.IntegrationId {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *InstallGrafanaResp) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*InstallGrafanaResp)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *InstallGrafanaResp) EqualVT(that *InstallGrafanaResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.IntegrationId != that.IntegrationId {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *InstallGrafanaResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*InstallGrafanaResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *UninstallGrafanaReq) StableEqualVT(that *UninstallGrafanaReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *UninstallGrafanaReq) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*UninstallGrafanaReq)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *UninstallGrafanaReq) EqualVT(that *UninstallGrafanaReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *UninstallGrafanaReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*UninstallGrafanaReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *UninstallGrafanaResp) StableEqualVT(that *UninstallGrafanaResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.IntegrationId != that.IntegrationId {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *UninstallGrafanaResp) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*UninstallGrafanaResp)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *UninstallGrafanaResp) EqualVT(that *UninstallGrafanaResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.IntegrationId != that.IntegrationId {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *UninstallGrafanaResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*UninstallGrafanaResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *GetGrafanaInstallationReq) StableEqualVT(that *GetGrafanaInstallationReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetGrafanaInstallationReq) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetGrafanaInstallationReq)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *GetGrafanaInstallationReq) EqualVT(that *GetGrafanaInstallationReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetGrafanaInstallationReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetGrafanaInstallationReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *GetGrafanaInstallationResp) StableEqualVT(that *GetGrafanaInstallationResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.IntegrationId != that.IntegrationId {
		return false
	}
	if this.Url != that.Url {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetGrafanaInstallationResp) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetGrafanaInstallationResp)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *GetGrafanaInstallationResp) EqualVT(that *GetGrafanaInstallationResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.IntegrationId != that.IntegrationId {
		return false
	}
	if this.Url != that.Url {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetGrafanaInstallationResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetGrafanaInstallationResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ListHoneycombEnvironmentsReq) StableEqualVT(that *ListHoneycombEnvironmentsReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ListHoneycombEnvironmentsReq) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ListHoneycombEnvironmentsReq)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ListHoneycombEnvironmentsReq) EqualVT(that *ListHoneycombEnvironmentsReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ListHoneycombEnvironmentsReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ListHoneycombEnvironmentsReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ListHoneycombEnvironmentsResp_HoneycombEnvironment) StableEqualVT(that *ListHoneycombEnvironmentsResp_HoneycombEnvironment) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.IntegrationId != that.IntegrationId {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ListHoneycombEnvironmentsResp_HoneycombEnvironment) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ListHoneycombEnvironmentsResp_HoneycombEnvironment)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ListHoneycombEnvironmentsResp) StableEqualVT(that *ListHoneycombEnvironmentsResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Environments) != len(that.Environments) {
		return false
	}
	for i, vx := range this.Environments {
		vy := that.Environments[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &ListHoneycombEnvironmentsResp_HoneycombEnvironment{}
			}
			if q == nil {
				q = &ListHoneycombEnvironmentsResp_HoneycombEnvironment{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ListHoneycombEnvironmentsResp) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ListHoneycombEnvironmentsResp)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ListHoneycombEnvironmentsResp_HoneycombEnvironment) EqualVT(that *ListHoneycombEnvironmentsResp_HoneycombEnvironment) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.IntegrationId != that.IntegrationId {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ListHoneycombEnvironmentsResp_HoneycombEnvironment) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ListHoneycombEnvironmentsResp_HoneycombEnvironment)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ListHoneycombEnvironmentsResp) EqualVT(that *ListHoneycombEnvironmentsResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Environments) != len(that.Environments) {
		return false
	}
	for i, vx := range this.Environments {
		vy := that.Environments[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &ListHoneycombEnvironmentsResp_HoneycombEnvironment{}
			}
			if q == nil {
				q = &ListHoneycombEnvironmentsResp_HoneycombEnvironment{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ListHoneycombEnvironmentsResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ListHoneycombEnvironmentsResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *AddHoneycombEnvironmentReq) StableEqualVT(that *AddHoneycombEnvironmentReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	if this.ApiKey != that.ApiKey {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *AddHoneycombEnvironmentReq) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*AddHoneycombEnvironmentReq)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *AddHoneycombEnvironmentReq) EqualVT(that *AddHoneycombEnvironmentReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	if this.ApiKey != that.ApiKey {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *AddHoneycombEnvironmentReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*AddHoneycombEnvironmentReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *AddHoneycombEnvironmentResp) StableEqualVT(that *AddHoneycombEnvironmentResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.IntegrationId != that.IntegrationId {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *AddHoneycombEnvironmentResp) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*AddHoneycombEnvironmentResp)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *AddHoneycombEnvironmentResp) EqualVT(that *AddHoneycombEnvironmentResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.IntegrationId != that.IntegrationId {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *AddHoneycombEnvironmentResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*AddHoneycombEnvironmentResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *UpdateHoneycombEnvironmentReq) StableEqualVT(that *UpdateHoneycombEnvironmentReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	if this.ApiKey != that.ApiKey {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *UpdateHoneycombEnvironmentReq) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*UpdateHoneycombEnvironmentReq)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *UpdateHoneycombEnvironmentReq) EqualVT(that *UpdateHoneycombEnvironmentReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	if this.ApiKey != that.ApiKey {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *UpdateHoneycombEnvironmentReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*UpdateHoneycombEnvironmentReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *UpdateHoneycombEnvironmentResp) StableEqualVT(that *UpdateHoneycombEnvironmentResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *UpdateHoneycombEnvironmentResp) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*UpdateHoneycombEnvironmentResp)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *UpdateHoneycombEnvironmentResp) EqualVT(that *UpdateHoneycombEnvironmentResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *UpdateHoneycombEnvironmentResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*UpdateHoneycombEnvironmentResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *DeleteHoneycombEnvironmentReq) StableEqualVT(that *DeleteHoneycombEnvironmentReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *DeleteHoneycombEnvironmentReq) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*DeleteHoneycombEnvironmentReq)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *DeleteHoneycombEnvironmentReq) EqualVT(that *DeleteHoneycombEnvironmentReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *DeleteHoneycombEnvironmentReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*DeleteHoneycombEnvironmentReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *DeleteHoneycombEnvironmentResp) StableEqualVT(that *DeleteHoneycombEnvironmentResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *DeleteHoneycombEnvironmentResp) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*DeleteHoneycombEnvironmentResp)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *DeleteHoneycombEnvironmentResp) EqualVT(that *DeleteHoneycombEnvironmentResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *DeleteHoneycombEnvironmentResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*DeleteHoneycombEnvironmentResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *UninstallHoneycombReq) StableEqualVT(that *UninstallHoneycombReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *UninstallHoneycombReq) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*UninstallHoneycombReq)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *UninstallHoneycombReq) EqualVT(that *UninstallHoneycombReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *UninstallHoneycombReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*UninstallHoneycombReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *UninstallHoneycombResp) StableEqualVT(that *UninstallHoneycombResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.IntegrationIds) != len(that.IntegrationIds) {
		return false
	}
	for i, vx := range this.IntegrationIds {
		vy := that.IntegrationIds[i]
		if vx != vy {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *UninstallHoneycombResp) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*UninstallHoneycombResp)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *UninstallHoneycombResp) EqualVT(that *UninstallHoneycombResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.IntegrationIds) != len(that.IntegrationIds) {
		return false
	}
	for i, vx := range this.IntegrationIds {
		vy := that.IntegrationIds[i]
		if vx != vy {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *UninstallHoneycombResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*UninstallHoneycombResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CreateGitHubAppReq) StableEqualVT(that *CreateGitHubAppReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.AppId != that.AppId {
		return false
	}
	if this.PrivateKey != that.PrivateKey {
		return false
	}
	if this.ClientSecret != that.ClientSecret {
		return false
	}
	if this.WebhookSecret != that.WebhookSecret {
		return false
	}
	if this.GithubOrganization != that.GithubOrganization {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CreateGitHubAppReq) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CreateGitHubAppReq)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *CreateGitHubAppReq) EqualVT(that *CreateGitHubAppReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.AppId != that.AppId {
		return false
	}
	if this.PrivateKey != that.PrivateKey {
		return false
	}
	if this.ClientSecret != that.ClientSecret {
		return false
	}
	if this.WebhookSecret != that.WebhookSecret {
		return false
	}
	if this.GithubOrganization != that.GithubOrganization {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CreateGitHubAppReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CreateGitHubAppReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CreateGitHubAppResp) StableEqualVT(that *CreateGitHubAppResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.IntegrationId != that.IntegrationId {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CreateGitHubAppResp) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CreateGitHubAppResp)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *CreateGitHubAppResp) EqualVT(that *CreateGitHubAppResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.IntegrationId != that.IntegrationId {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CreateGitHubAppResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CreateGitHubAppResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *InstallGitHubReq) StableEqualVT(that *InstallGitHubReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.InstallationId != that.InstallationId {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *InstallGitHubReq) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*InstallGitHubReq)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *InstallGitHubReq) EqualVT(that *InstallGitHubReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.InstallationId != that.InstallationId {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *InstallGitHubReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*InstallGitHubReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *InstallGitHubResp) StableEqualVT(that *InstallGitHubResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *InstallGitHubResp) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*InstallGitHubResp)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *InstallGitHubResp) EqualVT(that *InstallGitHubResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *InstallGitHubResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*InstallGitHubResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Integration) StableEqualVT(that *Integration) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Id != that.Id {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	if this.Type != that.Type {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Integration) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Integration)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *Integration) EqualVT(that *Integration) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Id != that.Id {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	if this.Type != that.Type {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Integration) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Integration)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ListIntegrationsReq) StableEqualVT(that *ListIntegrationsReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ListIntegrationsReq) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ListIntegrationsReq)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ListIntegrationsReq) EqualVT(that *ListIntegrationsReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ListIntegrationsReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ListIntegrationsReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ListIntegrationsResp) StableEqualVT(that *ListIntegrationsResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Integrations) != len(that.Integrations) {
		return false
	}
	for i, vx := range this.Integrations {
		vy := that.Integrations[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Integration{}
			}
			if q == nil {
				q = &Integration{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ListIntegrationsResp) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ListIntegrationsResp)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ListIntegrationsResp) EqualVT(that *ListIntegrationsResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Integrations) != len(that.Integrations) {
		return false
	}
	for i, vx := range this.Integrations {
		vy := that.Integrations[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Integration{}
			}
			if q == nil {
				q = &Integration{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ListIntegrationsResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ListIntegrationsResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *DeleteIntegrationReq) StableEqualVT(that *DeleteIntegrationReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.IntegrationId != that.IntegrationId {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *DeleteIntegrationReq) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*DeleteIntegrationReq)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *DeleteIntegrationReq) EqualVT(that *DeleteIntegrationReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.IntegrationId != that.IntegrationId {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *DeleteIntegrationReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*DeleteIntegrationReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *DeleteIntegrationResp) StableEqualVT(that *DeleteIntegrationResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *DeleteIntegrationResp) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*DeleteIntegrationResp)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *DeleteIntegrationResp) EqualVT(that *DeleteIntegrationResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *DeleteIntegrationResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*DeleteIntegrationResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *GetInstallGitHubUrlReq) StableEqualVT(that *GetInstallGitHubUrlReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.GithubOrg != that.GithubOrg {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetInstallGitHubUrlReq) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetInstallGitHubUrlReq)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *GetInstallGitHubUrlReq) EqualVT(that *GetInstallGitHubUrlReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.GithubOrg != that.GithubOrg {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetInstallGitHubUrlReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetInstallGitHubUrlReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *GetInstallGitHubUrlResp) StableEqualVT(that *GetInstallGitHubUrlResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Url != that.Url {
		return false
	}
	if this.Manifest != that.Manifest {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetInstallGitHubUrlResp) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetInstallGitHubUrlResp)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *GetInstallGitHubUrlResp) EqualVT(that *GetInstallGitHubUrlResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Url != that.Url {
		return false
	}
	if this.Manifest != that.Manifest {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetInstallGitHubUrlResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetInstallGitHubUrlResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
