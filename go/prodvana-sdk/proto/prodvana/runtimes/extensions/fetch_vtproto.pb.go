// Code generated by protoc-gen-go-vtproto. DO NOT EDIT.
// protoc-gen-go-vtproto version: v0.6.0
// source: prodvana/runtimes/extensions/fetch.proto

package extensions

import (
	common_config "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/common_config"
	runtimes "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/runtimes"
	proto "google.golang.org/protobuf/proto"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

func (m *ExternalObjectVersion) CloneVT() *ExternalObjectVersion {
	if m == nil {
		return (*ExternalObjectVersion)(nil)
	}
	r := new(ExternalObjectVersion)
	r.Version = m.Version
	r.Replicas = m.Replicas
	r.AvailableReplicas = m.AvailableReplicas
	r.TargetReplicas = m.TargetReplicas
	r.Active = m.Active
	r.Drifted = m.Drifted
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ExternalObjectVersion) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ExternalObject) CloneVT() *ExternalObject {
	if m == nil {
		return (*ExternalObject)(nil)
	}
	r := new(ExternalObject)
	r.Name = m.Name
	r.ObjectType = m.ObjectType
	r.Status = m.Status
	r.Message = m.Message
	if rhs := m.Versions; rhs != nil {
		tmpContainer := make([]*ExternalObjectVersion, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Versions = tmpContainer
	}
	if rhs := m.ExternalLinks; rhs != nil {
		tmpContainer := make([]*common_config.ExternalLink, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.ExternalLinks = tmpContainer
	}
	if rhs := m.DebugEvents; rhs != nil {
		tmpContainer := make([]*runtimes.DebugEvent, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.DebugEvents = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ExternalObject) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *FetchOutput) CloneVT() *FetchOutput {
	if m == nil {
		return (*FetchOutput)(nil)
	}
	r := new(FetchOutput)
	if rhs := m.Objects; rhs != nil {
		tmpContainer := make([]*ExternalObject, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Objects = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *FetchOutput) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (this *ExternalObjectVersion) StableEqualVT(that *ExternalObjectVersion) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Version != that.Version {
		return false
	}
	if this.Replicas != that.Replicas {
		return false
	}
	if this.Active != that.Active {
		return false
	}
	if this.Drifted != that.Drifted {
		return false
	}
	if this.AvailableReplicas != that.AvailableReplicas {
		return false
	}
	if this.TargetReplicas != that.TargetReplicas {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ExternalObjectVersion) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ExternalObjectVersion)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ExternalObjectVersion) EqualVT(that *ExternalObjectVersion) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Version != that.Version {
		return false
	}
	if this.Replicas != that.Replicas {
		return false
	}
	if this.Active != that.Active {
		return false
	}
	if this.Drifted != that.Drifted {
		return false
	}
	if this.AvailableReplicas != that.AvailableReplicas {
		return false
	}
	if this.TargetReplicas != that.TargetReplicas {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ExternalObjectVersion) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ExternalObjectVersion)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ExternalObject) StableEqualVT(that *ExternalObject) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	if this.ObjectType != that.ObjectType {
		return false
	}
	if len(this.Versions) != len(that.Versions) {
		return false
	}
	for i, vx := range this.Versions {
		vy := that.Versions[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &ExternalObjectVersion{}
			}
			if q == nil {
				q = &ExternalObjectVersion{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if this.Status != that.Status {
		return false
	}
	if len(this.ExternalLinks) != len(that.ExternalLinks) {
		return false
	}
	for i, vx := range this.ExternalLinks {
		vy := that.ExternalLinks[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &common_config.ExternalLink{}
			}
			if q == nil {
				q = &common_config.ExternalLink{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if this.Message != that.Message {
		return false
	}
	if len(this.DebugEvents) != len(that.DebugEvents) {
		return false
	}
	for i, vx := range this.DebugEvents {
		vy := that.DebugEvents[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &runtimes.DebugEvent{}
			}
			if q == nil {
				q = &runtimes.DebugEvent{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ExternalObject) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ExternalObject)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ExternalObject) EqualVT(that *ExternalObject) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	if this.ObjectType != that.ObjectType {
		return false
	}
	if len(this.Versions) != len(that.Versions) {
		return false
	}
	for i, vx := range this.Versions {
		vy := that.Versions[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &ExternalObjectVersion{}
			}
			if q == nil {
				q = &ExternalObjectVersion{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if this.Status != that.Status {
		return false
	}
	if len(this.ExternalLinks) != len(that.ExternalLinks) {
		return false
	}
	for i, vx := range this.ExternalLinks {
		vy := that.ExternalLinks[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &common_config.ExternalLink{}
			}
			if q == nil {
				q = &common_config.ExternalLink{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if this.Message != that.Message {
		return false
	}
	if len(this.DebugEvents) != len(that.DebugEvents) {
		return false
	}
	for i, vx := range this.DebugEvents {
		vy := that.DebugEvents[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &runtimes.DebugEvent{}
			}
			if q == nil {
				q = &runtimes.DebugEvent{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ExternalObject) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ExternalObject)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *FetchOutput) StableEqualVT(that *FetchOutput) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Objects) != len(that.Objects) {
		return false
	}
	for i, vx := range this.Objects {
		vy := that.Objects[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &ExternalObject{}
			}
			if q == nil {
				q = &ExternalObject{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *FetchOutput) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*FetchOutput)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *FetchOutput) EqualVT(that *FetchOutput) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Objects) != len(that.Objects) {
		return false
	}
	for i, vx := range this.Objects {
		vy := that.Objects[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &ExternalObject{}
			}
			if q == nil {
				q = &ExternalObject{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *FetchOutput) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*FetchOutput)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
