// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: prodvana/runtimes/extensions/fetch.proto

package extensions

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ExternalObjectVersion with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExternalObjectVersion) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExternalObjectVersion with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExternalObjectVersionMultiError, or nil if none found.
func (m *ExternalObjectVersion) ValidateAll() error {
	return m.validate(true)
}

func (m *ExternalObjectVersion) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	// no validation rules for Replicas

	// no validation rules for AvailableReplicas

	// no validation rules for TargetReplicas

	// no validation rules for Active

	// no validation rules for Drifted

	if len(errors) > 0 {
		return ExternalObjectVersionMultiError(errors)
	}

	return nil
}

// ExternalObjectVersionMultiError is an error wrapping multiple validation
// errors returned by ExternalObjectVersion.ValidateAll() if the designated
// constraints aren't met.
type ExternalObjectVersionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExternalObjectVersionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExternalObjectVersionMultiError) AllErrors() []error { return m }

// ExternalObjectVersionValidationError is the validation error returned by
// ExternalObjectVersion.Validate if the designated constraints aren't met.
type ExternalObjectVersionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExternalObjectVersionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExternalObjectVersionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExternalObjectVersionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExternalObjectVersionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExternalObjectVersionValidationError) ErrorName() string {
	return "ExternalObjectVersionValidationError"
}

// Error satisfies the builtin error interface
func (e ExternalObjectVersionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExternalObjectVersion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExternalObjectVersionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExternalObjectVersionValidationError{}

// Validate checks the field values on ExternalObject with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ExternalObject) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExternalObject with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExternalObjectMultiError,
// or nil if none found.
func (m *ExternalObject) ValidateAll() error {
	return m.validate(true)
}

func (m *ExternalObject) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for ObjectType

	for idx, item := range m.GetVersions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExternalObjectValidationError{
						field:  fmt.Sprintf("Versions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExternalObjectValidationError{
						field:  fmt.Sprintf("Versions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExternalObjectValidationError{
					field:  fmt.Sprintf("Versions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Status

	if len(errors) > 0 {
		return ExternalObjectMultiError(errors)
	}

	return nil
}

// ExternalObjectMultiError is an error wrapping multiple validation errors
// returned by ExternalObject.ValidateAll() if the designated constraints
// aren't met.
type ExternalObjectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExternalObjectMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExternalObjectMultiError) AllErrors() []error { return m }

// ExternalObjectValidationError is the validation error returned by
// ExternalObject.Validate if the designated constraints aren't met.
type ExternalObjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExternalObjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExternalObjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExternalObjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExternalObjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExternalObjectValidationError) ErrorName() string { return "ExternalObjectValidationError" }

// Error satisfies the builtin error interface
func (e ExternalObjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExternalObject.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExternalObjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExternalObjectValidationError{}

// Validate checks the field values on FetchOutput with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FetchOutput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FetchOutput with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FetchOutputMultiError, or
// nil if none found.
func (m *FetchOutput) ValidateAll() error {
	return m.validate(true)
}

func (m *FetchOutput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetObjects() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FetchOutputValidationError{
						field:  fmt.Sprintf("Objects[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FetchOutputValidationError{
						field:  fmt.Sprintf("Objects[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FetchOutputValidationError{
					field:  fmt.Sprintf("Objects[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FetchOutputMultiError(errors)
	}

	return nil
}

// FetchOutputMultiError is an error wrapping multiple validation errors
// returned by FetchOutput.ValidateAll() if the designated constraints aren't met.
type FetchOutputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FetchOutputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FetchOutputMultiError) AllErrors() []error { return m }

// FetchOutputValidationError is the validation error returned by
// FetchOutput.Validate if the designated constraints aren't met.
type FetchOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FetchOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FetchOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FetchOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FetchOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FetchOutputValidationError) ErrorName() string { return "FetchOutputValidationError" }

// Error satisfies the builtin error interface
func (e FetchOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFetchOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FetchOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FetchOutputValidationError{}
