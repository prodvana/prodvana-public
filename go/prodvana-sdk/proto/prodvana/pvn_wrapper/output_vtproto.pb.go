// Code generated by protoc-gen-go-vtproto. DO NOT EDIT.
// protoc-gen-go-vtproto version: v0.6.0
// source: prodvana/pvn_wrapper/output.proto

package pvn_wrapper

import (
	proto "google.golang.org/protobuf/proto"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

func (m *Output) CloneVT() *Output {
	if m == nil {
		return (*Output)(nil)
	}
	r := new(Output)
	r.ExitCode = m.ExitCode
	r.ExecError = m.ExecError
	r.StdoutBlobId = m.StdoutBlobId
	r.StderrBlobId = m.StderrBlobId
	r.Version = m.Version
	r.StartTimestampNs = m.StartTimestampNs
	r.DurationNs = m.DurationNs
	r.Hostname = m.Hostname
	if rhs := m.Files; rhs != nil {
		tmpContainer := make([]*OutputFile, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Files = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Output) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *OutputFile) CloneVT() *OutputFile {
	if m == nil {
		return (*OutputFile)(nil)
	}
	r := new(OutputFile)
	r.Name = m.Name
	r.ContentBlobId = m.ContentBlobId
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *OutputFile) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (this *Output) StableEqualVT(that *Output) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.ExitCode != that.ExitCode {
		return false
	}
	if this.ExecError != that.ExecError {
		return false
	}
	if this.StdoutBlobId != that.StdoutBlobId {
		return false
	}
	if this.StderrBlobId != that.StderrBlobId {
		return false
	}
	if this.Version != that.Version {
		return false
	}
	if this.StartTimestampNs != that.StartTimestampNs {
		return false
	}
	if this.DurationNs != that.DurationNs {
		return false
	}
	if len(this.Files) != len(that.Files) {
		return false
	}
	for i, vx := range this.Files {
		vy := that.Files[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &OutputFile{}
			}
			if q == nil {
				q = &OutputFile{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if this.Hostname != that.Hostname {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Output) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Output)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *Output) EqualVT(that *Output) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.ExitCode != that.ExitCode {
		return false
	}
	if this.ExecError != that.ExecError {
		return false
	}
	if this.StdoutBlobId != that.StdoutBlobId {
		return false
	}
	if this.StderrBlobId != that.StderrBlobId {
		return false
	}
	if this.Version != that.Version {
		return false
	}
	if this.StartTimestampNs != that.StartTimestampNs {
		return false
	}
	if this.DurationNs != that.DurationNs {
		return false
	}
	if len(this.Files) != len(that.Files) {
		return false
	}
	for i, vx := range this.Files {
		vy := that.Files[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &OutputFile{}
			}
			if q == nil {
				q = &OutputFile{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if this.Hostname != that.Hostname {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Output) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Output)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *OutputFile) StableEqualVT(that *OutputFile) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	if this.ContentBlobId != that.ContentBlobId {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *OutputFile) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*OutputFile)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *OutputFile) EqualVT(that *OutputFile) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	if this.ContentBlobId != that.ContentBlobId {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *OutputFile) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*OutputFile)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
