// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: prodvana/delivery_module/manager.proto

package delivery_module

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	version "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/version"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = version.Source(0)
)

// Validate checks the field values on ConfigureDeliveryModuleReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfigureDeliveryModuleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigureDeliveryModuleReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfigureDeliveryModuleReqMultiError, or nil if none found.
func (m *ConfigureDeliveryModuleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigureDeliveryModuleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetDeliveryModuleConfig() == nil {
		err := ConfigureDeliveryModuleReqValidationError{
			field:  "DeliveryModuleConfig",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetDeliveryModuleConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfigureDeliveryModuleReqValidationError{
					field:  "DeliveryModuleConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfigureDeliveryModuleReqValidationError{
					field:  "DeliveryModuleConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeliveryModuleConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfigureDeliveryModuleReqValidationError{
				field:  "DeliveryModuleConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Source

	if all {
		switch v := interface{}(m.GetSourceMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfigureDeliveryModuleReqValidationError{
					field:  "SourceMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfigureDeliveryModuleReqValidationError{
					field:  "SourceMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSourceMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfigureDeliveryModuleReqValidationError{
				field:  "SourceMetadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ConfigureDeliveryModuleReqMultiError(errors)
	}

	return nil
}

// ConfigureDeliveryModuleReqMultiError is an error wrapping multiple
// validation errors returned by ConfigureDeliveryModuleReq.ValidateAll() if
// the designated constraints aren't met.
type ConfigureDeliveryModuleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigureDeliveryModuleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigureDeliveryModuleReqMultiError) AllErrors() []error { return m }

// ConfigureDeliveryModuleReqValidationError is the validation error returned
// by ConfigureDeliveryModuleReq.Validate if the designated constraints aren't met.
type ConfigureDeliveryModuleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigureDeliveryModuleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigureDeliveryModuleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigureDeliveryModuleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigureDeliveryModuleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigureDeliveryModuleReqValidationError) ErrorName() string {
	return "ConfigureDeliveryModuleReqValidationError"
}

// Error satisfies the builtin error interface
func (e ConfigureDeliveryModuleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigureDeliveryModuleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigureDeliveryModuleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigureDeliveryModuleReqValidationError{}

// Validate checks the field values on ConfigureDeliveryModuleResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfigureDeliveryModuleResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigureDeliveryModuleResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfigureDeliveryModuleRespMultiError, or nil if none found.
func (m *ConfigureDeliveryModuleResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigureDeliveryModuleResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeliveryModuleId

	// no validation rules for Version

	if len(errors) > 0 {
		return ConfigureDeliveryModuleRespMultiError(errors)
	}

	return nil
}

// ConfigureDeliveryModuleRespMultiError is an error wrapping multiple
// validation errors returned by ConfigureDeliveryModuleResp.ValidateAll() if
// the designated constraints aren't met.
type ConfigureDeliveryModuleRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigureDeliveryModuleRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigureDeliveryModuleRespMultiError) AllErrors() []error { return m }

// ConfigureDeliveryModuleRespValidationError is the validation error returned
// by ConfigureDeliveryModuleResp.Validate if the designated constraints
// aren't met.
type ConfigureDeliveryModuleRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigureDeliveryModuleRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigureDeliveryModuleRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigureDeliveryModuleRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigureDeliveryModuleRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigureDeliveryModuleRespValidationError) ErrorName() string {
	return "ConfigureDeliveryModuleRespValidationError"
}

// Error satisfies the builtin error interface
func (e ConfigureDeliveryModuleRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigureDeliveryModuleResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigureDeliveryModuleRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigureDeliveryModuleRespValidationError{}

// Validate checks the field values on ValidateConfigureDeliveryModuleResp with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ValidateConfigureDeliveryModuleResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidateConfigureDeliveryModuleResp
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ValidateConfigureDeliveryModuleRespMultiError, or nil if none found.
func (m *ValidateConfigureDeliveryModuleResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidateConfigureDeliveryModuleResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ValidateConfigureDeliveryModuleRespMultiError(errors)
	}

	return nil
}

// ValidateConfigureDeliveryModuleRespMultiError is an error wrapping multiple
// validation errors returned by
// ValidateConfigureDeliveryModuleResp.ValidateAll() if the designated
// constraints aren't met.
type ValidateConfigureDeliveryModuleRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidateConfigureDeliveryModuleRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidateConfigureDeliveryModuleRespMultiError) AllErrors() []error { return m }

// ValidateConfigureDeliveryModuleRespValidationError is the validation error
// returned by ValidateConfigureDeliveryModuleResp.Validate if the designated
// constraints aren't met.
type ValidateConfigureDeliveryModuleRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateConfigureDeliveryModuleRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateConfigureDeliveryModuleRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateConfigureDeliveryModuleRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateConfigureDeliveryModuleRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateConfigureDeliveryModuleRespValidationError) ErrorName() string {
	return "ValidateConfigureDeliveryModuleRespValidationError"
}

// Error satisfies the builtin error interface
func (e ValidateConfigureDeliveryModuleRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateConfigureDeliveryModuleResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateConfigureDeliveryModuleRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateConfigureDeliveryModuleRespValidationError{}

// Validate checks the field values on ListDeliveryModulesReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDeliveryModulesReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDeliveryModulesReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDeliveryModulesReqMultiError, or nil if none found.
func (m *ListDeliveryModulesReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDeliveryModulesReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListDeliveryModulesReqMultiError(errors)
	}

	return nil
}

// ListDeliveryModulesReqMultiError is an error wrapping multiple validation
// errors returned by ListDeliveryModulesReq.ValidateAll() if the designated
// constraints aren't met.
type ListDeliveryModulesReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDeliveryModulesReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDeliveryModulesReqMultiError) AllErrors() []error { return m }

// ListDeliveryModulesReqValidationError is the validation error returned by
// ListDeliveryModulesReq.Validate if the designated constraints aren't met.
type ListDeliveryModulesReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDeliveryModulesReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDeliveryModulesReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDeliveryModulesReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDeliveryModulesReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDeliveryModulesReqValidationError) ErrorName() string {
	return "ListDeliveryModulesReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListDeliveryModulesReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDeliveryModulesReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDeliveryModulesReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDeliveryModulesReqValidationError{}

// Validate checks the field values on ListDeliveryModulesResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDeliveryModulesResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDeliveryModulesResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDeliveryModulesRespMultiError, or nil if none found.
func (m *ListDeliveryModulesResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDeliveryModulesResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDeliveryModules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDeliveryModulesRespValidationError{
						field:  fmt.Sprintf("DeliveryModules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDeliveryModulesRespValidationError{
						field:  fmt.Sprintf("DeliveryModules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDeliveryModulesRespValidationError{
					field:  fmt.Sprintf("DeliveryModules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListDeliveryModulesRespMultiError(errors)
	}

	return nil
}

// ListDeliveryModulesRespMultiError is an error wrapping multiple validation
// errors returned by ListDeliveryModulesResp.ValidateAll() if the designated
// constraints aren't met.
type ListDeliveryModulesRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDeliveryModulesRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDeliveryModulesRespMultiError) AllErrors() []error { return m }

// ListDeliveryModulesRespValidationError is the validation error returned by
// ListDeliveryModulesResp.Validate if the designated constraints aren't met.
type ListDeliveryModulesRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDeliveryModulesRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDeliveryModulesRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDeliveryModulesRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDeliveryModulesRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDeliveryModulesRespValidationError) ErrorName() string {
	return "ListDeliveryModulesRespValidationError"
}

// Error satisfies the builtin error interface
func (e ListDeliveryModulesRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDeliveryModulesResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDeliveryModulesRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDeliveryModulesRespValidationError{}

// Validate checks the field values on GetDeliveryModuleReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDeliveryModuleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDeliveryModuleReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDeliveryModuleReqMultiError, or nil if none found.
func (m *GetDeliveryModuleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDeliveryModuleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDeliveryModule()) < 1 {
		err := GetDeliveryModuleReqValidationError{
			field:  "DeliveryModule",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetDeliveryModuleReqMultiError(errors)
	}

	return nil
}

// GetDeliveryModuleReqMultiError is an error wrapping multiple validation
// errors returned by GetDeliveryModuleReq.ValidateAll() if the designated
// constraints aren't met.
type GetDeliveryModuleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDeliveryModuleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDeliveryModuleReqMultiError) AllErrors() []error { return m }

// GetDeliveryModuleReqValidationError is the validation error returned by
// GetDeliveryModuleReq.Validate if the designated constraints aren't met.
type GetDeliveryModuleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDeliveryModuleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDeliveryModuleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDeliveryModuleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDeliveryModuleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDeliveryModuleReqValidationError) ErrorName() string {
	return "GetDeliveryModuleReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetDeliveryModuleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDeliveryModuleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDeliveryModuleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDeliveryModuleReqValidationError{}

// Validate checks the field values on GetDeliveryModuleResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDeliveryModuleResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDeliveryModuleResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDeliveryModuleRespMultiError, or nil if none found.
func (m *GetDeliveryModuleResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDeliveryModuleResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDeliveryModule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDeliveryModuleRespValidationError{
					field:  "DeliveryModule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDeliveryModuleRespValidationError{
					field:  "DeliveryModule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeliveryModule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDeliveryModuleRespValidationError{
				field:  "DeliveryModule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDeliveryModuleRespMultiError(errors)
	}

	return nil
}

// GetDeliveryModuleRespMultiError is an error wrapping multiple validation
// errors returned by GetDeliveryModuleResp.ValidateAll() if the designated
// constraints aren't met.
type GetDeliveryModuleRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDeliveryModuleRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDeliveryModuleRespMultiError) AllErrors() []error { return m }

// GetDeliveryModuleRespValidationError is the validation error returned by
// GetDeliveryModuleResp.Validate if the designated constraints aren't met.
type GetDeliveryModuleRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDeliveryModuleRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDeliveryModuleRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDeliveryModuleRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDeliveryModuleRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDeliveryModuleRespValidationError) ErrorName() string {
	return "GetDeliveryModuleRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetDeliveryModuleRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDeliveryModuleResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDeliveryModuleRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDeliveryModuleRespValidationError{}

// Validate checks the field values on GetDeliveryModuleConfigReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDeliveryModuleConfigReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDeliveryModuleConfigReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDeliveryModuleConfigReqMultiError, or nil if none found.
func (m *GetDeliveryModuleConfigReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDeliveryModuleConfigReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDeliveryModule()) < 1 {
		err := GetDeliveryModuleConfigReqValidationError{
			field:  "DeliveryModule",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Version

	if len(errors) > 0 {
		return GetDeliveryModuleConfigReqMultiError(errors)
	}

	return nil
}

// GetDeliveryModuleConfigReqMultiError is an error wrapping multiple
// validation errors returned by GetDeliveryModuleConfigReq.ValidateAll() if
// the designated constraints aren't met.
type GetDeliveryModuleConfigReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDeliveryModuleConfigReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDeliveryModuleConfigReqMultiError) AllErrors() []error { return m }

// GetDeliveryModuleConfigReqValidationError is the validation error returned
// by GetDeliveryModuleConfigReq.Validate if the designated constraints aren't met.
type GetDeliveryModuleConfigReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDeliveryModuleConfigReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDeliveryModuleConfigReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDeliveryModuleConfigReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDeliveryModuleConfigReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDeliveryModuleConfigReqValidationError) ErrorName() string {
	return "GetDeliveryModuleConfigReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetDeliveryModuleConfigReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDeliveryModuleConfigReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDeliveryModuleConfigReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDeliveryModuleConfigReqValidationError{}

// Validate checks the field values on GetDeliveryModuleConfigResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDeliveryModuleConfigResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDeliveryModuleConfigResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDeliveryModuleConfigRespMultiError, or nil if none found.
func (m *GetDeliveryModuleConfigResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDeliveryModuleConfigResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDeliveryModuleConfigRespValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDeliveryModuleConfigRespValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDeliveryModuleConfigRespValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Version

	if len(errors) > 0 {
		return GetDeliveryModuleConfigRespMultiError(errors)
	}

	return nil
}

// GetDeliveryModuleConfigRespMultiError is an error wrapping multiple
// validation errors returned by GetDeliveryModuleConfigResp.ValidateAll() if
// the designated constraints aren't met.
type GetDeliveryModuleConfigRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDeliveryModuleConfigRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDeliveryModuleConfigRespMultiError) AllErrors() []error { return m }

// GetDeliveryModuleConfigRespValidationError is the validation error returned
// by GetDeliveryModuleConfigResp.Validate if the designated constraints
// aren't met.
type GetDeliveryModuleConfigRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDeliveryModuleConfigRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDeliveryModuleConfigRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDeliveryModuleConfigRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDeliveryModuleConfigRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDeliveryModuleConfigRespValidationError) ErrorName() string {
	return "GetDeliveryModuleConfigRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetDeliveryModuleConfigRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDeliveryModuleConfigResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDeliveryModuleConfigRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDeliveryModuleConfigRespValidationError{}
