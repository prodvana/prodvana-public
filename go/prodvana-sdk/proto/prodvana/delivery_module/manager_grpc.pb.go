// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.10
// source: prodvana/delivery_module/manager.proto

package delivery_module

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DeliveryModuleManager_ConfigureDeliveryModule_FullMethodName         = "/prodvana.delivery_module.DeliveryModuleManager/ConfigureDeliveryModule"
	DeliveryModuleManager_ValidateConfigureDeliveryModule_FullMethodName = "/prodvana.delivery_module.DeliveryModuleManager/ValidateConfigureDeliveryModule"
	DeliveryModuleManager_ListDeliveryModules_FullMethodName             = "/prodvana.delivery_module.DeliveryModuleManager/ListDeliveryModules"
	DeliveryModuleManager_GetDeliveryModule_FullMethodName               = "/prodvana.delivery_module.DeliveryModuleManager/GetDeliveryModule"
	DeliveryModuleManager_GetDeliveryModuleConfig_FullMethodName         = "/prodvana.delivery_module.DeliveryModuleManager/GetDeliveryModuleConfig"
)

// DeliveryModuleManagerClient is the client API for DeliveryModuleManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeliveryModuleManagerClient interface {
	ConfigureDeliveryModule(ctx context.Context, in *ConfigureDeliveryModuleReq, opts ...grpc.CallOption) (*ConfigureDeliveryModuleResp, error)
	ValidateConfigureDeliveryModule(ctx context.Context, in *ConfigureDeliveryModuleReq, opts ...grpc.CallOption) (*ValidateConfigureDeliveryModuleResp, error)
	ListDeliveryModules(ctx context.Context, in *ListDeliveryModulesReq, opts ...grpc.CallOption) (*ListDeliveryModulesResp, error)
	GetDeliveryModule(ctx context.Context, in *GetDeliveryModuleReq, opts ...grpc.CallOption) (*GetDeliveryModuleResp, error)
	GetDeliveryModuleConfig(ctx context.Context, in *GetDeliveryModuleConfigReq, opts ...grpc.CallOption) (*GetDeliveryModuleConfigResp, error)
}

type deliveryModuleManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewDeliveryModuleManagerClient(cc grpc.ClientConnInterface) DeliveryModuleManagerClient {
	return &deliveryModuleManagerClient{cc}
}

func (c *deliveryModuleManagerClient) ConfigureDeliveryModule(ctx context.Context, in *ConfigureDeliveryModuleReq, opts ...grpc.CallOption) (*ConfigureDeliveryModuleResp, error) {
	out := new(ConfigureDeliveryModuleResp)
	err := c.cc.Invoke(ctx, DeliveryModuleManager_ConfigureDeliveryModule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryModuleManagerClient) ValidateConfigureDeliveryModule(ctx context.Context, in *ConfigureDeliveryModuleReq, opts ...grpc.CallOption) (*ValidateConfigureDeliveryModuleResp, error) {
	out := new(ValidateConfigureDeliveryModuleResp)
	err := c.cc.Invoke(ctx, DeliveryModuleManager_ValidateConfigureDeliveryModule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryModuleManagerClient) ListDeliveryModules(ctx context.Context, in *ListDeliveryModulesReq, opts ...grpc.CallOption) (*ListDeliveryModulesResp, error) {
	out := new(ListDeliveryModulesResp)
	err := c.cc.Invoke(ctx, DeliveryModuleManager_ListDeliveryModules_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryModuleManagerClient) GetDeliveryModule(ctx context.Context, in *GetDeliveryModuleReq, opts ...grpc.CallOption) (*GetDeliveryModuleResp, error) {
	out := new(GetDeliveryModuleResp)
	err := c.cc.Invoke(ctx, DeliveryModuleManager_GetDeliveryModule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryModuleManagerClient) GetDeliveryModuleConfig(ctx context.Context, in *GetDeliveryModuleConfigReq, opts ...grpc.CallOption) (*GetDeliveryModuleConfigResp, error) {
	out := new(GetDeliveryModuleConfigResp)
	err := c.cc.Invoke(ctx, DeliveryModuleManager_GetDeliveryModuleConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeliveryModuleManagerServer is the server API for DeliveryModuleManager service.
// All implementations must embed UnimplementedDeliveryModuleManagerServer
// for forward compatibility
type DeliveryModuleManagerServer interface {
	ConfigureDeliveryModule(context.Context, *ConfigureDeliveryModuleReq) (*ConfigureDeliveryModuleResp, error)
	ValidateConfigureDeliveryModule(context.Context, *ConfigureDeliveryModuleReq) (*ValidateConfigureDeliveryModuleResp, error)
	ListDeliveryModules(context.Context, *ListDeliveryModulesReq) (*ListDeliveryModulesResp, error)
	GetDeliveryModule(context.Context, *GetDeliveryModuleReq) (*GetDeliveryModuleResp, error)
	GetDeliveryModuleConfig(context.Context, *GetDeliveryModuleConfigReq) (*GetDeliveryModuleConfigResp, error)
	mustEmbedUnimplementedDeliveryModuleManagerServer()
}

// UnimplementedDeliveryModuleManagerServer must be embedded to have forward compatible implementations.
type UnimplementedDeliveryModuleManagerServer struct {
}

func (UnimplementedDeliveryModuleManagerServer) ConfigureDeliveryModule(context.Context, *ConfigureDeliveryModuleReq) (*ConfigureDeliveryModuleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureDeliveryModule not implemented")
}
func (UnimplementedDeliveryModuleManagerServer) ValidateConfigureDeliveryModule(context.Context, *ConfigureDeliveryModuleReq) (*ValidateConfigureDeliveryModuleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateConfigureDeliveryModule not implemented")
}
func (UnimplementedDeliveryModuleManagerServer) ListDeliveryModules(context.Context, *ListDeliveryModulesReq) (*ListDeliveryModulesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeliveryModules not implemented")
}
func (UnimplementedDeliveryModuleManagerServer) GetDeliveryModule(context.Context, *GetDeliveryModuleReq) (*GetDeliveryModuleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeliveryModule not implemented")
}
func (UnimplementedDeliveryModuleManagerServer) GetDeliveryModuleConfig(context.Context, *GetDeliveryModuleConfigReq) (*GetDeliveryModuleConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeliveryModuleConfig not implemented")
}
func (UnimplementedDeliveryModuleManagerServer) mustEmbedUnimplementedDeliveryModuleManagerServer() {}

// UnsafeDeliveryModuleManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeliveryModuleManagerServer will
// result in compilation errors.
type UnsafeDeliveryModuleManagerServer interface {
	mustEmbedUnimplementedDeliveryModuleManagerServer()
}

func RegisterDeliveryModuleManagerServer(s grpc.ServiceRegistrar, srv DeliveryModuleManagerServer) {
	s.RegisterService(&DeliveryModuleManager_ServiceDesc, srv)
}

func _DeliveryModuleManager_ConfigureDeliveryModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureDeliveryModuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryModuleManagerServer).ConfigureDeliveryModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliveryModuleManager_ConfigureDeliveryModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryModuleManagerServer).ConfigureDeliveryModule(ctx, req.(*ConfigureDeliveryModuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryModuleManager_ValidateConfigureDeliveryModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureDeliveryModuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryModuleManagerServer).ValidateConfigureDeliveryModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliveryModuleManager_ValidateConfigureDeliveryModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryModuleManagerServer).ValidateConfigureDeliveryModule(ctx, req.(*ConfigureDeliveryModuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryModuleManager_ListDeliveryModules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeliveryModulesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryModuleManagerServer).ListDeliveryModules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliveryModuleManager_ListDeliveryModules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryModuleManagerServer).ListDeliveryModules(ctx, req.(*ListDeliveryModulesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryModuleManager_GetDeliveryModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeliveryModuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryModuleManagerServer).GetDeliveryModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliveryModuleManager_GetDeliveryModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryModuleManagerServer).GetDeliveryModule(ctx, req.(*GetDeliveryModuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryModuleManager_GetDeliveryModuleConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeliveryModuleConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryModuleManagerServer).GetDeliveryModuleConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliveryModuleManager_GetDeliveryModuleConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryModuleManagerServer).GetDeliveryModuleConfig(ctx, req.(*GetDeliveryModuleConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DeliveryModuleManager_ServiceDesc is the grpc.ServiceDesc for DeliveryModuleManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeliveryModuleManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "prodvana.delivery_module.DeliveryModuleManager",
	HandlerType: (*DeliveryModuleManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConfigureDeliveryModule",
			Handler:    _DeliveryModuleManager_ConfigureDeliveryModule_Handler,
		},
		{
			MethodName: "ValidateConfigureDeliveryModule",
			Handler:    _DeliveryModuleManager_ValidateConfigureDeliveryModule_Handler,
		},
		{
			MethodName: "ListDeliveryModules",
			Handler:    _DeliveryModuleManager_ListDeliveryModules_Handler,
		},
		{
			MethodName: "GetDeliveryModule",
			Handler:    _DeliveryModuleManager_GetDeliveryModule_Handler,
		},
		{
			MethodName: "GetDeliveryModuleConfig",
			Handler:    _DeliveryModuleManager_GetDeliveryModuleConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "prodvana/delivery_module/manager.proto",
}
