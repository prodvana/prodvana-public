// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: prodvana/delivery_module/config.proto

package delivery_module

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DeliveryModuleConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeliveryModuleConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeliveryModuleConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeliveryModuleConfigMultiError, or nil if none found.
func (m *DeliveryModuleConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *DeliveryModuleConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 63 {
		err := DeliveryModuleConfigValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 63 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_DeliveryModuleConfig_Name_Pattern.MatchString(m.GetName()) {
		err := DeliveryModuleConfigValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[a-z]([a-z0-9-]*[a-z0-9]){0,1}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetParameters() {
		_, _ = idx, item

		if item == nil {
			err := DeliveryModuleConfigValidationError{
				field:  fmt.Sprintf("Parameters[%v]", idx),
				reason: "value is required",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeliveryModuleConfigValidationError{
						field:  fmt.Sprintf("Parameters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeliveryModuleConfigValidationError{
						field:  fmt.Sprintf("Parameters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeliveryModuleConfigValidationError{
					field:  fmt.Sprintf("Parameters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	oneofExecConfigPresent := false
	switch v := m.ExecConfig.(type) {
	case *DeliveryModuleConfig_TaskConfig:
		if v == nil {
			err := DeliveryModuleConfigValidationError{
				field:  "ExecConfig",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofExecConfigPresent = true

		if all {
			switch v := interface{}(m.GetTaskConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeliveryModuleConfigValidationError{
						field:  "TaskConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeliveryModuleConfigValidationError{
						field:  "TaskConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTaskConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeliveryModuleConfigValidationError{
					field:  "TaskConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *DeliveryModuleConfig_ExternalConfig:
		if v == nil {
			err := DeliveryModuleConfigValidationError{
				field:  "ExecConfig",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofExecConfigPresent = true

		if all {
			switch v := interface{}(m.GetExternalConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeliveryModuleConfigValidationError{
						field:  "ExternalConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeliveryModuleConfigValidationError{
						field:  "ExternalConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExternalConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeliveryModuleConfigValidationError{
					field:  "ExternalConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofExecConfigPresent {
		err := DeliveryModuleConfigValidationError{
			field:  "ExecConfig",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeliveryModuleConfigMultiError(errors)
	}

	return nil
}

// DeliveryModuleConfigMultiError is an error wrapping multiple validation
// errors returned by DeliveryModuleConfig.ValidateAll() if the designated
// constraints aren't met.
type DeliveryModuleConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeliveryModuleConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeliveryModuleConfigMultiError) AllErrors() []error { return m }

// DeliveryModuleConfigValidationError is the validation error returned by
// DeliveryModuleConfig.Validate if the designated constraints aren't met.
type DeliveryModuleConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeliveryModuleConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeliveryModuleConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeliveryModuleConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeliveryModuleConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeliveryModuleConfigValidationError) ErrorName() string {
	return "DeliveryModuleConfigValidationError"
}

// Error satisfies the builtin error interface
func (e DeliveryModuleConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeliveryModuleConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeliveryModuleConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeliveryModuleConfigValidationError{}

var _DeliveryModuleConfig_Name_Pattern = regexp.MustCompile("^[a-z]([a-z0-9-]*[a-z0-9]){0,1}$")

// Validate checks the field values on DeliveryModuleInstanceConfig with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeliveryModuleInstanceConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeliveryModuleInstanceConfig with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeliveryModuleInstanceConfigMultiError, or nil if none found.
func (m *DeliveryModuleInstanceConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *DeliveryModuleInstanceConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 63 {
		err := DeliveryModuleInstanceConfigValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 63 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_DeliveryModuleInstanceConfig_Name_Pattern.MatchString(m.GetName()) {
		err := DeliveryModuleInstanceConfigValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[a-z]([a-z0-9-]*[a-z0-9]){0,1}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetParameters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeliveryModuleInstanceConfigValidationError{
						field:  fmt.Sprintf("Parameters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeliveryModuleInstanceConfigValidationError{
						field:  fmt.Sprintf("Parameters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeliveryModuleInstanceConfigValidationError{
					field:  fmt.Sprintf("Parameters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DeliveryModuleInstanceConfigMultiError(errors)
	}

	return nil
}

// DeliveryModuleInstanceConfigMultiError is an error wrapping multiple
// validation errors returned by DeliveryModuleInstanceConfig.ValidateAll() if
// the designated constraints aren't met.
type DeliveryModuleInstanceConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeliveryModuleInstanceConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeliveryModuleInstanceConfigMultiError) AllErrors() []error { return m }

// DeliveryModuleInstanceConfigValidationError is the validation error returned
// by DeliveryModuleInstanceConfig.Validate if the designated constraints
// aren't met.
type DeliveryModuleInstanceConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeliveryModuleInstanceConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeliveryModuleInstanceConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeliveryModuleInstanceConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeliveryModuleInstanceConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeliveryModuleInstanceConfigValidationError) ErrorName() string {
	return "DeliveryModuleInstanceConfigValidationError"
}

// Error satisfies the builtin error interface
func (e DeliveryModuleInstanceConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeliveryModuleInstanceConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeliveryModuleInstanceConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeliveryModuleInstanceConfigValidationError{}

var _DeliveryModuleInstanceConfig_Name_Pattern = regexp.MustCompile("^[a-z]([a-z0-9-]*[a-z0-9]){0,1}$")

// Validate checks the field values on CompiledDeliveryModuleInstanceConfig
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CompiledDeliveryModuleInstanceConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompiledDeliveryModuleInstanceConfig
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CompiledDeliveryModuleInstanceConfigMultiError, or nil if none found.
func (m *CompiledDeliveryModuleInstanceConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *CompiledDeliveryModuleInstanceConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDefinition()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CompiledDeliveryModuleInstanceConfigValidationError{
					field:  "Definition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CompiledDeliveryModuleInstanceConfigValidationError{
					field:  "Definition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDefinition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompiledDeliveryModuleInstanceConfigValidationError{
				field:  "Definition",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRuntimeExecution()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CompiledDeliveryModuleInstanceConfigValidationError{
					field:  "RuntimeExecution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CompiledDeliveryModuleInstanceConfigValidationError{
					field:  "RuntimeExecution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRuntimeExecution()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompiledDeliveryModuleInstanceConfigValidationError{
				field:  "RuntimeExecution",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	{
		sorted_keys := make([]string, len(m.GetEnv()))
		i := 0
		for key := range m.GetEnv() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetEnv()[key]
			_ = val

			if val == nil {
				err := CompiledDeliveryModuleInstanceConfigValidationError{
					field:  fmt.Sprintf("Env[%v]", key),
					reason: "value cannot be sparse, all pairs must be non-nil",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			if !_CompiledDeliveryModuleInstanceConfig_Env_Pattern.MatchString(key) {
				err := CompiledDeliveryModuleInstanceConfigValidationError{
					field:  fmt.Sprintf("Env[%v]", key),
					reason: "value does not match regex pattern \"^[a-zA-Z_]+[a-zA-Z0-9_]*$\"",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, CompiledDeliveryModuleInstanceConfigValidationError{
							field:  fmt.Sprintf("Env[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, CompiledDeliveryModuleInstanceConfigValidationError{
							field:  fmt.Sprintf("Env[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return CompiledDeliveryModuleInstanceConfigValidationError{
						field:  fmt.Sprintf("Env[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	for idx, item := range m.GetParameterValues() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CompiledDeliveryModuleInstanceConfigValidationError{
						field:  fmt.Sprintf("ParameterValues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CompiledDeliveryModuleInstanceConfigValidationError{
						field:  fmt.Sprintf("ParameterValues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CompiledDeliveryModuleInstanceConfigValidationError{
					field:  fmt.Sprintf("ParameterValues[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CompiledDeliveryModuleInstanceConfigMultiError(errors)
	}

	return nil
}

// CompiledDeliveryModuleInstanceConfigMultiError is an error wrapping multiple
// validation errors returned by
// CompiledDeliveryModuleInstanceConfig.ValidateAll() if the designated
// constraints aren't met.
type CompiledDeliveryModuleInstanceConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompiledDeliveryModuleInstanceConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompiledDeliveryModuleInstanceConfigMultiError) AllErrors() []error { return m }

// CompiledDeliveryModuleInstanceConfigValidationError is the validation error
// returned by CompiledDeliveryModuleInstanceConfig.Validate if the designated
// constraints aren't met.
type CompiledDeliveryModuleInstanceConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompiledDeliveryModuleInstanceConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompiledDeliveryModuleInstanceConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompiledDeliveryModuleInstanceConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompiledDeliveryModuleInstanceConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompiledDeliveryModuleInstanceConfigValidationError) ErrorName() string {
	return "CompiledDeliveryModuleInstanceConfigValidationError"
}

// Error satisfies the builtin error interface
func (e CompiledDeliveryModuleInstanceConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompiledDeliveryModuleInstanceConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompiledDeliveryModuleInstanceConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompiledDeliveryModuleInstanceConfigValidationError{}

var _CompiledDeliveryModuleInstanceConfig_Env_Pattern = regexp.MustCompile("^[a-zA-Z_]+[a-zA-Z0-9_]*$")
