// Code generated by protoc-gen-go-vtproto. DO NOT EDIT.
// protoc-gen-go-vtproto version: v0.6.0
// source: prodvana/delivery_extension/config.proto

package delivery_extension

import (
	common_config "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/common_config"
	proto "google.golang.org/protobuf/proto"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

func (m *DeliveryExtensionConfig) CloneVT() *DeliveryExtensionConfig {
	if m == nil {
		return (*DeliveryExtensionConfig)(nil)
	}
	r := new(DeliveryExtensionConfig)
	r.Name = m.Name
	r.RetryPolicy = m.RetryPolicy.CloneVT()
	if m.ExecConfig != nil {
		r.ExecConfig = m.ExecConfig.(interface {
			CloneVT() isDeliveryExtensionConfig_ExecConfig
		}).CloneVT()
	}
	if rhs := m.Parameters; rhs != nil {
		tmpContainer := make([]*common_config.ParameterDefinition, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Parameters = tmpContainer
	}
	if rhs := m.Env; rhs != nil {
		tmpContainer := make(map[string]*common_config.EnvValue, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Env = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *DeliveryExtensionConfig) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *DeliveryExtensionConfig_TaskConfig) CloneVT() isDeliveryExtensionConfig_ExecConfig {
	if m == nil {
		return (*DeliveryExtensionConfig_TaskConfig)(nil)
	}
	r := new(DeliveryExtensionConfig_TaskConfig)
	r.TaskConfig = m.TaskConfig.CloneVT()
	return r
}

func (m *DeliveryExtensionConfig_KubernetesConfig) CloneVT() isDeliveryExtensionConfig_ExecConfig {
	if m == nil {
		return (*DeliveryExtensionConfig_KubernetesConfig)(nil)
	}
	r := new(DeliveryExtensionConfig_KubernetesConfig)
	r.KubernetesConfig = m.KubernetesConfig.CloneVT()
	return r
}

func (m *DeliveryExtensionInstanceRef) CloneVT() *DeliveryExtensionInstanceRef {
	if m == nil {
		return (*DeliveryExtensionInstanceRef)(nil)
	}
	r := new(DeliveryExtensionInstanceRef)
	r.Name = m.Name
	if rhs := m.Parameters; rhs != nil {
		tmpContainer := make([]*common_config.ParameterValue, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Parameters = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *DeliveryExtensionInstanceRef) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CompiledDeliveryExtensionInstanceConfig) CloneVT() *CompiledDeliveryExtensionInstanceConfig {
	if m == nil {
		return (*CompiledDeliveryExtensionInstanceConfig)(nil)
	}
	r := new(CompiledDeliveryExtensionInstanceConfig)
	r.Definition = m.Definition.CloneVT()
	r.RuntimeExecution = m.RuntimeExecution.CloneVT()
	if rhs := m.Env; rhs != nil {
		tmpContainer := make(map[string]*common_config.EnvValue, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Env = tmpContainer
	}
	if rhs := m.ParameterValues; rhs != nil {
		tmpContainer := make([]*common_config.ParameterValue, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.ParameterValues = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CompiledDeliveryExtensionInstanceConfig) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (this *DeliveryExtensionConfig) EqualVT(that *DeliveryExtensionConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.ExecConfig == nil && that.ExecConfig != nil {
		return false
	} else if this.ExecConfig != nil {
		if that.ExecConfig == nil {
			return false
		}
		if !this.ExecConfig.(interface {
			EqualVT(isDeliveryExtensionConfig_ExecConfig) bool
		}).EqualVT(that.ExecConfig) {
			return false
		}
	}
	if this.Name != that.Name {
		return false
	}
	if len(this.Parameters) != len(that.Parameters) {
		return false
	}
	for i, vx := range this.Parameters {
		vy := that.Parameters[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &common_config.ParameterDefinition{}
			}
			if q == nil {
				q = &common_config.ParameterDefinition{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if len(this.Env) != len(that.Env) {
		return false
	}
	for i, vx := range this.Env {
		vy, ok := that.Env[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &common_config.EnvValue{}
			}
			if q == nil {
				q = &common_config.EnvValue{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if !this.RetryPolicy.EqualVT(that.RetryPolicy) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *DeliveryExtensionConfig) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*DeliveryExtensionConfig)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *DeliveryExtensionConfig_TaskConfig) EqualVT(thatIface isDeliveryExtensionConfig_ExecConfig) bool {
	that, ok := thatIface.(*DeliveryExtensionConfig_TaskConfig)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.TaskConfig, that.TaskConfig; p != q {
		if p == nil {
			p = &common_config.TaskConfig{}
		}
		if q == nil {
			q = &common_config.TaskConfig{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *DeliveryExtensionConfig_KubernetesConfig) EqualVT(thatIface isDeliveryExtensionConfig_ExecConfig) bool {
	that, ok := thatIface.(*DeliveryExtensionConfig_KubernetesConfig)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.KubernetesConfig, that.KubernetesConfig; p != q {
		if p == nil {
			p = &common_config.KubernetesConfig{}
		}
		if q == nil {
			q = &common_config.KubernetesConfig{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *DeliveryExtensionInstanceRef) EqualVT(that *DeliveryExtensionInstanceRef) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	if len(this.Parameters) != len(that.Parameters) {
		return false
	}
	for i, vx := range this.Parameters {
		vy := that.Parameters[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &common_config.ParameterValue{}
			}
			if q == nil {
				q = &common_config.ParameterValue{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *DeliveryExtensionInstanceRef) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*DeliveryExtensionInstanceRef)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CompiledDeliveryExtensionInstanceConfig) EqualVT(that *CompiledDeliveryExtensionInstanceConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Definition.EqualVT(that.Definition) {
		return false
	}
	if !this.RuntimeExecution.EqualVT(that.RuntimeExecution) {
		return false
	}
	if len(this.Env) != len(that.Env) {
		return false
	}
	for i, vx := range this.Env {
		vy, ok := that.Env[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &common_config.EnvValue{}
			}
			if q == nil {
				q = &common_config.EnvValue{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if len(this.ParameterValues) != len(that.ParameterValues) {
		return false
	}
	for i, vx := range this.ParameterValues {
		vy := that.ParameterValues[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &common_config.ParameterValue{}
			}
			if q == nil {
				q = &common_config.ParameterValue{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CompiledDeliveryExtensionInstanceConfig) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CompiledDeliveryExtensionInstanceConfig)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
