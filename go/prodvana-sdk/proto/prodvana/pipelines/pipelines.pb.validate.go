// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: prodvana/pipelines/pipelines.proto

package pipelines

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PushTask with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PushTask) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushTask with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PushTaskMultiError, or nil
// if none found.
func (m *PushTask) ValidateAll() error {
	return m.validate(true)
}

func (m *PushTask) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceId

	// no validation rules for Service

	// no validation rules for ReleaseChannelId

	// no validation rules for ReleaseChannel

	// no validation rules for Rollback

	// no validation rules for ApplicationId

	// no validation rules for Application

	if len(errors) > 0 {
		return PushTaskMultiError(errors)
	}

	return nil
}

// PushTaskMultiError is an error wrapping multiple validation errors returned
// by PushTask.ValidateAll() if the designated constraints aren't met.
type PushTaskMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushTaskMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushTaskMultiError) AllErrors() []error { return m }

// PushTaskValidationError is the validation error returned by
// PushTask.Validate if the designated constraints aren't met.
type PushTaskValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushTaskValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushTaskValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushTaskValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushTaskValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushTaskValidationError) ErrorName() string { return "PushTaskValidationError" }

// Error satisfies the builtin error interface
func (e PushTaskValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushTask.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushTaskValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushTaskValidationError{}

// Validate checks the field values on WaitTask with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WaitTask) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WaitTask with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WaitTaskMultiError, or nil
// if none found.
func (m *WaitTask) ValidateAll() error {
	return m.validate(true)
}

func (m *WaitTask) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetDuration() == nil {
		err := WaitTaskValidationError{
			field:  "Duration",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if d := m.GetDuration(); d != nil {
		dur, err := d.AsDuration(), d.CheckValid()
		if err != nil {
			err = WaitTaskValidationError{
				field:  "Duration",
				reason: "value is not a valid duration",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {

			gt := time.Duration(0*time.Second + 0*time.Nanosecond)

			if dur <= gt {
				err := WaitTaskValidationError{
					field:  "Duration",
					reason: "value must be greater than 0s",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if len(errors) > 0 {
		return WaitTaskMultiError(errors)
	}

	return nil
}

// WaitTaskMultiError is an error wrapping multiple validation errors returned
// by WaitTask.ValidateAll() if the designated constraints aren't met.
type WaitTaskMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WaitTaskMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WaitTaskMultiError) AllErrors() []error { return m }

// WaitTaskValidationError is the validation error returned by
// WaitTask.Validate if the designated constraints aren't met.
type WaitTaskValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WaitTaskValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WaitTaskValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WaitTaskValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WaitTaskValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WaitTaskValidationError) ErrorName() string { return "WaitTaskValidationError" }

// Error satisfies the builtin error interface
func (e WaitTaskValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWaitTask.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WaitTaskValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WaitTaskValidationError{}

// Validate checks the field values on ParallelTask with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ParallelTask) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ParallelTask with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ParallelTaskMultiError, or
// nil if none found.
func (m *ParallelTask) ValidateAll() error {
	return m.validate(true)
}

func (m *ParallelTask) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTracks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ParallelTaskValidationError{
						field:  fmt.Sprintf("Tracks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ParallelTaskValidationError{
						field:  fmt.Sprintf("Tracks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ParallelTaskValidationError{
					field:  fmt.Sprintf("Tracks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ParallelTaskMultiError(errors)
	}

	return nil
}

// ParallelTaskMultiError is an error wrapping multiple validation errors
// returned by ParallelTask.ValidateAll() if the designated constraints aren't met.
type ParallelTaskMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ParallelTaskMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ParallelTaskMultiError) AllErrors() []error { return m }

// ParallelTaskValidationError is the validation error returned by
// ParallelTask.Validate if the designated constraints aren't met.
type ParallelTaskValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParallelTaskValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParallelTaskValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParallelTaskValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParallelTaskValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParallelTaskValidationError) ErrorName() string { return "ParallelTaskValidationError" }

// Error satisfies the builtin error interface
func (e ParallelTaskValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParallelTask.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParallelTaskValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParallelTaskValidationError{}

// Validate checks the field values on ManualApprovalTask with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ManualApprovalTask) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ManualApprovalTask with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ManualApprovalTaskMultiError, or nil if none found.
func (m *ManualApprovalTask) ValidateAll() error {
	return m.validate(true)
}

func (m *ManualApprovalTask) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ManualApprovalTaskMultiError(errors)
	}

	return nil
}

// ManualApprovalTaskMultiError is an error wrapping multiple validation errors
// returned by ManualApprovalTask.ValidateAll() if the designated constraints
// aren't met.
type ManualApprovalTaskMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ManualApprovalTaskMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ManualApprovalTaskMultiError) AllErrors() []error { return m }

// ManualApprovalTaskValidationError is the validation error returned by
// ManualApprovalTask.Validate if the designated constraints aren't met.
type ManualApprovalTaskValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ManualApprovalTaskValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ManualApprovalTaskValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ManualApprovalTaskValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ManualApprovalTaskValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ManualApprovalTaskValidationError) ErrorName() string {
	return "ManualApprovalTaskValidationError"
}

// Error satisfies the builtin error interface
func (e ManualApprovalTaskValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sManualApprovalTask.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ManualApprovalTaskValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ManualApprovalTaskValidationError{}

// Validate checks the field values on CustomTask with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CustomTask) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CustomTask with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CustomTaskMultiError, or
// nil if none found.
func (m *CustomTask) ValidateAll() error {
	return m.validate(true)
}

func (m *CustomTask) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDescription()) < 1 {
		err := CustomTaskValidationError{
			field:  "Description",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetProgram() == nil {
		err := CustomTaskValidationError{
			field:  "Program",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetProgram()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CustomTaskValidationError{
					field:  "Program",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CustomTaskValidationError{
					field:  "Program",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProgram()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CustomTaskValidationError{
				field:  "Program",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRetryConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CustomTaskValidationError{
					field:  "RetryConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CustomTaskValidationError{
					field:  "RetryConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRetryConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CustomTaskValidationError{
				field:  "RetryConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Application

	// no validation rules for ApplicationId

	// no validation rules for ReleaseChannel

	// no validation rules for ReleaseChannelId

	// no validation rules for FinalCompiledProgram

	if len(errors) > 0 {
		return CustomTaskMultiError(errors)
	}

	return nil
}

// CustomTaskMultiError is an error wrapping multiple validation errors
// returned by CustomTask.ValidateAll() if the designated constraints aren't met.
type CustomTaskMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CustomTaskMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CustomTaskMultiError) AllErrors() []error { return m }

// CustomTaskValidationError is the validation error returned by
// CustomTask.Validate if the designated constraints aren't met.
type CustomTaskValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CustomTaskValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CustomTaskValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CustomTaskValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CustomTaskValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CustomTaskValidationError) ErrorName() string { return "CustomTaskValidationError" }

// Error satisfies the builtin error interface
func (e CustomTaskValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCustomTask.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CustomTaskValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CustomTaskValidationError{}

// Validate checks the field values on Task with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Task) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Task with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TaskMultiError, or nil if none found.
func (m *Task) ValidateAll() error {
	return m.validate(true)
}

func (m *Task) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TaskValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TaskValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TaskValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	oneofTaskOneofPresent := false
	switch v := m.TaskOneof.(type) {
	case *Task_PushTask:
		if v == nil {
			err := TaskValidationError{
				field:  "TaskOneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofTaskOneofPresent = true

		if all {
			switch v := interface{}(m.GetPushTask()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TaskValidationError{
						field:  "PushTask",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TaskValidationError{
						field:  "PushTask",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPushTask()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TaskValidationError{
					field:  "PushTask",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Task_WaitTask:
		if v == nil {
			err := TaskValidationError{
				field:  "TaskOneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofTaskOneofPresent = true

		if all {
			switch v := interface{}(m.GetWaitTask()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TaskValidationError{
						field:  "WaitTask",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TaskValidationError{
						field:  "WaitTask",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetWaitTask()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TaskValidationError{
					field:  "WaitTask",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Task_ParallelTask:
		if v == nil {
			err := TaskValidationError{
				field:  "TaskOneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofTaskOneofPresent = true

		if all {
			switch v := interface{}(m.GetParallelTask()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TaskValidationError{
						field:  "ParallelTask",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TaskValidationError{
						field:  "ParallelTask",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetParallelTask()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TaskValidationError{
					field:  "ParallelTask",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Task_ManualApprovalTask:
		if v == nil {
			err := TaskValidationError{
				field:  "TaskOneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofTaskOneofPresent = true

		if all {
			switch v := interface{}(m.GetManualApprovalTask()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TaskValidationError{
						field:  "ManualApprovalTask",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TaskValidationError{
						field:  "ManualApprovalTask",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetManualApprovalTask()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TaskValidationError{
					field:  "ManualApprovalTask",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Task_CustomTask:
		if v == nil {
			err := TaskValidationError{
				field:  "TaskOneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofTaskOneofPresent = true

		if all {
			switch v := interface{}(m.GetCustomTask()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TaskValidationError{
						field:  "CustomTask",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TaskValidationError{
						field:  "CustomTask",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCustomTask()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TaskValidationError{
					field:  "CustomTask",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofTaskOneofPresent {
		err := TaskValidationError{
			field:  "TaskOneof",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return TaskMultiError(errors)
	}

	return nil
}

// TaskMultiError is an error wrapping multiple validation errors returned by
// Task.ValidateAll() if the designated constraints aren't met.
type TaskMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskMultiError) AllErrors() []error { return m }

// TaskValidationError is the validation error returned by Task.Validate if the
// designated constraints aren't met.
type TaskValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskValidationError) ErrorName() string { return "TaskValidationError" }

// Error satisfies the builtin error interface
func (e TaskValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTask.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskValidationError{}

// Validate checks the field values on PipelineConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PipelineConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PipelineConfigMultiError,
// or nil if none found.
func (m *PipelineConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 63 {
		err := PipelineConfigValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 63 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_PipelineConfig_Name_Pattern.MatchString(m.GetName()) {
		err := PipelineConfigValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[a-z]([a-z0-9-]*[a-z0-9]){0,1}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetTasks()) < 1 {
		err := PipelineConfigValidationError{
			field:  "Tasks",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetTasks() {
		_, _ = idx, item

		if item == nil {
			err := PipelineConfigValidationError{
				field:  fmt.Sprintf("Tasks[%v]", idx),
				reason: "value is required",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PipelineConfigValidationError{
						field:  fmt.Sprintf("Tasks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PipelineConfigValidationError{
						field:  fmt.Sprintf("Tasks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PipelineConfigValidationError{
					field:  fmt.Sprintf("Tasks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Rollback

	if all {
		switch v := interface{}(m.GetNotifications()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineConfigValidationError{
					field:  "Notifications",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineConfigValidationError{
					field:  "Notifications",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNotifications()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineConfigValidationError{
				field:  "Notifications",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PipelineConfigMultiError(errors)
	}

	return nil
}

// PipelineConfigMultiError is an error wrapping multiple validation errors
// returned by PipelineConfig.ValidateAll() if the designated constraints
// aren't met.
type PipelineConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineConfigMultiError) AllErrors() []error { return m }

// PipelineConfigValidationError is the validation error returned by
// PipelineConfig.Validate if the designated constraints aren't met.
type PipelineConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineConfigValidationError) ErrorName() string { return "PipelineConfigValidationError" }

// Error satisfies the builtin error interface
func (e PipelineConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineConfigValidationError{}

var _PipelineConfig_Name_Pattern = regexp.MustCompile("^[a-z]([a-z0-9-]*[a-z0-9]){0,1}$")

// Validate checks the field values on PipelineTemplate with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PipelineTemplate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineTemplate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineTemplateMultiError, or nil if none found.
func (m *PipelineTemplate) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineTemplate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetNameSuffix()); l < 1 || l > 63 {
		err := PipelineTemplateValidationError{
			field:  "NameSuffix",
			reason: "value length must be between 1 and 63 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_PipelineTemplate_NameSuffix_Pattern.MatchString(m.GetNameSuffix()) {
		err := PipelineTemplateValidationError{
			field:  "NameSuffix",
			reason: "value does not match regex pattern \"^([a-z0-9-]*[a-z0-9]){0,1}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetTasks()) < 1 {
		err := PipelineTemplateValidationError{
			field:  "Tasks",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetTasks() {
		_, _ = idx, item

		if item == nil {
			err := PipelineTemplateValidationError{
				field:  fmt.Sprintf("Tasks[%v]", idx),
				reason: "value is required",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PipelineTemplateValidationError{
						field:  fmt.Sprintf("Tasks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PipelineTemplateValidationError{
						field:  fmt.Sprintf("Tasks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PipelineTemplateValidationError{
					field:  fmt.Sprintf("Tasks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Rollback

	if all {
		switch v := interface{}(m.GetNotifications()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineTemplateValidationError{
					field:  "Notifications",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineTemplateValidationError{
					field:  "Notifications",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNotifications()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineTemplateValidationError{
				field:  "Notifications",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PipelineTemplateMultiError(errors)
	}

	return nil
}

// PipelineTemplateMultiError is an error wrapping multiple validation errors
// returned by PipelineTemplate.ValidateAll() if the designated constraints
// aren't met.
type PipelineTemplateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineTemplateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineTemplateMultiError) AllErrors() []error { return m }

// PipelineTemplateValidationError is the validation error returned by
// PipelineTemplate.Validate if the designated constraints aren't met.
type PipelineTemplateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineTemplateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineTemplateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineTemplateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineTemplateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineTemplateValidationError) ErrorName() string { return "PipelineTemplateValidationError" }

// Error satisfies the builtin error interface
func (e PipelineTemplateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineTemplate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineTemplateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineTemplateValidationError{}

var _PipelineTemplate_NameSuffix_Pattern = regexp.MustCompile("^([a-z0-9-]*[a-z0-9]){0,1}$")

// Validate checks the field values on ParallelTask_TaskTrack with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ParallelTask_TaskTrack) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ParallelTask_TaskTrack with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ParallelTask_TaskTrackMultiError, or nil if none found.
func (m *ParallelTask_TaskTrack) ValidateAll() error {
	return m.validate(true)
}

func (m *ParallelTask_TaskTrack) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTasks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ParallelTask_TaskTrackValidationError{
						field:  fmt.Sprintf("Tasks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ParallelTask_TaskTrackValidationError{
						field:  fmt.Sprintf("Tasks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ParallelTask_TaskTrackValidationError{
					field:  fmt.Sprintf("Tasks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ParallelTask_TaskTrackMultiError(errors)
	}

	return nil
}

// ParallelTask_TaskTrackMultiError is an error wrapping multiple validation
// errors returned by ParallelTask_TaskTrack.ValidateAll() if the designated
// constraints aren't met.
type ParallelTask_TaskTrackMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ParallelTask_TaskTrackMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ParallelTask_TaskTrackMultiError) AllErrors() []error { return m }

// ParallelTask_TaskTrackValidationError is the validation error returned by
// ParallelTask_TaskTrack.Validate if the designated constraints aren't met.
type ParallelTask_TaskTrackValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParallelTask_TaskTrackValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParallelTask_TaskTrackValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParallelTask_TaskTrackValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParallelTask_TaskTrackValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParallelTask_TaskTrackValidationError) ErrorName() string {
	return "ParallelTask_TaskTrackValidationError"
}

// Error satisfies the builtin error interface
func (e ParallelTask_TaskTrackValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParallelTask_TaskTrack.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParallelTask_TaskTrackValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParallelTask_TaskTrackValidationError{}

// Validate checks the field values on Task_Metadata with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Task_Metadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Task_Metadata with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Task_MetadataMultiError, or
// nil if none found.
func (m *Task_Metadata) ValidateAll() error {
	return m.validate(true)
}

func (m *Task_Metadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return Task_MetadataMultiError(errors)
	}

	return nil
}

// Task_MetadataMultiError is an error wrapping multiple validation errors
// returned by Task_Metadata.ValidateAll() if the designated constraints
// aren't met.
type Task_MetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Task_MetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Task_MetadataMultiError) AllErrors() []error { return m }

// Task_MetadataValidationError is the validation error returned by
// Task_Metadata.Validate if the designated constraints aren't met.
type Task_MetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Task_MetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Task_MetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Task_MetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Task_MetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Task_MetadataValidationError) ErrorName() string { return "Task_MetadataValidationError" }

// Error satisfies the builtin error interface
func (e Task_MetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTask_Metadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Task_MetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Task_MetadataValidationError{}
