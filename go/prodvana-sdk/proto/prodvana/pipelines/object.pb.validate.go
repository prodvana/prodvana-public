// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: prodvana/pipelines/object.proto

package pipelines

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ServicePushParam with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ServicePushParam) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServicePushParam with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServicePushParamMultiError, or nil if none found.
func (m *ServicePushParam) ValidateAll() error {
	return m.validate(true)
}

func (m *ServicePushParam) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Service

	if all {
		switch v := interface{}(m.GetVersionPush()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServicePushParamValidationError{
					field:  "VersionPush",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServicePushParamValidationError{
					field:  "VersionPush",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVersionPush()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServicePushParamValidationError{
				field:  "VersionPush",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Application

	if len(errors) > 0 {
		return ServicePushParamMultiError(errors)
	}

	return nil
}

// ServicePushParamMultiError is an error wrapping multiple validation errors
// returned by ServicePushParam.ValidateAll() if the designated constraints
// aren't met.
type ServicePushParamMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServicePushParamMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServicePushParamMultiError) AllErrors() []error { return m }

// ServicePushParamValidationError is the validation error returned by
// ServicePushParam.Validate if the designated constraints aren't met.
type ServicePushParamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServicePushParamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServicePushParamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServicePushParamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServicePushParamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServicePushParamValidationError) ErrorName() string { return "ServicePushParamValidationError" }

// Error satisfies the builtin error interface
func (e ServicePushParamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServicePushParam.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServicePushParamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServicePushParamValidationError{}

// Validate checks the field values on ServiceInstancePush with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServiceInstancePush) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServiceInstancePush with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServiceInstancePushMultiError, or nil if none found.
func (m *ServiceInstancePush) ValidateAll() error {
	return m.validate(true)
}

func (m *ServiceInstancePush) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetApplicationMeta()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServiceInstancePushValidationError{
					field:  "ApplicationMeta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServiceInstancePushValidationError{
					field:  "ApplicationMeta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApplicationMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceInstancePushValidationError{
				field:  "ApplicationMeta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetServiceInstanceMeta()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServiceInstancePushValidationError{
					field:  "ServiceInstanceMeta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServiceInstancePushValidationError{
					field:  "ServiceInstanceMeta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetServiceInstanceMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceInstancePushValidationError{
				field:  "ServiceInstanceMeta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TargetVersion

	if len(errors) > 0 {
		return ServiceInstancePushMultiError(errors)
	}

	return nil
}

// ServiceInstancePushMultiError is an error wrapping multiple validation
// errors returned by ServiceInstancePush.ValidateAll() if the designated
// constraints aren't met.
type ServiceInstancePushMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceInstancePushMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceInstancePushMultiError) AllErrors() []error { return m }

// ServiceInstancePushValidationError is the validation error returned by
// ServiceInstancePush.Validate if the designated constraints aren't met.
type ServiceInstancePushValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceInstancePushValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceInstancePushValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceInstancePushValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceInstancePushValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceInstancePushValidationError) ErrorName() string {
	return "ServiceInstancePushValidationError"
}

// Error satisfies the builtin error interface
func (e ServiceInstancePushValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceInstancePush.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceInstancePushValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceInstancePushValidationError{}

// Validate checks the field values on TaskStatus with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TaskStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TaskStatus with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TaskStatusMultiError, or
// nil if none found.
func (m *TaskStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *TaskStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for State

	if all {
		switch v := interface{}(m.GetCreationTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TaskStatusValidationError{
					field:  "CreationTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TaskStatusValidationError{
					field:  "CreationTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreationTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TaskStatusValidationError{
				field:  "CreationTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLastUpdateTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TaskStatusValidationError{
					field:  "LastUpdateTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TaskStatusValidationError{
					field:  "LastUpdateTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastUpdateTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TaskStatusValidationError{
				field:  "LastUpdateTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TaskStatusMultiError(errors)
	}

	return nil
}

// TaskStatusMultiError is an error wrapping multiple validation errors
// returned by TaskStatus.ValidateAll() if the designated constraints aren't met.
type TaskStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskStatusMultiError) AllErrors() []error { return m }

// TaskStatusValidationError is the validation error returned by
// TaskStatus.Validate if the designated constraints aren't met.
type TaskStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskStatusValidationError) ErrorName() string { return "TaskStatusValidationError" }

// Error satisfies the builtin error interface
func (e TaskStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskStatusValidationError{}

// Validate checks the field values on PipelineState with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PipelineState) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineState with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PipelineStateMultiError, or
// nil if none found.
func (m *PipelineState) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineState) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PipelineStateMultiError(errors)
	}

	return nil
}

// PipelineStateMultiError is an error wrapping multiple validation errors
// returned by PipelineState.ValidateAll() if the designated constraints
// aren't met.
type PipelineStateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineStateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineStateMultiError) AllErrors() []error { return m }

// PipelineStateValidationError is the validation error returned by
// PipelineState.Validate if the designated constraints aren't met.
type PipelineStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineStateValidationError) ErrorName() string { return "PipelineStateValidationError" }

// Error satisfies the builtin error interface
func (e PipelineStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineStateValidationError{}

// Validate checks the field values on Pipeline with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Pipeline) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Pipeline with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PipelineMultiError, or nil
// if none found.
func (m *Pipeline) ValidateAll() error {
	return m.validate(true)
}

func (m *Pipeline) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMeta()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineValidationError{
				field:  "Meta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetState()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineValidationError{
					field:  "State",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineValidationError{
					field:  "State",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineValidationError{
				field:  "State",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PipelineMultiError(errors)
	}

	return nil
}

// PipelineMultiError is an error wrapping multiple validation errors returned
// by Pipeline.ValidateAll() if the designated constraints aren't met.
type PipelineMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineMultiError) AllErrors() []error { return m }

// PipelineValidationError is the validation error returned by
// Pipeline.Validate if the designated constraints aren't met.
type PipelineValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineValidationError) ErrorName() string { return "PipelineValidationError" }

// Error satisfies the builtin error interface
func (e PipelineValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipeline.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineValidationError{}

// Validate checks the field values on PipelineRunConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PipelineRunConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineRunConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineRunConfigMultiError, or nil if none found.
func (m *PipelineRunConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineRunConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPipelineConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineRunConfigValidationError{
					field:  "PipelineConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineRunConfigValidationError{
					field:  "PipelineConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPipelineConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineRunConfigValidationError{
				field:  "PipelineConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetServicePushParams() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PipelineRunConfigValidationError{
						field:  fmt.Sprintf("ServicePushParams[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PipelineRunConfigValidationError{
						field:  fmt.Sprintf("ServicePushParams[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PipelineRunConfigValidationError{
					field:  fmt.Sprintf("ServicePushParams[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for SkipRollbackValidation

	for idx, item := range m.GetServiceInstancePushes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PipelineRunConfigValidationError{
						field:  fmt.Sprintf("ServiceInstancePushes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PipelineRunConfigValidationError{
						field:  fmt.Sprintf("ServiceInstancePushes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PipelineRunConfigValidationError{
					field:  fmt.Sprintf("ServiceInstancePushes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for SkipAlertChecks

	if len(errors) > 0 {
		return PipelineRunConfigMultiError(errors)
	}

	return nil
}

// PipelineRunConfigMultiError is an error wrapping multiple validation errors
// returned by PipelineRunConfig.ValidateAll() if the designated constraints
// aren't met.
type PipelineRunConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineRunConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineRunConfigMultiError) AllErrors() []error { return m }

// PipelineRunConfigValidationError is the validation error returned by
// PipelineRunConfig.Validate if the designated constraints aren't met.
type PipelineRunConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineRunConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineRunConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineRunConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineRunConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineRunConfigValidationError) ErrorName() string {
	return "PipelineRunConfigValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineRunConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineRunConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineRunConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineRunConfigValidationError{}

// Validate checks the field values on PipelineRunState with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PipelineRunState) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineRunState with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineRunStateMultiError, or nil if none found.
func (m *PipelineRunState) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineRunState) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCreationTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineRunStateValidationError{
					field:  "CreationTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineRunStateValidationError{
					field:  "CreationTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreationTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineRunStateValidationError{
				field:  "CreationTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLastUpdateTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineRunStateValidationError{
					field:  "LastUpdateTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineRunStateValidationError{
					field:  "LastUpdateTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastUpdateTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineRunStateValidationError{
				field:  "LastUpdateTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for State

	// no validation rules for Terminal

	for idx, item := range m.GetTaskStatuses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PipelineRunStateValidationError{
						field:  fmt.Sprintf("TaskStatuses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PipelineRunStateValidationError{
						field:  fmt.Sprintf("TaskStatuses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PipelineRunStateValidationError{
					field:  fmt.Sprintf("TaskStatuses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for LastActor

	// no validation rules for Initiator

	// no validation rules for Reason

	// no validation rules for Message

	// no validation rules for ExternalLink

	if len(errors) > 0 {
		return PipelineRunStateMultiError(errors)
	}

	return nil
}

// PipelineRunStateMultiError is an error wrapping multiple validation errors
// returned by PipelineRunState.ValidateAll() if the designated constraints
// aren't met.
type PipelineRunStateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineRunStateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineRunStateMultiError) AllErrors() []error { return m }

// PipelineRunStateValidationError is the validation error returned by
// PipelineRunState.Validate if the designated constraints aren't met.
type PipelineRunStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineRunStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineRunStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineRunStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineRunStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineRunStateValidationError) ErrorName() string { return "PipelineRunStateValidationError" }

// Error satisfies the builtin error interface
func (e PipelineRunStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineRunState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineRunStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineRunStateValidationError{}

// Validate checks the field values on PipelineRun with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PipelineRun) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineRun with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PipelineRunMultiError, or
// nil if none found.
func (m *PipelineRun) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineRun) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMeta()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineRunValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineRunValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineRunValidationError{
				field:  "Meta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineRunValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineRunValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineRunValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetState()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineRunValidationError{
					field:  "State",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineRunValidationError{
					field:  "State",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineRunValidationError{
				field:  "State",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PipelineRunMultiError(errors)
	}

	return nil
}

// PipelineRunMultiError is an error wrapping multiple validation errors
// returned by PipelineRun.ValidateAll() if the designated constraints aren't met.
type PipelineRunMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineRunMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineRunMultiError) AllErrors() []error { return m }

// PipelineRunValidationError is the validation error returned by
// PipelineRun.Validate if the designated constraints aren't met.
type PipelineRunValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineRunValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineRunValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineRunValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineRunValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineRunValidationError) ErrorName() string { return "PipelineRunValidationError" }

// Error satisfies the builtin error interface
func (e PipelineRunValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineRun.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineRunValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineRunValidationError{}
