// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.1
// 	protoc        v3.21.10
// source: prodvana/pipelines/pipelines.proto

package pipelines

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	common_config "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/common_config"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PushTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// when passing as input, only specify one of service or service_id, not both
	ServiceId string `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	Service   string `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
	// when passing as input, only specify one of release_channel or release_channel_id, not both
	ReleaseChannelId string `protobuf:"bytes,3,opt,name=release_channel_id,json=releaseChannelId,proto3" json:"release_channel_id,omitempty"`
	ReleaseChannel   string `protobuf:"bytes,4,opt,name=release_channel,json=releaseChannel,proto3" json:"release_channel,omitempty"`
	// deprecated, set at pipeline level instead of task level
	Rollback      bool   `protobuf:"varint,5,opt,name=rollback,proto3" json:"rollback,omitempty"`
	ApplicationId string `protobuf:"bytes,6,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	Application   string `protobuf:"bytes,7,opt,name=application,proto3" json:"application,omitempty"`
}

func (x *PushTask) Reset() {
	*x = PushTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_pipelines_pipelines_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushTask) ProtoMessage() {}

func (x *PushTask) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_pipelines_pipelines_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushTask.ProtoReflect.Descriptor instead.
func (*PushTask) Descriptor() ([]byte, []int) {
	return file_prodvana_pipelines_pipelines_proto_rawDescGZIP(), []int{0}
}

func (x *PushTask) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *PushTask) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *PushTask) GetReleaseChannelId() string {
	if x != nil {
		return x.ReleaseChannelId
	}
	return ""
}

func (x *PushTask) GetReleaseChannel() string {
	if x != nil {
		return x.ReleaseChannel
	}
	return ""
}

func (x *PushTask) GetRollback() bool {
	if x != nil {
		return x.Rollback
	}
	return false
}

func (x *PushTask) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *PushTask) GetApplication() string {
	if x != nil {
		return x.Application
	}
	return ""
}

type WaitTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Duration *durationpb.Duration `protobuf:"bytes,1,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *WaitTask) Reset() {
	*x = WaitTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_pipelines_pipelines_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitTask) ProtoMessage() {}

func (x *WaitTask) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_pipelines_pipelines_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitTask.ProtoReflect.Descriptor instead.
func (*WaitTask) Descriptor() ([]byte, []int) {
	return file_prodvana_pipelines_pipelines_proto_rawDescGZIP(), []int{1}
}

func (x *WaitTask) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

type ParallelTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tracks []*ParallelTask_TaskTrack `protobuf:"bytes,1,rep,name=tracks,proto3" json:"tracks,omitempty"`
}

func (x *ParallelTask) Reset() {
	*x = ParallelTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_pipelines_pipelines_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParallelTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParallelTask) ProtoMessage() {}

func (x *ParallelTask) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_pipelines_pipelines_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParallelTask.ProtoReflect.Descriptor instead.
func (*ParallelTask) Descriptor() ([]byte, []int) {
	return file_prodvana_pipelines_pipelines_proto_rawDescGZIP(), []int{2}
}

func (x *ParallelTask) GetTracks() []*ParallelTask_TaskTrack {
	if x != nil {
		return x.Tracks
	}
	return nil
}

type ManualApprovalTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ManualApprovalTask) Reset() {
	*x = ManualApprovalTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_pipelines_pipelines_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManualApprovalTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualApprovalTask) ProtoMessage() {}

func (x *ManualApprovalTask) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_pipelines_pipelines_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualApprovalTask.ProtoReflect.Descriptor instead.
func (*ManualApprovalTask) Descriptor() ([]byte, []int) {
	return file_prodvana_pipelines_pipelines_proto_rawDescGZIP(), []int{3}
}

type CustomTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// description used for displaying this task
	Description string                       `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	Program     *common_config.ProgramConfig `protobuf:"bytes,1,opt,name=program,proto3" json:"program,omitempty"`
	// if not set, the custom task will not be retried once it starts executing once.
	RetryConfig *common_config.RetryConfig `protobuf:"bytes,2,opt,name=retry_config,json=retryConfig,proto3" json:"retry_config,omitempty"`
	// TODO(naphat) is this the best interface, or do we just take runtime + namespace?
	Application      string `protobuf:"bytes,3,opt,name=application,proto3" json:"application,omitempty"`
	ApplicationId    string `protobuf:"bytes,4,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	ReleaseChannel   string `protobuf:"bytes,5,opt,name=release_channel,json=releaseChannel,proto3" json:"release_channel,omitempty"`
	ReleaseChannelId string `protobuf:"bytes,6,opt,name=release_channel_id,json=releaseChannelId,proto3" json:"release_channel_id,omitempty"`
	// if set, treat the program as the final program, avoid any internal Prodvana compilation (e.g. setting default env from app config)
	FinalCompiledProgram bool `protobuf:"varint,8,opt,name=final_compiled_program,json=finalCompiledProgram,proto3" json:"final_compiled_program,omitempty"`
}

func (x *CustomTask) Reset() {
	*x = CustomTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_pipelines_pipelines_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomTask) ProtoMessage() {}

func (x *CustomTask) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_pipelines_pipelines_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomTask.ProtoReflect.Descriptor instead.
func (*CustomTask) Descriptor() ([]byte, []int) {
	return file_prodvana_pipelines_pipelines_proto_rawDescGZIP(), []int{4}
}

func (x *CustomTask) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CustomTask) GetProgram() *common_config.ProgramConfig {
	if x != nil {
		return x.Program
	}
	return nil
}

func (x *CustomTask) GetRetryConfig() *common_config.RetryConfig {
	if x != nil {
		return x.RetryConfig
	}
	return nil
}

func (x *CustomTask) GetApplication() string {
	if x != nil {
		return x.Application
	}
	return ""
}

func (x *CustomTask) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *CustomTask) GetReleaseChannel() string {
	if x != nil {
		return x.ReleaseChannel
	}
	return ""
}

func (x *CustomTask) GetReleaseChannelId() string {
	if x != nil {
		return x.ReleaseChannelId
	}
	return ""
}

func (x *CustomTask) GetFinalCompiledProgram() bool {
	if x != nil {
		return x.FinalCompiledProgram
	}
	return false
}

type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *Task_Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Types that are assignable to TaskOneof:
	//
	//	*Task_PushTask
	//	*Task_WaitTask
	//	*Task_ParallelTask
	//	*Task_ManualApprovalTask
	//	*Task_CustomTask
	TaskOneof isTask_TaskOneof `protobuf_oneof:"task_oneof"`
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_pipelines_pipelines_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_pipelines_pipelines_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_prodvana_pipelines_pipelines_proto_rawDescGZIP(), []int{5}
}

func (x *Task) GetMetadata() *Task_Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (m *Task) GetTaskOneof() isTask_TaskOneof {
	if m != nil {
		return m.TaskOneof
	}
	return nil
}

func (x *Task) GetPushTask() *PushTask {
	if x, ok := x.GetTaskOneof().(*Task_PushTask); ok {
		return x.PushTask
	}
	return nil
}

func (x *Task) GetWaitTask() *WaitTask {
	if x, ok := x.GetTaskOneof().(*Task_WaitTask); ok {
		return x.WaitTask
	}
	return nil
}

func (x *Task) GetParallelTask() *ParallelTask {
	if x, ok := x.GetTaskOneof().(*Task_ParallelTask); ok {
		return x.ParallelTask
	}
	return nil
}

func (x *Task) GetManualApprovalTask() *ManualApprovalTask {
	if x, ok := x.GetTaskOneof().(*Task_ManualApprovalTask); ok {
		return x.ManualApprovalTask
	}
	return nil
}

func (x *Task) GetCustomTask() *CustomTask {
	if x, ok := x.GetTaskOneof().(*Task_CustomTask); ok {
		return x.CustomTask
	}
	return nil
}

type isTask_TaskOneof interface {
	isTask_TaskOneof()
}

type Task_PushTask struct {
	PushTask *PushTask `protobuf:"bytes,2,opt,name=push_task,json=pushTask,proto3,oneof"`
}

type Task_WaitTask struct {
	WaitTask *WaitTask `protobuf:"bytes,3,opt,name=wait_task,json=waitTask,proto3,oneof"`
}

type Task_ParallelTask struct {
	ParallelTask *ParallelTask `protobuf:"bytes,4,opt,name=parallel_task,json=parallelTask,proto3,oneof"`
}

type Task_ManualApprovalTask struct {
	ManualApprovalTask *ManualApprovalTask `protobuf:"bytes,5,opt,name=manual_approval_task,json=manualApprovalTask,proto3,oneof"`
}

type Task_CustomTask struct {
	CustomTask *CustomTask `protobuf:"bytes,6,opt,name=custom_task,json=customTask,proto3,oneof"`
}

func (*Task_PushTask) isTask_TaskOneof() {}

func (*Task_WaitTask) isTask_TaskOneof() {}

func (*Task_ParallelTask) isTask_TaskOneof() {}

func (*Task_ManualApprovalTask) isTask_TaskOneof() {}

func (*Task_CustomTask) isTask_TaskOneof() {}

type PipelineConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string                            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Tasks         []*Task                           `protobuf:"bytes,2,rep,name=tasks,proto3" json:"tasks,omitempty"`
	Rollback      bool                              `protobuf:"varint,3,opt,name=rollback,proto3" json:"rollback,omitempty"`
	Notifications *common_config.NotificationConfig `protobuf:"bytes,4,opt,name=notifications,proto3" json:"notifications,omitempty"`
}

func (x *PipelineConfig) Reset() {
	*x = PipelineConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_pipelines_pipelines_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineConfig) ProtoMessage() {}

func (x *PipelineConfig) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_pipelines_pipelines_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineConfig.ProtoReflect.Descriptor instead.
func (*PipelineConfig) Descriptor() ([]byte, []int) {
	return file_prodvana_pipelines_pipelines_proto_rawDescGZIP(), []int{6}
}

func (x *PipelineConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PipelineConfig) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *PipelineConfig) GetRollback() bool {
	if x != nil {
		return x.Rollback
	}
	return false
}

func (x *PipelineConfig) GetNotifications() *common_config.NotificationConfig {
	if x != nil {
		return x.Notifications
	}
	return nil
}

// Similar to pipeline, but the task IDs and service fields are expected to not be filled out.
type PipelineTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NameSuffix    string                            `protobuf:"bytes,1,opt,name=name_suffix,json=nameSuffix,proto3" json:"name_suffix,omitempty"`
	Tasks         []*Task                           `protobuf:"bytes,2,rep,name=tasks,proto3" json:"tasks,omitempty"`
	Rollback      bool                              `protobuf:"varint,3,opt,name=rollback,proto3" json:"rollback,omitempty"`
	Notifications *common_config.NotificationConfig `protobuf:"bytes,4,opt,name=notifications,proto3" json:"notifications,omitempty"` // optional, will default to application's notification config
}

func (x *PipelineTemplate) Reset() {
	*x = PipelineTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_pipelines_pipelines_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineTemplate) ProtoMessage() {}

func (x *PipelineTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_pipelines_pipelines_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineTemplate.ProtoReflect.Descriptor instead.
func (*PipelineTemplate) Descriptor() ([]byte, []int) {
	return file_prodvana_pipelines_pipelines_proto_rawDescGZIP(), []int{7}
}

func (x *PipelineTemplate) GetNameSuffix() string {
	if x != nil {
		return x.NameSuffix
	}
	return ""
}

func (x *PipelineTemplate) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *PipelineTemplate) GetRollback() bool {
	if x != nil {
		return x.Rollback
	}
	return false
}

func (x *PipelineTemplate) GetNotifications() *common_config.NotificationConfig {
	if x != nil {
		return x.Notifications
	}
	return nil
}

type ParallelTask_TaskTrack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tasks []*Task `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"`
}

func (x *ParallelTask_TaskTrack) Reset() {
	*x = ParallelTask_TaskTrack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_pipelines_pipelines_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParallelTask_TaskTrack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParallelTask_TaskTrack) ProtoMessage() {}

func (x *ParallelTask_TaskTrack) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_pipelines_pipelines_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParallelTask_TaskTrack.ProtoReflect.Descriptor instead.
func (*ParallelTask_TaskTrack) Descriptor() ([]byte, []int) {
	return file_prodvana_pipelines_pipelines_proto_rawDescGZIP(), []int{2, 0}
}

func (x *ParallelTask_TaskTrack) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

// Metadata contains information generic to all task types.
// Compilation of a task can be done entirely with its metadata and specific task-type config.
type Task_Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Task_Metadata) Reset() {
	*x = Task_Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_pipelines_pipelines_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task_Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task_Metadata) ProtoMessage() {}

func (x *Task_Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_pipelines_pipelines_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task_Metadata.ProtoReflect.Descriptor instead.
func (*Task_Metadata) Descriptor() ([]byte, []int) {
	return file_prodvana_pipelines_pipelines_proto_rawDescGZIP(), []int{5, 0}
}

func (x *Task_Metadata) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

var File_prodvana_pipelines_pipelines_proto protoreflect.FileDescriptor

var file_prodvana_pipelines_pipelines_proto_rawDesc = []byte{
	0x0a, 0x22, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x73, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x24, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e,
	0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x72, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x70, 0x72, 0x6f,
	0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xff, 0x01, 0x0a, 0x08, 0x50, 0x75, 0x73, 0x68, 0x54,
	0x61, 0x73, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12,
	0x25, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4d, 0x0a, 0x08, 0x57, 0x61, 0x69, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x12, 0x41, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0xaa, 0x01, 0x04, 0x08, 0x01, 0x2a, 0x00, 0x52, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8f, 0x01, 0x0a, 0x0c, 0x50, 0x61, 0x72, 0x61,
	0x6c, 0x6c, 0x65, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x42, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x50, 0x61,
	0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x52, 0x06, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x1a, 0x3b, 0x0a, 0x09,
	0x54, 0x61, 0x73, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x2e, 0x0a, 0x05, 0x74, 0x61, 0x73,
	0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x22, 0x14, 0x0a, 0x12, 0x4d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x22,
	0xa0, 0x03, 0x0a, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x29,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x07, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x12, 0x46, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x20, 0x0a, 0x0b,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25,
	0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2c,
	0x0a, 0x12, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16,
	0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x66, 0x69,
	0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x22, 0xd6, 0x03, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x3d, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x09, 0x70, 0x75,
	0x73, 0x68, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x00, 0x52, 0x08, 0x70,
	0x75, 0x73, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x3b, 0x0a, 0x09, 0x77, 0x61, 0x69, 0x74, 0x5f,
	0x74, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e,
	0x57, 0x61, 0x69, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x00, 0x52, 0x08, 0x77, 0x61, 0x69, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x12, 0x47, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c,
	0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0x2e, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x00, 0x52,
	0x0c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x5a, 0x0a,
	0x14, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x54,
	0x61, 0x73, 0x6b, 0x48, 0x00, 0x52, 0x12, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x00,
	0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x1a, 0x1a, 0x0a, 0x08,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0x80, 0x02, 0x0a, 0x0e,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3f,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xfa, 0x42,
	0x28, 0x72, 0x26, 0x10, 0x01, 0x18, 0x3f, 0x32, 0x20, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x28,
	0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d,
	0x39, 0x5d, 0x29, 0x7b, 0x30, 0x2c, 0x31, 0x7d, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x3f, 0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x0f, 0xfa, 0x42, 0x0c, 0x92, 0x01, 0x09,
	0x08, 0x01, 0x22, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x50, 0x0a, 0x0d,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x8a,
	0x02, 0x0a, 0x10, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x12, 0x47, 0x0a, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x75, 0x66, 0x66,
	0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0xfa, 0x42, 0x23, 0x72, 0x21, 0x10,
	0x01, 0x18, 0x3f, 0x32, 0x1b, 0x5e, 0x28, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5d,
	0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x7b, 0x30, 0x2c, 0x31, 0x7d, 0x24,
	0x52, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x3f, 0x0a, 0x05,
	0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x0f, 0xfa, 0x42, 0x0c, 0x92, 0x01, 0x09, 0x08, 0x01, 0x22,
	0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x50, 0x0a, 0x0d, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x4e, 0x5a, 0x4c, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61,
	0x6e, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2d, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2d, 0x73,
	0x64, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e,
	0x61, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_prodvana_pipelines_pipelines_proto_rawDescOnce sync.Once
	file_prodvana_pipelines_pipelines_proto_rawDescData = file_prodvana_pipelines_pipelines_proto_rawDesc
)

func file_prodvana_pipelines_pipelines_proto_rawDescGZIP() []byte {
	file_prodvana_pipelines_pipelines_proto_rawDescOnce.Do(func() {
		file_prodvana_pipelines_pipelines_proto_rawDescData = protoimpl.X.CompressGZIP(file_prodvana_pipelines_pipelines_proto_rawDescData)
	})
	return file_prodvana_pipelines_pipelines_proto_rawDescData
}

var file_prodvana_pipelines_pipelines_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_prodvana_pipelines_pipelines_proto_goTypes = []interface{}{
	(*PushTask)(nil),                         // 0: prodvana.pipelines.PushTask
	(*WaitTask)(nil),                         // 1: prodvana.pipelines.WaitTask
	(*ParallelTask)(nil),                     // 2: prodvana.pipelines.ParallelTask
	(*ManualApprovalTask)(nil),               // 3: prodvana.pipelines.ManualApprovalTask
	(*CustomTask)(nil),                       // 4: prodvana.pipelines.CustomTask
	(*Task)(nil),                             // 5: prodvana.pipelines.Task
	(*PipelineConfig)(nil),                   // 6: prodvana.pipelines.PipelineConfig
	(*PipelineTemplate)(nil),                 // 7: prodvana.pipelines.PipelineTemplate
	(*ParallelTask_TaskTrack)(nil),           // 8: prodvana.pipelines.ParallelTask.TaskTrack
	(*Task_Metadata)(nil),                    // 9: prodvana.pipelines.Task.Metadata
	(*durationpb.Duration)(nil),              // 10: google.protobuf.Duration
	(*common_config.ProgramConfig)(nil),      // 11: prodvana.common_config.ProgramConfig
	(*common_config.RetryConfig)(nil),        // 12: prodvana.common_config.RetryConfig
	(*common_config.NotificationConfig)(nil), // 13: prodvana.common_config.NotificationConfig
}
var file_prodvana_pipelines_pipelines_proto_depIdxs = []int32{
	10, // 0: prodvana.pipelines.WaitTask.duration:type_name -> google.protobuf.Duration
	8,  // 1: prodvana.pipelines.ParallelTask.tracks:type_name -> prodvana.pipelines.ParallelTask.TaskTrack
	11, // 2: prodvana.pipelines.CustomTask.program:type_name -> prodvana.common_config.ProgramConfig
	12, // 3: prodvana.pipelines.CustomTask.retry_config:type_name -> prodvana.common_config.RetryConfig
	9,  // 4: prodvana.pipelines.Task.metadata:type_name -> prodvana.pipelines.Task.Metadata
	0,  // 5: prodvana.pipelines.Task.push_task:type_name -> prodvana.pipelines.PushTask
	1,  // 6: prodvana.pipelines.Task.wait_task:type_name -> prodvana.pipelines.WaitTask
	2,  // 7: prodvana.pipelines.Task.parallel_task:type_name -> prodvana.pipelines.ParallelTask
	3,  // 8: prodvana.pipelines.Task.manual_approval_task:type_name -> prodvana.pipelines.ManualApprovalTask
	4,  // 9: prodvana.pipelines.Task.custom_task:type_name -> prodvana.pipelines.CustomTask
	5,  // 10: prodvana.pipelines.PipelineConfig.tasks:type_name -> prodvana.pipelines.Task
	13, // 11: prodvana.pipelines.PipelineConfig.notifications:type_name -> prodvana.common_config.NotificationConfig
	5,  // 12: prodvana.pipelines.PipelineTemplate.tasks:type_name -> prodvana.pipelines.Task
	13, // 13: prodvana.pipelines.PipelineTemplate.notifications:type_name -> prodvana.common_config.NotificationConfig
	5,  // 14: prodvana.pipelines.ParallelTask.TaskTrack.tasks:type_name -> prodvana.pipelines.Task
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_prodvana_pipelines_pipelines_proto_init() }
func file_prodvana_pipelines_pipelines_proto_init() {
	if File_prodvana_pipelines_pipelines_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_prodvana_pipelines_pipelines_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_pipelines_pipelines_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_pipelines_pipelines_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParallelTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_pipelines_pipelines_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManualApprovalTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_pipelines_pipelines_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_pipelines_pipelines_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_pipelines_pipelines_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_pipelines_pipelines_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_pipelines_pipelines_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParallelTask_TaskTrack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_pipelines_pipelines_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task_Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_prodvana_pipelines_pipelines_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*Task_PushTask)(nil),
		(*Task_WaitTask)(nil),
		(*Task_ParallelTask)(nil),
		(*Task_ManualApprovalTask)(nil),
		(*Task_CustomTask)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_prodvana_pipelines_pipelines_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_prodvana_pipelines_pipelines_proto_goTypes,
		DependencyIndexes: file_prodvana_pipelines_pipelines_proto_depIdxs,
		MessageInfos:      file_prodvana_pipelines_pipelines_proto_msgTypes,
	}.Build()
	File_prodvana_pipelines_pipelines_proto = out.File
	file_prodvana_pipelines_pipelines_proto_rawDesc = nil
	file_prodvana_pipelines_pipelines_proto_goTypes = nil
	file_prodvana_pipelines_pipelines_proto_depIdxs = nil
}
