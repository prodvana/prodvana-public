// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.1
// 	protoc        v3.21.10
// source: prodvana/release_channel/release_channel_config.proto

package release_channel

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	common_config "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/common_config"
	labels "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/labels"
	pipelines "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/pipelines"
	protection "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/protection"
	runtimes "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/runtimes"
	workflow "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/workflow"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RuntimeConnectionType int32

const (
	RuntimeConnectionType_UNKNOWN_CONNECTION RuntimeConnectionType = 0
	RuntimeConnectionType_LONG_LIVED_COMPUTE RuntimeConnectionType = 1
	RuntimeConnectionType_EXTENSION          RuntimeConnectionType = 2
)

// Enum value maps for RuntimeConnectionType.
var (
	RuntimeConnectionType_name = map[int32]string{
		0: "UNKNOWN_CONNECTION",
		1: "LONG_LIVED_COMPUTE",
		2: "EXTENSION",
	}
	RuntimeConnectionType_value = map[string]int32{
		"UNKNOWN_CONNECTION": 0,
		"LONG_LIVED_COMPUTE": 1,
		"EXTENSION":          2,
	}
)

func (x RuntimeConnectionType) Enum() *RuntimeConnectionType {
	p := new(RuntimeConnectionType)
	*p = x
	return p
}

func (x RuntimeConnectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RuntimeConnectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_prodvana_release_channel_release_channel_config_proto_enumTypes[0].Descriptor()
}

func (RuntimeConnectionType) Type() protoreflect.EnumType {
	return &file_prodvana_release_channel_release_channel_config_proto_enumTypes[0]
}

func (x RuntimeConnectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RuntimeConnectionType.Descriptor instead.
func (RuntimeConnectionType) EnumDescriptor() ([]byte, []int) {
	return file_prodvana_release_channel_release_channel_config_proto_rawDescGZIP(), []int{0}
}

type Policy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultEnv map[string]*common_config.EnvValue `protobuf:"bytes,1,rep,name=default_env,json=defaultEnv,proto3" json:"default_env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Policy) Reset() {
	*x = Policy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_release_channel_release_channel_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy) ProtoMessage() {}

func (x *Policy) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_release_channel_release_channel_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy.ProtoReflect.Descriptor instead.
func (*Policy) Descriptor() ([]byte, []int) {
	return file_prodvana_release_channel_release_channel_config_proto_rawDescGZIP(), []int{0}
}

func (x *Policy) GetDefaultEnv() map[string]*common_config.EnvValue {
	if x != nil {
		return x.DefaultEnv
	}
	return nil
}

type ReleaseChannelConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// intentionally does not reference cluster - this allows us to copy release channels across clusters via the same config
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// if specified, this release channel is part of a group. This can affect how release channels are rendered on the Prodvana web interface.
	Group                  string                                   `protobuf:"bytes,12,opt,name=group,proto3" json:"group,omitempty"`
	Order                  int64                                    `protobuf:"varint,2,opt,name=order,proto3" json:"order,omitempty"`                                            // deprecated
	Maturity               common_config.Maturity                   `protobuf:"varint,3,opt,name=maturity,proto3,enum=prodvana.common_config.Maturity" json:"maturity,omitempty"` // deprecated
	Policy                 *Policy                                  `protobuf:"bytes,4,opt,name=policy,proto3" json:"policy,omitempty"`
	Runtimes               []*ReleaseChannelRuntimeConfig           `protobuf:"bytes,5,rep,name=runtimes,proto3" json:"runtimes,omitempty"`
	DeployAnnotations      *workflow.AnnotationsConfig              `protobuf:"bytes,6,opt,name=deploy_annotations,json=deployAnnotations,proto3" json:"deploy_annotations,omitempty"`
	Preconditions          []*Precondition                          `protobuf:"bytes,7,rep,name=preconditions,proto3" json:"preconditions,omitempty"`
	Protections            []*protection.ProtectionAttachmentConfig `protobuf:"bytes,8,rep,name=protections,proto3" json:"protections,omitempty"`
	ConvergenceProtections []*protection.ProtectionAttachmentConfig `protobuf:"bytes,9,rep,name=convergence_protections,json=convergenceProtections,proto3" json:"convergence_protections,omitempty"`
	// protections that all service instances in this release channel should get
	ServiceInstanceProtections []*protection.ProtectionAttachmentConfig `protobuf:"bytes,11,rep,name=service_instance_protections,json=serviceInstanceProtections,proto3" json:"service_instance_protections,omitempty"`
	// constants made available in template substitutions
	Constants []*common_config.Constant `protobuf:"bytes,10,rep,name=constants,proto3" json:"constants,omitempty"`
	Labels    []*labels.LabelDefinition `protobuf:"bytes,13,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (x *ReleaseChannelConfig) Reset() {
	*x = ReleaseChannelConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_release_channel_release_channel_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseChannelConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseChannelConfig) ProtoMessage() {}

func (x *ReleaseChannelConfig) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_release_channel_release_channel_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseChannelConfig.ProtoReflect.Descriptor instead.
func (*ReleaseChannelConfig) Descriptor() ([]byte, []int) {
	return file_prodvana_release_channel_release_channel_config_proto_rawDescGZIP(), []int{1}
}

func (x *ReleaseChannelConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReleaseChannelConfig) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *ReleaseChannelConfig) GetOrder() int64 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *ReleaseChannelConfig) GetMaturity() common_config.Maturity {
	if x != nil {
		return x.Maturity
	}
	return common_config.Maturity(0)
}

func (x *ReleaseChannelConfig) GetPolicy() *Policy {
	if x != nil {
		return x.Policy
	}
	return nil
}

func (x *ReleaseChannelConfig) GetRuntimes() []*ReleaseChannelRuntimeConfig {
	if x != nil {
		return x.Runtimes
	}
	return nil
}

func (x *ReleaseChannelConfig) GetDeployAnnotations() *workflow.AnnotationsConfig {
	if x != nil {
		return x.DeployAnnotations
	}
	return nil
}

func (x *ReleaseChannelConfig) GetPreconditions() []*Precondition {
	if x != nil {
		return x.Preconditions
	}
	return nil
}

func (x *ReleaseChannelConfig) GetProtections() []*protection.ProtectionAttachmentConfig {
	if x != nil {
		return x.Protections
	}
	return nil
}

func (x *ReleaseChannelConfig) GetConvergenceProtections() []*protection.ProtectionAttachmentConfig {
	if x != nil {
		return x.ConvergenceProtections
	}
	return nil
}

func (x *ReleaseChannelConfig) GetServiceInstanceProtections() []*protection.ProtectionAttachmentConfig {
	if x != nil {
		return x.ServiceInstanceProtections
	}
	return nil
}

func (x *ReleaseChannelConfig) GetConstants() []*common_config.Constant {
	if x != nil {
		return x.Constants
	}
	return nil
}

func (x *ReleaseChannelConfig) GetLabels() []*labels.LabelDefinition {
	if x != nil {
		return x.Labels
	}
	return nil
}

type Precondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Precondition:
	//
	//	*Precondition_ReleaseChannelStable_
	//	*Precondition_ManualApproval_
	//	*Precondition_CustomTask_
	Precondition isPrecondition_Precondition `protobuf_oneof:"precondition"`
}

func (x *Precondition) Reset() {
	*x = Precondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_release_channel_release_channel_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Precondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Precondition) ProtoMessage() {}

func (x *Precondition) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_release_channel_release_channel_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Precondition.ProtoReflect.Descriptor instead.
func (*Precondition) Descriptor() ([]byte, []int) {
	return file_prodvana_release_channel_release_channel_config_proto_rawDescGZIP(), []int{2}
}

func (m *Precondition) GetPrecondition() isPrecondition_Precondition {
	if m != nil {
		return m.Precondition
	}
	return nil
}

func (x *Precondition) GetReleaseChannelStable() *Precondition_ReleaseChannelStable {
	if x, ok := x.GetPrecondition().(*Precondition_ReleaseChannelStable_); ok {
		return x.ReleaseChannelStable
	}
	return nil
}

func (x *Precondition) GetManualApproval() *Precondition_ManualApproval {
	if x, ok := x.GetPrecondition().(*Precondition_ManualApproval_); ok {
		return x.ManualApproval
	}
	return nil
}

func (x *Precondition) GetCustomTask() *Precondition_CustomTask {
	if x, ok := x.GetPrecondition().(*Precondition_CustomTask_); ok {
		return x.CustomTask
	}
	return nil
}

type isPrecondition_Precondition interface {
	isPrecondition_Precondition()
}

type Precondition_ReleaseChannelStable_ struct {
	ReleaseChannelStable *Precondition_ReleaseChannelStable `protobuf:"bytes,1,opt,name=release_channel_stable,json=releaseChannelStable,proto3,oneof"`
}

type Precondition_ManualApproval_ struct {
	ManualApproval *Precondition_ManualApproval `protobuf:"bytes,2,opt,name=manual_approval,json=manualApproval,proto3,oneof"`
}

type Precondition_CustomTask_ struct {
	CustomTask *Precondition_CustomTask `protobuf:"bytes,3,opt,name=custom_task,json=customTask,proto3,oneof"`
}

func (*Precondition_ReleaseChannelStable_) isPrecondition_Precondition() {}

func (*Precondition_ManualApproval_) isPrecondition_Precondition() {}

func (*Precondition_CustomTask_) isPrecondition_Precondition() {}

type ReleaseChannelRuntimeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Runtime string `protobuf:"bytes,2,opt,name=runtime,proto3" json:"runtime,omitempty"`
	// Optional identifier for this runtime connection within this release channel,
	// useful if the release channel has multiple runtimes of the same type.
	// Defaults to the value of `runtime“.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are assignable to Capability:
	//
	//	*ReleaseChannelRuntimeConfig_ContainerOrchestration
	Capability isReleaseChannelRuntimeConfig_Capability `protobuf_oneof:"capability"`
	// set internally by prodvana, overridden even if set manually.
	Type RuntimeConnectionType `protobuf:"varint,4,opt,name=type,proto3,enum=prodvana.release_channel.RuntimeConnectionType" json:"type,omitempty"`
}

func (x *ReleaseChannelRuntimeConfig) Reset() {
	*x = ReleaseChannelRuntimeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_release_channel_release_channel_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseChannelRuntimeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseChannelRuntimeConfig) ProtoMessage() {}

func (x *ReleaseChannelRuntimeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_release_channel_release_channel_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseChannelRuntimeConfig.ProtoReflect.Descriptor instead.
func (*ReleaseChannelRuntimeConfig) Descriptor() ([]byte, []int) {
	return file_prodvana_release_channel_release_channel_config_proto_rawDescGZIP(), []int{3}
}

func (x *ReleaseChannelRuntimeConfig) GetRuntime() string {
	if x != nil {
		return x.Runtime
	}
	return ""
}

func (x *ReleaseChannelRuntimeConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *ReleaseChannelRuntimeConfig) GetCapability() isReleaseChannelRuntimeConfig_Capability {
	if m != nil {
		return m.Capability
	}
	return nil
}

func (x *ReleaseChannelRuntimeConfig) GetContainerOrchestration() *runtimes.ContainerOrchestrationRuntime {
	if x, ok := x.GetCapability().(*ReleaseChannelRuntimeConfig_ContainerOrchestration); ok {
		return x.ContainerOrchestration
	}
	return nil
}

func (x *ReleaseChannelRuntimeConfig) GetType() RuntimeConnectionType {
	if x != nil {
		return x.Type
	}
	return RuntimeConnectionType_UNKNOWN_CONNECTION
}

type isReleaseChannelRuntimeConfig_Capability interface {
	isReleaseChannelRuntimeConfig_Capability()
}

type ReleaseChannelRuntimeConfig_ContainerOrchestration struct {
	ContainerOrchestration *runtimes.ContainerOrchestrationRuntime `protobuf:"bytes,1,opt,name=container_orchestration,json=containerOrchestration,proto3,oneof"`
}

func (*ReleaseChannelRuntimeConfig_ContainerOrchestration) isReleaseChannelRuntimeConfig_Capability() {
}

type ReleaseChannelGroupGeneratorConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// label selector for runtimes to generate release channels for.
	// One release channel will be generated for each runtime that matches this selector.
	// The selector will automatically be intersected with "@type=runtime".
	RuntimeSelector string `protobuf:"bytes,2,opt,name=runtime_selector,json=runtimeSelector,proto3" json:"runtime_selector,omitempty"`
	// By default, if the runtime selector returns an empty list of runtimes, Prodvana will error out.
	// Set allow_empty to true to explicitly allow the selector to return an empty list.
	AllowEmpty bool `protobuf:"varint,3,opt,name=allow_empty,json=allowEmpty,proto3" json:"allow_empty,omitempty"`
	// optionally customize how the release channel will be generated.
	// Template variables .Builtins.Group an d.Builtins.Runtime are available.
	// Any value specified here will be merged with:
	// name: {{.Builtins.Group}}-{{.Builtins.Runtime.Name}}
	// group: {{.Builtins.Group}}
	// runtimes:
	// - runtime: {{Builtins.Runtime.Name}}
	Template *ReleaseChannelConfig `protobuf:"bytes,4,opt,name=template,proto3" json:"template,omitempty"`
}

func (x *ReleaseChannelGroupGeneratorConfig) Reset() {
	*x = ReleaseChannelGroupGeneratorConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_release_channel_release_channel_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseChannelGroupGeneratorConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseChannelGroupGeneratorConfig) ProtoMessage() {}

func (x *ReleaseChannelGroupGeneratorConfig) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_release_channel_release_channel_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseChannelGroupGeneratorConfig.ProtoReflect.Descriptor instead.
func (*ReleaseChannelGroupGeneratorConfig) Descriptor() ([]byte, []int) {
	return file_prodvana_release_channel_release_channel_config_proto_rawDescGZIP(), []int{4}
}

func (x *ReleaseChannelGroupGeneratorConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReleaseChannelGroupGeneratorConfig) GetRuntimeSelector() string {
	if x != nil {
		return x.RuntimeSelector
	}
	return ""
}

func (x *ReleaseChannelGroupGeneratorConfig) GetAllowEmpty() bool {
	if x != nil {
		return x.AllowEmpty
	}
	return false
}

func (x *ReleaseChannelGroupGeneratorConfig) GetTemplate() *ReleaseChannelConfig {
	if x != nil {
		return x.Template
	}
	return nil
}

type Precondition_ReleaseChannelStable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to StableOneof:
	//
	//	*Precondition_ReleaseChannelStable_ReleaseChannel
	StableOneof isPrecondition_ReleaseChannelStable_StableOneof `protobuf_oneof:"stable_oneof"`
}

func (x *Precondition_ReleaseChannelStable) Reset() {
	*x = Precondition_ReleaseChannelStable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_release_channel_release_channel_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Precondition_ReleaseChannelStable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Precondition_ReleaseChannelStable) ProtoMessage() {}

func (x *Precondition_ReleaseChannelStable) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_release_channel_release_channel_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Precondition_ReleaseChannelStable.ProtoReflect.Descriptor instead.
func (*Precondition_ReleaseChannelStable) Descriptor() ([]byte, []int) {
	return file_prodvana_release_channel_release_channel_config_proto_rawDescGZIP(), []int{2, 0}
}

func (m *Precondition_ReleaseChannelStable) GetStableOneof() isPrecondition_ReleaseChannelStable_StableOneof {
	if m != nil {
		return m.StableOneof
	}
	return nil
}

func (x *Precondition_ReleaseChannelStable) GetReleaseChannel() string {
	if x, ok := x.GetStableOneof().(*Precondition_ReleaseChannelStable_ReleaseChannel); ok {
		return x.ReleaseChannel
	}
	return ""
}

type isPrecondition_ReleaseChannelStable_StableOneof interface {
	isPrecondition_ReleaseChannelStable_StableOneof()
}

type Precondition_ReleaseChannelStable_ReleaseChannel struct {
	ReleaseChannel string `protobuf:"bytes,1,opt,name=release_channel,json=releaseChannel,proto3,oneof"`
}

func (*Precondition_ReleaseChannelStable_ReleaseChannel) isPrecondition_ReleaseChannelStable_StableOneof() {
}

type Precondition_ManualApproval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// request approval on every apply action, not just the first.
	// only works for runtime extensions, will do nothing for kubernetes services.
	EveryAction bool `protobuf:"varint,3,opt,name=every_action,json=everyAction,proto3" json:"every_action,omitempty"`
}

func (x *Precondition_ManualApproval) Reset() {
	*x = Precondition_ManualApproval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_release_channel_release_channel_config_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Precondition_ManualApproval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Precondition_ManualApproval) ProtoMessage() {}

func (x *Precondition_ManualApproval) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_release_channel_release_channel_config_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Precondition_ManualApproval.ProtoReflect.Descriptor instead.
func (*Precondition_ManualApproval) Descriptor() ([]byte, []int) {
	return file_prodvana_release_channel_release_channel_config_proto_rawDescGZIP(), []int{2, 1}
}

func (x *Precondition_ManualApproval) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Precondition_ManualApproval) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Precondition_ManualApproval) GetEveryAction() bool {
	if x != nil {
		return x.EveryAction
	}
	return false
}

type Precondition_CustomTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskName   string                `protobuf:"bytes,1,opt,name=task_name,json=taskName,proto3" json:"task_name,omitempty"`
	CustomTask *pipelines.CustomTask `protobuf:"bytes,2,opt,name=custom_task,json=customTask,proto3" json:"custom_task,omitempty"`
}

func (x *Precondition_CustomTask) Reset() {
	*x = Precondition_CustomTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_release_channel_release_channel_config_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Precondition_CustomTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Precondition_CustomTask) ProtoMessage() {}

func (x *Precondition_CustomTask) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_release_channel_release_channel_config_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Precondition_CustomTask.ProtoReflect.Descriptor instead.
func (*Precondition_CustomTask) Descriptor() ([]byte, []int) {
	return file_prodvana_release_channel_release_channel_config_proto_rawDescGZIP(), []int{2, 2}
}

func (x *Precondition_CustomTask) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *Precondition_CustomTask) GetCustomTask() *pipelines.CustomTask {
	if x != nil {
		return x.CustomTask
	}
	return nil
}

var File_prodvana_release_channel_release_channel_config_proto protoreflect.FileDescriptor

var file_prodvana_release_channel_release_channel_config_proto_rawDesc = []byte{
	0x0a, 0x35, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e,
	0x61, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x1a, 0x26, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x65, 0x6e, 0x76, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x70, 0x72, 0x6f,
	0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x22, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x73, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x70, 0x72, 0x6f,
	0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x2f, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe5, 0x01, 0x0a, 0x06, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x7a, 0x0a, 0x0b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x65, 0x6e, 0x76, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x76, 0x61, 0x6e, 0x61, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x27, 0xfa, 0x42, 0x24,
	0x9a, 0x01, 0x21, 0x18, 0x01, 0x22, 0x1d, 0x72, 0x1b, 0x32, 0x19, 0x5e, 0x5b, 0x61, 0x2d, 0x7a,
	0x41, 0x2d, 0x5a, 0x5f, 0x5d, 0x2b, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39,
	0x5f, 0x5d, 0x2a, 0x24, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x76,
	0x1a, 0x5f, 0x0a, 0x0f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x76, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x6e,
	0x76, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x9b, 0x07, 0x0a, 0x14, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3f, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xfa, 0x42, 0x28, 0x72, 0x26, 0x10,
	0x01, 0x18, 0x3f, 0x32, 0x20, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x5b, 0x61, 0x2d, 0x7a,
	0x30, 0x2d, 0x39, 0x2d, 0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x7b,
	0x30, 0x2c, 0x31, 0x7d, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x76, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x6d, 0x61, 0x74,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61,
	0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x51, 0x0a, 0x08, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x08, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x12, 0x53, 0x0a, 0x12, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x11, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4c, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x51, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x68, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x76, 0x61, 0x6e, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x71, 0x0a, 0x1c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x1a, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3e, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61,
	0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22,
	0x97, 0x05, 0x0a, 0x0c, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x73, 0x0a, 0x16, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3b, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x50, 0x72, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x00, 0x52,
	0x14, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x60, 0x0a, 0x0f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x0e, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x54, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x48,
	0x00, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x1a, 0x61, 0x0a,
	0x14, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x0f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x42, 0x0e, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x69, 0x0a, 0x0e, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x76, 0x65, 0x72,
	0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x65, 0x76, 0x65, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x6a, 0x0a, 0x0a, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61,
	0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x0e, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x52, 0x0a, 0x70,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe6, 0x02, 0x0a, 0x1b, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x45, 0x0a, 0x07, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xfa, 0x42, 0x28, 0x72,
	0x26, 0x10, 0x01, 0x18, 0x3f, 0x32, 0x20, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x5b, 0x61,
	0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d,
	0x29, 0x7b, 0x30, 0x2c, 0x31, 0x7d, 0x24, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x40, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c,
	0xfa, 0x42, 0x29, 0x72, 0x27, 0x10, 0x00, 0x18, 0x3f, 0x32, 0x21, 0x5e, 0x5b, 0x61, 0x2d, 0x7a,
	0x5d, 0x3f, 0x28, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5d, 0x2a, 0x5b, 0x61, 0x2d,
	0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x7b, 0x30, 0x2c, 0x31, 0x7d, 0x24, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x6b, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f,
	0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x43, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x22, 0x90, 0x02, 0x0a, 0x22, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3f, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xfa, 0x42, 0x28, 0x72, 0x26, 0x10, 0x01,
	0x18, 0x3f, 0x32, 0x20, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x5b, 0x61, 0x2d, 0x7a, 0x30,
	0x2d, 0x39, 0x2d, 0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x7b, 0x30,
	0x2c, 0x31, 0x7d, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x10, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0f, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x54, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x08, 0x01, 0x52, 0x08, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x2a, 0x56, 0x0a, 0x15, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x12, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x4f, 0x4e, 0x47, 0x5f, 0x4c,
	0x49, 0x56, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0d,
	0x0a, 0x09, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x42, 0x54, 0x5a,
	0x52, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x64,
	0x76, 0x61, 0x6e, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2d, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61,
	0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_prodvana_release_channel_release_channel_config_proto_rawDescOnce sync.Once
	file_prodvana_release_channel_release_channel_config_proto_rawDescData = file_prodvana_release_channel_release_channel_config_proto_rawDesc
)

func file_prodvana_release_channel_release_channel_config_proto_rawDescGZIP() []byte {
	file_prodvana_release_channel_release_channel_config_proto_rawDescOnce.Do(func() {
		file_prodvana_release_channel_release_channel_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_prodvana_release_channel_release_channel_config_proto_rawDescData)
	})
	return file_prodvana_release_channel_release_channel_config_proto_rawDescData
}

var file_prodvana_release_channel_release_channel_config_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_prodvana_release_channel_release_channel_config_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_prodvana_release_channel_release_channel_config_proto_goTypes = []interface{}{
	(RuntimeConnectionType)(0),                 // 0: prodvana.release_channel.RuntimeConnectionType
	(*Policy)(nil),                             // 1: prodvana.release_channel.Policy
	(*ReleaseChannelConfig)(nil),               // 2: prodvana.release_channel.ReleaseChannelConfig
	(*Precondition)(nil),                       // 3: prodvana.release_channel.Precondition
	(*ReleaseChannelRuntimeConfig)(nil),        // 4: prodvana.release_channel.ReleaseChannelRuntimeConfig
	(*ReleaseChannelGroupGeneratorConfig)(nil), // 5: prodvana.release_channel.ReleaseChannelGroupGeneratorConfig
	nil, // 6: prodvana.release_channel.Policy.DefaultEnvEntry
	(*Precondition_ReleaseChannelStable)(nil),      // 7: prodvana.release_channel.Precondition.ReleaseChannelStable
	(*Precondition_ManualApproval)(nil),            // 8: prodvana.release_channel.Precondition.ManualApproval
	(*Precondition_CustomTask)(nil),                // 9: prodvana.release_channel.Precondition.CustomTask
	(common_config.Maturity)(0),                    // 10: prodvana.common_config.Maturity
	(*workflow.AnnotationsConfig)(nil),             // 11: prodvana.workflow.AnnotationsConfig
	(*protection.ProtectionAttachmentConfig)(nil),  // 12: prodvana.protection.ProtectionAttachmentConfig
	(*common_config.Constant)(nil),                 // 13: prodvana.common_config.Constant
	(*labels.LabelDefinition)(nil),                 // 14: prodvana.labels.LabelDefinition
	(*runtimes.ContainerOrchestrationRuntime)(nil), // 15: prodvana.runtimes.ContainerOrchestrationRuntime
	(*common_config.EnvValue)(nil),                 // 16: prodvana.common_config.EnvValue
	(*pipelines.CustomTask)(nil),                   // 17: prodvana.pipelines.CustomTask
}
var file_prodvana_release_channel_release_channel_config_proto_depIdxs = []int32{
	6,  // 0: prodvana.release_channel.Policy.default_env:type_name -> prodvana.release_channel.Policy.DefaultEnvEntry
	10, // 1: prodvana.release_channel.ReleaseChannelConfig.maturity:type_name -> prodvana.common_config.Maturity
	1,  // 2: prodvana.release_channel.ReleaseChannelConfig.policy:type_name -> prodvana.release_channel.Policy
	4,  // 3: prodvana.release_channel.ReleaseChannelConfig.runtimes:type_name -> prodvana.release_channel.ReleaseChannelRuntimeConfig
	11, // 4: prodvana.release_channel.ReleaseChannelConfig.deploy_annotations:type_name -> prodvana.workflow.AnnotationsConfig
	3,  // 5: prodvana.release_channel.ReleaseChannelConfig.preconditions:type_name -> prodvana.release_channel.Precondition
	12, // 6: prodvana.release_channel.ReleaseChannelConfig.protections:type_name -> prodvana.protection.ProtectionAttachmentConfig
	12, // 7: prodvana.release_channel.ReleaseChannelConfig.convergence_protections:type_name -> prodvana.protection.ProtectionAttachmentConfig
	12, // 8: prodvana.release_channel.ReleaseChannelConfig.service_instance_protections:type_name -> prodvana.protection.ProtectionAttachmentConfig
	13, // 9: prodvana.release_channel.ReleaseChannelConfig.constants:type_name -> prodvana.common_config.Constant
	14, // 10: prodvana.release_channel.ReleaseChannelConfig.labels:type_name -> prodvana.labels.LabelDefinition
	7,  // 11: prodvana.release_channel.Precondition.release_channel_stable:type_name -> prodvana.release_channel.Precondition.ReleaseChannelStable
	8,  // 12: prodvana.release_channel.Precondition.manual_approval:type_name -> prodvana.release_channel.Precondition.ManualApproval
	9,  // 13: prodvana.release_channel.Precondition.custom_task:type_name -> prodvana.release_channel.Precondition.CustomTask
	15, // 14: prodvana.release_channel.ReleaseChannelRuntimeConfig.container_orchestration:type_name -> prodvana.runtimes.ContainerOrchestrationRuntime
	0,  // 15: prodvana.release_channel.ReleaseChannelRuntimeConfig.type:type_name -> prodvana.release_channel.RuntimeConnectionType
	2,  // 16: prodvana.release_channel.ReleaseChannelGroupGeneratorConfig.template:type_name -> prodvana.release_channel.ReleaseChannelConfig
	16, // 17: prodvana.release_channel.Policy.DefaultEnvEntry.value:type_name -> prodvana.common_config.EnvValue
	17, // 18: prodvana.release_channel.Precondition.CustomTask.custom_task:type_name -> prodvana.pipelines.CustomTask
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_prodvana_release_channel_release_channel_config_proto_init() }
func file_prodvana_release_channel_release_channel_config_proto_init() {
	if File_prodvana_release_channel_release_channel_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_prodvana_release_channel_release_channel_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_release_channel_release_channel_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseChannelConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_release_channel_release_channel_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Precondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_release_channel_release_channel_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseChannelRuntimeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_release_channel_release_channel_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseChannelGroupGeneratorConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_release_channel_release_channel_config_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Precondition_ReleaseChannelStable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_release_channel_release_channel_config_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Precondition_ManualApproval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_release_channel_release_channel_config_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Precondition_CustomTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_prodvana_release_channel_release_channel_config_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Precondition_ReleaseChannelStable_)(nil),
		(*Precondition_ManualApproval_)(nil),
		(*Precondition_CustomTask_)(nil),
	}
	file_prodvana_release_channel_release_channel_config_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*ReleaseChannelRuntimeConfig_ContainerOrchestration)(nil),
	}
	file_prodvana_release_channel_release_channel_config_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*Precondition_ReleaseChannelStable_ReleaseChannel)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_prodvana_release_channel_release_channel_config_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_prodvana_release_channel_release_channel_config_proto_goTypes,
		DependencyIndexes: file_prodvana_release_channel_release_channel_config_proto_depIdxs,
		EnumInfos:         file_prodvana_release_channel_release_channel_config_proto_enumTypes,
		MessageInfos:      file_prodvana_release_channel_release_channel_config_proto_msgTypes,
	}.Build()
	File_prodvana_release_channel_release_channel_config_proto = out.File
	file_prodvana_release_channel_release_channel_config_proto_rawDesc = nil
	file_prodvana_release_channel_release_channel_config_proto_goTypes = nil
	file_prodvana_release_channel_release_channel_config_proto_depIdxs = nil
}
