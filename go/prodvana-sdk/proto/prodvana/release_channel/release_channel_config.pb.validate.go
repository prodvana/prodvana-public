// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: prodvana/release_channel/release_channel_config.proto

package release_channel

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	common_config "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/common_config"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = common_config.Maturity(0)
)

// Validate checks the field values on Policy with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Policy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Policy with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PolicyMultiError, or nil if none found.
func (m *Policy) ValidateAll() error {
	return m.validate(true)
}

func (m *Policy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetDefaultEnv()))
		i := 0
		for key := range m.GetDefaultEnv() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetDefaultEnv()[key]
			_ = val

			if val == nil {
				err := PolicyValidationError{
					field:  fmt.Sprintf("DefaultEnv[%v]", key),
					reason: "value cannot be sparse, all pairs must be non-nil",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			if !_Policy_DefaultEnv_Pattern.MatchString(key) {
				err := PolicyValidationError{
					field:  fmt.Sprintf("DefaultEnv[%v]", key),
					reason: "value does not match regex pattern \"^[a-zA-Z_]+[a-zA-Z0-9_]*$\"",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, PolicyValidationError{
							field:  fmt.Sprintf("DefaultEnv[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, PolicyValidationError{
							field:  fmt.Sprintf("DefaultEnv[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return PolicyValidationError{
						field:  fmt.Sprintf("DefaultEnv[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return PolicyMultiError(errors)
	}

	return nil
}

// PolicyMultiError is an error wrapping multiple validation errors returned by
// Policy.ValidateAll() if the designated constraints aren't met.
type PolicyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PolicyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PolicyMultiError) AllErrors() []error { return m }

// PolicyValidationError is the validation error returned by Policy.Validate if
// the designated constraints aren't met.
type PolicyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolicyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolicyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolicyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolicyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolicyValidationError) ErrorName() string { return "PolicyValidationError" }

// Error satisfies the builtin error interface
func (e PolicyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolicy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolicyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolicyValidationError{}

var _Policy_DefaultEnv_Pattern = regexp.MustCompile("^[a-zA-Z_]+[a-zA-Z0-9_]*$")

// Validate checks the field values on ReleaseChannelConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReleaseChannelConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReleaseChannelConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReleaseChannelConfigMultiError, or nil if none found.
func (m *ReleaseChannelConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *ReleaseChannelConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 63 {
		err := ReleaseChannelConfigValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 63 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ReleaseChannelConfig_Name_Pattern.MatchString(m.GetName()) {
		err := ReleaseChannelConfigValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[a-z]([a-z0-9-]*[a-z0-9]){0,1}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Order

	// no validation rules for Maturity

	if all {
		switch v := interface{}(m.GetPolicy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReleaseChannelConfigValidationError{
					field:  "Policy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReleaseChannelConfigValidationError{
					field:  "Policy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReleaseChannelConfigValidationError{
				field:  "Policy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetRuntimes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReleaseChannelConfigValidationError{
						field:  fmt.Sprintf("Runtimes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReleaseChannelConfigValidationError{
						field:  fmt.Sprintf("Runtimes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReleaseChannelConfigValidationError{
					field:  fmt.Sprintf("Runtimes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetDeployAnnotations()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReleaseChannelConfigValidationError{
					field:  "DeployAnnotations",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReleaseChannelConfigValidationError{
					field:  "DeployAnnotations",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeployAnnotations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReleaseChannelConfigValidationError{
				field:  "DeployAnnotations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetPreconditions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReleaseChannelConfigValidationError{
						field:  fmt.Sprintf("Preconditions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReleaseChannelConfigValidationError{
						field:  fmt.Sprintf("Preconditions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReleaseChannelConfigValidationError{
					field:  fmt.Sprintf("Preconditions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetProtections() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReleaseChannelConfigValidationError{
						field:  fmt.Sprintf("Protections[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReleaseChannelConfigValidationError{
						field:  fmt.Sprintf("Protections[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReleaseChannelConfigValidationError{
					field:  fmt.Sprintf("Protections[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetConvergenceProtections() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReleaseChannelConfigValidationError{
						field:  fmt.Sprintf("ConvergenceProtections[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReleaseChannelConfigValidationError{
						field:  fmt.Sprintf("ConvergenceProtections[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReleaseChannelConfigValidationError{
					field:  fmt.Sprintf("ConvergenceProtections[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ReleaseChannelConfigMultiError(errors)
	}

	return nil
}

// ReleaseChannelConfigMultiError is an error wrapping multiple validation
// errors returned by ReleaseChannelConfig.ValidateAll() if the designated
// constraints aren't met.
type ReleaseChannelConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReleaseChannelConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReleaseChannelConfigMultiError) AllErrors() []error { return m }

// ReleaseChannelConfigValidationError is the validation error returned by
// ReleaseChannelConfig.Validate if the designated constraints aren't met.
type ReleaseChannelConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleaseChannelConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleaseChannelConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleaseChannelConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleaseChannelConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleaseChannelConfigValidationError) ErrorName() string {
	return "ReleaseChannelConfigValidationError"
}

// Error satisfies the builtin error interface
func (e ReleaseChannelConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleaseChannelConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleaseChannelConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleaseChannelConfigValidationError{}

var _ReleaseChannelConfig_Name_Pattern = regexp.MustCompile("^[a-z]([a-z0-9-]*[a-z0-9]){0,1}$")

// Validate checks the field values on ProtectionReleaseChannelAttachment with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ProtectionReleaseChannelAttachment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProtectionReleaseChannelAttachment
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ProtectionReleaseChannelAttachmentMultiError, or nil if none found.
func (m *ProtectionReleaseChannelAttachment) ValidateAll() error {
	return m.validate(true)
}

func (m *ProtectionReleaseChannelAttachment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 0 || l > 63 {
		err := ProtectionReleaseChannelAttachmentValidationError{
			field:  "Name",
			reason: "value length must be between 0 and 63 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ProtectionReleaseChannelAttachment_Name_Pattern.MatchString(m.GetName()) {
		err := ProtectionReleaseChannelAttachmentValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[a-z]?([a-z0-9-]*[a-z0-9]){0,1}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetRef() == nil {
		err := ProtectionReleaseChannelAttachmentValidationError{
			field:  "Ref",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetRef()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProtectionReleaseChannelAttachmentValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProtectionReleaseChannelAttachmentValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRef()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProtectionReleaseChannelAttachmentValidationError{
				field:  "Ref",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetLifecycle() {
		_, _ = idx, item

		if item == nil {
			err := ProtectionReleaseChannelAttachmentValidationError{
				field:  fmt.Sprintf("Lifecycle[%v]", idx),
				reason: "value is required",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProtectionReleaseChannelAttachmentValidationError{
						field:  fmt.Sprintf("Lifecycle[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProtectionReleaseChannelAttachmentValidationError{
						field:  fmt.Sprintf("Lifecycle[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProtectionReleaseChannelAttachmentValidationError{
					field:  fmt.Sprintf("Lifecycle[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ProtectionReleaseChannelAttachmentMultiError(errors)
	}

	return nil
}

// ProtectionReleaseChannelAttachmentMultiError is an error wrapping multiple
// validation errors returned by
// ProtectionReleaseChannelAttachment.ValidateAll() if the designated
// constraints aren't met.
type ProtectionReleaseChannelAttachmentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProtectionReleaseChannelAttachmentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProtectionReleaseChannelAttachmentMultiError) AllErrors() []error { return m }

// ProtectionReleaseChannelAttachmentValidationError is the validation error
// returned by ProtectionReleaseChannelAttachment.Validate if the designated
// constraints aren't met.
type ProtectionReleaseChannelAttachmentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProtectionReleaseChannelAttachmentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProtectionReleaseChannelAttachmentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProtectionReleaseChannelAttachmentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProtectionReleaseChannelAttachmentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProtectionReleaseChannelAttachmentValidationError) ErrorName() string {
	return "ProtectionReleaseChannelAttachmentValidationError"
}

// Error satisfies the builtin error interface
func (e ProtectionReleaseChannelAttachmentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProtectionReleaseChannelAttachment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProtectionReleaseChannelAttachmentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProtectionReleaseChannelAttachmentValidationError{}

var _ProtectionReleaseChannelAttachment_Name_Pattern = regexp.MustCompile("^[a-z]?([a-z0-9-]*[a-z0-9]){0,1}$")

// Validate checks the field values on Precondition with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Precondition) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Precondition with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PreconditionMultiError, or
// nil if none found.
func (m *Precondition) ValidateAll() error {
	return m.validate(true)
}

func (m *Precondition) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Precondition.(type) {
	case *Precondition_ReleaseChannelStable_:
		if v == nil {
			err := PreconditionValidationError{
				field:  "Precondition",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetReleaseChannelStable()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PreconditionValidationError{
						field:  "ReleaseChannelStable",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PreconditionValidationError{
						field:  "ReleaseChannelStable",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetReleaseChannelStable()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PreconditionValidationError{
					field:  "ReleaseChannelStable",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Precondition_ManualApproval_:
		if v == nil {
			err := PreconditionValidationError{
				field:  "Precondition",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetManualApproval()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PreconditionValidationError{
						field:  "ManualApproval",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PreconditionValidationError{
						field:  "ManualApproval",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetManualApproval()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PreconditionValidationError{
					field:  "ManualApproval",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Precondition_CustomTask_:
		if v == nil {
			err := PreconditionValidationError{
				field:  "Precondition",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetCustomTask()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PreconditionValidationError{
						field:  "CustomTask",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PreconditionValidationError{
						field:  "CustomTask",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCustomTask()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PreconditionValidationError{
					field:  "CustomTask",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return PreconditionMultiError(errors)
	}

	return nil
}

// PreconditionMultiError is an error wrapping multiple validation errors
// returned by Precondition.ValidateAll() if the designated constraints aren't met.
type PreconditionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PreconditionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PreconditionMultiError) AllErrors() []error { return m }

// PreconditionValidationError is the validation error returned by
// Precondition.Validate if the designated constraints aren't met.
type PreconditionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PreconditionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PreconditionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PreconditionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PreconditionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PreconditionValidationError) ErrorName() string { return "PreconditionValidationError" }

// Error satisfies the builtin error interface
func (e PreconditionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrecondition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PreconditionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PreconditionValidationError{}

// Validate checks the field values on ReleaseChannelRuntimeConfig with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReleaseChannelRuntimeConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReleaseChannelRuntimeConfig with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReleaseChannelRuntimeConfigMultiError, or nil if none found.
func (m *ReleaseChannelRuntimeConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *ReleaseChannelRuntimeConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetRuntime()); l < 1 || l > 63 {
		err := ReleaseChannelRuntimeConfigValidationError{
			field:  "Runtime",
			reason: "value length must be between 1 and 63 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ReleaseChannelRuntimeConfig_Runtime_Pattern.MatchString(m.GetRuntime()) {
		err := ReleaseChannelRuntimeConfigValidationError{
			field:  "Runtime",
			reason: "value does not match regex pattern \"^[a-z]([a-z0-9-]*[a-z0-9]){0,1}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 0 || l > 63 {
		err := ReleaseChannelRuntimeConfigValidationError{
			field:  "Name",
			reason: "value length must be between 0 and 63 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ReleaseChannelRuntimeConfig_Name_Pattern.MatchString(m.GetName()) {
		err := ReleaseChannelRuntimeConfigValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[a-z]?([a-z0-9-]*[a-z0-9]){0,1}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Type

	switch v := m.Capability.(type) {
	case *ReleaseChannelRuntimeConfig_ContainerOrchestration:
		if v == nil {
			err := ReleaseChannelRuntimeConfigValidationError{
				field:  "Capability",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetContainerOrchestration()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReleaseChannelRuntimeConfigValidationError{
						field:  "ContainerOrchestration",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReleaseChannelRuntimeConfigValidationError{
						field:  "ContainerOrchestration",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetContainerOrchestration()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReleaseChannelRuntimeConfigValidationError{
					field:  "ContainerOrchestration",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ReleaseChannelRuntimeConfigMultiError(errors)
	}

	return nil
}

// ReleaseChannelRuntimeConfigMultiError is an error wrapping multiple
// validation errors returned by ReleaseChannelRuntimeConfig.ValidateAll() if
// the designated constraints aren't met.
type ReleaseChannelRuntimeConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReleaseChannelRuntimeConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReleaseChannelRuntimeConfigMultiError) AllErrors() []error { return m }

// ReleaseChannelRuntimeConfigValidationError is the validation error returned
// by ReleaseChannelRuntimeConfig.Validate if the designated constraints
// aren't met.
type ReleaseChannelRuntimeConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleaseChannelRuntimeConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleaseChannelRuntimeConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleaseChannelRuntimeConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleaseChannelRuntimeConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleaseChannelRuntimeConfigValidationError) ErrorName() string {
	return "ReleaseChannelRuntimeConfigValidationError"
}

// Error satisfies the builtin error interface
func (e ReleaseChannelRuntimeConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleaseChannelRuntimeConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleaseChannelRuntimeConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleaseChannelRuntimeConfigValidationError{}

var _ReleaseChannelRuntimeConfig_Runtime_Pattern = regexp.MustCompile("^[a-z]([a-z0-9-]*[a-z0-9]){0,1}$")

var _ReleaseChannelRuntimeConfig_Name_Pattern = regexp.MustCompile("^[a-z]?([a-z0-9-]*[a-z0-9]){0,1}$")

// Validate checks the field values on Precondition_ReleaseChannelStable with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *Precondition_ReleaseChannelStable) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Precondition_ReleaseChannelStable
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// Precondition_ReleaseChannelStableMultiError, or nil if none found.
func (m *Precondition_ReleaseChannelStable) ValidateAll() error {
	return m.validate(true)
}

func (m *Precondition_ReleaseChannelStable) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReleaseChannel

	if all {
		switch v := interface{}(m.GetDuration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Precondition_ReleaseChannelStableValidationError{
					field:  "Duration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Precondition_ReleaseChannelStableValidationError{
					field:  "Duration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDuration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Precondition_ReleaseChannelStableValidationError{
				field:  "Duration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Precondition_ReleaseChannelStableMultiError(errors)
	}

	return nil
}

// Precondition_ReleaseChannelStableMultiError is an error wrapping multiple
// validation errors returned by
// Precondition_ReleaseChannelStable.ValidateAll() if the designated
// constraints aren't met.
type Precondition_ReleaseChannelStableMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Precondition_ReleaseChannelStableMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Precondition_ReleaseChannelStableMultiError) AllErrors() []error { return m }

// Precondition_ReleaseChannelStableValidationError is the validation error
// returned by Precondition_ReleaseChannelStable.Validate if the designated
// constraints aren't met.
type Precondition_ReleaseChannelStableValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Precondition_ReleaseChannelStableValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Precondition_ReleaseChannelStableValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Precondition_ReleaseChannelStableValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Precondition_ReleaseChannelStableValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Precondition_ReleaseChannelStableValidationError) ErrorName() string {
	return "Precondition_ReleaseChannelStableValidationError"
}

// Error satisfies the builtin error interface
func (e Precondition_ReleaseChannelStableValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrecondition_ReleaseChannelStable.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Precondition_ReleaseChannelStableValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Precondition_ReleaseChannelStableValidationError{}

// Validate checks the field values on Precondition_ManualApproval with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Precondition_ManualApproval) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Precondition_ManualApproval with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Precondition_ManualApprovalMultiError, or nil if none found.
func (m *Precondition_ManualApproval) ValidateAll() error {
	return m.validate(true)
}

func (m *Precondition_ManualApproval) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return Precondition_ManualApprovalMultiError(errors)
	}

	return nil
}

// Precondition_ManualApprovalMultiError is an error wrapping multiple
// validation errors returned by Precondition_ManualApproval.ValidateAll() if
// the designated constraints aren't met.
type Precondition_ManualApprovalMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Precondition_ManualApprovalMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Precondition_ManualApprovalMultiError) AllErrors() []error { return m }

// Precondition_ManualApprovalValidationError is the validation error returned
// by Precondition_ManualApproval.Validate if the designated constraints
// aren't met.
type Precondition_ManualApprovalValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Precondition_ManualApprovalValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Precondition_ManualApprovalValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Precondition_ManualApprovalValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Precondition_ManualApprovalValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Precondition_ManualApprovalValidationError) ErrorName() string {
	return "Precondition_ManualApprovalValidationError"
}

// Error satisfies the builtin error interface
func (e Precondition_ManualApprovalValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrecondition_ManualApproval.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Precondition_ManualApprovalValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Precondition_ManualApprovalValidationError{}

// Validate checks the field values on Precondition_CustomTask with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Precondition_CustomTask) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Precondition_CustomTask with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Precondition_CustomTaskMultiError, or nil if none found.
func (m *Precondition_CustomTask) ValidateAll() error {
	return m.validate(true)
}

func (m *Precondition_CustomTask) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskName

	if all {
		switch v := interface{}(m.GetCustomTask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Precondition_CustomTaskValidationError{
					field:  "CustomTask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Precondition_CustomTaskValidationError{
					field:  "CustomTask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustomTask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Precondition_CustomTaskValidationError{
				field:  "CustomTask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Precondition_CustomTaskMultiError(errors)
	}

	return nil
}

// Precondition_CustomTaskMultiError is an error wrapping multiple validation
// errors returned by Precondition_CustomTask.ValidateAll() if the designated
// constraints aren't met.
type Precondition_CustomTaskMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Precondition_CustomTaskMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Precondition_CustomTaskMultiError) AllErrors() []error { return m }

// Precondition_CustomTaskValidationError is the validation error returned by
// Precondition_CustomTask.Validate if the designated constraints aren't met.
type Precondition_CustomTaskValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Precondition_CustomTaskValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Precondition_CustomTaskValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Precondition_CustomTaskValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Precondition_CustomTaskValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Precondition_CustomTaskValidationError) ErrorName() string {
	return "Precondition_CustomTaskValidationError"
}

// Error satisfies the builtin error interface
func (e Precondition_CustomTaskValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrecondition_CustomTask.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Precondition_CustomTaskValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Precondition_CustomTaskValidationError{}
