// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: prodvana/release_channel/object.proto

package release_channel

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ReleaseChannelProtectionAttachment with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ReleaseChannelProtectionAttachment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReleaseChannelProtectionAttachment
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ReleaseChannelProtectionAttachmentMultiError, or nil if none found.
func (m *ReleaseChannelProtectionAttachment) ValidateAll() error {
	return m.validate(true)
}

func (m *ReleaseChannelProtectionAttachment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Protection

	// no validation rules for Attachment

	// no validation rules for DesiredStateId

	// no validation rules for AttachmentId

	if len(errors) > 0 {
		return ReleaseChannelProtectionAttachmentMultiError(errors)
	}

	return nil
}

// ReleaseChannelProtectionAttachmentMultiError is an error wrapping multiple
// validation errors returned by
// ReleaseChannelProtectionAttachment.ValidateAll() if the designated
// constraints aren't met.
type ReleaseChannelProtectionAttachmentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReleaseChannelProtectionAttachmentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReleaseChannelProtectionAttachmentMultiError) AllErrors() []error { return m }

// ReleaseChannelProtectionAttachmentValidationError is the validation error
// returned by ReleaseChannelProtectionAttachment.Validate if the designated
// constraints aren't met.
type ReleaseChannelProtectionAttachmentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleaseChannelProtectionAttachmentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleaseChannelProtectionAttachmentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleaseChannelProtectionAttachmentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleaseChannelProtectionAttachmentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleaseChannelProtectionAttachmentValidationError) ErrorName() string {
	return "ReleaseChannelProtectionAttachmentValidationError"
}

// Error satisfies the builtin error interface
func (e ReleaseChannelProtectionAttachmentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleaseChannelProtectionAttachment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleaseChannelProtectionAttachmentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleaseChannelProtectionAttachmentValidationError{}

// Validate checks the field values on ReleaseChannelState with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReleaseChannelState) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReleaseChannelState with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReleaseChannelStateMultiError, or nil if none found.
func (m *ReleaseChannelState) ValidateAll() error {
	return m.validate(true)
}

func (m *ReleaseChannelState) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProtectionAttachments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReleaseChannelStateValidationError{
						field:  fmt.Sprintf("ProtectionAttachments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReleaseChannelStateValidationError{
						field:  fmt.Sprintf("ProtectionAttachments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReleaseChannelStateValidationError{
					field:  fmt.Sprintf("ProtectionAttachments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ReleaseChannelStateMultiError(errors)
	}

	return nil
}

// ReleaseChannelStateMultiError is an error wrapping multiple validation
// errors returned by ReleaseChannelState.ValidateAll() if the designated
// constraints aren't met.
type ReleaseChannelStateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReleaseChannelStateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReleaseChannelStateMultiError) AllErrors() []error { return m }

// ReleaseChannelStateValidationError is the validation error returned by
// ReleaseChannelState.Validate if the designated constraints aren't met.
type ReleaseChannelStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleaseChannelStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleaseChannelStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleaseChannelStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleaseChannelStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleaseChannelStateValidationError) ErrorName() string {
	return "ReleaseChannelStateValidationError"
}

// Error satisfies the builtin error interface
func (e ReleaseChannelStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleaseChannelState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleaseChannelStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleaseChannelStateValidationError{}

// Validate checks the field values on ReleaseChannel with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReleaseChannel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReleaseChannel with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReleaseChannelMultiError,
// or nil if none found.
func (m *ReleaseChannel) ValidateAll() error {
	return m.validate(true)
}

func (m *ReleaseChannel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMeta()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReleaseChannelValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReleaseChannelValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReleaseChannelValidationError{
				field:  "Meta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReleaseChannelValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReleaseChannelValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReleaseChannelValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetState()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReleaseChannelValidationError{
					field:  "State",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReleaseChannelValidationError{
					field:  "State",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReleaseChannelValidationError{
				field:  "State",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReleaseChannelMultiError(errors)
	}

	return nil
}

// ReleaseChannelMultiError is an error wrapping multiple validation errors
// returned by ReleaseChannel.ValidateAll() if the designated constraints
// aren't met.
type ReleaseChannelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReleaseChannelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReleaseChannelMultiError) AllErrors() []error { return m }

// ReleaseChannelValidationError is the validation error returned by
// ReleaseChannel.Validate if the designated constraints aren't met.
type ReleaseChannelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleaseChannelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleaseChannelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleaseChannelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleaseChannelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleaseChannelValidationError) ErrorName() string { return "ReleaseChannelValidationError" }

// Error satisfies the builtin error interface
func (e ReleaseChannelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleaseChannel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleaseChannelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleaseChannelValidationError{}
