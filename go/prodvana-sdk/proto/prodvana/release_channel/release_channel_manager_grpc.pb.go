// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.10
// source: prodvana/release_channel/release_channel_manager.proto

package release_channel

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ReleaseChannelManager_ConfigureReleaseChannel_FullMethodName = "/prodvana.release_channel.ReleaseChannelManager/ConfigureReleaseChannel"
	ReleaseChannelManager_ListReleaseChannels_FullMethodName     = "/prodvana.release_channel.ReleaseChannelManager/ListReleaseChannels"
	ReleaseChannelManager_DeleteReleaseChannel_FullMethodName    = "/prodvana.release_channel.ReleaseChannelManager/DeleteReleaseChannel"
	ReleaseChannelManager_ListReleaseChannelsV2_FullMethodName   = "/prodvana.release_channel.ReleaseChannelManager/ListReleaseChannelsV2"
	ReleaseChannelManager_GetReleaseChannel_FullMethodName       = "/prodvana.release_channel.ReleaseChannelManager/GetReleaseChannel"
)

// ReleaseChannelManagerClient is the client API for ReleaseChannelManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReleaseChannelManagerClient interface {
	ConfigureReleaseChannel(ctx context.Context, in *ConfigureReleaseChannelReq, opts ...grpc.CallOption) (*ConfigureReleaseChannelResp, error)
	ListReleaseChannels(ctx context.Context, in *ListReleaseChannelsReq, opts ...grpc.CallOption) (*ListReleaseChannelsResp, error)
	DeleteReleaseChannel(ctx context.Context, in *DeleteReleaseChannelReq, opts ...grpc.CallOption) (*DeleteReleaseChannelResp, error)
	// identical to ListReleaseChannels, kept for backwards compatibility
	ListReleaseChannelsV2(ctx context.Context, in *ListReleaseChannelsReq, opts ...grpc.CallOption) (*ListReleaseChannelsResp, error)
	GetReleaseChannel(ctx context.Context, in *GetReleaseChannelReq, opts ...grpc.CallOption) (*GetReleaseChannelResp, error)
}

type releaseChannelManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewReleaseChannelManagerClient(cc grpc.ClientConnInterface) ReleaseChannelManagerClient {
	return &releaseChannelManagerClient{cc}
}

func (c *releaseChannelManagerClient) ConfigureReleaseChannel(ctx context.Context, in *ConfigureReleaseChannelReq, opts ...grpc.CallOption) (*ConfigureReleaseChannelResp, error) {
	out := new(ConfigureReleaseChannelResp)
	err := c.cc.Invoke(ctx, ReleaseChannelManager_ConfigureReleaseChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseChannelManagerClient) ListReleaseChannels(ctx context.Context, in *ListReleaseChannelsReq, opts ...grpc.CallOption) (*ListReleaseChannelsResp, error) {
	out := new(ListReleaseChannelsResp)
	err := c.cc.Invoke(ctx, ReleaseChannelManager_ListReleaseChannels_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseChannelManagerClient) DeleteReleaseChannel(ctx context.Context, in *DeleteReleaseChannelReq, opts ...grpc.CallOption) (*DeleteReleaseChannelResp, error) {
	out := new(DeleteReleaseChannelResp)
	err := c.cc.Invoke(ctx, ReleaseChannelManager_DeleteReleaseChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseChannelManagerClient) ListReleaseChannelsV2(ctx context.Context, in *ListReleaseChannelsReq, opts ...grpc.CallOption) (*ListReleaseChannelsResp, error) {
	out := new(ListReleaseChannelsResp)
	err := c.cc.Invoke(ctx, ReleaseChannelManager_ListReleaseChannelsV2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseChannelManagerClient) GetReleaseChannel(ctx context.Context, in *GetReleaseChannelReq, opts ...grpc.CallOption) (*GetReleaseChannelResp, error) {
	out := new(GetReleaseChannelResp)
	err := c.cc.Invoke(ctx, ReleaseChannelManager_GetReleaseChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReleaseChannelManagerServer is the server API for ReleaseChannelManager service.
// All implementations must embed UnimplementedReleaseChannelManagerServer
// for forward compatibility
type ReleaseChannelManagerServer interface {
	ConfigureReleaseChannel(context.Context, *ConfigureReleaseChannelReq) (*ConfigureReleaseChannelResp, error)
	ListReleaseChannels(context.Context, *ListReleaseChannelsReq) (*ListReleaseChannelsResp, error)
	DeleteReleaseChannel(context.Context, *DeleteReleaseChannelReq) (*DeleteReleaseChannelResp, error)
	// identical to ListReleaseChannels, kept for backwards compatibility
	ListReleaseChannelsV2(context.Context, *ListReleaseChannelsReq) (*ListReleaseChannelsResp, error)
	GetReleaseChannel(context.Context, *GetReleaseChannelReq) (*GetReleaseChannelResp, error)
	mustEmbedUnimplementedReleaseChannelManagerServer()
}

// UnimplementedReleaseChannelManagerServer must be embedded to have forward compatible implementations.
type UnimplementedReleaseChannelManagerServer struct {
}

func (UnimplementedReleaseChannelManagerServer) ConfigureReleaseChannel(context.Context, *ConfigureReleaseChannelReq) (*ConfigureReleaseChannelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureReleaseChannel not implemented")
}
func (UnimplementedReleaseChannelManagerServer) ListReleaseChannels(context.Context, *ListReleaseChannelsReq) (*ListReleaseChannelsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReleaseChannels not implemented")
}
func (UnimplementedReleaseChannelManagerServer) DeleteReleaseChannel(context.Context, *DeleteReleaseChannelReq) (*DeleteReleaseChannelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReleaseChannel not implemented")
}
func (UnimplementedReleaseChannelManagerServer) ListReleaseChannelsV2(context.Context, *ListReleaseChannelsReq) (*ListReleaseChannelsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReleaseChannelsV2 not implemented")
}
func (UnimplementedReleaseChannelManagerServer) GetReleaseChannel(context.Context, *GetReleaseChannelReq) (*GetReleaseChannelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReleaseChannel not implemented")
}
func (UnimplementedReleaseChannelManagerServer) mustEmbedUnimplementedReleaseChannelManagerServer() {}

// UnsafeReleaseChannelManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReleaseChannelManagerServer will
// result in compilation errors.
type UnsafeReleaseChannelManagerServer interface {
	mustEmbedUnimplementedReleaseChannelManagerServer()
}

func RegisterReleaseChannelManagerServer(s grpc.ServiceRegistrar, srv ReleaseChannelManagerServer) {
	s.RegisterService(&ReleaseChannelManager_ServiceDesc, srv)
}

func _ReleaseChannelManager_ConfigureReleaseChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureReleaseChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseChannelManagerServer).ConfigureReleaseChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReleaseChannelManager_ConfigureReleaseChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseChannelManagerServer).ConfigureReleaseChannel(ctx, req.(*ConfigureReleaseChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReleaseChannelManager_ListReleaseChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReleaseChannelsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseChannelManagerServer).ListReleaseChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReleaseChannelManager_ListReleaseChannels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseChannelManagerServer).ListReleaseChannels(ctx, req.(*ListReleaseChannelsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReleaseChannelManager_DeleteReleaseChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReleaseChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseChannelManagerServer).DeleteReleaseChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReleaseChannelManager_DeleteReleaseChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseChannelManagerServer).DeleteReleaseChannel(ctx, req.(*DeleteReleaseChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReleaseChannelManager_ListReleaseChannelsV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReleaseChannelsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseChannelManagerServer).ListReleaseChannelsV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReleaseChannelManager_ListReleaseChannelsV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseChannelManagerServer).ListReleaseChannelsV2(ctx, req.(*ListReleaseChannelsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReleaseChannelManager_GetReleaseChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReleaseChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseChannelManagerServer).GetReleaseChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReleaseChannelManager_GetReleaseChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseChannelManagerServer).GetReleaseChannel(ctx, req.(*GetReleaseChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ReleaseChannelManager_ServiceDesc is the grpc.ServiceDesc for ReleaseChannelManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReleaseChannelManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "prodvana.release_channel.ReleaseChannelManager",
	HandlerType: (*ReleaseChannelManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConfigureReleaseChannel",
			Handler:    _ReleaseChannelManager_ConfigureReleaseChannel_Handler,
		},
		{
			MethodName: "ListReleaseChannels",
			Handler:    _ReleaseChannelManager_ListReleaseChannels_Handler,
		},
		{
			MethodName: "DeleteReleaseChannel",
			Handler:    _ReleaseChannelManager_DeleteReleaseChannel_Handler,
		},
		{
			MethodName: "ListReleaseChannelsV2",
			Handler:    _ReleaseChannelManager_ListReleaseChannelsV2_Handler,
		},
		{
			MethodName: "GetReleaseChannel",
			Handler:    _ReleaseChannelManager_GetReleaseChannel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "prodvana/release_channel/release_channel_manager.proto",
}
