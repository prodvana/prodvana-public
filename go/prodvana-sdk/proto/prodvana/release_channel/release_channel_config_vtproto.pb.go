// Code generated by protoc-gen-go-vtproto. DO NOT EDIT.
// protoc-gen-go-vtproto version: v0.6.0
// source: prodvana/release_channel/release_channel_config.proto

package release_channel

import (
	common_config "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/common_config"
	labels "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/labels"
	protection "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/protection"
	runtimes "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/runtimes"
	proto "google.golang.org/protobuf/proto"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

func (m *Policy) CloneVT() *Policy {
	if m == nil {
		return (*Policy)(nil)
	}
	r := new(Policy)
	if rhs := m.DefaultEnv; rhs != nil {
		tmpContainer := make(map[string]*common_config.EnvValue, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.DefaultEnv = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Policy) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ReleaseChannelConfig) CloneVT() *ReleaseChannelConfig {
	if m == nil {
		return (*ReleaseChannelConfig)(nil)
	}
	r := new(ReleaseChannelConfig)
	r.Name = m.Name
	r.Group = m.Group
	r.Order = m.Order
	r.Maturity = m.Maturity
	r.Policy = m.Policy.CloneVT()
	r.DeployAnnotations = m.DeployAnnotations.CloneVT()
	r.DisableAllProtections = m.DisableAllProtections
	if rhs := m.Runtimes; rhs != nil {
		tmpContainer := make([]*ReleaseChannelRuntimeConfig, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Runtimes = tmpContainer
	}
	if rhs := m.Preconditions; rhs != nil {
		tmpContainer := make([]*Precondition, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Preconditions = tmpContainer
	}
	if rhs := m.Protections; rhs != nil {
		tmpContainer := make([]*protection.ProtectionAttachmentConfig, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Protections = tmpContainer
	}
	if rhs := m.ConvergenceProtections; rhs != nil {
		tmpContainer := make([]*protection.ProtectionAttachmentConfig, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.ConvergenceProtections = tmpContainer
	}
	if rhs := m.ServiceInstanceProtections; rhs != nil {
		tmpContainer := make([]*protection.ProtectionAttachmentConfig, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.ServiceInstanceProtections = tmpContainer
	}
	if rhs := m.Constants; rhs != nil {
		tmpContainer := make([]*common_config.Constant, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Constants = tmpContainer
	}
	if rhs := m.Labels; rhs != nil {
		tmpContainer := make([]*labels.LabelDefinition, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Labels = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ReleaseChannelConfig) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *Precondition_ReleaseChannelStable) CloneVT() *Precondition_ReleaseChannelStable {
	if m == nil {
		return (*Precondition_ReleaseChannelStable)(nil)
	}
	r := new(Precondition_ReleaseChannelStable)
	r.AllowEmpty = m.AllowEmpty
	if m.StableOneof != nil {
		r.StableOneof = m.StableOneof.(interface {
			CloneVT() isPrecondition_ReleaseChannelStable_StableOneof
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Precondition_ReleaseChannelStable) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *Precondition_ReleaseChannelStable_ReleaseChannel) CloneVT() isPrecondition_ReleaseChannelStable_StableOneof {
	if m == nil {
		return (*Precondition_ReleaseChannelStable_ReleaseChannel)(nil)
	}
	r := new(Precondition_ReleaseChannelStable_ReleaseChannel)
	r.ReleaseChannel = m.ReleaseChannel
	return r
}

func (m *Precondition_ReleaseChannelStable_Selector) CloneVT() isPrecondition_ReleaseChannelStable_StableOneof {
	if m == nil {
		return (*Precondition_ReleaseChannelStable_Selector)(nil)
	}
	r := new(Precondition_ReleaseChannelStable_Selector)
	r.Selector = m.Selector
	return r
}

func (m *Precondition_ManualApproval) CloneVT() *Precondition_ManualApproval {
	if m == nil {
		return (*Precondition_ManualApproval)(nil)
	}
	r := new(Precondition_ManualApproval)
	r.Name = m.Name
	r.Description = m.Description
	r.EveryAction = m.EveryAction
	r.MinApprovers = m.MinApprovers
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Precondition_ManualApproval) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *Precondition_CustomTask) CloneVT() *Precondition_CustomTask {
	if m == nil {
		return (*Precondition_CustomTask)(nil)
	}
	r := new(Precondition_CustomTask)
	r.TaskName = m.TaskName
	r.CustomTask = m.CustomTask.CloneVT()
	r.MinApprovers = m.MinApprovers
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Precondition_CustomTask) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *Precondition_SharedManualApproval) CloneVT() *Precondition_SharedManualApproval {
	if m == nil {
		return (*Precondition_SharedManualApproval)(nil)
	}
	r := new(Precondition_SharedManualApproval)
	r.Name = m.Name
	r.MinApprovers = m.MinApprovers
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Precondition_SharedManualApproval) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *Precondition) CloneVT() *Precondition {
	if m == nil {
		return (*Precondition)(nil)
	}
	r := new(Precondition)
	if m.Precondition != nil {
		r.Precondition = m.Precondition.(interface {
			CloneVT() isPrecondition_Precondition
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Precondition) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *Precondition_ReleaseChannelStable_) CloneVT() isPrecondition_Precondition {
	if m == nil {
		return (*Precondition_ReleaseChannelStable_)(nil)
	}
	r := new(Precondition_ReleaseChannelStable_)
	r.ReleaseChannelStable = m.ReleaseChannelStable.CloneVT()
	return r
}

func (m *Precondition_ManualApproval_) CloneVT() isPrecondition_Precondition {
	if m == nil {
		return (*Precondition_ManualApproval_)(nil)
	}
	r := new(Precondition_ManualApproval_)
	r.ManualApproval = m.ManualApproval.CloneVT()
	return r
}

func (m *Precondition_CustomTask_) CloneVT() isPrecondition_Precondition {
	if m == nil {
		return (*Precondition_CustomTask_)(nil)
	}
	r := new(Precondition_CustomTask_)
	r.CustomTask = m.CustomTask.CloneVT()
	return r
}

func (m *Precondition_SharedManualApproval_) CloneVT() isPrecondition_Precondition {
	if m == nil {
		return (*Precondition_SharedManualApproval_)(nil)
	}
	r := new(Precondition_SharedManualApproval_)
	r.SharedManualApproval = m.SharedManualApproval.CloneVT()
	return r
}

func (m *ReleaseChannelRuntimeConfig) CloneVT() *ReleaseChannelRuntimeConfig {
	if m == nil {
		return (*ReleaseChannelRuntimeConfig)(nil)
	}
	r := new(ReleaseChannelRuntimeConfig)
	r.Runtime = m.Runtime
	r.Name = m.Name
	r.Type = m.Type
	if m.Capability != nil {
		r.Capability = m.Capability.(interface {
			CloneVT() isReleaseChannelRuntimeConfig_Capability
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ReleaseChannelRuntimeConfig) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ReleaseChannelRuntimeConfig_ContainerOrchestration) CloneVT() isReleaseChannelRuntimeConfig_Capability {
	if m == nil {
		return (*ReleaseChannelRuntimeConfig_ContainerOrchestration)(nil)
	}
	r := new(ReleaseChannelRuntimeConfig_ContainerOrchestration)
	r.ContainerOrchestration = m.ContainerOrchestration.CloneVT()
	return r
}

func (m *ReleaseChannelGroupGeneratorConfig) CloneVT() *ReleaseChannelGroupGeneratorConfig {
	if m == nil {
		return (*ReleaseChannelGroupGeneratorConfig)(nil)
	}
	r := new(ReleaseChannelGroupGeneratorConfig)
	r.Name = m.Name
	r.RuntimeSelector = m.RuntimeSelector
	r.AllowEmpty = m.AllowEmpty
	r.Template = m.Template.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ReleaseChannelGroupGeneratorConfig) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (this *Policy) StableEqualVT(that *Policy) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.DefaultEnv) != len(that.DefaultEnv) {
		return false
	}
	for i, vx := range this.DefaultEnv {
		vy, ok := that.DefaultEnv[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &common_config.EnvValue{}
			}
			if q == nil {
				q = &common_config.EnvValue{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Policy) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Policy)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *Policy) EqualVT(that *Policy) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.DefaultEnv) != len(that.DefaultEnv) {
		return false
	}
	for i, vx := range this.DefaultEnv {
		vy, ok := that.DefaultEnv[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &common_config.EnvValue{}
			}
			if q == nil {
				q = &common_config.EnvValue{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Policy) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Policy)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ReleaseChannelConfig) StableEqualVT(that *ReleaseChannelConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	if this.Order != that.Order {
		return false
	}
	if this.Maturity != that.Maturity {
		return false
	}
	if !this.Policy.StableEqualVT(that.Policy) {
		return false
	}
	if len(this.Runtimes) != len(that.Runtimes) {
		return false
	}
	for i, vx := range this.Runtimes {
		vy := that.Runtimes[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &ReleaseChannelRuntimeConfig{}
			}
			if q == nil {
				q = &ReleaseChannelRuntimeConfig{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if !this.DeployAnnotations.StableEqualVT(that.DeployAnnotations) {
		return false
	}
	if len(this.Preconditions) != len(that.Preconditions) {
		return false
	}
	for i, vx := range this.Preconditions {
		vy := that.Preconditions[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Precondition{}
			}
			if q == nil {
				q = &Precondition{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if len(this.Protections) != len(that.Protections) {
		return false
	}
	for i, vx := range this.Protections {
		vy := that.Protections[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &protection.ProtectionAttachmentConfig{}
			}
			if q == nil {
				q = &protection.ProtectionAttachmentConfig{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if len(this.ConvergenceProtections) != len(that.ConvergenceProtections) {
		return false
	}
	for i, vx := range this.ConvergenceProtections {
		vy := that.ConvergenceProtections[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &protection.ProtectionAttachmentConfig{}
			}
			if q == nil {
				q = &protection.ProtectionAttachmentConfig{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if len(this.Constants) != len(that.Constants) {
		return false
	}
	for i, vx := range this.Constants {
		vy := that.Constants[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &common_config.Constant{}
			}
			if q == nil {
				q = &common_config.Constant{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if len(this.ServiceInstanceProtections) != len(that.ServiceInstanceProtections) {
		return false
	}
	for i, vx := range this.ServiceInstanceProtections {
		vy := that.ServiceInstanceProtections[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &protection.ProtectionAttachmentConfig{}
			}
			if q == nil {
				q = &protection.ProtectionAttachmentConfig{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if this.Group != that.Group {
		return false
	}
	if len(this.Labels) != len(that.Labels) {
		return false
	}
	for i, vx := range this.Labels {
		vy := that.Labels[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &labels.LabelDefinition{}
			}
			if q == nil {
				q = &labels.LabelDefinition{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if this.DisableAllProtections != that.DisableAllProtections {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ReleaseChannelConfig) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ReleaseChannelConfig)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ReleaseChannelConfig) EqualVT(that *ReleaseChannelConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	if this.Order != that.Order {
		return false
	}
	if this.Maturity != that.Maturity {
		return false
	}
	if !this.Policy.EqualVT(that.Policy) {
		return false
	}
	if len(this.Runtimes) != len(that.Runtimes) {
		return false
	}
	for i, vx := range this.Runtimes {
		vy := that.Runtimes[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &ReleaseChannelRuntimeConfig{}
			}
			if q == nil {
				q = &ReleaseChannelRuntimeConfig{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if !this.DeployAnnotations.EqualVT(that.DeployAnnotations) {
		return false
	}
	if len(this.Preconditions) != len(that.Preconditions) {
		return false
	}
	for i, vx := range this.Preconditions {
		vy := that.Preconditions[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Precondition{}
			}
			if q == nil {
				q = &Precondition{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if len(this.Protections) != len(that.Protections) {
		return false
	}
	for i, vx := range this.Protections {
		vy := that.Protections[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &protection.ProtectionAttachmentConfig{}
			}
			if q == nil {
				q = &protection.ProtectionAttachmentConfig{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if len(this.ConvergenceProtections) != len(that.ConvergenceProtections) {
		return false
	}
	for i, vx := range this.ConvergenceProtections {
		vy := that.ConvergenceProtections[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &protection.ProtectionAttachmentConfig{}
			}
			if q == nil {
				q = &protection.ProtectionAttachmentConfig{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if len(this.Constants) != len(that.Constants) {
		return false
	}
	for i, vx := range this.Constants {
		vy := that.Constants[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &common_config.Constant{}
			}
			if q == nil {
				q = &common_config.Constant{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if len(this.ServiceInstanceProtections) != len(that.ServiceInstanceProtections) {
		return false
	}
	for i, vx := range this.ServiceInstanceProtections {
		vy := that.ServiceInstanceProtections[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &protection.ProtectionAttachmentConfig{}
			}
			if q == nil {
				q = &protection.ProtectionAttachmentConfig{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if this.Group != that.Group {
		return false
	}
	if len(this.Labels) != len(that.Labels) {
		return false
	}
	for i, vx := range this.Labels {
		vy := that.Labels[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &labels.LabelDefinition{}
			}
			if q == nil {
				q = &labels.LabelDefinition{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if this.DisableAllProtections != that.DisableAllProtections {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ReleaseChannelConfig) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ReleaseChannelConfig)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Precondition_ReleaseChannelStable) StableEqualVT(that *Precondition_ReleaseChannelStable) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.StableOneof == nil && that.StableOneof != nil {
		return false
	} else if this.StableOneof != nil {
		if that.StableOneof == nil {
			return false
		}
		if !this.StableOneof.(interface {
			StableEqualVT(isPrecondition_ReleaseChannelStable_StableOneof) bool
		}).StableEqualVT(that.StableOneof) {
			return false
		}
	}
	if this.AllowEmpty != that.AllowEmpty {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Precondition_ReleaseChannelStable) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Precondition_ReleaseChannelStable)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *Precondition_ReleaseChannelStable_ReleaseChannel) StableEqualVT(thatIface isPrecondition_ReleaseChannelStable_StableOneof) bool {
	that, ok := thatIface.(*Precondition_ReleaseChannelStable_ReleaseChannel)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.ReleaseChannel != that.ReleaseChannel {
		return false
	}
	return true
}

func (this *Precondition_ReleaseChannelStable_Selector) StableEqualVT(thatIface isPrecondition_ReleaseChannelStable_StableOneof) bool {
	that, ok := thatIface.(*Precondition_ReleaseChannelStable_Selector)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.Selector != that.Selector {
		return false
	}
	return true
}

func (this *Precondition_ManualApproval) StableEqualVT(that *Precondition_ManualApproval) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	if this.Description != that.Description {
		return false
	}
	if this.EveryAction != that.EveryAction {
		return false
	}
	if this.MinApprovers != that.MinApprovers {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Precondition_ManualApproval) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Precondition_ManualApproval)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *Precondition_CustomTask) StableEqualVT(that *Precondition_CustomTask) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.TaskName != that.TaskName {
		return false
	}
	if !this.CustomTask.StableEqualVT(that.CustomTask) {
		return false
	}
	if this.MinApprovers != that.MinApprovers {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Precondition_CustomTask) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Precondition_CustomTask)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *Precondition_SharedManualApproval) StableEqualVT(that *Precondition_SharedManualApproval) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	if this.MinApprovers != that.MinApprovers {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Precondition_SharedManualApproval) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Precondition_SharedManualApproval)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *Precondition) StableEqualVT(that *Precondition) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Precondition == nil && that.Precondition != nil {
		return false
	} else if this.Precondition != nil {
		if that.Precondition == nil {
			return false
		}
		if !this.Precondition.(interface {
			StableEqualVT(isPrecondition_Precondition) bool
		}).StableEqualVT(that.Precondition) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Precondition) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Precondition)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *Precondition_ReleaseChannelStable_) StableEqualVT(thatIface isPrecondition_Precondition) bool {
	that, ok := thatIface.(*Precondition_ReleaseChannelStable_)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ReleaseChannelStable, that.ReleaseChannelStable; p != q {
		if p == nil {
			p = &Precondition_ReleaseChannelStable{}
		}
		if q == nil {
			q = &Precondition_ReleaseChannelStable{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Precondition_ManualApproval_) StableEqualVT(thatIface isPrecondition_Precondition) bool {
	that, ok := thatIface.(*Precondition_ManualApproval_)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ManualApproval, that.ManualApproval; p != q {
		if p == nil {
			p = &Precondition_ManualApproval{}
		}
		if q == nil {
			q = &Precondition_ManualApproval{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Precondition_CustomTask_) StableEqualVT(thatIface isPrecondition_Precondition) bool {
	that, ok := thatIface.(*Precondition_CustomTask_)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.CustomTask, that.CustomTask; p != q {
		if p == nil {
			p = &Precondition_CustomTask{}
		}
		if q == nil {
			q = &Precondition_CustomTask{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Precondition_SharedManualApproval_) StableEqualVT(thatIface isPrecondition_Precondition) bool {
	that, ok := thatIface.(*Precondition_SharedManualApproval_)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.SharedManualApproval, that.SharedManualApproval; p != q {
		if p == nil {
			p = &Precondition_SharedManualApproval{}
		}
		if q == nil {
			q = &Precondition_SharedManualApproval{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Precondition_ReleaseChannelStable) EqualVT(that *Precondition_ReleaseChannelStable) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.StableOneof == nil && that.StableOneof != nil {
		return false
	} else if this.StableOneof != nil {
		if that.StableOneof == nil {
			return false
		}
		if !this.StableOneof.(interface {
			EqualVT(isPrecondition_ReleaseChannelStable_StableOneof) bool
		}).EqualVT(that.StableOneof) {
			return false
		}
	}
	if this.AllowEmpty != that.AllowEmpty {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Precondition_ReleaseChannelStable) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Precondition_ReleaseChannelStable)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Precondition_ReleaseChannelStable_ReleaseChannel) EqualVT(thatIface isPrecondition_ReleaseChannelStable_StableOneof) bool {
	that, ok := thatIface.(*Precondition_ReleaseChannelStable_ReleaseChannel)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.ReleaseChannel != that.ReleaseChannel {
		return false
	}
	return true
}

func (this *Precondition_ReleaseChannelStable_Selector) EqualVT(thatIface isPrecondition_ReleaseChannelStable_StableOneof) bool {
	that, ok := thatIface.(*Precondition_ReleaseChannelStable_Selector)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.Selector != that.Selector {
		return false
	}
	return true
}

func (this *Precondition_ManualApproval) EqualVT(that *Precondition_ManualApproval) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	if this.Description != that.Description {
		return false
	}
	if this.EveryAction != that.EveryAction {
		return false
	}
	if this.MinApprovers != that.MinApprovers {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Precondition_ManualApproval) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Precondition_ManualApproval)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Precondition_CustomTask) EqualVT(that *Precondition_CustomTask) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.TaskName != that.TaskName {
		return false
	}
	if !this.CustomTask.EqualVT(that.CustomTask) {
		return false
	}
	if this.MinApprovers != that.MinApprovers {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Precondition_CustomTask) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Precondition_CustomTask)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Precondition_SharedManualApproval) EqualVT(that *Precondition_SharedManualApproval) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	if this.MinApprovers != that.MinApprovers {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Precondition_SharedManualApproval) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Precondition_SharedManualApproval)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Precondition) EqualVT(that *Precondition) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Precondition == nil && that.Precondition != nil {
		return false
	} else if this.Precondition != nil {
		if that.Precondition == nil {
			return false
		}
		if !this.Precondition.(interface {
			EqualVT(isPrecondition_Precondition) bool
		}).EqualVT(that.Precondition) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Precondition) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Precondition)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Precondition_ReleaseChannelStable_) EqualVT(thatIface isPrecondition_Precondition) bool {
	that, ok := thatIface.(*Precondition_ReleaseChannelStable_)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ReleaseChannelStable, that.ReleaseChannelStable; p != q {
		if p == nil {
			p = &Precondition_ReleaseChannelStable{}
		}
		if q == nil {
			q = &Precondition_ReleaseChannelStable{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Precondition_ManualApproval_) EqualVT(thatIface isPrecondition_Precondition) bool {
	that, ok := thatIface.(*Precondition_ManualApproval_)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ManualApproval, that.ManualApproval; p != q {
		if p == nil {
			p = &Precondition_ManualApproval{}
		}
		if q == nil {
			q = &Precondition_ManualApproval{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Precondition_CustomTask_) EqualVT(thatIface isPrecondition_Precondition) bool {
	that, ok := thatIface.(*Precondition_CustomTask_)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.CustomTask, that.CustomTask; p != q {
		if p == nil {
			p = &Precondition_CustomTask{}
		}
		if q == nil {
			q = &Precondition_CustomTask{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Precondition_SharedManualApproval_) EqualVT(thatIface isPrecondition_Precondition) bool {
	that, ok := thatIface.(*Precondition_SharedManualApproval_)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.SharedManualApproval, that.SharedManualApproval; p != q {
		if p == nil {
			p = &Precondition_SharedManualApproval{}
		}
		if q == nil {
			q = &Precondition_SharedManualApproval{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ReleaseChannelRuntimeConfig) StableEqualVT(that *ReleaseChannelRuntimeConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Capability == nil && that.Capability != nil {
		return false
	} else if this.Capability != nil {
		if that.Capability == nil {
			return false
		}
		if !this.Capability.(interface {
			StableEqualVT(isReleaseChannelRuntimeConfig_Capability) bool
		}).StableEqualVT(that.Capability) {
			return false
		}
	}
	if this.Runtime != that.Runtime {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	if this.Type != that.Type {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ReleaseChannelRuntimeConfig) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ReleaseChannelRuntimeConfig)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ReleaseChannelRuntimeConfig_ContainerOrchestration) StableEqualVT(thatIface isReleaseChannelRuntimeConfig_Capability) bool {
	that, ok := thatIface.(*ReleaseChannelRuntimeConfig_ContainerOrchestration)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ContainerOrchestration, that.ContainerOrchestration; p != q {
		if p == nil {
			p = &runtimes.ContainerOrchestrationRuntime{}
		}
		if q == nil {
			q = &runtimes.ContainerOrchestrationRuntime{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ReleaseChannelRuntimeConfig) EqualVT(that *ReleaseChannelRuntimeConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Capability == nil && that.Capability != nil {
		return false
	} else if this.Capability != nil {
		if that.Capability == nil {
			return false
		}
		if !this.Capability.(interface {
			EqualVT(isReleaseChannelRuntimeConfig_Capability) bool
		}).EqualVT(that.Capability) {
			return false
		}
	}
	if this.Runtime != that.Runtime {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	if this.Type != that.Type {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ReleaseChannelRuntimeConfig) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ReleaseChannelRuntimeConfig)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ReleaseChannelRuntimeConfig_ContainerOrchestration) EqualVT(thatIface isReleaseChannelRuntimeConfig_Capability) bool {
	that, ok := thatIface.(*ReleaseChannelRuntimeConfig_ContainerOrchestration)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ContainerOrchestration, that.ContainerOrchestration; p != q {
		if p == nil {
			p = &runtimes.ContainerOrchestrationRuntime{}
		}
		if q == nil {
			q = &runtimes.ContainerOrchestrationRuntime{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ReleaseChannelGroupGeneratorConfig) StableEqualVT(that *ReleaseChannelGroupGeneratorConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	if this.RuntimeSelector != that.RuntimeSelector {
		return false
	}
	if this.AllowEmpty != that.AllowEmpty {
		return false
	}
	if !this.Template.StableEqualVT(that.Template) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ReleaseChannelGroupGeneratorConfig) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ReleaseChannelGroupGeneratorConfig)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ReleaseChannelGroupGeneratorConfig) EqualVT(that *ReleaseChannelGroupGeneratorConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	if this.RuntimeSelector != that.RuntimeSelector {
		return false
	}
	if this.AllowEmpty != that.AllowEmpty {
		return false
	}
	if !this.Template.EqualVT(that.Template) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ReleaseChannelGroupGeneratorConfig) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ReleaseChannelGroupGeneratorConfig)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
