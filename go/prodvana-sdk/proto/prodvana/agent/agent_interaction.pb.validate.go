// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: prodvana/agent/agent_interaction.proto

package agent

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on HeartbeatReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HeartbeatReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HeartbeatReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HeartbeatReqMultiError, or
// nil if none found.
func (m *HeartbeatReq) ValidateAll() error {
	return m.validate(true)
}

func (m *HeartbeatReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClusterId

	if len(errors) > 0 {
		return HeartbeatReqMultiError(errors)
	}

	return nil
}

// HeartbeatReqMultiError is an error wrapping multiple validation errors
// returned by HeartbeatReq.ValidateAll() if the designated constraints aren't met.
type HeartbeatReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HeartbeatReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HeartbeatReqMultiError) AllErrors() []error { return m }

// HeartbeatReqValidationError is the validation error returned by
// HeartbeatReq.Validate if the designated constraints aren't met.
type HeartbeatReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HeartbeatReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HeartbeatReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HeartbeatReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HeartbeatReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HeartbeatReqValidationError) ErrorName() string { return "HeartbeatReqValidationError" }

// Error satisfies the builtin error interface
func (e HeartbeatReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHeartbeatReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HeartbeatReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HeartbeatReqValidationError{}

// Validate checks the field values on HeartbeatResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HeartbeatResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HeartbeatResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HeartbeatRespMultiError, or
// nil if none found.
func (m *HeartbeatResp) ValidateAll() error {
	return m.validate(true)
}

func (m *HeartbeatResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return HeartbeatRespMultiError(errors)
	}

	return nil
}

// HeartbeatRespMultiError is an error wrapping multiple validation errors
// returned by HeartbeatResp.ValidateAll() if the designated constraints
// aren't met.
type HeartbeatRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HeartbeatRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HeartbeatRespMultiError) AllErrors() []error { return m }

// HeartbeatRespValidationError is the validation error returned by
// HeartbeatResp.Validate if the designated constraints aren't met.
type HeartbeatRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HeartbeatRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HeartbeatRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HeartbeatRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HeartbeatRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HeartbeatRespValidationError) ErrorName() string { return "HeartbeatRespValidationError" }

// Error satisfies the builtin error interface
func (e HeartbeatRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHeartbeatResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HeartbeatRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HeartbeatRespValidationError{}

// Validate checks the field values on RecordNewUnknownPushReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RecordNewUnknownPushReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecordNewUnknownPushReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RecordNewUnknownPushReqMultiError, or nil if none found.
func (m *RecordNewUnknownPushReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RecordNewUnknownPushReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReleaseChannelId

	// no validation rules for ServiceId

	// no validation rules for ClusterId

	if all {
		switch v := interface{}(m.GetCreationTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RecordNewUnknownPushReqValidationError{
					field:  "CreationTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RecordNewUnknownPushReqValidationError{
					field:  "CreationTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreationTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RecordNewUnknownPushReqValidationError{
				field:  "CreationTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RecordNewUnknownPushReqMultiError(errors)
	}

	return nil
}

// RecordNewUnknownPushReqMultiError is an error wrapping multiple validation
// errors returned by RecordNewUnknownPushReq.ValidateAll() if the designated
// constraints aren't met.
type RecordNewUnknownPushReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecordNewUnknownPushReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecordNewUnknownPushReqMultiError) AllErrors() []error { return m }

// RecordNewUnknownPushReqValidationError is the validation error returned by
// RecordNewUnknownPushReq.Validate if the designated constraints aren't met.
type RecordNewUnknownPushReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecordNewUnknownPushReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecordNewUnknownPushReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecordNewUnknownPushReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecordNewUnknownPushReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecordNewUnknownPushReqValidationError) ErrorName() string {
	return "RecordNewUnknownPushReqValidationError"
}

// Error satisfies the builtin error interface
func (e RecordNewUnknownPushReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecordNewUnknownPushReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecordNewUnknownPushReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecordNewUnknownPushReqValidationError{}

// Validate checks the field values on RecordNewUnknownPushResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RecordNewUnknownPushResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecordNewUnknownPushResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RecordNewUnknownPushRespMultiError, or nil if none found.
func (m *RecordNewUnknownPushResp) ValidateAll() error {
	return m.validate(true)
}

func (m *RecordNewUnknownPushResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RecordNewUnknownPushRespMultiError(errors)
	}

	return nil
}

// RecordNewUnknownPushRespMultiError is an error wrapping multiple validation
// errors returned by RecordNewUnknownPushResp.ValidateAll() if the designated
// constraints aren't met.
type RecordNewUnknownPushRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecordNewUnknownPushRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecordNewUnknownPushRespMultiError) AllErrors() []error { return m }

// RecordNewUnknownPushRespValidationError is the validation error returned by
// RecordNewUnknownPushResp.Validate if the designated constraints aren't met.
type RecordNewUnknownPushRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecordNewUnknownPushRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecordNewUnknownPushRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecordNewUnknownPushRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecordNewUnknownPushRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecordNewUnknownPushRespValidationError) ErrorName() string {
	return "RecordNewUnknownPushRespValidationError"
}

// Error satisfies the builtin error interface
func (e RecordNewUnknownPushRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecordNewUnknownPushResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecordNewUnknownPushRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecordNewUnknownPushRespValidationError{}

// Validate checks the field values on RecordPushStartReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RecordPushStartReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecordPushStartReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RecordPushStartReqMultiError, or nil if none found.
func (m *RecordPushStartReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RecordPushStartReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReleaseChannelId

	// no validation rules for ServiceId

	if all {
		switch v := interface{}(m.GetCreationTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RecordPushStartReqValidationError{
					field:  "CreationTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RecordPushStartReqValidationError{
					field:  "CreationTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreationTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RecordPushStartReqValidationError{
				field:  "CreationTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ClusterId

	if all {
		switch v := interface{}(m.GetStartTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RecordPushStartReqValidationError{
					field:  "StartTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RecordPushStartReqValidationError{
					field:  "StartTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RecordPushStartReqValidationError{
				field:  "StartTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RecordPushStartReqMultiError(errors)
	}

	return nil
}

// RecordPushStartReqMultiError is an error wrapping multiple validation errors
// returned by RecordPushStartReq.ValidateAll() if the designated constraints
// aren't met.
type RecordPushStartReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecordPushStartReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecordPushStartReqMultiError) AllErrors() []error { return m }

// RecordPushStartReqValidationError is the validation error returned by
// RecordPushStartReq.Validate if the designated constraints aren't met.
type RecordPushStartReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecordPushStartReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecordPushStartReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecordPushStartReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecordPushStartReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecordPushStartReqValidationError) ErrorName() string {
	return "RecordPushStartReqValidationError"
}

// Error satisfies the builtin error interface
func (e RecordPushStartReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecordPushStartReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecordPushStartReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecordPushStartReqValidationError{}

// Validate checks the field values on RecordPushStartResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RecordPushStartResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecordPushStartResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RecordPushStartRespMultiError, or nil if none found.
func (m *RecordPushStartResp) ValidateAll() error {
	return m.validate(true)
}

func (m *RecordPushStartResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RecordPushStartRespMultiError(errors)
	}

	return nil
}

// RecordPushStartRespMultiError is an error wrapping multiple validation
// errors returned by RecordPushStartResp.ValidateAll() if the designated
// constraints aren't met.
type RecordPushStartRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecordPushStartRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecordPushStartRespMultiError) AllErrors() []error { return m }

// RecordPushStartRespValidationError is the validation error returned by
// RecordPushStartResp.Validate if the designated constraints aren't met.
type RecordPushStartRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecordPushStartRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecordPushStartRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecordPushStartRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecordPushStartRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecordPushStartRespValidationError) ErrorName() string {
	return "RecordPushStartRespValidationError"
}

// Error satisfies the builtin error interface
func (e RecordPushStartRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecordPushStartResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecordPushStartRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecordPushStartRespValidationError{}

// Validate checks the field values on RecordPushOngoingReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RecordPushOngoingReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecordPushOngoingReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RecordPushOngoingReqMultiError, or nil if none found.
func (m *RecordPushOngoingReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RecordPushOngoingReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReleaseChannelId

	// no validation rules for ServiceId

	if all {
		switch v := interface{}(m.GetCreationTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RecordPushOngoingReqValidationError{
					field:  "CreationTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RecordPushOngoingReqValidationError{
					field:  "CreationTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreationTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RecordPushOngoingReqValidationError{
				field:  "CreationTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ClusterId

	if len(errors) > 0 {
		return RecordPushOngoingReqMultiError(errors)
	}

	return nil
}

// RecordPushOngoingReqMultiError is an error wrapping multiple validation
// errors returned by RecordPushOngoingReq.ValidateAll() if the designated
// constraints aren't met.
type RecordPushOngoingReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecordPushOngoingReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecordPushOngoingReqMultiError) AllErrors() []error { return m }

// RecordPushOngoingReqValidationError is the validation error returned by
// RecordPushOngoingReq.Validate if the designated constraints aren't met.
type RecordPushOngoingReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecordPushOngoingReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecordPushOngoingReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecordPushOngoingReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecordPushOngoingReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecordPushOngoingReqValidationError) ErrorName() string {
	return "RecordPushOngoingReqValidationError"
}

// Error satisfies the builtin error interface
func (e RecordPushOngoingReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecordPushOngoingReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecordPushOngoingReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecordPushOngoingReqValidationError{}

// Validate checks the field values on RecordPushOngoingResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RecordPushOngoingResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecordPushOngoingResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RecordPushOngoingRespMultiError, or nil if none found.
func (m *RecordPushOngoingResp) ValidateAll() error {
	return m.validate(true)
}

func (m *RecordPushOngoingResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RecordPushOngoingRespMultiError(errors)
	}

	return nil
}

// RecordPushOngoingRespMultiError is an error wrapping multiple validation
// errors returned by RecordPushOngoingResp.ValidateAll() if the designated
// constraints aren't met.
type RecordPushOngoingRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecordPushOngoingRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecordPushOngoingRespMultiError) AllErrors() []error { return m }

// RecordPushOngoingRespValidationError is the validation error returned by
// RecordPushOngoingResp.Validate if the designated constraints aren't met.
type RecordPushOngoingRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecordPushOngoingRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecordPushOngoingRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecordPushOngoingRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecordPushOngoingRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecordPushOngoingRespValidationError) ErrorName() string {
	return "RecordPushOngoingRespValidationError"
}

// Error satisfies the builtin error interface
func (e RecordPushOngoingRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecordPushOngoingResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecordPushOngoingRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecordPushOngoingRespValidationError{}

// Validate checks the field values on RecordPushCompleteReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RecordPushCompleteReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecordPushCompleteReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RecordPushCompleteReqMultiError, or nil if none found.
func (m *RecordPushCompleteReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RecordPushCompleteReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReleaseChannelId

	// no validation rules for ServiceId

	if all {
		switch v := interface{}(m.GetCreationTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RecordPushCompleteReqValidationError{
					field:  "CreationTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RecordPushCompleteReqValidationError{
					field:  "CreationTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreationTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RecordPushCompleteReqValidationError{
				field:  "CreationTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ClusterId

	// no validation rules for Type

	if len(errors) > 0 {
		return RecordPushCompleteReqMultiError(errors)
	}

	return nil
}

// RecordPushCompleteReqMultiError is an error wrapping multiple validation
// errors returned by RecordPushCompleteReq.ValidateAll() if the designated
// constraints aren't met.
type RecordPushCompleteReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecordPushCompleteReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecordPushCompleteReqMultiError) AllErrors() []error { return m }

// RecordPushCompleteReqValidationError is the validation error returned by
// RecordPushCompleteReq.Validate if the designated constraints aren't met.
type RecordPushCompleteReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecordPushCompleteReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecordPushCompleteReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecordPushCompleteReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecordPushCompleteReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecordPushCompleteReqValidationError) ErrorName() string {
	return "RecordPushCompleteReqValidationError"
}

// Error satisfies the builtin error interface
func (e RecordPushCompleteReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecordPushCompleteReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecordPushCompleteReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecordPushCompleteReqValidationError{}

// Validate checks the field values on RecordPushCompleteResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RecordPushCompleteResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecordPushCompleteResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RecordPushCompleteRespMultiError, or nil if none found.
func (m *RecordPushCompleteResp) ValidateAll() error {
	return m.validate(true)
}

func (m *RecordPushCompleteResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RecordPushCompleteRespMultiError(errors)
	}

	return nil
}

// RecordPushCompleteRespMultiError is an error wrapping multiple validation
// errors returned by RecordPushCompleteResp.ValidateAll() if the designated
// constraints aren't met.
type RecordPushCompleteRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecordPushCompleteRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecordPushCompleteRespMultiError) AllErrors() []error { return m }

// RecordPushCompleteRespValidationError is the validation error returned by
// RecordPushCompleteResp.Validate if the designated constraints aren't met.
type RecordPushCompleteRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecordPushCompleteRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecordPushCompleteRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecordPushCompleteRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecordPushCompleteRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecordPushCompleteRespValidationError) ErrorName() string {
	return "RecordPushCompleteRespValidationError"
}

// Error satisfies the builtin error interface
func (e RecordPushCompleteRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecordPushCompleteResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecordPushCompleteRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecordPushCompleteRespValidationError{}

// Validate checks the field values on ConfirmPushApprovalReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfirmPushApprovalReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfirmPushApprovalReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfirmPushApprovalReqMultiError, or nil if none found.
func (m *ConfirmPushApprovalReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfirmPushApprovalReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReleaseChannelId

	// no validation rules for ServiceId

	if all {
		switch v := interface{}(m.GetCreationTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfirmPushApprovalReqValidationError{
					field:  "CreationTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfirmPushApprovalReqValidationError{
					field:  "CreationTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreationTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfirmPushApprovalReqValidationError{
				field:  "CreationTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ClusterId

	if len(errors) > 0 {
		return ConfirmPushApprovalReqMultiError(errors)
	}

	return nil
}

// ConfirmPushApprovalReqMultiError is an error wrapping multiple validation
// errors returned by ConfirmPushApprovalReq.ValidateAll() if the designated
// constraints aren't met.
type ConfirmPushApprovalReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfirmPushApprovalReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfirmPushApprovalReqMultiError) AllErrors() []error { return m }

// ConfirmPushApprovalReqValidationError is the validation error returned by
// ConfirmPushApprovalReq.Validate if the designated constraints aren't met.
type ConfirmPushApprovalReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfirmPushApprovalReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfirmPushApprovalReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfirmPushApprovalReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfirmPushApprovalReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfirmPushApprovalReqValidationError) ErrorName() string {
	return "ConfirmPushApprovalReqValidationError"
}

// Error satisfies the builtin error interface
func (e ConfirmPushApprovalReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfirmPushApprovalReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfirmPushApprovalReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfirmPushApprovalReqValidationError{}

// Validate checks the field values on ConfirmPushApprovalResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfirmPushApprovalResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfirmPushApprovalResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfirmPushApprovalRespMultiError, or nil if none found.
func (m *ConfirmPushApprovalResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfirmPushApprovalResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Approved

	if len(errors) > 0 {
		return ConfirmPushApprovalRespMultiError(errors)
	}

	return nil
}

// ConfirmPushApprovalRespMultiError is an error wrapping multiple validation
// errors returned by ConfirmPushApprovalResp.ValidateAll() if the designated
// constraints aren't met.
type ConfirmPushApprovalRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfirmPushApprovalRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfirmPushApprovalRespMultiError) AllErrors() []error { return m }

// ConfirmPushApprovalRespValidationError is the validation error returned by
// ConfirmPushApprovalResp.Validate if the designated constraints aren't met.
type ConfirmPushApprovalRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfirmPushApprovalRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfirmPushApprovalRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfirmPushApprovalRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfirmPushApprovalRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfirmPushApprovalRespValidationError) ErrorName() string {
	return "ConfirmPushApprovalRespValidationError"
}

// Error satisfies the builtin error interface
func (e ConfirmPushApprovalRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfirmPushApprovalResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfirmPushApprovalRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfirmPushApprovalRespValidationError{}

// Validate checks the field values on RecordPodReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RecordPodReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecordPodReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RecordPodReqMultiError, or
// nil if none found.
func (m *RecordPodReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RecordPodReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Pod

	// no validation rules for Action

	// no validation rules for RuntimeId

	if len(errors) > 0 {
		return RecordPodReqMultiError(errors)
	}

	return nil
}

// RecordPodReqMultiError is an error wrapping multiple validation errors
// returned by RecordPodReq.ValidateAll() if the designated constraints aren't met.
type RecordPodReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecordPodReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecordPodReqMultiError) AllErrors() []error { return m }

// RecordPodReqValidationError is the validation error returned by
// RecordPodReq.Validate if the designated constraints aren't met.
type RecordPodReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecordPodReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecordPodReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecordPodReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecordPodReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecordPodReqValidationError) ErrorName() string { return "RecordPodReqValidationError" }

// Error satisfies the builtin error interface
func (e RecordPodReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecordPodReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecordPodReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecordPodReqValidationError{}

// Validate checks the field values on RecordPodResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RecordPodResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecordPodResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RecordPodRespMultiError, or
// nil if none found.
func (m *RecordPodResp) ValidateAll() error {
	return m.validate(true)
}

func (m *RecordPodResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RecordPodRespMultiError(errors)
	}

	return nil
}

// RecordPodRespMultiError is an error wrapping multiple validation errors
// returned by RecordPodResp.ValidateAll() if the designated constraints
// aren't met.
type RecordPodRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecordPodRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecordPodRespMultiError) AllErrors() []error { return m }

// RecordPodRespValidationError is the validation error returned by
// RecordPodResp.Validate if the designated constraints aren't met.
type RecordPodRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecordPodRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecordPodRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecordPodRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecordPodRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecordPodRespValidationError) ErrorName() string { return "RecordPodRespValidationError" }

// Error satisfies the builtin error interface
func (e RecordPodRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecordPodResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecordPodRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecordPodRespValidationError{}

// Validate checks the field values on RecordPodsReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RecordPodsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecordPodsReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RecordPodsReqMultiError, or
// nil if none found.
func (m *RecordPodsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RecordPodsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RuntimeId

	if len(errors) > 0 {
		return RecordPodsReqMultiError(errors)
	}

	return nil
}

// RecordPodsReqMultiError is an error wrapping multiple validation errors
// returned by RecordPodsReq.ValidateAll() if the designated constraints
// aren't met.
type RecordPodsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecordPodsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecordPodsReqMultiError) AllErrors() []error { return m }

// RecordPodsReqValidationError is the validation error returned by
// RecordPodsReq.Validate if the designated constraints aren't met.
type RecordPodsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecordPodsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecordPodsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecordPodsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecordPodsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecordPodsReqValidationError) ErrorName() string { return "RecordPodsReqValidationError" }

// Error satisfies the builtin error interface
func (e RecordPodsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecordPodsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecordPodsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecordPodsReqValidationError{}

// Validate checks the field values on RecordPodsResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RecordPodsResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecordPodsResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RecordPodsRespMultiError,
// or nil if none found.
func (m *RecordPodsResp) ValidateAll() error {
	return m.validate(true)
}

func (m *RecordPodsResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RecordPodsRespMultiError(errors)
	}

	return nil
}

// RecordPodsRespMultiError is an error wrapping multiple validation errors
// returned by RecordPodsResp.ValidateAll() if the designated constraints
// aren't met.
type RecordPodsRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecordPodsRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecordPodsRespMultiError) AllErrors() []error { return m }

// RecordPodsRespValidationError is the validation error returned by
// RecordPodsResp.Validate if the designated constraints aren't met.
type RecordPodsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecordPodsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecordPodsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecordPodsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecordPodsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecordPodsRespValidationError) ErrorName() string { return "RecordPodsRespValidationError" }

// Error satisfies the builtin error interface
func (e RecordPodsRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecordPodsResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecordPodsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecordPodsRespValidationError{}

// Validate checks the field values on RecordDeploymentReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RecordDeploymentReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecordDeploymentReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RecordDeploymentReqMultiError, or nil if none found.
func (m *RecordDeploymentReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RecordDeploymentReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Deployment

	// no validation rules for Action

	if len(errors) > 0 {
		return RecordDeploymentReqMultiError(errors)
	}

	return nil
}

// RecordDeploymentReqMultiError is an error wrapping multiple validation
// errors returned by RecordDeploymentReq.ValidateAll() if the designated
// constraints aren't met.
type RecordDeploymentReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecordDeploymentReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecordDeploymentReqMultiError) AllErrors() []error { return m }

// RecordDeploymentReqValidationError is the validation error returned by
// RecordDeploymentReq.Validate if the designated constraints aren't met.
type RecordDeploymentReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecordDeploymentReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecordDeploymentReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecordDeploymentReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecordDeploymentReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecordDeploymentReqValidationError) ErrorName() string {
	return "RecordDeploymentReqValidationError"
}

// Error satisfies the builtin error interface
func (e RecordDeploymentReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecordDeploymentReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecordDeploymentReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecordDeploymentReqValidationError{}

// Validate checks the field values on RecordDeploymentResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RecordDeploymentResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecordDeploymentResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RecordDeploymentRespMultiError, or nil if none found.
func (m *RecordDeploymentResp) ValidateAll() error {
	return m.validate(true)
}

func (m *RecordDeploymentResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPushTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RecordDeploymentRespValidationError{
					field:  "PushTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RecordDeploymentRespValidationError{
					field:  "PushTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPushTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RecordDeploymentRespValidationError{
				field:  "PushTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RecordDeploymentRespMultiError(errors)
	}

	return nil
}

// RecordDeploymentRespMultiError is an error wrapping multiple validation
// errors returned by RecordDeploymentResp.ValidateAll() if the designated
// constraints aren't met.
type RecordDeploymentRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecordDeploymentRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecordDeploymentRespMultiError) AllErrors() []error { return m }

// RecordDeploymentRespValidationError is the validation error returned by
// RecordDeploymentResp.Validate if the designated constraints aren't met.
type RecordDeploymentRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecordDeploymentRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecordDeploymentRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecordDeploymentRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecordDeploymentRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecordDeploymentRespValidationError) ErrorName() string {
	return "RecordDeploymentRespValidationError"
}

// Error satisfies the builtin error interface
func (e RecordDeploymentRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecordDeploymentResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecordDeploymentRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecordDeploymentRespValidationError{}

// Validate checks the field values on RecordRolloutReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RecordRolloutReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecordRolloutReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RecordRolloutReqMultiError, or nil if none found.
func (m *RecordRolloutReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RecordRolloutReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Rollout

	// no validation rules for Action

	if len(errors) > 0 {
		return RecordRolloutReqMultiError(errors)
	}

	return nil
}

// RecordRolloutReqMultiError is an error wrapping multiple validation errors
// returned by RecordRolloutReq.ValidateAll() if the designated constraints
// aren't met.
type RecordRolloutReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecordRolloutReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecordRolloutReqMultiError) AllErrors() []error { return m }

// RecordRolloutReqValidationError is the validation error returned by
// RecordRolloutReq.Validate if the designated constraints aren't met.
type RecordRolloutReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecordRolloutReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecordRolloutReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecordRolloutReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecordRolloutReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecordRolloutReqValidationError) ErrorName() string { return "RecordRolloutReqValidationError" }

// Error satisfies the builtin error interface
func (e RecordRolloutReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecordRolloutReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecordRolloutReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecordRolloutReqValidationError{}

// Validate checks the field values on RecordRolloutResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RecordRolloutResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecordRolloutResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RecordRolloutRespMultiError, or nil if none found.
func (m *RecordRolloutResp) ValidateAll() error {
	return m.validate(true)
}

func (m *RecordRolloutResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPushTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RecordRolloutRespValidationError{
					field:  "PushTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RecordRolloutRespValidationError{
					field:  "PushTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPushTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RecordRolloutRespValidationError{
				field:  "PushTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RecordRolloutRespMultiError(errors)
	}

	return nil
}

// RecordRolloutRespMultiError is an error wrapping multiple validation errors
// returned by RecordRolloutResp.ValidateAll() if the designated constraints
// aren't met.
type RecordRolloutRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecordRolloutRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecordRolloutRespMultiError) AllErrors() []error { return m }

// RecordRolloutRespValidationError is the validation error returned by
// RecordRolloutResp.Validate if the designated constraints aren't met.
type RecordRolloutRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecordRolloutRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecordRolloutRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecordRolloutRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecordRolloutRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecordRolloutRespValidationError) ErrorName() string {
	return "RecordRolloutRespValidationError"
}

// Error satisfies the builtin error interface
func (e RecordRolloutRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecordRolloutResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecordRolloutRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecordRolloutRespValidationError{}

// Validate checks the field values on ProxyAPIServerReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ProxyAPIServerReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProxyAPIServerReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProxyAPIServerReqMultiError, or nil if none found.
func (m *ProxyAPIServerReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ProxyAPIServerReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ConnId

	switch v := m.Msg.(type) {
	case *ProxyAPIServerReq_RuntimeId:
		if v == nil {
			err := ProxyAPIServerReqValidationError{
				field:  "Msg",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for RuntimeId
	case *ProxyAPIServerReq_Blob:
		if v == nil {
			err := ProxyAPIServerReqValidationError{
				field:  "Msg",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Blob
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ProxyAPIServerReqMultiError(errors)
	}

	return nil
}

// ProxyAPIServerReqMultiError is an error wrapping multiple validation errors
// returned by ProxyAPIServerReq.ValidateAll() if the designated constraints
// aren't met.
type ProxyAPIServerReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProxyAPIServerReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProxyAPIServerReqMultiError) AllErrors() []error { return m }

// ProxyAPIServerReqValidationError is the validation error returned by
// ProxyAPIServerReq.Validate if the designated constraints aren't met.
type ProxyAPIServerReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProxyAPIServerReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProxyAPIServerReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProxyAPIServerReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProxyAPIServerReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProxyAPIServerReqValidationError) ErrorName() string {
	return "ProxyAPIServerReqValidationError"
}

// Error satisfies the builtin error interface
func (e ProxyAPIServerReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProxyAPIServerReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProxyAPIServerReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProxyAPIServerReqValidationError{}

// Validate checks the field values on ProxyAPIServerResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProxyAPIServerResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProxyAPIServerResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProxyAPIServerRespMultiError, or nil if none found.
func (m *ProxyAPIServerResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ProxyAPIServerResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Msg.(type) {
	case *ProxyAPIServerResp_Type_:
		if v == nil {
			err := ProxyAPIServerRespValidationError{
				field:  "Msg",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Type
	case *ProxyAPIServerResp_Blob:
		if v == nil {
			err := ProxyAPIServerRespValidationError{
				field:  "Msg",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Blob
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ProxyAPIServerRespMultiError(errors)
	}

	return nil
}

// ProxyAPIServerRespMultiError is an error wrapping multiple validation errors
// returned by ProxyAPIServerResp.ValidateAll() if the designated constraints
// aren't met.
type ProxyAPIServerRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProxyAPIServerRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProxyAPIServerRespMultiError) AllErrors() []error { return m }

// ProxyAPIServerRespValidationError is the validation error returned by
// ProxyAPIServerResp.Validate if the designated constraints aren't met.
type ProxyAPIServerRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProxyAPIServerRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProxyAPIServerRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProxyAPIServerRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProxyAPIServerRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProxyAPIServerRespValidationError) ErrorName() string {
	return "ProxyAPIServerRespValidationError"
}

// Error satisfies the builtin error interface
func (e ProxyAPIServerRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProxyAPIServerResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProxyAPIServerRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProxyAPIServerRespValidationError{}

// Validate checks the field values on DebugInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DebugInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DebugInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DebugInfoMultiError, or nil
// if none found.
func (m *DebugInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *DebugInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Error

	// no validation rules for TcptracerouteOut

	if len(errors) > 0 {
		return DebugInfoMultiError(errors)
	}

	return nil
}

// DebugInfoMultiError is an error wrapping multiple validation errors returned
// by DebugInfo.ValidateAll() if the designated constraints aren't met.
type DebugInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DebugInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DebugInfoMultiError) AllErrors() []error { return m }

// DebugInfoValidationError is the validation error returned by
// DebugInfo.Validate if the designated constraints aren't met.
type DebugInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DebugInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DebugInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DebugInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DebugInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DebugInfoValidationError) ErrorName() string { return "DebugInfoValidationError" }

// Error satisfies the builtin error interface
func (e DebugInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDebugInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DebugInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DebugInfoValidationError{}

// Validate checks the field values on ReportDebugInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReportDebugInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportDebugInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReportDebugInfoReqMultiError, or nil if none found.
func (m *ReportDebugInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportDebugInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RuntimeId

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReportDebugInfoReqValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReportDebugInfoReqValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReportDebugInfoReqValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReportDebugInfoReqMultiError(errors)
	}

	return nil
}

// ReportDebugInfoReqMultiError is an error wrapping multiple validation errors
// returned by ReportDebugInfoReq.ValidateAll() if the designated constraints
// aren't met.
type ReportDebugInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportDebugInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportDebugInfoReqMultiError) AllErrors() []error { return m }

// ReportDebugInfoReqValidationError is the validation error returned by
// ReportDebugInfoReq.Validate if the designated constraints aren't met.
type ReportDebugInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportDebugInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportDebugInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportDebugInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportDebugInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportDebugInfoReqValidationError) ErrorName() string {
	return "ReportDebugInfoReqValidationError"
}

// Error satisfies the builtin error interface
func (e ReportDebugInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportDebugInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportDebugInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportDebugInfoReqValidationError{}

// Validate checks the field values on ReportDebugInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReportDebugInfoResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportDebugInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReportDebugInfoRespMultiError, or nil if none found.
func (m *ReportDebugInfoResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportDebugInfoResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReportDebugInfoRespMultiError(errors)
	}

	return nil
}

// ReportDebugInfoRespMultiError is an error wrapping multiple validation
// errors returned by ReportDebugInfoResp.ValidateAll() if the designated
// constraints aren't met.
type ReportDebugInfoRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportDebugInfoRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportDebugInfoRespMultiError) AllErrors() []error { return m }

// ReportDebugInfoRespValidationError is the validation error returned by
// ReportDebugInfoResp.Validate if the designated constraints aren't met.
type ReportDebugInfoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportDebugInfoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportDebugInfoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportDebugInfoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportDebugInfoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportDebugInfoRespValidationError) ErrorName() string {
	return "ReportDebugInfoRespValidationError"
}

// Error satisfies the builtin error interface
func (e ReportDebugInfoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportDebugInfoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportDebugInfoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportDebugInfoRespValidationError{}

// Validate checks the field values on ReportClusterMetadataReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReportClusterMetadataReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportClusterMetadataReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReportClusterMetadataReqMultiError, or nil if none found.
func (m *ReportClusterMetadataReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportClusterMetadataReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RuntimeId

	if all {
		switch v := interface{}(m.GetClusterMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReportClusterMetadataReqValidationError{
					field:  "ClusterMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReportClusterMetadataReqValidationError{
					field:  "ClusterMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetClusterMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReportClusterMetadataReqValidationError{
				field:  "ClusterMetadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Error

	if len(errors) > 0 {
		return ReportClusterMetadataReqMultiError(errors)
	}

	return nil
}

// ReportClusterMetadataReqMultiError is an error wrapping multiple validation
// errors returned by ReportClusterMetadataReq.ValidateAll() if the designated
// constraints aren't met.
type ReportClusterMetadataReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportClusterMetadataReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportClusterMetadataReqMultiError) AllErrors() []error { return m }

// ReportClusterMetadataReqValidationError is the validation error returned by
// ReportClusterMetadataReq.Validate if the designated constraints aren't met.
type ReportClusterMetadataReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportClusterMetadataReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportClusterMetadataReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportClusterMetadataReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportClusterMetadataReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportClusterMetadataReqValidationError) ErrorName() string {
	return "ReportClusterMetadataReqValidationError"
}

// Error satisfies the builtin error interface
func (e ReportClusterMetadataReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportClusterMetadataReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportClusterMetadataReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportClusterMetadataReqValidationError{}

// Validate checks the field values on ReportClusterMetadataResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReportClusterMetadataResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportClusterMetadataResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReportClusterMetadataRespMultiError, or nil if none found.
func (m *ReportClusterMetadataResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportClusterMetadataResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReportClusterMetadataRespMultiError(errors)
	}

	return nil
}

// ReportClusterMetadataRespMultiError is an error wrapping multiple validation
// errors returned by ReportClusterMetadataResp.ValidateAll() if the
// designated constraints aren't met.
type ReportClusterMetadataRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportClusterMetadataRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportClusterMetadataRespMultiError) AllErrors() []error { return m }

// ReportClusterMetadataRespValidationError is the validation error returned by
// ReportClusterMetadataResp.Validate if the designated constraints aren't met.
type ReportClusterMetadataRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportClusterMetadataRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportClusterMetadataRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportClusterMetadataRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportClusterMetadataRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportClusterMetadataRespValidationError) ErrorName() string {
	return "ReportClusterMetadataRespValidationError"
}

// Error satisfies the builtin error interface
func (e ReportClusterMetadataRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportClusterMetadataResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportClusterMetadataRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportClusterMetadataRespValidationError{}
