// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.10
// source: prodvana/agent/agent_interaction.proto

package agent

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AgentInteraction_Heartbeat_FullMethodName             = "/prodvana.agent.AgentInteraction/Heartbeat"
	AgentInteraction_ConfirmPushApproval_FullMethodName   = "/prodvana.agent.AgentInteraction/ConfirmPushApproval"
	AgentInteraction_RecordNewUnknownPush_FullMethodName  = "/prodvana.agent.AgentInteraction/RecordNewUnknownPush"
	AgentInteraction_RecordPushStart_FullMethodName       = "/prodvana.agent.AgentInteraction/RecordPushStart"
	AgentInteraction_RecordPushOngoing_FullMethodName     = "/prodvana.agent.AgentInteraction/RecordPushOngoing"
	AgentInteraction_RecordPushComplete_FullMethodName    = "/prodvana.agent.AgentInteraction/RecordPushComplete"
	AgentInteraction_RecordPod_FullMethodName             = "/prodvana.agent.AgentInteraction/RecordPod"
	AgentInteraction_RecordPods_FullMethodName            = "/prodvana.agent.AgentInteraction/RecordPods"
	AgentInteraction_RecordDeployment_FullMethodName      = "/prodvana.agent.AgentInteraction/RecordDeployment"
	AgentInteraction_RecordRollout_FullMethodName         = "/prodvana.agent.AgentInteraction/RecordRollout"
	AgentInteraction_ProxyAPIServer_FullMethodName        = "/prodvana.agent.AgentInteraction/ProxyAPIServer"
	AgentInteraction_ReportDebugInfo_FullMethodName       = "/prodvana.agent.AgentInteraction/ReportDebugInfo"
	AgentInteraction_ReportClusterMetadata_FullMethodName = "/prodvana.agent.AgentInteraction/ReportClusterMetadata"
)

// AgentInteractionClient is the client API for AgentInteraction service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentInteractionClient interface {
	Heartbeat(ctx context.Context, in *HeartbeatReq, opts ...grpc.CallOption) (*HeartbeatResp, error)
	ConfirmPushApproval(ctx context.Context, in *ConfirmPushApprovalReq, opts ...grpc.CallOption) (*ConfirmPushApprovalResp, error)
	RecordNewUnknownPush(ctx context.Context, in *RecordNewUnknownPushReq, opts ...grpc.CallOption) (*RecordNewUnknownPushResp, error)
	RecordPushStart(ctx context.Context, in *RecordPushStartReq, opts ...grpc.CallOption) (*RecordPushStartResp, error)
	RecordPushOngoing(ctx context.Context, in *RecordPushOngoingReq, opts ...grpc.CallOption) (*RecordPushOngoingResp, error)
	RecordPushComplete(ctx context.Context, in *RecordPushCompleteReq, opts ...grpc.CallOption) (*RecordPushCompleteResp, error)
	RecordPod(ctx context.Context, in *RecordPodReq, opts ...grpc.CallOption) (*RecordPodResp, error)
	// Dump a snapshot of all pods for a service. Can potentially contain multiple services, or all services.
	// Guaranteed to contain all pods for one service.
	RecordPods(ctx context.Context, in *RecordPodsReq, opts ...grpc.CallOption) (*RecordPodsResp, error)
	RecordDeployment(ctx context.Context, in *RecordDeploymentReq, opts ...grpc.CallOption) (*RecordDeploymentResp, error)
	RecordRollout(ctx context.Context, in *RecordRolloutReq, opts ...grpc.CallOption) (*RecordRolloutResp, error)
	ProxyAPIServer(ctx context.Context, opts ...grpc.CallOption) (AgentInteraction_ProxyAPIServerClient, error)
	ReportDebugInfo(ctx context.Context, in *ReportDebugInfoReq, opts ...grpc.CallOption) (*ReportDebugInfoResp, error)
	ReportClusterMetadata(ctx context.Context, in *ReportClusterMetadataReq, opts ...grpc.CallOption) (*ReportClusterMetadataResp, error)
}

type agentInteractionClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentInteractionClient(cc grpc.ClientConnInterface) AgentInteractionClient {
	return &agentInteractionClient{cc}
}

func (c *agentInteractionClient) Heartbeat(ctx context.Context, in *HeartbeatReq, opts ...grpc.CallOption) (*HeartbeatResp, error) {
	out := new(HeartbeatResp)
	err := c.cc.Invoke(ctx, AgentInteraction_Heartbeat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentInteractionClient) ConfirmPushApproval(ctx context.Context, in *ConfirmPushApprovalReq, opts ...grpc.CallOption) (*ConfirmPushApprovalResp, error) {
	out := new(ConfirmPushApprovalResp)
	err := c.cc.Invoke(ctx, AgentInteraction_ConfirmPushApproval_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentInteractionClient) RecordNewUnknownPush(ctx context.Context, in *RecordNewUnknownPushReq, opts ...grpc.CallOption) (*RecordNewUnknownPushResp, error) {
	out := new(RecordNewUnknownPushResp)
	err := c.cc.Invoke(ctx, AgentInteraction_RecordNewUnknownPush_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentInteractionClient) RecordPushStart(ctx context.Context, in *RecordPushStartReq, opts ...grpc.CallOption) (*RecordPushStartResp, error) {
	out := new(RecordPushStartResp)
	err := c.cc.Invoke(ctx, AgentInteraction_RecordPushStart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentInteractionClient) RecordPushOngoing(ctx context.Context, in *RecordPushOngoingReq, opts ...grpc.CallOption) (*RecordPushOngoingResp, error) {
	out := new(RecordPushOngoingResp)
	err := c.cc.Invoke(ctx, AgentInteraction_RecordPushOngoing_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentInteractionClient) RecordPushComplete(ctx context.Context, in *RecordPushCompleteReq, opts ...grpc.CallOption) (*RecordPushCompleteResp, error) {
	out := new(RecordPushCompleteResp)
	err := c.cc.Invoke(ctx, AgentInteraction_RecordPushComplete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentInteractionClient) RecordPod(ctx context.Context, in *RecordPodReq, opts ...grpc.CallOption) (*RecordPodResp, error) {
	out := new(RecordPodResp)
	err := c.cc.Invoke(ctx, AgentInteraction_RecordPod_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentInteractionClient) RecordPods(ctx context.Context, in *RecordPodsReq, opts ...grpc.CallOption) (*RecordPodsResp, error) {
	out := new(RecordPodsResp)
	err := c.cc.Invoke(ctx, AgentInteraction_RecordPods_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentInteractionClient) RecordDeployment(ctx context.Context, in *RecordDeploymentReq, opts ...grpc.CallOption) (*RecordDeploymentResp, error) {
	out := new(RecordDeploymentResp)
	err := c.cc.Invoke(ctx, AgentInteraction_RecordDeployment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentInteractionClient) RecordRollout(ctx context.Context, in *RecordRolloutReq, opts ...grpc.CallOption) (*RecordRolloutResp, error) {
	out := new(RecordRolloutResp)
	err := c.cc.Invoke(ctx, AgentInteraction_RecordRollout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentInteractionClient) ProxyAPIServer(ctx context.Context, opts ...grpc.CallOption) (AgentInteraction_ProxyAPIServerClient, error) {
	stream, err := c.cc.NewStream(ctx, &AgentInteraction_ServiceDesc.Streams[0], AgentInteraction_ProxyAPIServer_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &agentInteractionProxyAPIServerClient{stream}
	return x, nil
}

type AgentInteraction_ProxyAPIServerClient interface {
	Send(*ProxyAPIServerReq) error
	Recv() (*ProxyAPIServerResp, error)
	grpc.ClientStream
}

type agentInteractionProxyAPIServerClient struct {
	grpc.ClientStream
}

func (x *agentInteractionProxyAPIServerClient) Send(m *ProxyAPIServerReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *agentInteractionProxyAPIServerClient) Recv() (*ProxyAPIServerResp, error) {
	m := new(ProxyAPIServerResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agentInteractionClient) ReportDebugInfo(ctx context.Context, in *ReportDebugInfoReq, opts ...grpc.CallOption) (*ReportDebugInfoResp, error) {
	out := new(ReportDebugInfoResp)
	err := c.cc.Invoke(ctx, AgentInteraction_ReportDebugInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentInteractionClient) ReportClusterMetadata(ctx context.Context, in *ReportClusterMetadataReq, opts ...grpc.CallOption) (*ReportClusterMetadataResp, error) {
	out := new(ReportClusterMetadataResp)
	err := c.cc.Invoke(ctx, AgentInteraction_ReportClusterMetadata_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentInteractionServer is the server API for AgentInteraction service.
// All implementations must embed UnimplementedAgentInteractionServer
// for forward compatibility
type AgentInteractionServer interface {
	Heartbeat(context.Context, *HeartbeatReq) (*HeartbeatResp, error)
	ConfirmPushApproval(context.Context, *ConfirmPushApprovalReq) (*ConfirmPushApprovalResp, error)
	RecordNewUnknownPush(context.Context, *RecordNewUnknownPushReq) (*RecordNewUnknownPushResp, error)
	RecordPushStart(context.Context, *RecordPushStartReq) (*RecordPushStartResp, error)
	RecordPushOngoing(context.Context, *RecordPushOngoingReq) (*RecordPushOngoingResp, error)
	RecordPushComplete(context.Context, *RecordPushCompleteReq) (*RecordPushCompleteResp, error)
	RecordPod(context.Context, *RecordPodReq) (*RecordPodResp, error)
	// Dump a snapshot of all pods for a service. Can potentially contain multiple services, or all services.
	// Guaranteed to contain all pods for one service.
	RecordPods(context.Context, *RecordPodsReq) (*RecordPodsResp, error)
	RecordDeployment(context.Context, *RecordDeploymentReq) (*RecordDeploymentResp, error)
	RecordRollout(context.Context, *RecordRolloutReq) (*RecordRolloutResp, error)
	ProxyAPIServer(AgentInteraction_ProxyAPIServerServer) error
	ReportDebugInfo(context.Context, *ReportDebugInfoReq) (*ReportDebugInfoResp, error)
	ReportClusterMetadata(context.Context, *ReportClusterMetadataReq) (*ReportClusterMetadataResp, error)
	mustEmbedUnimplementedAgentInteractionServer()
}

// UnimplementedAgentInteractionServer must be embedded to have forward compatible implementations.
type UnimplementedAgentInteractionServer struct {
}

func (UnimplementedAgentInteractionServer) Heartbeat(context.Context, *HeartbeatReq) (*HeartbeatResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedAgentInteractionServer) ConfirmPushApproval(context.Context, *ConfirmPushApprovalReq) (*ConfirmPushApprovalResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmPushApproval not implemented")
}
func (UnimplementedAgentInteractionServer) RecordNewUnknownPush(context.Context, *RecordNewUnknownPushReq) (*RecordNewUnknownPushResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordNewUnknownPush not implemented")
}
func (UnimplementedAgentInteractionServer) RecordPushStart(context.Context, *RecordPushStartReq) (*RecordPushStartResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordPushStart not implemented")
}
func (UnimplementedAgentInteractionServer) RecordPushOngoing(context.Context, *RecordPushOngoingReq) (*RecordPushOngoingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordPushOngoing not implemented")
}
func (UnimplementedAgentInteractionServer) RecordPushComplete(context.Context, *RecordPushCompleteReq) (*RecordPushCompleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordPushComplete not implemented")
}
func (UnimplementedAgentInteractionServer) RecordPod(context.Context, *RecordPodReq) (*RecordPodResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordPod not implemented")
}
func (UnimplementedAgentInteractionServer) RecordPods(context.Context, *RecordPodsReq) (*RecordPodsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordPods not implemented")
}
func (UnimplementedAgentInteractionServer) RecordDeployment(context.Context, *RecordDeploymentReq) (*RecordDeploymentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordDeployment not implemented")
}
func (UnimplementedAgentInteractionServer) RecordRollout(context.Context, *RecordRolloutReq) (*RecordRolloutResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordRollout not implemented")
}
func (UnimplementedAgentInteractionServer) ProxyAPIServer(AgentInteraction_ProxyAPIServerServer) error {
	return status.Errorf(codes.Unimplemented, "method ProxyAPIServer not implemented")
}
func (UnimplementedAgentInteractionServer) ReportDebugInfo(context.Context, *ReportDebugInfoReq) (*ReportDebugInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportDebugInfo not implemented")
}
func (UnimplementedAgentInteractionServer) ReportClusterMetadata(context.Context, *ReportClusterMetadataReq) (*ReportClusterMetadataResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportClusterMetadata not implemented")
}
func (UnimplementedAgentInteractionServer) mustEmbedUnimplementedAgentInteractionServer() {}

// UnsafeAgentInteractionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentInteractionServer will
// result in compilation errors.
type UnsafeAgentInteractionServer interface {
	mustEmbedUnimplementedAgentInteractionServer()
}

func RegisterAgentInteractionServer(s grpc.ServiceRegistrar, srv AgentInteractionServer) {
	s.RegisterService(&AgentInteraction_ServiceDesc, srv)
}

func _AgentInteraction_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentInteractionServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentInteraction_Heartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentInteractionServer).Heartbeat(ctx, req.(*HeartbeatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentInteraction_ConfirmPushApproval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmPushApprovalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentInteractionServer).ConfirmPushApproval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentInteraction_ConfirmPushApproval_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentInteractionServer).ConfirmPushApproval(ctx, req.(*ConfirmPushApprovalReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentInteraction_RecordNewUnknownPush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordNewUnknownPushReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentInteractionServer).RecordNewUnknownPush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentInteraction_RecordNewUnknownPush_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentInteractionServer).RecordNewUnknownPush(ctx, req.(*RecordNewUnknownPushReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentInteraction_RecordPushStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordPushStartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentInteractionServer).RecordPushStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentInteraction_RecordPushStart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentInteractionServer).RecordPushStart(ctx, req.(*RecordPushStartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentInteraction_RecordPushOngoing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordPushOngoingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentInteractionServer).RecordPushOngoing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentInteraction_RecordPushOngoing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentInteractionServer).RecordPushOngoing(ctx, req.(*RecordPushOngoingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentInteraction_RecordPushComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordPushCompleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentInteractionServer).RecordPushComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentInteraction_RecordPushComplete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentInteractionServer).RecordPushComplete(ctx, req.(*RecordPushCompleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentInteraction_RecordPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordPodReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentInteractionServer).RecordPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentInteraction_RecordPod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentInteractionServer).RecordPod(ctx, req.(*RecordPodReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentInteraction_RecordPods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordPodsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentInteractionServer).RecordPods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentInteraction_RecordPods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentInteractionServer).RecordPods(ctx, req.(*RecordPodsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentInteraction_RecordDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordDeploymentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentInteractionServer).RecordDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentInteraction_RecordDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentInteractionServer).RecordDeployment(ctx, req.(*RecordDeploymentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentInteraction_RecordRollout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordRolloutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentInteractionServer).RecordRollout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentInteraction_RecordRollout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentInteractionServer).RecordRollout(ctx, req.(*RecordRolloutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentInteraction_ProxyAPIServer_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AgentInteractionServer).ProxyAPIServer(&agentInteractionProxyAPIServerServer{stream})
}

type AgentInteraction_ProxyAPIServerServer interface {
	Send(*ProxyAPIServerResp) error
	Recv() (*ProxyAPIServerReq, error)
	grpc.ServerStream
}

type agentInteractionProxyAPIServerServer struct {
	grpc.ServerStream
}

func (x *agentInteractionProxyAPIServerServer) Send(m *ProxyAPIServerResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *agentInteractionProxyAPIServerServer) Recv() (*ProxyAPIServerReq, error) {
	m := new(ProxyAPIServerReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AgentInteraction_ReportDebugInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportDebugInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentInteractionServer).ReportDebugInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentInteraction_ReportDebugInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentInteractionServer).ReportDebugInfo(ctx, req.(*ReportDebugInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentInteraction_ReportClusterMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportClusterMetadataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentInteractionServer).ReportClusterMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentInteraction_ReportClusterMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentInteractionServer).ReportClusterMetadata(ctx, req.(*ReportClusterMetadataReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AgentInteraction_ServiceDesc is the grpc.ServiceDesc for AgentInteraction service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentInteraction_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "prodvana.agent.AgentInteraction",
	HandlerType: (*AgentInteractionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Heartbeat",
			Handler:    _AgentInteraction_Heartbeat_Handler,
		},
		{
			MethodName: "ConfirmPushApproval",
			Handler:    _AgentInteraction_ConfirmPushApproval_Handler,
		},
		{
			MethodName: "RecordNewUnknownPush",
			Handler:    _AgentInteraction_RecordNewUnknownPush_Handler,
		},
		{
			MethodName: "RecordPushStart",
			Handler:    _AgentInteraction_RecordPushStart_Handler,
		},
		{
			MethodName: "RecordPushOngoing",
			Handler:    _AgentInteraction_RecordPushOngoing_Handler,
		},
		{
			MethodName: "RecordPushComplete",
			Handler:    _AgentInteraction_RecordPushComplete_Handler,
		},
		{
			MethodName: "RecordPod",
			Handler:    _AgentInteraction_RecordPod_Handler,
		},
		{
			MethodName: "RecordPods",
			Handler:    _AgentInteraction_RecordPods_Handler,
		},
		{
			MethodName: "RecordDeployment",
			Handler:    _AgentInteraction_RecordDeployment_Handler,
		},
		{
			MethodName: "RecordRollout",
			Handler:    _AgentInteraction_RecordRollout_Handler,
		},
		{
			MethodName: "ReportDebugInfo",
			Handler:    _AgentInteraction_ReportDebugInfo_Handler,
		},
		{
			MethodName: "ReportClusterMetadata",
			Handler:    _AgentInteraction_ReportClusterMetadata_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProxyAPIServer",
			Handler:       _AgentInteraction_ProxyAPIServer_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "prodvana/agent/agent_interaction.proto",
}
