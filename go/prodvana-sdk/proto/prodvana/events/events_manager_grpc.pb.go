// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.10
// source: prodvana/events/events_manager.proto

package events

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EventsManager_GetEvents_FullMethodName = "/prodvana.events.EventsManager/GetEvents"
)

// EventsManagerClient is the client API for EventsManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventsManagerClient interface {
	GetEvents(ctx context.Context, in *GetEventsReq, opts ...grpc.CallOption) (*GetEventsResp, error)
}

type eventsManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewEventsManagerClient(cc grpc.ClientConnInterface) EventsManagerClient {
	return &eventsManagerClient{cc}
}

func (c *eventsManagerClient) GetEvents(ctx context.Context, in *GetEventsReq, opts ...grpc.CallOption) (*GetEventsResp, error) {
	out := new(GetEventsResp)
	err := c.cc.Invoke(ctx, EventsManager_GetEvents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventsManagerServer is the server API for EventsManager service.
// All implementations must embed UnimplementedEventsManagerServer
// for forward compatibility
type EventsManagerServer interface {
	GetEvents(context.Context, *GetEventsReq) (*GetEventsResp, error)
	mustEmbedUnimplementedEventsManagerServer()
}

// UnimplementedEventsManagerServer must be embedded to have forward compatible implementations.
type UnimplementedEventsManagerServer struct {
}

func (UnimplementedEventsManagerServer) GetEvents(context.Context, *GetEventsReq) (*GetEventsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvents not implemented")
}
func (UnimplementedEventsManagerServer) mustEmbedUnimplementedEventsManagerServer() {}

// UnsafeEventsManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventsManagerServer will
// result in compilation errors.
type UnsafeEventsManagerServer interface {
	mustEmbedUnimplementedEventsManagerServer()
}

func RegisterEventsManagerServer(s grpc.ServiceRegistrar, srv EventsManagerServer) {
	s.RegisterService(&EventsManager_ServiceDesc, srv)
}

func _EventsManager_GetEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsManagerServer).GetEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventsManager_GetEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsManagerServer).GetEvents(ctx, req.(*GetEventsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// EventsManager_ServiceDesc is the grpc.ServiceDesc for EventsManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventsManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "prodvana.events.EventsManager",
	HandlerType: (*EventsManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEvents",
			Handler:    _EventsManager_GetEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "prodvana/events/events_manager.proto",
}
