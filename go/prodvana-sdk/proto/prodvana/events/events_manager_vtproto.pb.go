// Code generated by protoc-gen-go-vtproto. DO NOT EDIT.
// protoc-gen-go-vtproto version: v0.6.0
// source: prodvana/events/events_manager.proto

package events

import (
	timestamppb1 "github.com/planetscale/vtprotobuf/types/known/timestamppb"
	proto "google.golang.org/protobuf/proto"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

func (m *ServiceLookup) CloneVT() *ServiceLookup {
	if m == nil {
		return (*ServiceLookup)(nil)
	}
	r := new(ServiceLookup)
	r.Application = m.Application
	r.Service = m.Service
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ServiceLookup) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ReleaseChannelLookup) CloneVT() *ReleaseChannelLookup {
	if m == nil {
		return (*ReleaseChannelLookup)(nil)
	}
	r := new(ReleaseChannelLookup)
	r.Application = m.Application
	r.ReleaseChannel = m.ReleaseChannel
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ReleaseChannelLookup) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *Lookup) CloneVT() *Lookup {
	if m == nil {
		return (*Lookup)(nil)
	}
	r := new(Lookup)
	if m.LookupOneof != nil {
		r.LookupOneof = m.LookupOneof.(interface{ CloneVT() isLookup_LookupOneof }).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Lookup) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *Lookup_RootDesiredStateId) CloneVT() isLookup_LookupOneof {
	if m == nil {
		return (*Lookup_RootDesiredStateId)(nil)
	}
	r := new(Lookup_RootDesiredStateId)
	r.RootDesiredStateId = m.RootDesiredStateId
	return r
}

func (m *Lookup_DesiredStateId) CloneVT() isLookup_LookupOneof {
	if m == nil {
		return (*Lookup_DesiredStateId)(nil)
	}
	r := new(Lookup_DesiredStateId)
	r.DesiredStateId = m.DesiredStateId
	return r
}

func (m *Lookup_Service) CloneVT() isLookup_LookupOneof {
	if m == nil {
		return (*Lookup_Service)(nil)
	}
	r := new(Lookup_Service)
	r.Service = m.Service.CloneVT()
	return r
}

func (m *Lookup_ReleaseChannel) CloneVT() isLookup_LookupOneof {
	if m == nil {
		return (*Lookup_ReleaseChannel)(nil)
	}
	r := new(Lookup_ReleaseChannel)
	r.ReleaseChannel = m.ReleaseChannel.CloneVT()
	return r
}

func (m *Lookup_ReleaseId) CloneVT() isLookup_LookupOneof {
	if m == nil {
		return (*Lookup_ReleaseId)(nil)
	}
	r := new(Lookup_ReleaseId)
	r.ReleaseId = m.ReleaseId
	return r
}

func (m *GetEventsReq) CloneVT() *GetEventsReq {
	if m == nil {
		return (*GetEventsReq)(nil)
	}
	r := new(GetEventsReq)
	r.PageToken = m.PageToken
	r.PageSize = m.PageSize
	r.OrderByAscTimestamp = m.OrderByAscTimestamp
	r.UseOr = m.UseOr
	r.BeforeTimestamp = (*timestamppb.Timestamp)((*timestamppb1.Timestamp)(m.BeforeTimestamp).CloneVT())
	r.AfterTimestamp = (*timestamppb.Timestamp)((*timestamppb1.Timestamp)(m.AfterTimestamp).CloneVT())
	r.ExpandForRelease = m.ExpandForRelease
	if rhs := m.Lookups; rhs != nil {
		tmpContainer := make([]*Lookup, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Lookups = tmpContainer
	}
	if rhs := m.Types; rhs != nil {
		tmpContainer := make([]EventType, len(rhs))
		copy(tmpContainer, rhs)
		r.Types = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *GetEventsReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *GetEventsResp) CloneVT() *GetEventsResp {
	if m == nil {
		return (*GetEventsResp)(nil)
	}
	r := new(GetEventsResp)
	r.NextPageToken = m.NextPageToken
	if rhs := m.Events; rhs != nil {
		tmpContainer := make([]*Event, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Events = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *GetEventsResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (this *ServiceLookup) StableEqualVT(that *ServiceLookup) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Application != that.Application {
		return false
	}
	if this.Service != that.Service {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ServiceLookup) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ServiceLookup)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ServiceLookup) EqualVT(that *ServiceLookup) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Application != that.Application {
		return false
	}
	if this.Service != that.Service {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ServiceLookup) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ServiceLookup)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ReleaseChannelLookup) StableEqualVT(that *ReleaseChannelLookup) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Application != that.Application {
		return false
	}
	if this.ReleaseChannel != that.ReleaseChannel {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ReleaseChannelLookup) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ReleaseChannelLookup)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ReleaseChannelLookup) EqualVT(that *ReleaseChannelLookup) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Application != that.Application {
		return false
	}
	if this.ReleaseChannel != that.ReleaseChannel {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ReleaseChannelLookup) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ReleaseChannelLookup)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Lookup) StableEqualVT(that *Lookup) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.LookupOneof == nil && that.LookupOneof != nil {
		return false
	} else if this.LookupOneof != nil {
		if that.LookupOneof == nil {
			return false
		}
		if !this.LookupOneof.(interface {
			StableEqualVT(isLookup_LookupOneof) bool
		}).StableEqualVT(that.LookupOneof) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Lookup) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Lookup)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *Lookup_RootDesiredStateId) StableEqualVT(thatIface isLookup_LookupOneof) bool {
	that, ok := thatIface.(*Lookup_RootDesiredStateId)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.RootDesiredStateId != that.RootDesiredStateId {
		return false
	}
	return true
}

func (this *Lookup_DesiredStateId) StableEqualVT(thatIface isLookup_LookupOneof) bool {
	that, ok := thatIface.(*Lookup_DesiredStateId)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.DesiredStateId != that.DesiredStateId {
		return false
	}
	return true
}

func (this *Lookup_Service) StableEqualVT(thatIface isLookup_LookupOneof) bool {
	that, ok := thatIface.(*Lookup_Service)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Service, that.Service; p != q {
		if p == nil {
			p = &ServiceLookup{}
		}
		if q == nil {
			q = &ServiceLookup{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Lookup_ReleaseChannel) StableEqualVT(thatIface isLookup_LookupOneof) bool {
	that, ok := thatIface.(*Lookup_ReleaseChannel)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ReleaseChannel, that.ReleaseChannel; p != q {
		if p == nil {
			p = &ReleaseChannelLookup{}
		}
		if q == nil {
			q = &ReleaseChannelLookup{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Lookup_ReleaseId) StableEqualVT(thatIface isLookup_LookupOneof) bool {
	that, ok := thatIface.(*Lookup_ReleaseId)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.ReleaseId != that.ReleaseId {
		return false
	}
	return true
}

func (this *Lookup) EqualVT(that *Lookup) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.LookupOneof == nil && that.LookupOneof != nil {
		return false
	} else if this.LookupOneof != nil {
		if that.LookupOneof == nil {
			return false
		}
		if !this.LookupOneof.(interface {
			EqualVT(isLookup_LookupOneof) bool
		}).EqualVT(that.LookupOneof) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Lookup) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Lookup)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Lookup_RootDesiredStateId) EqualVT(thatIface isLookup_LookupOneof) bool {
	that, ok := thatIface.(*Lookup_RootDesiredStateId)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.RootDesiredStateId != that.RootDesiredStateId {
		return false
	}
	return true
}

func (this *Lookup_DesiredStateId) EqualVT(thatIface isLookup_LookupOneof) bool {
	that, ok := thatIface.(*Lookup_DesiredStateId)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.DesiredStateId != that.DesiredStateId {
		return false
	}
	return true
}

func (this *Lookup_Service) EqualVT(thatIface isLookup_LookupOneof) bool {
	that, ok := thatIface.(*Lookup_Service)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Service, that.Service; p != q {
		if p == nil {
			p = &ServiceLookup{}
		}
		if q == nil {
			q = &ServiceLookup{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Lookup_ReleaseChannel) EqualVT(thatIface isLookup_LookupOneof) bool {
	that, ok := thatIface.(*Lookup_ReleaseChannel)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ReleaseChannel, that.ReleaseChannel; p != q {
		if p == nil {
			p = &ReleaseChannelLookup{}
		}
		if q == nil {
			q = &ReleaseChannelLookup{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Lookup_ReleaseId) EqualVT(thatIface isLookup_LookupOneof) bool {
	that, ok := thatIface.(*Lookup_ReleaseId)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.ReleaseId != that.ReleaseId {
		return false
	}
	return true
}

func (this *GetEventsReq) StableEqualVT(that *GetEventsReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Lookups) != len(that.Lookups) {
		return false
	}
	for i, vx := range this.Lookups {
		vy := that.Lookups[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Lookup{}
			}
			if q == nil {
				q = &Lookup{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if len(this.Types) != len(that.Types) {
		return false
	}
	for i, vx := range this.Types {
		vy := that.Types[i]
		if vx != vy {
			return false
		}
	}
	if this.PageToken != that.PageToken {
		return false
	}
	if this.PageSize != that.PageSize {
		return false
	}
	if this.OrderByAscTimestamp != that.OrderByAscTimestamp {
		return false
	}
	if this.UseOr != that.UseOr {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.BeforeTimestamp).StableEqualVT((*timestamppb1.Timestamp)(that.BeforeTimestamp)) {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.AfterTimestamp).StableEqualVT((*timestamppb1.Timestamp)(that.AfterTimestamp)) {
		return false
	}
	if this.ExpandForRelease != that.ExpandForRelease {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetEventsReq) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetEventsReq)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *GetEventsReq) EqualVT(that *GetEventsReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Lookups) != len(that.Lookups) {
		return false
	}
	for i, vx := range this.Lookups {
		vy := that.Lookups[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Lookup{}
			}
			if q == nil {
				q = &Lookup{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if len(this.Types) != len(that.Types) {
		return false
	}
	for i, vx := range this.Types {
		vy := that.Types[i]
		if vx != vy {
			return false
		}
	}
	if this.PageToken != that.PageToken {
		return false
	}
	if this.PageSize != that.PageSize {
		return false
	}
	if this.OrderByAscTimestamp != that.OrderByAscTimestamp {
		return false
	}
	if this.UseOr != that.UseOr {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.BeforeTimestamp).EqualVT((*timestamppb1.Timestamp)(that.BeforeTimestamp)) {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.AfterTimestamp).EqualVT((*timestamppb1.Timestamp)(that.AfterTimestamp)) {
		return false
	}
	if this.ExpandForRelease != that.ExpandForRelease {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetEventsReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetEventsReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *GetEventsResp) StableEqualVT(that *GetEventsResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Events) != len(that.Events) {
		return false
	}
	for i, vx := range this.Events {
		vy := that.Events[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Event{}
			}
			if q == nil {
				q = &Event{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if this.NextPageToken != that.NextPageToken {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetEventsResp) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetEventsResp)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *GetEventsResp) EqualVT(that *GetEventsResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Events) != len(that.Events) {
		return false
	}
	for i, vx := range this.Events {
		vy := that.Events[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Event{}
			}
			if q == nil {
				q = &Event{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if this.NextPageToken != that.NextPageToken {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetEventsResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetEventsResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
