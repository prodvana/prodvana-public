// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: prodvana/events/events_manager.proto

package events

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Lookup with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Lookup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Lookup with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in LookupMultiError, or nil if none found.
func (m *Lookup) ValidateAll() error {
	return m.validate(true)
}

func (m *Lookup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	oneofLookupOneofPresent := false
	switch v := m.LookupOneof.(type) {
	case *Lookup_RootDesiredStateId:
		if v == nil {
			err := LookupValidationError{
				field:  "LookupOneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofLookupOneofPresent = true
		// no validation rules for RootDesiredStateId
	case *Lookup_EntityId:
		if v == nil {
			err := LookupValidationError{
				field:  "LookupOneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofLookupOneofPresent = true

		if all {
			switch v := interface{}(m.GetEntityId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LookupValidationError{
						field:  "EntityId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LookupValidationError{
						field:  "EntityId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEntityId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LookupValidationError{
					field:  "EntityId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Lookup_DesiredStateId:
		if v == nil {
			err := LookupValidationError{
				field:  "LookupOneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofLookupOneofPresent = true
		// no validation rules for DesiredStateId
	default:
		_ = v // ensures v is used
	}
	if !oneofLookupOneofPresent {
		err := LookupValidationError{
			field:  "LookupOneof",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LookupMultiError(errors)
	}

	return nil
}

// LookupMultiError is an error wrapping multiple validation errors returned by
// Lookup.ValidateAll() if the designated constraints aren't met.
type LookupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LookupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LookupMultiError) AllErrors() []error { return m }

// LookupValidationError is the validation error returned by Lookup.Validate if
// the designated constraints aren't met.
type LookupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LookupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LookupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LookupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LookupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LookupValidationError) ErrorName() string { return "LookupValidationError" }

// Error satisfies the builtin error interface
func (e LookupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLookup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LookupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LookupValidationError{}

// Validate checks the field values on GetEventsReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetEventsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEventsReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetEventsReqMultiError, or
// nil if none found.
func (m *GetEventsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEventsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetLookup() == nil {
		err := GetEventsReqValidationError{
			field:  "Lookup",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetLookup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetEventsReqValidationError{
					field:  "Lookup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetEventsReqValidationError{
					field:  "Lookup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLookup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetEventsReqValidationError{
				field:  "Lookup",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PageToken

	// no validation rules for PageSize

	// no validation rules for OrderByDescTimestamp

	if len(errors) > 0 {
		return GetEventsReqMultiError(errors)
	}

	return nil
}

// GetEventsReqMultiError is an error wrapping multiple validation errors
// returned by GetEventsReq.ValidateAll() if the designated constraints aren't met.
type GetEventsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEventsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEventsReqMultiError) AllErrors() []error { return m }

// GetEventsReqValidationError is the validation error returned by
// GetEventsReq.Validate if the designated constraints aren't met.
type GetEventsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEventsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEventsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEventsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEventsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEventsReqValidationError) ErrorName() string { return "GetEventsReqValidationError" }

// Error satisfies the builtin error interface
func (e GetEventsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEventsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEventsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEventsReqValidationError{}

// Validate checks the field values on GetEventsResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetEventsResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEventsResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetEventsRespMultiError, or
// nil if none found.
func (m *GetEventsResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEventsResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEvents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetEventsRespValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetEventsRespValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetEventsRespValidationError{
					field:  fmt.Sprintf("Events[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return GetEventsRespMultiError(errors)
	}

	return nil
}

// GetEventsRespMultiError is an error wrapping multiple validation errors
// returned by GetEventsResp.ValidateAll() if the designated constraints
// aren't met.
type GetEventsRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEventsRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEventsRespMultiError) AllErrors() []error { return m }

// GetEventsRespValidationError is the validation error returned by
// GetEventsResp.Validate if the designated constraints aren't met.
type GetEventsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEventsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEventsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEventsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEventsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEventsRespValidationError) ErrorName() string { return "GetEventsRespValidationError" }

// Error satisfies the builtin error interface
func (e GetEventsRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEventsResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEventsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEventsRespValidationError{}
