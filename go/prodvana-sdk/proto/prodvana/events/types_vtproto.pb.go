// Code generated by protoc-gen-go-vtproto. DO NOT EDIT.
// protoc-gen-go-vtproto version: v0.6.0
// source: prodvana/events/types.proto

package events

import (
	anypb1 "github.com/planetscale/vtprotobuf/types/known/anypb"
	model "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/desired_state/model"
	proto "google.golang.org/protobuf/proto"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

func (m *SetDesiredStateEvent) CloneVT() *SetDesiredStateEvent {
	if m == nil {
		return (*SetDesiredStateEvent)(nil)
	}
	r := new(SetDesiredStateEvent)
	r.Id = m.Id.CloneVT()
	r.DesiredStateId = m.DesiredStateId
	r.RootDesiredStateId = m.RootDesiredStateId
	r.Desired = m.Desired.CloneVT()
	r.IsRollback = m.IsRollback
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *SetDesiredStateEvent) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *SetTargetStateEvent) CloneVT() *SetTargetStateEvent {
	if m == nil {
		return (*SetTargetStateEvent)(nil)
	}
	r := new(SetTargetStateEvent)
	r.Id = m.Id.CloneVT()
	r.DesiredStateId = m.DesiredStateId
	r.RootDesiredStateId = m.RootDesiredStateId
	r.Target = m.Target.CloneVT()
	r.Desired = m.Desired.CloneVT()
	r.Current = m.Current.CloneVT()
	r.IsAutoRollback = m.IsAutoRollback
	r.Status = m.Status
	if rhs := m.StatusExplanations; rhs != nil {
		tmpContainer := make([]*model.StatusExplanation, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.StatusExplanations = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *SetTargetStateEvent) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ApplyTargetStateEvent) CloneVT() *ApplyTargetStateEvent {
	if m == nil {
		return (*ApplyTargetStateEvent)(nil)
	}
	r := new(ApplyTargetStateEvent)
	r.Id = m.Id.CloneVT()
	r.DesiredStateId = m.DesiredStateId
	r.RootDesiredStateId = m.RootDesiredStateId
	r.Target = m.Target.CloneVT()
	r.Current = m.Current.CloneVT()
	r.IsAutoRollback = m.IsAutoRollback
	r.Result = m.Result
	r.Error = m.Error
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ApplyTargetStateEvent) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ProgramExitEvent) CloneVT() *ProgramExitEvent {
	if m == nil {
		return (*ProgramExitEvent)(nil)
	}
	r := new(ProgramExitEvent)
	r.Namespace = m.Namespace
	r.Pod = m.Pod
	r.Program = m.Program
	r.RestartCount = m.RestartCount
	r.Reason = m.Reason
	r.KilledReason = m.KilledReason
	r.ExitCode = m.ExitCode
	r.Signal = m.Signal
	r.StructuredOutput = m.StructuredOutput.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ProgramExitEvent) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *DeliveryProgressEvent) CloneVT() *DeliveryProgressEvent {
	if m == nil {
		return (*DeliveryProgressEvent)(nil)
	}
	r := new(DeliveryProgressEvent)
	r.State = m.State.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *DeliveryProgressEvent) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *DeliveryManualPromotionEvent) CloneVT() *DeliveryManualPromotionEvent {
	if m == nil {
		return (*DeliveryManualPromotionEvent)(nil)
	}
	r := new(DeliveryManualPromotionEvent)
	r.State = m.State.CloneVT()
	r.Stage = m.Stage
	r.Full = m.Full
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *DeliveryManualPromotionEvent) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ManualApprovalEvent) CloneVT() *ManualApprovalEvent {
	if m == nil {
		return (*ManualApprovalEvent)(nil)
	}
	r := new(ManualApprovalEvent)
	r.Status = m.Status
	r.Topic = m.Topic
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ManualApprovalEvent) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CustomTaskExecutionEvent) CloneVT() *CustomTaskExecutionEvent {
	if m == nil {
		return (*CustomTaskExecutionEvent)(nil)
	}
	r := new(CustomTaskExecutionEvent)
	r.Successful = m.Successful
	r.Attempts = m.Attempts
	r.Reason = m.Reason
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CustomTaskExecutionEvent) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RuntimeObject) CloneVT() *RuntimeObject {
	if m == nil {
		return (*RuntimeObject)(nil)
	}
	r := new(RuntimeObject)
	r.Name = m.Name
	r.Kind = m.Kind
	r.Namespace = m.Namespace
	r.Url = m.Url
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RuntimeObject) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RuntimeUpdateEvent) CloneVT() *RuntimeUpdateEvent {
	if m == nil {
		return (*RuntimeUpdateEvent)(nil)
	}
	r := new(RuntimeUpdateEvent)
	r.Action = m.Action
	r.Object = m.Object.CloneVT()
	r.Status = m.Status
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RuntimeUpdateEvent) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *DesiredStateStatusChangeEvent) CloneVT() *DesiredStateStatusChangeEvent {
	if m == nil {
		return (*DesiredStateStatusChangeEvent)(nil)
	}
	r := new(DesiredStateStatusChangeEvent)
	r.Id = m.Id.CloneVT()
	r.DesiredStateId = m.DesiredStateId
	r.RootDesiredStateId = m.RootDesiredStateId
	r.OldStatus = m.OldStatus
	r.NewStatus = m.NewStatus
	r.Desired = m.Desired.CloneVT()
	r.Target = m.Target.CloneVT()
	r.OldState = m.OldState.CloneVT()
	r.NewState = m.NewState.CloneVT()
	if rhs := m.StatusExplanations; rhs != nil {
		tmpContainer := make([]*model.StatusExplanation, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.StatusExplanations = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *DesiredStateStatusChangeEvent) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *KeyDeliveryDecisionEvent) CloneVT() *KeyDeliveryDecisionEvent {
	if m == nil {
		return (*KeyDeliveryDecisionEvent)(nil)
	}
	r := new(KeyDeliveryDecisionEvent)
	r.Id = m.Id.CloneVT()
	r.DesiredStateId = m.DesiredStateId
	r.RootDesiredStateId = m.RootDesiredStateId
	r.Decision = m.Decision
	r.Explanation = m.Explanation
	r.Status = m.Status
	r.Desired = m.Desired.CloneVT()
	r.Target = m.Target.CloneVT()
	r.Current = m.Current.CloneVT()
	if rhs := m.StatusExplanations; rhs != nil {
		tmpContainer := make([]*model.StatusExplanation, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.StatusExplanations = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *KeyDeliveryDecisionEvent) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RpcCallEvent) CloneVT() *RpcCallEvent {
	if m == nil {
		return (*RpcCallEvent)(nil)
	}
	r := new(RpcCallEvent)
	r.Type = m.Type
	r.RpcService = m.RpcService
	r.RpcMethod = m.RpcMethod
	r.Request = (*anypb.Any)((*anypb1.Any)(m.Request).CloneVT())
	r.Response = (*anypb.Any)((*anypb1.Any)(m.Response).CloneVT())
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RpcCallEvent) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ApplicationHandle) CloneVT() *ApplicationHandle {
	if m == nil {
		return (*ApplicationHandle)(nil)
	}
	r := new(ApplicationHandle)
	r.Name = m.Name
	r.Id = m.Id
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ApplicationHandle) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ReleaseChannelHandle) CloneVT() *ReleaseChannelHandle {
	if m == nil {
		return (*ReleaseChannelHandle)(nil)
	}
	r := new(ReleaseChannelHandle)
	r.Application = m.Application.CloneVT()
	r.Name = m.Name
	r.Id = m.Id
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ReleaseChannelHandle) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ServiceHandle) CloneVT() *ServiceHandle {
	if m == nil {
		return (*ServiceHandle)(nil)
	}
	r := new(ServiceHandle)
	r.Application = m.Application.CloneVT()
	r.ReleaseChannel = m.ReleaseChannel.CloneVT()
	r.Name = m.Name
	r.Id = m.Id
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ServiceHandle) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RuntimeHandle) CloneVT() *RuntimeHandle {
	if m == nil {
		return (*RuntimeHandle)(nil)
	}
	r := new(RuntimeHandle)
	r.Name = m.Name
	r.Id = m.Id
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RuntimeHandle) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ProtectionHandle) CloneVT() *ProtectionHandle {
	if m == nil {
		return (*ProtectionHandle)(nil)
	}
	r := new(ProtectionHandle)
	r.Name = m.Name
	r.Id = m.Id
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ProtectionHandle) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *PermissionDeniedEvent) CloneVT() *PermissionDeniedEvent {
	if m == nil {
		return (*PermissionDeniedEvent)(nil)
	}
	r := new(PermissionDeniedEvent)
	r.Action = m.Action
	if m.Target != nil {
		r.Target = m.Target.(interface {
			CloneVT() isPermissionDeniedEvent_Target
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *PermissionDeniedEvent) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *PermissionDeniedEvent_Application) CloneVT() isPermissionDeniedEvent_Target {
	if m == nil {
		return (*PermissionDeniedEvent_Application)(nil)
	}
	r := new(PermissionDeniedEvent_Application)
	r.Application = m.Application.CloneVT()
	return r
}

func (m *PermissionDeniedEvent_ReleaseChannel) CloneVT() isPermissionDeniedEvent_Target {
	if m == nil {
		return (*PermissionDeniedEvent_ReleaseChannel)(nil)
	}
	r := new(PermissionDeniedEvent_ReleaseChannel)
	r.ReleaseChannel = m.ReleaseChannel.CloneVT()
	return r
}

func (m *PermissionDeniedEvent_Service) CloneVT() isPermissionDeniedEvent_Target {
	if m == nil {
		return (*PermissionDeniedEvent_Service)(nil)
	}
	r := new(PermissionDeniedEvent_Service)
	r.Service = m.Service.CloneVT()
	return r
}

func (m *PermissionDeniedEvent_Runtime) CloneVT() isPermissionDeniedEvent_Target {
	if m == nil {
		return (*PermissionDeniedEvent_Runtime)(nil)
	}
	r := new(PermissionDeniedEvent_Runtime)
	r.Runtime = m.Runtime.CloneVT()
	return r
}

func (m *PermissionDeniedEvent_Protection) CloneVT() isPermissionDeniedEvent_Target {
	if m == nil {
		return (*PermissionDeniedEvent_Protection)(nil)
	}
	r := new(PermissionDeniedEvent_Protection)
	r.Protection = m.Protection.CloneVT()
	return r
}

func (m *ObjectCreatedEvent) CloneVT() *ObjectCreatedEvent {
	if m == nil {
		return (*ObjectCreatedEvent)(nil)
	}
	r := new(ObjectCreatedEvent)
	r.ConfigVersion = m.ConfigVersion
	if m.Target != nil {
		r.Target = m.Target.(interface {
			CloneVT() isObjectCreatedEvent_Target
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ObjectCreatedEvent) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ObjectCreatedEvent_Application) CloneVT() isObjectCreatedEvent_Target {
	if m == nil {
		return (*ObjectCreatedEvent_Application)(nil)
	}
	r := new(ObjectCreatedEvent_Application)
	r.Application = m.Application.CloneVT()
	return r
}

func (m *ObjectCreatedEvent_ReleaseChannel) CloneVT() isObjectCreatedEvent_Target {
	if m == nil {
		return (*ObjectCreatedEvent_ReleaseChannel)(nil)
	}
	r := new(ObjectCreatedEvent_ReleaseChannel)
	r.ReleaseChannel = m.ReleaseChannel.CloneVT()
	return r
}

func (m *ObjectCreatedEvent_Service) CloneVT() isObjectCreatedEvent_Target {
	if m == nil {
		return (*ObjectCreatedEvent_Service)(nil)
	}
	r := new(ObjectCreatedEvent_Service)
	r.Service = m.Service.CloneVT()
	return r
}

func (m *ObjectCreatedEvent_Runtime) CloneVT() isObjectCreatedEvent_Target {
	if m == nil {
		return (*ObjectCreatedEvent_Runtime)(nil)
	}
	r := new(ObjectCreatedEvent_Runtime)
	r.Runtime = m.Runtime.CloneVT()
	return r
}

func (m *ObjectCreatedEvent_Protection) CloneVT() isObjectCreatedEvent_Target {
	if m == nil {
		return (*ObjectCreatedEvent_Protection)(nil)
	}
	r := new(ObjectCreatedEvent_Protection)
	r.Protection = m.Protection.CloneVT()
	return r
}

func (m *ObjectDeletedEvent) CloneVT() *ObjectDeletedEvent {
	if m == nil {
		return (*ObjectDeletedEvent)(nil)
	}
	r := new(ObjectDeletedEvent)
	r.ConfigVersion = m.ConfigVersion
	if m.Target != nil {
		r.Target = m.Target.(interface {
			CloneVT() isObjectDeletedEvent_Target
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ObjectDeletedEvent) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ObjectDeletedEvent_Application) CloneVT() isObjectDeletedEvent_Target {
	if m == nil {
		return (*ObjectDeletedEvent_Application)(nil)
	}
	r := new(ObjectDeletedEvent_Application)
	r.Application = m.Application.CloneVT()
	return r
}

func (m *ObjectDeletedEvent_ReleaseChannel) CloneVT() isObjectDeletedEvent_Target {
	if m == nil {
		return (*ObjectDeletedEvent_ReleaseChannel)(nil)
	}
	r := new(ObjectDeletedEvent_ReleaseChannel)
	r.ReleaseChannel = m.ReleaseChannel.CloneVT()
	return r
}

func (m *ObjectDeletedEvent_Service) CloneVT() isObjectDeletedEvent_Target {
	if m == nil {
		return (*ObjectDeletedEvent_Service)(nil)
	}
	r := new(ObjectDeletedEvent_Service)
	r.Service = m.Service.CloneVT()
	return r
}

func (m *ObjectDeletedEvent_Runtime) CloneVT() isObjectDeletedEvent_Target {
	if m == nil {
		return (*ObjectDeletedEvent_Runtime)(nil)
	}
	r := new(ObjectDeletedEvent_Runtime)
	r.Runtime = m.Runtime.CloneVT()
	return r
}

func (m *ObjectDeletedEvent_Protection) CloneVT() isObjectDeletedEvent_Target {
	if m == nil {
		return (*ObjectDeletedEvent_Protection)(nil)
	}
	r := new(ObjectDeletedEvent_Protection)
	r.Protection = m.Protection.CloneVT()
	return r
}

func (m *ObjectModifiedEvent) CloneVT() *ObjectModifiedEvent {
	if m == nil {
		return (*ObjectModifiedEvent)(nil)
	}
	r := new(ObjectModifiedEvent)
	r.OldConfigVersion = m.OldConfigVersion
	r.NewConfigVersion = m.NewConfigVersion
	if m.Target != nil {
		r.Target = m.Target.(interface {
			CloneVT() isObjectModifiedEvent_Target
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ObjectModifiedEvent) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ObjectModifiedEvent_Application) CloneVT() isObjectModifiedEvent_Target {
	if m == nil {
		return (*ObjectModifiedEvent_Application)(nil)
	}
	r := new(ObjectModifiedEvent_Application)
	r.Application = m.Application.CloneVT()
	return r
}

func (m *ObjectModifiedEvent_ReleaseChannel) CloneVT() isObjectModifiedEvent_Target {
	if m == nil {
		return (*ObjectModifiedEvent_ReleaseChannel)(nil)
	}
	r := new(ObjectModifiedEvent_ReleaseChannel)
	r.ReleaseChannel = m.ReleaseChannel.CloneVT()
	return r
}

func (m *ObjectModifiedEvent_Service) CloneVT() isObjectModifiedEvent_Target {
	if m == nil {
		return (*ObjectModifiedEvent_Service)(nil)
	}
	r := new(ObjectModifiedEvent_Service)
	r.Service = m.Service.CloneVT()
	return r
}

func (m *ObjectModifiedEvent_Runtime) CloneVT() isObjectModifiedEvent_Target {
	if m == nil {
		return (*ObjectModifiedEvent_Runtime)(nil)
	}
	r := new(ObjectModifiedEvent_Runtime)
	r.Runtime = m.Runtime.CloneVT()
	return r
}

func (m *ObjectModifiedEvent_Protection) CloneVT() isObjectModifiedEvent_Target {
	if m == nil {
		return (*ObjectModifiedEvent_Protection)(nil)
	}
	r := new(ObjectModifiedEvent_Protection)
	r.Protection = m.Protection.CloneVT()
	return r
}

func (m *DeploymentCreatedEvent) CloneVT() *DeploymentCreatedEvent {
	if m == nil {
		return (*DeploymentCreatedEvent)(nil)
	}
	r := new(DeploymentCreatedEvent)
	r.Deployment = m.Deployment.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *DeploymentCreatedEvent) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *DeploymentUpdatedEvent) CloneVT() *DeploymentUpdatedEvent {
	if m == nil {
		return (*DeploymentUpdatedEvent)(nil)
	}
	r := new(DeploymentUpdatedEvent)
	r.Deployment = m.Deployment.CloneVT()
	r.OldStatus = m.OldStatus
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *DeploymentUpdatedEvent) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *KubectlCmdEvent) CloneVT() *KubectlCmdEvent {
	if m == nil {
		return (*KubectlCmdEvent)(nil)
	}
	r := new(KubectlCmdEvent)
	r.Runtime = m.Runtime
	r.ExitCode = m.ExitCode
	if rhs := m.Args; rhs != nil {
		tmpContainer := make([]string, len(rhs))
		copy(tmpContainer, rhs)
		r.Args = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *KubectlCmdEvent) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *AuditLogDebugEvent) CloneVT() *AuditLogDebugEvent {
	if m == nil {
		return (*AuditLogDebugEvent)(nil)
	}
	r := new(AuditLogDebugEvent)
	if rhs := m.Details; rhs != nil {
		tmpContainer := make(map[string]string, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v
		}
		r.Details = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *AuditLogDebugEvent) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ReleaseCreatedEvent) CloneVT() *ReleaseCreatedEvent {
	if m == nil {
		return (*ReleaseCreatedEvent)(nil)
	}
	r := new(ReleaseCreatedEvent)
	r.Id = m.Id.CloneVT()
	r.ReleaseId = m.ReleaseId
	r.Desired = m.Desired.CloneVT()
	r.IsRollback = m.IsRollback
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ReleaseCreatedEvent) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *EventDetails) CloneVT() *EventDetails {
	if m == nil {
		return (*EventDetails)(nil)
	}
	r := new(EventDetails)
	if m.Details != nil {
		r.Details = m.Details.(interface{ CloneVT() isEventDetails_Details }).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *EventDetails) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *EventDetails_SetDesiredState) CloneVT() isEventDetails_Details {
	if m == nil {
		return (*EventDetails_SetDesiredState)(nil)
	}
	r := new(EventDetails_SetDesiredState)
	r.SetDesiredState = m.SetDesiredState.CloneVT()
	return r
}

func (m *EventDetails_SetTargetState) CloneVT() isEventDetails_Details {
	if m == nil {
		return (*EventDetails_SetTargetState)(nil)
	}
	r := new(EventDetails_SetTargetState)
	r.SetTargetState = m.SetTargetState.CloneVT()
	return r
}

func (m *EventDetails_ProgramExit) CloneVT() isEventDetails_Details {
	if m == nil {
		return (*EventDetails_ProgramExit)(nil)
	}
	r := new(EventDetails_ProgramExit)
	r.ProgramExit = m.ProgramExit.CloneVT()
	return r
}

func (m *EventDetails_ApplyTargetState) CloneVT() isEventDetails_Details {
	if m == nil {
		return (*EventDetails_ApplyTargetState)(nil)
	}
	r := new(EventDetails_ApplyTargetState)
	r.ApplyTargetState = m.ApplyTargetState.CloneVT()
	return r
}

func (m *EventDetails_ManualApproval) CloneVT() isEventDetails_Details {
	if m == nil {
		return (*EventDetails_ManualApproval)(nil)
	}
	r := new(EventDetails_ManualApproval)
	r.ManualApproval = m.ManualApproval.CloneVT()
	return r
}

func (m *EventDetails_CustomTaskExecution) CloneVT() isEventDetails_Details {
	if m == nil {
		return (*EventDetails_CustomTaskExecution)(nil)
	}
	r := new(EventDetails_CustomTaskExecution)
	r.CustomTaskExecution = m.CustomTaskExecution.CloneVT()
	return r
}

func (m *EventDetails_RuntimeUpdate) CloneVT() isEventDetails_Details {
	if m == nil {
		return (*EventDetails_RuntimeUpdate)(nil)
	}
	r := new(EventDetails_RuntimeUpdate)
	r.RuntimeUpdate = m.RuntimeUpdate.CloneVT()
	return r
}

func (m *EventDetails_DeliveryProgress) CloneVT() isEventDetails_Details {
	if m == nil {
		return (*EventDetails_DeliveryProgress)(nil)
	}
	r := new(EventDetails_DeliveryProgress)
	r.DeliveryProgress = m.DeliveryProgress.CloneVT()
	return r
}

func (m *EventDetails_DeliveryPromotion) CloneVT() isEventDetails_Details {
	if m == nil {
		return (*EventDetails_DeliveryPromotion)(nil)
	}
	r := new(EventDetails_DeliveryPromotion)
	r.DeliveryPromotion = m.DeliveryPromotion.CloneVT()
	return r
}

func (m *EventDetails_DesiredStateStatusChange) CloneVT() isEventDetails_Details {
	if m == nil {
		return (*EventDetails_DesiredStateStatusChange)(nil)
	}
	r := new(EventDetails_DesiredStateStatusChange)
	r.DesiredStateStatusChange = m.DesiredStateStatusChange.CloneVT()
	return r
}

func (m *EventDetails_KeyDeliveryDecision) CloneVT() isEventDetails_Details {
	if m == nil {
		return (*EventDetails_KeyDeliveryDecision)(nil)
	}
	r := new(EventDetails_KeyDeliveryDecision)
	r.KeyDeliveryDecision = m.KeyDeliveryDecision.CloneVT()
	return r
}

func (m *EventDetails_RpcCall) CloneVT() isEventDetails_Details {
	if m == nil {
		return (*EventDetails_RpcCall)(nil)
	}
	r := new(EventDetails_RpcCall)
	r.RpcCall = m.RpcCall.CloneVT()
	return r
}

func (m *EventDetails_PermissionDenied) CloneVT() isEventDetails_Details {
	if m == nil {
		return (*EventDetails_PermissionDenied)(nil)
	}
	r := new(EventDetails_PermissionDenied)
	r.PermissionDenied = m.PermissionDenied.CloneVT()
	return r
}

func (m *EventDetails_ObjectCreated) CloneVT() isEventDetails_Details {
	if m == nil {
		return (*EventDetails_ObjectCreated)(nil)
	}
	r := new(EventDetails_ObjectCreated)
	r.ObjectCreated = m.ObjectCreated.CloneVT()
	return r
}

func (m *EventDetails_ObjectDeleted) CloneVT() isEventDetails_Details {
	if m == nil {
		return (*EventDetails_ObjectDeleted)(nil)
	}
	r := new(EventDetails_ObjectDeleted)
	r.ObjectDeleted = m.ObjectDeleted.CloneVT()
	return r
}

func (m *EventDetails_ObjectModified) CloneVT() isEventDetails_Details {
	if m == nil {
		return (*EventDetails_ObjectModified)(nil)
	}
	r := new(EventDetails_ObjectModified)
	r.ObjectModified = m.ObjectModified.CloneVT()
	return r
}

func (m *EventDetails_KubectlCmd) CloneVT() isEventDetails_Details {
	if m == nil {
		return (*EventDetails_KubectlCmd)(nil)
	}
	r := new(EventDetails_KubectlCmd)
	r.KubectlCmd = m.KubectlCmd.CloneVT()
	return r
}

func (m *EventDetails_AuditLogDebug) CloneVT() isEventDetails_Details {
	if m == nil {
		return (*EventDetails_AuditLogDebug)(nil)
	}
	r := new(EventDetails_AuditLogDebug)
	r.AuditLogDebug = m.AuditLogDebug.CloneVT()
	return r
}

func (m *EventDetails_DeploymentCreated) CloneVT() isEventDetails_Details {
	if m == nil {
		return (*EventDetails_DeploymentCreated)(nil)
	}
	r := new(EventDetails_DeploymentCreated)
	r.DeploymentCreated = m.DeploymentCreated.CloneVT()
	return r
}

func (m *EventDetails_DeploymentUpdated) CloneVT() isEventDetails_Details {
	if m == nil {
		return (*EventDetails_DeploymentUpdated)(nil)
	}
	r := new(EventDetails_DeploymentUpdated)
	r.DeploymentUpdated = m.DeploymentUpdated.CloneVT()
	return r
}

func (m *EventDetails_ReleaseCreated) CloneVT() isEventDetails_Details {
	if m == nil {
		return (*EventDetails_ReleaseCreated)(nil)
	}
	r := new(EventDetails_ReleaseCreated)
	r.ReleaseCreated = m.ReleaseCreated.CloneVT()
	return r
}

func (this *SetDesiredStateEvent) EqualVT(that *SetDesiredStateEvent) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Id.EqualVT(that.Id) {
		return false
	}
	if !this.Desired.EqualVT(that.Desired) {
		return false
	}
	if this.DesiredStateId != that.DesiredStateId {
		return false
	}
	if this.RootDesiredStateId != that.RootDesiredStateId {
		return false
	}
	if this.IsRollback != that.IsRollback {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *SetDesiredStateEvent) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*SetDesiredStateEvent)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *SetTargetStateEvent) EqualVT(that *SetTargetStateEvent) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Id.EqualVT(that.Id) {
		return false
	}
	if !this.Target.EqualVT(that.Target) {
		return false
	}
	if !this.Desired.EqualVT(that.Desired) {
		return false
	}
	if !this.Current.EqualVT(that.Current) {
		return false
	}
	if this.IsAutoRollback != that.IsAutoRollback {
		return false
	}
	if this.Status != that.Status {
		return false
	}
	if len(this.StatusExplanations) != len(that.StatusExplanations) {
		return false
	}
	for i, vx := range this.StatusExplanations {
		vy := that.StatusExplanations[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &model.StatusExplanation{}
			}
			if q == nil {
				q = &model.StatusExplanation{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if this.DesiredStateId != that.DesiredStateId {
		return false
	}
	if this.RootDesiredStateId != that.RootDesiredStateId {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *SetTargetStateEvent) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*SetTargetStateEvent)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ApplyTargetStateEvent) EqualVT(that *ApplyTargetStateEvent) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Id.EqualVT(that.Id) {
		return false
	}
	if !this.Target.EqualVT(that.Target) {
		return false
	}
	if !this.Current.EqualVT(that.Current) {
		return false
	}
	if this.IsAutoRollback != that.IsAutoRollback {
		return false
	}
	if this.Result != that.Result {
		return false
	}
	if this.DesiredStateId != that.DesiredStateId {
		return false
	}
	if this.RootDesiredStateId != that.RootDesiredStateId {
		return false
	}
	if this.Error != that.Error {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ApplyTargetStateEvent) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ApplyTargetStateEvent)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ProgramExitEvent) EqualVT(that *ProgramExitEvent) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Namespace != that.Namespace {
		return false
	}
	if this.Pod != that.Pod {
		return false
	}
	if this.Program != that.Program {
		return false
	}
	if this.RestartCount != that.RestartCount {
		return false
	}
	if this.Reason != that.Reason {
		return false
	}
	if this.ExitCode != that.ExitCode {
		return false
	}
	if this.Signal != that.Signal {
		return false
	}
	if this.KilledReason != that.KilledReason {
		return false
	}
	if !this.StructuredOutput.EqualVT(that.StructuredOutput) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ProgramExitEvent) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ProgramExitEvent)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *DeliveryProgressEvent) EqualVT(that *DeliveryProgressEvent) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.State.EqualVT(that.State) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *DeliveryProgressEvent) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*DeliveryProgressEvent)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *DeliveryManualPromotionEvent) EqualVT(that *DeliveryManualPromotionEvent) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.State.EqualVT(that.State) {
		return false
	}
	if this.Stage != that.Stage {
		return false
	}
	if this.Full != that.Full {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *DeliveryManualPromotionEvent) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*DeliveryManualPromotionEvent)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ManualApprovalEvent) EqualVT(that *ManualApprovalEvent) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Status != that.Status {
		return false
	}
	if this.Topic != that.Topic {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ManualApprovalEvent) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ManualApprovalEvent)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CustomTaskExecutionEvent) EqualVT(that *CustomTaskExecutionEvent) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Successful != that.Successful {
		return false
	}
	if this.Attempts != that.Attempts {
		return false
	}
	if this.Reason != that.Reason {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CustomTaskExecutionEvent) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CustomTaskExecutionEvent)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RuntimeObject) EqualVT(that *RuntimeObject) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	if this.Kind != that.Kind {
		return false
	}
	if this.Namespace != that.Namespace {
		return false
	}
	if this.Url != that.Url {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RuntimeObject) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RuntimeObject)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RuntimeUpdateEvent) EqualVT(that *RuntimeUpdateEvent) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Action != that.Action {
		return false
	}
	if !this.Object.EqualVT(that.Object) {
		return false
	}
	if this.Status != that.Status {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RuntimeUpdateEvent) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RuntimeUpdateEvent)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *DesiredStateStatusChangeEvent) EqualVT(that *DesiredStateStatusChangeEvent) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Id.EqualVT(that.Id) {
		return false
	}
	if this.DesiredStateId != that.DesiredStateId {
		return false
	}
	if this.RootDesiredStateId != that.RootDesiredStateId {
		return false
	}
	if this.OldStatus != that.OldStatus {
		return false
	}
	if this.NewStatus != that.NewStatus {
		return false
	}
	if !this.Desired.EqualVT(that.Desired) {
		return false
	}
	if !this.Target.EqualVT(that.Target) {
		return false
	}
	if !this.OldState.EqualVT(that.OldState) {
		return false
	}
	if !this.NewState.EqualVT(that.NewState) {
		return false
	}
	if len(this.StatusExplanations) != len(that.StatusExplanations) {
		return false
	}
	for i, vx := range this.StatusExplanations {
		vy := that.StatusExplanations[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &model.StatusExplanation{}
			}
			if q == nil {
				q = &model.StatusExplanation{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *DesiredStateStatusChangeEvent) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*DesiredStateStatusChangeEvent)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *KeyDeliveryDecisionEvent) EqualVT(that *KeyDeliveryDecisionEvent) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Id.EqualVT(that.Id) {
		return false
	}
	if this.DesiredStateId != that.DesiredStateId {
		return false
	}
	if this.RootDesiredStateId != that.RootDesiredStateId {
		return false
	}
	if this.Decision != that.Decision {
		return false
	}
	if this.Explanation != that.Explanation {
		return false
	}
	if this.Status != that.Status {
		return false
	}
	if !this.Desired.EqualVT(that.Desired) {
		return false
	}
	if !this.Target.EqualVT(that.Target) {
		return false
	}
	if !this.Current.EqualVT(that.Current) {
		return false
	}
	if len(this.StatusExplanations) != len(that.StatusExplanations) {
		return false
	}
	for i, vx := range this.StatusExplanations {
		vy := that.StatusExplanations[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &model.StatusExplanation{}
			}
			if q == nil {
				q = &model.StatusExplanation{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *KeyDeliveryDecisionEvent) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*KeyDeliveryDecisionEvent)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RpcCallEvent) EqualVT(that *RpcCallEvent) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Type != that.Type {
		return false
	}
	if this.RpcService != that.RpcService {
		return false
	}
	if this.RpcMethod != that.RpcMethod {
		return false
	}
	if !(*anypb1.Any)(this.Request).EqualVT((*anypb1.Any)(that.Request)) {
		return false
	}
	if !(*anypb1.Any)(this.Response).EqualVT((*anypb1.Any)(that.Response)) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RpcCallEvent) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RpcCallEvent)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ApplicationHandle) EqualVT(that *ApplicationHandle) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	if this.Id != that.Id {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ApplicationHandle) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ApplicationHandle)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ReleaseChannelHandle) EqualVT(that *ReleaseChannelHandle) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Application.EqualVT(that.Application) {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	if this.Id != that.Id {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ReleaseChannelHandle) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ReleaseChannelHandle)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ServiceHandle) EqualVT(that *ServiceHandle) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Application.EqualVT(that.Application) {
		return false
	}
	if !this.ReleaseChannel.EqualVT(that.ReleaseChannel) {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	if this.Id != that.Id {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ServiceHandle) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ServiceHandle)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RuntimeHandle) EqualVT(that *RuntimeHandle) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	if this.Id != that.Id {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RuntimeHandle) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RuntimeHandle)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ProtectionHandle) EqualVT(that *ProtectionHandle) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	if this.Id != that.Id {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ProtectionHandle) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ProtectionHandle)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *PermissionDeniedEvent) EqualVT(that *PermissionDeniedEvent) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Target == nil && that.Target != nil {
		return false
	} else if this.Target != nil {
		if that.Target == nil {
			return false
		}
		if !this.Target.(interface {
			EqualVT(isPermissionDeniedEvent_Target) bool
		}).EqualVT(that.Target) {
			return false
		}
	}
	if this.Action != that.Action {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *PermissionDeniedEvent) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*PermissionDeniedEvent)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *PermissionDeniedEvent_Application) EqualVT(thatIface isPermissionDeniedEvent_Target) bool {
	that, ok := thatIface.(*PermissionDeniedEvent_Application)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Application, that.Application; p != q {
		if p == nil {
			p = &ApplicationHandle{}
		}
		if q == nil {
			q = &ApplicationHandle{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *PermissionDeniedEvent_ReleaseChannel) EqualVT(thatIface isPermissionDeniedEvent_Target) bool {
	that, ok := thatIface.(*PermissionDeniedEvent_ReleaseChannel)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ReleaseChannel, that.ReleaseChannel; p != q {
		if p == nil {
			p = &ReleaseChannelHandle{}
		}
		if q == nil {
			q = &ReleaseChannelHandle{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *PermissionDeniedEvent_Service) EqualVT(thatIface isPermissionDeniedEvent_Target) bool {
	that, ok := thatIface.(*PermissionDeniedEvent_Service)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Service, that.Service; p != q {
		if p == nil {
			p = &ServiceHandle{}
		}
		if q == nil {
			q = &ServiceHandle{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *PermissionDeniedEvent_Runtime) EqualVT(thatIface isPermissionDeniedEvent_Target) bool {
	that, ok := thatIface.(*PermissionDeniedEvent_Runtime)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Runtime, that.Runtime; p != q {
		if p == nil {
			p = &RuntimeHandle{}
		}
		if q == nil {
			q = &RuntimeHandle{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *PermissionDeniedEvent_Protection) EqualVT(thatIface isPermissionDeniedEvent_Target) bool {
	that, ok := thatIface.(*PermissionDeniedEvent_Protection)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Protection, that.Protection; p != q {
		if p == nil {
			p = &ProtectionHandle{}
		}
		if q == nil {
			q = &ProtectionHandle{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ObjectCreatedEvent) EqualVT(that *ObjectCreatedEvent) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Target == nil && that.Target != nil {
		return false
	} else if this.Target != nil {
		if that.Target == nil {
			return false
		}
		if !this.Target.(interface {
			EqualVT(isObjectCreatedEvent_Target) bool
		}).EqualVT(that.Target) {
			return false
		}
	}
	if this.ConfigVersion != that.ConfigVersion {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ObjectCreatedEvent) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ObjectCreatedEvent)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ObjectCreatedEvent_Application) EqualVT(thatIface isObjectCreatedEvent_Target) bool {
	that, ok := thatIface.(*ObjectCreatedEvent_Application)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Application, that.Application; p != q {
		if p == nil {
			p = &ApplicationHandle{}
		}
		if q == nil {
			q = &ApplicationHandle{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ObjectCreatedEvent_ReleaseChannel) EqualVT(thatIface isObjectCreatedEvent_Target) bool {
	that, ok := thatIface.(*ObjectCreatedEvent_ReleaseChannel)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ReleaseChannel, that.ReleaseChannel; p != q {
		if p == nil {
			p = &ReleaseChannelHandle{}
		}
		if q == nil {
			q = &ReleaseChannelHandle{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ObjectCreatedEvent_Service) EqualVT(thatIface isObjectCreatedEvent_Target) bool {
	that, ok := thatIface.(*ObjectCreatedEvent_Service)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Service, that.Service; p != q {
		if p == nil {
			p = &ServiceHandle{}
		}
		if q == nil {
			q = &ServiceHandle{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ObjectCreatedEvent_Runtime) EqualVT(thatIface isObjectCreatedEvent_Target) bool {
	that, ok := thatIface.(*ObjectCreatedEvent_Runtime)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Runtime, that.Runtime; p != q {
		if p == nil {
			p = &RuntimeHandle{}
		}
		if q == nil {
			q = &RuntimeHandle{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ObjectCreatedEvent_Protection) EqualVT(thatIface isObjectCreatedEvent_Target) bool {
	that, ok := thatIface.(*ObjectCreatedEvent_Protection)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Protection, that.Protection; p != q {
		if p == nil {
			p = &ProtectionHandle{}
		}
		if q == nil {
			q = &ProtectionHandle{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ObjectDeletedEvent) EqualVT(that *ObjectDeletedEvent) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Target == nil && that.Target != nil {
		return false
	} else if this.Target != nil {
		if that.Target == nil {
			return false
		}
		if !this.Target.(interface {
			EqualVT(isObjectDeletedEvent_Target) bool
		}).EqualVT(that.Target) {
			return false
		}
	}
	if this.ConfigVersion != that.ConfigVersion {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ObjectDeletedEvent) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ObjectDeletedEvent)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ObjectDeletedEvent_Application) EqualVT(thatIface isObjectDeletedEvent_Target) bool {
	that, ok := thatIface.(*ObjectDeletedEvent_Application)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Application, that.Application; p != q {
		if p == nil {
			p = &ApplicationHandle{}
		}
		if q == nil {
			q = &ApplicationHandle{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ObjectDeletedEvent_ReleaseChannel) EqualVT(thatIface isObjectDeletedEvent_Target) bool {
	that, ok := thatIface.(*ObjectDeletedEvent_ReleaseChannel)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ReleaseChannel, that.ReleaseChannel; p != q {
		if p == nil {
			p = &ReleaseChannelHandle{}
		}
		if q == nil {
			q = &ReleaseChannelHandle{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ObjectDeletedEvent_Service) EqualVT(thatIface isObjectDeletedEvent_Target) bool {
	that, ok := thatIface.(*ObjectDeletedEvent_Service)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Service, that.Service; p != q {
		if p == nil {
			p = &ServiceHandle{}
		}
		if q == nil {
			q = &ServiceHandle{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ObjectDeletedEvent_Runtime) EqualVT(thatIface isObjectDeletedEvent_Target) bool {
	that, ok := thatIface.(*ObjectDeletedEvent_Runtime)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Runtime, that.Runtime; p != q {
		if p == nil {
			p = &RuntimeHandle{}
		}
		if q == nil {
			q = &RuntimeHandle{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ObjectDeletedEvent_Protection) EqualVT(thatIface isObjectDeletedEvent_Target) bool {
	that, ok := thatIface.(*ObjectDeletedEvent_Protection)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Protection, that.Protection; p != q {
		if p == nil {
			p = &ProtectionHandle{}
		}
		if q == nil {
			q = &ProtectionHandle{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ObjectModifiedEvent) EqualVT(that *ObjectModifiedEvent) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Target == nil && that.Target != nil {
		return false
	} else if this.Target != nil {
		if that.Target == nil {
			return false
		}
		if !this.Target.(interface {
			EqualVT(isObjectModifiedEvent_Target) bool
		}).EqualVT(that.Target) {
			return false
		}
	}
	if this.OldConfigVersion != that.OldConfigVersion {
		return false
	}
	if this.NewConfigVersion != that.NewConfigVersion {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ObjectModifiedEvent) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ObjectModifiedEvent)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ObjectModifiedEvent_Application) EqualVT(thatIface isObjectModifiedEvent_Target) bool {
	that, ok := thatIface.(*ObjectModifiedEvent_Application)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Application, that.Application; p != q {
		if p == nil {
			p = &ApplicationHandle{}
		}
		if q == nil {
			q = &ApplicationHandle{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ObjectModifiedEvent_ReleaseChannel) EqualVT(thatIface isObjectModifiedEvent_Target) bool {
	that, ok := thatIface.(*ObjectModifiedEvent_ReleaseChannel)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ReleaseChannel, that.ReleaseChannel; p != q {
		if p == nil {
			p = &ReleaseChannelHandle{}
		}
		if q == nil {
			q = &ReleaseChannelHandle{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ObjectModifiedEvent_Service) EqualVT(thatIface isObjectModifiedEvent_Target) bool {
	that, ok := thatIface.(*ObjectModifiedEvent_Service)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Service, that.Service; p != q {
		if p == nil {
			p = &ServiceHandle{}
		}
		if q == nil {
			q = &ServiceHandle{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ObjectModifiedEvent_Runtime) EqualVT(thatIface isObjectModifiedEvent_Target) bool {
	that, ok := thatIface.(*ObjectModifiedEvent_Runtime)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Runtime, that.Runtime; p != q {
		if p == nil {
			p = &RuntimeHandle{}
		}
		if q == nil {
			q = &RuntimeHandle{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ObjectModifiedEvent_Protection) EqualVT(thatIface isObjectModifiedEvent_Target) bool {
	that, ok := thatIface.(*ObjectModifiedEvent_Protection)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Protection, that.Protection; p != q {
		if p == nil {
			p = &ProtectionHandle{}
		}
		if q == nil {
			q = &ProtectionHandle{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *DeploymentCreatedEvent) EqualVT(that *DeploymentCreatedEvent) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Deployment.EqualVT(that.Deployment) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *DeploymentCreatedEvent) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*DeploymentCreatedEvent)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *DeploymentUpdatedEvent) EqualVT(that *DeploymentUpdatedEvent) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Deployment.EqualVT(that.Deployment) {
		return false
	}
	if this.OldStatus != that.OldStatus {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *DeploymentUpdatedEvent) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*DeploymentUpdatedEvent)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *KubectlCmdEvent) EqualVT(that *KubectlCmdEvent) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Runtime != that.Runtime {
		return false
	}
	if len(this.Args) != len(that.Args) {
		return false
	}
	for i, vx := range this.Args {
		vy := that.Args[i]
		if vx != vy {
			return false
		}
	}
	if this.ExitCode != that.ExitCode {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *KubectlCmdEvent) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*KubectlCmdEvent)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *AuditLogDebugEvent) EqualVT(that *AuditLogDebugEvent) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Details) != len(that.Details) {
		return false
	}
	for i, vx := range this.Details {
		vy, ok := that.Details[i]
		if !ok {
			return false
		}
		if vx != vy {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *AuditLogDebugEvent) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*AuditLogDebugEvent)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ReleaseCreatedEvent) EqualVT(that *ReleaseCreatedEvent) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Id.EqualVT(that.Id) {
		return false
	}
	if this.ReleaseId != that.ReleaseId {
		return false
	}
	if !this.Desired.EqualVT(that.Desired) {
		return false
	}
	if this.IsRollback != that.IsRollback {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ReleaseCreatedEvent) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ReleaseCreatedEvent)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *EventDetails) EqualVT(that *EventDetails) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Details == nil && that.Details != nil {
		return false
	} else if this.Details != nil {
		if that.Details == nil {
			return false
		}
		if !this.Details.(interface {
			EqualVT(isEventDetails_Details) bool
		}).EqualVT(that.Details) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *EventDetails) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*EventDetails)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *EventDetails_SetDesiredState) EqualVT(thatIface isEventDetails_Details) bool {
	that, ok := thatIface.(*EventDetails_SetDesiredState)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.SetDesiredState, that.SetDesiredState; p != q {
		if p == nil {
			p = &SetDesiredStateEvent{}
		}
		if q == nil {
			q = &SetDesiredStateEvent{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *EventDetails_SetTargetState) EqualVT(thatIface isEventDetails_Details) bool {
	that, ok := thatIface.(*EventDetails_SetTargetState)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.SetTargetState, that.SetTargetState; p != q {
		if p == nil {
			p = &SetTargetStateEvent{}
		}
		if q == nil {
			q = &SetTargetStateEvent{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *EventDetails_ProgramExit) EqualVT(thatIface isEventDetails_Details) bool {
	that, ok := thatIface.(*EventDetails_ProgramExit)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ProgramExit, that.ProgramExit; p != q {
		if p == nil {
			p = &ProgramExitEvent{}
		}
		if q == nil {
			q = &ProgramExitEvent{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *EventDetails_ApplyTargetState) EqualVT(thatIface isEventDetails_Details) bool {
	that, ok := thatIface.(*EventDetails_ApplyTargetState)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ApplyTargetState, that.ApplyTargetState; p != q {
		if p == nil {
			p = &ApplyTargetStateEvent{}
		}
		if q == nil {
			q = &ApplyTargetStateEvent{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *EventDetails_ManualApproval) EqualVT(thatIface isEventDetails_Details) bool {
	that, ok := thatIface.(*EventDetails_ManualApproval)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ManualApproval, that.ManualApproval; p != q {
		if p == nil {
			p = &ManualApprovalEvent{}
		}
		if q == nil {
			q = &ManualApprovalEvent{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *EventDetails_CustomTaskExecution) EqualVT(thatIface isEventDetails_Details) bool {
	that, ok := thatIface.(*EventDetails_CustomTaskExecution)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.CustomTaskExecution, that.CustomTaskExecution; p != q {
		if p == nil {
			p = &CustomTaskExecutionEvent{}
		}
		if q == nil {
			q = &CustomTaskExecutionEvent{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *EventDetails_RuntimeUpdate) EqualVT(thatIface isEventDetails_Details) bool {
	that, ok := thatIface.(*EventDetails_RuntimeUpdate)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.RuntimeUpdate, that.RuntimeUpdate; p != q {
		if p == nil {
			p = &RuntimeUpdateEvent{}
		}
		if q == nil {
			q = &RuntimeUpdateEvent{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *EventDetails_DeliveryProgress) EqualVT(thatIface isEventDetails_Details) bool {
	that, ok := thatIface.(*EventDetails_DeliveryProgress)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.DeliveryProgress, that.DeliveryProgress; p != q {
		if p == nil {
			p = &DeliveryProgressEvent{}
		}
		if q == nil {
			q = &DeliveryProgressEvent{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *EventDetails_DeliveryPromotion) EqualVT(thatIface isEventDetails_Details) bool {
	that, ok := thatIface.(*EventDetails_DeliveryPromotion)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.DeliveryPromotion, that.DeliveryPromotion; p != q {
		if p == nil {
			p = &DeliveryManualPromotionEvent{}
		}
		if q == nil {
			q = &DeliveryManualPromotionEvent{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *EventDetails_DesiredStateStatusChange) EqualVT(thatIface isEventDetails_Details) bool {
	that, ok := thatIface.(*EventDetails_DesiredStateStatusChange)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.DesiredStateStatusChange, that.DesiredStateStatusChange; p != q {
		if p == nil {
			p = &DesiredStateStatusChangeEvent{}
		}
		if q == nil {
			q = &DesiredStateStatusChangeEvent{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *EventDetails_KeyDeliveryDecision) EqualVT(thatIface isEventDetails_Details) bool {
	that, ok := thatIface.(*EventDetails_KeyDeliveryDecision)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.KeyDeliveryDecision, that.KeyDeliveryDecision; p != q {
		if p == nil {
			p = &KeyDeliveryDecisionEvent{}
		}
		if q == nil {
			q = &KeyDeliveryDecisionEvent{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *EventDetails_RpcCall) EqualVT(thatIface isEventDetails_Details) bool {
	that, ok := thatIface.(*EventDetails_RpcCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.RpcCall, that.RpcCall; p != q {
		if p == nil {
			p = &RpcCallEvent{}
		}
		if q == nil {
			q = &RpcCallEvent{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *EventDetails_PermissionDenied) EqualVT(thatIface isEventDetails_Details) bool {
	that, ok := thatIface.(*EventDetails_PermissionDenied)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.PermissionDenied, that.PermissionDenied; p != q {
		if p == nil {
			p = &PermissionDeniedEvent{}
		}
		if q == nil {
			q = &PermissionDeniedEvent{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *EventDetails_ObjectCreated) EqualVT(thatIface isEventDetails_Details) bool {
	that, ok := thatIface.(*EventDetails_ObjectCreated)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ObjectCreated, that.ObjectCreated; p != q {
		if p == nil {
			p = &ObjectCreatedEvent{}
		}
		if q == nil {
			q = &ObjectCreatedEvent{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *EventDetails_ObjectDeleted) EqualVT(thatIface isEventDetails_Details) bool {
	that, ok := thatIface.(*EventDetails_ObjectDeleted)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ObjectDeleted, that.ObjectDeleted; p != q {
		if p == nil {
			p = &ObjectDeletedEvent{}
		}
		if q == nil {
			q = &ObjectDeletedEvent{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *EventDetails_ObjectModified) EqualVT(thatIface isEventDetails_Details) bool {
	that, ok := thatIface.(*EventDetails_ObjectModified)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ObjectModified, that.ObjectModified; p != q {
		if p == nil {
			p = &ObjectModifiedEvent{}
		}
		if q == nil {
			q = &ObjectModifiedEvent{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *EventDetails_KubectlCmd) EqualVT(thatIface isEventDetails_Details) bool {
	that, ok := thatIface.(*EventDetails_KubectlCmd)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.KubectlCmd, that.KubectlCmd; p != q {
		if p == nil {
			p = &KubectlCmdEvent{}
		}
		if q == nil {
			q = &KubectlCmdEvent{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *EventDetails_AuditLogDebug) EqualVT(thatIface isEventDetails_Details) bool {
	that, ok := thatIface.(*EventDetails_AuditLogDebug)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.AuditLogDebug, that.AuditLogDebug; p != q {
		if p == nil {
			p = &AuditLogDebugEvent{}
		}
		if q == nil {
			q = &AuditLogDebugEvent{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *EventDetails_DeploymentCreated) EqualVT(thatIface isEventDetails_Details) bool {
	that, ok := thatIface.(*EventDetails_DeploymentCreated)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.DeploymentCreated, that.DeploymentCreated; p != q {
		if p == nil {
			p = &DeploymentCreatedEvent{}
		}
		if q == nil {
			q = &DeploymentCreatedEvent{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *EventDetails_DeploymentUpdated) EqualVT(thatIface isEventDetails_Details) bool {
	that, ok := thatIface.(*EventDetails_DeploymentUpdated)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.DeploymentUpdated, that.DeploymentUpdated; p != q {
		if p == nil {
			p = &DeploymentUpdatedEvent{}
		}
		if q == nil {
			q = &DeploymentUpdatedEvent{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *EventDetails_ReleaseCreated) EqualVT(thatIface isEventDetails_Details) bool {
	that, ok := thatIface.(*EventDetails_ReleaseCreated)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ReleaseCreated, that.ReleaseCreated; p != q {
		if p == nil {
			p = &ReleaseCreatedEvent{}
		}
		if q == nil {
			q = &ReleaseCreatedEvent{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}
