// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: prodvana/environment/environment_manager.proto

package environment

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	version "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/version"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = version.Source(0)
)

// Validate checks the field values on GetClusterAgentApiTokenReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetClusterAgentApiTokenReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetClusterAgentApiTokenReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetClusterAgentApiTokenReqMultiError, or nil if none found.
func (m *GetClusterAgentApiTokenReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetClusterAgentApiTokenReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := GetClusterAgentApiTokenReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetClusterAgentApiTokenReqMultiError(errors)
	}

	return nil
}

// GetClusterAgentApiTokenReqMultiError is an error wrapping multiple
// validation errors returned by GetClusterAgentApiTokenReq.ValidateAll() if
// the designated constraints aren't met.
type GetClusterAgentApiTokenReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClusterAgentApiTokenReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClusterAgentApiTokenReqMultiError) AllErrors() []error { return m }

// GetClusterAgentApiTokenReqValidationError is the validation error returned
// by GetClusterAgentApiTokenReq.Validate if the designated constraints aren't met.
type GetClusterAgentApiTokenReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClusterAgentApiTokenReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClusterAgentApiTokenReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClusterAgentApiTokenReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClusterAgentApiTokenReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClusterAgentApiTokenReqValidationError) ErrorName() string {
	return "GetClusterAgentApiTokenReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetClusterAgentApiTokenReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClusterAgentApiTokenReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClusterAgentApiTokenReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClusterAgentApiTokenReqValidationError{}

// Validate checks the field values on GetClusterAgentApiTokenResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetClusterAgentApiTokenResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetClusterAgentApiTokenResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetClusterAgentApiTokenRespMultiError, or nil if none found.
func (m *GetClusterAgentApiTokenResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetClusterAgentApiTokenResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApiToken

	if len(errors) > 0 {
		return GetClusterAgentApiTokenRespMultiError(errors)
	}

	return nil
}

// GetClusterAgentApiTokenRespMultiError is an error wrapping multiple
// validation errors returned by GetClusterAgentApiTokenResp.ValidateAll() if
// the designated constraints aren't met.
type GetClusterAgentApiTokenRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClusterAgentApiTokenRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClusterAgentApiTokenRespMultiError) AllErrors() []error { return m }

// GetClusterAgentApiTokenRespValidationError is the validation error returned
// by GetClusterAgentApiTokenResp.Validate if the designated constraints
// aren't met.
type GetClusterAgentApiTokenRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClusterAgentApiTokenRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClusterAgentApiTokenRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClusterAgentApiTokenRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClusterAgentApiTokenRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClusterAgentApiTokenRespValidationError) ErrorName() string {
	return "GetClusterAgentApiTokenRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetClusterAgentApiTokenRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClusterAgentApiTokenResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClusterAgentApiTokenRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClusterAgentApiTokenRespValidationError{}

// Validate checks the field values on LinkClusterReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LinkClusterReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LinkClusterReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LinkClusterReqMultiError,
// or nil if none found.
func (m *LinkClusterReq) ValidateAll() error {
	return m.validate(true)
}

func (m *LinkClusterReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetAuth()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LinkClusterReqValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LinkClusterReqValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuth()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LinkClusterReqValidationError{
				field:  "Auth",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ProdvanaManaged

	// no validation rules for DisableIstio

	// no validation rules for DisableFlagger

	// no validation rules for Type

	// no validation rules for Source

	if all {
		switch v := interface{}(m.GetSourceMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LinkClusterReqValidationError{
					field:  "SourceMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LinkClusterReqValidationError{
					field:  "SourceMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSourceMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LinkClusterReqValidationError{
				field:  "SourceMetadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LinkClusterReqMultiError(errors)
	}

	return nil
}

// LinkClusterReqMultiError is an error wrapping multiple validation errors
// returned by LinkClusterReq.ValidateAll() if the designated constraints
// aren't met.
type LinkClusterReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LinkClusterReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LinkClusterReqMultiError) AllErrors() []error { return m }

// LinkClusterReqValidationError is the validation error returned by
// LinkClusterReq.Validate if the designated constraints aren't met.
type LinkClusterReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LinkClusterReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LinkClusterReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LinkClusterReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LinkClusterReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LinkClusterReqValidationError) ErrorName() string { return "LinkClusterReqValidationError" }

// Error satisfies the builtin error interface
func (e LinkClusterReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLinkClusterReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LinkClusterReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LinkClusterReqValidationError{}

// Validate checks the field values on LinkClusterResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LinkClusterResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LinkClusterResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LinkClusterRespMultiError, or nil if none found.
func (m *LinkClusterResp) ValidateAll() error {
	return m.validate(true)
}

func (m *LinkClusterResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Msg

	// no validation rules for ClusterId

	// no validation rules for K8SAgentUrl

	// no validation rules for K8SAgentImage

	// no validation rules for K8SAgentApiToken

	if len(errors) > 0 {
		return LinkClusterRespMultiError(errors)
	}

	return nil
}

// LinkClusterRespMultiError is an error wrapping multiple validation errors
// returned by LinkClusterResp.ValidateAll() if the designated constraints
// aren't met.
type LinkClusterRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LinkClusterRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LinkClusterRespMultiError) AllErrors() []error { return m }

// LinkClusterRespValidationError is the validation error returned by
// LinkClusterResp.Validate if the designated constraints aren't met.
type LinkClusterRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LinkClusterRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LinkClusterRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LinkClusterRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LinkClusterRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LinkClusterRespValidationError) ErrorName() string { return "LinkClusterRespValidationError" }

// Error satisfies the builtin error interface
func (e LinkClusterRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLinkClusterResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LinkClusterRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LinkClusterRespValidationError{}

// Validate checks the field values on RemoveClusterReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RemoveClusterReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveClusterReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveClusterReqMultiError, or nil if none found.
func (m *RemoveClusterReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveClusterReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return RemoveClusterReqMultiError(errors)
	}

	return nil
}

// RemoveClusterReqMultiError is an error wrapping multiple validation errors
// returned by RemoveClusterReq.ValidateAll() if the designated constraints
// aren't met.
type RemoveClusterReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveClusterReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveClusterReqMultiError) AllErrors() []error { return m }

// RemoveClusterReqValidationError is the validation error returned by
// RemoveClusterReq.Validate if the designated constraints aren't met.
type RemoveClusterReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveClusterReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveClusterReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveClusterReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveClusterReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveClusterReqValidationError) ErrorName() string { return "RemoveClusterReqValidationError" }

// Error satisfies the builtin error interface
func (e RemoveClusterReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveClusterReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveClusterReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveClusterReqValidationError{}

// Validate checks the field values on RemoveClusterResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RemoveClusterResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveClusterResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveClusterRespMultiError, or nil if none found.
func (m *RemoveClusterResp) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveClusterResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RemoveClusterRespMultiError(errors)
	}

	return nil
}

// RemoveClusterRespMultiError is an error wrapping multiple validation errors
// returned by RemoveClusterResp.ValidateAll() if the designated constraints
// aren't met.
type RemoveClusterRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveClusterRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveClusterRespMultiError) AllErrors() []error { return m }

// RemoveClusterRespValidationError is the validation error returned by
// RemoveClusterResp.Validate if the designated constraints aren't met.
type RemoveClusterRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveClusterRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveClusterRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveClusterRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveClusterRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveClusterRespValidationError) ErrorName() string {
	return "RemoveClusterRespValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveClusterRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveClusterResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveClusterRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveClusterRespValidationError{}

// Validate checks the field values on GetClusterAuthReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetClusterAuthReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetClusterAuthReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetClusterAuthReqMultiError, or nil if none found.
func (m *GetClusterAuthReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetClusterAuthReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClusterId

	if len(errors) > 0 {
		return GetClusterAuthReqMultiError(errors)
	}

	return nil
}

// GetClusterAuthReqMultiError is an error wrapping multiple validation errors
// returned by GetClusterAuthReq.ValidateAll() if the designated constraints
// aren't met.
type GetClusterAuthReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClusterAuthReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClusterAuthReqMultiError) AllErrors() []error { return m }

// GetClusterAuthReqValidationError is the validation error returned by
// GetClusterAuthReq.Validate if the designated constraints aren't met.
type GetClusterAuthReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClusterAuthReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClusterAuthReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClusterAuthReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClusterAuthReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClusterAuthReqValidationError) ErrorName() string {
	return "GetClusterAuthReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetClusterAuthReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClusterAuthReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClusterAuthReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClusterAuthReqValidationError{}

// Validate checks the field values on GetClusterAuthResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetClusterAuthResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetClusterAuthResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetClusterAuthRespMultiError, or nil if none found.
func (m *GetClusterAuthResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetClusterAuthResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAuth()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetClusterAuthRespValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetClusterAuthRespValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuth()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetClusterAuthRespValidationError{
				field:  "Auth",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetClusterAuthRespMultiError(errors)
	}

	return nil
}

// GetClusterAuthRespMultiError is an error wrapping multiple validation errors
// returned by GetClusterAuthResp.ValidateAll() if the designated constraints
// aren't met.
type GetClusterAuthRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClusterAuthRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClusterAuthRespMultiError) AllErrors() []error { return m }

// GetClusterAuthRespValidationError is the validation error returned by
// GetClusterAuthResp.Validate if the designated constraints aren't met.
type GetClusterAuthRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClusterAuthRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClusterAuthRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClusterAuthRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClusterAuthRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClusterAuthRespValidationError) ErrorName() string {
	return "GetClusterAuthRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetClusterAuthRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClusterAuthResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClusterAuthRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClusterAuthRespValidationError{}

// Validate checks the field values on ListClustersReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListClustersReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListClustersReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListClustersReqMultiError, or nil if none found.
func (m *ListClustersReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListClustersReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListClustersReqMultiError(errors)
	}

	return nil
}

// ListClustersReqMultiError is an error wrapping multiple validation errors
// returned by ListClustersReq.ValidateAll() if the designated constraints
// aren't met.
type ListClustersReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListClustersReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListClustersReqMultiError) AllErrors() []error { return m }

// ListClustersReqValidationError is the validation error returned by
// ListClustersReq.Validate if the designated constraints aren't met.
type ListClustersReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListClustersReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListClustersReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListClustersReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListClustersReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListClustersReqValidationError) ErrorName() string { return "ListClustersReqValidationError" }

// Error satisfies the builtin error interface
func (e ListClustersReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListClustersReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListClustersReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListClustersReqValidationError{}

// Validate checks the field values on ListClustersResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListClustersResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListClustersResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListClustersRespMultiError, or nil if none found.
func (m *ListClustersResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListClustersResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetClusters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListClustersRespValidationError{
						field:  fmt.Sprintf("Clusters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListClustersRespValidationError{
						field:  fmt.Sprintf("Clusters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListClustersRespValidationError{
					field:  fmt.Sprintf("Clusters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListClustersRespMultiError(errors)
	}

	return nil
}

// ListClustersRespMultiError is an error wrapping multiple validation errors
// returned by ListClustersResp.ValidateAll() if the designated constraints
// aren't met.
type ListClustersRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListClustersRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListClustersRespMultiError) AllErrors() []error { return m }

// ListClustersRespValidationError is the validation error returned by
// ListClustersResp.Validate if the designated constraints aren't met.
type ListClustersRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListClustersRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListClustersRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListClustersRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListClustersRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListClustersRespValidationError) ErrorName() string { return "ListClustersRespValidationError" }

// Error satisfies the builtin error interface
func (e ListClustersRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListClustersResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListClustersRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListClustersRespValidationError{}

// Validate checks the field values on GetClusterReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetClusterReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetClusterReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetClusterReqMultiError, or
// nil if none found.
func (m *GetClusterReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetClusterReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Runtime

	// no validation rules for IncludeAuth

	if len(errors) > 0 {
		return GetClusterReqMultiError(errors)
	}

	return nil
}

// GetClusterReqMultiError is an error wrapping multiple validation errors
// returned by GetClusterReq.ValidateAll() if the designated constraints
// aren't met.
type GetClusterReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClusterReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClusterReqMultiError) AllErrors() []error { return m }

// GetClusterReqValidationError is the validation error returned by
// GetClusterReq.Validate if the designated constraints aren't met.
type GetClusterReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClusterReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClusterReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClusterReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClusterReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClusterReqValidationError) ErrorName() string { return "GetClusterReqValidationError" }

// Error satisfies the builtin error interface
func (e GetClusterReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClusterReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClusterReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClusterReqValidationError{}

// Validate checks the field values on GetClusterResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetClusterResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetClusterResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetClusterRespMultiError,
// or nil if none found.
func (m *GetClusterResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetClusterResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCluster()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetClusterRespValidationError{
					field:  "Cluster",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetClusterRespValidationError{
					field:  "Cluster",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCluster()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetClusterRespValidationError{
				field:  "Cluster",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetClusterRespMultiError(errors)
	}

	return nil
}

// GetClusterRespMultiError is an error wrapping multiple validation errors
// returned by GetClusterResp.ValidateAll() if the designated constraints
// aren't met.
type GetClusterRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClusterRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClusterRespMultiError) AllErrors() []error { return m }

// GetClusterRespValidationError is the validation error returned by
// GetClusterResp.Validate if the designated constraints aren't met.
type GetClusterRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClusterRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClusterRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClusterRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClusterRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClusterRespValidationError) ErrorName() string { return "GetClusterRespValidationError" }

// Error satisfies the builtin error interface
func (e GetClusterRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClusterResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClusterRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClusterRespValidationError{}

// Validate checks the field values on ConfigureClusterReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfigureClusterReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigureClusterReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfigureClusterReqMultiError, or nil if none found.
func (m *ConfigureClusterReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigureClusterReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RuntimeName

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfigureClusterReqValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfigureClusterReqValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfigureClusterReqValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Source

	if all {
		switch v := interface{}(m.GetSourceMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfigureClusterReqValidationError{
					field:  "SourceMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfigureClusterReqValidationError{
					field:  "SourceMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSourceMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfigureClusterReqValidationError{
				field:  "SourceMetadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ConfigureClusterReqMultiError(errors)
	}

	return nil
}

// ConfigureClusterReqMultiError is an error wrapping multiple validation
// errors returned by ConfigureClusterReq.ValidateAll() if the designated
// constraints aren't met.
type ConfigureClusterReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigureClusterReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigureClusterReqMultiError) AllErrors() []error { return m }

// ConfigureClusterReqValidationError is the validation error returned by
// ConfigureClusterReq.Validate if the designated constraints aren't met.
type ConfigureClusterReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigureClusterReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigureClusterReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigureClusterReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigureClusterReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigureClusterReqValidationError) ErrorName() string {
	return "ConfigureClusterReqValidationError"
}

// Error satisfies the builtin error interface
func (e ConfigureClusterReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigureClusterReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigureClusterReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigureClusterReqValidationError{}

// Validate checks the field values on ConfigureClusterResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfigureClusterResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigureClusterResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfigureClusterRespMultiError, or nil if none found.
func (m *ConfigureClusterResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigureClusterResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ConfigureClusterRespMultiError(errors)
	}

	return nil
}

// ConfigureClusterRespMultiError is an error wrapping multiple validation
// errors returned by ConfigureClusterResp.ValidateAll() if the designated
// constraints aren't met.
type ConfigureClusterRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigureClusterRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigureClusterRespMultiError) AllErrors() []error { return m }

// ConfigureClusterRespValidationError is the validation error returned by
// ConfigureClusterResp.Validate if the designated constraints aren't met.
type ConfigureClusterRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigureClusterRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigureClusterRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigureClusterRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigureClusterRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigureClusterRespValidationError) ErrorName() string {
	return "ConfigureClusterRespValidationError"
}

// Error satisfies the builtin error interface
func (e ConfigureClusterRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigureClusterResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigureClusterRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigureClusterRespValidationError{}

// Validate checks the field values on ValidateConfigureClusterResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ValidateConfigureClusterResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidateConfigureClusterResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ValidateConfigureClusterRespMultiError, or nil if none found.
func (m *ValidateConfigureClusterResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidateConfigureClusterResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ValidateConfigureClusterRespMultiError(errors)
	}

	return nil
}

// ValidateConfigureClusterRespMultiError is an error wrapping multiple
// validation errors returned by ValidateConfigureClusterResp.ValidateAll() if
// the designated constraints aren't met.
type ValidateConfigureClusterRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidateConfigureClusterRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidateConfigureClusterRespMultiError) AllErrors() []error { return m }

// ValidateConfigureClusterRespValidationError is the validation error returned
// by ValidateConfigureClusterResp.Validate if the designated constraints
// aren't met.
type ValidateConfigureClusterRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateConfigureClusterRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateConfigureClusterRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateConfigureClusterRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateConfigureClusterRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateConfigureClusterRespValidationError) ErrorName() string {
	return "ValidateConfigureClusterRespValidationError"
}

// Error satisfies the builtin error interface
func (e ValidateConfigureClusterRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateConfigureClusterResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateConfigureClusterRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateConfigureClusterRespValidationError{}

// Validate checks the field values on GetClusterConfigReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetClusterConfigReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetClusterConfigReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetClusterConfigReqMultiError, or nil if none found.
func (m *GetClusterConfigReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetClusterConfigReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RuntimeName

	if len(errors) > 0 {
		return GetClusterConfigReqMultiError(errors)
	}

	return nil
}

// GetClusterConfigReqMultiError is an error wrapping multiple validation
// errors returned by GetClusterConfigReq.ValidateAll() if the designated
// constraints aren't met.
type GetClusterConfigReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClusterConfigReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClusterConfigReqMultiError) AllErrors() []error { return m }

// GetClusterConfigReqValidationError is the validation error returned by
// GetClusterConfigReq.Validate if the designated constraints aren't met.
type GetClusterConfigReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClusterConfigReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClusterConfigReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClusterConfigReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClusterConfigReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClusterConfigReqValidationError) ErrorName() string {
	return "GetClusterConfigReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetClusterConfigReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClusterConfigReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClusterConfigReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClusterConfigReqValidationError{}

// Validate checks the field values on GetClusterConfigResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetClusterConfigResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetClusterConfigResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetClusterConfigRespMultiError, or nil if none found.
func (m *GetClusterConfigResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetClusterConfigResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetClusterConfigRespValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetClusterConfigRespValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetClusterConfigRespValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetClusterConfigRespMultiError(errors)
	}

	return nil
}

// GetClusterConfigRespMultiError is an error wrapping multiple validation
// errors returned by GetClusterConfigResp.ValidateAll() if the designated
// constraints aren't met.
type GetClusterConfigRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClusterConfigRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClusterConfigRespMultiError) AllErrors() []error { return m }

// GetClusterConfigRespValidationError is the validation error returned by
// GetClusterConfigResp.Validate if the designated constraints aren't met.
type GetClusterConfigRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClusterConfigRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClusterConfigRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClusterConfigRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClusterConfigRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClusterConfigRespValidationError) ErrorName() string {
	return "GetClusterConfigRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetClusterConfigRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClusterConfigResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClusterConfigRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClusterConfigRespValidationError{}

// Validate checks the field values on DetectClusterConfigReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DetectClusterConfigReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DetectClusterConfigReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DetectClusterConfigReqMultiError, or nil if none found.
func (m *DetectClusterConfigReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DetectClusterConfigReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RuntimeName

	if len(errors) > 0 {
		return DetectClusterConfigReqMultiError(errors)
	}

	return nil
}

// DetectClusterConfigReqMultiError is an error wrapping multiple validation
// errors returned by DetectClusterConfigReq.ValidateAll() if the designated
// constraints aren't met.
type DetectClusterConfigReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DetectClusterConfigReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DetectClusterConfigReqMultiError) AllErrors() []error { return m }

// DetectClusterConfigReqValidationError is the validation error returned by
// DetectClusterConfigReq.Validate if the designated constraints aren't met.
type DetectClusterConfigReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DetectClusterConfigReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DetectClusterConfigReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DetectClusterConfigReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DetectClusterConfigReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DetectClusterConfigReqValidationError) ErrorName() string {
	return "DetectClusterConfigReqValidationError"
}

// Error satisfies the builtin error interface
func (e DetectClusterConfigReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDetectClusterConfigReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DetectClusterConfigReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DetectClusterConfigReqValidationError{}

// Validate checks the field values on DetectClusterConfigResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DetectClusterConfigResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DetectClusterConfigResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DetectClusterConfigRespMultiError, or nil if none found.
func (m *DetectClusterConfigResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DetectClusterConfigResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DetectClusterConfigRespValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DetectClusterConfigRespValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DetectClusterConfigRespValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DetectClusterConfigRespMultiError(errors)
	}

	return nil
}

// DetectClusterConfigRespMultiError is an error wrapping multiple validation
// errors returned by DetectClusterConfigResp.ValidateAll() if the designated
// constraints aren't met.
type DetectClusterConfigRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DetectClusterConfigRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DetectClusterConfigRespMultiError) AllErrors() []error { return m }

// DetectClusterConfigRespValidationError is the validation error returned by
// DetectClusterConfigResp.Validate if the designated constraints aren't met.
type DetectClusterConfigRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DetectClusterConfigRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DetectClusterConfigRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DetectClusterConfigRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DetectClusterConfigRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DetectClusterConfigRespValidationError) ErrorName() string {
	return "DetectClusterConfigRespValidationError"
}

// Error satisfies the builtin error interface
func (e DetectClusterConfigRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDetectClusterConfigResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DetectClusterConfigRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DetectClusterConfigRespValidationError{}

// Validate checks the field values on GetClusterStatusReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetClusterStatusReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetClusterStatusReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetClusterStatusReqMultiError, or nil if none found.
func (m *GetClusterStatusReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetClusterStatusReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClusterId

	if len(errors) > 0 {
		return GetClusterStatusReqMultiError(errors)
	}

	return nil
}

// GetClusterStatusReqMultiError is an error wrapping multiple validation
// errors returned by GetClusterStatusReq.ValidateAll() if the designated
// constraints aren't met.
type GetClusterStatusReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClusterStatusReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClusterStatusReqMultiError) AllErrors() []error { return m }

// GetClusterStatusReqValidationError is the validation error returned by
// GetClusterStatusReq.Validate if the designated constraints aren't met.
type GetClusterStatusReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClusterStatusReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClusterStatusReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClusterStatusReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClusterStatusReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClusterStatusReqValidationError) ErrorName() string {
	return "GetClusterStatusReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetClusterStatusReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClusterStatusReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClusterStatusReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClusterStatusReqValidationError{}

// Validate checks the field values on GetClusterStatusResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetClusterStatusResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetClusterStatusResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetClusterStatusRespMultiError, or nil if none found.
func (m *GetClusterStatusResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetClusterStatusResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLastHeartbeatTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetClusterStatusRespValidationError{
					field:  "LastHeartbeatTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetClusterStatusRespValidationError{
					field:  "LastHeartbeatTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastHeartbeatTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetClusterStatusRespValidationError{
				field:  "LastHeartbeatTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetClusterStatusRespMultiError(errors)
	}

	return nil
}

// GetClusterStatusRespMultiError is an error wrapping multiple validation
// errors returned by GetClusterStatusResp.ValidateAll() if the designated
// constraints aren't met.
type GetClusterStatusRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClusterStatusRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClusterStatusRespMultiError) AllErrors() []error { return m }

// GetClusterStatusRespValidationError is the validation error returned by
// GetClusterStatusResp.Validate if the designated constraints aren't met.
type GetClusterStatusRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClusterStatusRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClusterStatusRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClusterStatusRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClusterStatusRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClusterStatusRespValidationError) ErrorName() string {
	return "GetClusterStatusRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetClusterStatusRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClusterStatusResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClusterStatusRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClusterStatusRespValidationError{}

// Validate checks the field values on PauseClusterReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PauseClusterReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PauseClusterReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PauseClusterReqMultiError, or nil if none found.
func (m *PauseClusterReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PauseClusterReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Runtime

	if len(errors) > 0 {
		return PauseClusterReqMultiError(errors)
	}

	return nil
}

// PauseClusterReqMultiError is an error wrapping multiple validation errors
// returned by PauseClusterReq.ValidateAll() if the designated constraints
// aren't met.
type PauseClusterReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PauseClusterReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PauseClusterReqMultiError) AllErrors() []error { return m }

// PauseClusterReqValidationError is the validation error returned by
// PauseClusterReq.Validate if the designated constraints aren't met.
type PauseClusterReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PauseClusterReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PauseClusterReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PauseClusterReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PauseClusterReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PauseClusterReqValidationError) ErrorName() string { return "PauseClusterReqValidationError" }

// Error satisfies the builtin error interface
func (e PauseClusterReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPauseClusterReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PauseClusterReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PauseClusterReqValidationError{}

// Validate checks the field values on PauseClusterResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PauseClusterResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PauseClusterResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PauseClusterRespMultiError, or nil if none found.
func (m *PauseClusterResp) ValidateAll() error {
	return m.validate(true)
}

func (m *PauseClusterResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PauseClusterRespMultiError(errors)
	}

	return nil
}

// PauseClusterRespMultiError is an error wrapping multiple validation errors
// returned by PauseClusterResp.ValidateAll() if the designated constraints
// aren't met.
type PauseClusterRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PauseClusterRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PauseClusterRespMultiError) AllErrors() []error { return m }

// PauseClusterRespValidationError is the validation error returned by
// PauseClusterResp.Validate if the designated constraints aren't met.
type PauseClusterRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PauseClusterRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PauseClusterRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PauseClusterRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PauseClusterRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PauseClusterRespValidationError) ErrorName() string { return "PauseClusterRespValidationError" }

// Error satisfies the builtin error interface
func (e PauseClusterRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPauseClusterResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PauseClusterRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PauseClusterRespValidationError{}

// Validate checks the field values on ResumeClusterReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ResumeClusterReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResumeClusterReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResumeClusterReqMultiError, or nil if none found.
func (m *ResumeClusterReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ResumeClusterReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Runtime

	if len(errors) > 0 {
		return ResumeClusterReqMultiError(errors)
	}

	return nil
}

// ResumeClusterReqMultiError is an error wrapping multiple validation errors
// returned by ResumeClusterReq.ValidateAll() if the designated constraints
// aren't met.
type ResumeClusterReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResumeClusterReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResumeClusterReqMultiError) AllErrors() []error { return m }

// ResumeClusterReqValidationError is the validation error returned by
// ResumeClusterReq.Validate if the designated constraints aren't met.
type ResumeClusterReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResumeClusterReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResumeClusterReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResumeClusterReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResumeClusterReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResumeClusterReqValidationError) ErrorName() string { return "ResumeClusterReqValidationError" }

// Error satisfies the builtin error interface
func (e ResumeClusterReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResumeClusterReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResumeClusterReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResumeClusterReqValidationError{}

// Validate checks the field values on ResumeClusterResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ResumeClusterResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResumeClusterResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResumeClusterRespMultiError, or nil if none found.
func (m *ResumeClusterResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ResumeClusterResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ResumeClusterRespMultiError(errors)
	}

	return nil
}

// ResumeClusterRespMultiError is an error wrapping multiple validation errors
// returned by ResumeClusterResp.ValidateAll() if the designated constraints
// aren't met.
type ResumeClusterRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResumeClusterRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResumeClusterRespMultiError) AllErrors() []error { return m }

// ResumeClusterRespValidationError is the validation error returned by
// ResumeClusterResp.Validate if the designated constraints aren't met.
type ResumeClusterRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResumeClusterRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResumeClusterRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResumeClusterRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResumeClusterRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResumeClusterRespValidationError) ErrorName() string {
	return "ResumeClusterRespValidationError"
}

// Error satisfies the builtin error interface
func (e ResumeClusterRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResumeClusterResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResumeClusterRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResumeClusterRespValidationError{}

// Validate checks the field values on ListClustersResp_ClusterInfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListClustersResp_ClusterInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListClustersResp_ClusterInfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListClustersResp_ClusterInfoMultiError, or nil if none found.
func (m *ListClustersResp_ClusterInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ListClustersResp_ClusterInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Id

	// no validation rules for Origin

	// no validation rules for Endpoint

	// no validation rules for ServiceAccount

	if all {
		switch v := interface{}(m.GetWritebackConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListClustersResp_ClusterInfoValidationError{
					field:  "WritebackConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListClustersResp_ClusterInfoValidationError{
					field:  "WritebackConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWritebackConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListClustersResp_ClusterInfoValidationError{
				field:  "WritebackConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetLastHeartbeatTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListClustersResp_ClusterInfoValidationError{
					field:  "LastHeartbeatTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListClustersResp_ClusterInfoValidationError{
					field:  "LastHeartbeatTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastHeartbeatTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListClustersResp_ClusterInfoValidationError{
				field:  "LastHeartbeatTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListClustersResp_ClusterInfoValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListClustersResp_ClusterInfoValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListClustersResp_ClusterInfoValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAuth()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListClustersResp_ClusterInfoValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListClustersResp_ClusterInfoValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuth()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListClustersResp_ClusterInfoValidationError{
				field:  "Auth",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.Info.(type) {
	case *ListClustersResp_ClusterInfo_Ecs:
		if v == nil {
			err := ListClustersResp_ClusterInfoValidationError{
				field:  "Info",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetEcs()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListClustersResp_ClusterInfoValidationError{
						field:  "Ecs",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListClustersResp_ClusterInfoValidationError{
						field:  "Ecs",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEcs()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListClustersResp_ClusterInfoValidationError{
					field:  "Ecs",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ListClustersResp_ClusterInfoMultiError(errors)
	}

	return nil
}

// ListClustersResp_ClusterInfoMultiError is an error wrapping multiple
// validation errors returned by ListClustersResp_ClusterInfo.ValidateAll() if
// the designated constraints aren't met.
type ListClustersResp_ClusterInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListClustersResp_ClusterInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListClustersResp_ClusterInfoMultiError) AllErrors() []error { return m }

// ListClustersResp_ClusterInfoValidationError is the validation error returned
// by ListClustersResp_ClusterInfo.Validate if the designated constraints
// aren't met.
type ListClustersResp_ClusterInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListClustersResp_ClusterInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListClustersResp_ClusterInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListClustersResp_ClusterInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListClustersResp_ClusterInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListClustersResp_ClusterInfoValidationError) ErrorName() string {
	return "ListClustersResp_ClusterInfoValidationError"
}

// Error satisfies the builtin error interface
func (e ListClustersResp_ClusterInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListClustersResp_ClusterInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListClustersResp_ClusterInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListClustersResp_ClusterInfoValidationError{}

// Validate checks the field values on ListClustersResp_ClusterInfo_EcsInfo
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListClustersResp_ClusterInfo_EcsInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListClustersResp_ClusterInfo_EcsInfo
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListClustersResp_ClusterInfo_EcsInfoMultiError, or nil if none found.
func (m *ListClustersResp_ClusterInfo_EcsInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ListClustersResp_ClusterInfo_EcsInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Region

	// no validation rules for ClusterArn

	if len(errors) > 0 {
		return ListClustersResp_ClusterInfo_EcsInfoMultiError(errors)
	}

	return nil
}

// ListClustersResp_ClusterInfo_EcsInfoMultiError is an error wrapping multiple
// validation errors returned by
// ListClustersResp_ClusterInfo_EcsInfo.ValidateAll() if the designated
// constraints aren't met.
type ListClustersResp_ClusterInfo_EcsInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListClustersResp_ClusterInfo_EcsInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListClustersResp_ClusterInfo_EcsInfoMultiError) AllErrors() []error { return m }

// ListClustersResp_ClusterInfo_EcsInfoValidationError is the validation error
// returned by ListClustersResp_ClusterInfo_EcsInfo.Validate if the designated
// constraints aren't met.
type ListClustersResp_ClusterInfo_EcsInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListClustersResp_ClusterInfo_EcsInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListClustersResp_ClusterInfo_EcsInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListClustersResp_ClusterInfo_EcsInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListClustersResp_ClusterInfo_EcsInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListClustersResp_ClusterInfo_EcsInfoValidationError) ErrorName() string {
	return "ListClustersResp_ClusterInfo_EcsInfoValidationError"
}

// Error satisfies the builtin error interface
func (e ListClustersResp_ClusterInfo_EcsInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListClustersResp_ClusterInfo_EcsInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListClustersResp_ClusterInfo_EcsInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListClustersResp_ClusterInfo_EcsInfoValidationError{}
