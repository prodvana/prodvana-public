// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.1
// 	protoc        v3.21.10
// source: prodvana/environment/clusters.proto

package environment

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	common_config "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/common_config"
	labels "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/labels"
	runtimes "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/runtimes"
	extensions "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/runtimes/extensions"
	volumes "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/volumes"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ClusterType int32

const (
	ClusterType_UNKNOWN          ClusterType = 0
	ClusterType_K8S              ClusterType = 1
	ClusterType_ECS              ClusterType = 2 // TODO(naphat) remove, this is legacy ecs implementation not based on runtime extension
	ClusterType_FAKE             ClusterType = 3
	ClusterType_EXTENSION        ClusterType = 4
	ClusterType_TERRAFORM_RUNNER ClusterType = 5
	ClusterType_PULUMI_RUNNER    ClusterType = 6
	ClusterType_AWS_ECS          ClusterType = 7
	ClusterType_GOOGLE_CLOUD_RUN ClusterType = 8
	ClusterType_FLY              ClusterType = 9
)

// Enum value maps for ClusterType.
var (
	ClusterType_name = map[int32]string{
		0: "UNKNOWN",
		1: "K8S",
		2: "ECS",
		3: "FAKE",
		4: "EXTENSION",
		5: "TERRAFORM_RUNNER",
		6: "PULUMI_RUNNER",
		7: "AWS_ECS",
		8: "GOOGLE_CLOUD_RUN",
		9: "FLY",
	}
	ClusterType_value = map[string]int32{
		"UNKNOWN":          0,
		"K8S":              1,
		"ECS":              2,
		"FAKE":             3,
		"EXTENSION":        4,
		"TERRAFORM_RUNNER": 5,
		"PULUMI_RUNNER":    6,
		"AWS_ECS":          7,
		"GOOGLE_CLOUD_RUN": 8,
		"FLY":              9,
	}
)

func (x ClusterType) Enum() *ClusterType {
	p := new(ClusterType)
	*p = x
	return p
}

func (x ClusterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterType) Descriptor() protoreflect.EnumDescriptor {
	return file_prodvana_environment_clusters_proto_enumTypes[0].Descriptor()
}

func (ClusterType) Type() protoreflect.EnumType {
	return &file_prodvana_environment_clusters_proto_enumTypes[0]
}

func (x ClusterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterType.Descriptor instead.
func (ClusterType) EnumDescriptor() ([]byte, []int) {
	return file_prodvana_environment_clusters_proto_rawDescGZIP(), []int{0}
}

type ExtensionType int32

const (
	ExtensionType_GENERIC                    ExtensionType = 0
	ExtensionType_TERRAFORM                  ExtensionType = 1
	ExtensionType_PULUMI                     ExtensionType = 2
	ExtensionType_AWS_ECS_EXTENSION          ExtensionType = 3
	ExtensionType_GOOGLE_CLOUD_RUN_EXTENSION ExtensionType = 4
	ExtensionType_FLY_EXTENSION              ExtensionType = 5
)

// Enum value maps for ExtensionType.
var (
	ExtensionType_name = map[int32]string{
		0: "GENERIC",
		1: "TERRAFORM",
		2: "PULUMI",
		3: "AWS_ECS_EXTENSION",
		4: "GOOGLE_CLOUD_RUN_EXTENSION",
		5: "FLY_EXTENSION",
	}
	ExtensionType_value = map[string]int32{
		"GENERIC":                    0,
		"TERRAFORM":                  1,
		"PULUMI":                     2,
		"AWS_ECS_EXTENSION":          3,
		"GOOGLE_CLOUD_RUN_EXTENSION": 4,
		"FLY_EXTENSION":              5,
	}
)

func (x ExtensionType) Enum() *ExtensionType {
	p := new(ExtensionType)
	*p = x
	return p
}

func (x ExtensionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExtensionType) Descriptor() protoreflect.EnumDescriptor {
	return file_prodvana_environment_clusters_proto_enumTypes[1].Descriptor()
}

func (ExtensionType) Type() protoreflect.EnumType {
	return &file_prodvana_environment_clusters_proto_enumTypes[1]
}

func (x ExtensionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExtensionType.Descriptor instead.
func (ExtensionType) EnumDescriptor() ([]byte, []int) {
	return file_prodvana_environment_clusters_proto_rawDescGZIP(), []int{1}
}

type ClusterConfig_CloudProvider int32

const (
	ClusterConfig_UNKNOWN     ClusterConfig_CloudProvider = 0
	ClusterConfig_EKS         ClusterConfig_CloudProvider = 1
	ClusterConfig_GKE         ClusterConfig_CloudProvider = 2
	ClusterConfig_AKS         ClusterConfig_CloudProvider = 3
	ClusterConfig_ONPREM      ClusterConfig_CloudProvider = 4
	ClusterConfig_OTHER_CLOUD ClusterConfig_CloudProvider = 5
)

// Enum value maps for ClusterConfig_CloudProvider.
var (
	ClusterConfig_CloudProvider_name = map[int32]string{
		0: "UNKNOWN",
		1: "EKS",
		2: "GKE",
		3: "AKS",
		4: "ONPREM",
		5: "OTHER_CLOUD",
	}
	ClusterConfig_CloudProvider_value = map[string]int32{
		"UNKNOWN":     0,
		"EKS":         1,
		"GKE":         2,
		"AKS":         3,
		"ONPREM":      4,
		"OTHER_CLOUD": 5,
	}
)

func (x ClusterConfig_CloudProvider) Enum() *ClusterConfig_CloudProvider {
	p := new(ClusterConfig_CloudProvider)
	*p = x
	return p
}

func (x ClusterConfig_CloudProvider) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterConfig_CloudProvider) Descriptor() protoreflect.EnumDescriptor {
	return file_prodvana_environment_clusters_proto_enumTypes[2].Descriptor()
}

func (ClusterConfig_CloudProvider) Type() protoreflect.EnumType {
	return &file_prodvana_environment_clusters_proto_enumTypes[2]
}

func (x ClusterConfig_CloudProvider) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterConfig_CloudProvider.Descriptor instead.
func (ClusterConfig_CloudProvider) EnumDescriptor() ([]byte, []int) {
	return file_prodvana_environment_clusters_proto_rawDescGZIP(), []int{16, 0}
}

type ClusterConfig_ArgoRollouts_AnalysisTemplate_ArgValue int32

const (
	ClusterConfig_ArgoRollouts_AnalysisTemplate_UNKNOWN         ClusterConfig_ArgoRollouts_AnalysisTemplate_ArgValue = 0
	ClusterConfig_ArgoRollouts_AnalysisTemplate_SERVICE         ClusterConfig_ArgoRollouts_AnalysisTemplate_ArgValue = 1
	ClusterConfig_ArgoRollouts_AnalysisTemplate_RELEASE_CHANNEL ClusterConfig_ArgoRollouts_AnalysisTemplate_ArgValue = 2
)

// Enum value maps for ClusterConfig_ArgoRollouts_AnalysisTemplate_ArgValue.
var (
	ClusterConfig_ArgoRollouts_AnalysisTemplate_ArgValue_name = map[int32]string{
		0: "UNKNOWN",
		1: "SERVICE",
		2: "RELEASE_CHANNEL",
	}
	ClusterConfig_ArgoRollouts_AnalysisTemplate_ArgValue_value = map[string]int32{
		"UNKNOWN":         0,
		"SERVICE":         1,
		"RELEASE_CHANNEL": 2,
	}
)

func (x ClusterConfig_ArgoRollouts_AnalysisTemplate_ArgValue) Enum() *ClusterConfig_ArgoRollouts_AnalysisTemplate_ArgValue {
	p := new(ClusterConfig_ArgoRollouts_AnalysisTemplate_ArgValue)
	*p = x
	return p
}

func (x ClusterConfig_ArgoRollouts_AnalysisTemplate_ArgValue) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterConfig_ArgoRollouts_AnalysisTemplate_ArgValue) Descriptor() protoreflect.EnumDescriptor {
	return file_prodvana_environment_clusters_proto_enumTypes[3].Descriptor()
}

func (ClusterConfig_ArgoRollouts_AnalysisTemplate_ArgValue) Type() protoreflect.EnumType {
	return &file_prodvana_environment_clusters_proto_enumTypes[3]
}

func (x ClusterConfig_ArgoRollouts_AnalysisTemplate_ArgValue) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterConfig_ArgoRollouts_AnalysisTemplate_ArgValue.Descriptor instead.
func (ClusterConfig_ArgoRollouts_AnalysisTemplate_ArgValue) EnumDescriptor() ([]byte, []int) {
	return file_prodvana_environment_clusters_proto_rawDescGZIP(), []int{16, 3, 0, 0}
}

type ClusterAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to AuthOneof:
	//
	//	*ClusterAuth_Ecs
	//	*ClusterAuth_K8S
	AuthOneof isClusterAuth_AuthOneof `protobuf_oneof:"auth_oneof"`
}

func (x *ClusterAuth) Reset() {
	*x = ClusterAuth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_environment_clusters_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterAuth) ProtoMessage() {}

func (x *ClusterAuth) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_environment_clusters_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterAuth.ProtoReflect.Descriptor instead.
func (*ClusterAuth) Descriptor() ([]byte, []int) {
	return file_prodvana_environment_clusters_proto_rawDescGZIP(), []int{0}
}

func (m *ClusterAuth) GetAuthOneof() isClusterAuth_AuthOneof {
	if m != nil {
		return m.AuthOneof
	}
	return nil
}

func (x *ClusterAuth) GetEcs() *ClusterAuth_ECSAuth {
	if x, ok := x.GetAuthOneof().(*ClusterAuth_Ecs); ok {
		return x.Ecs
	}
	return nil
}

func (x *ClusterAuth) GetK8S() *ClusterAuth_K8SAuth {
	if x, ok := x.GetAuthOneof().(*ClusterAuth_K8S); ok {
		return x.K8S
	}
	return nil
}

type isClusterAuth_AuthOneof interface {
	isClusterAuth_AuthOneof()
}

type ClusterAuth_Ecs struct {
	Ecs *ClusterAuth_ECSAuth `protobuf:"bytes,5,opt,name=ecs,proto3,oneof"`
}

type ClusterAuth_K8S struct {
	K8S *ClusterAuth_K8SAuth `protobuf:"bytes,8,opt,name=k8s,proto3,oneof"`
}

func (*ClusterAuth_Ecs) isClusterAuth_AuthOneof() {}

func (*ClusterAuth_K8S) isClusterAuth_AuthOneof() {}

type Cluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                   string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ClusterId              string                 `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Auth                   *ClusterAuth           `protobuf:"bytes,4,opt,name=auth,proto3" json:"auth,omitempty"`
	Type                   ClusterType            `protobuf:"varint,5,opt,name=type,proto3,enum=prodvana.environment.ClusterType" json:"type,omitempty"`
	Config                 *ClusterConfig         `protobuf:"bytes,6,opt,name=config,proto3" json:"config,omitempty"`
	LastHeartbeatTimestamp *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=last_heartbeat_timestamp,json=lastHeartbeatTimestamp,proto3" json:"last_heartbeat_timestamp,omitempty"`
}

func (x *Cluster) Reset() {
	*x = Cluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_environment_clusters_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster) ProtoMessage() {}

func (x *Cluster) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_environment_clusters_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster.ProtoReflect.Descriptor instead.
func (*Cluster) Descriptor() ([]byte, []int) {
	return file_prodvana_environment_clusters_proto_rawDescGZIP(), []int{1}
}

func (x *Cluster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Cluster) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *Cluster) GetAuth() *ClusterAuth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *Cluster) GetType() ClusterType {
	if x != nil {
		return x.Type
	}
	return ClusterType_UNKNOWN
}

func (x *Cluster) GetConfig() *ClusterConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Cluster) GetLastHeartbeatTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.LastHeartbeatTimestamp
	}
	return nil
}

type FakeClusterConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CrashingPrograms []*FakeClusterConfig_CrashingProgramPatterns `protobuf:"bytes,1,rep,name=crashing_programs,json=crashingPrograms,proto3" json:"crashing_programs,omitempty"`
}

func (x *FakeClusterConfig) Reset() {
	*x = FakeClusterConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_environment_clusters_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FakeClusterConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FakeClusterConfig) ProtoMessage() {}

func (x *FakeClusterConfig) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_environment_clusters_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FakeClusterConfig.ProtoReflect.Descriptor instead.
func (*FakeClusterConfig) Descriptor() ([]byte, []int) {
	return file_prodvana_environment_clusters_proto_rawDescGZIP(), []int{2}
}

func (x *FakeClusterConfig) GetCrashingPrograms() []*FakeClusterConfig_CrashingProgramPatterns {
	if x != nil {
		return x.CrashingPrograms
	}
	return nil
}

type RetryPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseInterval *durationpb.Duration `protobuf:"bytes,1,opt,name=base_interval,json=baseInterval,proto3" json:"base_interval,omitempty"`
	MaxInterval  *durationpb.Duration `protobuf:"bytes,2,opt,name=max_interval,json=maxInterval,proto3" json:"max_interval,omitempty"`
	// <= 0 means no limit on retries
	MaxAttempts int32 `protobuf:"varint,3,opt,name=max_attempts,json=maxAttempts,proto3" json:"max_attempts,omitempty"`
}

func (x *RetryPolicy) Reset() {
	*x = RetryPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_environment_clusters_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetryPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryPolicy) ProtoMessage() {}

func (x *RetryPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_environment_clusters_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryPolicy.ProtoReflect.Descriptor instead.
func (*RetryPolicy) Descriptor() ([]byte, []int) {
	return file_prodvana_environment_clusters_proto_rawDescGZIP(), []int{3}
}

func (x *RetryPolicy) GetBaseInterval() *durationpb.Duration {
	if x != nil {
		return x.BaseInterval
	}
	return nil
}

func (x *RetryPolicy) GetMaxInterval() *durationpb.Duration {
	if x != nil {
		return x.MaxInterval
	}
	return nil
}

func (x *RetryPolicy) GetMaxAttempts() int32 {
	if x != nil {
		return x.MaxAttempts
	}
	return 0
}

type ExtensionFetchCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ExecConfig:
	//
	//	*ExtensionFetchCommand_TaskConfig
	//	*ExtensionFetchCommand_KubernetesConfig
	ExecConfig isExtensionFetchCommand_ExecConfig `protobuf_oneof:"exec_config"`
	// customize intervals instead of using Prodvana default
	// only used for fetch
	// how often to run command after it succeeds
	PollInterval *durationpb.Duration `protobuf:"bytes,3,opt,name=poll_interval,json=pollInterval,proto3" json:"poll_interval,omitempty"`
	// how often to fetch when in steady state (after the extension has converged)
	SteadyStatePollInterval *durationpb.Duration `protobuf:"bytes,6,opt,name=steady_state_poll_interval,json=steadyStatePollInterval,proto3" json:"steady_state_poll_interval,omitempty"`
	// deprecated, not used
	Timeout *durationpb.Duration `protobuf:"bytes,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// retry policy for unexpected failures (this means exits other than 0 or 2 when fetch_mode = EXIT_CODE, or other than 0 for STRUCTURED_OUTPUT).
	// if not set, regular, non-steady-state poll interval is used for fetches.
	RetryPolicy *RetryPolicy `protobuf:"bytes,7,opt,name=retry_policy,json=retryPolicy,proto3" json:"retry_policy,omitempty"`
	// optional env variables to inject and override from exec_config
	Env map[string]*common_config.EnvValue `protobuf:"bytes,5,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// how to interpret the output of the command
	FetchMode extensions.FetchMode `protobuf:"varint,8,opt,name=fetch_mode,json=fetchMode,proto3,enum=prodvana.runtimes.extensions.FetchMode" json:"fetch_mode,omitempty"`
}

func (x *ExtensionFetchCommand) Reset() {
	*x = ExtensionFetchCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_environment_clusters_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtensionFetchCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtensionFetchCommand) ProtoMessage() {}

func (x *ExtensionFetchCommand) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_environment_clusters_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtensionFetchCommand.ProtoReflect.Descriptor instead.
func (*ExtensionFetchCommand) Descriptor() ([]byte, []int) {
	return file_prodvana_environment_clusters_proto_rawDescGZIP(), []int{4}
}

func (m *ExtensionFetchCommand) GetExecConfig() isExtensionFetchCommand_ExecConfig {
	if m != nil {
		return m.ExecConfig
	}
	return nil
}

func (x *ExtensionFetchCommand) GetTaskConfig() *common_config.TaskConfig {
	if x, ok := x.GetExecConfig().(*ExtensionFetchCommand_TaskConfig); ok {
		return x.TaskConfig
	}
	return nil
}

func (x *ExtensionFetchCommand) GetKubernetesConfig() *common_config.KubernetesConfig {
	if x, ok := x.GetExecConfig().(*ExtensionFetchCommand_KubernetesConfig); ok {
		return x.KubernetesConfig
	}
	return nil
}

func (x *ExtensionFetchCommand) GetPollInterval() *durationpb.Duration {
	if x != nil {
		return x.PollInterval
	}
	return nil
}

func (x *ExtensionFetchCommand) GetSteadyStatePollInterval() *durationpb.Duration {
	if x != nil {
		return x.SteadyStatePollInterval
	}
	return nil
}

func (x *ExtensionFetchCommand) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *ExtensionFetchCommand) GetRetryPolicy() *RetryPolicy {
	if x != nil {
		return x.RetryPolicy
	}
	return nil
}

func (x *ExtensionFetchCommand) GetEnv() map[string]*common_config.EnvValue {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *ExtensionFetchCommand) GetFetchMode() extensions.FetchMode {
	if x != nil {
		return x.FetchMode
	}
	return extensions.FetchMode(0)
}

type isExtensionFetchCommand_ExecConfig interface {
	isExtensionFetchCommand_ExecConfig()
}

type ExtensionFetchCommand_TaskConfig struct {
	TaskConfig *common_config.TaskConfig `protobuf:"bytes,1,opt,name=task_config,json=taskConfig,proto3,oneof"`
}

type ExtensionFetchCommand_KubernetesConfig struct {
	KubernetesConfig *common_config.KubernetesConfig `protobuf:"bytes,2,opt,name=kubernetes_config,json=kubernetesConfig,proto3,oneof"`
}

func (*ExtensionFetchCommand_TaskConfig) isExtensionFetchCommand_ExecConfig() {}

func (*ExtensionFetchCommand_KubernetesConfig) isExtensionFetchCommand_ExecConfig() {}

type ExtensionGetInfoCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ExecConfig:
	//
	//	*ExtensionGetInfoCommand_TaskConfig
	//	*ExtensionGetInfoCommand_KubernetesConfig
	ExecConfig isExtensionGetInfoCommand_ExecConfig `protobuf_oneof:"exec_config"`
	// customize intervals instead of using Prodvana default
	// defaults to 5 minutes
	PollInterval *durationpb.Duration `protobuf:"bytes,3,opt,name=poll_interval,json=pollInterval,proto3" json:"poll_interval,omitempty"`
	// retry policy for unexpected failures.
	// defaults to fast retrying after 30s then backing off to 10 minutes
	RetryPolicy *RetryPolicy `protobuf:"bytes,4,opt,name=retry_policy,json=retryPolicy,proto3" json:"retry_policy,omitempty"`
	// optional env variables to inject and override from exec_config
	Env map[string]*common_config.EnvValue `protobuf:"bytes,5,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// exposed for internal testing. do not set
	TestOnlyDoNotRequirePvnWrapper bool `protobuf:"varint,6,opt,name=test_only_do_not_require_pvn_wrapper,json=testOnlyDoNotRequirePvnWrapper,proto3" json:"test_only_do_not_require_pvn_wrapper,omitempty"`
}

func (x *ExtensionGetInfoCommand) Reset() {
	*x = ExtensionGetInfoCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_environment_clusters_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtensionGetInfoCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtensionGetInfoCommand) ProtoMessage() {}

func (x *ExtensionGetInfoCommand) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_environment_clusters_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtensionGetInfoCommand.ProtoReflect.Descriptor instead.
func (*ExtensionGetInfoCommand) Descriptor() ([]byte, []int) {
	return file_prodvana_environment_clusters_proto_rawDescGZIP(), []int{5}
}

func (m *ExtensionGetInfoCommand) GetExecConfig() isExtensionGetInfoCommand_ExecConfig {
	if m != nil {
		return m.ExecConfig
	}
	return nil
}

func (x *ExtensionGetInfoCommand) GetTaskConfig() *common_config.TaskConfig {
	if x, ok := x.GetExecConfig().(*ExtensionGetInfoCommand_TaskConfig); ok {
		return x.TaskConfig
	}
	return nil
}

func (x *ExtensionGetInfoCommand) GetKubernetesConfig() *common_config.KubernetesConfig {
	if x, ok := x.GetExecConfig().(*ExtensionGetInfoCommand_KubernetesConfig); ok {
		return x.KubernetesConfig
	}
	return nil
}

func (x *ExtensionGetInfoCommand) GetPollInterval() *durationpb.Duration {
	if x != nil {
		return x.PollInterval
	}
	return nil
}

func (x *ExtensionGetInfoCommand) GetRetryPolicy() *RetryPolicy {
	if x != nil {
		return x.RetryPolicy
	}
	return nil
}

func (x *ExtensionGetInfoCommand) GetEnv() map[string]*common_config.EnvValue {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *ExtensionGetInfoCommand) GetTestOnlyDoNotRequirePvnWrapper() bool {
	if x != nil {
		return x.TestOnlyDoNotRequirePvnWrapper
	}
	return false
}

type isExtensionGetInfoCommand_ExecConfig interface {
	isExtensionGetInfoCommand_ExecConfig()
}

type ExtensionGetInfoCommand_TaskConfig struct {
	TaskConfig *common_config.TaskConfig `protobuf:"bytes,1,opt,name=task_config,json=taskConfig,proto3,oneof"`
}

type ExtensionGetInfoCommand_KubernetesConfig struct {
	KubernetesConfig *common_config.KubernetesConfig `protobuf:"bytes,2,opt,name=kubernetes_config,json=kubernetesConfig,proto3,oneof"`
}

func (*ExtensionGetInfoCommand_TaskConfig) isExtensionGetInfoCommand_ExecConfig() {}

func (*ExtensionGetInfoCommand_KubernetesConfig) isExtensionGetInfoCommand_ExecConfig() {}

type ExtensionApplyCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ExecConfig:
	//
	//	*ExtensionApplyCommand_TaskConfig
	//	*ExtensionApplyCommand_KubernetesConfig
	ExecConfig isExtensionApplyCommand_ExecConfig `protobuf_oneof:"exec_config"`
	// deprecated, not used
	Timeout *durationpb.Duration `protobuf:"bytes,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// optional env variables to inject and override from exec_config
	Env map[string]*common_config.EnvValue `protobuf:"bytes,5,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// used in conjunction with retryable_exit_codes, defaults to the convergence grace period
	RetryPolicy *RetryPolicy `protobuf:"bytes,7,opt,name=retry_policy,json=retryPolicy,proto3" json:"retry_policy,omitempty"`
	// if set and the apply command returns these exit codes, retry the command without marking the result as failing.
	RetryableExitCodes []int32 `protobuf:"varint,8,rep,packed,name=retryable_exit_codes,json=retryableExitCodes,proto3" json:"retryable_exit_codes,omitempty"`
	// optional, if set, do not run more than this many apply commands concurrently
	MaxConcurrency int32 `protobuf:"varint,9,opt,name=max_concurrency,json=maxConcurrency,proto3" json:"max_concurrency,omitempty"`
}

func (x *ExtensionApplyCommand) Reset() {
	*x = ExtensionApplyCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_environment_clusters_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtensionApplyCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtensionApplyCommand) ProtoMessage() {}

func (x *ExtensionApplyCommand) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_environment_clusters_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtensionApplyCommand.ProtoReflect.Descriptor instead.
func (*ExtensionApplyCommand) Descriptor() ([]byte, []int) {
	return file_prodvana_environment_clusters_proto_rawDescGZIP(), []int{6}
}

func (m *ExtensionApplyCommand) GetExecConfig() isExtensionApplyCommand_ExecConfig {
	if m != nil {
		return m.ExecConfig
	}
	return nil
}

func (x *ExtensionApplyCommand) GetTaskConfig() *common_config.TaskConfig {
	if x, ok := x.GetExecConfig().(*ExtensionApplyCommand_TaskConfig); ok {
		return x.TaskConfig
	}
	return nil
}

func (x *ExtensionApplyCommand) GetKubernetesConfig() *common_config.KubernetesConfig {
	if x, ok := x.GetExecConfig().(*ExtensionApplyCommand_KubernetesConfig); ok {
		return x.KubernetesConfig
	}
	return nil
}

func (x *ExtensionApplyCommand) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *ExtensionApplyCommand) GetEnv() map[string]*common_config.EnvValue {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *ExtensionApplyCommand) GetRetryPolicy() *RetryPolicy {
	if x != nil {
		return x.RetryPolicy
	}
	return nil
}

func (x *ExtensionApplyCommand) GetRetryableExitCodes() []int32 {
	if x != nil {
		return x.RetryableExitCodes
	}
	return nil
}

func (x *ExtensionApplyCommand) GetMaxConcurrency() int32 {
	if x != nil {
		return x.MaxConcurrency
	}
	return 0
}

type isExtensionApplyCommand_ExecConfig interface {
	isExtensionApplyCommand_ExecConfig()
}

type ExtensionApplyCommand_TaskConfig struct {
	TaskConfig *common_config.TaskConfig `protobuf:"bytes,1,opt,name=task_config,json=taskConfig,proto3,oneof"`
}

type ExtensionApplyCommand_KubernetesConfig struct {
	KubernetesConfig *common_config.KubernetesConfig `protobuf:"bytes,2,opt,name=kubernetes_config,json=kubernetesConfig,proto3,oneof"`
}

func (*ExtensionApplyCommand_TaskConfig) isExtensionApplyCommand_ExecConfig() {}

func (*ExtensionApplyCommand_KubernetesConfig) isExtensionApplyCommand_ExecConfig() {}

type ExtensionClusterConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Apply        *ExtensionApplyCommand               `protobuf:"bytes,1,opt,name=apply,proto3" json:"apply,omitempty"`
	Fetch        *ExtensionFetchCommand               `protobuf:"bytes,2,opt,name=fetch,proto3" json:"fetch,omitempty"`
	Debug        *ExtensionGetInfoCommand             `protobuf:"bytes,8,opt,name=debug,proto3" json:"debug,omitempty"` // deprecated, set this as get_info instead
	GetInfo      *ExtensionGetInfoCommand             `protobuf:"bytes,9,opt,name=get_info,json=getInfo,proto3" json:"get_info,omitempty"`
	Parameters   []*common_config.ParameterDefinition `protobuf:"bytes,3,rep,name=parameters,proto3" json:"parameters,omitempty"`
	ProxyRuntime *runtimes.RuntimeExecutionConfig     `protobuf:"bytes,4,opt,name=proxy_runtime,json=proxyRuntime,proto3" json:"proxy_runtime,omitempty"`
	Type         ExtensionType                        `protobuf:"varint,5,opt,name=type,proto3,enum=prodvana.environment.ExtensionType" json:"type,omitempty"`
	// Apply is potentially dangerous - require approval before each apply
	RequireApprovalBeforeApply bool `protobuf:"varint,6,opt,name=require_approval_before_apply,json=requireApprovalBeforeApply,proto3" json:"require_approval_before_apply,omitempty"`
	// How long after apply ran the first time should it be restarted if the service still has not converged.
	// This duration is computed from the *start* of apply run.
	// Defaults to 10m.
	ConvergenceGracePeriod *durationpb.Duration `protobuf:"bytes,7,opt,name=convergence_grace_period,json=convergenceGracePeriod,proto3" json:"convergence_grace_period,omitempty"` // next tag: 10
}

func (x *ExtensionClusterConfig) Reset() {
	*x = ExtensionClusterConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_environment_clusters_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtensionClusterConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtensionClusterConfig) ProtoMessage() {}

func (x *ExtensionClusterConfig) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_environment_clusters_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtensionClusterConfig.ProtoReflect.Descriptor instead.
func (*ExtensionClusterConfig) Descriptor() ([]byte, []int) {
	return file_prodvana_environment_clusters_proto_rawDescGZIP(), []int{7}
}

func (x *ExtensionClusterConfig) GetApply() *ExtensionApplyCommand {
	if x != nil {
		return x.Apply
	}
	return nil
}

func (x *ExtensionClusterConfig) GetFetch() *ExtensionFetchCommand {
	if x != nil {
		return x.Fetch
	}
	return nil
}

func (x *ExtensionClusterConfig) GetDebug() *ExtensionGetInfoCommand {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *ExtensionClusterConfig) GetGetInfo() *ExtensionGetInfoCommand {
	if x != nil {
		return x.GetInfo
	}
	return nil
}

func (x *ExtensionClusterConfig) GetParameters() []*common_config.ParameterDefinition {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *ExtensionClusterConfig) GetProxyRuntime() *runtimes.RuntimeExecutionConfig {
	if x != nil {
		return x.ProxyRuntime
	}
	return nil
}

func (x *ExtensionClusterConfig) GetType() ExtensionType {
	if x != nil {
		return x.Type
	}
	return ExtensionType_GENERIC
}

func (x *ExtensionClusterConfig) GetRequireApprovalBeforeApply() bool {
	if x != nil {
		return x.RequireApprovalBeforeApply
	}
	return false
}

func (x *ExtensionClusterConfig) GetConvergenceGracePeriod() *durationpb.Duration {
	if x != nil {
		return x.ConvergenceGracePeriod
	}
	return nil
}

type CompiledExtensionCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NamePrefix string `protobuf:"bytes,1,opt,name=name_prefix,json=namePrefix,proto3" json:"name_prefix,omitempty"`
	// weird nesting for compatibility reasons, from before fetch and apply definitions were split
	Command          *CompiledExtensionCommand_CompiledExtensionCommandExec `protobuf:"bytes,2,opt,name=command,proto3" json:"command,omitempty"`
	RuntimeExecution *runtimes.RuntimeExecutionConfig                       `protobuf:"bytes,3,opt,name=runtime_execution,json=runtimeExecution,proto3" json:"runtime_execution,omitempty"`
	Env              map[string]*common_config.EnvValue                     `protobuf:"bytes,4,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CompiledExtensionCommand) Reset() {
	*x = CompiledExtensionCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_environment_clusters_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompiledExtensionCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompiledExtensionCommand) ProtoMessage() {}

func (x *CompiledExtensionCommand) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_environment_clusters_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompiledExtensionCommand.ProtoReflect.Descriptor instead.
func (*CompiledExtensionCommand) Descriptor() ([]byte, []int) {
	return file_prodvana_environment_clusters_proto_rawDescGZIP(), []int{8}
}

func (x *CompiledExtensionCommand) GetNamePrefix() string {
	if x != nil {
		return x.NamePrefix
	}
	return ""
}

func (x *CompiledExtensionCommand) GetCommand() *CompiledExtensionCommand_CompiledExtensionCommandExec {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *CompiledExtensionCommand) GetRuntimeExecution() *runtimes.RuntimeExecutionConfig {
	if x != nil {
		return x.RuntimeExecution
	}
	return nil
}

func (x *CompiledExtensionCommand) GetEnv() map[string]*common_config.EnvValue {
	if x != nil {
		return x.Env
	}
	return nil
}

type IacRunnerCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd string `protobuf:"bytes,1,opt,name=cmd,proto3" json:"cmd,omitempty"`
}

func (x *IacRunnerCommand) Reset() {
	*x = IacRunnerCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_environment_clusters_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IacRunnerCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IacRunnerCommand) ProtoMessage() {}

func (x *IacRunnerCommand) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_environment_clusters_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IacRunnerCommand.ProtoReflect.Descriptor instead.
func (*IacRunnerCommand) Descriptor() ([]byte, []int) {
	return file_prodvana_environment_clusters_proto_rawDescGZIP(), []int{9}
}

func (x *IacRunnerCommand) GetCmd() string {
	if x != nil {
		return x.Cmd
	}
	return ""
}

type TerraformRunnerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProxyRuntime *runtimes.RuntimeExecutionConfig `protobuf:"bytes,1,opt,name=proxy_runtime,json=proxyRuntime,proto3" json:"proxy_runtime,omitempty"`
	// optional env variables to pass to terraform commands, can be useful for passing secrets
	Env map[string]*common_config.EnvValue `protobuf:"bytes,2,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// optional volumes to mount into terraform containers
	Volumes []*volumes.Volume `protobuf:"bytes,3,rep,name=volumes,proto3" json:"volumes,omitempty"`
	// commands that must run before terraform can run, e.g. gcloud auth login
	PreRun []*IacRunnerCommand `protobuf:"bytes,4,rep,name=pre_run,json=preRun,proto3" json:"pre_run,omitempty"`
	// Poll interval for terraform plan when not converged, defaults to 5 minutes. Polling takes a lock on terraform state file, so increase this if you run terraform plan locally often.
	PollInterval *durationpb.Duration `protobuf:"bytes,5,opt,name=poll_interval,json=pollInterval,proto3" json:"poll_interval,omitempty"`
	// Poll interval for terraform plan in steady state (after it has converged), defaults to 1 hour. During steady state, polling is used for drift detection.
	// This is the min duration of time for which drift not being detected is OK.
	SteadyStatePollInterval *durationpb.Duration `protobuf:"bytes,7,opt,name=steady_state_poll_interval,json=steadyStatePollInterval,proto3" json:"steady_state_poll_interval,omitempty"`
	// Require approval before every apply operation - this is on top of any release channel-level approvals.
	RequireApprovalBeforeApply bool                 `protobuf:"varint,6,opt,name=require_approval_before_apply,json=requireApprovalBeforeApply,proto3" json:"require_approval_before_apply,omitempty"`
	ConvergenceGracePeriod     *durationpb.Duration `protobuf:"bytes,8,opt,name=convergence_grace_period,json=convergenceGracePeriod,proto3" json:"convergence_grace_period,omitempty"`
	// override default retry policy. Default is min = 1m, max = 15m.
	FetchRetryPolicy *RetryPolicy `protobuf:"bytes,9,opt,name=fetch_retry_policy,json=fetchRetryPolicy,proto3" json:"fetch_retry_policy,omitempty"`
	// override apply retry policy. Default is min = 30s, max = 5m.
	ApplyRetryPolicy *RetryPolicy `protobuf:"bytes,10,opt,name=apply_retry_policy,json=applyRetryPolicy,proto3" json:"apply_retry_policy,omitempty"`
	// Skip drift detection. This is useful for faster convergence on updates, but can lead to drift going undetected.
	// When enabled, steady state polling is turned off.
	// NOTE: Only supported in Pulumi today.
	DisableDriftDetection bool `protobuf:"varint,11,opt,name=disable_drift_detection,json=disableDriftDetection,proto3" json:"disable_drift_detection,omitempty"`
	// Resource constraints for the  runner's Fetch and Apply commands.
	TaskResources *common_config.ResourceRequirements `protobuf:"bytes,12,opt,name=task_resources,json=taskResources,proto3" json:"task_resources,omitempty"`
	// optionally override what service account is used for terraform
	ServiceAccount string `protobuf:"bytes,13,opt,name=service_account,json=serviceAccount,proto3" json:"service_account,omitempty"`
}

func (x *TerraformRunnerConfig) Reset() {
	*x = TerraformRunnerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_environment_clusters_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerraformRunnerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerraformRunnerConfig) ProtoMessage() {}

func (x *TerraformRunnerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_environment_clusters_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerraformRunnerConfig.ProtoReflect.Descriptor instead.
func (*TerraformRunnerConfig) Descriptor() ([]byte, []int) {
	return file_prodvana_environment_clusters_proto_rawDescGZIP(), []int{10}
}

func (x *TerraformRunnerConfig) GetProxyRuntime() *runtimes.RuntimeExecutionConfig {
	if x != nil {
		return x.ProxyRuntime
	}
	return nil
}

func (x *TerraformRunnerConfig) GetEnv() map[string]*common_config.EnvValue {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *TerraformRunnerConfig) GetVolumes() []*volumes.Volume {
	if x != nil {
		return x.Volumes
	}
	return nil
}

func (x *TerraformRunnerConfig) GetPreRun() []*IacRunnerCommand {
	if x != nil {
		return x.PreRun
	}
	return nil
}

func (x *TerraformRunnerConfig) GetPollInterval() *durationpb.Duration {
	if x != nil {
		return x.PollInterval
	}
	return nil
}

func (x *TerraformRunnerConfig) GetSteadyStatePollInterval() *durationpb.Duration {
	if x != nil {
		return x.SteadyStatePollInterval
	}
	return nil
}

func (x *TerraformRunnerConfig) GetRequireApprovalBeforeApply() bool {
	if x != nil {
		return x.RequireApprovalBeforeApply
	}
	return false
}

func (x *TerraformRunnerConfig) GetConvergenceGracePeriod() *durationpb.Duration {
	if x != nil {
		return x.ConvergenceGracePeriod
	}
	return nil
}

func (x *TerraformRunnerConfig) GetFetchRetryPolicy() *RetryPolicy {
	if x != nil {
		return x.FetchRetryPolicy
	}
	return nil
}

func (x *TerraformRunnerConfig) GetApplyRetryPolicy() *RetryPolicy {
	if x != nil {
		return x.ApplyRetryPolicy
	}
	return nil
}

func (x *TerraformRunnerConfig) GetDisableDriftDetection() bool {
	if x != nil {
		return x.DisableDriftDetection
	}
	return false
}

func (x *TerraformRunnerConfig) GetTaskResources() *common_config.ResourceRequirements {
	if x != nil {
		return x.TaskResources
	}
	return nil
}

func (x *TerraformRunnerConfig) GetServiceAccount() string {
	if x != nil {
		return x.ServiceAccount
	}
	return ""
}

type GKEClusterMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectName     string `protobuf:"bytes,1,opt,name=project_name,json=projectName,proto3" json:"project_name,omitempty"`
	ClusterLocation string `protobuf:"bytes,2,opt,name=cluster_location,json=clusterLocation,proto3" json:"cluster_location,omitempty"`
	ClusterName     string `protobuf:"bytes,3,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
}

func (x *GKEClusterMetadata) Reset() {
	*x = GKEClusterMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_environment_clusters_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GKEClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GKEClusterMetadata) ProtoMessage() {}

func (x *GKEClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_environment_clusters_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GKEClusterMetadata.ProtoReflect.Descriptor instead.
func (*GKEClusterMetadata) Descriptor() ([]byte, []int) {
	return file_prodvana_environment_clusters_proto_rawDescGZIP(), []int{11}
}

func (x *GKEClusterMetadata) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *GKEClusterMetadata) GetClusterLocation() string {
	if x != nil {
		return x.ClusterLocation
	}
	return ""
}

func (x *GKEClusterMetadata) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

type ClusterMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ClusterMetadata:
	//
	//	*ClusterMetadata_Gke
	ClusterMetadata isClusterMetadata_ClusterMetadata `protobuf_oneof:"cluster_metadata"`
}

func (x *ClusterMetadata) Reset() {
	*x = ClusterMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_environment_clusters_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterMetadata) ProtoMessage() {}

func (x *ClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_environment_clusters_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterMetadata.ProtoReflect.Descriptor instead.
func (*ClusterMetadata) Descriptor() ([]byte, []int) {
	return file_prodvana_environment_clusters_proto_rawDescGZIP(), []int{12}
}

func (m *ClusterMetadata) GetClusterMetadata() isClusterMetadata_ClusterMetadata {
	if m != nil {
		return m.ClusterMetadata
	}
	return nil
}

func (x *ClusterMetadata) GetGke() *GKEClusterMetadata {
	if x, ok := x.GetClusterMetadata().(*ClusterMetadata_Gke); ok {
		return x.Gke
	}
	return nil
}

type isClusterMetadata_ClusterMetadata interface {
	isClusterMetadata_ClusterMetadata()
}

type ClusterMetadata_Gke struct {
	Gke *GKEClusterMetadata `protobuf:"bytes,1,opt,name=gke,proto3,oneof"`
}

func (*ClusterMetadata_Gke) isClusterMetadata_ClusterMetadata() {}

type AwsEcsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProxyRuntime *runtimes.RuntimeExecutionConfig `protobuf:"bytes,1,opt,name=proxy_runtime,json=proxyRuntime,proto3" json:"proxy_runtime,omitempty"`
	// Types that are assignable to Credentials:
	//
	//	*AwsEcsConfig_AccessKey_
	//	*AwsEcsConfig_InheritRoleFromRuntimeEnv
	Credentials isAwsEcsConfig_Credentials `protobuf_oneof:"credentials"`
	Region      string                     `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
	EcsCluster  string                     `protobuf:"bytes,5,opt,name=ecs_cluster,json=ecsCluster,proto3" json:"ecs_cluster,omitempty"`
}

func (x *AwsEcsConfig) Reset() {
	*x = AwsEcsConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_environment_clusters_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsEcsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsEcsConfig) ProtoMessage() {}

func (x *AwsEcsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_environment_clusters_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsEcsConfig.ProtoReflect.Descriptor instead.
func (*AwsEcsConfig) Descriptor() ([]byte, []int) {
	return file_prodvana_environment_clusters_proto_rawDescGZIP(), []int{13}
}

func (x *AwsEcsConfig) GetProxyRuntime() *runtimes.RuntimeExecutionConfig {
	if x != nil {
		return x.ProxyRuntime
	}
	return nil
}

func (m *AwsEcsConfig) GetCredentials() isAwsEcsConfig_Credentials {
	if m != nil {
		return m.Credentials
	}
	return nil
}

func (x *AwsEcsConfig) GetAccessKey() *AwsEcsConfig_AccessKey {
	if x, ok := x.GetCredentials().(*AwsEcsConfig_AccessKey_); ok {
		return x.AccessKey
	}
	return nil
}

func (x *AwsEcsConfig) GetInheritRoleFromRuntimeEnv() *AwsEcsConfig_InheritRole {
	if x, ok := x.GetCredentials().(*AwsEcsConfig_InheritRoleFromRuntimeEnv); ok {
		return x.InheritRoleFromRuntimeEnv
	}
	return nil
}

func (x *AwsEcsConfig) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *AwsEcsConfig) GetEcsCluster() string {
	if x != nil {
		return x.EcsCluster
	}
	return ""
}

type isAwsEcsConfig_Credentials interface {
	isAwsEcsConfig_Credentials()
}

type AwsEcsConfig_AccessKey_ struct {
	AccessKey *AwsEcsConfig_AccessKey `protobuf:"bytes,6,opt,name=access_key,json=accessKey,proto3,oneof"`
}

type AwsEcsConfig_InheritRoleFromRuntimeEnv struct {
	// the ProxyRuntime has been configured with an IAM role that has the necessary permissions
	InheritRoleFromRuntimeEnv *AwsEcsConfig_InheritRole `protobuf:"bytes,7,opt,name=inherit_role_from_runtime_env,json=inheritRoleFromRuntimeEnv,proto3,oneof"` // TODO(naphat) assumeRole support
}

func (*AwsEcsConfig_AccessKey_) isAwsEcsConfig_Credentials() {}

func (*AwsEcsConfig_InheritRoleFromRuntimeEnv) isAwsEcsConfig_Credentials() {}

type GoogleCloudRunConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProxyRuntime *runtimes.RuntimeExecutionConfig `protobuf:"bytes,1,opt,name=proxy_runtime,json=proxyRuntime,proto3" json:"proxy_runtime,omitempty"`
	// Types that are assignable to Credentials:
	//
	//	*GoogleCloudRunConfig_ServiceAccountJson
	Credentials isGoogleCloudRunConfig_Credentials `protobuf_oneof:"credentials"`
	Project     string                             `protobuf:"bytes,3,opt,name=project,proto3" json:"project,omitempty"`
	Region      string                             `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"` // next tag: 5
}

func (x *GoogleCloudRunConfig) Reset() {
	*x = GoogleCloudRunConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_environment_clusters_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudRunConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudRunConfig) ProtoMessage() {}

func (x *GoogleCloudRunConfig) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_environment_clusters_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudRunConfig.ProtoReflect.Descriptor instead.
func (*GoogleCloudRunConfig) Descriptor() ([]byte, []int) {
	return file_prodvana_environment_clusters_proto_rawDescGZIP(), []int{14}
}

func (x *GoogleCloudRunConfig) GetProxyRuntime() *runtimes.RuntimeExecutionConfig {
	if x != nil {
		return x.ProxyRuntime
	}
	return nil
}

func (m *GoogleCloudRunConfig) GetCredentials() isGoogleCloudRunConfig_Credentials {
	if m != nil {
		return m.Credentials
	}
	return nil
}

func (x *GoogleCloudRunConfig) GetServiceAccountJson() *common_config.SecretReferenceValue {
	if x, ok := x.GetCredentials().(*GoogleCloudRunConfig_ServiceAccountJson); ok {
		return x.ServiceAccountJson
	}
	return nil
}

func (x *GoogleCloudRunConfig) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *GoogleCloudRunConfig) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

type isGoogleCloudRunConfig_Credentials interface {
	isGoogleCloudRunConfig_Credentials()
}

type GoogleCloudRunConfig_ServiceAccountJson struct {
	ServiceAccountJson *common_config.SecretReferenceValue `protobuf:"bytes,2,opt,name=service_account_json,json=serviceAccountJson,proto3,oneof"` // TODO(naphat) support for job service account name
}

func (*GoogleCloudRunConfig_ServiceAccountJson) isGoogleCloudRunConfig_Credentials() {}

type FlyConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProxyRuntime *runtimes.RuntimeExecutionConfig `protobuf:"bytes,1,opt,name=proxy_runtime,json=proxyRuntime,proto3" json:"proxy_runtime,omitempty"`
	// Types that are assignable to Credentials:
	//
	//	*FlyConfig_FlyApiToken
	Credentials isFlyConfig_Credentials `protobuf_oneof:"credentials"`
}

func (x *FlyConfig) Reset() {
	*x = FlyConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_environment_clusters_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlyConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlyConfig) ProtoMessage() {}

func (x *FlyConfig) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_environment_clusters_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlyConfig.ProtoReflect.Descriptor instead.
func (*FlyConfig) Descriptor() ([]byte, []int) {
	return file_prodvana_environment_clusters_proto_rawDescGZIP(), []int{15}
}

func (x *FlyConfig) GetProxyRuntime() *runtimes.RuntimeExecutionConfig {
	if x != nil {
		return x.ProxyRuntime
	}
	return nil
}

func (m *FlyConfig) GetCredentials() isFlyConfig_Credentials {
	if m != nil {
		return m.Credentials
	}
	return nil
}

func (x *FlyConfig) GetFlyApiToken() *common_config.SecretReferenceValue {
	if x, ok := x.GetCredentials().(*FlyConfig_FlyApiToken); ok {
		return x.FlyApiToken
	}
	return nil
}

type isFlyConfig_Credentials interface {
	isFlyConfig_Credentials()
}

type FlyConfig_FlyApiToken struct {
	FlyApiToken *common_config.SecretReferenceValue `protobuf:"bytes,2,opt,name=fly_api_token,json=flyApiToken,proto3,oneof"`
}

func (*FlyConfig_FlyApiToken) isFlyConfig_Credentials() {}

type ClusterConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string                      `protobuf:"bytes,14,opt,name=name,proto3" json:"name,omitempty"`
	Kubecost     *ClusterConfig_Kubecost     `protobuf:"bytes,3,opt,name=kubecost,proto3" json:"kubecost,omitempty"`
	Datadog      *ClusterConfig_Datadog      `protobuf:"bytes,4,opt,name=datadog,proto3" json:"datadog,omitempty"`
	AlbIngress   *ClusterConfig_ALBIngress   `protobuf:"bytes,6,opt,name=alb_ingress,json=albIngress,proto3" json:"alb_ingress,omitempty"`
	ArgoRollouts *ClusterConfig_ArgoRollouts `protobuf:"bytes,7,opt,name=argo_rollouts,json=argoRollouts,proto3" json:"argo_rollouts,omitempty"`
	GkeIngress   *ClusterConfig_GKEIngress   `protobuf:"bytes,8,opt,name=gke_ingress,json=gkeIngress,proto3" json:"gke_ingress,omitempty"`
	// Self-Managed GKE Ingress - exposes configuration options for GKE Ingress
	// but does not create an ingress object for you
	SelfManagedGkeIngress       *ClusterConfig_GKEIngress   `protobuf:"bytes,11,opt,name=self_managed_gke_ingress,json=selfManagedGkeIngress,proto3" json:"self_managed_gke_ingress,omitempty"`
	CloudProvider               ClusterConfig_CloudProvider `protobuf:"varint,9,opt,name=cloud_provider,json=cloudProvider,proto3,enum=prodvana.environment.ClusterConfig_CloudProvider" json:"cloud_provider,omitempty"`
	DetectedClusterMetadata     *ClusterMetadata            `protobuf:"bytes,18,opt,name=detected_cluster_metadata,json=detectedClusterMetadata,proto3" json:"detected_cluster_metadata,omitempty"`
	UserSuppliedClusterMetadata *ClusterMetadata            `protobuf:"bytes,19,opt,name=user_supplied_cluster_metadata,json=userSuppliedClusterMetadata,proto3" json:"user_supplied_cluster_metadata,omitempty"`
	// Types that are assignable to ClusterOneof:
	//
	//	*ClusterConfig_Fake
	//	*ClusterConfig_Extension
	//	*ClusterConfig_Custom
	//	*ClusterConfig_TerraformRunner
	//	*ClusterConfig_PulumiRunner
	//	*ClusterConfig_AwsEcs
	//	*ClusterConfig_GoogleCloudRun
	//	*ClusterConfig_Fly
	ClusterOneof isClusterConfig_ClusterOneof      `protobuf_oneof:"cluster_oneof"`
	Labels       []*labels.LabelDefinition         `protobuf:"bytes,17,rep,name=labels,proto3" json:"labels,omitempty"`
	AutoRollback *common_config.AutoRollbackConfig `protobuf:"bytes,22,opt,name=auto_rollback,json=autoRollback,proto3" json:"auto_rollback,omitempty"`
}

func (x *ClusterConfig) Reset() {
	*x = ClusterConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_environment_clusters_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterConfig) ProtoMessage() {}

func (x *ClusterConfig) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_environment_clusters_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterConfig.ProtoReflect.Descriptor instead.
func (*ClusterConfig) Descriptor() ([]byte, []int) {
	return file_prodvana_environment_clusters_proto_rawDescGZIP(), []int{16}
}

func (x *ClusterConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClusterConfig) GetKubecost() *ClusterConfig_Kubecost {
	if x != nil {
		return x.Kubecost
	}
	return nil
}

func (x *ClusterConfig) GetDatadog() *ClusterConfig_Datadog {
	if x != nil {
		return x.Datadog
	}
	return nil
}

func (x *ClusterConfig) GetAlbIngress() *ClusterConfig_ALBIngress {
	if x != nil {
		return x.AlbIngress
	}
	return nil
}

func (x *ClusterConfig) GetArgoRollouts() *ClusterConfig_ArgoRollouts {
	if x != nil {
		return x.ArgoRollouts
	}
	return nil
}

func (x *ClusterConfig) GetGkeIngress() *ClusterConfig_GKEIngress {
	if x != nil {
		return x.GkeIngress
	}
	return nil
}

func (x *ClusterConfig) GetSelfManagedGkeIngress() *ClusterConfig_GKEIngress {
	if x != nil {
		return x.SelfManagedGkeIngress
	}
	return nil
}

func (x *ClusterConfig) GetCloudProvider() ClusterConfig_CloudProvider {
	if x != nil {
		return x.CloudProvider
	}
	return ClusterConfig_UNKNOWN
}

func (x *ClusterConfig) GetDetectedClusterMetadata() *ClusterMetadata {
	if x != nil {
		return x.DetectedClusterMetadata
	}
	return nil
}

func (x *ClusterConfig) GetUserSuppliedClusterMetadata() *ClusterMetadata {
	if x != nil {
		return x.UserSuppliedClusterMetadata
	}
	return nil
}

func (m *ClusterConfig) GetClusterOneof() isClusterConfig_ClusterOneof {
	if m != nil {
		return m.ClusterOneof
	}
	return nil
}

func (x *ClusterConfig) GetFake() *FakeClusterConfig {
	if x, ok := x.GetClusterOneof().(*ClusterConfig_Fake); ok {
		return x.Fake
	}
	return nil
}

func (x *ClusterConfig) GetExtension() *ExtensionClusterConfig {
	if x, ok := x.GetClusterOneof().(*ClusterConfig_Extension); ok {
		return x.Extension
	}
	return nil
}

func (x *ClusterConfig) GetCustom() *ExtensionClusterConfig {
	if x, ok := x.GetClusterOneof().(*ClusterConfig_Custom); ok {
		return x.Custom
	}
	return nil
}

func (x *ClusterConfig) GetTerraformRunner() *TerraformRunnerConfig {
	if x, ok := x.GetClusterOneof().(*ClusterConfig_TerraformRunner); ok {
		return x.TerraformRunner
	}
	return nil
}

func (x *ClusterConfig) GetPulumiRunner() *TerraformRunnerConfig {
	if x, ok := x.GetClusterOneof().(*ClusterConfig_PulumiRunner); ok {
		return x.PulumiRunner
	}
	return nil
}

func (x *ClusterConfig) GetAwsEcs() *AwsEcsConfig {
	if x, ok := x.GetClusterOneof().(*ClusterConfig_AwsEcs); ok {
		return x.AwsEcs
	}
	return nil
}

func (x *ClusterConfig) GetGoogleCloudRun() *GoogleCloudRunConfig {
	if x, ok := x.GetClusterOneof().(*ClusterConfig_GoogleCloudRun); ok {
		return x.GoogleCloudRun
	}
	return nil
}

func (x *ClusterConfig) GetFly() *FlyConfig {
	if x, ok := x.GetClusterOneof().(*ClusterConfig_Fly); ok {
		return x.Fly
	}
	return nil
}

func (x *ClusterConfig) GetLabels() []*labels.LabelDefinition {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ClusterConfig) GetAutoRollback() *common_config.AutoRollbackConfig {
	if x != nil {
		return x.AutoRollback
	}
	return nil
}

type isClusterConfig_ClusterOneof interface {
	isClusterConfig_ClusterOneof()
}

type ClusterConfig_Fake struct {
	// only used for fake runtimes
	Fake *FakeClusterConfig `protobuf:"bytes,10,opt,name=fake,proto3,oneof"`
}

type ClusterConfig_Extension struct {
	Extension *ExtensionClusterConfig `protobuf:"bytes,12,opt,name=extension,proto3,oneof"` // deprecated, use custom which means the same thing
}

type ClusterConfig_Custom struct {
	Custom *ExtensionClusterConfig `protobuf:"bytes,23,opt,name=custom,proto3,oneof"`
}

type ClusterConfig_TerraformRunner struct {
	// terraform runner is a runtime that runs terraform via k8s jobs
	TerraformRunner *TerraformRunnerConfig `protobuf:"bytes,15,opt,name=terraform_runner,json=terraformRunner,proto3,oneof"`
}

type ClusterConfig_PulumiRunner struct {
	// pulumi runner is a runtime that runs pulumi via k8s jobs
	PulumiRunner *TerraformRunnerConfig `protobuf:"bytes,16,opt,name=pulumi_runner,json=pulumiRunner,proto3,oneof"`
}

type ClusterConfig_AwsEcs struct {
	AwsEcs *AwsEcsConfig `protobuf:"bytes,20,opt,name=aws_ecs,json=awsEcs,proto3,oneof"`
}

type ClusterConfig_GoogleCloudRun struct {
	GoogleCloudRun *GoogleCloudRunConfig `protobuf:"bytes,21,opt,name=google_cloud_run,json=googleCloudRun,proto3,oneof"`
}

type ClusterConfig_Fly struct {
	Fly *FlyConfig `protobuf:"bytes,24,opt,name=fly,proto3,oneof"`
}

func (*ClusterConfig_Fake) isClusterConfig_ClusterOneof() {}

func (*ClusterConfig_Extension) isClusterConfig_ClusterOneof() {}

func (*ClusterConfig_Custom) isClusterConfig_ClusterOneof() {}

func (*ClusterConfig_TerraformRunner) isClusterConfig_ClusterOneof() {}

func (*ClusterConfig_PulumiRunner) isClusterConfig_ClusterOneof() {}

func (*ClusterConfig_AwsEcs) isClusterConfig_ClusterOneof() {}

func (*ClusterConfig_GoogleCloudRun) isClusterConfig_ClusterOneof() {}

func (*ClusterConfig_Fly) isClusterConfig_ClusterOneof() {}

type ClusterAuth_ECSAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessKey     string `protobuf:"bytes,1,opt,name=access_key,json=accessKey,proto3" json:"access_key,omitempty"`
	SecretKey     string `protobuf:"bytes,2,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	Region        string `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	AssumeRoleArn string `protobuf:"bytes,4,opt,name=assume_role_arn,json=assumeRoleArn,proto3" json:"assume_role_arn,omitempty"`
	ClusterArn    string `protobuf:"bytes,5,opt,name=cluster_arn,json=clusterArn,proto3" json:"cluster_arn,omitempty"`
}

func (x *ClusterAuth_ECSAuth) Reset() {
	*x = ClusterAuth_ECSAuth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_environment_clusters_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterAuth_ECSAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterAuth_ECSAuth) ProtoMessage() {}

func (x *ClusterAuth_ECSAuth) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_environment_clusters_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterAuth_ECSAuth.ProtoReflect.Descriptor instead.
func (*ClusterAuth_ECSAuth) Descriptor() ([]byte, []int) {
	return file_prodvana_environment_clusters_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ClusterAuth_ECSAuth) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *ClusterAuth_ECSAuth) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *ClusterAuth_ECSAuth) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ClusterAuth_ECSAuth) GetAssumeRoleArn() string {
	if x != nil {
		return x.AssumeRoleArn
	}
	return ""
}

func (x *ClusterAuth_ECSAuth) GetClusterArn() string {
	if x != nil {
		return x.ClusterArn
	}
	return ""
}

type ClusterAuth_K8SAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentEnv map[string]string `protobuf:"bytes,1,rep,name=agent_env,json=agentEnv,proto3" json:"agent_env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The Prodvana agent lifecycle is handled by the user -- Prodvana will not install or update the agent.
	AgentExternallyManaged bool `protobuf:"varint,2,opt,name=agent_externally_managed,json=agentExternallyManaged,proto3" json:"agent_externally_managed,omitempty"`
}

func (x *ClusterAuth_K8SAuth) Reset() {
	*x = ClusterAuth_K8SAuth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_environment_clusters_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterAuth_K8SAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterAuth_K8SAuth) ProtoMessage() {}

func (x *ClusterAuth_K8SAuth) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_environment_clusters_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterAuth_K8SAuth.ProtoReflect.Descriptor instead.
func (*ClusterAuth_K8SAuth) Descriptor() ([]byte, []int) {
	return file_prodvana_environment_clusters_proto_rawDescGZIP(), []int{0, 1}
}

func (x *ClusterAuth_K8SAuth) GetAgentEnv() map[string]string {
	if x != nil {
		return x.AgentEnv
	}
	return nil
}

func (x *ClusterAuth_K8SAuth) GetAgentExternallyManaged() bool {
	if x != nil {
		return x.AgentExternallyManaged
	}
	return false
}

type FakeClusterConfig_CrashingProgramPatterns struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageRegex string `protobuf:"bytes,1,opt,name=image_regex,json=imageRegex,proto3" json:"image_regex,omitempty"`
	CmdRegex   string `protobuf:"bytes,2,opt,name=cmd_regex,json=cmdRegex,proto3" json:"cmd_regex,omitempty"`
	LogOutput  string `protobuf:"bytes,3,opt,name=log_output,json=logOutput,proto3" json:"log_output,omitempty"`
}

func (x *FakeClusterConfig_CrashingProgramPatterns) Reset() {
	*x = FakeClusterConfig_CrashingProgramPatterns{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_environment_clusters_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FakeClusterConfig_CrashingProgramPatterns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FakeClusterConfig_CrashingProgramPatterns) ProtoMessage() {}

func (x *FakeClusterConfig_CrashingProgramPatterns) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_environment_clusters_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FakeClusterConfig_CrashingProgramPatterns.ProtoReflect.Descriptor instead.
func (*FakeClusterConfig_CrashingProgramPatterns) Descriptor() ([]byte, []int) {
	return file_prodvana_environment_clusters_proto_rawDescGZIP(), []int{2, 0}
}

func (x *FakeClusterConfig_CrashingProgramPatterns) GetImageRegex() string {
	if x != nil {
		return x.ImageRegex
	}
	return ""
}

func (x *FakeClusterConfig_CrashingProgramPatterns) GetCmdRegex() string {
	if x != nil {
		return x.CmdRegex
	}
	return ""
}

func (x *FakeClusterConfig_CrashingProgramPatterns) GetLogOutput() string {
	if x != nil {
		return x.LogOutput
	}
	return ""
}

type CompiledExtensionCommand_CompiledExtensionCommandExec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ExecConfig:
	//
	//	*CompiledExtensionCommand_CompiledExtensionCommandExec_TaskConfig
	//	*CompiledExtensionCommand_CompiledExtensionCommandExec_KubernetesConfig
	ExecConfig isCompiledExtensionCommand_CompiledExtensionCommandExec_ExecConfig `protobuf_oneof:"exec_config"`
}

func (x *CompiledExtensionCommand_CompiledExtensionCommandExec) Reset() {
	*x = CompiledExtensionCommand_CompiledExtensionCommandExec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_environment_clusters_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompiledExtensionCommand_CompiledExtensionCommandExec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompiledExtensionCommand_CompiledExtensionCommandExec) ProtoMessage() {}

func (x *CompiledExtensionCommand_CompiledExtensionCommandExec) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_environment_clusters_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompiledExtensionCommand_CompiledExtensionCommandExec.ProtoReflect.Descriptor instead.
func (*CompiledExtensionCommand_CompiledExtensionCommandExec) Descriptor() ([]byte, []int) {
	return file_prodvana_environment_clusters_proto_rawDescGZIP(), []int{8, 0}
}

func (m *CompiledExtensionCommand_CompiledExtensionCommandExec) GetExecConfig() isCompiledExtensionCommand_CompiledExtensionCommandExec_ExecConfig {
	if m != nil {
		return m.ExecConfig
	}
	return nil
}

func (x *CompiledExtensionCommand_CompiledExtensionCommandExec) GetTaskConfig() *common_config.TaskConfig {
	if x, ok := x.GetExecConfig().(*CompiledExtensionCommand_CompiledExtensionCommandExec_TaskConfig); ok {
		return x.TaskConfig
	}
	return nil
}

func (x *CompiledExtensionCommand_CompiledExtensionCommandExec) GetKubernetesConfig() *common_config.KubernetesConfig {
	if x, ok := x.GetExecConfig().(*CompiledExtensionCommand_CompiledExtensionCommandExec_KubernetesConfig); ok {
		return x.KubernetesConfig
	}
	return nil
}

type isCompiledExtensionCommand_CompiledExtensionCommandExec_ExecConfig interface {
	isCompiledExtensionCommand_CompiledExtensionCommandExec_ExecConfig()
}

type CompiledExtensionCommand_CompiledExtensionCommandExec_TaskConfig struct {
	TaskConfig *common_config.TaskConfig `protobuf:"bytes,1,opt,name=task_config,json=taskConfig,proto3,oneof"`
}

type CompiledExtensionCommand_CompiledExtensionCommandExec_KubernetesConfig struct {
	KubernetesConfig *common_config.KubernetesConfig `protobuf:"bytes,2,opt,name=kubernetes_config,json=kubernetesConfig,proto3,oneof"`
}

func (*CompiledExtensionCommand_CompiledExtensionCommandExec_TaskConfig) isCompiledExtensionCommand_CompiledExtensionCommandExec_ExecConfig() {
}

func (*CompiledExtensionCommand_CompiledExtensionCommandExec_KubernetesConfig) isCompiledExtensionCommand_CompiledExtensionCommandExec_ExecConfig() {
}

type AwsEcsConfig_AccessKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AwsAccessKeyId     string                              `protobuf:"bytes,1,opt,name=aws_access_key_id,json=awsAccessKeyId,proto3" json:"aws_access_key_id,omitempty"`
	AwsSecretAccessKey *common_config.SecretReferenceValue `protobuf:"bytes,2,opt,name=aws_secret_access_key,json=awsSecretAccessKey,proto3" json:"aws_secret_access_key,omitempty"`
}

func (x *AwsEcsConfig_AccessKey) Reset() {
	*x = AwsEcsConfig_AccessKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_environment_clusters_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsEcsConfig_AccessKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsEcsConfig_AccessKey) ProtoMessage() {}

func (x *AwsEcsConfig_AccessKey) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_environment_clusters_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsEcsConfig_AccessKey.ProtoReflect.Descriptor instead.
func (*AwsEcsConfig_AccessKey) Descriptor() ([]byte, []int) {
	return file_prodvana_environment_clusters_proto_rawDescGZIP(), []int{13, 0}
}

func (x *AwsEcsConfig_AccessKey) GetAwsAccessKeyId() string {
	if x != nil {
		return x.AwsAccessKeyId
	}
	return ""
}

func (x *AwsEcsConfig_AccessKey) GetAwsSecretAccessKey() *common_config.SecretReferenceValue {
	if x != nil {
		return x.AwsSecretAccessKey
	}
	return nil
}

// the ProxyRuntime has been configured with an IAM role that has the necessary permissions
type AwsEcsConfig_InheritRole struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// optional, if the proxy runtime is an EKS cluster you can specify the K8S Service Account to
	// use. If not passed, the default service account for the namespace will be used.
	K8SServiceAccount string `protobuf:"bytes,1,opt,name=k8s_service_account,json=k8sServiceAccount,proto3" json:"k8s_service_account,omitempty"`
}

func (x *AwsEcsConfig_InheritRole) Reset() {
	*x = AwsEcsConfig_InheritRole{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_environment_clusters_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsEcsConfig_InheritRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsEcsConfig_InheritRole) ProtoMessage() {}

func (x *AwsEcsConfig_InheritRole) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_environment_clusters_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsEcsConfig_InheritRole.ProtoReflect.Descriptor instead.
func (*AwsEcsConfig_InheritRole) Descriptor() ([]byte, []int) {
	return file_prodvana_environment_clusters_proto_rawDescGZIP(), []int{13, 1}
}

func (x *AwsEcsConfig_InheritRole) GetK8SServiceAccount() string {
	if x != nil {
		return x.K8SServiceAccount
	}
	return ""
}

type ClusterConfig_Kubecost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled           bool   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	KubecostNamespace string `protobuf:"bytes,3,opt,name=kubecost_namespace,json=kubecostNamespace,proto3" json:"kubecost_namespace,omitempty"`
	// deprecated
	Managed bool `protobuf:"varint,2,opt,name=managed,proto3" json:"managed,omitempty"`
}

func (x *ClusterConfig_Kubecost) Reset() {
	*x = ClusterConfig_Kubecost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_environment_clusters_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterConfig_Kubecost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterConfig_Kubecost) ProtoMessage() {}

func (x *ClusterConfig_Kubecost) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_environment_clusters_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterConfig_Kubecost.ProtoReflect.Descriptor instead.
func (*ClusterConfig_Kubecost) Descriptor() ([]byte, []int) {
	return file_prodvana_environment_clusters_proto_rawDescGZIP(), []int{16, 0}
}

func (x *ClusterConfig_Kubecost) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ClusterConfig_Kubecost) GetKubecostNamespace() string {
	if x != nil {
		return x.KubecostNamespace
	}
	return ""
}

func (x *ClusterConfig_Kubecost) GetManaged() bool {
	if x != nil {
		return x.Managed
	}
	return false
}

type ClusterConfig_Datadog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled          bool   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	DatadogNamespace string `protobuf:"bytes,3,opt,name=datadog_namespace,json=datadogNamespace,proto3" json:"datadog_namespace,omitempty"`
	ApiKey           string `protobuf:"bytes,4,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	Site             string `protobuf:"bytes,5,opt,name=site,proto3" json:"site,omitempty"`
	// deprecated
	Managed bool `protobuf:"varint,2,opt,name=managed,proto3" json:"managed,omitempty"`
}

func (x *ClusterConfig_Datadog) Reset() {
	*x = ClusterConfig_Datadog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_environment_clusters_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterConfig_Datadog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterConfig_Datadog) ProtoMessage() {}

func (x *ClusterConfig_Datadog) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_environment_clusters_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterConfig_Datadog.ProtoReflect.Descriptor instead.
func (*ClusterConfig_Datadog) Descriptor() ([]byte, []int) {
	return file_prodvana_environment_clusters_proto_rawDescGZIP(), []int{16, 1}
}

func (x *ClusterConfig_Datadog) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ClusterConfig_Datadog) GetDatadogNamespace() string {
	if x != nil {
		return x.DatadogNamespace
	}
	return ""
}

func (x *ClusterConfig_Datadog) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *ClusterConfig_Datadog) GetSite() string {
	if x != nil {
		return x.Site
	}
	return ""
}

func (x *ClusterConfig_Datadog) GetManaged() bool {
	if x != nil {
		return x.Managed
	}
	return false
}

type ClusterConfig_ALBIngress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled      bool   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	IngressClass string `protobuf:"bytes,2,opt,name=ingress_class,json=ingressClass,proto3" json:"ingress_class,omitempty"`
	// Attributes from https://docs.aws.amazon.com/elasticloadbalancing/latest/application/application-load-balancers.html#load-balancer-attributes
	// that are added to all Ingresses/LBs created in this runtime.
	DefaultBalancerAttributes []string `protobuf:"bytes,3,rep,name=default_balancer_attributes,json=defaultBalancerAttributes,proto3" json:"default_balancer_attributes,omitempty"`
}

func (x *ClusterConfig_ALBIngress) Reset() {
	*x = ClusterConfig_ALBIngress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_environment_clusters_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterConfig_ALBIngress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterConfig_ALBIngress) ProtoMessage() {}

func (x *ClusterConfig_ALBIngress) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_environment_clusters_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterConfig_ALBIngress.ProtoReflect.Descriptor instead.
func (*ClusterConfig_ALBIngress) Descriptor() ([]byte, []int) {
	return file_prodvana_environment_clusters_proto_rawDescGZIP(), []int{16, 2}
}

func (x *ClusterConfig_ALBIngress) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ClusterConfig_ALBIngress) GetIngressClass() string {
	if x != nil {
		return x.IngressClass
	}
	return ""
}

func (x *ClusterConfig_ALBIngress) GetDefaultBalancerAttributes() []string {
	if x != nil {
		return x.DefaultBalancerAttributes
	}
	return nil
}

type ClusterConfig_ArgoRollouts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// deprecated
	Templates []*ClusterConfig_ArgoRollouts_AnalysisTemplate `protobuf:"bytes,2,rep,name=templates,proto3" json:"templates,omitempty"`
}

func (x *ClusterConfig_ArgoRollouts) Reset() {
	*x = ClusterConfig_ArgoRollouts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_environment_clusters_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterConfig_ArgoRollouts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterConfig_ArgoRollouts) ProtoMessage() {}

func (x *ClusterConfig_ArgoRollouts) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_environment_clusters_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterConfig_ArgoRollouts.ProtoReflect.Descriptor instead.
func (*ClusterConfig_ArgoRollouts) Descriptor() ([]byte, []int) {
	return file_prodvana_environment_clusters_proto_rawDescGZIP(), []int{16, 3}
}

func (x *ClusterConfig_ArgoRollouts) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ClusterConfig_ArgoRollouts) GetTemplates() []*ClusterConfig_ArgoRollouts_AnalysisTemplate {
	if x != nil {
		return x.Templates
	}
	return nil
}

type ClusterConfig_GKEIngress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Enables container native load balancing, allowing GCP LBs to target k8s pods directly.
	// See: https://cloud.google.com/kubernetes-engine/docs/how-to/container-native-load-balancing
	ContainerNative bool `protobuf:"varint,2,opt,name=container_native,json=containerNative,proto3" json:"container_native,omitempty"`
}

func (x *ClusterConfig_GKEIngress) Reset() {
	*x = ClusterConfig_GKEIngress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_environment_clusters_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterConfig_GKEIngress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterConfig_GKEIngress) ProtoMessage() {}

func (x *ClusterConfig_GKEIngress) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_environment_clusters_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterConfig_GKEIngress.ProtoReflect.Descriptor instead.
func (*ClusterConfig_GKEIngress) Descriptor() ([]byte, []int) {
	return file_prodvana_environment_clusters_proto_rawDescGZIP(), []int{16, 4}
}

func (x *ClusterConfig_GKEIngress) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ClusterConfig_GKEIngress) GetContainerNative() bool {
	if x != nil {
		return x.ContainerNative
	}
	return false
}

// deprecated
type ClusterConfig_ArgoRollouts_AnalysisTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// template argument name to prodvana value to inject
	ArgMapping map[string]ClusterConfig_ArgoRollouts_AnalysisTemplate_ArgValue `protobuf:"bytes,2,rep,name=arg_mapping,json=argMapping,proto3" json:"arg_mapping,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=prodvana.environment.ClusterConfig_ArgoRollouts_AnalysisTemplate_ArgValue"`
}

func (x *ClusterConfig_ArgoRollouts_AnalysisTemplate) Reset() {
	*x = ClusterConfig_ArgoRollouts_AnalysisTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_environment_clusters_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterConfig_ArgoRollouts_AnalysisTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterConfig_ArgoRollouts_AnalysisTemplate) ProtoMessage() {}

func (x *ClusterConfig_ArgoRollouts_AnalysisTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_environment_clusters_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterConfig_ArgoRollouts_AnalysisTemplate.ProtoReflect.Descriptor instead.
func (*ClusterConfig_ArgoRollouts_AnalysisTemplate) Descriptor() ([]byte, []int) {
	return file_prodvana_environment_clusters_proto_rawDescGZIP(), []int{16, 3, 0}
}

func (x *ClusterConfig_ArgoRollouts_AnalysisTemplate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClusterConfig_ArgoRollouts_AnalysisTemplate) GetArgMapping() map[string]ClusterConfig_ArgoRollouts_AnalysisTemplate_ArgValue {
	if x != nil {
		return x.ArgMapping
	}
	return nil
}

var File_prodvana_environment_clusters_proto protoreflect.FileDescriptor

var file_prodvana_environment_clusters_proto_rawDesc = []byte{
	0x0a, 0x23, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e,
	0x76, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e,
	0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x74, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x76, 0x61, 0x6e, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x70, 0x72, 0x6f, 0x64,
	0x76, 0x61, 0x6e, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28,
	0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x66, 0x65, 0x74,
	0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61,
	0x6e, 0x61, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x2f, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x73, 0x2f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x87, 0x05, 0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74,
	0x68, 0x12, 0x3d, 0x0a, 0x03, 0x65, 0x63, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74,
	0x68, 0x2e, 0x45, 0x43, 0x53, 0x41, 0x75, 0x74, 0x68, 0x48, 0x00, 0x52, 0x03, 0x65, 0x63, 0x73,
	0x12, 0x3d, 0x0a, 0x03, 0x6b, 0x38, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68,
	0x2e, 0x4b, 0x38, 0x73, 0x41, 0x75, 0x74, 0x68, 0x48, 0x00, 0x52, 0x03, 0x6b, 0x38, 0x73, 0x1a,
	0xa8, 0x01, 0x0a, 0x07, 0x45, 0x43, 0x53, 0x41, 0x75, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x72, 0x6f, 0x6c, 0x65,
	0x5f, 0x61, 0x72, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x73, 0x73, 0x75,
	0x6d, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x72, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x72, 0x6e, 0x1a, 0xd6, 0x01, 0x0a, 0x07, 0x4b,
	0x38, 0x73, 0x41, 0x75, 0x74, 0x68, 0x12, 0x54, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x65, 0x6e, 0x76, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x76, 0x61, 0x6e, 0x61, 0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x2e, 0x4b, 0x38, 0x73,
	0x41, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x76, 0x12, 0x38, 0x0a, 0x18,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x6c, 0x79,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x1a, 0x3b, 0x0a, 0x0d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x45,
	0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08,
	0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x4a,
	0x04, 0x08, 0x07, 0x10, 0x08, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x61, 0x5f, 0x63,
	0x65, 0x72, 0x74, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0e, 0x6b, 0x38, 0x73,
	0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x22, 0xcb, 0x02, 0x0a, 0x07,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x04, 0x61, 0x75,
	0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74,
	0x68, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x21, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x54, 0x0a, 0x18, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x68, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65,
	0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4a, 0x04, 0x08, 0x03, 0x10,
	0x04, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x22, 0xf9, 0x01, 0x0a, 0x11, 0x46, 0x61,
	0x6b, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x6c, 0x0a, 0x11, 0x63, 0x72, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x46, 0x61, 0x6b, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x43, 0x72, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x52, 0x10, 0x63, 0x72, 0x61,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x76, 0x0a,
	0x17, 0x43, 0x72, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x67, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6d, 0x64,
	0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6d,
	0x64, 0x52, 0x65, 0x67, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x5f, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0xc2, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x48, 0x0a, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0xfa, 0x42, 0x05, 0xaa, 0x01, 0x02, 0x2a,
	0x00, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x46, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0xaa, 0x01, 0x02, 0x2a, 0x00, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x61,
	0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d,
	0x61, 0x78, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x22, 0xf1, 0x05, 0x0a, 0x15, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x12, 0x45, 0x0a, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x76, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52,
	0x0a, 0x74, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x57, 0x0a, 0x11, 0x6b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e,
	0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x48, 0x00, 0x52, 0x10, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x3e, 0x0a, 0x0d, 0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x70, 0x6f, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x56, 0x0a, 0x1a, 0x73, 0x74, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x17, 0x73, 0x74, 0x65, 0x61, 0x64, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x50, 0x6f, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x33, 0x0a, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x12, 0x44, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61,
	0x6e, 0x61, 0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52,
	0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x72,
	0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x6f, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x2e, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x27, 0xfa, 0x42, 0x24, 0x9a,
	0x01, 0x21, 0x18, 0x01, 0x22, 0x1d, 0x72, 0x1b, 0x32, 0x19, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41,
	0x2d, 0x5a, 0x5f, 0x5d, 0x2b, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f,
	0x5d, 0x2a, 0x24, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x46, 0x0a, 0x0a, 0x66, 0x65, 0x74, 0x63,
	0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x66, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65,
	0x1a, 0x58, 0x0a, 0x08, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x36,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x12, 0x0a, 0x0b, 0x65, 0x78,
	0x65, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0xee,
	0x04, 0x0a, 0x17, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x45, 0x0a, 0x0b, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x57, 0x0a, 0x11, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x10, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3e, 0x0a, 0x0d, 0x70, 0x6f,
	0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x70, 0x6f,
	0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x44, 0x0a, 0x0c, 0x72, 0x65,
	0x74, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x71, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x65,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x45, 0x6e, 0x76,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x27, 0xfa, 0x42, 0x24, 0x9a, 0x01, 0x21, 0x18, 0x01, 0x22,
	0x1d, 0x72, 0x1b, 0x32, 0x19, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5f, 0x5d, 0x2b,
	0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x5d, 0x2a, 0x24, 0x52, 0x03,
	0x65, 0x6e, 0x76, 0x12, 0x4c, 0x0a, 0x24, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x6e, 0x6c, 0x79,
	0x5f, 0x64, 0x6f, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f,
	0x70, 0x76, 0x6e, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1e, 0x74, 0x65, 0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x44, 0x6f, 0x4e, 0x6f, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x50, 0x76, 0x6e, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x1a, 0x58, 0x0a, 0x08, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x12, 0x0a, 0x0b, 0x65,
	0x78, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22,
	0xf8, 0x04, 0x0a, 0x15, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x45, 0x0a, 0x0b, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x57, 0x0a, 0x11, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x10, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x6f,
	0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x27, 0xfa, 0x42, 0x24, 0x9a, 0x01, 0x21, 0x18, 0x01, 0x22, 0x1d, 0x72, 0x1b, 0x32,
	0x19, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5f, 0x5d, 0x2b, 0x5b, 0x61, 0x2d, 0x7a,
	0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x5d, 0x2a, 0x24, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12,
	0x44, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61,
	0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x74,
	0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x74, 0x72, 0x79, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x12, 0x72, 0x65, 0x74, 0x72, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x78,
	0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x63,
	0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x1a, 0x58, 0x0a, 0x08, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x36,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x12, 0x0a, 0x0b, 0x65, 0x78,
	0x65, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x4a, 0x04,
	0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x22, 0xc8, 0x05, 0x0a, 0x16, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4b, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x12, 0x41, 0x0a, 0x05, 0x66, 0x65, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x05,
	0x66, 0x65, 0x74, 0x63, 0x68, 0x12, 0x43, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x48, 0x0a, 0x08, 0x67, 0x65,
	0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x07, 0x67, 0x65, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5a, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x92, 0x01, 0x07, 0x22, 0x05, 0x8a,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x58, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61,
	0x6e, 0x61, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x2e, 0x52, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x42, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x5d, 0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x67, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x08, 0xfa, 0x42, 0x05, 0xaa, 0x01, 0x02, 0x2a, 0x00, 0x52, 0x16, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x61, 0x63, 0x65, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0x92, 0x05, 0x0a, 0x18, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c,
	0x65, 0x64, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x12, 0x65, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x69, 0x6c, 0x65, 0x64, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x45, 0x78, 0x65,
	0x63, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x56, 0x0a, 0x11, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61,
	0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x10, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e,
	0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x1a, 0xf0, 0x01,
	0x0a, 0x1c, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x45, 0x78, 0x65, 0x63, 0x12, 0x45,
	0x0a, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x57, 0x0a, 0x11, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x10, 0x6b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x12,
	0x0a, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x03, 0xf8,
	0x42, 0x01, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04,
	0x08, 0x05, 0x10, 0x06, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08,
	0x1a, 0x58, 0x0a, 0x08, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x36,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2d, 0x0a, 0x10, 0x49, 0x61,
	0x63, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x19,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x22, 0x9a, 0x08, 0x0a, 0x15, 0x54, 0x65,
	0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x58, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x2e, 0x52,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x0c, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x46, 0x0a,
	0x03, 0x65, 0x6e, 0x76, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x54, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x75, 0x6e, 0x6e, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x32, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e,
	0x61, 0x2e, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x52, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x07, 0x70, 0x72, 0x65,
	0x5f, 0x72, 0x75, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x49, 0x61, 0x63, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x52, 0x06, 0x70, 0x72, 0x65, 0x52, 0x75, 0x6e, 0x12, 0x3e, 0x0a, 0x0d, 0x70, 0x6f,
	0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x70, 0x6f,
	0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x56, 0x0a, 0x1a, 0x73, 0x74,
	0x65, 0x61, 0x64, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x6c, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x17, 0x73, 0x74, 0x65, 0x61, 0x64,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x41, 0x0a, 0x1d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x5d, 0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x08, 0xfa, 0x42, 0x05, 0xaa, 0x01, 0x02, 0x2a, 0x00, 0x52, 0x16, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x61, 0x63, 0x65, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x12, 0x4f, 0x0a, 0x12, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65,
	0x74, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x10, 0x66, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x4f, 0x0a, 0x12, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x72,
	0x65, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x74, 0x72, 0x79,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x36, 0x0a, 0x17, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x64, 0x72, 0x69, 0x66, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x44, 0x72, 0x69, 0x66, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53,
	0x0a, 0x0e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e,
	0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x58, 0x0a, 0x08,
	0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x76, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x85, 0x01, 0x0a, 0x12, 0x47, 0x4b, 0x45, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x63,
	0x0a, 0x0f, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x3c, 0x0a, 0x03, 0x67, 0x6b, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x4b, 0x45, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x03, 0x67, 0x6b, 0x65, 0x42,
	0x12, 0x0a, 0x10, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xb6, 0x05, 0x0a, 0x0c, 0x41, 0x77, 0x73, 0x45, 0x63, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x58, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x2e,
	0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x0c, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x57,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x77, 0x73, 0x45, 0x63, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x72, 0x0a, 0x1d, 0x69, 0x6e, 0x68, 0x65, 0x72,
	0x69, 0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x76, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x77, 0x73, 0x45, 0x63, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x49, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x48, 0x00,
	0x52, 0x19, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x46, 0x72, 0x6f,
	0x6d, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x76, 0x12, 0x1f, 0x0a, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0b,
	0x65, 0x63, 0x73, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x65, 0x63, 0x73, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x1a, 0xaa, 0x01, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x4b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x11, 0x61, 0x77, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x61, 0x77, 0x73, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x69, 0x0a, 0x15, 0x61, 0x77, 0x73, 0x5f,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61,
	0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x12, 0x61, 0x77, 0x73, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x4b, 0x65, 0x79, 0x1a, 0x3d, 0x0a, 0x0b, 0x49, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x52, 0x6f,
	0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6b, 0x38, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x6b, 0x38, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x12, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x03,
	0x10, 0x04, 0x52, 0x11, 0x61, 0x77, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x69, 0x64, 0x52, 0x15, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x22, 0xb4, 0x02, 0x0a,
	0x14, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x75, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x58, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x6a, 0x0a, 0x14, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x8a, 0x01, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1f,
	0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x42,
	0x12, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x03,
	0xf8, 0x42, 0x01, 0x22, 0xd7, 0x01, 0x0a, 0x09, 0x46, 0x6c, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x58, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x2e, 0x52, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x5c, 0x0a, 0x0d, 0x66,
	0x6c, 0x79, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x66, 0x6c,
	0x79, 0x41, 0x70, 0x69, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x12, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0xa6, 0x15,
	0x0a, 0x0d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x08, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61,
	0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x63,
	0x6f, 0x73, 0x74, 0x52, 0x08, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x45, 0x0a,
	0x07, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x52, 0x07, 0x64, 0x61, 0x74,
	0x61, 0x64, 0x6f, 0x67, 0x12, 0x4f, 0x0a, 0x0b, 0x61, 0x6c, 0x62, 0x5f, 0x69, 0x6e, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x76, 0x61, 0x6e, 0x61, 0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41,
	0x4c, 0x42, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0a, 0x61, 0x6c, 0x62, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x55, 0x0a, 0x0d, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x72, 0x6f,
	0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x41, 0x72, 0x67, 0x6f, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x73, 0x52, 0x0c,
	0x61, 0x72, 0x67, 0x6f, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x73, 0x12, 0x4f, 0x0a, 0x0b,
	0x67, 0x6b, 0x65, 0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x4b, 0x45, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x0a, 0x67, 0x6b, 0x65, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x67, 0x0a,
	0x18, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x67, 0x6b,
	0x65, 0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x4b, 0x45, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x15, 0x73, 0x65, 0x6c, 0x66, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x47, 0x6b, 0x65, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x58, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x12, 0x61, 0x0a, 0x19, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x17, 0x64, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x6a, 0x0a, 0x1e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x1b, 0x75, 0x73, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x3d, 0x0a, 0x04, 0x66, 0x61, 0x6b, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x61, 0x6b, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x04, 0x66, 0x61, 0x6b, 0x65, 0x12, 0x4c,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48,
	0x00, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x06,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x06, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x12, 0x58, 0x0a, 0x10, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72,
	0x6d, 0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x52,
	0x75, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0f, 0x74,
	0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x52,
	0x0a, 0x0d, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61,
	0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x65, 0x72,
	0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x52, 0x75, 0x6e, 0x6e,
	0x65, 0x72, 0x12, 0x3d, 0x0a, 0x07, 0x61, 0x77, 0x73, 0x5f, 0x65, 0x63, 0x73, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x77, 0x73, 0x45, 0x63,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x06, 0x61, 0x77, 0x73, 0x45, 0x63,
	0x73, 0x12, 0x56, 0x0a, 0x10, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x75,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x75, 0x6e, 0x12, 0x33, 0x0a, 0x03, 0x66, 0x6c, 0x79,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e,
	0x61, 0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x6c,
	0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x03, 0x66, 0x6c, 0x79, 0x12, 0x38,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x4f, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x6f,
	0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x6f, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x61, 0x75, 0x74,
	0x6f, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x1a, 0x6d, 0x0a, 0x08, 0x4b, 0x75, 0x62,
	0x65, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x2d, 0x0a, 0x12, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6b, 0x75, 0x62,
	0x65, 0x63, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x1a, 0x97, 0x01, 0x0a, 0x07, 0x44, 0x61, 0x74,
	0x61, 0x64, 0x6f, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2b,
	0x0a, 0x11, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x64,
	0x6f, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x61,
	0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70,
	0x69, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x1a, 0x94, 0x01, 0x0a, 0x0a, 0x41, 0x4c, 0x42, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x0d, 0x69,
	0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x69, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x3e, 0x0a, 0x1b, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x5f, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x19,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0xed, 0x03, 0x0a, 0x0c, 0x41, 0x72,
	0x67, 0x6f, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x5f, 0x0a, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61,
	0x6e, 0x61, 0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x72, 0x67,
	0x6f, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x09, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x1a, 0xe1, 0x02, 0x0a, 0x10, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x72,
	0x0a, 0x0b, 0x61, 0x72, 0x67, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x72, 0x67, 0x6f, 0x52, 0x6f, 0x6c,
	0x6c, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x72, 0x67, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x72, 0x67, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x1a, 0x89, 0x01, 0x0a, 0x0f, 0x41, 0x72, 0x67, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x60, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61,
	0x6e, 0x61, 0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x72, 0x67,
	0x6f, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x72, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x39,
	0x0a, 0x08, 0x41, 0x72, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x02, 0x1a, 0x51, 0x0a, 0x0a, 0x47, 0x4b, 0x45,
	0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x22, 0x54, 0x0a, 0x0d,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x4b,
	0x53, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x4b, 0x45, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03,
	0x41, 0x4b, 0x53, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x4e, 0x50, 0x52, 0x45, 0x4d, 0x10,
	0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44,
	0x10, 0x05, 0x42, 0x0f, 0x0a, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a,
	0x04, 0x08, 0x05, 0x10, 0x06, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x67, 0x65, 0x72, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x69, 0x73, 0x74, 0x69, 0x6f, 0x52, 0x0f, 0x61, 0x77, 0x73, 0x5f, 0x61, 0x6c, 0x62, 0x5f, 0x69,
	0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2a, 0x9a, 0x01, 0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4b, 0x38, 0x53, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03,
	0x45, 0x43, 0x53, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x41, 0x4b, 0x45, 0x10, 0x03, 0x12,
	0x0d, 0x0a, 0x09, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x14,
	0x0a, 0x10, 0x54, 0x45, 0x52, 0x52, 0x41, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x52, 0x55, 0x4e, 0x4e,
	0x45, 0x52, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x55, 0x4c, 0x55, 0x4d, 0x49, 0x5f, 0x52,
	0x55, 0x4e, 0x4e, 0x45, 0x52, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x57, 0x53, 0x5f, 0x45,
	0x43, 0x53, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x43,
	0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x52, 0x55, 0x4e, 0x10, 0x08, 0x12, 0x07, 0x0a, 0x03, 0x46, 0x4c,
	0x59, 0x10, 0x09, 0x2a, 0x81, 0x01, 0x0a, 0x0d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x49, 0x43,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x45, 0x52, 0x52, 0x41, 0x46, 0x4f, 0x52, 0x4d, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x55, 0x4c, 0x55, 0x4d, 0x49, 0x10, 0x02, 0x12, 0x15, 0x0a,
	0x11, 0x41, 0x57, 0x53, 0x5f, 0x45, 0x43, 0x53, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49,
	0x4f, 0x4e, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x43,
	0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x52, 0x55, 0x4e, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49,
	0x4f, 0x4e, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x4c, 0x59, 0x5f, 0x45, 0x58, 0x54, 0x45,
	0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x42, 0x50, 0x5a, 0x4e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x70,
	0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x67,
	0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_prodvana_environment_clusters_proto_rawDescOnce sync.Once
	file_prodvana_environment_clusters_proto_rawDescData = file_prodvana_environment_clusters_proto_rawDesc
)

func file_prodvana_environment_clusters_proto_rawDescGZIP() []byte {
	file_prodvana_environment_clusters_proto_rawDescOnce.Do(func() {
		file_prodvana_environment_clusters_proto_rawDescData = protoimpl.X.CompressGZIP(file_prodvana_environment_clusters_proto_rawDescData)
	})
	return file_prodvana_environment_clusters_proto_rawDescData
}

var file_prodvana_environment_clusters_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_prodvana_environment_clusters_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_prodvana_environment_clusters_proto_goTypes = []interface{}{
	(ClusterType)(0),                 // 0: prodvana.environment.ClusterType
	(ExtensionType)(0),               // 1: prodvana.environment.ExtensionType
	(ClusterConfig_CloudProvider)(0), // 2: prodvana.environment.ClusterConfig.CloudProvider
	(ClusterConfig_ArgoRollouts_AnalysisTemplate_ArgValue)(0), // 3: prodvana.environment.ClusterConfig.ArgoRollouts.AnalysisTemplate.ArgValue
	(*ClusterAuth)(nil),                               // 4: prodvana.environment.ClusterAuth
	(*Cluster)(nil),                                   // 5: prodvana.environment.Cluster
	(*FakeClusterConfig)(nil),                         // 6: prodvana.environment.FakeClusterConfig
	(*RetryPolicy)(nil),                               // 7: prodvana.environment.RetryPolicy
	(*ExtensionFetchCommand)(nil),                     // 8: prodvana.environment.ExtensionFetchCommand
	(*ExtensionGetInfoCommand)(nil),                   // 9: prodvana.environment.ExtensionGetInfoCommand
	(*ExtensionApplyCommand)(nil),                     // 10: prodvana.environment.ExtensionApplyCommand
	(*ExtensionClusterConfig)(nil),                    // 11: prodvana.environment.ExtensionClusterConfig
	(*CompiledExtensionCommand)(nil),                  // 12: prodvana.environment.CompiledExtensionCommand
	(*IacRunnerCommand)(nil),                          // 13: prodvana.environment.IacRunnerCommand
	(*TerraformRunnerConfig)(nil),                     // 14: prodvana.environment.TerraformRunnerConfig
	(*GKEClusterMetadata)(nil),                        // 15: prodvana.environment.GKEClusterMetadata
	(*ClusterMetadata)(nil),                           // 16: prodvana.environment.ClusterMetadata
	(*AwsEcsConfig)(nil),                              // 17: prodvana.environment.AwsEcsConfig
	(*GoogleCloudRunConfig)(nil),                      // 18: prodvana.environment.GoogleCloudRunConfig
	(*FlyConfig)(nil),                                 // 19: prodvana.environment.FlyConfig
	(*ClusterConfig)(nil),                             // 20: prodvana.environment.ClusterConfig
	(*ClusterAuth_ECSAuth)(nil),                       // 21: prodvana.environment.ClusterAuth.ECSAuth
	(*ClusterAuth_K8SAuth)(nil),                       // 22: prodvana.environment.ClusterAuth.K8sAuth
	nil,                                               // 23: prodvana.environment.ClusterAuth.K8sAuth.AgentEnvEntry
	(*FakeClusterConfig_CrashingProgramPatterns)(nil), // 24: prodvana.environment.FakeClusterConfig.CrashingProgramPatterns
	nil, // 25: prodvana.environment.ExtensionFetchCommand.EnvEntry
	nil, // 26: prodvana.environment.ExtensionGetInfoCommand.EnvEntry
	nil, // 27: prodvana.environment.ExtensionApplyCommand.EnvEntry
	(*CompiledExtensionCommand_CompiledExtensionCommandExec)(nil), // 28: prodvana.environment.CompiledExtensionCommand.CompiledExtensionCommandExec
	nil,                                // 29: prodvana.environment.CompiledExtensionCommand.EnvEntry
	nil,                                // 30: prodvana.environment.TerraformRunnerConfig.EnvEntry
	(*AwsEcsConfig_AccessKey)(nil),     // 31: prodvana.environment.AwsEcsConfig.AccessKey
	(*AwsEcsConfig_InheritRole)(nil),   // 32: prodvana.environment.AwsEcsConfig.InheritRole
	(*ClusterConfig_Kubecost)(nil),     // 33: prodvana.environment.ClusterConfig.Kubecost
	(*ClusterConfig_Datadog)(nil),      // 34: prodvana.environment.ClusterConfig.Datadog
	(*ClusterConfig_ALBIngress)(nil),   // 35: prodvana.environment.ClusterConfig.ALBIngress
	(*ClusterConfig_ArgoRollouts)(nil), // 36: prodvana.environment.ClusterConfig.ArgoRollouts
	(*ClusterConfig_GKEIngress)(nil),   // 37: prodvana.environment.ClusterConfig.GKEIngress
	(*ClusterConfig_ArgoRollouts_AnalysisTemplate)(nil), // 38: prodvana.environment.ClusterConfig.ArgoRollouts.AnalysisTemplate
	nil,                                        // 39: prodvana.environment.ClusterConfig.ArgoRollouts.AnalysisTemplate.ArgMappingEntry
	(*timestamppb.Timestamp)(nil),              // 40: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),                // 41: google.protobuf.Duration
	(*common_config.TaskConfig)(nil),           // 42: prodvana.common_config.TaskConfig
	(*common_config.KubernetesConfig)(nil),     // 43: prodvana.common_config.KubernetesConfig
	(extensions.FetchMode)(0),                  // 44: prodvana.runtimes.extensions.FetchMode
	(*common_config.ParameterDefinition)(nil),  // 45: prodvana.common_config.ParameterDefinition
	(*runtimes.RuntimeExecutionConfig)(nil),    // 46: prodvana.runtimes.RuntimeExecutionConfig
	(*volumes.Volume)(nil),                     // 47: prodvana.volumes.Volume
	(*common_config.ResourceRequirements)(nil), // 48: prodvana.common_config.ResourceRequirements
	(*common_config.SecretReferenceValue)(nil), // 49: prodvana.common_config.SecretReferenceValue
	(*labels.LabelDefinition)(nil),             // 50: prodvana.labels.LabelDefinition
	(*common_config.AutoRollbackConfig)(nil),   // 51: prodvana.common_config.AutoRollbackConfig
	(*common_config.EnvValue)(nil),             // 52: prodvana.common_config.EnvValue
}
var file_prodvana_environment_clusters_proto_depIdxs = []int32{
	21, // 0: prodvana.environment.ClusterAuth.ecs:type_name -> prodvana.environment.ClusterAuth.ECSAuth
	22, // 1: prodvana.environment.ClusterAuth.k8s:type_name -> prodvana.environment.ClusterAuth.K8sAuth
	4,  // 2: prodvana.environment.Cluster.auth:type_name -> prodvana.environment.ClusterAuth
	0,  // 3: prodvana.environment.Cluster.type:type_name -> prodvana.environment.ClusterType
	20, // 4: prodvana.environment.Cluster.config:type_name -> prodvana.environment.ClusterConfig
	40, // 5: prodvana.environment.Cluster.last_heartbeat_timestamp:type_name -> google.protobuf.Timestamp
	24, // 6: prodvana.environment.FakeClusterConfig.crashing_programs:type_name -> prodvana.environment.FakeClusterConfig.CrashingProgramPatterns
	41, // 7: prodvana.environment.RetryPolicy.base_interval:type_name -> google.protobuf.Duration
	41, // 8: prodvana.environment.RetryPolicy.max_interval:type_name -> google.protobuf.Duration
	42, // 9: prodvana.environment.ExtensionFetchCommand.task_config:type_name -> prodvana.common_config.TaskConfig
	43, // 10: prodvana.environment.ExtensionFetchCommand.kubernetes_config:type_name -> prodvana.common_config.KubernetesConfig
	41, // 11: prodvana.environment.ExtensionFetchCommand.poll_interval:type_name -> google.protobuf.Duration
	41, // 12: prodvana.environment.ExtensionFetchCommand.steady_state_poll_interval:type_name -> google.protobuf.Duration
	41, // 13: prodvana.environment.ExtensionFetchCommand.timeout:type_name -> google.protobuf.Duration
	7,  // 14: prodvana.environment.ExtensionFetchCommand.retry_policy:type_name -> prodvana.environment.RetryPolicy
	25, // 15: prodvana.environment.ExtensionFetchCommand.env:type_name -> prodvana.environment.ExtensionFetchCommand.EnvEntry
	44, // 16: prodvana.environment.ExtensionFetchCommand.fetch_mode:type_name -> prodvana.runtimes.extensions.FetchMode
	42, // 17: prodvana.environment.ExtensionGetInfoCommand.task_config:type_name -> prodvana.common_config.TaskConfig
	43, // 18: prodvana.environment.ExtensionGetInfoCommand.kubernetes_config:type_name -> prodvana.common_config.KubernetesConfig
	41, // 19: prodvana.environment.ExtensionGetInfoCommand.poll_interval:type_name -> google.protobuf.Duration
	7,  // 20: prodvana.environment.ExtensionGetInfoCommand.retry_policy:type_name -> prodvana.environment.RetryPolicy
	26, // 21: prodvana.environment.ExtensionGetInfoCommand.env:type_name -> prodvana.environment.ExtensionGetInfoCommand.EnvEntry
	42, // 22: prodvana.environment.ExtensionApplyCommand.task_config:type_name -> prodvana.common_config.TaskConfig
	43, // 23: prodvana.environment.ExtensionApplyCommand.kubernetes_config:type_name -> prodvana.common_config.KubernetesConfig
	41, // 24: prodvana.environment.ExtensionApplyCommand.timeout:type_name -> google.protobuf.Duration
	27, // 25: prodvana.environment.ExtensionApplyCommand.env:type_name -> prodvana.environment.ExtensionApplyCommand.EnvEntry
	7,  // 26: prodvana.environment.ExtensionApplyCommand.retry_policy:type_name -> prodvana.environment.RetryPolicy
	10, // 27: prodvana.environment.ExtensionClusterConfig.apply:type_name -> prodvana.environment.ExtensionApplyCommand
	8,  // 28: prodvana.environment.ExtensionClusterConfig.fetch:type_name -> prodvana.environment.ExtensionFetchCommand
	9,  // 29: prodvana.environment.ExtensionClusterConfig.debug:type_name -> prodvana.environment.ExtensionGetInfoCommand
	9,  // 30: prodvana.environment.ExtensionClusterConfig.get_info:type_name -> prodvana.environment.ExtensionGetInfoCommand
	45, // 31: prodvana.environment.ExtensionClusterConfig.parameters:type_name -> prodvana.common_config.ParameterDefinition
	46, // 32: prodvana.environment.ExtensionClusterConfig.proxy_runtime:type_name -> prodvana.runtimes.RuntimeExecutionConfig
	1,  // 33: prodvana.environment.ExtensionClusterConfig.type:type_name -> prodvana.environment.ExtensionType
	41, // 34: prodvana.environment.ExtensionClusterConfig.convergence_grace_period:type_name -> google.protobuf.Duration
	28, // 35: prodvana.environment.CompiledExtensionCommand.command:type_name -> prodvana.environment.CompiledExtensionCommand.CompiledExtensionCommandExec
	46, // 36: prodvana.environment.CompiledExtensionCommand.runtime_execution:type_name -> prodvana.runtimes.RuntimeExecutionConfig
	29, // 37: prodvana.environment.CompiledExtensionCommand.env:type_name -> prodvana.environment.CompiledExtensionCommand.EnvEntry
	46, // 38: prodvana.environment.TerraformRunnerConfig.proxy_runtime:type_name -> prodvana.runtimes.RuntimeExecutionConfig
	30, // 39: prodvana.environment.TerraformRunnerConfig.env:type_name -> prodvana.environment.TerraformRunnerConfig.EnvEntry
	47, // 40: prodvana.environment.TerraformRunnerConfig.volumes:type_name -> prodvana.volumes.Volume
	13, // 41: prodvana.environment.TerraformRunnerConfig.pre_run:type_name -> prodvana.environment.IacRunnerCommand
	41, // 42: prodvana.environment.TerraformRunnerConfig.poll_interval:type_name -> google.protobuf.Duration
	41, // 43: prodvana.environment.TerraformRunnerConfig.steady_state_poll_interval:type_name -> google.protobuf.Duration
	41, // 44: prodvana.environment.TerraformRunnerConfig.convergence_grace_period:type_name -> google.protobuf.Duration
	7,  // 45: prodvana.environment.TerraformRunnerConfig.fetch_retry_policy:type_name -> prodvana.environment.RetryPolicy
	7,  // 46: prodvana.environment.TerraformRunnerConfig.apply_retry_policy:type_name -> prodvana.environment.RetryPolicy
	48, // 47: prodvana.environment.TerraformRunnerConfig.task_resources:type_name -> prodvana.common_config.ResourceRequirements
	15, // 48: prodvana.environment.ClusterMetadata.gke:type_name -> prodvana.environment.GKEClusterMetadata
	46, // 49: prodvana.environment.AwsEcsConfig.proxy_runtime:type_name -> prodvana.runtimes.RuntimeExecutionConfig
	31, // 50: prodvana.environment.AwsEcsConfig.access_key:type_name -> prodvana.environment.AwsEcsConfig.AccessKey
	32, // 51: prodvana.environment.AwsEcsConfig.inherit_role_from_runtime_env:type_name -> prodvana.environment.AwsEcsConfig.InheritRole
	46, // 52: prodvana.environment.GoogleCloudRunConfig.proxy_runtime:type_name -> prodvana.runtimes.RuntimeExecutionConfig
	49, // 53: prodvana.environment.GoogleCloudRunConfig.service_account_json:type_name -> prodvana.common_config.SecretReferenceValue
	46, // 54: prodvana.environment.FlyConfig.proxy_runtime:type_name -> prodvana.runtimes.RuntimeExecutionConfig
	49, // 55: prodvana.environment.FlyConfig.fly_api_token:type_name -> prodvana.common_config.SecretReferenceValue
	33, // 56: prodvana.environment.ClusterConfig.kubecost:type_name -> prodvana.environment.ClusterConfig.Kubecost
	34, // 57: prodvana.environment.ClusterConfig.datadog:type_name -> prodvana.environment.ClusterConfig.Datadog
	35, // 58: prodvana.environment.ClusterConfig.alb_ingress:type_name -> prodvana.environment.ClusterConfig.ALBIngress
	36, // 59: prodvana.environment.ClusterConfig.argo_rollouts:type_name -> prodvana.environment.ClusterConfig.ArgoRollouts
	37, // 60: prodvana.environment.ClusterConfig.gke_ingress:type_name -> prodvana.environment.ClusterConfig.GKEIngress
	37, // 61: prodvana.environment.ClusterConfig.self_managed_gke_ingress:type_name -> prodvana.environment.ClusterConfig.GKEIngress
	2,  // 62: prodvana.environment.ClusterConfig.cloud_provider:type_name -> prodvana.environment.ClusterConfig.CloudProvider
	16, // 63: prodvana.environment.ClusterConfig.detected_cluster_metadata:type_name -> prodvana.environment.ClusterMetadata
	16, // 64: prodvana.environment.ClusterConfig.user_supplied_cluster_metadata:type_name -> prodvana.environment.ClusterMetadata
	6,  // 65: prodvana.environment.ClusterConfig.fake:type_name -> prodvana.environment.FakeClusterConfig
	11, // 66: prodvana.environment.ClusterConfig.extension:type_name -> prodvana.environment.ExtensionClusterConfig
	11, // 67: prodvana.environment.ClusterConfig.custom:type_name -> prodvana.environment.ExtensionClusterConfig
	14, // 68: prodvana.environment.ClusterConfig.terraform_runner:type_name -> prodvana.environment.TerraformRunnerConfig
	14, // 69: prodvana.environment.ClusterConfig.pulumi_runner:type_name -> prodvana.environment.TerraformRunnerConfig
	17, // 70: prodvana.environment.ClusterConfig.aws_ecs:type_name -> prodvana.environment.AwsEcsConfig
	18, // 71: prodvana.environment.ClusterConfig.google_cloud_run:type_name -> prodvana.environment.GoogleCloudRunConfig
	19, // 72: prodvana.environment.ClusterConfig.fly:type_name -> prodvana.environment.FlyConfig
	50, // 73: prodvana.environment.ClusterConfig.labels:type_name -> prodvana.labels.LabelDefinition
	51, // 74: prodvana.environment.ClusterConfig.auto_rollback:type_name -> prodvana.common_config.AutoRollbackConfig
	23, // 75: prodvana.environment.ClusterAuth.K8sAuth.agent_env:type_name -> prodvana.environment.ClusterAuth.K8sAuth.AgentEnvEntry
	52, // 76: prodvana.environment.ExtensionFetchCommand.EnvEntry.value:type_name -> prodvana.common_config.EnvValue
	52, // 77: prodvana.environment.ExtensionGetInfoCommand.EnvEntry.value:type_name -> prodvana.common_config.EnvValue
	52, // 78: prodvana.environment.ExtensionApplyCommand.EnvEntry.value:type_name -> prodvana.common_config.EnvValue
	42, // 79: prodvana.environment.CompiledExtensionCommand.CompiledExtensionCommandExec.task_config:type_name -> prodvana.common_config.TaskConfig
	43, // 80: prodvana.environment.CompiledExtensionCommand.CompiledExtensionCommandExec.kubernetes_config:type_name -> prodvana.common_config.KubernetesConfig
	52, // 81: prodvana.environment.CompiledExtensionCommand.EnvEntry.value:type_name -> prodvana.common_config.EnvValue
	52, // 82: prodvana.environment.TerraformRunnerConfig.EnvEntry.value:type_name -> prodvana.common_config.EnvValue
	49, // 83: prodvana.environment.AwsEcsConfig.AccessKey.aws_secret_access_key:type_name -> prodvana.common_config.SecretReferenceValue
	38, // 84: prodvana.environment.ClusterConfig.ArgoRollouts.templates:type_name -> prodvana.environment.ClusterConfig.ArgoRollouts.AnalysisTemplate
	39, // 85: prodvana.environment.ClusterConfig.ArgoRollouts.AnalysisTemplate.arg_mapping:type_name -> prodvana.environment.ClusterConfig.ArgoRollouts.AnalysisTemplate.ArgMappingEntry
	3,  // 86: prodvana.environment.ClusterConfig.ArgoRollouts.AnalysisTemplate.ArgMappingEntry.value:type_name -> prodvana.environment.ClusterConfig.ArgoRollouts.AnalysisTemplate.ArgValue
	87, // [87:87] is the sub-list for method output_type
	87, // [87:87] is the sub-list for method input_type
	87, // [87:87] is the sub-list for extension type_name
	87, // [87:87] is the sub-list for extension extendee
	0,  // [0:87] is the sub-list for field type_name
}

func init() { file_prodvana_environment_clusters_proto_init() }
func file_prodvana_environment_clusters_proto_init() {
	if File_prodvana_environment_clusters_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_prodvana_environment_clusters_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterAuth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_environment_clusters_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_environment_clusters_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FakeClusterConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_environment_clusters_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetryPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_environment_clusters_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtensionFetchCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_environment_clusters_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtensionGetInfoCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_environment_clusters_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtensionApplyCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_environment_clusters_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtensionClusterConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_environment_clusters_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompiledExtensionCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_environment_clusters_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IacRunnerCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_environment_clusters_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerraformRunnerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_environment_clusters_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GKEClusterMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_environment_clusters_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_environment_clusters_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AwsEcsConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_environment_clusters_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudRunConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_environment_clusters_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlyConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_environment_clusters_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_environment_clusters_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterAuth_ECSAuth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_environment_clusters_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterAuth_K8SAuth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_environment_clusters_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FakeClusterConfig_CrashingProgramPatterns); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_environment_clusters_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompiledExtensionCommand_CompiledExtensionCommandExec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_environment_clusters_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AwsEcsConfig_AccessKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_environment_clusters_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AwsEcsConfig_InheritRole); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_environment_clusters_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterConfig_Kubecost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_environment_clusters_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterConfig_Datadog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_environment_clusters_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterConfig_ALBIngress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_environment_clusters_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterConfig_ArgoRollouts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_environment_clusters_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterConfig_GKEIngress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_environment_clusters_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterConfig_ArgoRollouts_AnalysisTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_prodvana_environment_clusters_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ClusterAuth_Ecs)(nil),
		(*ClusterAuth_K8S)(nil),
	}
	file_prodvana_environment_clusters_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*ExtensionFetchCommand_TaskConfig)(nil),
		(*ExtensionFetchCommand_KubernetesConfig)(nil),
	}
	file_prodvana_environment_clusters_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*ExtensionGetInfoCommand_TaskConfig)(nil),
		(*ExtensionGetInfoCommand_KubernetesConfig)(nil),
	}
	file_prodvana_environment_clusters_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*ExtensionApplyCommand_TaskConfig)(nil),
		(*ExtensionApplyCommand_KubernetesConfig)(nil),
	}
	file_prodvana_environment_clusters_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*ClusterMetadata_Gke)(nil),
	}
	file_prodvana_environment_clusters_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*AwsEcsConfig_AccessKey_)(nil),
		(*AwsEcsConfig_InheritRoleFromRuntimeEnv)(nil),
	}
	file_prodvana_environment_clusters_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*GoogleCloudRunConfig_ServiceAccountJson)(nil),
	}
	file_prodvana_environment_clusters_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*FlyConfig_FlyApiToken)(nil),
	}
	file_prodvana_environment_clusters_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*ClusterConfig_Fake)(nil),
		(*ClusterConfig_Extension)(nil),
		(*ClusterConfig_Custom)(nil),
		(*ClusterConfig_TerraformRunner)(nil),
		(*ClusterConfig_PulumiRunner)(nil),
		(*ClusterConfig_AwsEcs)(nil),
		(*ClusterConfig_GoogleCloudRun)(nil),
		(*ClusterConfig_Fly)(nil),
	}
	file_prodvana_environment_clusters_proto_msgTypes[24].OneofWrappers = []interface{}{
		(*CompiledExtensionCommand_CompiledExtensionCommandExec_TaskConfig)(nil),
		(*CompiledExtensionCommand_CompiledExtensionCommandExec_KubernetesConfig)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_prodvana_environment_clusters_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_prodvana_environment_clusters_proto_goTypes,
		DependencyIndexes: file_prodvana_environment_clusters_proto_depIdxs,
		EnumInfos:         file_prodvana_environment_clusters_proto_enumTypes,
		MessageInfos:      file_prodvana_environment_clusters_proto_msgTypes,
	}.Build()
	File_prodvana_environment_clusters_proto = out.File
	file_prodvana_environment_clusters_proto_rawDesc = nil
	file_prodvana_environment_clusters_proto_goTypes = nil
	file_prodvana_environment_clusters_proto_depIdxs = nil
}
