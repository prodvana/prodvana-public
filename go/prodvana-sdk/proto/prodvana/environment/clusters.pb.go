// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.1
// 	protoc        v3.21.10
// source: prodvana/environment/clusters.proto

package environment

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	common_config "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/common_config"
	runtimes "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/runtimes"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ClusterType int32

const (
	ClusterType_UNKNOWN        ClusterType = 0
	ClusterType_K8S            ClusterType = 1
	ClusterType_ECS            ClusterType = 2
	ClusterType_FAKE           ClusterType = 3
	ClusterType_GENERIC_DOCKER ClusterType = 4
)

// Enum value maps for ClusterType.
var (
	ClusterType_name = map[int32]string{
		0: "UNKNOWN",
		1: "K8S",
		2: "ECS",
		3: "FAKE",
		4: "GENERIC_DOCKER",
	}
	ClusterType_value = map[string]int32{
		"UNKNOWN":        0,
		"K8S":            1,
		"ECS":            2,
		"FAKE":           3,
		"GENERIC_DOCKER": 4,
	}
)

func (x ClusterType) Enum() *ClusterType {
	p := new(ClusterType)
	*p = x
	return p
}

func (x ClusterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterType) Descriptor() protoreflect.EnumDescriptor {
	return file_prodvana_environment_clusters_proto_enumTypes[0].Descriptor()
}

func (ClusterType) Type() protoreflect.EnumType {
	return &file_prodvana_environment_clusters_proto_enumTypes[0]
}

func (x ClusterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterType.Descriptor instead.
func (ClusterType) EnumDescriptor() ([]byte, []int) {
	return file_prodvana_environment_clusters_proto_rawDescGZIP(), []int{0}
}

// Origin specifies where the cluster came from.
type Cluster_Origin int32

const (
	Cluster_UNKNOWN  Cluster_Origin = 0
	Cluster_PRODVANA Cluster_Origin = 1 // our infra created it
	Cluster_EXTERNAL Cluster_Origin = 2 // created externally and added
)

// Enum value maps for Cluster_Origin.
var (
	Cluster_Origin_name = map[int32]string{
		0: "UNKNOWN",
		1: "PRODVANA",
		2: "EXTERNAL",
	}
	Cluster_Origin_value = map[string]int32{
		"UNKNOWN":  0,
		"PRODVANA": 1,
		"EXTERNAL": 2,
	}
)

func (x Cluster_Origin) Enum() *Cluster_Origin {
	p := new(Cluster_Origin)
	*p = x
	return p
}

func (x Cluster_Origin) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Cluster_Origin) Descriptor() protoreflect.EnumDescriptor {
	return file_prodvana_environment_clusters_proto_enumTypes[1].Descriptor()
}

func (Cluster_Origin) Type() protoreflect.EnumType {
	return &file_prodvana_environment_clusters_proto_enumTypes[1]
}

func (x Cluster_Origin) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Cluster_Origin.Descriptor instead.
func (Cluster_Origin) EnumDescriptor() ([]byte, []int) {
	return file_prodvana_environment_clusters_proto_rawDescGZIP(), []int{1, 0}
}

type ClusterConfig_CloudProvider int32

const (
	ClusterConfig_UNKNOWN     ClusterConfig_CloudProvider = 0
	ClusterConfig_EKS         ClusterConfig_CloudProvider = 1
	ClusterConfig_GKE         ClusterConfig_CloudProvider = 2
	ClusterConfig_AKS         ClusterConfig_CloudProvider = 3
	ClusterConfig_ONPREM      ClusterConfig_CloudProvider = 4
	ClusterConfig_OTHER_CLOUD ClusterConfig_CloudProvider = 5
)

// Enum value maps for ClusterConfig_CloudProvider.
var (
	ClusterConfig_CloudProvider_name = map[int32]string{
		0: "UNKNOWN",
		1: "EKS",
		2: "GKE",
		3: "AKS",
		4: "ONPREM",
		5: "OTHER_CLOUD",
	}
	ClusterConfig_CloudProvider_value = map[string]int32{
		"UNKNOWN":     0,
		"EKS":         1,
		"GKE":         2,
		"AKS":         3,
		"ONPREM":      4,
		"OTHER_CLOUD": 5,
	}
)

func (x ClusterConfig_CloudProvider) Enum() *ClusterConfig_CloudProvider {
	p := new(ClusterConfig_CloudProvider)
	*p = x
	return p
}

func (x ClusterConfig_CloudProvider) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterConfig_CloudProvider) Descriptor() protoreflect.EnumDescriptor {
	return file_prodvana_environment_clusters_proto_enumTypes[2].Descriptor()
}

func (ClusterConfig_CloudProvider) Type() protoreflect.EnumType {
	return &file_prodvana_environment_clusters_proto_enumTypes[2]
}

func (x ClusterConfig_CloudProvider) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterConfig_CloudProvider.Descriptor instead.
func (ClusterConfig_CloudProvider) EnumDescriptor() ([]byte, []int) {
	return file_prodvana_environment_clusters_proto_rawDescGZIP(), []int{6, 0}
}

type ClusterConfig_ArgoRollouts_AnalysisTemplate_ArgValue int32

const (
	ClusterConfig_ArgoRollouts_AnalysisTemplate_UNKNOWN         ClusterConfig_ArgoRollouts_AnalysisTemplate_ArgValue = 0
	ClusterConfig_ArgoRollouts_AnalysisTemplate_SERVICE         ClusterConfig_ArgoRollouts_AnalysisTemplate_ArgValue = 1
	ClusterConfig_ArgoRollouts_AnalysisTemplate_RELEASE_CHANNEL ClusterConfig_ArgoRollouts_AnalysisTemplate_ArgValue = 2
)

// Enum value maps for ClusterConfig_ArgoRollouts_AnalysisTemplate_ArgValue.
var (
	ClusterConfig_ArgoRollouts_AnalysisTemplate_ArgValue_name = map[int32]string{
		0: "UNKNOWN",
		1: "SERVICE",
		2: "RELEASE_CHANNEL",
	}
	ClusterConfig_ArgoRollouts_AnalysisTemplate_ArgValue_value = map[string]int32{
		"UNKNOWN":         0,
		"SERVICE":         1,
		"RELEASE_CHANNEL": 2,
	}
)

func (x ClusterConfig_ArgoRollouts_AnalysisTemplate_ArgValue) Enum() *ClusterConfig_ArgoRollouts_AnalysisTemplate_ArgValue {
	p := new(ClusterConfig_ArgoRollouts_AnalysisTemplate_ArgValue)
	*p = x
	return p
}

func (x ClusterConfig_ArgoRollouts_AnalysisTemplate_ArgValue) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterConfig_ArgoRollouts_AnalysisTemplate_ArgValue) Descriptor() protoreflect.EnumDescriptor {
	return file_prodvana_environment_clusters_proto_enumTypes[3].Descriptor()
}

func (ClusterConfig_ArgoRollouts_AnalysisTemplate_ArgValue) Type() protoreflect.EnumType {
	return &file_prodvana_environment_clusters_proto_enumTypes[3]
}

func (x ClusterConfig_ArgoRollouts_AnalysisTemplate_ArgValue) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterConfig_ArgoRollouts_AnalysisTemplate_ArgValue.Descriptor instead.
func (ClusterConfig_ArgoRollouts_AnalysisTemplate_ArgValue) EnumDescriptor() ([]byte, []int) {
	return file_prodvana_environment_clusters_proto_rawDescGZIP(), []int{6, 3, 0, 0}
}

type ClusterAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoint       string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	CaCert         string `protobuf:"bytes,2,opt,name=ca_cert,json=caCert,proto3" json:"ca_cert,omitempty"`
	Token          string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	ServiceAccount string `protobuf:"bytes,4,opt,name=service_account,json=serviceAccount,proto3" json:"service_account,omitempty"`
	// Types that are assignable to AuthOneof:
	//
	//	*ClusterAuth_Ecs
	//	*ClusterAuth_GenericDocker
	//	*ClusterAuth_K8S
	AuthOneof    isClusterAuth_AuthOneof `protobuf_oneof:"auth_oneof"`
	K8SAgentAuth bool                    `protobuf:"varint,6,opt,name=k8s_agent_auth,json=k8sAgentAuth,proto3" json:"k8s_agent_auth,omitempty"`
}

func (x *ClusterAuth) Reset() {
	*x = ClusterAuth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_environment_clusters_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterAuth) ProtoMessage() {}

func (x *ClusterAuth) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_environment_clusters_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterAuth.ProtoReflect.Descriptor instead.
func (*ClusterAuth) Descriptor() ([]byte, []int) {
	return file_prodvana_environment_clusters_proto_rawDescGZIP(), []int{0}
}

func (x *ClusterAuth) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *ClusterAuth) GetCaCert() string {
	if x != nil {
		return x.CaCert
	}
	return ""
}

func (x *ClusterAuth) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ClusterAuth) GetServiceAccount() string {
	if x != nil {
		return x.ServiceAccount
	}
	return ""
}

func (m *ClusterAuth) GetAuthOneof() isClusterAuth_AuthOneof {
	if m != nil {
		return m.AuthOneof
	}
	return nil
}

func (x *ClusterAuth) GetEcs() *ClusterAuth_ECSAuth {
	if x, ok := x.GetAuthOneof().(*ClusterAuth_Ecs); ok {
		return x.Ecs
	}
	return nil
}

func (x *ClusterAuth) GetGenericDocker() *ClusterAuth_GenericDockerAuth {
	if x, ok := x.GetAuthOneof().(*ClusterAuth_GenericDocker); ok {
		return x.GenericDocker
	}
	return nil
}

func (x *ClusterAuth) GetK8S() *ClusterAuth_K8SAuth {
	if x, ok := x.GetAuthOneof().(*ClusterAuth_K8S); ok {
		return x.K8S
	}
	return nil
}

func (x *ClusterAuth) GetK8SAgentAuth() bool {
	if x != nil {
		return x.K8SAgentAuth
	}
	return false
}

type isClusterAuth_AuthOneof interface {
	isClusterAuth_AuthOneof()
}

type ClusterAuth_Ecs struct {
	Ecs *ClusterAuth_ECSAuth `protobuf:"bytes,5,opt,name=ecs,proto3,oneof"`
}

type ClusterAuth_GenericDocker struct {
	GenericDocker *ClusterAuth_GenericDockerAuth `protobuf:"bytes,7,opt,name=generic_docker,json=genericDocker,proto3,oneof"`
}

type ClusterAuth_K8S struct {
	K8S *ClusterAuth_K8SAuth `protobuf:"bytes,8,opt,name=k8s,proto3,oneof"`
}

func (*ClusterAuth_Ecs) isClusterAuth_AuthOneof() {}

func (*ClusterAuth_GenericDocker) isClusterAuth_AuthOneof() {}

func (*ClusterAuth_K8S) isClusterAuth_AuthOneof() {}

type Cluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                   string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ClusterId              string                 `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Origin                 Cluster_Origin         `protobuf:"varint,3,opt,name=origin,proto3,enum=prodvana.environment.Cluster_Origin" json:"origin,omitempty"`
	Auth                   *ClusterAuth           `protobuf:"bytes,4,opt,name=auth,proto3" json:"auth,omitempty"`
	Type                   ClusterType            `protobuf:"varint,5,opt,name=type,proto3,enum=prodvana.environment.ClusterType" json:"type,omitempty"`
	Config                 *ClusterConfig         `protobuf:"bytes,6,opt,name=config,proto3" json:"config,omitempty"`
	LastHeartbeatTimestamp *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=last_heartbeat_timestamp,json=lastHeartbeatTimestamp,proto3" json:"last_heartbeat_timestamp,omitempty"`
}

func (x *Cluster) Reset() {
	*x = Cluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_environment_clusters_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster) ProtoMessage() {}

func (x *Cluster) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_environment_clusters_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster.ProtoReflect.Descriptor instead.
func (*Cluster) Descriptor() ([]byte, []int) {
	return file_prodvana_environment_clusters_proto_rawDescGZIP(), []int{1}
}

func (x *Cluster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Cluster) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *Cluster) GetOrigin() Cluster_Origin {
	if x != nil {
		return x.Origin
	}
	return Cluster_UNKNOWN
}

func (x *Cluster) GetAuth() *ClusterAuth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *Cluster) GetType() ClusterType {
	if x != nil {
		return x.Type
	}
	return ClusterType_UNKNOWN
}

func (x *Cluster) GetConfig() *ClusterConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Cluster) GetLastHeartbeatTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.LastHeartbeatTimestamp
	}
	return nil
}

type FakeClusterConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CrashingPrograms []*FakeClusterConfig_CrashingProgramPatterns `protobuf:"bytes,1,rep,name=crashing_programs,json=crashingPrograms,proto3" json:"crashing_programs,omitempty"`
}

func (x *FakeClusterConfig) Reset() {
	*x = FakeClusterConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_environment_clusters_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FakeClusterConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FakeClusterConfig) ProtoMessage() {}

func (x *FakeClusterConfig) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_environment_clusters_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FakeClusterConfig.ProtoReflect.Descriptor instead.
func (*FakeClusterConfig) Descriptor() ([]byte, []int) {
	return file_prodvana_environment_clusters_proto_rawDescGZIP(), []int{2}
}

func (x *FakeClusterConfig) GetCrashingPrograms() []*FakeClusterConfig_CrashingProgramPatterns {
	if x != nil {
		return x.CrashingPrograms
	}
	return nil
}

type GenericDockerCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ExecConfig:
	//
	//	*GenericDockerCommand_TaskConfig
	//	*GenericDockerCommand_KubernetesConfig
	ExecConfig isGenericDockerCommand_ExecConfig `protobuf_oneof:"exec_config"`
}

func (x *GenericDockerCommand) Reset() {
	*x = GenericDockerCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_environment_clusters_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenericDockerCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericDockerCommand) ProtoMessage() {}

func (x *GenericDockerCommand) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_environment_clusters_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericDockerCommand.ProtoReflect.Descriptor instead.
func (*GenericDockerCommand) Descriptor() ([]byte, []int) {
	return file_prodvana_environment_clusters_proto_rawDescGZIP(), []int{3}
}

func (m *GenericDockerCommand) GetExecConfig() isGenericDockerCommand_ExecConfig {
	if m != nil {
		return m.ExecConfig
	}
	return nil
}

func (x *GenericDockerCommand) GetTaskConfig() *common_config.TaskConfig {
	if x, ok := x.GetExecConfig().(*GenericDockerCommand_TaskConfig); ok {
		return x.TaskConfig
	}
	return nil
}

func (x *GenericDockerCommand) GetKubernetesConfig() *common_config.KubernetesConfig {
	if x, ok := x.GetExecConfig().(*GenericDockerCommand_KubernetesConfig); ok {
		return x.KubernetesConfig
	}
	return nil
}

type isGenericDockerCommand_ExecConfig interface {
	isGenericDockerCommand_ExecConfig()
}

type GenericDockerCommand_TaskConfig struct {
	TaskConfig *common_config.TaskConfig `protobuf:"bytes,1,opt,name=task_config,json=taskConfig,proto3,oneof"`
}

type GenericDockerCommand_KubernetesConfig struct {
	KubernetesConfig *common_config.KubernetesConfig `protobuf:"bytes,2,opt,name=kubernetes_config,json=kubernetesConfig,proto3,oneof"`
}

func (*GenericDockerCommand_TaskConfig) isGenericDockerCommand_ExecConfig() {}

func (*GenericDockerCommand_KubernetesConfig) isGenericDockerCommand_ExecConfig() {}

type GenericDockerClusterConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Apply           *GenericDockerCommand                `protobuf:"bytes,1,opt,name=apply,proto3" json:"apply,omitempty"`
	GetCurrentState *GenericDockerCommand                `protobuf:"bytes,2,opt,name=get_current_state,json=getCurrentState,proto3" json:"get_current_state,omitempty"`
	Parameters      []*common_config.ParameterDefinition `protobuf:"bytes,3,rep,name=parameters,proto3" json:"parameters,omitempty"`
	ProxyRuntime    *runtimes.RuntimeExecutionConfig     `protobuf:"bytes,4,opt,name=proxy_runtime,json=proxyRuntime,proto3" json:"proxy_runtime,omitempty"`
}

func (x *GenericDockerClusterConfig) Reset() {
	*x = GenericDockerClusterConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_environment_clusters_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenericDockerClusterConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericDockerClusterConfig) ProtoMessage() {}

func (x *GenericDockerClusterConfig) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_environment_clusters_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericDockerClusterConfig.ProtoReflect.Descriptor instead.
func (*GenericDockerClusterConfig) Descriptor() ([]byte, []int) {
	return file_prodvana_environment_clusters_proto_rawDescGZIP(), []int{4}
}

func (x *GenericDockerClusterConfig) GetApply() *GenericDockerCommand {
	if x != nil {
		return x.Apply
	}
	return nil
}

func (x *GenericDockerClusterConfig) GetGetCurrentState() *GenericDockerCommand {
	if x != nil {
		return x.GetCurrentState
	}
	return nil
}

func (x *GenericDockerClusterConfig) GetParameters() []*common_config.ParameterDefinition {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *GenericDockerClusterConfig) GetProxyRuntime() *runtimes.RuntimeExecutionConfig {
	if x != nil {
		return x.ProxyRuntime
	}
	return nil
}

type CompiledGenericDockerCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NamePrefix       string                             `protobuf:"bytes,1,opt,name=name_prefix,json=namePrefix,proto3" json:"name_prefix,omitempty"`
	Command          *GenericDockerCommand              `protobuf:"bytes,2,opt,name=command,proto3" json:"command,omitempty"`
	RuntimeExecution *runtimes.RuntimeExecutionConfig   `protobuf:"bytes,3,opt,name=runtime_execution,json=runtimeExecution,proto3" json:"runtime_execution,omitempty"`
	Env              map[string]*common_config.EnvValue `protobuf:"bytes,4,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CompiledGenericDockerCommand) Reset() {
	*x = CompiledGenericDockerCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_environment_clusters_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompiledGenericDockerCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompiledGenericDockerCommand) ProtoMessage() {}

func (x *CompiledGenericDockerCommand) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_environment_clusters_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompiledGenericDockerCommand.ProtoReflect.Descriptor instead.
func (*CompiledGenericDockerCommand) Descriptor() ([]byte, []int) {
	return file_prodvana_environment_clusters_proto_rawDescGZIP(), []int{5}
}

func (x *CompiledGenericDockerCommand) GetNamePrefix() string {
	if x != nil {
		return x.NamePrefix
	}
	return ""
}

func (x *CompiledGenericDockerCommand) GetCommand() *GenericDockerCommand {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *CompiledGenericDockerCommand) GetRuntimeExecution() *runtimes.RuntimeExecutionConfig {
	if x != nil {
		return x.RuntimeExecution
	}
	return nil
}

func (x *CompiledGenericDockerCommand) GetEnv() map[string]*common_config.EnvValue {
	if x != nil {
		return x.Env
	}
	return nil
}

type ClusterConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string                      `protobuf:"bytes,14,opt,name=name,proto3" json:"name,omitempty"`
	DisableFlagger bool                        `protobuf:"varint,1,opt,name=disable_flagger,json=disableFlagger,proto3" json:"disable_flagger,omitempty"`
	DisableIstio   bool                        `protobuf:"varint,2,opt,name=disable_istio,json=disableIstio,proto3" json:"disable_istio,omitempty"`
	Kubecost       *ClusterConfig_Kubecost     `protobuf:"bytes,3,opt,name=kubecost,proto3" json:"kubecost,omitempty"`
	Datadog        *ClusterConfig_Datadog      `protobuf:"bytes,4,opt,name=datadog,proto3" json:"datadog,omitempty"`
	AlbIngress     *ClusterConfig_ALBIngress   `protobuf:"bytes,6,opt,name=alb_ingress,json=albIngress,proto3" json:"alb_ingress,omitempty"`
	ArgoRollouts   *ClusterConfig_ArgoRollouts `protobuf:"bytes,7,opt,name=argo_rollouts,json=argoRollouts,proto3" json:"argo_rollouts,omitempty"`
	GkeIngress     *ClusterConfig_GKEIngress   `protobuf:"bytes,8,opt,name=gke_ingress,json=gkeIngress,proto3" json:"gke_ingress,omitempty"`
	// Self-Managed GKE Ingress - exposes configuration options for GKE Ingress
	// but does not create an ingress object for you
	SelfManagedGkeIngress *ClusterConfig_GKEIngress   `protobuf:"bytes,11,opt,name=self_managed_gke_ingress,json=selfManagedGkeIngress,proto3" json:"self_managed_gke_ingress,omitempty"`
	CloudProvider         ClusterConfig_CloudProvider `protobuf:"varint,9,opt,name=cloud_provider,json=cloudProvider,proto3,enum=prodvana.environment.ClusterConfig_CloudProvider" json:"cloud_provider,omitempty"`
	// Types that are assignable to ClusterOneof:
	//
	//	*ClusterConfig_Fake
	//	*ClusterConfig_GenericDocker
	ClusterOneof isClusterConfig_ClusterOneof `protobuf_oneof:"cluster_oneof"`
}

func (x *ClusterConfig) Reset() {
	*x = ClusterConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_environment_clusters_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterConfig) ProtoMessage() {}

func (x *ClusterConfig) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_environment_clusters_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterConfig.ProtoReflect.Descriptor instead.
func (*ClusterConfig) Descriptor() ([]byte, []int) {
	return file_prodvana_environment_clusters_proto_rawDescGZIP(), []int{6}
}

func (x *ClusterConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClusterConfig) GetDisableFlagger() bool {
	if x != nil {
		return x.DisableFlagger
	}
	return false
}

func (x *ClusterConfig) GetDisableIstio() bool {
	if x != nil {
		return x.DisableIstio
	}
	return false
}

func (x *ClusterConfig) GetKubecost() *ClusterConfig_Kubecost {
	if x != nil {
		return x.Kubecost
	}
	return nil
}

func (x *ClusterConfig) GetDatadog() *ClusterConfig_Datadog {
	if x != nil {
		return x.Datadog
	}
	return nil
}

func (x *ClusterConfig) GetAlbIngress() *ClusterConfig_ALBIngress {
	if x != nil {
		return x.AlbIngress
	}
	return nil
}

func (x *ClusterConfig) GetArgoRollouts() *ClusterConfig_ArgoRollouts {
	if x != nil {
		return x.ArgoRollouts
	}
	return nil
}

func (x *ClusterConfig) GetGkeIngress() *ClusterConfig_GKEIngress {
	if x != nil {
		return x.GkeIngress
	}
	return nil
}

func (x *ClusterConfig) GetSelfManagedGkeIngress() *ClusterConfig_GKEIngress {
	if x != nil {
		return x.SelfManagedGkeIngress
	}
	return nil
}

func (x *ClusterConfig) GetCloudProvider() ClusterConfig_CloudProvider {
	if x != nil {
		return x.CloudProvider
	}
	return ClusterConfig_UNKNOWN
}

func (m *ClusterConfig) GetClusterOneof() isClusterConfig_ClusterOneof {
	if m != nil {
		return m.ClusterOneof
	}
	return nil
}

func (x *ClusterConfig) GetFake() *FakeClusterConfig {
	if x, ok := x.GetClusterOneof().(*ClusterConfig_Fake); ok {
		return x.Fake
	}
	return nil
}

func (x *ClusterConfig) GetGenericDocker() *GenericDockerClusterConfig {
	if x, ok := x.GetClusterOneof().(*ClusterConfig_GenericDocker); ok {
		return x.GenericDocker
	}
	return nil
}

type isClusterConfig_ClusterOneof interface {
	isClusterConfig_ClusterOneof()
}

type ClusterConfig_Fake struct {
	// only used for fake runtimes
	Fake *FakeClusterConfig `protobuf:"bytes,10,opt,name=fake,proto3,oneof"`
}

type ClusterConfig_GenericDocker struct {
	GenericDocker *GenericDockerClusterConfig `protobuf:"bytes,12,opt,name=generic_docker,json=genericDocker,proto3,oneof"`
}

func (*ClusterConfig_Fake) isClusterConfig_ClusterOneof() {}

func (*ClusterConfig_GenericDocker) isClusterConfig_ClusterOneof() {}

type ClusterAuth_ECSAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessKey     string `protobuf:"bytes,1,opt,name=access_key,json=accessKey,proto3" json:"access_key,omitempty"`
	SecretKey     string `protobuf:"bytes,2,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	Region        string `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	AssumeRoleArn string `protobuf:"bytes,4,opt,name=assume_role_arn,json=assumeRoleArn,proto3" json:"assume_role_arn,omitempty"`
	ClusterArn    string `protobuf:"bytes,5,opt,name=cluster_arn,json=clusterArn,proto3" json:"cluster_arn,omitempty"`
}

func (x *ClusterAuth_ECSAuth) Reset() {
	*x = ClusterAuth_ECSAuth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_environment_clusters_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterAuth_ECSAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterAuth_ECSAuth) ProtoMessage() {}

func (x *ClusterAuth_ECSAuth) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_environment_clusters_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterAuth_ECSAuth.ProtoReflect.Descriptor instead.
func (*ClusterAuth_ECSAuth) Descriptor() ([]byte, []int) {
	return file_prodvana_environment_clusters_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ClusterAuth_ECSAuth) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *ClusterAuth_ECSAuth) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *ClusterAuth_ECSAuth) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ClusterAuth_ECSAuth) GetAssumeRoleArn() string {
	if x != nil {
		return x.AssumeRoleArn
	}
	return ""
}

func (x *ClusterAuth_ECSAuth) GetClusterArn() string {
	if x != nil {
		return x.ClusterArn
	}
	return ""
}

type ClusterAuth_GenericDockerAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ClusterAuth_GenericDockerAuth) Reset() {
	*x = ClusterAuth_GenericDockerAuth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_environment_clusters_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterAuth_GenericDockerAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterAuth_GenericDockerAuth) ProtoMessage() {}

func (x *ClusterAuth_GenericDockerAuth) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_environment_clusters_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterAuth_GenericDockerAuth.ProtoReflect.Descriptor instead.
func (*ClusterAuth_GenericDockerAuth) Descriptor() ([]byte, []int) {
	return file_prodvana_environment_clusters_proto_rawDescGZIP(), []int{0, 1}
}

type ClusterAuth_K8SAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentEnv map[string]string `protobuf:"bytes,1,rep,name=agent_env,json=agentEnv,proto3" json:"agent_env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ClusterAuth_K8SAuth) Reset() {
	*x = ClusterAuth_K8SAuth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_environment_clusters_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterAuth_K8SAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterAuth_K8SAuth) ProtoMessage() {}

func (x *ClusterAuth_K8SAuth) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_environment_clusters_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterAuth_K8SAuth.ProtoReflect.Descriptor instead.
func (*ClusterAuth_K8SAuth) Descriptor() ([]byte, []int) {
	return file_prodvana_environment_clusters_proto_rawDescGZIP(), []int{0, 2}
}

func (x *ClusterAuth_K8SAuth) GetAgentEnv() map[string]string {
	if x != nil {
		return x.AgentEnv
	}
	return nil
}

type FakeClusterConfig_CrashingProgramPatterns struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageRegex string `protobuf:"bytes,1,opt,name=image_regex,json=imageRegex,proto3" json:"image_regex,omitempty"`
	CmdRegex   string `protobuf:"bytes,2,opt,name=cmd_regex,json=cmdRegex,proto3" json:"cmd_regex,omitempty"`
	LogOutput  string `protobuf:"bytes,3,opt,name=log_output,json=logOutput,proto3" json:"log_output,omitempty"`
}

func (x *FakeClusterConfig_CrashingProgramPatterns) Reset() {
	*x = FakeClusterConfig_CrashingProgramPatterns{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_environment_clusters_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FakeClusterConfig_CrashingProgramPatterns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FakeClusterConfig_CrashingProgramPatterns) ProtoMessage() {}

func (x *FakeClusterConfig_CrashingProgramPatterns) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_environment_clusters_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FakeClusterConfig_CrashingProgramPatterns.ProtoReflect.Descriptor instead.
func (*FakeClusterConfig_CrashingProgramPatterns) Descriptor() ([]byte, []int) {
	return file_prodvana_environment_clusters_proto_rawDescGZIP(), []int{2, 0}
}

func (x *FakeClusterConfig_CrashingProgramPatterns) GetImageRegex() string {
	if x != nil {
		return x.ImageRegex
	}
	return ""
}

func (x *FakeClusterConfig_CrashingProgramPatterns) GetCmdRegex() string {
	if x != nil {
		return x.CmdRegex
	}
	return ""
}

func (x *FakeClusterConfig_CrashingProgramPatterns) GetLogOutput() string {
	if x != nil {
		return x.LogOutput
	}
	return ""
}

type ClusterConfig_Kubecost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled           bool   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Managed           bool   `protobuf:"varint,2,opt,name=managed,proto3" json:"managed,omitempty"`
	KubecostNamespace string `protobuf:"bytes,3,opt,name=kubecost_namespace,json=kubecostNamespace,proto3" json:"kubecost_namespace,omitempty"`
}

func (x *ClusterConfig_Kubecost) Reset() {
	*x = ClusterConfig_Kubecost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_environment_clusters_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterConfig_Kubecost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterConfig_Kubecost) ProtoMessage() {}

func (x *ClusterConfig_Kubecost) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_environment_clusters_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterConfig_Kubecost.ProtoReflect.Descriptor instead.
func (*ClusterConfig_Kubecost) Descriptor() ([]byte, []int) {
	return file_prodvana_environment_clusters_proto_rawDescGZIP(), []int{6, 0}
}

func (x *ClusterConfig_Kubecost) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ClusterConfig_Kubecost) GetManaged() bool {
	if x != nil {
		return x.Managed
	}
	return false
}

func (x *ClusterConfig_Kubecost) GetKubecostNamespace() string {
	if x != nil {
		return x.KubecostNamespace
	}
	return ""
}

type ClusterConfig_Datadog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled          bool   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Managed          bool   `protobuf:"varint,2,opt,name=managed,proto3" json:"managed,omitempty"`
	DatadogNamespace string `protobuf:"bytes,3,opt,name=datadog_namespace,json=datadogNamespace,proto3" json:"datadog_namespace,omitempty"`
	ApiKey           string `protobuf:"bytes,4,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	Site             string `protobuf:"bytes,5,opt,name=site,proto3" json:"site,omitempty"`
}

func (x *ClusterConfig_Datadog) Reset() {
	*x = ClusterConfig_Datadog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_environment_clusters_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterConfig_Datadog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterConfig_Datadog) ProtoMessage() {}

func (x *ClusterConfig_Datadog) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_environment_clusters_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterConfig_Datadog.ProtoReflect.Descriptor instead.
func (*ClusterConfig_Datadog) Descriptor() ([]byte, []int) {
	return file_prodvana_environment_clusters_proto_rawDescGZIP(), []int{6, 1}
}

func (x *ClusterConfig_Datadog) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ClusterConfig_Datadog) GetManaged() bool {
	if x != nil {
		return x.Managed
	}
	return false
}

func (x *ClusterConfig_Datadog) GetDatadogNamespace() string {
	if x != nil {
		return x.DatadogNamespace
	}
	return ""
}

func (x *ClusterConfig_Datadog) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *ClusterConfig_Datadog) GetSite() string {
	if x != nil {
		return x.Site
	}
	return ""
}

type ClusterConfig_ALBIngress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled      bool   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	IngressClass string `protobuf:"bytes,2,opt,name=ingress_class,json=ingressClass,proto3" json:"ingress_class,omitempty"`
	// Attributes from https://docs.aws.amazon.com/elasticloadbalancing/latest/application/application-load-balancers.html#load-balancer-attributes
	// that are added to all Ingresses/LBs created in this runtime.
	DefaultBalancerAttributes []string `protobuf:"bytes,3,rep,name=default_balancer_attributes,json=defaultBalancerAttributes,proto3" json:"default_balancer_attributes,omitempty"`
}

func (x *ClusterConfig_ALBIngress) Reset() {
	*x = ClusterConfig_ALBIngress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_environment_clusters_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterConfig_ALBIngress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterConfig_ALBIngress) ProtoMessage() {}

func (x *ClusterConfig_ALBIngress) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_environment_clusters_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterConfig_ALBIngress.ProtoReflect.Descriptor instead.
func (*ClusterConfig_ALBIngress) Descriptor() ([]byte, []int) {
	return file_prodvana_environment_clusters_proto_rawDescGZIP(), []int{6, 2}
}

func (x *ClusterConfig_ALBIngress) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ClusterConfig_ALBIngress) GetIngressClass() string {
	if x != nil {
		return x.IngressClass
	}
	return ""
}

func (x *ClusterConfig_ALBIngress) GetDefaultBalancerAttributes() []string {
	if x != nil {
		return x.DefaultBalancerAttributes
	}
	return nil
}

type ClusterConfig_ArgoRollouts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled   bool                                           `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Templates []*ClusterConfig_ArgoRollouts_AnalysisTemplate `protobuf:"bytes,2,rep,name=templates,proto3" json:"templates,omitempty"`
}

func (x *ClusterConfig_ArgoRollouts) Reset() {
	*x = ClusterConfig_ArgoRollouts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_environment_clusters_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterConfig_ArgoRollouts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterConfig_ArgoRollouts) ProtoMessage() {}

func (x *ClusterConfig_ArgoRollouts) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_environment_clusters_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterConfig_ArgoRollouts.ProtoReflect.Descriptor instead.
func (*ClusterConfig_ArgoRollouts) Descriptor() ([]byte, []int) {
	return file_prodvana_environment_clusters_proto_rawDescGZIP(), []int{6, 3}
}

func (x *ClusterConfig_ArgoRollouts) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ClusterConfig_ArgoRollouts) GetTemplates() []*ClusterConfig_ArgoRollouts_AnalysisTemplate {
	if x != nil {
		return x.Templates
	}
	return nil
}

type ClusterConfig_GKEIngress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Enables container native load balancing, allowing GCP LBs to target k8s pods directly.
	// See: https://cloud.google.com/kubernetes-engine/docs/how-to/container-native-load-balancing
	ContainerNative bool `protobuf:"varint,2,opt,name=container_native,json=containerNative,proto3" json:"container_native,omitempty"`
}

func (x *ClusterConfig_GKEIngress) Reset() {
	*x = ClusterConfig_GKEIngress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_environment_clusters_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterConfig_GKEIngress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterConfig_GKEIngress) ProtoMessage() {}

func (x *ClusterConfig_GKEIngress) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_environment_clusters_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterConfig_GKEIngress.ProtoReflect.Descriptor instead.
func (*ClusterConfig_GKEIngress) Descriptor() ([]byte, []int) {
	return file_prodvana_environment_clusters_proto_rawDescGZIP(), []int{6, 4}
}

func (x *ClusterConfig_GKEIngress) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ClusterConfig_GKEIngress) GetContainerNative() bool {
	if x != nil {
		return x.ContainerNative
	}
	return false
}

type ClusterConfig_ArgoRollouts_AnalysisTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// template argument name to prodvana value to inject
	ArgMapping map[string]ClusterConfig_ArgoRollouts_AnalysisTemplate_ArgValue `protobuf:"bytes,2,rep,name=arg_mapping,json=argMapping,proto3" json:"arg_mapping,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=prodvana.environment.ClusterConfig_ArgoRollouts_AnalysisTemplate_ArgValue"`
}

func (x *ClusterConfig_ArgoRollouts_AnalysisTemplate) Reset() {
	*x = ClusterConfig_ArgoRollouts_AnalysisTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_environment_clusters_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterConfig_ArgoRollouts_AnalysisTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterConfig_ArgoRollouts_AnalysisTemplate) ProtoMessage() {}

func (x *ClusterConfig_ArgoRollouts_AnalysisTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_environment_clusters_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterConfig_ArgoRollouts_AnalysisTemplate.ProtoReflect.Descriptor instead.
func (*ClusterConfig_ArgoRollouts_AnalysisTemplate) Descriptor() ([]byte, []int) {
	return file_prodvana_environment_clusters_proto_rawDescGZIP(), []int{6, 3, 0}
}

func (x *ClusterConfig_ArgoRollouts_AnalysisTemplate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClusterConfig_ArgoRollouts_AnalysisTemplate) GetArgMapping() map[string]ClusterConfig_ArgoRollouts_AnalysisTemplate_ArgValue {
	if x != nil {
		return x.ArgMapping
	}
	return nil
}

var File_prodvana_environment_clusters_proto protoreflect.FileDescriptor

var file_prodvana_environment_clusters_proto_rawDesc = []byte{
	0x0a, 0x23, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e,
	0x76, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e,
	0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x74, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x76, 0x61, 0x6e, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x70, 0x72, 0x6f, 0x64,
	0x76, 0x61, 0x6e, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf0, 0x05, 0x0a,
	0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x5f, 0x63,
	0x65, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x43, 0x65, 0x72,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x3d, 0x0a, 0x03, 0x65, 0x63, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68,
	0x2e, 0x45, 0x43, 0x53, 0x41, 0x75, 0x74, 0x68, 0x48, 0x00, 0x52, 0x03, 0x65, 0x63, 0x73, 0x12,
	0x5c, 0x0a, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x64, 0x6f, 0x63, 0x6b, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61,
	0x6e, 0x61, 0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x69, 0x63, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x48, 0x00, 0x52, 0x0d,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x3d, 0x0a,
	0x03, 0x6b, 0x38, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x2e, 0x4b, 0x38,
	0x73, 0x41, 0x75, 0x74, 0x68, 0x48, 0x00, 0x52, 0x03, 0x6b, 0x38, 0x73, 0x12, 0x24, 0x0a, 0x0e,
	0x6b, 0x38, 0x73, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6b, 0x38, 0x73, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x75,
	0x74, 0x68, 0x1a, 0xa8, 0x01, 0x0a, 0x07, 0x45, 0x43, 0x53, 0x41, 0x75, 0x74, 0x68, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x72,
	0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61,
	0x73, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x72, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x72, 0x6e, 0x1a, 0x13, 0x0a,
	0x11, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x41, 0x75,
	0x74, 0x68, 0x1a, 0x9c, 0x01, 0x0a, 0x07, 0x4b, 0x38, 0x73, 0x41, 0x75, 0x74, 0x68, 0x12, 0x54,
	0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x76, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x41, 0x75, 0x74, 0x68, 0x2e, 0x4b, 0x38, 0x73, 0x41, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x45, 0x6e, 0x76, 0x1a, 0x3b, 0x0a, 0x0d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x76,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x22,
	0xae, 0x03, 0x0a, 0x07, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3c,
	0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x35, 0x0a, 0x04,
	0x61, 0x75, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61,
	0x75, 0x74, 0x68, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x54, 0x0a, 0x18, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74,
	0x62, 0x65, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x31, 0x0a,
	0x06, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x4f, 0x44, 0x56, 0x41, 0x4e, 0x41,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x02,
	0x22, 0xf9, 0x01, 0x0a, 0x11, 0x46, 0x61, 0x6b, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6c, 0x0a, 0x11, 0x63, 0x72, 0x61, 0x73, 0x68, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x61, 0x6b, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x72, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x73, 0x52, 0x10, 0x63, 0x72, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x73, 0x1a, 0x76, 0x0a, 0x17, 0x43, 0x72, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x67, 0x65, 0x78,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6d, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6d, 0x64, 0x52, 0x65, 0x67, 0x65, 0x78, 0x12, 0x1d, 0x0a,
	0x0a, 0x6c, 0x6f, 0x67, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0xca, 0x01, 0x0a,
	0x14, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x45, 0x0a, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00,
	0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x57, 0x0a, 0x11,
	0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61,
	0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x48, 0x00, 0x52, 0x10, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x12, 0x0a, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0xf6, 0x02, 0x0a, 0x1a, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x69, 0x63, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4a, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x6c,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61,
	0x6e, 0x61, 0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x12, 0x56, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x44, 0x6f,
	0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x0f, 0x67, 0x65, 0x74,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x5a, 0x0a, 0x0a,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0xfa,
	0x42, 0x0a, 0x92, 0x01, 0x07, 0x22, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x58, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x22, 0x86, 0x03, 0x0a, 0x1c, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x12, 0x44, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61,
	0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x69, 0x63, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x56, 0x0a, 0x11, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61,
	0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x10, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3b, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x2e, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x65, 0x6e,
	0x76, 0x1a, 0x58, 0x0a, 0x08, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb9, 0x0f, 0x0a, 0x0d,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x67, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x67, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x73, 0x74, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x12,
	0x48, 0x0a, 0x08, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x73, 0x74, 0x52,
	0x08, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x07, 0x64, 0x61, 0x74,
	0x61, 0x64, 0x6f, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67,
	0x12, 0x4f, 0x0a, 0x0b, 0x61, 0x6c, 0x62, 0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61,
	0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x4c, 0x42, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0a, 0x61, 0x6c, 0x62, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x55, 0x0a, 0x0d, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75,
	0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x72,
	0x67, 0x6f, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x73, 0x52, 0x0c, 0x61, 0x72, 0x67, 0x6f,
	0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x73, 0x12, 0x4f, 0x0a, 0x0b, 0x67, 0x6b, 0x65, 0x5f,
	0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x47, 0x4b, 0x45, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0a, 0x67,
	0x6b, 0x65, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x67, 0x0a, 0x18, 0x73, 0x65, 0x6c,
	0x66, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x67, 0x6b, 0x65, 0x5f, 0x69, 0x6e,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x47, 0x4b, 0x45, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x15, 0x73, 0x65, 0x6c,
	0x66, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x47, 0x6b, 0x65, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x58, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x0d, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x04,
	0x66, 0x61, 0x6b, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x46, 0x61, 0x6b, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x04, 0x66, 0x61, 0x6b, 0x65, 0x12, 0x59, 0x0a, 0x0e, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x69, 0x63, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0d, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63,
	0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x1a, 0x6d, 0x0a, 0x08, 0x4b, 0x75, 0x62, 0x65, 0x63, 0x6f,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f,
	0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x1a, 0x97, 0x01, 0x0a, 0x07, 0x44, 0x61, 0x74, 0x61, 0x64, 0x6f,
	0x67, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x74, 0x65, 0x1a,
	0x94, 0x01, 0x0a, 0x0a, 0x41, 0x4c, 0x42, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x0d, 0x69, 0x6e, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x3e, 0x0a, 0x1b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x19, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0xed, 0x03, 0x0a, 0x0c, 0x41, 0x72, 0x67, 0x6f, 0x52,
	0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x5f, 0x0a, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x72, 0x67, 0x6f, 0x52, 0x6f,
	0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x1a, 0xe1, 0x02, 0x0a, 0x10, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x72, 0x0a, 0x0b, 0x61,
	0x72, 0x67, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x51, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x72, 0x67, 0x6f, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75,
	0x74, 0x73, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x2e, 0x41, 0x72, 0x67, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x72, 0x67, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x1a,
	0x89, 0x01, 0x0a, 0x0f, 0x41, 0x72, 0x67, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x60, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x4a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x72, 0x67, 0x6f, 0x52, 0x6f,
	0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x72, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x39, 0x0a, 0x08, 0x41,
	0x72, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10,
	0x01, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x02, 0x1a, 0x51, 0x0a, 0x0a, 0x47, 0x4b, 0x45, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x29,
	0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x22, 0x54, 0x0a, 0x0d, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x4b, 0x53, 0x10, 0x01,
	0x12, 0x07, 0x0a, 0x03, 0x47, 0x4b, 0x45, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4b, 0x53,
	0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x4e, 0x50, 0x52, 0x45, 0x4d, 0x10, 0x04, 0x12, 0x0f,
	0x0a, 0x0b, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x10, 0x05, 0x42,
	0x0f, 0x0a, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x52, 0x0f, 0x61, 0x77, 0x73, 0x5f, 0x61, 0x6c, 0x62, 0x5f,
	0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2a, 0x4a, 0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4b, 0x38, 0x53, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03,
	0x45, 0x43, 0x53, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x41, 0x4b, 0x45, 0x10, 0x03, 0x12,
	0x12, 0x0a, 0x0e, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x49, 0x43, 0x5f, 0x44, 0x4f, 0x43, 0x4b, 0x45,
	0x52, 0x10, 0x04, 0x42, 0x50, 0x5a, 0x4e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_prodvana_environment_clusters_proto_rawDescOnce sync.Once
	file_prodvana_environment_clusters_proto_rawDescData = file_prodvana_environment_clusters_proto_rawDesc
)

func file_prodvana_environment_clusters_proto_rawDescGZIP() []byte {
	file_prodvana_environment_clusters_proto_rawDescOnce.Do(func() {
		file_prodvana_environment_clusters_proto_rawDescData = protoimpl.X.CompressGZIP(file_prodvana_environment_clusters_proto_rawDescData)
	})
	return file_prodvana_environment_clusters_proto_rawDescData
}

var file_prodvana_environment_clusters_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_prodvana_environment_clusters_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_prodvana_environment_clusters_proto_goTypes = []interface{}{
	(ClusterType)(0),                 // 0: prodvana.environment.ClusterType
	(Cluster_Origin)(0),              // 1: prodvana.environment.Cluster.Origin
	(ClusterConfig_CloudProvider)(0), // 2: prodvana.environment.ClusterConfig.CloudProvider
	(ClusterConfig_ArgoRollouts_AnalysisTemplate_ArgValue)(0), // 3: prodvana.environment.ClusterConfig.ArgoRollouts.AnalysisTemplate.ArgValue
	(*ClusterAuth)(nil),                               // 4: prodvana.environment.ClusterAuth
	(*Cluster)(nil),                                   // 5: prodvana.environment.Cluster
	(*FakeClusterConfig)(nil),                         // 6: prodvana.environment.FakeClusterConfig
	(*GenericDockerCommand)(nil),                      // 7: prodvana.environment.GenericDockerCommand
	(*GenericDockerClusterConfig)(nil),                // 8: prodvana.environment.GenericDockerClusterConfig
	(*CompiledGenericDockerCommand)(nil),              // 9: prodvana.environment.CompiledGenericDockerCommand
	(*ClusterConfig)(nil),                             // 10: prodvana.environment.ClusterConfig
	(*ClusterAuth_ECSAuth)(nil),                       // 11: prodvana.environment.ClusterAuth.ECSAuth
	(*ClusterAuth_GenericDockerAuth)(nil),             // 12: prodvana.environment.ClusterAuth.GenericDockerAuth
	(*ClusterAuth_K8SAuth)(nil),                       // 13: prodvana.environment.ClusterAuth.K8sAuth
	nil,                                               // 14: prodvana.environment.ClusterAuth.K8sAuth.AgentEnvEntry
	(*FakeClusterConfig_CrashingProgramPatterns)(nil), // 15: prodvana.environment.FakeClusterConfig.CrashingProgramPatterns
	nil,                                                 // 16: prodvana.environment.CompiledGenericDockerCommand.EnvEntry
	(*ClusterConfig_Kubecost)(nil),                      // 17: prodvana.environment.ClusterConfig.Kubecost
	(*ClusterConfig_Datadog)(nil),                       // 18: prodvana.environment.ClusterConfig.Datadog
	(*ClusterConfig_ALBIngress)(nil),                    // 19: prodvana.environment.ClusterConfig.ALBIngress
	(*ClusterConfig_ArgoRollouts)(nil),                  // 20: prodvana.environment.ClusterConfig.ArgoRollouts
	(*ClusterConfig_GKEIngress)(nil),                    // 21: prodvana.environment.ClusterConfig.GKEIngress
	(*ClusterConfig_ArgoRollouts_AnalysisTemplate)(nil), // 22: prodvana.environment.ClusterConfig.ArgoRollouts.AnalysisTemplate
	nil,                                       // 23: prodvana.environment.ClusterConfig.ArgoRollouts.AnalysisTemplate.ArgMappingEntry
	(*timestamppb.Timestamp)(nil),             // 24: google.protobuf.Timestamp
	(*common_config.TaskConfig)(nil),          // 25: prodvana.common_config.TaskConfig
	(*common_config.KubernetesConfig)(nil),    // 26: prodvana.common_config.KubernetesConfig
	(*common_config.ParameterDefinition)(nil), // 27: prodvana.common_config.ParameterDefinition
	(*runtimes.RuntimeExecutionConfig)(nil),   // 28: prodvana.runtimes.RuntimeExecutionConfig
	(*common_config.EnvValue)(nil),            // 29: prodvana.common_config.EnvValue
}
var file_prodvana_environment_clusters_proto_depIdxs = []int32{
	11, // 0: prodvana.environment.ClusterAuth.ecs:type_name -> prodvana.environment.ClusterAuth.ECSAuth
	12, // 1: prodvana.environment.ClusterAuth.generic_docker:type_name -> prodvana.environment.ClusterAuth.GenericDockerAuth
	13, // 2: prodvana.environment.ClusterAuth.k8s:type_name -> prodvana.environment.ClusterAuth.K8sAuth
	1,  // 3: prodvana.environment.Cluster.origin:type_name -> prodvana.environment.Cluster.Origin
	4,  // 4: prodvana.environment.Cluster.auth:type_name -> prodvana.environment.ClusterAuth
	0,  // 5: prodvana.environment.Cluster.type:type_name -> prodvana.environment.ClusterType
	10, // 6: prodvana.environment.Cluster.config:type_name -> prodvana.environment.ClusterConfig
	24, // 7: prodvana.environment.Cluster.last_heartbeat_timestamp:type_name -> google.protobuf.Timestamp
	15, // 8: prodvana.environment.FakeClusterConfig.crashing_programs:type_name -> prodvana.environment.FakeClusterConfig.CrashingProgramPatterns
	25, // 9: prodvana.environment.GenericDockerCommand.task_config:type_name -> prodvana.common_config.TaskConfig
	26, // 10: prodvana.environment.GenericDockerCommand.kubernetes_config:type_name -> prodvana.common_config.KubernetesConfig
	7,  // 11: prodvana.environment.GenericDockerClusterConfig.apply:type_name -> prodvana.environment.GenericDockerCommand
	7,  // 12: prodvana.environment.GenericDockerClusterConfig.get_current_state:type_name -> prodvana.environment.GenericDockerCommand
	27, // 13: prodvana.environment.GenericDockerClusterConfig.parameters:type_name -> prodvana.common_config.ParameterDefinition
	28, // 14: prodvana.environment.GenericDockerClusterConfig.proxy_runtime:type_name -> prodvana.runtimes.RuntimeExecutionConfig
	7,  // 15: prodvana.environment.CompiledGenericDockerCommand.command:type_name -> prodvana.environment.GenericDockerCommand
	28, // 16: prodvana.environment.CompiledGenericDockerCommand.runtime_execution:type_name -> prodvana.runtimes.RuntimeExecutionConfig
	16, // 17: prodvana.environment.CompiledGenericDockerCommand.env:type_name -> prodvana.environment.CompiledGenericDockerCommand.EnvEntry
	17, // 18: prodvana.environment.ClusterConfig.kubecost:type_name -> prodvana.environment.ClusterConfig.Kubecost
	18, // 19: prodvana.environment.ClusterConfig.datadog:type_name -> prodvana.environment.ClusterConfig.Datadog
	19, // 20: prodvana.environment.ClusterConfig.alb_ingress:type_name -> prodvana.environment.ClusterConfig.ALBIngress
	20, // 21: prodvana.environment.ClusterConfig.argo_rollouts:type_name -> prodvana.environment.ClusterConfig.ArgoRollouts
	21, // 22: prodvana.environment.ClusterConfig.gke_ingress:type_name -> prodvana.environment.ClusterConfig.GKEIngress
	21, // 23: prodvana.environment.ClusterConfig.self_managed_gke_ingress:type_name -> prodvana.environment.ClusterConfig.GKEIngress
	2,  // 24: prodvana.environment.ClusterConfig.cloud_provider:type_name -> prodvana.environment.ClusterConfig.CloudProvider
	6,  // 25: prodvana.environment.ClusterConfig.fake:type_name -> prodvana.environment.FakeClusterConfig
	8,  // 26: prodvana.environment.ClusterConfig.generic_docker:type_name -> prodvana.environment.GenericDockerClusterConfig
	14, // 27: prodvana.environment.ClusterAuth.K8sAuth.agent_env:type_name -> prodvana.environment.ClusterAuth.K8sAuth.AgentEnvEntry
	29, // 28: prodvana.environment.CompiledGenericDockerCommand.EnvEntry.value:type_name -> prodvana.common_config.EnvValue
	22, // 29: prodvana.environment.ClusterConfig.ArgoRollouts.templates:type_name -> prodvana.environment.ClusterConfig.ArgoRollouts.AnalysisTemplate
	23, // 30: prodvana.environment.ClusterConfig.ArgoRollouts.AnalysisTemplate.arg_mapping:type_name -> prodvana.environment.ClusterConfig.ArgoRollouts.AnalysisTemplate.ArgMappingEntry
	3,  // 31: prodvana.environment.ClusterConfig.ArgoRollouts.AnalysisTemplate.ArgMappingEntry.value:type_name -> prodvana.environment.ClusterConfig.ArgoRollouts.AnalysisTemplate.ArgValue
	32, // [32:32] is the sub-list for method output_type
	32, // [32:32] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_prodvana_environment_clusters_proto_init() }
func file_prodvana_environment_clusters_proto_init() {
	if File_prodvana_environment_clusters_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_prodvana_environment_clusters_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterAuth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_environment_clusters_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_environment_clusters_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FakeClusterConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_environment_clusters_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenericDockerCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_environment_clusters_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenericDockerClusterConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_environment_clusters_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompiledGenericDockerCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_environment_clusters_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_environment_clusters_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterAuth_ECSAuth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_environment_clusters_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterAuth_GenericDockerAuth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_environment_clusters_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterAuth_K8SAuth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_environment_clusters_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FakeClusterConfig_CrashingProgramPatterns); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_environment_clusters_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterConfig_Kubecost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_environment_clusters_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterConfig_Datadog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_environment_clusters_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterConfig_ALBIngress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_environment_clusters_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterConfig_ArgoRollouts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_environment_clusters_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterConfig_GKEIngress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_environment_clusters_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterConfig_ArgoRollouts_AnalysisTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_prodvana_environment_clusters_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ClusterAuth_Ecs)(nil),
		(*ClusterAuth_GenericDocker)(nil),
		(*ClusterAuth_K8S)(nil),
	}
	file_prodvana_environment_clusters_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*GenericDockerCommand_TaskConfig)(nil),
		(*GenericDockerCommand_KubernetesConfig)(nil),
	}
	file_prodvana_environment_clusters_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*ClusterConfig_Fake)(nil),
		(*ClusterConfig_GenericDocker)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_prodvana_environment_clusters_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_prodvana_environment_clusters_proto_goTypes,
		DependencyIndexes: file_prodvana_environment_clusters_proto_depIdxs,
		EnumInfos:         file_prodvana_environment_clusters_proto_enumTypes,
		MessageInfos:      file_prodvana_environment_clusters_proto_msgTypes,
	}.Build()
	File_prodvana_environment_clusters_proto = out.File
	file_prodvana_environment_clusters_proto_rawDesc = nil
	file_prodvana_environment_clusters_proto_goTypes = nil
	file_prodvana_environment_clusters_proto_depIdxs = nil
}
