// Code generated by protoc-gen-go-vtproto. DO NOT EDIT.
// protoc-gen-go-vtproto version: v0.6.0
// source: prodvana/environment/clusters.proto

package environment

import (
	durationpb1 "github.com/planetscale/vtprotobuf/types/known/durationpb"
	timestamppb1 "github.com/planetscale/vtprotobuf/types/known/timestamppb"
	common_config "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/common_config"
	labels "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/labels"
	volumes "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/volumes"
	proto "google.golang.org/protobuf/proto"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

func (m *ClusterAuth_ECSAuth) CloneVT() *ClusterAuth_ECSAuth {
	if m == nil {
		return (*ClusterAuth_ECSAuth)(nil)
	}
	r := new(ClusterAuth_ECSAuth)
	r.AccessKey = m.AccessKey
	r.SecretKey = m.SecretKey
	r.Region = m.Region
	r.AssumeRoleArn = m.AssumeRoleArn
	r.ClusterArn = m.ClusterArn
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ClusterAuth_ECSAuth) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ClusterAuth_K8SAuth) CloneVT() *ClusterAuth_K8SAuth {
	if m == nil {
		return (*ClusterAuth_K8SAuth)(nil)
	}
	r := new(ClusterAuth_K8SAuth)
	r.AgentExternallyManaged = m.AgentExternallyManaged
	if rhs := m.AgentEnv; rhs != nil {
		tmpContainer := make(map[string]string, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v
		}
		r.AgentEnv = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ClusterAuth_K8SAuth) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ClusterAuth) CloneVT() *ClusterAuth {
	if m == nil {
		return (*ClusterAuth)(nil)
	}
	r := new(ClusterAuth)
	if m.AuthOneof != nil {
		r.AuthOneof = m.AuthOneof.(interface {
			CloneVT() isClusterAuth_AuthOneof
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ClusterAuth) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ClusterAuth_Ecs) CloneVT() isClusterAuth_AuthOneof {
	if m == nil {
		return (*ClusterAuth_Ecs)(nil)
	}
	r := new(ClusterAuth_Ecs)
	r.Ecs = m.Ecs.CloneVT()
	return r
}

func (m *ClusterAuth_K8S) CloneVT() isClusterAuth_AuthOneof {
	if m == nil {
		return (*ClusterAuth_K8S)(nil)
	}
	r := new(ClusterAuth_K8S)
	r.K8S = m.K8S.CloneVT()
	return r
}

func (m *Cluster) CloneVT() *Cluster {
	if m == nil {
		return (*Cluster)(nil)
	}
	r := new(Cluster)
	r.Name = m.Name
	r.ClusterId = m.ClusterId
	r.Auth = m.Auth.CloneVT()
	r.Type = m.Type
	r.Config = m.Config.CloneVT()
	r.LastHeartbeatTimestamp = (*timestamppb.Timestamp)((*timestamppb1.Timestamp)(m.LastHeartbeatTimestamp).CloneVT())
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Cluster) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *FakeClusterConfig_CrashingProgramPatterns) CloneVT() *FakeClusterConfig_CrashingProgramPatterns {
	if m == nil {
		return (*FakeClusterConfig_CrashingProgramPatterns)(nil)
	}
	r := new(FakeClusterConfig_CrashingProgramPatterns)
	r.ImageRegex = m.ImageRegex
	r.CmdRegex = m.CmdRegex
	r.LogOutput = m.LogOutput
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *FakeClusterConfig_CrashingProgramPatterns) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *FakeClusterConfig) CloneVT() *FakeClusterConfig {
	if m == nil {
		return (*FakeClusterConfig)(nil)
	}
	r := new(FakeClusterConfig)
	if rhs := m.CrashingPrograms; rhs != nil {
		tmpContainer := make([]*FakeClusterConfig_CrashingProgramPatterns, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.CrashingPrograms = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *FakeClusterConfig) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RetryPolicy) CloneVT() *RetryPolicy {
	if m == nil {
		return (*RetryPolicy)(nil)
	}
	r := new(RetryPolicy)
	r.BaseInterval = (*durationpb.Duration)((*durationpb1.Duration)(m.BaseInterval).CloneVT())
	r.MaxInterval = (*durationpb.Duration)((*durationpb1.Duration)(m.MaxInterval).CloneVT())
	r.MaxAttempts = m.MaxAttempts
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RetryPolicy) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ExtensionFetchCommand) CloneVT() *ExtensionFetchCommand {
	if m == nil {
		return (*ExtensionFetchCommand)(nil)
	}
	r := new(ExtensionFetchCommand)
	r.PollInterval = (*durationpb.Duration)((*durationpb1.Duration)(m.PollInterval).CloneVT())
	r.SteadyStatePollInterval = (*durationpb.Duration)((*durationpb1.Duration)(m.SteadyStatePollInterval).CloneVT())
	r.Timeout = (*durationpb.Duration)((*durationpb1.Duration)(m.Timeout).CloneVT())
	r.RetryPolicy = m.RetryPolicy.CloneVT()
	r.FetchMode = m.FetchMode
	if m.ExecConfig != nil {
		r.ExecConfig = m.ExecConfig.(interface {
			CloneVT() isExtensionFetchCommand_ExecConfig
		}).CloneVT()
	}
	if rhs := m.Env; rhs != nil {
		tmpContainer := make(map[string]*common_config.EnvValue, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Env = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ExtensionFetchCommand) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ExtensionFetchCommand_TaskConfig) CloneVT() isExtensionFetchCommand_ExecConfig {
	if m == nil {
		return (*ExtensionFetchCommand_TaskConfig)(nil)
	}
	r := new(ExtensionFetchCommand_TaskConfig)
	r.TaskConfig = m.TaskConfig.CloneVT()
	return r
}

func (m *ExtensionFetchCommand_KubernetesConfig) CloneVT() isExtensionFetchCommand_ExecConfig {
	if m == nil {
		return (*ExtensionFetchCommand_KubernetesConfig)(nil)
	}
	r := new(ExtensionFetchCommand_KubernetesConfig)
	r.KubernetesConfig = m.KubernetesConfig.CloneVT()
	return r
}

func (m *ExtensionGetInfoCommand) CloneVT() *ExtensionGetInfoCommand {
	if m == nil {
		return (*ExtensionGetInfoCommand)(nil)
	}
	r := new(ExtensionGetInfoCommand)
	r.PollInterval = (*durationpb.Duration)((*durationpb1.Duration)(m.PollInterval).CloneVT())
	r.RetryPolicy = m.RetryPolicy.CloneVT()
	r.TestOnlyDoNotRequirePvnWrapper = m.TestOnlyDoNotRequirePvnWrapper
	if m.ExecConfig != nil {
		r.ExecConfig = m.ExecConfig.(interface {
			CloneVT() isExtensionGetInfoCommand_ExecConfig
		}).CloneVT()
	}
	if rhs := m.Env; rhs != nil {
		tmpContainer := make(map[string]*common_config.EnvValue, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Env = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ExtensionGetInfoCommand) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ExtensionGetInfoCommand_TaskConfig) CloneVT() isExtensionGetInfoCommand_ExecConfig {
	if m == nil {
		return (*ExtensionGetInfoCommand_TaskConfig)(nil)
	}
	r := new(ExtensionGetInfoCommand_TaskConfig)
	r.TaskConfig = m.TaskConfig.CloneVT()
	return r
}

func (m *ExtensionGetInfoCommand_KubernetesConfig) CloneVT() isExtensionGetInfoCommand_ExecConfig {
	if m == nil {
		return (*ExtensionGetInfoCommand_KubernetesConfig)(nil)
	}
	r := new(ExtensionGetInfoCommand_KubernetesConfig)
	r.KubernetesConfig = m.KubernetesConfig.CloneVT()
	return r
}

func (m *ExtensionApplyCommand) CloneVT() *ExtensionApplyCommand {
	if m == nil {
		return (*ExtensionApplyCommand)(nil)
	}
	r := new(ExtensionApplyCommand)
	r.Timeout = (*durationpb.Duration)((*durationpb1.Duration)(m.Timeout).CloneVT())
	r.RetryPolicy = m.RetryPolicy.CloneVT()
	r.MaxConcurrency = m.MaxConcurrency
	if m.ExecConfig != nil {
		r.ExecConfig = m.ExecConfig.(interface {
			CloneVT() isExtensionApplyCommand_ExecConfig
		}).CloneVT()
	}
	if rhs := m.Env; rhs != nil {
		tmpContainer := make(map[string]*common_config.EnvValue, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Env = tmpContainer
	}
	if rhs := m.RetryableExitCodes; rhs != nil {
		tmpContainer := make([]int32, len(rhs))
		copy(tmpContainer, rhs)
		r.RetryableExitCodes = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ExtensionApplyCommand) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ExtensionApplyCommand_TaskConfig) CloneVT() isExtensionApplyCommand_ExecConfig {
	if m == nil {
		return (*ExtensionApplyCommand_TaskConfig)(nil)
	}
	r := new(ExtensionApplyCommand_TaskConfig)
	r.TaskConfig = m.TaskConfig.CloneVT()
	return r
}

func (m *ExtensionApplyCommand_KubernetesConfig) CloneVT() isExtensionApplyCommand_ExecConfig {
	if m == nil {
		return (*ExtensionApplyCommand_KubernetesConfig)(nil)
	}
	r := new(ExtensionApplyCommand_KubernetesConfig)
	r.KubernetesConfig = m.KubernetesConfig.CloneVT()
	return r
}

func (m *ExtensionClusterConfig) CloneVT() *ExtensionClusterConfig {
	if m == nil {
		return (*ExtensionClusterConfig)(nil)
	}
	r := new(ExtensionClusterConfig)
	r.Apply = m.Apply.CloneVT()
	r.Fetch = m.Fetch.CloneVT()
	r.Debug = m.Debug.CloneVT()
	r.GetInfo = m.GetInfo.CloneVT()
	r.ProxyRuntime = m.ProxyRuntime.CloneVT()
	r.Type = m.Type
	r.RequireApprovalBeforeApply = m.RequireApprovalBeforeApply
	r.ConvergenceGracePeriod = (*durationpb.Duration)((*durationpb1.Duration)(m.ConvergenceGracePeriod).CloneVT())
	if rhs := m.Parameters; rhs != nil {
		tmpContainer := make([]*common_config.ParameterDefinition, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Parameters = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ExtensionClusterConfig) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CompiledExtensionCommand_CompiledExtensionCommandExec) CloneVT() *CompiledExtensionCommand_CompiledExtensionCommandExec {
	if m == nil {
		return (*CompiledExtensionCommand_CompiledExtensionCommandExec)(nil)
	}
	r := new(CompiledExtensionCommand_CompiledExtensionCommandExec)
	if m.ExecConfig != nil {
		r.ExecConfig = m.ExecConfig.(interface {
			CloneVT() isCompiledExtensionCommand_CompiledExtensionCommandExec_ExecConfig
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CompiledExtensionCommand_CompiledExtensionCommandExec) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CompiledExtensionCommand_CompiledExtensionCommandExec_TaskConfig) CloneVT() isCompiledExtensionCommand_CompiledExtensionCommandExec_ExecConfig {
	if m == nil {
		return (*CompiledExtensionCommand_CompiledExtensionCommandExec_TaskConfig)(nil)
	}
	r := new(CompiledExtensionCommand_CompiledExtensionCommandExec_TaskConfig)
	r.TaskConfig = m.TaskConfig.CloneVT()
	return r
}

func (m *CompiledExtensionCommand_CompiledExtensionCommandExec_KubernetesConfig) CloneVT() isCompiledExtensionCommand_CompiledExtensionCommandExec_ExecConfig {
	if m == nil {
		return (*CompiledExtensionCommand_CompiledExtensionCommandExec_KubernetesConfig)(nil)
	}
	r := new(CompiledExtensionCommand_CompiledExtensionCommandExec_KubernetesConfig)
	r.KubernetesConfig = m.KubernetesConfig.CloneVT()
	return r
}

func (m *CompiledExtensionCommand) CloneVT() *CompiledExtensionCommand {
	if m == nil {
		return (*CompiledExtensionCommand)(nil)
	}
	r := new(CompiledExtensionCommand)
	r.NamePrefix = m.NamePrefix
	r.Command = m.Command.CloneVT()
	r.RuntimeExecution = m.RuntimeExecution.CloneVT()
	if rhs := m.Env; rhs != nil {
		tmpContainer := make(map[string]*common_config.EnvValue, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Env = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CompiledExtensionCommand) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *IacRunnerCommand) CloneVT() *IacRunnerCommand {
	if m == nil {
		return (*IacRunnerCommand)(nil)
	}
	r := new(IacRunnerCommand)
	r.Cmd = m.Cmd
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *IacRunnerCommand) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *TerraformRunnerConfig) CloneVT() *TerraformRunnerConfig {
	if m == nil {
		return (*TerraformRunnerConfig)(nil)
	}
	r := new(TerraformRunnerConfig)
	r.ProxyRuntime = m.ProxyRuntime.CloneVT()
	r.PollInterval = (*durationpb.Duration)((*durationpb1.Duration)(m.PollInterval).CloneVT())
	r.SteadyStatePollInterval = (*durationpb.Duration)((*durationpb1.Duration)(m.SteadyStatePollInterval).CloneVT())
	r.RequireApprovalBeforeApply = m.RequireApprovalBeforeApply
	r.ConvergenceGracePeriod = (*durationpb.Duration)((*durationpb1.Duration)(m.ConvergenceGracePeriod).CloneVT())
	r.FetchRetryPolicy = m.FetchRetryPolicy.CloneVT()
	r.ApplyRetryPolicy = m.ApplyRetryPolicy.CloneVT()
	r.DisableDriftDetection = m.DisableDriftDetection
	r.TaskResources = m.TaskResources.CloneVT()
	r.ServiceAccount = m.ServiceAccount
	if rhs := m.Env; rhs != nil {
		tmpContainer := make(map[string]*common_config.EnvValue, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Env = tmpContainer
	}
	if rhs := m.Volumes; rhs != nil {
		tmpContainer := make([]*volumes.Volume, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Volumes = tmpContainer
	}
	if rhs := m.PreRun; rhs != nil {
		tmpContainer := make([]*IacRunnerCommand, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.PreRun = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *TerraformRunnerConfig) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *GKEClusterMetadata) CloneVT() *GKEClusterMetadata {
	if m == nil {
		return (*GKEClusterMetadata)(nil)
	}
	r := new(GKEClusterMetadata)
	r.ProjectName = m.ProjectName
	r.ClusterLocation = m.ClusterLocation
	r.ClusterName = m.ClusterName
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *GKEClusterMetadata) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ClusterMetadata) CloneVT() *ClusterMetadata {
	if m == nil {
		return (*ClusterMetadata)(nil)
	}
	r := new(ClusterMetadata)
	if m.ClusterMetadata != nil {
		r.ClusterMetadata = m.ClusterMetadata.(interface {
			CloneVT() isClusterMetadata_ClusterMetadata
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ClusterMetadata) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ClusterMetadata_Gke) CloneVT() isClusterMetadata_ClusterMetadata {
	if m == nil {
		return (*ClusterMetadata_Gke)(nil)
	}
	r := new(ClusterMetadata_Gke)
	r.Gke = m.Gke.CloneVT()
	return r
}

func (m *AwsEcsConfig_AccessKey) CloneVT() *AwsEcsConfig_AccessKey {
	if m == nil {
		return (*AwsEcsConfig_AccessKey)(nil)
	}
	r := new(AwsEcsConfig_AccessKey)
	r.AwsAccessKeyId = m.AwsAccessKeyId
	r.AwsSecretAccessKey = m.AwsSecretAccessKey.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *AwsEcsConfig_AccessKey) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *AwsEcsConfig_InheritRole) CloneVT() *AwsEcsConfig_InheritRole {
	if m == nil {
		return (*AwsEcsConfig_InheritRole)(nil)
	}
	r := new(AwsEcsConfig_InheritRole)
	r.K8SServiceAccount = m.K8SServiceAccount
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *AwsEcsConfig_InheritRole) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *AwsEcsConfig) CloneVT() *AwsEcsConfig {
	if m == nil {
		return (*AwsEcsConfig)(nil)
	}
	r := new(AwsEcsConfig)
	r.ProxyRuntime = m.ProxyRuntime.CloneVT()
	r.Region = m.Region
	r.EcsCluster = m.EcsCluster
	if m.Credentials != nil {
		r.Credentials = m.Credentials.(interface {
			CloneVT() isAwsEcsConfig_Credentials
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *AwsEcsConfig) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *AwsEcsConfig_AccessKey_) CloneVT() isAwsEcsConfig_Credentials {
	if m == nil {
		return (*AwsEcsConfig_AccessKey_)(nil)
	}
	r := new(AwsEcsConfig_AccessKey_)
	r.AccessKey = m.AccessKey.CloneVT()
	return r
}

func (m *AwsEcsConfig_InheritRoleFromRuntimeEnv) CloneVT() isAwsEcsConfig_Credentials {
	if m == nil {
		return (*AwsEcsConfig_InheritRoleFromRuntimeEnv)(nil)
	}
	r := new(AwsEcsConfig_InheritRoleFromRuntimeEnv)
	r.InheritRoleFromRuntimeEnv = m.InheritRoleFromRuntimeEnv.CloneVT()
	return r
}

func (m *GoogleCloudRunConfig) CloneVT() *GoogleCloudRunConfig {
	if m == nil {
		return (*GoogleCloudRunConfig)(nil)
	}
	r := new(GoogleCloudRunConfig)
	r.ProxyRuntime = m.ProxyRuntime.CloneVT()
	r.Project = m.Project
	r.Region = m.Region
	if m.Credentials != nil {
		r.Credentials = m.Credentials.(interface {
			CloneVT() isGoogleCloudRunConfig_Credentials
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *GoogleCloudRunConfig) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *GoogleCloudRunConfig_ServiceAccountJson) CloneVT() isGoogleCloudRunConfig_Credentials {
	if m == nil {
		return (*GoogleCloudRunConfig_ServiceAccountJson)(nil)
	}
	r := new(GoogleCloudRunConfig_ServiceAccountJson)
	r.ServiceAccountJson = m.ServiceAccountJson.CloneVT()
	return r
}

func (m *FlyConfig) CloneVT() *FlyConfig {
	if m == nil {
		return (*FlyConfig)(nil)
	}
	r := new(FlyConfig)
	r.ProxyRuntime = m.ProxyRuntime.CloneVT()
	if m.Credentials != nil {
		r.Credentials = m.Credentials.(interface {
			CloneVT() isFlyConfig_Credentials
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *FlyConfig) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *FlyConfig_FlyApiToken) CloneVT() isFlyConfig_Credentials {
	if m == nil {
		return (*FlyConfig_FlyApiToken)(nil)
	}
	r := new(FlyConfig_FlyApiToken)
	r.FlyApiToken = m.FlyApiToken.CloneVT()
	return r
}

func (m *ClusterConfig_Kubecost) CloneVT() *ClusterConfig_Kubecost {
	if m == nil {
		return (*ClusterConfig_Kubecost)(nil)
	}
	r := new(ClusterConfig_Kubecost)
	r.Enabled = m.Enabled
	r.KubecostNamespace = m.KubecostNamespace
	r.Managed = m.Managed
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ClusterConfig_Kubecost) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ClusterConfig_Datadog) CloneVT() *ClusterConfig_Datadog {
	if m == nil {
		return (*ClusterConfig_Datadog)(nil)
	}
	r := new(ClusterConfig_Datadog)
	r.Enabled = m.Enabled
	r.DatadogNamespace = m.DatadogNamespace
	r.ApiKey = m.ApiKey
	r.Site = m.Site
	r.Managed = m.Managed
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ClusterConfig_Datadog) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ClusterConfig_ALBIngress) CloneVT() *ClusterConfig_ALBIngress {
	if m == nil {
		return (*ClusterConfig_ALBIngress)(nil)
	}
	r := new(ClusterConfig_ALBIngress)
	r.Enabled = m.Enabled
	r.IngressClass = m.IngressClass
	if rhs := m.DefaultBalancerAttributes; rhs != nil {
		tmpContainer := make([]string, len(rhs))
		copy(tmpContainer, rhs)
		r.DefaultBalancerAttributes = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ClusterConfig_ALBIngress) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ClusterConfig_ArgoRollouts_AnalysisTemplate) CloneVT() *ClusterConfig_ArgoRollouts_AnalysisTemplate {
	if m == nil {
		return (*ClusterConfig_ArgoRollouts_AnalysisTemplate)(nil)
	}
	r := new(ClusterConfig_ArgoRollouts_AnalysisTemplate)
	r.Name = m.Name
	if rhs := m.ArgMapping; rhs != nil {
		tmpContainer := make(map[string]ClusterConfig_ArgoRollouts_AnalysisTemplate_ArgValue, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v
		}
		r.ArgMapping = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ClusterConfig_ArgoRollouts_AnalysisTemplate) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ClusterConfig_ArgoRollouts) CloneVT() *ClusterConfig_ArgoRollouts {
	if m == nil {
		return (*ClusterConfig_ArgoRollouts)(nil)
	}
	r := new(ClusterConfig_ArgoRollouts)
	r.Enabled = m.Enabled
	if rhs := m.Templates; rhs != nil {
		tmpContainer := make([]*ClusterConfig_ArgoRollouts_AnalysisTemplate, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Templates = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ClusterConfig_ArgoRollouts) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ClusterConfig_GKEIngress) CloneVT() *ClusterConfig_GKEIngress {
	if m == nil {
		return (*ClusterConfig_GKEIngress)(nil)
	}
	r := new(ClusterConfig_GKEIngress)
	r.Enabled = m.Enabled
	r.ContainerNative = m.ContainerNative
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ClusterConfig_GKEIngress) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ClusterConfig) CloneVT() *ClusterConfig {
	if m == nil {
		return (*ClusterConfig)(nil)
	}
	r := new(ClusterConfig)
	r.Name = m.Name
	r.Kubecost = m.Kubecost.CloneVT()
	r.Datadog = m.Datadog.CloneVT()
	r.AlbIngress = m.AlbIngress.CloneVT()
	r.ArgoRollouts = m.ArgoRollouts.CloneVT()
	r.GkeIngress = m.GkeIngress.CloneVT()
	r.SelfManagedGkeIngress = m.SelfManagedGkeIngress.CloneVT()
	r.CloudProvider = m.CloudProvider
	r.DetectedClusterMetadata = m.DetectedClusterMetadata.CloneVT()
	r.UserSuppliedClusterMetadata = m.UserSuppliedClusterMetadata.CloneVT()
	r.AutoRollback = m.AutoRollback.CloneVT()
	if m.ClusterOneof != nil {
		r.ClusterOneof = m.ClusterOneof.(interface {
			CloneVT() isClusterConfig_ClusterOneof
		}).CloneVT()
	}
	if rhs := m.Labels; rhs != nil {
		tmpContainer := make([]*labels.LabelDefinition, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Labels = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ClusterConfig) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ClusterConfig_Fake) CloneVT() isClusterConfig_ClusterOneof {
	if m == nil {
		return (*ClusterConfig_Fake)(nil)
	}
	r := new(ClusterConfig_Fake)
	r.Fake = m.Fake.CloneVT()
	return r
}

func (m *ClusterConfig_Extension) CloneVT() isClusterConfig_ClusterOneof {
	if m == nil {
		return (*ClusterConfig_Extension)(nil)
	}
	r := new(ClusterConfig_Extension)
	r.Extension = m.Extension.CloneVT()
	return r
}

func (m *ClusterConfig_Custom) CloneVT() isClusterConfig_ClusterOneof {
	if m == nil {
		return (*ClusterConfig_Custom)(nil)
	}
	r := new(ClusterConfig_Custom)
	r.Custom = m.Custom.CloneVT()
	return r
}

func (m *ClusterConfig_TerraformRunner) CloneVT() isClusterConfig_ClusterOneof {
	if m == nil {
		return (*ClusterConfig_TerraformRunner)(nil)
	}
	r := new(ClusterConfig_TerraformRunner)
	r.TerraformRunner = m.TerraformRunner.CloneVT()
	return r
}

func (m *ClusterConfig_PulumiRunner) CloneVT() isClusterConfig_ClusterOneof {
	if m == nil {
		return (*ClusterConfig_PulumiRunner)(nil)
	}
	r := new(ClusterConfig_PulumiRunner)
	r.PulumiRunner = m.PulumiRunner.CloneVT()
	return r
}

func (m *ClusterConfig_AwsEcs) CloneVT() isClusterConfig_ClusterOneof {
	if m == nil {
		return (*ClusterConfig_AwsEcs)(nil)
	}
	r := new(ClusterConfig_AwsEcs)
	r.AwsEcs = m.AwsEcs.CloneVT()
	return r
}

func (m *ClusterConfig_GoogleCloudRun) CloneVT() isClusterConfig_ClusterOneof {
	if m == nil {
		return (*ClusterConfig_GoogleCloudRun)(nil)
	}
	r := new(ClusterConfig_GoogleCloudRun)
	r.GoogleCloudRun = m.GoogleCloudRun.CloneVT()
	return r
}

func (m *ClusterConfig_Fly) CloneVT() isClusterConfig_ClusterOneof {
	if m == nil {
		return (*ClusterConfig_Fly)(nil)
	}
	r := new(ClusterConfig_Fly)
	r.Fly = m.Fly.CloneVT()
	return r
}

func (this *ClusterAuth_ECSAuth) StableEqualVT(that *ClusterAuth_ECSAuth) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.AccessKey != that.AccessKey {
		return false
	}
	if this.SecretKey != that.SecretKey {
		return false
	}
	if this.Region != that.Region {
		return false
	}
	if this.AssumeRoleArn != that.AssumeRoleArn {
		return false
	}
	if this.ClusterArn != that.ClusterArn {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ClusterAuth_ECSAuth) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ClusterAuth_ECSAuth)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ClusterAuth_K8SAuth) StableEqualVT(that *ClusterAuth_K8SAuth) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.AgentEnv) != len(that.AgentEnv) {
		return false
	}
	for i, vx := range this.AgentEnv {
		vy, ok := that.AgentEnv[i]
		if !ok {
			return false
		}
		if vx != vy {
			return false
		}
	}
	if this.AgentExternallyManaged != that.AgentExternallyManaged {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ClusterAuth_K8SAuth) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ClusterAuth_K8SAuth)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ClusterAuth) StableEqualVT(that *ClusterAuth) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.AuthOneof == nil && that.AuthOneof != nil {
		return false
	} else if this.AuthOneof != nil {
		if that.AuthOneof == nil {
			return false
		}
		if !this.AuthOneof.(interface {
			StableEqualVT(isClusterAuth_AuthOneof) bool
		}).StableEqualVT(that.AuthOneof) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ClusterAuth) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ClusterAuth)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ClusterAuth_Ecs) StableEqualVT(thatIface isClusterAuth_AuthOneof) bool {
	that, ok := thatIface.(*ClusterAuth_Ecs)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Ecs, that.Ecs; p != q {
		if p == nil {
			p = &ClusterAuth_ECSAuth{}
		}
		if q == nil {
			q = &ClusterAuth_ECSAuth{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ClusterAuth_K8S) StableEqualVT(thatIface isClusterAuth_AuthOneof) bool {
	that, ok := thatIface.(*ClusterAuth_K8S)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.K8S, that.K8S; p != q {
		if p == nil {
			p = &ClusterAuth_K8SAuth{}
		}
		if q == nil {
			q = &ClusterAuth_K8SAuth{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ClusterAuth_ECSAuth) EqualVT(that *ClusterAuth_ECSAuth) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.AccessKey != that.AccessKey {
		return false
	}
	if this.SecretKey != that.SecretKey {
		return false
	}
	if this.Region != that.Region {
		return false
	}
	if this.AssumeRoleArn != that.AssumeRoleArn {
		return false
	}
	if this.ClusterArn != that.ClusterArn {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ClusterAuth_ECSAuth) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ClusterAuth_ECSAuth)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ClusterAuth_K8SAuth) EqualVT(that *ClusterAuth_K8SAuth) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.AgentEnv) != len(that.AgentEnv) {
		return false
	}
	for i, vx := range this.AgentEnv {
		vy, ok := that.AgentEnv[i]
		if !ok {
			return false
		}
		if vx != vy {
			return false
		}
	}
	if this.AgentExternallyManaged != that.AgentExternallyManaged {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ClusterAuth_K8SAuth) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ClusterAuth_K8SAuth)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ClusterAuth) EqualVT(that *ClusterAuth) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.AuthOneof == nil && that.AuthOneof != nil {
		return false
	} else if this.AuthOneof != nil {
		if that.AuthOneof == nil {
			return false
		}
		if !this.AuthOneof.(interface {
			EqualVT(isClusterAuth_AuthOneof) bool
		}).EqualVT(that.AuthOneof) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ClusterAuth) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ClusterAuth)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ClusterAuth_Ecs) EqualVT(thatIface isClusterAuth_AuthOneof) bool {
	that, ok := thatIface.(*ClusterAuth_Ecs)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Ecs, that.Ecs; p != q {
		if p == nil {
			p = &ClusterAuth_ECSAuth{}
		}
		if q == nil {
			q = &ClusterAuth_ECSAuth{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ClusterAuth_K8S) EqualVT(thatIface isClusterAuth_AuthOneof) bool {
	that, ok := thatIface.(*ClusterAuth_K8S)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.K8S, that.K8S; p != q {
		if p == nil {
			p = &ClusterAuth_K8SAuth{}
		}
		if q == nil {
			q = &ClusterAuth_K8SAuth{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Cluster) StableEqualVT(that *Cluster) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	if this.ClusterId != that.ClusterId {
		return false
	}
	if !this.Auth.StableEqualVT(that.Auth) {
		return false
	}
	if this.Type != that.Type {
		return false
	}
	if !this.Config.StableEqualVT(that.Config) {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.LastHeartbeatTimestamp).StableEqualVT((*timestamppb1.Timestamp)(that.LastHeartbeatTimestamp)) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Cluster) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Cluster)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *Cluster) EqualVT(that *Cluster) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	if this.ClusterId != that.ClusterId {
		return false
	}
	if !this.Auth.EqualVT(that.Auth) {
		return false
	}
	if this.Type != that.Type {
		return false
	}
	if !this.Config.EqualVT(that.Config) {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.LastHeartbeatTimestamp).EqualVT((*timestamppb1.Timestamp)(that.LastHeartbeatTimestamp)) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Cluster) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Cluster)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *FakeClusterConfig_CrashingProgramPatterns) StableEqualVT(that *FakeClusterConfig_CrashingProgramPatterns) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.ImageRegex != that.ImageRegex {
		return false
	}
	if this.CmdRegex != that.CmdRegex {
		return false
	}
	if this.LogOutput != that.LogOutput {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *FakeClusterConfig_CrashingProgramPatterns) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*FakeClusterConfig_CrashingProgramPatterns)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *FakeClusterConfig) StableEqualVT(that *FakeClusterConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.CrashingPrograms) != len(that.CrashingPrograms) {
		return false
	}
	for i, vx := range this.CrashingPrograms {
		vy := that.CrashingPrograms[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &FakeClusterConfig_CrashingProgramPatterns{}
			}
			if q == nil {
				q = &FakeClusterConfig_CrashingProgramPatterns{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *FakeClusterConfig) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*FakeClusterConfig)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *FakeClusterConfig_CrashingProgramPatterns) EqualVT(that *FakeClusterConfig_CrashingProgramPatterns) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.ImageRegex != that.ImageRegex {
		return false
	}
	if this.CmdRegex != that.CmdRegex {
		return false
	}
	if this.LogOutput != that.LogOutput {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *FakeClusterConfig_CrashingProgramPatterns) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*FakeClusterConfig_CrashingProgramPatterns)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *FakeClusterConfig) EqualVT(that *FakeClusterConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.CrashingPrograms) != len(that.CrashingPrograms) {
		return false
	}
	for i, vx := range this.CrashingPrograms {
		vy := that.CrashingPrograms[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &FakeClusterConfig_CrashingProgramPatterns{}
			}
			if q == nil {
				q = &FakeClusterConfig_CrashingProgramPatterns{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *FakeClusterConfig) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*FakeClusterConfig)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RetryPolicy) StableEqualVT(that *RetryPolicy) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*durationpb1.Duration)(this.BaseInterval).StableEqualVT((*durationpb1.Duration)(that.BaseInterval)) {
		return false
	}
	if !(*durationpb1.Duration)(this.MaxInterval).StableEqualVT((*durationpb1.Duration)(that.MaxInterval)) {
		return false
	}
	if this.MaxAttempts != that.MaxAttempts {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RetryPolicy) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RetryPolicy)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *RetryPolicy) EqualVT(that *RetryPolicy) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*durationpb1.Duration)(this.BaseInterval).EqualVT((*durationpb1.Duration)(that.BaseInterval)) {
		return false
	}
	if !(*durationpb1.Duration)(this.MaxInterval).EqualVT((*durationpb1.Duration)(that.MaxInterval)) {
		return false
	}
	if this.MaxAttempts != that.MaxAttempts {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RetryPolicy) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RetryPolicy)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ExtensionFetchCommand) StableEqualVT(that *ExtensionFetchCommand) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.ExecConfig == nil && that.ExecConfig != nil {
		return false
	} else if this.ExecConfig != nil {
		if that.ExecConfig == nil {
			return false
		}
		if !this.ExecConfig.(interface {
			StableEqualVT(isExtensionFetchCommand_ExecConfig) bool
		}).StableEqualVT(that.ExecConfig) {
			return false
		}
	}
	if !(*durationpb1.Duration)(this.PollInterval).StableEqualVT((*durationpb1.Duration)(that.PollInterval)) {
		return false
	}
	if !(*durationpb1.Duration)(this.Timeout).StableEqualVT((*durationpb1.Duration)(that.Timeout)) {
		return false
	}
	if len(this.Env) != len(that.Env) {
		return false
	}
	for i, vx := range this.Env {
		vy, ok := that.Env[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &common_config.EnvValue{}
			}
			if q == nil {
				q = &common_config.EnvValue{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if !(*durationpb1.Duration)(this.SteadyStatePollInterval).StableEqualVT((*durationpb1.Duration)(that.SteadyStatePollInterval)) {
		return false
	}
	if !this.RetryPolicy.StableEqualVT(that.RetryPolicy) {
		return false
	}
	if this.FetchMode != that.FetchMode {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ExtensionFetchCommand) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ExtensionFetchCommand)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ExtensionFetchCommand_TaskConfig) StableEqualVT(thatIface isExtensionFetchCommand_ExecConfig) bool {
	that, ok := thatIface.(*ExtensionFetchCommand_TaskConfig)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.TaskConfig, that.TaskConfig; p != q {
		if p == nil {
			p = &common_config.TaskConfig{}
		}
		if q == nil {
			q = &common_config.TaskConfig{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ExtensionFetchCommand_KubernetesConfig) StableEqualVT(thatIface isExtensionFetchCommand_ExecConfig) bool {
	that, ok := thatIface.(*ExtensionFetchCommand_KubernetesConfig)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.KubernetesConfig, that.KubernetesConfig; p != q {
		if p == nil {
			p = &common_config.KubernetesConfig{}
		}
		if q == nil {
			q = &common_config.KubernetesConfig{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ExtensionFetchCommand) EqualVT(that *ExtensionFetchCommand) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.ExecConfig == nil && that.ExecConfig != nil {
		return false
	} else if this.ExecConfig != nil {
		if that.ExecConfig == nil {
			return false
		}
		if !this.ExecConfig.(interface {
			EqualVT(isExtensionFetchCommand_ExecConfig) bool
		}).EqualVT(that.ExecConfig) {
			return false
		}
	}
	if !(*durationpb1.Duration)(this.PollInterval).EqualVT((*durationpb1.Duration)(that.PollInterval)) {
		return false
	}
	if !(*durationpb1.Duration)(this.Timeout).EqualVT((*durationpb1.Duration)(that.Timeout)) {
		return false
	}
	if len(this.Env) != len(that.Env) {
		return false
	}
	for i, vx := range this.Env {
		vy, ok := that.Env[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &common_config.EnvValue{}
			}
			if q == nil {
				q = &common_config.EnvValue{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if !(*durationpb1.Duration)(this.SteadyStatePollInterval).EqualVT((*durationpb1.Duration)(that.SteadyStatePollInterval)) {
		return false
	}
	if !this.RetryPolicy.EqualVT(that.RetryPolicy) {
		return false
	}
	if this.FetchMode != that.FetchMode {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ExtensionFetchCommand) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ExtensionFetchCommand)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ExtensionFetchCommand_TaskConfig) EqualVT(thatIface isExtensionFetchCommand_ExecConfig) bool {
	that, ok := thatIface.(*ExtensionFetchCommand_TaskConfig)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.TaskConfig, that.TaskConfig; p != q {
		if p == nil {
			p = &common_config.TaskConfig{}
		}
		if q == nil {
			q = &common_config.TaskConfig{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ExtensionFetchCommand_KubernetesConfig) EqualVT(thatIface isExtensionFetchCommand_ExecConfig) bool {
	that, ok := thatIface.(*ExtensionFetchCommand_KubernetesConfig)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.KubernetesConfig, that.KubernetesConfig; p != q {
		if p == nil {
			p = &common_config.KubernetesConfig{}
		}
		if q == nil {
			q = &common_config.KubernetesConfig{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ExtensionGetInfoCommand) StableEqualVT(that *ExtensionGetInfoCommand) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.ExecConfig == nil && that.ExecConfig != nil {
		return false
	} else if this.ExecConfig != nil {
		if that.ExecConfig == nil {
			return false
		}
		if !this.ExecConfig.(interface {
			StableEqualVT(isExtensionGetInfoCommand_ExecConfig) bool
		}).StableEqualVT(that.ExecConfig) {
			return false
		}
	}
	if !(*durationpb1.Duration)(this.PollInterval).StableEqualVT((*durationpb1.Duration)(that.PollInterval)) {
		return false
	}
	if !this.RetryPolicy.StableEqualVT(that.RetryPolicy) {
		return false
	}
	if len(this.Env) != len(that.Env) {
		return false
	}
	for i, vx := range this.Env {
		vy, ok := that.Env[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &common_config.EnvValue{}
			}
			if q == nil {
				q = &common_config.EnvValue{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if this.TestOnlyDoNotRequirePvnWrapper != that.TestOnlyDoNotRequirePvnWrapper {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ExtensionGetInfoCommand) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ExtensionGetInfoCommand)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ExtensionGetInfoCommand_TaskConfig) StableEqualVT(thatIface isExtensionGetInfoCommand_ExecConfig) bool {
	that, ok := thatIface.(*ExtensionGetInfoCommand_TaskConfig)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.TaskConfig, that.TaskConfig; p != q {
		if p == nil {
			p = &common_config.TaskConfig{}
		}
		if q == nil {
			q = &common_config.TaskConfig{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ExtensionGetInfoCommand_KubernetesConfig) StableEqualVT(thatIface isExtensionGetInfoCommand_ExecConfig) bool {
	that, ok := thatIface.(*ExtensionGetInfoCommand_KubernetesConfig)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.KubernetesConfig, that.KubernetesConfig; p != q {
		if p == nil {
			p = &common_config.KubernetesConfig{}
		}
		if q == nil {
			q = &common_config.KubernetesConfig{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ExtensionGetInfoCommand) EqualVT(that *ExtensionGetInfoCommand) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.ExecConfig == nil && that.ExecConfig != nil {
		return false
	} else if this.ExecConfig != nil {
		if that.ExecConfig == nil {
			return false
		}
		if !this.ExecConfig.(interface {
			EqualVT(isExtensionGetInfoCommand_ExecConfig) bool
		}).EqualVT(that.ExecConfig) {
			return false
		}
	}
	if !(*durationpb1.Duration)(this.PollInterval).EqualVT((*durationpb1.Duration)(that.PollInterval)) {
		return false
	}
	if !this.RetryPolicy.EqualVT(that.RetryPolicy) {
		return false
	}
	if len(this.Env) != len(that.Env) {
		return false
	}
	for i, vx := range this.Env {
		vy, ok := that.Env[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &common_config.EnvValue{}
			}
			if q == nil {
				q = &common_config.EnvValue{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if this.TestOnlyDoNotRequirePvnWrapper != that.TestOnlyDoNotRequirePvnWrapper {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ExtensionGetInfoCommand) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ExtensionGetInfoCommand)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ExtensionGetInfoCommand_TaskConfig) EqualVT(thatIface isExtensionGetInfoCommand_ExecConfig) bool {
	that, ok := thatIface.(*ExtensionGetInfoCommand_TaskConfig)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.TaskConfig, that.TaskConfig; p != q {
		if p == nil {
			p = &common_config.TaskConfig{}
		}
		if q == nil {
			q = &common_config.TaskConfig{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ExtensionGetInfoCommand_KubernetesConfig) EqualVT(thatIface isExtensionGetInfoCommand_ExecConfig) bool {
	that, ok := thatIface.(*ExtensionGetInfoCommand_KubernetesConfig)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.KubernetesConfig, that.KubernetesConfig; p != q {
		if p == nil {
			p = &common_config.KubernetesConfig{}
		}
		if q == nil {
			q = &common_config.KubernetesConfig{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ExtensionApplyCommand) StableEqualVT(that *ExtensionApplyCommand) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.ExecConfig == nil && that.ExecConfig != nil {
		return false
	} else if this.ExecConfig != nil {
		if that.ExecConfig == nil {
			return false
		}
		if !this.ExecConfig.(interface {
			StableEqualVT(isExtensionApplyCommand_ExecConfig) bool
		}).StableEqualVT(that.ExecConfig) {
			return false
		}
	}
	if !(*durationpb1.Duration)(this.Timeout).StableEqualVT((*durationpb1.Duration)(that.Timeout)) {
		return false
	}
	if len(this.Env) != len(that.Env) {
		return false
	}
	for i, vx := range this.Env {
		vy, ok := that.Env[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &common_config.EnvValue{}
			}
			if q == nil {
				q = &common_config.EnvValue{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if !this.RetryPolicy.StableEqualVT(that.RetryPolicy) {
		return false
	}
	if len(this.RetryableExitCodes) != len(that.RetryableExitCodes) {
		return false
	}
	for i, vx := range this.RetryableExitCodes {
		vy := that.RetryableExitCodes[i]
		if vx != vy {
			return false
		}
	}
	if this.MaxConcurrency != that.MaxConcurrency {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ExtensionApplyCommand) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ExtensionApplyCommand)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ExtensionApplyCommand_TaskConfig) StableEqualVT(thatIface isExtensionApplyCommand_ExecConfig) bool {
	that, ok := thatIface.(*ExtensionApplyCommand_TaskConfig)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.TaskConfig, that.TaskConfig; p != q {
		if p == nil {
			p = &common_config.TaskConfig{}
		}
		if q == nil {
			q = &common_config.TaskConfig{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ExtensionApplyCommand_KubernetesConfig) StableEqualVT(thatIface isExtensionApplyCommand_ExecConfig) bool {
	that, ok := thatIface.(*ExtensionApplyCommand_KubernetesConfig)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.KubernetesConfig, that.KubernetesConfig; p != q {
		if p == nil {
			p = &common_config.KubernetesConfig{}
		}
		if q == nil {
			q = &common_config.KubernetesConfig{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ExtensionApplyCommand) EqualVT(that *ExtensionApplyCommand) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.ExecConfig == nil && that.ExecConfig != nil {
		return false
	} else if this.ExecConfig != nil {
		if that.ExecConfig == nil {
			return false
		}
		if !this.ExecConfig.(interface {
			EqualVT(isExtensionApplyCommand_ExecConfig) bool
		}).EqualVT(that.ExecConfig) {
			return false
		}
	}
	if !(*durationpb1.Duration)(this.Timeout).EqualVT((*durationpb1.Duration)(that.Timeout)) {
		return false
	}
	if len(this.Env) != len(that.Env) {
		return false
	}
	for i, vx := range this.Env {
		vy, ok := that.Env[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &common_config.EnvValue{}
			}
			if q == nil {
				q = &common_config.EnvValue{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if !this.RetryPolicy.EqualVT(that.RetryPolicy) {
		return false
	}
	if len(this.RetryableExitCodes) != len(that.RetryableExitCodes) {
		return false
	}
	for i, vx := range this.RetryableExitCodes {
		vy := that.RetryableExitCodes[i]
		if vx != vy {
			return false
		}
	}
	if this.MaxConcurrency != that.MaxConcurrency {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ExtensionApplyCommand) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ExtensionApplyCommand)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ExtensionApplyCommand_TaskConfig) EqualVT(thatIface isExtensionApplyCommand_ExecConfig) bool {
	that, ok := thatIface.(*ExtensionApplyCommand_TaskConfig)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.TaskConfig, that.TaskConfig; p != q {
		if p == nil {
			p = &common_config.TaskConfig{}
		}
		if q == nil {
			q = &common_config.TaskConfig{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ExtensionApplyCommand_KubernetesConfig) EqualVT(thatIface isExtensionApplyCommand_ExecConfig) bool {
	that, ok := thatIface.(*ExtensionApplyCommand_KubernetesConfig)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.KubernetesConfig, that.KubernetesConfig; p != q {
		if p == nil {
			p = &common_config.KubernetesConfig{}
		}
		if q == nil {
			q = &common_config.KubernetesConfig{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ExtensionClusterConfig) StableEqualVT(that *ExtensionClusterConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Apply.StableEqualVT(that.Apply) {
		return false
	}
	if !this.Fetch.StableEqualVT(that.Fetch) {
		return false
	}
	if len(this.Parameters) != len(that.Parameters) {
		return false
	}
	for i, vx := range this.Parameters {
		vy := that.Parameters[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &common_config.ParameterDefinition{}
			}
			if q == nil {
				q = &common_config.ParameterDefinition{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if !this.ProxyRuntime.StableEqualVT(that.ProxyRuntime) {
		return false
	}
	if this.Type != that.Type {
		return false
	}
	if this.RequireApprovalBeforeApply != that.RequireApprovalBeforeApply {
		return false
	}
	if !(*durationpb1.Duration)(this.ConvergenceGracePeriod).StableEqualVT((*durationpb1.Duration)(that.ConvergenceGracePeriod)) {
		return false
	}
	if !this.Debug.StableEqualVT(that.Debug) {
		return false
	}
	if !this.GetInfo.StableEqualVT(that.GetInfo) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ExtensionClusterConfig) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ExtensionClusterConfig)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ExtensionClusterConfig) EqualVT(that *ExtensionClusterConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Apply.EqualVT(that.Apply) {
		return false
	}
	if !this.Fetch.EqualVT(that.Fetch) {
		return false
	}
	if len(this.Parameters) != len(that.Parameters) {
		return false
	}
	for i, vx := range this.Parameters {
		vy := that.Parameters[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &common_config.ParameterDefinition{}
			}
			if q == nil {
				q = &common_config.ParameterDefinition{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if !this.ProxyRuntime.EqualVT(that.ProxyRuntime) {
		return false
	}
	if this.Type != that.Type {
		return false
	}
	if this.RequireApprovalBeforeApply != that.RequireApprovalBeforeApply {
		return false
	}
	if !(*durationpb1.Duration)(this.ConvergenceGracePeriod).EqualVT((*durationpb1.Duration)(that.ConvergenceGracePeriod)) {
		return false
	}
	if !this.Debug.EqualVT(that.Debug) {
		return false
	}
	if !this.GetInfo.EqualVT(that.GetInfo) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ExtensionClusterConfig) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ExtensionClusterConfig)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CompiledExtensionCommand_CompiledExtensionCommandExec) StableEqualVT(that *CompiledExtensionCommand_CompiledExtensionCommandExec) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.ExecConfig == nil && that.ExecConfig != nil {
		return false
	} else if this.ExecConfig != nil {
		if that.ExecConfig == nil {
			return false
		}
		if !this.ExecConfig.(interface {
			StableEqualVT(isCompiledExtensionCommand_CompiledExtensionCommandExec_ExecConfig) bool
		}).StableEqualVT(that.ExecConfig) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CompiledExtensionCommand_CompiledExtensionCommandExec) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CompiledExtensionCommand_CompiledExtensionCommandExec)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *CompiledExtensionCommand_CompiledExtensionCommandExec_TaskConfig) StableEqualVT(thatIface isCompiledExtensionCommand_CompiledExtensionCommandExec_ExecConfig) bool {
	that, ok := thatIface.(*CompiledExtensionCommand_CompiledExtensionCommandExec_TaskConfig)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.TaskConfig, that.TaskConfig; p != q {
		if p == nil {
			p = &common_config.TaskConfig{}
		}
		if q == nil {
			q = &common_config.TaskConfig{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CompiledExtensionCommand_CompiledExtensionCommandExec_KubernetesConfig) StableEqualVT(thatIface isCompiledExtensionCommand_CompiledExtensionCommandExec_ExecConfig) bool {
	that, ok := thatIface.(*CompiledExtensionCommand_CompiledExtensionCommandExec_KubernetesConfig)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.KubernetesConfig, that.KubernetesConfig; p != q {
		if p == nil {
			p = &common_config.KubernetesConfig{}
		}
		if q == nil {
			q = &common_config.KubernetesConfig{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CompiledExtensionCommand) StableEqualVT(that *CompiledExtensionCommand) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.NamePrefix != that.NamePrefix {
		return false
	}
	if !this.Command.StableEqualVT(that.Command) {
		return false
	}
	if !this.RuntimeExecution.StableEqualVT(that.RuntimeExecution) {
		return false
	}
	if len(this.Env) != len(that.Env) {
		return false
	}
	for i, vx := range this.Env {
		vy, ok := that.Env[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &common_config.EnvValue{}
			}
			if q == nil {
				q = &common_config.EnvValue{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CompiledExtensionCommand) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CompiledExtensionCommand)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *CompiledExtensionCommand_CompiledExtensionCommandExec) EqualVT(that *CompiledExtensionCommand_CompiledExtensionCommandExec) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.ExecConfig == nil && that.ExecConfig != nil {
		return false
	} else if this.ExecConfig != nil {
		if that.ExecConfig == nil {
			return false
		}
		if !this.ExecConfig.(interface {
			EqualVT(isCompiledExtensionCommand_CompiledExtensionCommandExec_ExecConfig) bool
		}).EqualVT(that.ExecConfig) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CompiledExtensionCommand_CompiledExtensionCommandExec) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CompiledExtensionCommand_CompiledExtensionCommandExec)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CompiledExtensionCommand_CompiledExtensionCommandExec_TaskConfig) EqualVT(thatIface isCompiledExtensionCommand_CompiledExtensionCommandExec_ExecConfig) bool {
	that, ok := thatIface.(*CompiledExtensionCommand_CompiledExtensionCommandExec_TaskConfig)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.TaskConfig, that.TaskConfig; p != q {
		if p == nil {
			p = &common_config.TaskConfig{}
		}
		if q == nil {
			q = &common_config.TaskConfig{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CompiledExtensionCommand_CompiledExtensionCommandExec_KubernetesConfig) EqualVT(thatIface isCompiledExtensionCommand_CompiledExtensionCommandExec_ExecConfig) bool {
	that, ok := thatIface.(*CompiledExtensionCommand_CompiledExtensionCommandExec_KubernetesConfig)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.KubernetesConfig, that.KubernetesConfig; p != q {
		if p == nil {
			p = &common_config.KubernetesConfig{}
		}
		if q == nil {
			q = &common_config.KubernetesConfig{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CompiledExtensionCommand) EqualVT(that *CompiledExtensionCommand) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.NamePrefix != that.NamePrefix {
		return false
	}
	if !this.Command.EqualVT(that.Command) {
		return false
	}
	if !this.RuntimeExecution.EqualVT(that.RuntimeExecution) {
		return false
	}
	if len(this.Env) != len(that.Env) {
		return false
	}
	for i, vx := range this.Env {
		vy, ok := that.Env[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &common_config.EnvValue{}
			}
			if q == nil {
				q = &common_config.EnvValue{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CompiledExtensionCommand) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CompiledExtensionCommand)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *IacRunnerCommand) StableEqualVT(that *IacRunnerCommand) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Cmd != that.Cmd {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *IacRunnerCommand) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*IacRunnerCommand)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *IacRunnerCommand) EqualVT(that *IacRunnerCommand) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Cmd != that.Cmd {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *IacRunnerCommand) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*IacRunnerCommand)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *TerraformRunnerConfig) StableEqualVT(that *TerraformRunnerConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.ProxyRuntime.StableEqualVT(that.ProxyRuntime) {
		return false
	}
	if len(this.Env) != len(that.Env) {
		return false
	}
	for i, vx := range this.Env {
		vy, ok := that.Env[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &common_config.EnvValue{}
			}
			if q == nil {
				q = &common_config.EnvValue{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if len(this.Volumes) != len(that.Volumes) {
		return false
	}
	for i, vx := range this.Volumes {
		vy := that.Volumes[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &volumes.Volume{}
			}
			if q == nil {
				q = &volumes.Volume{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if len(this.PreRun) != len(that.PreRun) {
		return false
	}
	for i, vx := range this.PreRun {
		vy := that.PreRun[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &IacRunnerCommand{}
			}
			if q == nil {
				q = &IacRunnerCommand{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if !(*durationpb1.Duration)(this.PollInterval).StableEqualVT((*durationpb1.Duration)(that.PollInterval)) {
		return false
	}
	if this.RequireApprovalBeforeApply != that.RequireApprovalBeforeApply {
		return false
	}
	if !(*durationpb1.Duration)(this.SteadyStatePollInterval).StableEqualVT((*durationpb1.Duration)(that.SteadyStatePollInterval)) {
		return false
	}
	if !(*durationpb1.Duration)(this.ConvergenceGracePeriod).StableEqualVT((*durationpb1.Duration)(that.ConvergenceGracePeriod)) {
		return false
	}
	if !this.FetchRetryPolicy.StableEqualVT(that.FetchRetryPolicy) {
		return false
	}
	if !this.ApplyRetryPolicy.StableEqualVT(that.ApplyRetryPolicy) {
		return false
	}
	if this.DisableDriftDetection != that.DisableDriftDetection {
		return false
	}
	if !this.TaskResources.StableEqualVT(that.TaskResources) {
		return false
	}
	if this.ServiceAccount != that.ServiceAccount {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *TerraformRunnerConfig) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*TerraformRunnerConfig)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *TerraformRunnerConfig) EqualVT(that *TerraformRunnerConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.ProxyRuntime.EqualVT(that.ProxyRuntime) {
		return false
	}
	if len(this.Env) != len(that.Env) {
		return false
	}
	for i, vx := range this.Env {
		vy, ok := that.Env[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &common_config.EnvValue{}
			}
			if q == nil {
				q = &common_config.EnvValue{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if len(this.Volumes) != len(that.Volumes) {
		return false
	}
	for i, vx := range this.Volumes {
		vy := that.Volumes[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &volumes.Volume{}
			}
			if q == nil {
				q = &volumes.Volume{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if len(this.PreRun) != len(that.PreRun) {
		return false
	}
	for i, vx := range this.PreRun {
		vy := that.PreRun[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &IacRunnerCommand{}
			}
			if q == nil {
				q = &IacRunnerCommand{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if !(*durationpb1.Duration)(this.PollInterval).EqualVT((*durationpb1.Duration)(that.PollInterval)) {
		return false
	}
	if this.RequireApprovalBeforeApply != that.RequireApprovalBeforeApply {
		return false
	}
	if !(*durationpb1.Duration)(this.SteadyStatePollInterval).EqualVT((*durationpb1.Duration)(that.SteadyStatePollInterval)) {
		return false
	}
	if !(*durationpb1.Duration)(this.ConvergenceGracePeriod).EqualVT((*durationpb1.Duration)(that.ConvergenceGracePeriod)) {
		return false
	}
	if !this.FetchRetryPolicy.EqualVT(that.FetchRetryPolicy) {
		return false
	}
	if !this.ApplyRetryPolicy.EqualVT(that.ApplyRetryPolicy) {
		return false
	}
	if this.DisableDriftDetection != that.DisableDriftDetection {
		return false
	}
	if !this.TaskResources.EqualVT(that.TaskResources) {
		return false
	}
	if this.ServiceAccount != that.ServiceAccount {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *TerraformRunnerConfig) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*TerraformRunnerConfig)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *GKEClusterMetadata) StableEqualVT(that *GKEClusterMetadata) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.ProjectName != that.ProjectName {
		return false
	}
	if this.ClusterLocation != that.ClusterLocation {
		return false
	}
	if this.ClusterName != that.ClusterName {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GKEClusterMetadata) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GKEClusterMetadata)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *GKEClusterMetadata) EqualVT(that *GKEClusterMetadata) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.ProjectName != that.ProjectName {
		return false
	}
	if this.ClusterLocation != that.ClusterLocation {
		return false
	}
	if this.ClusterName != that.ClusterName {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GKEClusterMetadata) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GKEClusterMetadata)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ClusterMetadata) StableEqualVT(that *ClusterMetadata) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.ClusterMetadata == nil && that.ClusterMetadata != nil {
		return false
	} else if this.ClusterMetadata != nil {
		if that.ClusterMetadata == nil {
			return false
		}
		if !this.ClusterMetadata.(interface {
			StableEqualVT(isClusterMetadata_ClusterMetadata) bool
		}).StableEqualVT(that.ClusterMetadata) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ClusterMetadata) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ClusterMetadata)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ClusterMetadata_Gke) StableEqualVT(thatIface isClusterMetadata_ClusterMetadata) bool {
	that, ok := thatIface.(*ClusterMetadata_Gke)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Gke, that.Gke; p != q {
		if p == nil {
			p = &GKEClusterMetadata{}
		}
		if q == nil {
			q = &GKEClusterMetadata{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ClusterMetadata) EqualVT(that *ClusterMetadata) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.ClusterMetadata == nil && that.ClusterMetadata != nil {
		return false
	} else if this.ClusterMetadata != nil {
		if that.ClusterMetadata == nil {
			return false
		}
		if !this.ClusterMetadata.(interface {
			EqualVT(isClusterMetadata_ClusterMetadata) bool
		}).EqualVT(that.ClusterMetadata) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ClusterMetadata) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ClusterMetadata)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ClusterMetadata_Gke) EqualVT(thatIface isClusterMetadata_ClusterMetadata) bool {
	that, ok := thatIface.(*ClusterMetadata_Gke)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Gke, that.Gke; p != q {
		if p == nil {
			p = &GKEClusterMetadata{}
		}
		if q == nil {
			q = &GKEClusterMetadata{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *AwsEcsConfig_AccessKey) StableEqualVT(that *AwsEcsConfig_AccessKey) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.AwsAccessKeyId != that.AwsAccessKeyId {
		return false
	}
	if !this.AwsSecretAccessKey.StableEqualVT(that.AwsSecretAccessKey) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *AwsEcsConfig_AccessKey) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*AwsEcsConfig_AccessKey)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *AwsEcsConfig_InheritRole) StableEqualVT(that *AwsEcsConfig_InheritRole) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.K8SServiceAccount != that.K8SServiceAccount {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *AwsEcsConfig_InheritRole) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*AwsEcsConfig_InheritRole)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *AwsEcsConfig) StableEqualVT(that *AwsEcsConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Credentials == nil && that.Credentials != nil {
		return false
	} else if this.Credentials != nil {
		if that.Credentials == nil {
			return false
		}
		if !this.Credentials.(interface {
			StableEqualVT(isAwsEcsConfig_Credentials) bool
		}).StableEqualVT(that.Credentials) {
			return false
		}
	}
	if !this.ProxyRuntime.StableEqualVT(that.ProxyRuntime) {
		return false
	}
	if this.Region != that.Region {
		return false
	}
	if this.EcsCluster != that.EcsCluster {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *AwsEcsConfig) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*AwsEcsConfig)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *AwsEcsConfig_AccessKey_) StableEqualVT(thatIface isAwsEcsConfig_Credentials) bool {
	that, ok := thatIface.(*AwsEcsConfig_AccessKey_)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.AccessKey, that.AccessKey; p != q {
		if p == nil {
			p = &AwsEcsConfig_AccessKey{}
		}
		if q == nil {
			q = &AwsEcsConfig_AccessKey{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *AwsEcsConfig_InheritRoleFromRuntimeEnv) StableEqualVT(thatIface isAwsEcsConfig_Credentials) bool {
	that, ok := thatIface.(*AwsEcsConfig_InheritRoleFromRuntimeEnv)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.InheritRoleFromRuntimeEnv, that.InheritRoleFromRuntimeEnv; p != q {
		if p == nil {
			p = &AwsEcsConfig_InheritRole{}
		}
		if q == nil {
			q = &AwsEcsConfig_InheritRole{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *AwsEcsConfig_AccessKey) EqualVT(that *AwsEcsConfig_AccessKey) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.AwsAccessKeyId != that.AwsAccessKeyId {
		return false
	}
	if !this.AwsSecretAccessKey.EqualVT(that.AwsSecretAccessKey) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *AwsEcsConfig_AccessKey) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*AwsEcsConfig_AccessKey)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *AwsEcsConfig_InheritRole) EqualVT(that *AwsEcsConfig_InheritRole) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.K8SServiceAccount != that.K8SServiceAccount {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *AwsEcsConfig_InheritRole) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*AwsEcsConfig_InheritRole)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *AwsEcsConfig) EqualVT(that *AwsEcsConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Credentials == nil && that.Credentials != nil {
		return false
	} else if this.Credentials != nil {
		if that.Credentials == nil {
			return false
		}
		if !this.Credentials.(interface {
			EqualVT(isAwsEcsConfig_Credentials) bool
		}).EqualVT(that.Credentials) {
			return false
		}
	}
	if !this.ProxyRuntime.EqualVT(that.ProxyRuntime) {
		return false
	}
	if this.Region != that.Region {
		return false
	}
	if this.EcsCluster != that.EcsCluster {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *AwsEcsConfig) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*AwsEcsConfig)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *AwsEcsConfig_AccessKey_) EqualVT(thatIface isAwsEcsConfig_Credentials) bool {
	that, ok := thatIface.(*AwsEcsConfig_AccessKey_)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.AccessKey, that.AccessKey; p != q {
		if p == nil {
			p = &AwsEcsConfig_AccessKey{}
		}
		if q == nil {
			q = &AwsEcsConfig_AccessKey{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *AwsEcsConfig_InheritRoleFromRuntimeEnv) EqualVT(thatIface isAwsEcsConfig_Credentials) bool {
	that, ok := thatIface.(*AwsEcsConfig_InheritRoleFromRuntimeEnv)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.InheritRoleFromRuntimeEnv, that.InheritRoleFromRuntimeEnv; p != q {
		if p == nil {
			p = &AwsEcsConfig_InheritRole{}
		}
		if q == nil {
			q = &AwsEcsConfig_InheritRole{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *GoogleCloudRunConfig) StableEqualVT(that *GoogleCloudRunConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Credentials == nil && that.Credentials != nil {
		return false
	} else if this.Credentials != nil {
		if that.Credentials == nil {
			return false
		}
		if !this.Credentials.(interface {
			StableEqualVT(isGoogleCloudRunConfig_Credentials) bool
		}).StableEqualVT(that.Credentials) {
			return false
		}
	}
	if !this.ProxyRuntime.StableEqualVT(that.ProxyRuntime) {
		return false
	}
	if this.Project != that.Project {
		return false
	}
	if this.Region != that.Region {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GoogleCloudRunConfig) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GoogleCloudRunConfig)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *GoogleCloudRunConfig_ServiceAccountJson) StableEqualVT(thatIface isGoogleCloudRunConfig_Credentials) bool {
	that, ok := thatIface.(*GoogleCloudRunConfig_ServiceAccountJson)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ServiceAccountJson, that.ServiceAccountJson; p != q {
		if p == nil {
			p = &common_config.SecretReferenceValue{}
		}
		if q == nil {
			q = &common_config.SecretReferenceValue{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *GoogleCloudRunConfig) EqualVT(that *GoogleCloudRunConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Credentials == nil && that.Credentials != nil {
		return false
	} else if this.Credentials != nil {
		if that.Credentials == nil {
			return false
		}
		if !this.Credentials.(interface {
			EqualVT(isGoogleCloudRunConfig_Credentials) bool
		}).EqualVT(that.Credentials) {
			return false
		}
	}
	if !this.ProxyRuntime.EqualVT(that.ProxyRuntime) {
		return false
	}
	if this.Project != that.Project {
		return false
	}
	if this.Region != that.Region {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GoogleCloudRunConfig) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GoogleCloudRunConfig)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *GoogleCloudRunConfig_ServiceAccountJson) EqualVT(thatIface isGoogleCloudRunConfig_Credentials) bool {
	that, ok := thatIface.(*GoogleCloudRunConfig_ServiceAccountJson)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ServiceAccountJson, that.ServiceAccountJson; p != q {
		if p == nil {
			p = &common_config.SecretReferenceValue{}
		}
		if q == nil {
			q = &common_config.SecretReferenceValue{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *FlyConfig) StableEqualVT(that *FlyConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Credentials == nil && that.Credentials != nil {
		return false
	} else if this.Credentials != nil {
		if that.Credentials == nil {
			return false
		}
		if !this.Credentials.(interface {
			StableEqualVT(isFlyConfig_Credentials) bool
		}).StableEqualVT(that.Credentials) {
			return false
		}
	}
	if !this.ProxyRuntime.StableEqualVT(that.ProxyRuntime) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *FlyConfig) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*FlyConfig)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *FlyConfig_FlyApiToken) StableEqualVT(thatIface isFlyConfig_Credentials) bool {
	that, ok := thatIface.(*FlyConfig_FlyApiToken)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.FlyApiToken, that.FlyApiToken; p != q {
		if p == nil {
			p = &common_config.SecretReferenceValue{}
		}
		if q == nil {
			q = &common_config.SecretReferenceValue{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *FlyConfig) EqualVT(that *FlyConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Credentials == nil && that.Credentials != nil {
		return false
	} else if this.Credentials != nil {
		if that.Credentials == nil {
			return false
		}
		if !this.Credentials.(interface {
			EqualVT(isFlyConfig_Credentials) bool
		}).EqualVT(that.Credentials) {
			return false
		}
	}
	if !this.ProxyRuntime.EqualVT(that.ProxyRuntime) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *FlyConfig) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*FlyConfig)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *FlyConfig_FlyApiToken) EqualVT(thatIface isFlyConfig_Credentials) bool {
	that, ok := thatIface.(*FlyConfig_FlyApiToken)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.FlyApiToken, that.FlyApiToken; p != q {
		if p == nil {
			p = &common_config.SecretReferenceValue{}
		}
		if q == nil {
			q = &common_config.SecretReferenceValue{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ClusterConfig_Kubecost) StableEqualVT(that *ClusterConfig_Kubecost) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Enabled != that.Enabled {
		return false
	}
	if this.Managed != that.Managed {
		return false
	}
	if this.KubecostNamespace != that.KubecostNamespace {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ClusterConfig_Kubecost) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ClusterConfig_Kubecost)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ClusterConfig_Datadog) StableEqualVT(that *ClusterConfig_Datadog) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Enabled != that.Enabled {
		return false
	}
	if this.Managed != that.Managed {
		return false
	}
	if this.DatadogNamespace != that.DatadogNamespace {
		return false
	}
	if this.ApiKey != that.ApiKey {
		return false
	}
	if this.Site != that.Site {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ClusterConfig_Datadog) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ClusterConfig_Datadog)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ClusterConfig_ALBIngress) StableEqualVT(that *ClusterConfig_ALBIngress) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Enabled != that.Enabled {
		return false
	}
	if this.IngressClass != that.IngressClass {
		return false
	}
	if len(this.DefaultBalancerAttributes) != len(that.DefaultBalancerAttributes) {
		return false
	}
	for i, vx := range this.DefaultBalancerAttributes {
		vy := that.DefaultBalancerAttributes[i]
		if vx != vy {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ClusterConfig_ALBIngress) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ClusterConfig_ALBIngress)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ClusterConfig_ArgoRollouts_AnalysisTemplate) StableEqualVT(that *ClusterConfig_ArgoRollouts_AnalysisTemplate) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	if len(this.ArgMapping) != len(that.ArgMapping) {
		return false
	}
	for i, vx := range this.ArgMapping {
		vy, ok := that.ArgMapping[i]
		if !ok {
			return false
		}
		if vx != vy {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ClusterConfig_ArgoRollouts_AnalysisTemplate) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ClusterConfig_ArgoRollouts_AnalysisTemplate)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ClusterConfig_ArgoRollouts) StableEqualVT(that *ClusterConfig_ArgoRollouts) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Enabled != that.Enabled {
		return false
	}
	if len(this.Templates) != len(that.Templates) {
		return false
	}
	for i, vx := range this.Templates {
		vy := that.Templates[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &ClusterConfig_ArgoRollouts_AnalysisTemplate{}
			}
			if q == nil {
				q = &ClusterConfig_ArgoRollouts_AnalysisTemplate{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ClusterConfig_ArgoRollouts) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ClusterConfig_ArgoRollouts)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ClusterConfig_GKEIngress) StableEqualVT(that *ClusterConfig_GKEIngress) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Enabled != that.Enabled {
		return false
	}
	if this.ContainerNative != that.ContainerNative {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ClusterConfig_GKEIngress) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ClusterConfig_GKEIngress)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ClusterConfig) StableEqualVT(that *ClusterConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.ClusterOneof == nil && that.ClusterOneof != nil {
		return false
	} else if this.ClusterOneof != nil {
		if that.ClusterOneof == nil {
			return false
		}
		if !this.ClusterOneof.(interface {
			StableEqualVT(isClusterConfig_ClusterOneof) bool
		}).StableEqualVT(that.ClusterOneof) {
			return false
		}
	}
	if !this.Kubecost.StableEqualVT(that.Kubecost) {
		return false
	}
	if !this.Datadog.StableEqualVT(that.Datadog) {
		return false
	}
	if !this.AlbIngress.StableEqualVT(that.AlbIngress) {
		return false
	}
	if !this.ArgoRollouts.StableEqualVT(that.ArgoRollouts) {
		return false
	}
	if !this.GkeIngress.StableEqualVT(that.GkeIngress) {
		return false
	}
	if this.CloudProvider != that.CloudProvider {
		return false
	}
	if !this.SelfManagedGkeIngress.StableEqualVT(that.SelfManagedGkeIngress) {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	if len(this.Labels) != len(that.Labels) {
		return false
	}
	for i, vx := range this.Labels {
		vy := that.Labels[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &labels.LabelDefinition{}
			}
			if q == nil {
				q = &labels.LabelDefinition{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if !this.DetectedClusterMetadata.StableEqualVT(that.DetectedClusterMetadata) {
		return false
	}
	if !this.UserSuppliedClusterMetadata.StableEqualVT(that.UserSuppliedClusterMetadata) {
		return false
	}
	if !this.AutoRollback.StableEqualVT(that.AutoRollback) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ClusterConfig) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ClusterConfig)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ClusterConfig_Fake) StableEqualVT(thatIface isClusterConfig_ClusterOneof) bool {
	that, ok := thatIface.(*ClusterConfig_Fake)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Fake, that.Fake; p != q {
		if p == nil {
			p = &FakeClusterConfig{}
		}
		if q == nil {
			q = &FakeClusterConfig{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ClusterConfig_Extension) StableEqualVT(thatIface isClusterConfig_ClusterOneof) bool {
	that, ok := thatIface.(*ClusterConfig_Extension)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Extension, that.Extension; p != q {
		if p == nil {
			p = &ExtensionClusterConfig{}
		}
		if q == nil {
			q = &ExtensionClusterConfig{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ClusterConfig_TerraformRunner) StableEqualVT(thatIface isClusterConfig_ClusterOneof) bool {
	that, ok := thatIface.(*ClusterConfig_TerraformRunner)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.TerraformRunner, that.TerraformRunner; p != q {
		if p == nil {
			p = &TerraformRunnerConfig{}
		}
		if q == nil {
			q = &TerraformRunnerConfig{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ClusterConfig_PulumiRunner) StableEqualVT(thatIface isClusterConfig_ClusterOneof) bool {
	that, ok := thatIface.(*ClusterConfig_PulumiRunner)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.PulumiRunner, that.PulumiRunner; p != q {
		if p == nil {
			p = &TerraformRunnerConfig{}
		}
		if q == nil {
			q = &TerraformRunnerConfig{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ClusterConfig_AwsEcs) StableEqualVT(thatIface isClusterConfig_ClusterOneof) bool {
	that, ok := thatIface.(*ClusterConfig_AwsEcs)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.AwsEcs, that.AwsEcs; p != q {
		if p == nil {
			p = &AwsEcsConfig{}
		}
		if q == nil {
			q = &AwsEcsConfig{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ClusterConfig_GoogleCloudRun) StableEqualVT(thatIface isClusterConfig_ClusterOneof) bool {
	that, ok := thatIface.(*ClusterConfig_GoogleCloudRun)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.GoogleCloudRun, that.GoogleCloudRun; p != q {
		if p == nil {
			p = &GoogleCloudRunConfig{}
		}
		if q == nil {
			q = &GoogleCloudRunConfig{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ClusterConfig_Custom) StableEqualVT(thatIface isClusterConfig_ClusterOneof) bool {
	that, ok := thatIface.(*ClusterConfig_Custom)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Custom, that.Custom; p != q {
		if p == nil {
			p = &ExtensionClusterConfig{}
		}
		if q == nil {
			q = &ExtensionClusterConfig{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ClusterConfig_Fly) StableEqualVT(thatIface isClusterConfig_ClusterOneof) bool {
	that, ok := thatIface.(*ClusterConfig_Fly)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Fly, that.Fly; p != q {
		if p == nil {
			p = &FlyConfig{}
		}
		if q == nil {
			q = &FlyConfig{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ClusterConfig_Kubecost) EqualVT(that *ClusterConfig_Kubecost) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Enabled != that.Enabled {
		return false
	}
	if this.Managed != that.Managed {
		return false
	}
	if this.KubecostNamespace != that.KubecostNamespace {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ClusterConfig_Kubecost) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ClusterConfig_Kubecost)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ClusterConfig_Datadog) EqualVT(that *ClusterConfig_Datadog) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Enabled != that.Enabled {
		return false
	}
	if this.Managed != that.Managed {
		return false
	}
	if this.DatadogNamespace != that.DatadogNamespace {
		return false
	}
	if this.ApiKey != that.ApiKey {
		return false
	}
	if this.Site != that.Site {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ClusterConfig_Datadog) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ClusterConfig_Datadog)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ClusterConfig_ALBIngress) EqualVT(that *ClusterConfig_ALBIngress) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Enabled != that.Enabled {
		return false
	}
	if this.IngressClass != that.IngressClass {
		return false
	}
	if len(this.DefaultBalancerAttributes) != len(that.DefaultBalancerAttributes) {
		return false
	}
	for i, vx := range this.DefaultBalancerAttributes {
		vy := that.DefaultBalancerAttributes[i]
		if vx != vy {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ClusterConfig_ALBIngress) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ClusterConfig_ALBIngress)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ClusterConfig_ArgoRollouts_AnalysisTemplate) EqualVT(that *ClusterConfig_ArgoRollouts_AnalysisTemplate) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	if len(this.ArgMapping) != len(that.ArgMapping) {
		return false
	}
	for i, vx := range this.ArgMapping {
		vy, ok := that.ArgMapping[i]
		if !ok {
			return false
		}
		if vx != vy {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ClusterConfig_ArgoRollouts_AnalysisTemplate) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ClusterConfig_ArgoRollouts_AnalysisTemplate)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ClusterConfig_ArgoRollouts) EqualVT(that *ClusterConfig_ArgoRollouts) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Enabled != that.Enabled {
		return false
	}
	if len(this.Templates) != len(that.Templates) {
		return false
	}
	for i, vx := range this.Templates {
		vy := that.Templates[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &ClusterConfig_ArgoRollouts_AnalysisTemplate{}
			}
			if q == nil {
				q = &ClusterConfig_ArgoRollouts_AnalysisTemplate{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ClusterConfig_ArgoRollouts) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ClusterConfig_ArgoRollouts)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ClusterConfig_GKEIngress) EqualVT(that *ClusterConfig_GKEIngress) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Enabled != that.Enabled {
		return false
	}
	if this.ContainerNative != that.ContainerNative {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ClusterConfig_GKEIngress) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ClusterConfig_GKEIngress)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ClusterConfig) EqualVT(that *ClusterConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.ClusterOneof == nil && that.ClusterOneof != nil {
		return false
	} else if this.ClusterOneof != nil {
		if that.ClusterOneof == nil {
			return false
		}
		if !this.ClusterOneof.(interface {
			EqualVT(isClusterConfig_ClusterOneof) bool
		}).EqualVT(that.ClusterOneof) {
			return false
		}
	}
	if !this.Kubecost.EqualVT(that.Kubecost) {
		return false
	}
	if !this.Datadog.EqualVT(that.Datadog) {
		return false
	}
	if !this.AlbIngress.EqualVT(that.AlbIngress) {
		return false
	}
	if !this.ArgoRollouts.EqualVT(that.ArgoRollouts) {
		return false
	}
	if !this.GkeIngress.EqualVT(that.GkeIngress) {
		return false
	}
	if this.CloudProvider != that.CloudProvider {
		return false
	}
	if !this.SelfManagedGkeIngress.EqualVT(that.SelfManagedGkeIngress) {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	if len(this.Labels) != len(that.Labels) {
		return false
	}
	for i, vx := range this.Labels {
		vy := that.Labels[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &labels.LabelDefinition{}
			}
			if q == nil {
				q = &labels.LabelDefinition{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if !this.DetectedClusterMetadata.EqualVT(that.DetectedClusterMetadata) {
		return false
	}
	if !this.UserSuppliedClusterMetadata.EqualVT(that.UserSuppliedClusterMetadata) {
		return false
	}
	if !this.AutoRollback.EqualVT(that.AutoRollback) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ClusterConfig) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ClusterConfig)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ClusterConfig_Fake) EqualVT(thatIface isClusterConfig_ClusterOneof) bool {
	that, ok := thatIface.(*ClusterConfig_Fake)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Fake, that.Fake; p != q {
		if p == nil {
			p = &FakeClusterConfig{}
		}
		if q == nil {
			q = &FakeClusterConfig{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ClusterConfig_Extension) EqualVT(thatIface isClusterConfig_ClusterOneof) bool {
	that, ok := thatIface.(*ClusterConfig_Extension)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Extension, that.Extension; p != q {
		if p == nil {
			p = &ExtensionClusterConfig{}
		}
		if q == nil {
			q = &ExtensionClusterConfig{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ClusterConfig_TerraformRunner) EqualVT(thatIface isClusterConfig_ClusterOneof) bool {
	that, ok := thatIface.(*ClusterConfig_TerraformRunner)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.TerraformRunner, that.TerraformRunner; p != q {
		if p == nil {
			p = &TerraformRunnerConfig{}
		}
		if q == nil {
			q = &TerraformRunnerConfig{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ClusterConfig_PulumiRunner) EqualVT(thatIface isClusterConfig_ClusterOneof) bool {
	that, ok := thatIface.(*ClusterConfig_PulumiRunner)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.PulumiRunner, that.PulumiRunner; p != q {
		if p == nil {
			p = &TerraformRunnerConfig{}
		}
		if q == nil {
			q = &TerraformRunnerConfig{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ClusterConfig_AwsEcs) EqualVT(thatIface isClusterConfig_ClusterOneof) bool {
	that, ok := thatIface.(*ClusterConfig_AwsEcs)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.AwsEcs, that.AwsEcs; p != q {
		if p == nil {
			p = &AwsEcsConfig{}
		}
		if q == nil {
			q = &AwsEcsConfig{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ClusterConfig_GoogleCloudRun) EqualVT(thatIface isClusterConfig_ClusterOneof) bool {
	that, ok := thatIface.(*ClusterConfig_GoogleCloudRun)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.GoogleCloudRun, that.GoogleCloudRun; p != q {
		if p == nil {
			p = &GoogleCloudRunConfig{}
		}
		if q == nil {
			q = &GoogleCloudRunConfig{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ClusterConfig_Custom) EqualVT(thatIface isClusterConfig_ClusterOneof) bool {
	that, ok := thatIface.(*ClusterConfig_Custom)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Custom, that.Custom; p != q {
		if p == nil {
			p = &ExtensionClusterConfig{}
		}
		if q == nil {
			q = &ExtensionClusterConfig{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ClusterConfig_Fly) EqualVT(thatIface isClusterConfig_ClusterOneof) bool {
	that, ok := thatIface.(*ClusterConfig_Fly)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Fly, that.Fly; p != q {
		if p == nil {
			p = &FlyConfig{}
		}
		if q == nil {
			q = &FlyConfig{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}
