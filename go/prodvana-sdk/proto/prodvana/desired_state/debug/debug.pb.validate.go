// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: prodvana/desired_state/debug/debug.proto

package debug

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	model "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/desired_state/model"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = model.Status(0)
)

// Validate checks the field values on EntityDumpState with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EntityDumpState) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EntityDumpState with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EntityDumpStateMultiError, or nil if none found.
func (m *EntityDumpState) ValidateAll() error {
	return m.validate(true)
}

func (m *EntityDumpState) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EntityDumpStateValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EntityDumpStateValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EntityDumpStateValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLastManagerUpdateTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EntityDumpStateValidationError{
					field:  "LastManagerUpdateTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EntityDumpStateValidationError{
					field:  "LastManagerUpdateTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastManagerUpdateTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EntityDumpStateValidationError{
				field:  "LastManagerUpdateTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAnnotations()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EntityDumpStateValidationError{
					field:  "Annotations",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EntityDumpStateValidationError{
					field:  "Annotations",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAnnotations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EntityDumpStateValidationError{
				field:  "Annotations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	// no validation rules for SimpleStatus

	if all {
		switch v := interface{}(m.GetControl()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EntityDumpStateValidationError{
					field:  "Control",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EntityDumpStateValidationError{
					field:  "Control",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetControl()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EntityDumpStateValidationError{
				field:  "Control",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetIoState()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EntityDumpStateValidationError{
					field:  "IoState",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EntityDumpStateValidationError{
					field:  "IoState",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIoState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EntityDumpStateValidationError{
				field:  "IoState",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetLogs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EntityDumpStateValidationError{
						field:  fmt.Sprintf("Logs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EntityDumpStateValidationError{
						field:  fmt.Sprintf("Logs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EntityDumpStateValidationError{
					field:  fmt.Sprintf("Logs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetDesiredState()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EntityDumpStateValidationError{
					field:  "DesiredState",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EntityDumpStateValidationError{
					field:  "DesiredState",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDesiredState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EntityDumpStateValidationError{
				field:  "DesiredState",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFetchedState()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EntityDumpStateValidationError{
					field:  "FetchedState",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EntityDumpStateValidationError{
					field:  "FetchedState",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFetchedState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EntityDumpStateValidationError{
				field:  "FetchedState",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTargetState()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EntityDumpStateValidationError{
					field:  "TargetState",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EntityDumpStateValidationError{
					field:  "TargetState",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTargetState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EntityDumpStateValidationError{
				field:  "TargetState",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetChildStates() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EntityDumpStateValidationError{
						field:  fmt.Sprintf("ChildStates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EntityDumpStateValidationError{
						field:  fmt.Sprintf("ChildStates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EntityDumpStateValidationError{
					field:  fmt.Sprintf("ChildStates[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Absent

	// no validation rules for Deleted

	// no validation rules for Observer

	// no validation rules for Stale

	if len(errors) > 0 {
		return EntityDumpStateMultiError(errors)
	}

	return nil
}

// EntityDumpStateMultiError is an error wrapping multiple validation errors
// returned by EntityDumpState.ValidateAll() if the designated constraints
// aren't met.
type EntityDumpStateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EntityDumpStateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EntityDumpStateMultiError) AllErrors() []error { return m }

// EntityDumpStateValidationError is the validation error returned by
// EntityDumpState.Validate if the designated constraints aren't met.
type EntityDumpStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EntityDumpStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EntityDumpStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EntityDumpStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EntityDumpStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EntityDumpStateValidationError) ErrorName() string { return "EntityDumpStateValidationError" }

// Error satisfies the builtin error interface
func (e EntityDumpStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEntityDumpState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EntityDumpStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EntityDumpStateValidationError{}

// Validate checks the field values on DumpState with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DumpState) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DumpState with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DumpStateMultiError, or nil
// if none found.
func (m *DumpState) ValidateAll() error {
	return m.validate(true)
}

func (m *DumpState) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEntities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DumpStateValidationError{
						field:  fmt.Sprintf("Entities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DumpStateValidationError{
						field:  fmt.Sprintf("Entities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DumpStateValidationError{
					field:  fmt.Sprintf("Entities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetApplicationConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DumpStateValidationError{
					field:  "ApplicationConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DumpStateValidationError{
					field:  "ApplicationConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApplicationConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DumpStateValidationError{
				field:  "ApplicationConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCompiledApplicationConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DumpStateValidationError{
					field:  "CompiledApplicationConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DumpStateValidationError{
					field:  "CompiledApplicationConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCompiledApplicationConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DumpStateValidationError{
				field:  "CompiledApplicationConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetServiceConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DumpStateValidationError{
					field:  "ServiceConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DumpStateValidationError{
					field:  "ServiceConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetServiceConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DumpStateValidationError{
				field:  "ServiceConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCompiledServiceConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DumpStateValidationError{
					field:  "CompiledServiceConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DumpStateValidationError{
					field:  "CompiledServiceConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCompiledServiceConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DumpStateValidationError{
				field:  "CompiledServiceConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DumpStateMultiError(errors)
	}

	return nil
}

// DumpStateMultiError is an error wrapping multiple validation errors returned
// by DumpState.ValidateAll() if the designated constraints aren't met.
type DumpStateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DumpStateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DumpStateMultiError) AllErrors() []error { return m }

// DumpStateValidationError is the validation error returned by
// DumpState.Validate if the designated constraints aren't met.
type DumpStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DumpStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DumpStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DumpStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DumpStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DumpStateValidationError) ErrorName() string { return "DumpStateValidationError" }

// Error satisfies the builtin error interface
func (e DumpStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDumpState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DumpStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DumpStateValidationError{}

// Validate checks the field values on EntityDumpState_IOState with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EntityDumpState_IOState) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EntityDumpState_IOState with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EntityDumpState_IOStateMultiError, or nil if none found.
func (m *EntityDumpState_IOState) ValidateAll() error {
	return m.validate(true)
}

func (m *EntityDumpState_IOState) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLastFetchedTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EntityDumpState_IOStateValidationError{
					field:  "LastFetchedTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EntityDumpState_IOStateValidationError{
					field:  "LastFetchedTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastFetchedTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EntityDumpState_IOStateValidationError{
				field:  "LastFetchedTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLastAppliedTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EntityDumpState_IOStateValidationError{
					field:  "LastAppliedTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EntityDumpState_IOStateValidationError{
					field:  "LastAppliedTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastAppliedTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EntityDumpState_IOStateValidationError{
				field:  "LastAppliedTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExpectedNextApplyTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EntityDumpState_IOStateValidationError{
					field:  "ExpectedNextApplyTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EntityDumpState_IOStateValidationError{
					field:  "ExpectedNextApplyTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpectedNextApplyTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EntityDumpState_IOStateValidationError{
				field:  "ExpectedNextApplyTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EntityDumpState_IOStateMultiError(errors)
	}

	return nil
}

// EntityDumpState_IOStateMultiError is an error wrapping multiple validation
// errors returned by EntityDumpState_IOState.ValidateAll() if the designated
// constraints aren't met.
type EntityDumpState_IOStateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EntityDumpState_IOStateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EntityDumpState_IOStateMultiError) AllErrors() []error { return m }

// EntityDumpState_IOStateValidationError is the validation error returned by
// EntityDumpState_IOState.Validate if the designated constraints aren't met.
type EntityDumpState_IOStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EntityDumpState_IOStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EntityDumpState_IOStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EntityDumpState_IOStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EntityDumpState_IOStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EntityDumpState_IOStateValidationError) ErrorName() string {
	return "EntityDumpState_IOStateValidationError"
}

// Error satisfies the builtin error interface
func (e EntityDumpState_IOStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEntityDumpState_IOState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EntityDumpState_IOStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EntityDumpState_IOStateValidationError{}

// Validate checks the field values on EntityDumpState_ChildState with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EntityDumpState_ChildState) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EntityDumpState_ChildState with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EntityDumpState_ChildStateMultiError, or nil if none found.
func (m *EntityDumpState_ChildState) ValidateAll() error {
	return m.validate(true)
}

func (m *EntityDumpState_ChildState) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EntityDumpState_ChildStateValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EntityDumpState_ChildStateValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EntityDumpState_ChildStateValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	if len(errors) > 0 {
		return EntityDumpState_ChildStateMultiError(errors)
	}

	return nil
}

// EntityDumpState_ChildStateMultiError is an error wrapping multiple
// validation errors returned by EntityDumpState_ChildState.ValidateAll() if
// the designated constraints aren't met.
type EntityDumpState_ChildStateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EntityDumpState_ChildStateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EntityDumpState_ChildStateMultiError) AllErrors() []error { return m }

// EntityDumpState_ChildStateValidationError is the validation error returned
// by EntityDumpState_ChildState.Validate if the designated constraints aren't met.
type EntityDumpState_ChildStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EntityDumpState_ChildStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EntityDumpState_ChildStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EntityDumpState_ChildStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EntityDumpState_ChildStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EntityDumpState_ChildStateValidationError) ErrorName() string {
	return "EntityDumpState_ChildStateValidationError"
}

// Error satisfies the builtin error interface
func (e EntityDumpState_ChildStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEntityDumpState_ChildState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EntityDumpState_ChildStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EntityDumpState_ChildStateValidationError{}
