// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: prodvana/desired_state/manager.proto

package desired_state

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	async_task "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/async_task"

	model "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/desired_state/model"

	version "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/version"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = async_task.TaskStatus(0)

	_ = model.Status(0)

	_ = version.Source(0)
)

// Validate checks the field values on SetDesiredStateMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetDesiredStateMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetDesiredStateMetadata with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetDesiredStateMetadataMultiError, or nil if none found.
func (m *SetDesiredStateMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *SetDesiredStateMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Rollback

	// no validation rules for BypassPreconditionsAndProtections

	if len(errors) > 0 {
		return SetDesiredStateMetadataMultiError(errors)
	}

	return nil
}

// SetDesiredStateMetadataMultiError is an error wrapping multiple validation
// errors returned by SetDesiredStateMetadata.ValidateAll() if the designated
// constraints aren't met.
type SetDesiredStateMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetDesiredStateMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetDesiredStateMetadataMultiError) AllErrors() []error { return m }

// SetDesiredStateMetadataValidationError is the validation error returned by
// SetDesiredStateMetadata.Validate if the designated constraints aren't met.
type SetDesiredStateMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetDesiredStateMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetDesiredStateMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetDesiredStateMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetDesiredStateMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetDesiredStateMetadataValidationError) ErrorName() string {
	return "SetDesiredStateMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e SetDesiredStateMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetDesiredStateMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetDesiredStateMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetDesiredStateMetadataValidationError{}

// Validate checks the field values on SetDesiredStateReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetDesiredStateReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetDesiredStateReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetDesiredStateReqMultiError, or nil if none found.
func (m *SetDesiredStateReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetDesiredStateReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetDesiredState() == nil {
		err := SetDesiredStateReqValidationError{
			field:  "DesiredState",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetDesiredState()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetDesiredStateReqValidationError{
					field:  "DesiredState",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetDesiredStateReqValidationError{
					field:  "DesiredState",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDesiredState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetDesiredStateReqValidationError{
				field:  "DesiredState",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Rollback

	// no validation rules for BypassPreconditionsAndProtections

	// no validation rules for Source

	if all {
		switch v := interface{}(m.GetSourceMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetDesiredStateReqValidationError{
					field:  "SourceMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetDesiredStateReqValidationError{
					field:  "SourceMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSourceMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetDesiredStateReqValidationError{
				field:  "SourceMetadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ForceAsyncSetDesiredState

	if len(errors) > 0 {
		return SetDesiredStateReqMultiError(errors)
	}

	return nil
}

// SetDesiredStateReqMultiError is an error wrapping multiple validation errors
// returned by SetDesiredStateReq.ValidateAll() if the designated constraints
// aren't met.
type SetDesiredStateReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetDesiredStateReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetDesiredStateReqMultiError) AllErrors() []error { return m }

// SetDesiredStateReqValidationError is the validation error returned by
// SetDesiredStateReq.Validate if the designated constraints aren't met.
type SetDesiredStateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetDesiredStateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetDesiredStateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetDesiredStateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetDesiredStateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetDesiredStateReqValidationError) ErrorName() string {
	return "SetDesiredStateReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetDesiredStateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetDesiredStateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetDesiredStateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetDesiredStateReqValidationError{}

// Validate checks the field values on ValidateDesiredStateReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ValidateDesiredStateReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidateDesiredStateReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ValidateDesiredStateReqMultiError, or nil if none found.
func (m *ValidateDesiredStateReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidateDesiredStateReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetDesiredState() == nil {
		err := ValidateDesiredStateReqValidationError{
			field:  "DesiredState",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetDesiredState()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ValidateDesiredStateReqValidationError{
					field:  "DesiredState",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ValidateDesiredStateReqValidationError{
					field:  "DesiredState",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDesiredState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ValidateDesiredStateReqValidationError{
				field:  "DesiredState",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Rollback

	// no validation rules for BypassPreconditionsAndProtections

	for idx, item := range m.GetServiceInstanceConfigs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ValidateDesiredStateReqValidationError{
						field:  fmt.Sprintf("ServiceInstanceConfigs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ValidateDesiredStateReqValidationError{
						field:  fmt.Sprintf("ServiceInstanceConfigs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ValidateDesiredStateReqValidationError{
					field:  fmt.Sprintf("ServiceInstanceConfigs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for LabelExpansionOnly

	// no validation rules for DisregardServiceVersions

	if len(errors) > 0 {
		return ValidateDesiredStateReqMultiError(errors)
	}

	return nil
}

// ValidateDesiredStateReqMultiError is an error wrapping multiple validation
// errors returned by ValidateDesiredStateReq.ValidateAll() if the designated
// constraints aren't met.
type ValidateDesiredStateReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidateDesiredStateReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidateDesiredStateReqMultiError) AllErrors() []error { return m }

// ValidateDesiredStateReqValidationError is the validation error returned by
// ValidateDesiredStateReq.Validate if the designated constraints aren't met.
type ValidateDesiredStateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateDesiredStateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateDesiredStateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateDesiredStateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateDesiredStateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateDesiredStateReqValidationError) ErrorName() string {
	return "ValidateDesiredStateReqValidationError"
}

// Error satisfies the builtin error interface
func (e ValidateDesiredStateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateDesiredStateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateDesiredStateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateDesiredStateReqValidationError{}

// Validate checks the field values on SetDesiredStateResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetDesiredStateResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetDesiredStateResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetDesiredStateRespMultiError, or nil if none found.
func (m *SetDesiredStateResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SetDesiredStateResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DesiredStateId

	if len(errors) > 0 {
		return SetDesiredStateRespMultiError(errors)
	}

	return nil
}

// SetDesiredStateRespMultiError is an error wrapping multiple validation
// errors returned by SetDesiredStateResp.ValidateAll() if the designated
// constraints aren't met.
type SetDesiredStateRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetDesiredStateRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetDesiredStateRespMultiError) AllErrors() []error { return m }

// SetDesiredStateRespValidationError is the validation error returned by
// SetDesiredStateResp.Validate if the designated constraints aren't met.
type SetDesiredStateRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetDesiredStateRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetDesiredStateRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetDesiredStateRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetDesiredStateRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetDesiredStateRespValidationError) ErrorName() string {
	return "SetDesiredStateRespValidationError"
}

// Error satisfies the builtin error interface
func (e SetDesiredStateRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetDesiredStateResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetDesiredStateRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetDesiredStateRespValidationError{}

// Validate checks the field values on PreviewEntityGraphResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PreviewEntityGraphResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PreviewEntityGraphResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PreviewEntityGraphRespMultiError, or nil if none found.
func (m *PreviewEntityGraphResp) ValidateAll() error {
	return m.validate(true)
}

func (m *PreviewEntityGraphResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEntityGraph()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PreviewEntityGraphRespValidationError{
					field:  "EntityGraph",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PreviewEntityGraphRespValidationError{
					field:  "EntityGraph",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEntityGraph()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PreviewEntityGraphRespValidationError{
				field:  "EntityGraph",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DesiredStateId

	if len(errors) > 0 {
		return PreviewEntityGraphRespMultiError(errors)
	}

	return nil
}

// PreviewEntityGraphRespMultiError is an error wrapping multiple validation
// errors returned by PreviewEntityGraphResp.ValidateAll() if the designated
// constraints aren't met.
type PreviewEntityGraphRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PreviewEntityGraphRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PreviewEntityGraphRespMultiError) AllErrors() []error { return m }

// PreviewEntityGraphRespValidationError is the validation error returned by
// PreviewEntityGraphResp.Validate if the designated constraints aren't met.
type PreviewEntityGraphRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PreviewEntityGraphRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PreviewEntityGraphRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PreviewEntityGraphRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PreviewEntityGraphRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PreviewEntityGraphRespValidationError) ErrorName() string {
	return "PreviewEntityGraphRespValidationError"
}

// Error satisfies the builtin error interface
func (e PreviewEntityGraphRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPreviewEntityGraphResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PreviewEntityGraphRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PreviewEntityGraphRespValidationError{}

// Validate checks the field values on
// GetServiceDesiredStateConvergenceSummaryReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetServiceDesiredStateConvergenceSummaryReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetServiceDesiredStateConvergenceSummaryReq with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetServiceDesiredStateConvergenceSummaryReqMultiError, or nil if none found.
func (m *GetServiceDesiredStateConvergenceSummaryReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServiceDesiredStateConvergenceSummaryReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetApplication()) < 1 {
		err := GetServiceDesiredStateConvergenceSummaryReqValidationError{
			field:  "Application",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetService()) < 1 {
		err := GetServiceDesiredStateConvergenceSummaryReqValidationError{
			field:  "Service",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for FastNoDeprecatedFields

	if len(errors) > 0 {
		return GetServiceDesiredStateConvergenceSummaryReqMultiError(errors)
	}

	return nil
}

// GetServiceDesiredStateConvergenceSummaryReqMultiError is an error wrapping
// multiple validation errors returned by
// GetServiceDesiredStateConvergenceSummaryReq.ValidateAll() if the designated
// constraints aren't met.
type GetServiceDesiredStateConvergenceSummaryReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServiceDesiredStateConvergenceSummaryReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServiceDesiredStateConvergenceSummaryReqMultiError) AllErrors() []error { return m }

// GetServiceDesiredStateConvergenceSummaryReqValidationError is the validation
// error returned by GetServiceDesiredStateConvergenceSummaryReq.Validate if
// the designated constraints aren't met.
type GetServiceDesiredStateConvergenceSummaryReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServiceDesiredStateConvergenceSummaryReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServiceDesiredStateConvergenceSummaryReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServiceDesiredStateConvergenceSummaryReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServiceDesiredStateConvergenceSummaryReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServiceDesiredStateConvergenceSummaryReqValidationError) ErrorName() string {
	return "GetServiceDesiredStateConvergenceSummaryReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetServiceDesiredStateConvergenceSummaryReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServiceDesiredStateConvergenceSummaryReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServiceDesiredStateConvergenceSummaryReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServiceDesiredStateConvergenceSummaryReqValidationError{}

// Validate checks the field values on StatusExplanations with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StatusExplanations) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StatusExplanations with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StatusExplanationsMultiError, or nil if none found.
func (m *StatusExplanations) ValidateAll() error {
	return m.validate(true)
}

func (m *StatusExplanations) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetStatusExplanations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StatusExplanationsValidationError{
						field:  fmt.Sprintf("StatusExplanations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StatusExplanationsValidationError{
						field:  fmt.Sprintf("StatusExplanations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StatusExplanationsValidationError{
					field:  fmt.Sprintf("StatusExplanations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return StatusExplanationsMultiError(errors)
	}

	return nil
}

// StatusExplanationsMultiError is an error wrapping multiple validation errors
// returned by StatusExplanations.ValidateAll() if the designated constraints
// aren't met.
type StatusExplanationsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatusExplanationsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatusExplanationsMultiError) AllErrors() []error { return m }

// StatusExplanationsValidationError is the validation error returned by
// StatusExplanations.Validate if the designated constraints aren't met.
type StatusExplanationsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatusExplanationsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatusExplanationsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatusExplanationsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatusExplanationsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatusExplanationsValidationError) ErrorName() string {
	return "StatusExplanationsValidationError"
}

// Error satisfies the builtin error interface
func (e StatusExplanationsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatusExplanations.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatusExplanationsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatusExplanationsValidationError{}

// Validate checks the field values on DebugLogs with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DebugLogs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DebugLogs with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DebugLogsMultiError, or nil
// if none found.
func (m *DebugLogs) ValidateAll() error {
	return m.validate(true)
}

func (m *DebugLogs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDebugLogs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DebugLogsValidationError{
						field:  fmt.Sprintf("DebugLogs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DebugLogsValidationError{
						field:  fmt.Sprintf("DebugLogs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DebugLogsValidationError{
					field:  fmt.Sprintf("DebugLogs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DebugLogsMultiError(errors)
	}

	return nil
}

// DebugLogsMultiError is an error wrapping multiple validation errors returned
// by DebugLogs.ValidateAll() if the designated constraints aren't met.
type DebugLogsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DebugLogsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DebugLogsMultiError) AllErrors() []error { return m }

// DebugLogsValidationError is the validation error returned by
// DebugLogs.Validate if the designated constraints aren't met.
type DebugLogsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DebugLogsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DebugLogsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DebugLogsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DebugLogsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DebugLogsValidationError) ErrorName() string { return "DebugLogsValidationError" }

// Error satisfies the builtin error interface
func (e DebugLogsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDebugLogs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DebugLogsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DebugLogsValidationError{}

// Validate checks the field values on PendingSetDesiredState with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PendingSetDesiredState) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PendingSetDesiredState with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PendingSetDesiredStateMultiError, or nil if none found.
func (m *PendingSetDesiredState) ValidateAll() error {
	return m.validate(true)
}

func (m *PendingSetDesiredState) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DesiredStateId

	if all {
		switch v := interface{}(m.GetCompiledDesiredState()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PendingSetDesiredStateValidationError{
					field:  "CompiledDesiredState",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PendingSetDesiredStateValidationError{
					field:  "CompiledDesiredState",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCompiledDesiredState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PendingSetDesiredStateValidationError{
				field:  "CompiledDesiredState",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TaskStatus

	if all {
		switch v := interface{}(m.GetTaskResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PendingSetDesiredStateValidationError{
					field:  "TaskResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PendingSetDesiredStateValidationError{
					field:  "TaskResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTaskResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PendingSetDesiredStateValidationError{
				field:  "TaskResult",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PendingSetDesiredStateMultiError(errors)
	}

	return nil
}

// PendingSetDesiredStateMultiError is an error wrapping multiple validation
// errors returned by PendingSetDesiredState.ValidateAll() if the designated
// constraints aren't met.
type PendingSetDesiredStateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PendingSetDesiredStateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PendingSetDesiredStateMultiError) AllErrors() []error { return m }

// PendingSetDesiredStateValidationError is the validation error returned by
// PendingSetDesiredState.Validate if the designated constraints aren't met.
type PendingSetDesiredStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PendingSetDesiredStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PendingSetDesiredStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PendingSetDesiredStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PendingSetDesiredStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PendingSetDesiredStateValidationError) ErrorName() string {
	return "PendingSetDesiredStateValidationError"
}

// Error satisfies the builtin error interface
func (e PendingSetDesiredStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPendingSetDesiredState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PendingSetDesiredStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PendingSetDesiredStateValidationError{}

// Validate checks the field values on DesiredStateSummary with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DesiredStateSummary) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DesiredStateSummary with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DesiredStateSummaryMultiError, or nil if none found.
func (m *DesiredStateSummary) ValidateAll() error {
	return m.validate(true)
}

func (m *DesiredStateSummary) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEntityGraph()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DesiredStateSummaryValidationError{
					field:  "EntityGraph",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DesiredStateSummaryValidationError{
					field:  "EntityGraph",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEntityGraph()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DesiredStateSummaryValidationError{
				field:  "EntityGraph",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreationTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DesiredStateSummaryValidationError{
					field:  "CreationTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DesiredStateSummaryValidationError{
					field:  "CreationTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreationTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DesiredStateSummaryValidationError{
				field:  "CreationTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLastUpdateTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DesiredStateSummaryValidationError{
					field:  "LastUpdateTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DesiredStateSummaryValidationError{
					field:  "LastUpdateTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastUpdateTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DesiredStateSummaryValidationError{
				field:  "LastUpdateTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetReplacedTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DesiredStateSummaryValidationError{
					field:  "ReplacedTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DesiredStateSummaryValidationError{
					field:  "ReplacedTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReplacedTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DesiredStateSummaryValidationError{
				field:  "ReplacedTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetInputDesiredState()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DesiredStateSummaryValidationError{
					field:  "InputDesiredState",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DesiredStateSummaryValidationError{
					field:  "InputDesiredState",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInputDesiredState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DesiredStateSummaryValidationError{
				field:  "InputDesiredState",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDesiredState()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DesiredStateSummaryValidationError{
					field:  "DesiredState",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DesiredStateSummaryValidationError{
					field:  "DesiredState",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDesiredState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DesiredStateSummaryValidationError{
				field:  "DesiredState",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStartingState()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DesiredStateSummaryValidationError{
					field:  "StartingState",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DesiredStateSummaryValidationError{
					field:  "StartingState",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartingState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DesiredStateSummaryValidationError{
				field:  "StartingState",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLastSeenState()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DesiredStateSummaryValidationError{
					field:  "LastSeenState",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DesiredStateSummaryValidationError{
					field:  "LastSeenState",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastSeenState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DesiredStateSummaryValidationError{
				field:  "LastSeenState",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	// no validation rules for Source

	if all {
		switch v := interface{}(m.GetSourceMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DesiredStateSummaryValidationError{
					field:  "SourceMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DesiredStateSummaryValidationError{
					field:  "SourceMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSourceMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DesiredStateSummaryValidationError{
				field:  "SourceMetadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPendingSetDesiredState()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DesiredStateSummaryValidationError{
					field:  "PendingSetDesiredState",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DesiredStateSummaryValidationError{
					field:  "PendingSetDesiredState",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPendingSetDesiredState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DesiredStateSummaryValidationError{
				field:  "PendingSetDesiredState",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSetDesiredStateMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DesiredStateSummaryValidationError{
					field:  "SetDesiredStateMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DesiredStateSummaryValidationError{
					field:  "SetDesiredStateMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSetDesiredStateMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DesiredStateSummaryValidationError{
				field:  "SetDesiredStateMetadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Statuses

	{
		sorted_keys := make([]string, len(m.GetPreconditionStatuses()))
		i := 0
		for key := range m.GetPreconditionStatuses() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetPreconditionStatuses()[key]
			_ = val

			// no validation rules for PreconditionStatuses[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, DesiredStateSummaryValidationError{
							field:  fmt.Sprintf("PreconditionStatuses[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, DesiredStateSummaryValidationError{
							field:  fmt.Sprintf("PreconditionStatuses[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return DesiredStateSummaryValidationError{
						field:  fmt.Sprintf("PreconditionStatuses[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]string, len(m.GetStatusExplanations()))
		i := 0
		for key := range m.GetStatusExplanations() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetStatusExplanations()[key]
			_ = val

			// no validation rules for StatusExplanations[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, DesiredStateSummaryValidationError{
							field:  fmt.Sprintf("StatusExplanations[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, DesiredStateSummaryValidationError{
							field:  fmt.Sprintf("StatusExplanations[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return DesiredStateSummaryValidationError{
						field:  fmt.Sprintf("StatusExplanations[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]string, len(m.GetDebugLogs()))
		i := 0
		for key := range m.GetDebugLogs() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetDebugLogs()[key]
			_ = val

			// no validation rules for DebugLogs[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, DesiredStateSummaryValidationError{
							field:  fmt.Sprintf("DebugLogs[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, DesiredStateSummaryValidationError{
							field:  fmt.Sprintf("DebugLogs[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return DesiredStateSummaryValidationError{
						field:  fmt.Sprintf("DebugLogs[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]string, len(m.GetActionExplanations()))
		i := 0
		for key := range m.GetActionExplanations() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetActionExplanations()[key]
			_ = val

			// no validation rules for ActionExplanations[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, DesiredStateSummaryValidationError{
							field:  fmt.Sprintf("ActionExplanations[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, DesiredStateSummaryValidationError{
							field:  fmt.Sprintf("ActionExplanations[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return DesiredStateSummaryValidationError{
						field:  fmt.Sprintf("ActionExplanations[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]string, len(m.GetLastUpdateTimestamps()))
		i := 0
		for key := range m.GetLastUpdateTimestamps() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetLastUpdateTimestamps()[key]
			_ = val

			// no validation rules for LastUpdateTimestamps[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, DesiredStateSummaryValidationError{
							field:  fmt.Sprintf("LastUpdateTimestamps[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, DesiredStateSummaryValidationError{
							field:  fmt.Sprintf("LastUpdateTimestamps[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return DesiredStateSummaryValidationError{
						field:  fmt.Sprintf("LastUpdateTimestamps[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]string, len(m.GetLastFetchedTimestamps()))
		i := 0
		for key := range m.GetLastFetchedTimestamps() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetLastFetchedTimestamps()[key]
			_ = val

			// no validation rules for LastFetchedTimestamps[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, DesiredStateSummaryValidationError{
							field:  fmt.Sprintf("LastFetchedTimestamps[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, DesiredStateSummaryValidationError{
							field:  fmt.Sprintf("LastFetchedTimestamps[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return DesiredStateSummaryValidationError{
						field:  fmt.Sprintf("LastFetchedTimestamps[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]string, len(m.GetLastAppliedTimestamps()))
		i := 0
		for key := range m.GetLastAppliedTimestamps() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetLastAppliedTimestamps()[key]
			_ = val

			// no validation rules for LastAppliedTimestamps[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, DesiredStateSummaryValidationError{
							field:  fmt.Sprintf("LastAppliedTimestamps[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, DesiredStateSummaryValidationError{
							field:  fmt.Sprintf("LastAppliedTimestamps[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return DesiredStateSummaryValidationError{
						field:  fmt.Sprintf("LastAppliedTimestamps[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return DesiredStateSummaryMultiError(errors)
	}

	return nil
}

// DesiredStateSummaryMultiError is an error wrapping multiple validation
// errors returned by DesiredStateSummary.ValidateAll() if the designated
// constraints aren't met.
type DesiredStateSummaryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DesiredStateSummaryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DesiredStateSummaryMultiError) AllErrors() []error { return m }

// DesiredStateSummaryValidationError is the validation error returned by
// DesiredStateSummary.Validate if the designated constraints aren't met.
type DesiredStateSummaryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DesiredStateSummaryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DesiredStateSummaryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DesiredStateSummaryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DesiredStateSummaryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DesiredStateSummaryValidationError) ErrorName() string {
	return "DesiredStateSummaryValidationError"
}

// Error satisfies the builtin error interface
func (e DesiredStateSummaryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDesiredStateSummary.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DesiredStateSummaryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DesiredStateSummaryValidationError{}

// Validate checks the field values on GetDesiredStateConvergenceReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDesiredStateConvergenceReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDesiredStateConvergenceReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetDesiredStateConvergenceReqMultiError, or nil if none found.
func (m *GetDesiredStateConvergenceReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDesiredStateConvergenceReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDesiredStateId()) < 1 {
		err := GetDesiredStateConvergenceReqValidationError{
			field:  "DesiredStateId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for FastNoDeprecatedFields

	if len(errors) > 0 {
		return GetDesiredStateConvergenceReqMultiError(errors)
	}

	return nil
}

// GetDesiredStateConvergenceReqMultiError is an error wrapping multiple
// validation errors returned by GetDesiredStateConvergenceReq.ValidateAll()
// if the designated constraints aren't met.
type GetDesiredStateConvergenceReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDesiredStateConvergenceReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDesiredStateConvergenceReqMultiError) AllErrors() []error { return m }

// GetDesiredStateConvergenceReqValidationError is the validation error
// returned by GetDesiredStateConvergenceReq.Validate if the designated
// constraints aren't met.
type GetDesiredStateConvergenceReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDesiredStateConvergenceReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDesiredStateConvergenceReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDesiredStateConvergenceReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDesiredStateConvergenceReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDesiredStateConvergenceReqValidationError) ErrorName() string {
	return "GetDesiredStateConvergenceReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetDesiredStateConvergenceReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDesiredStateConvergenceReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDesiredStateConvergenceReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDesiredStateConvergenceReqValidationError{}

// Validate checks the field values on GetDesiredStateConvergenceSummaryResp
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetDesiredStateConvergenceSummaryResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDesiredStateConvergenceSummaryResp
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetDesiredStateConvergenceSummaryRespMultiError, or nil if none found.
func (m *GetDesiredStateConvergenceSummaryResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDesiredStateConvergenceSummaryResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSummary()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDesiredStateConvergenceSummaryRespValidationError{
					field:  "Summary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDesiredStateConvergenceSummaryRespValidationError{
					field:  "Summary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSummary()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDesiredStateConvergenceSummaryRespValidationError{
				field:  "Summary",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDesiredStateConvergenceSummaryRespMultiError(errors)
	}

	return nil
}

// GetDesiredStateConvergenceSummaryRespMultiError is an error wrapping
// multiple validation errors returned by
// GetDesiredStateConvergenceSummaryResp.ValidateAll() if the designated
// constraints aren't met.
type GetDesiredStateConvergenceSummaryRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDesiredStateConvergenceSummaryRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDesiredStateConvergenceSummaryRespMultiError) AllErrors() []error { return m }

// GetDesiredStateConvergenceSummaryRespValidationError is the validation error
// returned by GetDesiredStateConvergenceSummaryResp.Validate if the
// designated constraints aren't met.
type GetDesiredStateConvergenceSummaryRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDesiredStateConvergenceSummaryRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDesiredStateConvergenceSummaryRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDesiredStateConvergenceSummaryRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDesiredStateConvergenceSummaryRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDesiredStateConvergenceSummaryRespValidationError) ErrorName() string {
	return "GetDesiredStateConvergenceSummaryRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetDesiredStateConvergenceSummaryRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDesiredStateConvergenceSummaryResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDesiredStateConvergenceSummaryRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDesiredStateConvergenceSummaryRespValidationError{}

// Validate checks the field values on
// GetServiceDesiredStateConvergenceSummaryResp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetServiceDesiredStateConvergenceSummaryResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetServiceDesiredStateConvergenceSummaryResp with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetServiceDesiredStateConvergenceSummaryRespMultiError, or nil if none found.
func (m *GetServiceDesiredStateConvergenceSummaryResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServiceDesiredStateConvergenceSummaryResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSummary()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetServiceDesiredStateConvergenceSummaryRespValidationError{
					field:  "Summary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetServiceDesiredStateConvergenceSummaryRespValidationError{
					field:  "Summary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSummary()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetServiceDesiredStateConvergenceSummaryRespValidationError{
				field:  "Summary",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetServiceDesiredStateConvergenceSummaryRespMultiError(errors)
	}

	return nil
}

// GetServiceDesiredStateConvergenceSummaryRespMultiError is an error wrapping
// multiple validation errors returned by
// GetServiceDesiredStateConvergenceSummaryResp.ValidateAll() if the
// designated constraints aren't met.
type GetServiceDesiredStateConvergenceSummaryRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServiceDesiredStateConvergenceSummaryRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServiceDesiredStateConvergenceSummaryRespMultiError) AllErrors() []error { return m }

// GetServiceDesiredStateConvergenceSummaryRespValidationError is the
// validation error returned by
// GetServiceDesiredStateConvergenceSummaryResp.Validate if the designated
// constraints aren't met.
type GetServiceDesiredStateConvergenceSummaryRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServiceDesiredStateConvergenceSummaryRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServiceDesiredStateConvergenceSummaryRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServiceDesiredStateConvergenceSummaryRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServiceDesiredStateConvergenceSummaryRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServiceDesiredStateConvergenceSummaryRespValidationError) ErrorName() string {
	return "GetServiceDesiredStateConvergenceSummaryRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetServiceDesiredStateConvergenceSummaryRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServiceDesiredStateConvergenceSummaryResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServiceDesiredStateConvergenceSummaryRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServiceDesiredStateConvergenceSummaryRespValidationError{}

// Validate checks the field values on GetServiceLastConvergedStateReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetServiceLastConvergedStateReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServiceLastConvergedStateReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetServiceLastConvergedStateReqMultiError, or nil if none found.
func (m *GetServiceLastConvergedStateReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServiceLastConvergedStateReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetApplication()) < 1 {
		err := GetServiceLastConvergedStateReqValidationError{
			field:  "Application",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetService()) < 1 {
		err := GetServiceLastConvergedStateReqValidationError{
			field:  "Service",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetServiceLastConvergedStateReqMultiError(errors)
	}

	return nil
}

// GetServiceLastConvergedStateReqMultiError is an error wrapping multiple
// validation errors returned by GetServiceLastConvergedStateReq.ValidateAll()
// if the designated constraints aren't met.
type GetServiceLastConvergedStateReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServiceLastConvergedStateReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServiceLastConvergedStateReqMultiError) AllErrors() []error { return m }

// GetServiceLastConvergedStateReqValidationError is the validation error
// returned by GetServiceLastConvergedStateReq.Validate if the designated
// constraints aren't met.
type GetServiceLastConvergedStateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServiceLastConvergedStateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServiceLastConvergedStateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServiceLastConvergedStateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServiceLastConvergedStateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServiceLastConvergedStateReqValidationError) ErrorName() string {
	return "GetServiceLastConvergedStateReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetServiceLastConvergedStateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServiceLastConvergedStateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServiceLastConvergedStateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServiceLastConvergedStateReqValidationError{}

// Validate checks the field values on GetServiceLastConvergedStateResp with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetServiceLastConvergedStateResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServiceLastConvergedStateResp with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetServiceLastConvergedStateRespMultiError, or nil if none found.
func (m *GetServiceLastConvergedStateResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServiceLastConvergedStateResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetServiceInstanceStates() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetServiceLastConvergedStateRespValidationError{
						field:  fmt.Sprintf("ServiceInstanceStates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetServiceLastConvergedStateRespValidationError{
						field:  fmt.Sprintf("ServiceInstanceStates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetServiceLastConvergedStateRespValidationError{
					field:  fmt.Sprintf("ServiceInstanceStates[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetServiceLastConvergedStateRespMultiError(errors)
	}

	return nil
}

// GetServiceLastConvergedStateRespMultiError is an error wrapping multiple
// validation errors returned by
// GetServiceLastConvergedStateResp.ValidateAll() if the designated
// constraints aren't met.
type GetServiceLastConvergedStateRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServiceLastConvergedStateRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServiceLastConvergedStateRespMultiError) AllErrors() []error { return m }

// GetServiceLastConvergedStateRespValidationError is the validation error
// returned by GetServiceLastConvergedStateResp.Validate if the designated
// constraints aren't met.
type GetServiceLastConvergedStateRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServiceLastConvergedStateRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServiceLastConvergedStateRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServiceLastConvergedStateRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServiceLastConvergedStateRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServiceLastConvergedStateRespValidationError) ErrorName() string {
	return "GetServiceLastConvergedStateRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetServiceLastConvergedStateRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServiceLastConvergedStateResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServiceLastConvergedStateRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServiceLastConvergedStateRespValidationError{}

// Validate checks the field values on GetServiceDesiredStateHistoryReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetServiceDesiredStateHistoryReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServiceDesiredStateHistoryReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetServiceDesiredStateHistoryReqMultiError, or nil if none found.
func (m *GetServiceDesiredStateHistoryReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServiceDesiredStateHistoryReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetApplication()) < 1 {
		err := GetServiceDesiredStateHistoryReqValidationError{
			field:  "Application",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetService()) < 1 {
		err := GetServiceDesiredStateHistoryReqValidationError{
			field:  "Service",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PageToken

	// no validation rules for PageSize

	// no validation rules for FastNoDeprecatedFields

	if len(errors) > 0 {
		return GetServiceDesiredStateHistoryReqMultiError(errors)
	}

	return nil
}

// GetServiceDesiredStateHistoryReqMultiError is an error wrapping multiple
// validation errors returned by
// GetServiceDesiredStateHistoryReq.ValidateAll() if the designated
// constraints aren't met.
type GetServiceDesiredStateHistoryReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServiceDesiredStateHistoryReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServiceDesiredStateHistoryReqMultiError) AllErrors() []error { return m }

// GetServiceDesiredStateHistoryReqValidationError is the validation error
// returned by GetServiceDesiredStateHistoryReq.Validate if the designated
// constraints aren't met.
type GetServiceDesiredStateHistoryReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServiceDesiredStateHistoryReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServiceDesiredStateHistoryReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServiceDesiredStateHistoryReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServiceDesiredStateHistoryReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServiceDesiredStateHistoryReqValidationError) ErrorName() string {
	return "GetServiceDesiredStateHistoryReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetServiceDesiredStateHistoryReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServiceDesiredStateHistoryReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServiceDesiredStateHistoryReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServiceDesiredStateHistoryReqValidationError{}

// Validate checks the field values on GetServiceDesiredStateHistoryResp with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetServiceDesiredStateHistoryResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServiceDesiredStateHistoryResp
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetServiceDesiredStateHistoryRespMultiError, or nil if none found.
func (m *GetServiceDesiredStateHistoryResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServiceDesiredStateHistoryResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDesiredStates() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetServiceDesiredStateHistoryRespValidationError{
						field:  fmt.Sprintf("DesiredStates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetServiceDesiredStateHistoryRespValidationError{
						field:  fmt.Sprintf("DesiredStates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetServiceDesiredStateHistoryRespValidationError{
					field:  fmt.Sprintf("DesiredStates[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return GetServiceDesiredStateHistoryRespMultiError(errors)
	}

	return nil
}

// GetServiceDesiredStateHistoryRespMultiError is an error wrapping multiple
// validation errors returned by
// GetServiceDesiredStateHistoryResp.ValidateAll() if the designated
// constraints aren't met.
type GetServiceDesiredStateHistoryRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServiceDesiredStateHistoryRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServiceDesiredStateHistoryRespMultiError) AllErrors() []error { return m }

// GetServiceDesiredStateHistoryRespValidationError is the validation error
// returned by GetServiceDesiredStateHistoryResp.Validate if the designated
// constraints aren't met.
type GetServiceDesiredStateHistoryRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServiceDesiredStateHistoryRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServiceDesiredStateHistoryRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServiceDesiredStateHistoryRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServiceDesiredStateHistoryRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServiceDesiredStateHistoryRespValidationError) ErrorName() string {
	return "GetServiceDesiredStateHistoryRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetServiceDesiredStateHistoryRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServiceDesiredStateHistoryResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServiceDesiredStateHistoryRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServiceDesiredStateHistoryRespValidationError{}

// Validate checks the field values on GetDesiredStateReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDesiredStateReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDesiredStateReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDesiredStateReqMultiError, or nil if none found.
func (m *GetDesiredStateReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDesiredStateReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDesiredStateId()) < 1 {
		err := GetDesiredStateReqValidationError{
			field:  "DesiredStateId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetDesiredStateReqMultiError(errors)
	}

	return nil
}

// GetDesiredStateReqMultiError is an error wrapping multiple validation errors
// returned by GetDesiredStateReq.ValidateAll() if the designated constraints
// aren't met.
type GetDesiredStateReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDesiredStateReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDesiredStateReqMultiError) AllErrors() []error { return m }

// GetDesiredStateReqValidationError is the validation error returned by
// GetDesiredStateReq.Validate if the designated constraints aren't met.
type GetDesiredStateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDesiredStateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDesiredStateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDesiredStateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDesiredStateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDesiredStateReqValidationError) ErrorName() string {
	return "GetDesiredStateReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetDesiredStateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDesiredStateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDesiredStateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDesiredStateReqValidationError{}

// Validate checks the field values on GetDesiredStateResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDesiredStateResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDesiredStateResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDesiredStateRespMultiError, or nil if none found.
func (m *GetDesiredStateResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDesiredStateResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDesiredState()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDesiredStateRespValidationError{
					field:  "DesiredState",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDesiredStateRespValidationError{
					field:  "DesiredState",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDesiredState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDesiredStateRespValidationError{
				field:  "DesiredState",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCompiledDesiredState()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDesiredStateRespValidationError{
					field:  "CompiledDesiredState",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDesiredStateRespValidationError{
					field:  "CompiledDesiredState",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCompiledDesiredState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDesiredStateRespValidationError{
				field:  "CompiledDesiredState",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDesiredStateRespMultiError(errors)
	}

	return nil
}

// GetDesiredStateRespMultiError is an error wrapping multiple validation
// errors returned by GetDesiredStateResp.ValidateAll() if the designated
// constraints aren't met.
type GetDesiredStateRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDesiredStateRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDesiredStateRespMultiError) AllErrors() []error { return m }

// GetDesiredStateRespValidationError is the validation error returned by
// GetDesiredStateResp.Validate if the designated constraints aren't met.
type GetDesiredStateRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDesiredStateRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDesiredStateRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDesiredStateRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDesiredStateRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDesiredStateRespValidationError) ErrorName() string {
	return "GetDesiredStateRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetDesiredStateRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDesiredStateResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDesiredStateRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDesiredStateRespValidationError{}

// Validate checks the field values on GetDesiredStateGraphReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDesiredStateGraphReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDesiredStateGraphReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDesiredStateGraphReqMultiError, or nil if none found.
func (m *GetDesiredStateGraphReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDesiredStateGraphReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRequiredAnnotations()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDesiredStateGraphReqValidationError{
					field:  "RequiredAnnotations",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDesiredStateGraphReqValidationError{
					field:  "RequiredAnnotations",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequiredAnnotations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDesiredStateGraphReqValidationError{
				field:  "RequiredAnnotations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Depth

	for idx, item := range m.GetDepthOverridesByStatus() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetDesiredStateGraphReqValidationError{
						field:  fmt.Sprintf("DepthOverridesByStatus[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetDesiredStateGraphReqValidationError{
						field:  fmt.Sprintf("DepthOverridesByStatus[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetDesiredStateGraphReqValidationError{
					field:  fmt.Sprintf("DepthOverridesByStatus[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for IncludeDesiredStateTimestamps

	switch v := m.Query.(type) {
	case *GetDesiredStateGraphReq_DesiredStateId:
		if v == nil {
			err := GetDesiredStateGraphReqValidationError{
				field:  "Query",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if utf8.RuneCountInString(m.GetDesiredStateId()) < 1 {
			err := GetDesiredStateGraphReqValidationError{
				field:  "DesiredStateId",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *GetDesiredStateGraphReq_QueryByService_:
		if v == nil {
			err := GetDesiredStateGraphReqValidationError{
				field:  "Query",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetQueryByService()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetDesiredStateGraphReqValidationError{
						field:  "QueryByService",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetDesiredStateGraphReqValidationError{
						field:  "QueryByService",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQueryByService()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetDesiredStateGraphReqValidationError{
					field:  "QueryByService",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return GetDesiredStateGraphReqMultiError(errors)
	}

	return nil
}

// GetDesiredStateGraphReqMultiError is an error wrapping multiple validation
// errors returned by GetDesiredStateGraphReq.ValidateAll() if the designated
// constraints aren't met.
type GetDesiredStateGraphReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDesiredStateGraphReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDesiredStateGraphReqMultiError) AllErrors() []error { return m }

// GetDesiredStateGraphReqValidationError is the validation error returned by
// GetDesiredStateGraphReq.Validate if the designated constraints aren't met.
type GetDesiredStateGraphReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDesiredStateGraphReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDesiredStateGraphReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDesiredStateGraphReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDesiredStateGraphReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDesiredStateGraphReqValidationError) ErrorName() string {
	return "GetDesiredStateGraphReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetDesiredStateGraphReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDesiredStateGraphReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDesiredStateGraphReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDesiredStateGraphReqValidationError{}

// Validate checks the field values on DesiredStateTimestamps with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DesiredStateTimestamps) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DesiredStateTimestamps with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DesiredStateTimestampsMultiError, or nil if none found.
func (m *DesiredStateTimestamps) ValidateAll() error {
	return m.validate(true)
}

func (m *DesiredStateTimestamps) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCreationTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DesiredStateTimestampsValidationError{
					field:  "CreationTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DesiredStateTimestampsValidationError{
					field:  "CreationTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreationTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DesiredStateTimestampsValidationError{
				field:  "CreationTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLastUpdateTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DesiredStateTimestampsValidationError{
					field:  "LastUpdateTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DesiredStateTimestampsValidationError{
					field:  "LastUpdateTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastUpdateTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DesiredStateTimestampsValidationError{
				field:  "LastUpdateTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetReplacedTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DesiredStateTimestampsValidationError{
					field:  "ReplacedTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DesiredStateTimestampsValidationError{
					field:  "ReplacedTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReplacedTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DesiredStateTimestampsValidationError{
				field:  "ReplacedTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DesiredStateTimestampsMultiError(errors)
	}

	return nil
}

// DesiredStateTimestampsMultiError is an error wrapping multiple validation
// errors returned by DesiredStateTimestamps.ValidateAll() if the designated
// constraints aren't met.
type DesiredStateTimestampsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DesiredStateTimestampsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DesiredStateTimestampsMultiError) AllErrors() []error { return m }

// DesiredStateTimestampsValidationError is the validation error returned by
// DesiredStateTimestamps.Validate if the designated constraints aren't met.
type DesiredStateTimestampsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DesiredStateTimestampsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DesiredStateTimestampsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DesiredStateTimestampsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DesiredStateTimestampsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DesiredStateTimestampsValidationError) ErrorName() string {
	return "DesiredStateTimestampsValidationError"
}

// Error satisfies the builtin error interface
func (e DesiredStateTimestampsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDesiredStateTimestamps.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DesiredStateTimestampsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DesiredStateTimestampsValidationError{}

// Validate checks the field values on GetDesiredStateGraphResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDesiredStateGraphResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDesiredStateGraphResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDesiredStateGraphRespMultiError, or nil if none found.
func (m *GetDesiredStateGraphResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDesiredStateGraphResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEntityGraph()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDesiredStateGraphRespValidationError{
					field:  "EntityGraph",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDesiredStateGraphRespValidationError{
					field:  "EntityGraph",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEntityGraph()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDesiredStateGraphRespValidationError{
				field:  "EntityGraph",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPendingSetDesiredState()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDesiredStateGraphRespValidationError{
					field:  "PendingSetDesiredState",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDesiredStateGraphRespValidationError{
					field:  "PendingSetDesiredState",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPendingSetDesiredState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDesiredStateGraphRespValidationError{
				field:  "PendingSetDesiredState",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTimestamps()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDesiredStateGraphRespValidationError{
					field:  "Timestamps",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDesiredStateGraphRespValidationError{
					field:  "Timestamps",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamps()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDesiredStateGraphRespValidationError{
				field:  "Timestamps",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDesiredStateGraphRespMultiError(errors)
	}

	return nil
}

// GetDesiredStateGraphRespMultiError is an error wrapping multiple validation
// errors returned by GetDesiredStateGraphResp.ValidateAll() if the designated
// constraints aren't met.
type GetDesiredStateGraphRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDesiredStateGraphRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDesiredStateGraphRespMultiError) AllErrors() []error { return m }

// GetDesiredStateGraphRespValidationError is the validation error returned by
// GetDesiredStateGraphResp.Validate if the designated constraints aren't met.
type GetDesiredStateGraphRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDesiredStateGraphRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDesiredStateGraphRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDesiredStateGraphRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDesiredStateGraphRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDesiredStateGraphRespValidationError) ErrorName() string {
	return "GetDesiredStateGraphRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetDesiredStateGraphRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDesiredStateGraphResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDesiredStateGraphRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDesiredStateGraphRespValidationError{}

// Validate checks the field values on GetServiceLatestDesiredStateIdReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetServiceLatestDesiredStateIdReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServiceLatestDesiredStateIdReq
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetServiceLatestDesiredStateIdReqMultiError, or nil if none found.
func (m *GetServiceLatestDesiredStateIdReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServiceLatestDesiredStateIdReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetApplication()) < 1 {
		err := GetServiceLatestDesiredStateIdReqValidationError{
			field:  "Application",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetService()) < 1 {
		err := GetServiceLatestDesiredStateIdReqValidationError{
			field:  "Service",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetServiceLatestDesiredStateIdReqMultiError(errors)
	}

	return nil
}

// GetServiceLatestDesiredStateIdReqMultiError is an error wrapping multiple
// validation errors returned by
// GetServiceLatestDesiredStateIdReq.ValidateAll() if the designated
// constraints aren't met.
type GetServiceLatestDesiredStateIdReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServiceLatestDesiredStateIdReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServiceLatestDesiredStateIdReqMultiError) AllErrors() []error { return m }

// GetServiceLatestDesiredStateIdReqValidationError is the validation error
// returned by GetServiceLatestDesiredStateIdReq.Validate if the designated
// constraints aren't met.
type GetServiceLatestDesiredStateIdReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServiceLatestDesiredStateIdReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServiceLatestDesiredStateIdReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServiceLatestDesiredStateIdReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServiceLatestDesiredStateIdReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServiceLatestDesiredStateIdReqValidationError) ErrorName() string {
	return "GetServiceLatestDesiredStateIdReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetServiceLatestDesiredStateIdReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServiceLatestDesiredStateIdReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServiceLatestDesiredStateIdReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServiceLatestDesiredStateIdReqValidationError{}

// Validate checks the field values on GetServiceLatestDesiredStateIdResp with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetServiceLatestDesiredStateIdResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServiceLatestDesiredStateIdResp
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetServiceLatestDesiredStateIdRespMultiError, or nil if none found.
func (m *GetServiceLatestDesiredStateIdResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServiceLatestDesiredStateIdResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DesiredStateId

	if all {
		switch v := interface{}(m.GetPendingSetDesiredState()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetServiceLatestDesiredStateIdRespValidationError{
					field:  "PendingSetDesiredState",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetServiceLatestDesiredStateIdRespValidationError{
					field:  "PendingSetDesiredState",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPendingSetDesiredState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetServiceLatestDesiredStateIdRespValidationError{
				field:  "PendingSetDesiredState",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetServiceLatestDesiredStateIdRespMultiError(errors)
	}

	return nil
}

// GetServiceLatestDesiredStateIdRespMultiError is an error wrapping multiple
// validation errors returned by
// GetServiceLatestDesiredStateIdResp.ValidateAll() if the designated
// constraints aren't met.
type GetServiceLatestDesiredStateIdRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServiceLatestDesiredStateIdRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServiceLatestDesiredStateIdRespMultiError) AllErrors() []error { return m }

// GetServiceLatestDesiredStateIdRespValidationError is the validation error
// returned by GetServiceLatestDesiredStateIdResp.Validate if the designated
// constraints aren't met.
type GetServiceLatestDesiredStateIdRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServiceLatestDesiredStateIdRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServiceLatestDesiredStateIdRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServiceLatestDesiredStateIdRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServiceLatestDesiredStateIdRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServiceLatestDesiredStateIdRespValidationError) ErrorName() string {
	return "GetServiceLatestDesiredStateIdRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetServiceLatestDesiredStateIdRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServiceLatestDesiredStateIdResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServiceLatestDesiredStateIdRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServiceLatestDesiredStateIdRespValidationError{}

// Validate checks the field values on GetServiceDesiredStateIdHistoryReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetServiceDesiredStateIdHistoryReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServiceDesiredStateIdHistoryReq
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetServiceDesiredStateIdHistoryReqMultiError, or nil if none found.
func (m *GetServiceDesiredStateIdHistoryReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServiceDesiredStateIdHistoryReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetApplication()) < 1 {
		err := GetServiceDesiredStateIdHistoryReqValidationError{
			field:  "Application",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetService()) < 1 {
		err := GetServiceDesiredStateIdHistoryReqValidationError{
			field:  "Service",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PageToken

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetServiceDesiredStateIdHistoryReqMultiError(errors)
	}

	return nil
}

// GetServiceDesiredStateIdHistoryReqMultiError is an error wrapping multiple
// validation errors returned by
// GetServiceDesiredStateIdHistoryReq.ValidateAll() if the designated
// constraints aren't met.
type GetServiceDesiredStateIdHistoryReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServiceDesiredStateIdHistoryReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServiceDesiredStateIdHistoryReqMultiError) AllErrors() []error { return m }

// GetServiceDesiredStateIdHistoryReqValidationError is the validation error
// returned by GetServiceDesiredStateIdHistoryReq.Validate if the designated
// constraints aren't met.
type GetServiceDesiredStateIdHistoryReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServiceDesiredStateIdHistoryReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServiceDesiredStateIdHistoryReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServiceDesiredStateIdHistoryReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServiceDesiredStateIdHistoryReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServiceDesiredStateIdHistoryReqValidationError) ErrorName() string {
	return "GetServiceDesiredStateIdHistoryReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetServiceDesiredStateIdHistoryReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServiceDesiredStateIdHistoryReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServiceDesiredStateIdHistoryReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServiceDesiredStateIdHistoryReqValidationError{}

// Validate checks the field values on GetServiceDesiredStateIdHistoryResp with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetServiceDesiredStateIdHistoryResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServiceDesiredStateIdHistoryResp
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetServiceDesiredStateIdHistoryRespMultiError, or nil if none found.
func (m *GetServiceDesiredStateIdHistoryResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServiceDesiredStateIdHistoryResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return GetServiceDesiredStateIdHistoryRespMultiError(errors)
	}

	return nil
}

// GetServiceDesiredStateIdHistoryRespMultiError is an error wrapping multiple
// validation errors returned by
// GetServiceDesiredStateIdHistoryResp.ValidateAll() if the designated
// constraints aren't met.
type GetServiceDesiredStateIdHistoryRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServiceDesiredStateIdHistoryRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServiceDesiredStateIdHistoryRespMultiError) AllErrors() []error { return m }

// GetServiceDesiredStateIdHistoryRespValidationError is the validation error
// returned by GetServiceDesiredStateIdHistoryResp.Validate if the designated
// constraints aren't met.
type GetServiceDesiredStateIdHistoryRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServiceDesiredStateIdHistoryRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServiceDesiredStateIdHistoryRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServiceDesiredStateIdHistoryRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServiceDesiredStateIdHistoryRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServiceDesiredStateIdHistoryRespValidationError) ErrorName() string {
	return "GetServiceDesiredStateIdHistoryRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetServiceDesiredStateIdHistoryRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServiceDesiredStateIdHistoryResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServiceDesiredStateIdHistoryRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServiceDesiredStateIdHistoryRespValidationError{}

// Validate checks the field values on ValidateDesiredStateResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ValidateDesiredStateResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidateDesiredStateResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ValidateDesiredStateRespMultiError, or nil if none found.
func (m *ValidateDesiredStateResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidateDesiredStateResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDesiredState()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ValidateDesiredStateRespValidationError{
					field:  "DesiredState",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ValidateDesiredStateRespValidationError{
					field:  "DesiredState",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDesiredState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ValidateDesiredStateRespValidationError{
				field:  "DesiredState",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCompiledDesiredState()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ValidateDesiredStateRespValidationError{
					field:  "CompiledDesiredState",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ValidateDesiredStateRespValidationError{
					field:  "CompiledDesiredState",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCompiledDesiredState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ValidateDesiredStateRespValidationError{
				field:  "CompiledDesiredState",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ValidateDesiredStateRespMultiError(errors)
	}

	return nil
}

// ValidateDesiredStateRespMultiError is an error wrapping multiple validation
// errors returned by ValidateDesiredStateResp.ValidateAll() if the designated
// constraints aren't met.
type ValidateDesiredStateRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidateDesiredStateRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidateDesiredStateRespMultiError) AllErrors() []error { return m }

// ValidateDesiredStateRespValidationError is the validation error returned by
// ValidateDesiredStateResp.Validate if the designated constraints aren't met.
type ValidateDesiredStateRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateDesiredStateRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateDesiredStateRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateDesiredStateRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateDesiredStateRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateDesiredStateRespValidationError) ErrorName() string {
	return "ValidateDesiredStateRespValidationError"
}

// Error satisfies the builtin error interface
func (e ValidateDesiredStateRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateDesiredStateResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateDesiredStateRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateDesiredStateRespValidationError{}

// Validate checks the field values on SetManualApprovalReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetManualApprovalReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetManualApprovalReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetManualApprovalReqMultiError, or nil if none found.
func (m *SetManualApprovalReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetManualApprovalReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDesiredStateId()) < 1 {
		err := SetManualApprovalReqValidationError{
			field:  "DesiredStateId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTopic()) < 1 {
		err := SetManualApprovalReqValidationError{
			field:  "Topic",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Reject

	// no validation rules for SignalType

	if len(errors) > 0 {
		return SetManualApprovalReqMultiError(errors)
	}

	return nil
}

// SetManualApprovalReqMultiError is an error wrapping multiple validation
// errors returned by SetManualApprovalReq.ValidateAll() if the designated
// constraints aren't met.
type SetManualApprovalReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetManualApprovalReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetManualApprovalReqMultiError) AllErrors() []error { return m }

// SetManualApprovalReqValidationError is the validation error returned by
// SetManualApprovalReq.Validate if the designated constraints aren't met.
type SetManualApprovalReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetManualApprovalReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetManualApprovalReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetManualApprovalReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetManualApprovalReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetManualApprovalReqValidationError) ErrorName() string {
	return "SetManualApprovalReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetManualApprovalReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetManualApprovalReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetManualApprovalReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetManualApprovalReqValidationError{}

// Validate checks the field values on SetManualApprovalResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetManualApprovalResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetManualApprovalResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetManualApprovalRespMultiError, or nil if none found.
func (m *SetManualApprovalResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SetManualApprovalResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetManualApprovalRespMultiError(errors)
	}

	return nil
}

// SetManualApprovalRespMultiError is an error wrapping multiple validation
// errors returned by SetManualApprovalResp.ValidateAll() if the designated
// constraints aren't met.
type SetManualApprovalRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetManualApprovalRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetManualApprovalRespMultiError) AllErrors() []error { return m }

// SetManualApprovalRespValidationError is the validation error returned by
// SetManualApprovalResp.Validate if the designated constraints aren't met.
type SetManualApprovalRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetManualApprovalRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetManualApprovalRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetManualApprovalRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetManualApprovalRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetManualApprovalRespValidationError) ErrorName() string {
	return "SetManualApprovalRespValidationError"
}

// Error satisfies the builtin error interface
func (e SetManualApprovalRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetManualApprovalResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetManualApprovalRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetManualApprovalRespValidationError{}

// Validate checks the field values on PromoteDeliveryReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PromoteDeliveryReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PromoteDeliveryReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PromoteDeliveryReqMultiError, or nil if none found.
func (m *PromoteDeliveryReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PromoteDeliveryReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDesiredStateId()) < 1 {
		err := PromoteDeliveryReqValidationError{
			field:  "DesiredStateId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Stage

	// no validation rules for Full

	if utf8.RuneCountInString(m.GetSource()) < 1 {
		err := PromoteDeliveryReqValidationError{
			field:  "Source",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PromoteDeliveryReqMultiError(errors)
	}

	return nil
}

// PromoteDeliveryReqMultiError is an error wrapping multiple validation errors
// returned by PromoteDeliveryReq.ValidateAll() if the designated constraints
// aren't met.
type PromoteDeliveryReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PromoteDeliveryReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PromoteDeliveryReqMultiError) AllErrors() []error { return m }

// PromoteDeliveryReqValidationError is the validation error returned by
// PromoteDeliveryReq.Validate if the designated constraints aren't met.
type PromoteDeliveryReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PromoteDeliveryReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PromoteDeliveryReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PromoteDeliveryReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PromoteDeliveryReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PromoteDeliveryReqValidationError) ErrorName() string {
	return "PromoteDeliveryReqValidationError"
}

// Error satisfies the builtin error interface
func (e PromoteDeliveryReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPromoteDeliveryReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PromoteDeliveryReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PromoteDeliveryReqValidationError{}

// Validate checks the field values on PromoteDeliveryResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PromoteDeliveryResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PromoteDeliveryResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PromoteDeliveryRespMultiError, or nil if none found.
func (m *PromoteDeliveryResp) ValidateAll() error {
	return m.validate(true)
}

func (m *PromoteDeliveryResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PromoteDeliveryRespMultiError(errors)
	}

	return nil
}

// PromoteDeliveryRespMultiError is an error wrapping multiple validation
// errors returned by PromoteDeliveryResp.ValidateAll() if the designated
// constraints aren't met.
type PromoteDeliveryRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PromoteDeliveryRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PromoteDeliveryRespMultiError) AllErrors() []error { return m }

// PromoteDeliveryRespValidationError is the validation error returned by
// PromoteDeliveryResp.Validate if the designated constraints aren't met.
type PromoteDeliveryRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PromoteDeliveryRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PromoteDeliveryRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PromoteDeliveryRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PromoteDeliveryRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PromoteDeliveryRespValidationError) ErrorName() string {
	return "PromoteDeliveryRespValidationError"
}

// Error satisfies the builtin error interface
func (e PromoteDeliveryRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPromoteDeliveryResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PromoteDeliveryRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PromoteDeliveryRespValidationError{}

// Validate checks the field values on BypassProtectionReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BypassProtectionReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BypassProtectionReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BypassProtectionReqMultiError, or nil if none found.
func (m *BypassProtectionReq) ValidateAll() error {
	return m.validate(true)
}

func (m *BypassProtectionReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDesiredStateId()) < 1 {
		err := BypassProtectionReqValidationError{
			field:  "DesiredStateId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSource()) < 1 {
		err := BypassProtectionReqValidationError{
			field:  "Source",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return BypassProtectionReqMultiError(errors)
	}

	return nil
}

// BypassProtectionReqMultiError is an error wrapping multiple validation
// errors returned by BypassProtectionReq.ValidateAll() if the designated
// constraints aren't met.
type BypassProtectionReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BypassProtectionReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BypassProtectionReqMultiError) AllErrors() []error { return m }

// BypassProtectionReqValidationError is the validation error returned by
// BypassProtectionReq.Validate if the designated constraints aren't met.
type BypassProtectionReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BypassProtectionReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BypassProtectionReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BypassProtectionReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BypassProtectionReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BypassProtectionReqValidationError) ErrorName() string {
	return "BypassProtectionReqValidationError"
}

// Error satisfies the builtin error interface
func (e BypassProtectionReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBypassProtectionReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BypassProtectionReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BypassProtectionReqValidationError{}

// Validate checks the field values on BypassProtectionResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BypassProtectionResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BypassProtectionResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BypassProtectionRespMultiError, or nil if none found.
func (m *BypassProtectionResp) ValidateAll() error {
	return m.validate(true)
}

func (m *BypassProtectionResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BypassProtectionRespMultiError(errors)
	}

	return nil
}

// BypassProtectionRespMultiError is an error wrapping multiple validation
// errors returned by BypassProtectionResp.ValidateAll() if the designated
// constraints aren't met.
type BypassProtectionRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BypassProtectionRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BypassProtectionRespMultiError) AllErrors() []error { return m }

// BypassProtectionRespValidationError is the validation error returned by
// BypassProtectionResp.Validate if the designated constraints aren't met.
type BypassProtectionRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BypassProtectionRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BypassProtectionRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BypassProtectionRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BypassProtectionRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BypassProtectionRespValidationError) ErrorName() string {
	return "BypassProtectionRespValidationError"
}

// Error satisfies the builtin error interface
func (e BypassProtectionRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBypassProtectionResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BypassProtectionRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BypassProtectionRespValidationError{}

// Validate checks the field values on ListMaestroReleasesReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMaestroReleasesReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMaestroReleasesReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMaestroReleasesReqMultiError, or nil if none found.
func (m *ListMaestroReleasesReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMaestroReleasesReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetEntityId() == nil {
		err := ListMaestroReleasesReqValidationError{
			field:  "EntityId",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetEntityId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListMaestroReleasesReqValidationError{
					field:  "EntityId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListMaestroReleasesReqValidationError{
					field:  "EntityId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEntityId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListMaestroReleasesReqValidationError{
				field:  "EntityId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for StartingReleaseId

	// no validation rules for PageToken

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListMaestroReleasesReqMultiError(errors)
	}

	return nil
}

// ListMaestroReleasesReqMultiError is an error wrapping multiple validation
// errors returned by ListMaestroReleasesReq.ValidateAll() if the designated
// constraints aren't met.
type ListMaestroReleasesReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMaestroReleasesReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMaestroReleasesReqMultiError) AllErrors() []error { return m }

// ListMaestroReleasesReqValidationError is the validation error returned by
// ListMaestroReleasesReq.Validate if the designated constraints aren't met.
type ListMaestroReleasesReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMaestroReleasesReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMaestroReleasesReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMaestroReleasesReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMaestroReleasesReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMaestroReleasesReqValidationError) ErrorName() string {
	return "ListMaestroReleasesReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListMaestroReleasesReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMaestroReleasesReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMaestroReleasesReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMaestroReleasesReqValidationError{}

// Validate checks the field values on ListMaestroReleasesResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMaestroReleasesResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMaestroReleasesResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMaestroReleasesRespMultiError, or nil if none found.
func (m *ListMaestroReleasesResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMaestroReleasesResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMaestroReleases() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListMaestroReleasesRespValidationError{
						field:  fmt.Sprintf("MaestroReleases[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListMaestroReleasesRespValidationError{
						field:  fmt.Sprintf("MaestroReleases[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMaestroReleasesRespValidationError{
					field:  fmt.Sprintf("MaestroReleases[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListMaestroReleasesRespMultiError(errors)
	}

	return nil
}

// ListMaestroReleasesRespMultiError is an error wrapping multiple validation
// errors returned by ListMaestroReleasesResp.ValidateAll() if the designated
// constraints aren't met.
type ListMaestroReleasesRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMaestroReleasesRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMaestroReleasesRespMultiError) AllErrors() []error { return m }

// ListMaestroReleasesRespValidationError is the validation error returned by
// ListMaestroReleasesResp.Validate if the designated constraints aren't met.
type ListMaestroReleasesRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMaestroReleasesRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMaestroReleasesRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMaestroReleasesRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMaestroReleasesRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMaestroReleasesRespValidationError) ErrorName() string {
	return "ListMaestroReleasesRespValidationError"
}

// Error satisfies the builtin error interface
func (e ListMaestroReleasesRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMaestroReleasesResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMaestroReleasesRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMaestroReleasesRespValidationError{}

// Validate checks the field values on GetDesiredStateGraphReq_QueryByService
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetDesiredStateGraphReq_QueryByService) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetDesiredStateGraphReq_QueryByService with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// GetDesiredStateGraphReq_QueryByServiceMultiError, or nil if none found.
func (m *GetDesiredStateGraphReq_QueryByService) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDesiredStateGraphReq_QueryByService) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetApplication()) < 1 {
		err := GetDesiredStateGraphReq_QueryByServiceValidationError{
			field:  "Application",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetService()) < 1 {
		err := GetDesiredStateGraphReq_QueryByServiceValidationError{
			field:  "Service",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetDesiredStateGraphReq_QueryByServiceMultiError(errors)
	}

	return nil
}

// GetDesiredStateGraphReq_QueryByServiceMultiError is an error wrapping
// multiple validation errors returned by
// GetDesiredStateGraphReq_QueryByService.ValidateAll() if the designated
// constraints aren't met.
type GetDesiredStateGraphReq_QueryByServiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDesiredStateGraphReq_QueryByServiceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDesiredStateGraphReq_QueryByServiceMultiError) AllErrors() []error { return m }

// GetDesiredStateGraphReq_QueryByServiceValidationError is the validation
// error returned by GetDesiredStateGraphReq_QueryByService.Validate if the
// designated constraints aren't met.
type GetDesiredStateGraphReq_QueryByServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDesiredStateGraphReq_QueryByServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDesiredStateGraphReq_QueryByServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDesiredStateGraphReq_QueryByServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDesiredStateGraphReq_QueryByServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDesiredStateGraphReq_QueryByServiceValidationError) ErrorName() string {
	return "GetDesiredStateGraphReq_QueryByServiceValidationError"
}

// Error satisfies the builtin error interface
func (e GetDesiredStateGraphReq_QueryByServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDesiredStateGraphReq_QueryByService.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDesiredStateGraphReq_QueryByServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDesiredStateGraphReq_QueryByServiceValidationError{}

// Validate checks the field values on
// GetDesiredStateGraphReq_DepthOverrideByStatus with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetDesiredStateGraphReq_DepthOverrideByStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetDesiredStateGraphReq_DepthOverrideByStatus with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetDesiredStateGraphReq_DepthOverrideByStatusMultiError, or nil if none found.
func (m *GetDesiredStateGraphReq_DepthOverrideByStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDesiredStateGraphReq_DepthOverrideByStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Depth

	if len(errors) > 0 {
		return GetDesiredStateGraphReq_DepthOverrideByStatusMultiError(errors)
	}

	return nil
}

// GetDesiredStateGraphReq_DepthOverrideByStatusMultiError is an error wrapping
// multiple validation errors returned by
// GetDesiredStateGraphReq_DepthOverrideByStatus.ValidateAll() if the
// designated constraints aren't met.
type GetDesiredStateGraphReq_DepthOverrideByStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDesiredStateGraphReq_DepthOverrideByStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDesiredStateGraphReq_DepthOverrideByStatusMultiError) AllErrors() []error { return m }

// GetDesiredStateGraphReq_DepthOverrideByStatusValidationError is the
// validation error returned by
// GetDesiredStateGraphReq_DepthOverrideByStatus.Validate if the designated
// constraints aren't met.
type GetDesiredStateGraphReq_DepthOverrideByStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDesiredStateGraphReq_DepthOverrideByStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDesiredStateGraphReq_DepthOverrideByStatusValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetDesiredStateGraphReq_DepthOverrideByStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDesiredStateGraphReq_DepthOverrideByStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDesiredStateGraphReq_DepthOverrideByStatusValidationError) ErrorName() string {
	return "GetDesiredStateGraphReq_DepthOverrideByStatusValidationError"
}

// Error satisfies the builtin error interface
func (e GetDesiredStateGraphReq_DepthOverrideByStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDesiredStateGraphReq_DepthOverrideByStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDesiredStateGraphReq_DepthOverrideByStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDesiredStateGraphReq_DepthOverrideByStatusValidationError{}
