// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.1
// 	protoc        v3.21.10
// source: prodvana/desired_state/model/desired_state.proto

package model

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/planetscale/vtprotobuf/vtproto"
	common_config "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/common_config"
	environment "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/environment"
	protection "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/protection"
	pvn_wrapper "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/pvn_wrapper"
	runtimes "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/runtimes"
	extensions "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/runtimes/extensions"
	version "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/version"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Type int32

const (
	Type_UNKNOWN               Type = 0
	Type_SERVICE               Type = 1
	Type_SERVICE_INSTANCE      Type = 2
	Type_SERVICE_GROUP         Type = 3
	Type_RUNTIME_OBJECT        Type = 4
	Type_MANUAL_APPROVAL       Type = 5
	Type_CUSTOM_TASK           Type = 6
	Type_PROTECTION_ATTACHMENT Type = 7
	Type_PROTECTION_LINK       Type = 8
	Type_DELIVERY_EXTENSION    Type = 9
)

// Enum value maps for Type.
var (
	Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "SERVICE",
		2: "SERVICE_INSTANCE",
		3: "SERVICE_GROUP",
		4: "RUNTIME_OBJECT",
		5: "MANUAL_APPROVAL",
		6: "CUSTOM_TASK",
		7: "PROTECTION_ATTACHMENT",
		8: "PROTECTION_LINK",
		9: "DELIVERY_EXTENSION",
	}
	Type_value = map[string]int32{
		"UNKNOWN":               0,
		"SERVICE":               1,
		"SERVICE_INSTANCE":      2,
		"SERVICE_GROUP":         3,
		"RUNTIME_OBJECT":        4,
		"MANUAL_APPROVAL":       5,
		"CUSTOM_TASK":           6,
		"PROTECTION_ATTACHMENT": 7,
		"PROTECTION_LINK":       8,
		"DELIVERY_EXTENSION":    9,
	}
)

func (x Type) Enum() *Type {
	p := new(Type)
	*p = x
	return p
}

func (x Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Type) Descriptor() protoreflect.EnumDescriptor {
	return file_prodvana_desired_state_model_desired_state_proto_enumTypes[0].Descriptor()
}

func (Type) Type() protoreflect.EnumType {
	return &file_prodvana_desired_state_model_desired_state_proto_enumTypes[0]
}

func (x Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Type.Descriptor instead.
func (Type) EnumDescriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{0}
}

type CustomTaskType int32

const (
	CustomTaskType_CUSTOM_TASK_TYPE_UNKNOWN CustomTaskType = 0
	// Runs before everything else. May wait for any dependent RCs to be stable.
	CustomTaskType_PRE_APPROVAL_TASK CustomTaskType = 1
	// Approval tasks, manual or automated. Must wait for all PRE_APPROVAL_TASK to be satisfied.
	CustomTaskType_APPROVAL CustomTaskType = 2
	// Runs after approval, just before service push.
	CustomTaskType_POST_APPROVAL_TASK CustomTaskType = 3
	// Runs as long as service push is in progress.
	CustomTaskType_DEPLOYMENT_TASK CustomTaskType = 4
	// Runs after service push succeeds (pods are replaced and healthy, ...), before declaring the service CONVERGED.
	CustomTaskType_POST_DEPLOYMENT_TASK CustomTaskType = 5
)

// Enum value maps for CustomTaskType.
var (
	CustomTaskType_name = map[int32]string{
		0: "CUSTOM_TASK_TYPE_UNKNOWN",
		1: "PRE_APPROVAL_TASK",
		2: "APPROVAL",
		3: "POST_APPROVAL_TASK",
		4: "DEPLOYMENT_TASK",
		5: "POST_DEPLOYMENT_TASK",
	}
	CustomTaskType_value = map[string]int32{
		"CUSTOM_TASK_TYPE_UNKNOWN": 0,
		"PRE_APPROVAL_TASK":        1,
		"APPROVAL":                 2,
		"POST_APPROVAL_TASK":       3,
		"DEPLOYMENT_TASK":          4,
		"POST_DEPLOYMENT_TASK":     5,
	}
)

func (x CustomTaskType) Enum() *CustomTaskType {
	p := new(CustomTaskType)
	*p = x
	return p
}

func (x CustomTaskType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CustomTaskType) Descriptor() protoreflect.EnumDescriptor {
	return file_prodvana_desired_state_model_desired_state_proto_enumTypes[1].Descriptor()
}

func (CustomTaskType) Type() protoreflect.EnumType {
	return &file_prodvana_desired_state_model_desired_state_proto_enumTypes[1]
}

func (x CustomTaskType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CustomTaskType.Descriptor instead.
func (CustomTaskType) EnumDescriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{1}
}

type Status int32

const (
	Status_UNKNOWN_STATUS            Status = 0
	Status_CONVERGING                Status = 1
	Status_CONVERGED                 Status = 2
	Status_FAILED                    Status = 3
	Status_ROLLING_BACK              Status = 4
	Status_ROLLED_BACK               Status = 5
	Status_FAILED_ROLLBACK           Status = 12
	Status_PAUSED                    Status = 6
	Status_CHILD_PAUSED              Status = 7 // entity itself not paused, but one of its children is paused, so it is not making any progress
	Status_WAITING_PRECONDITIONS     Status = 8 // Waiting for non-manual approval preconditions
	Status_REPLACED                  Status = 9
	Status_WAITING_MANUAL_APPROVAL   Status = 10 // Waiting only for manual approval
	Status_DELETED                   Status = 11
	Status_PREVIEW                   Status = 13 // status for all entities in a preview desired state. will never show up in a real desired state.
	Status_PENDING_SET_DESIRED_STATE Status = 14
	Status_BLOCKED                   Status = 15 // next tag: 16
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0:  "UNKNOWN_STATUS",
		1:  "CONVERGING",
		2:  "CONVERGED",
		3:  "FAILED",
		4:  "ROLLING_BACK",
		5:  "ROLLED_BACK",
		12: "FAILED_ROLLBACK",
		6:  "PAUSED",
		7:  "CHILD_PAUSED",
		8:  "WAITING_PRECONDITIONS",
		9:  "REPLACED",
		10: "WAITING_MANUAL_APPROVAL",
		11: "DELETED",
		13: "PREVIEW",
		14: "PENDING_SET_DESIRED_STATE",
		15: "BLOCKED",
	}
	Status_value = map[string]int32{
		"UNKNOWN_STATUS":            0,
		"CONVERGING":                1,
		"CONVERGED":                 2,
		"FAILED":                    3,
		"ROLLING_BACK":              4,
		"ROLLED_BACK":               5,
		"FAILED_ROLLBACK":           12,
		"PAUSED":                    6,
		"CHILD_PAUSED":              7,
		"WAITING_PRECONDITIONS":     8,
		"REPLACED":                  9,
		"WAITING_MANUAL_APPROVAL":   10,
		"DELETED":                   11,
		"PREVIEW":                   13,
		"PENDING_SET_DESIRED_STATE": 14,
		"BLOCKED":                   15,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_prodvana_desired_state_model_desired_state_proto_enumTypes[2].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_prodvana_desired_state_model_desired_state_proto_enumTypes[2]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{2}
}

type SimpleStatus int32

const (
	SimpleStatus_SS_UNKNOWN              SimpleStatus = 0
	SimpleStatus_SS_CONVERGING           SimpleStatus = 1
	SimpleStatus_SS_CONVERGED            SimpleStatus = 2
	SimpleStatus_SS_FAILED               SimpleStatus = 3
	SimpleStatus_SS_WAITING_FOR_APPROVAL SimpleStatus = 4
)

// Enum value maps for SimpleStatus.
var (
	SimpleStatus_name = map[int32]string{
		0: "SS_UNKNOWN",
		1: "SS_CONVERGING",
		2: "SS_CONVERGED",
		3: "SS_FAILED",
		4: "SS_WAITING_FOR_APPROVAL",
	}
	SimpleStatus_value = map[string]int32{
		"SS_UNKNOWN":              0,
		"SS_CONVERGING":           1,
		"SS_CONVERGED":            2,
		"SS_FAILED":               3,
		"SS_WAITING_FOR_APPROVAL": 4,
	}
)

func (x SimpleStatus) Enum() *SimpleStatus {
	p := new(SimpleStatus)
	*p = x
	return p
}

func (x SimpleStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SimpleStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_prodvana_desired_state_model_desired_state_proto_enumTypes[3].Descriptor()
}

func (SimpleStatus) Type() protoreflect.EnumType {
	return &file_prodvana_desired_state_model_desired_state_proto_enumTypes[3]
}

func (x SimpleStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SimpleStatus.Descriptor instead.
func (SimpleStatus) EnumDescriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{3}
}

type StatusReason int32

const (
	StatusReason_REASON_UNKNOWN StatusReason = 0
	// Prodvana has not fetched the data it needs to act on the entity
	StatusReason_NO_CURRENT_STATE StatusReason = 1
	// the command to apply target state failed
	StatusReason_APPLY_FAILED StatusReason = 2
	// unhealthy pods detected
	StatusReason_UNHEALTHY_PODS StatusReason = 3
	// pods are being updated
	StatusReason_UPDATING_PODS StatusReason = 4
	// no update in progress, but there are pods on the wrong version. This could be a transient state with the runtime, or something was updated out of band
	StatusReason_VERSION_MISMATCH StatusReason = 5
	// after applying successfully, the object arrived at a failed state
	StatusReason_RUNTIME_OBJECT_FAILED StatusReason = 6
	// a precondition failed in an unrecoverable way
	StatusReason_PRECONDITIONS_FAILED     StatusReason = 7
	StatusReason_MANUAL_APPROVAL_REJECTED StatusReason = 8
	// Entity has not been updated in a long time
	StatusReason_STUCK_ENTITY StatusReason = 9
	// the active version is explicitly marked as dirty
	StatusReason_VERSION_DIRTY StatusReason = 10
	// the Runtime indicated an apply is needed
	StatusReason_RUNTIME_OBJECT_APPLY_NEEDED StatusReason = 11
	// one of protections or convergence extensions are either failing or pending
	StatusReason_LIFECYCLE_CHECK_FAILED           StatusReason = 13
	StatusReason_LIFECYCLE_CHECK_PENDING          StatusReason = 14
	StatusReason_CONCURRENCY_LIMIT_EXCEEDED       StatusReason = 15
	StatusReason_RELEASE_CHANNEL_DEPENDENCY_UNMET StatusReason = 16
)

// Enum value maps for StatusReason.
var (
	StatusReason_name = map[int32]string{
		0:  "REASON_UNKNOWN",
		1:  "NO_CURRENT_STATE",
		2:  "APPLY_FAILED",
		3:  "UNHEALTHY_PODS",
		4:  "UPDATING_PODS",
		5:  "VERSION_MISMATCH",
		6:  "RUNTIME_OBJECT_FAILED",
		7:  "PRECONDITIONS_FAILED",
		8:  "MANUAL_APPROVAL_REJECTED",
		9:  "STUCK_ENTITY",
		10: "VERSION_DIRTY",
		11: "RUNTIME_OBJECT_APPLY_NEEDED",
		13: "LIFECYCLE_CHECK_FAILED",
		14: "LIFECYCLE_CHECK_PENDING",
		15: "CONCURRENCY_LIMIT_EXCEEDED",
		16: "RELEASE_CHANNEL_DEPENDENCY_UNMET",
	}
	StatusReason_value = map[string]int32{
		"REASON_UNKNOWN":                   0,
		"NO_CURRENT_STATE":                 1,
		"APPLY_FAILED":                     2,
		"UNHEALTHY_PODS":                   3,
		"UPDATING_PODS":                    4,
		"VERSION_MISMATCH":                 5,
		"RUNTIME_OBJECT_FAILED":            6,
		"PRECONDITIONS_FAILED":             7,
		"MANUAL_APPROVAL_REJECTED":         8,
		"STUCK_ENTITY":                     9,
		"VERSION_DIRTY":                    10,
		"RUNTIME_OBJECT_APPLY_NEEDED":      11,
		"LIFECYCLE_CHECK_FAILED":           13,
		"LIFECYCLE_CHECK_PENDING":          14,
		"CONCURRENCY_LIMIT_EXCEEDED":       15,
		"RELEASE_CHANNEL_DEPENDENCY_UNMET": 16,
	}
)

func (x StatusReason) Enum() *StatusReason {
	p := new(StatusReason)
	*p = x
	return p
}

func (x StatusReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatusReason) Descriptor() protoreflect.EnumDescriptor {
	return file_prodvana_desired_state_model_desired_state_proto_enumTypes[4].Descriptor()
}

func (StatusReason) Type() protoreflect.EnumType {
	return &file_prodvana_desired_state_model_desired_state_proto_enumTypes[4]
}

func (x StatusReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatusReason.Descriptor instead.
func (StatusReason) EnumDescriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{4}
}

type ActionType int32

const (
	ActionType_ACTION_TYPE_UNKNOWN ActionType = 0
	// DD is currently apply target state - if its doing this for too long, probably means apply is stuck.
	ActionType_ACTION_TYPE_APPLYING ActionType = 1
	// DD has applied target state - waiting for object to converge.
	ActionType_ACTION_TYPE_APPLIED ActionType = 2
	// Reached terminal state - DD is doing nothing further.
	ActionType_ACTION_TYPE_COMPLETE ActionType = 3
)

// Enum value maps for ActionType.
var (
	ActionType_name = map[int32]string{
		0: "ACTION_TYPE_UNKNOWN",
		1: "ACTION_TYPE_APPLYING",
		2: "ACTION_TYPE_APPLIED",
		3: "ACTION_TYPE_COMPLETE",
	}
	ActionType_value = map[string]int32{
		"ACTION_TYPE_UNKNOWN":  0,
		"ACTION_TYPE_APPLYING": 1,
		"ACTION_TYPE_APPLIED":  2,
		"ACTION_TYPE_COMPLETE": 3,
	}
)

func (x ActionType) Enum() *ActionType {
	p := new(ActionType)
	*p = x
	return p
}

func (x ActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_prodvana_desired_state_model_desired_state_proto_enumTypes[5].Descriptor()
}

func (ActionType) Type() protoreflect.EnumType {
	return &file_prodvana_desired_state_model_desired_state_proto_enumTypes[5]
}

func (x ActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionType.Descriptor instead.
func (ActionType) EnumDescriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{5}
}

type ConditionStatus int32

const (
	ConditionStatus_CONDITION_UNKNOWN_STATUS    ConditionStatus = 0
	ConditionStatus_CONDITION_PENDING           ConditionStatus = 1
	ConditionStatus_CONDITION_SATISFIED         ConditionStatus = 2
	ConditionStatus_CONDITION_MANUALLY_BYPASSED ConditionStatus = 3
	ConditionStatus_CONDITION_FAILED            ConditionStatus = 4
)

// Enum value maps for ConditionStatus.
var (
	ConditionStatus_name = map[int32]string{
		0: "CONDITION_UNKNOWN_STATUS",
		1: "CONDITION_PENDING",
		2: "CONDITION_SATISFIED",
		3: "CONDITION_MANUALLY_BYPASSED",
		4: "CONDITION_FAILED",
	}
	ConditionStatus_value = map[string]int32{
		"CONDITION_UNKNOWN_STATUS":    0,
		"CONDITION_PENDING":           1,
		"CONDITION_SATISFIED":         2,
		"CONDITION_MANUALLY_BYPASSED": 3,
		"CONDITION_FAILED":            4,
	}
)

func (x ConditionStatus) Enum() *ConditionStatus {
	p := new(ConditionStatus)
	*p = x
	return p
}

func (x ConditionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConditionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_prodvana_desired_state_model_desired_state_proto_enumTypes[6].Descriptor()
}

func (ConditionStatus) Type() protoreflect.EnumType {
	return &file_prodvana_desired_state_model_desired_state_proto_enumTypes[6]
}

func (x ConditionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConditionStatus.Descriptor instead.
func (ConditionStatus) EnumDescriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{6}
}

type ManualApprovalStatus int32

const (
	ManualApprovalStatus_PENDING  ManualApprovalStatus = 0
	ManualApprovalStatus_APPROVED ManualApprovalStatus = 1
	ManualApprovalStatus_REJECTED ManualApprovalStatus = 2
)

// Enum value maps for ManualApprovalStatus.
var (
	ManualApprovalStatus_name = map[int32]string{
		0: "PENDING",
		1: "APPROVED",
		2: "REJECTED",
	}
	ManualApprovalStatus_value = map[string]int32{
		"PENDING":  0,
		"APPROVED": 1,
		"REJECTED": 2,
	}
)

func (x ManualApprovalStatus) Enum() *ManualApprovalStatus {
	p := new(ManualApprovalStatus)
	*p = x
	return p
}

func (x ManualApprovalStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ManualApprovalStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_prodvana_desired_state_model_desired_state_proto_enumTypes[7].Descriptor()
}

func (ManualApprovalStatus) Type() protoreflect.EnumType {
	return &file_prodvana_desired_state_model_desired_state_proto_enumTypes[7]
}

func (x ManualApprovalStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ManualApprovalStatus.Descriptor instead.
func (ManualApprovalStatus) EnumDescriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{7}
}

type CustomTaskStatus int32

const (
	CustomTaskStatus_CUSTOM_TASK_PENDING           CustomTaskStatus = 0
	CustomTaskStatus_CUSTOM_TASK_SUCCESSFUL        CustomTaskStatus = 1
	CustomTaskStatus_CUSTOM_TASK_RETRIES_EXHAUSTED CustomTaskStatus = 2
	CustomTaskStatus_CUSTOM_TASK_TIMED_OUT         CustomTaskStatus = 3
)

// Enum value maps for CustomTaskStatus.
var (
	CustomTaskStatus_name = map[int32]string{
		0: "CUSTOM_TASK_PENDING",
		1: "CUSTOM_TASK_SUCCESSFUL",
		2: "CUSTOM_TASK_RETRIES_EXHAUSTED",
		3: "CUSTOM_TASK_TIMED_OUT",
	}
	CustomTaskStatus_value = map[string]int32{
		"CUSTOM_TASK_PENDING":           0,
		"CUSTOM_TASK_SUCCESSFUL":        1,
		"CUSTOM_TASK_RETRIES_EXHAUSTED": 2,
		"CUSTOM_TASK_TIMED_OUT":         3,
	}
)

func (x CustomTaskStatus) Enum() *CustomTaskStatus {
	p := new(CustomTaskStatus)
	*p = x
	return p
}

func (x CustomTaskStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CustomTaskStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_prodvana_desired_state_model_desired_state_proto_enumTypes[8].Descriptor()
}

func (CustomTaskStatus) Type() protoreflect.EnumType {
	return &file_prodvana_desired_state_model_desired_state_proto_enumTypes[8]
}

func (x CustomTaskStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CustomTaskStatus.Descriptor instead.
func (CustomTaskStatus) EnumDescriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{8}
}

type SignalType int32

const (
	SignalType_SIGNAL_UNKNOWN             SignalType = 0
	SignalType_DELIVERY_PROMOTION         SignalType = 1
	SignalType_PROTECTION_BYPASS          SignalType = 2
	SignalType_RUNTIME_EXTENSION_APPROVAL SignalType = 3
	SignalType_SIGNAL_MANUAL_APPROVAL     SignalType = 4
	SignalType_RELEASE_CHANNEL_BYPASS     SignalType = 5
	SignalType_CONCURRENCY_LIMIT_BYPASS   SignalType = 6
	SignalType_FORCE_EXECUTE_TASK         SignalType = 7
)

// Enum value maps for SignalType.
var (
	SignalType_name = map[int32]string{
		0: "SIGNAL_UNKNOWN",
		1: "DELIVERY_PROMOTION",
		2: "PROTECTION_BYPASS",
		3: "RUNTIME_EXTENSION_APPROVAL",
		4: "SIGNAL_MANUAL_APPROVAL",
		5: "RELEASE_CHANNEL_BYPASS",
		6: "CONCURRENCY_LIMIT_BYPASS",
		7: "FORCE_EXECUTE_TASK",
	}
	SignalType_value = map[string]int32{
		"SIGNAL_UNKNOWN":             0,
		"DELIVERY_PROMOTION":         1,
		"PROTECTION_BYPASS":          2,
		"RUNTIME_EXTENSION_APPROVAL": 3,
		"SIGNAL_MANUAL_APPROVAL":     4,
		"RELEASE_CHANNEL_BYPASS":     5,
		"CONCURRENCY_LIMIT_BYPASS":   6,
		"FORCE_EXECUTE_TASK":         7,
	}
)

func (x SignalType) Enum() *SignalType {
	p := new(SignalType)
	*p = x
	return p
}

func (x SignalType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SignalType) Descriptor() protoreflect.EnumDescriptor {
	return file_prodvana_desired_state_model_desired_state_proto_enumTypes[9].Descriptor()
}

func (SignalType) Type() protoreflect.EnumType {
	return &file_prodvana_desired_state_model_desired_state_proto_enumTypes[9]
}

func (x SignalType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SignalType.Descriptor instead.
func (SignalType) EnumDescriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{9}
}

type CanaryProgressState_Status int32

const (
	CanaryProgressState_UNKNOWN   CanaryProgressState_Status = 0
	CanaryProgressState_PENDING   CanaryProgressState_Status = 1
	CanaryProgressState_PAUSED    CanaryProgressState_Status = 2
	CanaryProgressState_COMPLETED CanaryProgressState_Status = 3
)

// Enum value maps for CanaryProgressState_Status.
var (
	CanaryProgressState_Status_name = map[int32]string{
		0: "UNKNOWN",
		1: "PENDING",
		2: "PAUSED",
		3: "COMPLETED",
	}
	CanaryProgressState_Status_value = map[string]int32{
		"UNKNOWN":   0,
		"PENDING":   1,
		"PAUSED":    2,
		"COMPLETED": 3,
	}
)

func (x CanaryProgressState_Status) Enum() *CanaryProgressState_Status {
	p := new(CanaryProgressState_Status)
	*p = x
	return p
}

func (x CanaryProgressState_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CanaryProgressState_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_prodvana_desired_state_model_desired_state_proto_enumTypes[10].Descriptor()
}

func (CanaryProgressState_Status) Type() protoreflect.EnumType {
	return &file_prodvana_desired_state_model_desired_state_proto_enumTypes[10]
}

func (x CanaryProgressState_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CanaryProgressState_Status.Descriptor instead.
func (CanaryProgressState_Status) EnumDescriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{14, 0}
}

type BlueGreenProgressState_Status int32

const (
	BlueGreenProgressState_UNKNOWN        BlueGreenProgressState_Status = 0
	BlueGreenProgressState_PENDING        BlueGreenProgressState_Status = 1
	BlueGreenProgressState_SCALING_UP     BlueGreenProgressState_Status = 2
	BlueGreenProgressState_PAUSED_PREVIEW BlueGreenProgressState_Status = 3
	BlueGreenProgressState_SCALING_DOWN   BlueGreenProgressState_Status = 4
	BlueGreenProgressState_COMPLETED      BlueGreenProgressState_Status = 5
	BlueGreenProgressState_ABORTED        BlueGreenProgressState_Status = 6
)

// Enum value maps for BlueGreenProgressState_Status.
var (
	BlueGreenProgressState_Status_name = map[int32]string{
		0: "UNKNOWN",
		1: "PENDING",
		2: "SCALING_UP",
		3: "PAUSED_PREVIEW",
		4: "SCALING_DOWN",
		5: "COMPLETED",
		6: "ABORTED",
	}
	BlueGreenProgressState_Status_value = map[string]int32{
		"UNKNOWN":        0,
		"PENDING":        1,
		"SCALING_UP":     2,
		"PAUSED_PREVIEW": 3,
		"SCALING_DOWN":   4,
		"COMPLETED":      5,
		"ABORTED":        6,
	}
)

func (x BlueGreenProgressState_Status) Enum() *BlueGreenProgressState_Status {
	p := new(BlueGreenProgressState_Status)
	*p = x
	return p
}

func (x BlueGreenProgressState_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlueGreenProgressState_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_prodvana_desired_state_model_desired_state_proto_enumTypes[11].Descriptor()
}

func (BlueGreenProgressState_Status) Type() protoreflect.EnumType {
	return &file_prodvana_desired_state_model_desired_state_proto_enumTypes[11]
}

func (x BlueGreenProgressState_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlueGreenProgressState_Status.Descriptor instead.
func (BlueGreenProgressState_Status) EnumDescriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{15, 0}
}

type DeliveryState_Status int32

const (
	DeliveryState_STATUS_UNKNOWN     DeliveryState_Status = 0
	DeliveryState_STATUS_PROGRESSING DeliveryState_Status = 1
	DeliveryState_STATUS_PAUSED      DeliveryState_Status = 2
	DeliveryState_STATUS_HEALTHY     DeliveryState_Status = 3
	DeliveryState_STATUS_UNHEALTHY   DeliveryState_Status = 4
)

// Enum value maps for DeliveryState_Status.
var (
	DeliveryState_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_PROGRESSING",
		2: "STATUS_PAUSED",
		3: "STATUS_HEALTHY",
		4: "STATUS_UNHEALTHY",
	}
	DeliveryState_Status_value = map[string]int32{
		"STATUS_UNKNOWN":     0,
		"STATUS_PROGRESSING": 1,
		"STATUS_PAUSED":      2,
		"STATUS_HEALTHY":     3,
		"STATUS_UNHEALTHY":   4,
	}
)

func (x DeliveryState_Status) Enum() *DeliveryState_Status {
	p := new(DeliveryState_Status)
	*p = x
	return p
}

func (x DeliveryState_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeliveryState_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_prodvana_desired_state_model_desired_state_proto_enumTypes[12].Descriptor()
}

func (DeliveryState_Status) Type() protoreflect.EnumType {
	return &file_prodvana_desired_state_model_desired_state_proto_enumTypes[12]
}

func (x DeliveryState_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeliveryState_Status.Descriptor instead.
func (DeliveryState_Status) EnumDescriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{16, 0}
}

type FetchDetails_FetchStatus int32

const (
	FetchDetails_UNKNOWN   FetchDetails_FetchStatus = 0
	FetchDetails_DRIFTED   FetchDetails_FetchStatus = 1
	FetchDetails_CONVERGED FetchDetails_FetchStatus = 2
	FetchDetails_FAILED    FetchDetails_FetchStatus = 3
)

// Enum value maps for FetchDetails_FetchStatus.
var (
	FetchDetails_FetchStatus_name = map[int32]string{
		0: "UNKNOWN",
		1: "DRIFTED",
		2: "CONVERGED",
		3: "FAILED",
	}
	FetchDetails_FetchStatus_value = map[string]int32{
		"UNKNOWN":   0,
		"DRIFTED":   1,
		"CONVERGED": 2,
		"FAILED":    3,
	}
)

func (x FetchDetails_FetchStatus) Enum() *FetchDetails_FetchStatus {
	p := new(FetchDetails_FetchStatus)
	*p = x
	return p
}

func (x FetchDetails_FetchStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FetchDetails_FetchStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_prodvana_desired_state_model_desired_state_proto_enumTypes[13].Descriptor()
}

func (FetchDetails_FetchStatus) Type() protoreflect.EnumType {
	return &file_prodvana_desired_state_model_desired_state_proto_enumTypes[13]
}

func (x FetchDetails_FetchStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FetchDetails_FetchStatus.Descriptor instead.
func (FetchDetails_FetchStatus) EnumDescriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{17, 0}
}

type RuntimeExtensionGetInfoDetails_Status int32

const (
	RuntimeExtensionGetInfoDetails_UNKNOWN   RuntimeExtensionGetInfoDetails_Status = 0
	RuntimeExtensionGetInfoDetails_CONVERGED RuntimeExtensionGetInfoDetails_Status = 1
	RuntimeExtensionGetInfoDetails_FAILED    RuntimeExtensionGetInfoDetails_Status = 2
)

// Enum value maps for RuntimeExtensionGetInfoDetails_Status.
var (
	RuntimeExtensionGetInfoDetails_Status_name = map[int32]string{
		0: "UNKNOWN",
		1: "CONVERGED",
		2: "FAILED",
	}
	RuntimeExtensionGetInfoDetails_Status_value = map[string]int32{
		"UNKNOWN":   0,
		"CONVERGED": 1,
		"FAILED":    2,
	}
)

func (x RuntimeExtensionGetInfoDetails_Status) Enum() *RuntimeExtensionGetInfoDetails_Status {
	p := new(RuntimeExtensionGetInfoDetails_Status)
	*p = x
	return p
}

func (x RuntimeExtensionGetInfoDetails_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RuntimeExtensionGetInfoDetails_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_prodvana_desired_state_model_desired_state_proto_enumTypes[14].Descriptor()
}

func (RuntimeExtensionGetInfoDetails_Status) Type() protoreflect.EnumType {
	return &file_prodvana_desired_state_model_desired_state_proto_enumTypes[14]
}

func (x RuntimeExtensionGetInfoDetails_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RuntimeExtensionGetInfoDetails_Status.Descriptor instead.
func (RuntimeExtensionGetInfoDetails_Status) EnumDescriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{20, 0}
}

type ApplyDetails_ApplyStatus int32

const (
	ApplyDetails_UNKNOWN   ApplyDetails_ApplyStatus = 0
	ApplyDetails_CONVERGED ApplyDetails_ApplyStatus = 1
	ApplyDetails_FAILED    ApplyDetails_ApplyStatus = 2
	ApplyDetails_RETRYABLE ApplyDetails_ApplyStatus = 3
)

// Enum value maps for ApplyDetails_ApplyStatus.
var (
	ApplyDetails_ApplyStatus_name = map[int32]string{
		0: "UNKNOWN",
		1: "CONVERGED",
		2: "FAILED",
		3: "RETRYABLE",
	}
	ApplyDetails_ApplyStatus_value = map[string]int32{
		"UNKNOWN":   0,
		"CONVERGED": 1,
		"FAILED":    2,
		"RETRYABLE": 3,
	}
)

func (x ApplyDetails_ApplyStatus) Enum() *ApplyDetails_ApplyStatus {
	p := new(ApplyDetails_ApplyStatus)
	*p = x
	return p
}

func (x ApplyDetails_ApplyStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ApplyDetails_ApplyStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_prodvana_desired_state_model_desired_state_proto_enumTypes[15].Descriptor()
}

func (ApplyDetails_ApplyStatus) Type() protoreflect.EnumType {
	return &file_prodvana_desired_state_model_desired_state_proto_enumTypes[15]
}

func (x ApplyDetails_ApplyStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ApplyDetails_ApplyStatus.Descriptor instead.
func (ApplyDetails_ApplyStatus) EnumDescriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{22, 0}
}

type RuntimeObject_Status int32

const (
	RuntimeObject_PENDING   RuntimeObject_Status = 0
	RuntimeObject_SUCCEEDED RuntimeObject_Status = 1
	RuntimeObject_FAILED    RuntimeObject_Status = 2
)

// Enum value maps for RuntimeObject_Status.
var (
	RuntimeObject_Status_name = map[int32]string{
		0: "PENDING",
		1: "SUCCEEDED",
		2: "FAILED",
	}
	RuntimeObject_Status_value = map[string]int32{
		"PENDING":   0,
		"SUCCEEDED": 1,
		"FAILED":    2,
	}
)

func (x RuntimeObject_Status) Enum() *RuntimeObject_Status {
	p := new(RuntimeObject_Status)
	*p = x
	return p
}

func (x RuntimeObject_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RuntimeObject_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_prodvana_desired_state_model_desired_state_proto_enumTypes[16].Descriptor()
}

func (RuntimeObject_Status) Type() protoreflect.EnumType {
	return &file_prodvana_desired_state_model_desired_state_proto_enumTypes[16]
}

func (x RuntimeObject_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RuntimeObject_Status.Descriptor instead.
func (RuntimeObject_Status) EnumDescriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{24, 0}
}

type RuntimeObject_ManagementStatus int32

const (
	RuntimeObject_PVN_MANAGED RuntimeObject_ManagementStatus = 0
	RuntimeObject_UNMANAGED   RuntimeObject_ManagementStatus = 1
)

// Enum value maps for RuntimeObject_ManagementStatus.
var (
	RuntimeObject_ManagementStatus_name = map[int32]string{
		0: "PVN_MANAGED",
		1: "UNMANAGED",
	}
	RuntimeObject_ManagementStatus_value = map[string]int32{
		"PVN_MANAGED": 0,
		"UNMANAGED":   1,
	}
)

func (x RuntimeObject_ManagementStatus) Enum() *RuntimeObject_ManagementStatus {
	p := new(RuntimeObject_ManagementStatus)
	*p = x
	return p
}

func (x RuntimeObject_ManagementStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RuntimeObject_ManagementStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_prodvana_desired_state_model_desired_state_proto_enumTypes[17].Descriptor()
}

func (RuntimeObject_ManagementStatus) Type() protoreflect.EnumType {
	return &file_prodvana_desired_state_model_desired_state_proto_enumTypes[17]
}

func (x RuntimeObject_ManagementStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RuntimeObject_ManagementStatus.Descriptor instead.
func (RuntimeObject_ManagementStatus) EnumDescriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{24, 1}
}

type KeyDeliveryDecision_Decision int32

const (
	KeyDeliveryDecision_UNKNOWN            KeyDeliveryDecision_Decision = 0
	KeyDeliveryDecision_ROLLBACK_INITIATED KeyDeliveryDecision_Decision = 1
	KeyDeliveryDecision_FAILED             KeyDeliveryDecision_Decision = 2
)

// Enum value maps for KeyDeliveryDecision_Decision.
var (
	KeyDeliveryDecision_Decision_name = map[int32]string{
		0: "UNKNOWN",
		1: "ROLLBACK_INITIATED",
		2: "FAILED",
	}
	KeyDeliveryDecision_Decision_value = map[string]int32{
		"UNKNOWN":            0,
		"ROLLBACK_INITIATED": 1,
		"FAILED":             2,
	}
)

func (x KeyDeliveryDecision_Decision) Enum() *KeyDeliveryDecision_Decision {
	p := new(KeyDeliveryDecision_Decision)
	*p = x
	return p
}

func (x KeyDeliveryDecision_Decision) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KeyDeliveryDecision_Decision) Descriptor() protoreflect.EnumDescriptor {
	return file_prodvana_desired_state_model_desired_state_proto_enumTypes[18].Descriptor()
}

func (KeyDeliveryDecision_Decision) Type() protoreflect.EnumType {
	return &file_prodvana_desired_state_model_desired_state_proto_enumTypes[18]
}

func (x KeyDeliveryDecision_Decision) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KeyDeliveryDecision_Decision.Descriptor instead.
func (KeyDeliveryDecision_Decision) EnumDescriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{30, 0}
}

type ProtectionLinkState_StopReason int32

const (
	ProtectionLinkState_UNKNOWN                ProtectionLinkState_StopReason = 0
	ProtectionLinkState_LIFECYCLE_COMPLETED    ProtectionLinkState_StopReason = 1
	ProtectionLinkState_SUCCEEDED_ONCE         ProtectionLinkState_StopReason = 2
	ProtectionLinkState_SUCCEEDED_FOR_DURATION ProtectionLinkState_StopReason = 3
	ProtectionLinkState_TIMED_OUT              ProtectionLinkState_StopReason = 4
	ProtectionLinkState_FAILED                 ProtectionLinkState_StopReason = 5
	ProtectionLinkState_DELETED                ProtectionLinkState_StopReason = 6
	ProtectionLinkState_MANUALLY_BYPASSED      ProtectionLinkState_StopReason = 7
)

// Enum value maps for ProtectionLinkState_StopReason.
var (
	ProtectionLinkState_StopReason_name = map[int32]string{
		0: "UNKNOWN",
		1: "LIFECYCLE_COMPLETED",
		2: "SUCCEEDED_ONCE",
		3: "SUCCEEDED_FOR_DURATION",
		4: "TIMED_OUT",
		5: "FAILED",
		6: "DELETED",
		7: "MANUALLY_BYPASSED",
	}
	ProtectionLinkState_StopReason_value = map[string]int32{
		"UNKNOWN":                0,
		"LIFECYCLE_COMPLETED":    1,
		"SUCCEEDED_ONCE":         2,
		"SUCCEEDED_FOR_DURATION": 3,
		"TIMED_OUT":              4,
		"FAILED":                 5,
		"DELETED":                6,
		"MANUALLY_BYPASSED":      7,
	}
)

func (x ProtectionLinkState_StopReason) Enum() *ProtectionLinkState_StopReason {
	p := new(ProtectionLinkState_StopReason)
	*p = x
	return p
}

func (x ProtectionLinkState_StopReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtectionLinkState_StopReason) Descriptor() protoreflect.EnumDescriptor {
	return file_prodvana_desired_state_model_desired_state_proto_enumTypes[19].Descriptor()
}

func (ProtectionLinkState_StopReason) Type() protoreflect.EnumType {
	return &file_prodvana_desired_state_model_desired_state_proto_enumTypes[19]
}

func (x ProtectionLinkState_StopReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProtectionLinkState_StopReason.Descriptor instead.
func (ProtectionLinkState_StopReason) EnumDescriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{37, 0}
}

type ProtectionAttachmentResult_Status int32

const (
	ProtectionAttachmentResult_UNKNOWN             ProtectionAttachmentResult_Status = 0
	ProtectionAttachmentResult_PASSING             ProtectionAttachmentResult_Status = 1
	ProtectionAttachmentResult_BLOCKING            ProtectionAttachmentResult_Status = 2
	ProtectionAttachmentResult_CONFIGURATION_ERROR ProtectionAttachmentResult_Status = 3
	ProtectionAttachmentResult_INTERNAL_ERROR      ProtectionAttachmentResult_Status = 4
)

// Enum value maps for ProtectionAttachmentResult_Status.
var (
	ProtectionAttachmentResult_Status_name = map[int32]string{
		0: "UNKNOWN",
		1: "PASSING",
		2: "BLOCKING",
		3: "CONFIGURATION_ERROR",
		4: "INTERNAL_ERROR",
	}
	ProtectionAttachmentResult_Status_value = map[string]int32{
		"UNKNOWN":             0,
		"PASSING":             1,
		"BLOCKING":            2,
		"CONFIGURATION_ERROR": 3,
		"INTERNAL_ERROR":      4,
	}
)

func (x ProtectionAttachmentResult_Status) Enum() *ProtectionAttachmentResult_Status {
	p := new(ProtectionAttachmentResult_Status)
	*p = x
	return p
}

func (x ProtectionAttachmentResult_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtectionAttachmentResult_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_prodvana_desired_state_model_desired_state_proto_enumTypes[20].Descriptor()
}

func (ProtectionAttachmentResult_Status) Type() protoreflect.EnumType {
	return &file_prodvana_desired_state_model_desired_state_proto_enumTypes[20]
}

func (x ProtectionAttachmentResult_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProtectionAttachmentResult_Status.Descriptor instead.
func (ProtectionAttachmentResult_Status) EnumDescriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{38, 0}
}

type TaskRun_Phase int32

const (
	TaskRun_RUNNING     TaskRun_Phase = 0
	TaskRun_NOT_STARTED TaskRun_Phase = 1
)

// Enum value maps for TaskRun_Phase.
var (
	TaskRun_Phase_name = map[int32]string{
		0: "RUNNING",
		1: "NOT_STARTED",
	}
	TaskRun_Phase_value = map[string]int32{
		"RUNNING":     0,
		"NOT_STARTED": 1,
	}
)

func (x TaskRun_Phase) Enum() *TaskRun_Phase {
	p := new(TaskRun_Phase)
	*p = x
	return p
}

func (x TaskRun_Phase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskRun_Phase) Descriptor() protoreflect.EnumDescriptor {
	return file_prodvana_desired_state_model_desired_state_proto_enumTypes[21].Descriptor()
}

func (TaskRun_Phase) Type() protoreflect.EnumType {
	return &file_prodvana_desired_state_model_desired_state_proto_enumTypes[21]
}

func (x TaskRun_Phase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskRun_Phase.Descriptor instead.
func (TaskRun_Phase) EnumDescriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{50, 0}
}

type ProtectionLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lifecycle    *protection.ProtectionLifecycle `protobuf:"bytes,3,opt,name=lifecycle,proto3" json:"lifecycle,omitempty"`
	AttachmentId string                          `protobuf:"bytes,4,opt,name=attachment_id,json=attachmentId,proto3" json:"attachment_id,omitempty"`
}

func (x *ProtectionLink) Reset() {
	*x = ProtectionLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtectionLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtectionLink) ProtoMessage() {}

func (x *ProtectionLink) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtectionLink.ProtoReflect.Descriptor instead.
func (*ProtectionLink) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{0}
}

func (x *ProtectionLink) GetLifecycle() *protection.ProtectionLifecycle {
	if x != nil {
		return x.Lifecycle
	}
	return nil
}

func (x *ProtectionLink) GetAttachmentId() string {
	if x != nil {
		return x.AttachmentId
	}
	return ""
}

type Condition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Condition:
	//
	//	*Condition_RcCond
	//	*Condition_ManualApproval_
	//	*Condition_CustomTask
	Condition isCondition_Condition `protobuf_oneof:"condition"`
	// Generated during SetDesiredState.
	// Do not set as part of input unless reusing an existing precondition, e.g., patching an existing desired state without regenerating some preconditions.
	DesiredStateId string `protobuf:"bytes,4,opt,name=desired_state_id,json=desiredStateId,proto3" json:"desired_state_id,omitempty"`
}

func (x *Condition) Reset() {
	*x = Condition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition) ProtoMessage() {}

func (x *Condition) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition.ProtoReflect.Descriptor instead.
func (*Condition) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{1}
}

func (m *Condition) GetCondition() isCondition_Condition {
	if m != nil {
		return m.Condition
	}
	return nil
}

func (x *Condition) GetRcCond() *Condition_ReleaseChannelStableCondition {
	if x, ok := x.GetCondition().(*Condition_RcCond); ok {
		return x.RcCond
	}
	return nil
}

func (x *Condition) GetManualApproval() *Condition_ManualApproval {
	if x, ok := x.GetCondition().(*Condition_ManualApproval_); ok {
		return x.ManualApproval
	}
	return nil
}

func (x *Condition) GetCustomTask() *Condition_CustomTaskSuccessfulCondition {
	if x, ok := x.GetCondition().(*Condition_CustomTask); ok {
		return x.CustomTask
	}
	return nil
}

func (x *Condition) GetDesiredStateId() string {
	if x != nil {
		return x.DesiredStateId
	}
	return ""
}

type isCondition_Condition interface {
	isCondition_Condition()
}

type Condition_RcCond struct {
	RcCond *Condition_ReleaseChannelStableCondition `protobuf:"bytes,1,opt,name=rc_cond,json=rcCond,proto3,oneof"`
}

type Condition_ManualApproval_ struct {
	ManualApproval *Condition_ManualApproval `protobuf:"bytes,2,opt,name=manual_approval,json=manualApproval,proto3,oneof"`
}

type Condition_CustomTask struct {
	CustomTask *Condition_CustomTaskSuccessfulCondition `protobuf:"bytes,3,opt,name=custom_task,json=customTask,proto3,oneof"`
}

func (*Condition_RcCond) isCondition_Condition() {}

func (*Condition_ManualApproval_) isCondition_Condition() {}

func (*Condition_CustomTask) isCondition_Condition() {}

type DeliveryExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId string                      `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Lifecycle  common_config.TaskLifecycle `protobuf:"varint,2,opt,name=lifecycle,proto3,enum=prodvana.common_config.TaskLifecycle" json:"lifecycle,omitempty"`
	References []*Identifier               `protobuf:"bytes,3,rep,name=references,proto3" json:"references,omitempty"`
}

func (x *DeliveryExtension) Reset() {
	*x = DeliveryExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliveryExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliveryExtension) ProtoMessage() {}

func (x *DeliveryExtension) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliveryExtension.ProtoReflect.Descriptor instead.
func (*DeliveryExtension) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{2}
}

func (x *DeliveryExtension) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *DeliveryExtension) GetLifecycle() common_config.TaskLifecycle {
	if x != nil {
		return x.Lifecycle
	}
	return common_config.TaskLifecycle(0)
}

func (x *DeliveryExtension) GetReferences() []*Identifier {
	if x != nil {
		return x.References
	}
	return nil
}

type ProtectionAttachmentDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtectionId      string `protobuf:"bytes,1,opt,name=protection_id,json=protectionId,proto3" json:"protection_id,omitempty"`
	AttachmentId      string `protobuf:"bytes,2,opt,name=attachment_id,json=attachmentId,proto3" json:"attachment_id,omitempty"`
	ProtectionVersion string `protobuf:"bytes,3,opt,name=protection_version,json=protectionVersion,proto3" json:"protection_version,omitempty"` // next tag: 4
}

func (x *ProtectionAttachmentDefinition) Reset() {
	*x = ProtectionAttachmentDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtectionAttachmentDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtectionAttachmentDefinition) ProtoMessage() {}

func (x *ProtectionAttachmentDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtectionAttachmentDefinition.ProtoReflect.Descriptor instead.
func (*ProtectionAttachmentDefinition) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{3}
}

func (x *ProtectionAttachmentDefinition) GetProtectionId() string {
	if x != nil {
		return x.ProtectionId
	}
	return ""
}

func (x *ProtectionAttachmentDefinition) GetAttachmentId() string {
	if x != nil {
		return x.AttachmentId
	}
	return ""
}

func (x *ProtectionAttachmentDefinition) GetProtectionVersion() string {
	if x != nil {
		return x.ProtectionVersion
	}
	return ""
}

type Identifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type Type `protobuf:"varint,1,opt,name=type,proto3,enum=prodvana.desired_state.model.Type" json:"type,omitempty"`
	// globally unique identifier
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Identifier) Reset() {
	*x = Identifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identifier) ProtoMessage() {}

func (x *Identifier) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identifier.ProtoReflect.Descriptor instead.
func (*Identifier) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{4}
}

func (x *Identifier) GetType() Type {
	if x != nil {
		return x.Type
	}
	return Type_UNKNOWN
}

func (x *Identifier) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ConcurrencyLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LimitId     string `protobuf:"bytes,1,opt,name=limit_id,json=limitId,proto3" json:"limit_id,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *ConcurrencyLimit) Reset() {
	*x = ConcurrencyLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConcurrencyLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConcurrencyLimit) ProtoMessage() {}

func (x *ConcurrencyLimit) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConcurrencyLimit.ProtoReflect.Descriptor instead.
func (*ConcurrencyLimit) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{5}
}

func (x *ConcurrencyLimit) GetLimitId() string {
	if x != nil {
		return x.LimitId
	}
	return ""
}

func (x *ConcurrencyLimit) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Preconditions                    []*Condition                      `protobuf:"bytes,1,rep,name=preconditions,proto3" json:"preconditions,omitempty"`
	Invariants                       []*Condition                      `protobuf:"bytes,2,rep,name=invariants,proto3" json:"invariants,omitempty"`
	Self                             *Identifier                       `protobuf:"bytes,3,opt,name=self,proto3" json:"self,omitempty"`
	DesiredStateId                   string                            `protobuf:"bytes,4,opt,name=desired_state_id,json=desiredStateId,proto3" json:"desired_state_id,omitempty"`
	RootDesiredStateId               string                            `protobuf:"bytes,5,opt,name=root_desired_state_id,json=rootDesiredStateId,proto3" json:"root_desired_state_id,omitempty"`
	ReleaseId                        string                            `protobuf:"bytes,14,opt,name=release_id,json=releaseId,proto3" json:"release_id,omitempty"`
	ProtectionLinks                  []*ProtectionLink                 `protobuf:"bytes,6,rep,name=protection_links,json=protectionLinks,proto3" json:"protection_links,omitempty"`
	DeliveryExtensions               []*DeliveryExtension              `protobuf:"bytes,8,rep,name=delivery_extensions,json=deliveryExtensions,proto3" json:"delivery_extensions,omitempty"`
	ConvergenceProtectionAttachments []*ProtectionAttachmentDefinition `protobuf:"bytes,13,rep,name=convergence_protection_attachments,json=convergenceProtectionAttachments,proto3" json:"convergence_protection_attachments,omitempty"`
	ConcurrencyLimits                []*ConcurrencyLimit               `protobuf:"bytes,15,rep,name=concurrency_limits,json=concurrencyLimits,proto3" json:"concurrency_limits,omitempty"`
	// if true, the entity does not set its own target state. instead, the target state will be set when the parent decides to set target state.
	TargetStateSetByParent     bool `protobuf:"varint,9,opt,name=target_state_set_by_parent,json=targetStateSetByParent,proto3" json:"target_state_set_by_parent,omitempty"`
	RequireApprovalBeforeApply bool `protobuf:"varint,10,opt,name=require_approval_before_apply,json=requireApprovalBeforeApply,proto3" json:"require_approval_before_apply,omitempty"`
	AppliesInObserverMode      bool `protobuf:"varint,11,opt,name=applies_in_observer_mode,json=appliesInObserverMode,proto3" json:"applies_in_observer_mode,omitempty"`
	// How long after apply ran the first time should it be restarted if the entity still has not converged.
	// This duration is computed from the *start* of apply run.
	ConvergenceGracePeriod *durationpb.Duration `protobuf:"bytes,12,opt,name=convergence_grace_period,json=convergenceGracePeriod,proto3" json:"convergence_grace_period,omitempty"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{6}
}

func (x *Metadata) GetPreconditions() []*Condition {
	if x != nil {
		return x.Preconditions
	}
	return nil
}

func (x *Metadata) GetInvariants() []*Condition {
	if x != nil {
		return x.Invariants
	}
	return nil
}

func (x *Metadata) GetSelf() *Identifier {
	if x != nil {
		return x.Self
	}
	return nil
}

func (x *Metadata) GetDesiredStateId() string {
	if x != nil {
		return x.DesiredStateId
	}
	return ""
}

func (x *Metadata) GetRootDesiredStateId() string {
	if x != nil {
		return x.RootDesiredStateId
	}
	return ""
}

func (x *Metadata) GetReleaseId() string {
	if x != nil {
		return x.ReleaseId
	}
	return ""
}

func (x *Metadata) GetProtectionLinks() []*ProtectionLink {
	if x != nil {
		return x.ProtectionLinks
	}
	return nil
}

func (x *Metadata) GetDeliveryExtensions() []*DeliveryExtension {
	if x != nil {
		return x.DeliveryExtensions
	}
	return nil
}

func (x *Metadata) GetConvergenceProtectionAttachments() []*ProtectionAttachmentDefinition {
	if x != nil {
		return x.ConvergenceProtectionAttachments
	}
	return nil
}

func (x *Metadata) GetConcurrencyLimits() []*ConcurrencyLimit {
	if x != nil {
		return x.ConcurrencyLimits
	}
	return nil
}

func (x *Metadata) GetTargetStateSetByParent() bool {
	if x != nil {
		return x.TargetStateSetByParent
	}
	return false
}

func (x *Metadata) GetRequireApprovalBeforeApply() bool {
	if x != nil {
		return x.RequireApprovalBeforeApply
	}
	return false
}

func (x *Metadata) GetAppliesInObserverMode() bool {
	if x != nil {
		return x.AppliesInObserverMode
	}
	return false
}

func (x *Metadata) GetConvergenceGracePeriod() *durationpb.Duration {
	if x != nil {
		return x.ConvergenceGracePeriod
	}
	return nil
}

type StatusExplanation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subject         *Identifier  `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`                                        // the id of the object that resulted in this status. In the case of parent entities, this may be one of the child entities, or itself.
	DesiredStateId  string       `protobuf:"bytes,5,opt,name=desired_state_id,json=desiredStateId,proto3" json:"desired_state_id,omitempty"`  // desired state id of the subject
	ServiceInstance *Identifier  `protobuf:"bytes,6,opt,name=service_instance,json=serviceInstance,proto3" json:"service_instance,omitempty"` // if set, the service instance ID that the explanation got rolled up through.
	Reason          StatusReason `protobuf:"varint,2,opt,name=reason,proto3,enum=prodvana.desired_state.model.StatusReason" json:"reason,omitempty"`
	// Optional freeform message to be shown to the user alongside reason.
	// only one of the two will be set
	Message  string   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Messages []string `protobuf:"bytes,4,rep,name=messages,proto3" json:"messages,omitempty"` // next tag: 7
}

func (x *StatusExplanation) Reset() {
	*x = StatusExplanation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusExplanation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusExplanation) ProtoMessage() {}

func (x *StatusExplanation) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusExplanation.ProtoReflect.Descriptor instead.
func (*StatusExplanation) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{7}
}

func (x *StatusExplanation) GetSubject() *Identifier {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *StatusExplanation) GetDesiredStateId() string {
	if x != nil {
		return x.DesiredStateId
	}
	return ""
}

func (x *StatusExplanation) GetServiceInstance() *Identifier {
	if x != nil {
		return x.ServiceInstance
	}
	return nil
}

func (x *StatusExplanation) GetReason() StatusReason {
	if x != nil {
		return x.Reason
	}
	return StatusReason_REASON_UNKNOWN
}

func (x *StatusExplanation) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *StatusExplanation) GetMessages() []string {
	if x != nil {
		return x.Messages
	}
	return nil
}

// What action is DD taking now?
type ActionExplanation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts         *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"`
	ActionType ActionType             `protobuf:"varint,2,opt,name=action_type,json=actionType,proto3,enum=prodvana.desired_state.model.ActionType" json:"action_type,omitempty"`
	Message    string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ActionExplanation) Reset() {
	*x = ActionExplanation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionExplanation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionExplanation) ProtoMessage() {}

func (x *ActionExplanation) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionExplanation.ProtoReflect.Descriptor instead.
func (*ActionExplanation) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{8}
}

func (x *ActionExplanation) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *ActionExplanation) GetActionType() ActionType {
	if x != nil {
		return x.ActionType
	}
	return ActionType_ACTION_TYPE_UNKNOWN
}

func (x *ActionExplanation) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Version struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version           string                 `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Replicas          int32                  `protobuf:"varint,2,opt,name=replicas,proto3" json:"replicas,omitempty"`                                            // Created/running replicas, can be in any state
	AvailableReplicas int32                  `protobuf:"varint,8,opt,name=available_replicas,json=availableReplicas,proto3" json:"available_replicas,omitempty"` // Replicas which have passed healthchecks for required duration.
	PushTimestamp     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=push_timestamp,json=pushTimestamp,proto3" json:"push_timestamp,omitempty"`
	// A version is active if it is the version in which the underlying object is converging to.
	// A runtime object will have exactly one active version, while a service instance may have one or more
	// depending on if it maps to more than one runtime object.
	Active         bool  `protobuf:"varint,5,opt,name=active,proto3" json:"active,omitempty"`
	TargetReplicas int32 `protobuf:"varint,6,opt,name=target_replicas,json=targetReplicas,proto3" json:"target_replicas,omitempty"`
	// A version is dirty if its state no longer matches desired state and must be fixed by a redeploy.
	// For example, a terraform version is dirty if its plan output returns differences.
	// DD will only take action on dirty if the version is also active.
	Dirty    bool `protobuf:"varint,9,opt,name=dirty,proto3" json:"dirty,omitempty"`
	SkipInUi bool `protobuf:"varint,10,opt,name=skip_in_ui,json=skipInUi,proto3" json:"skip_in_ui,omitempty"`
}

func (x *Version) Reset() {
	*x = Version{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Version) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Version) ProtoMessage() {}

func (x *Version) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Version.ProtoReflect.Descriptor instead.
func (*Version) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{9}
}

func (x *Version) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Version) GetReplicas() int32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

func (x *Version) GetAvailableReplicas() int32 {
	if x != nil {
		return x.AvailableReplicas
	}
	return 0
}

func (x *Version) GetPushTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.PushTimestamp
	}
	return nil
}

func (x *Version) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *Version) GetTargetReplicas() int32 {
	if x != nil {
		return x.TargetReplicas
	}
	return 0
}

func (x *Version) GetDirty() bool {
	if x != nil {
		return x.Dirty
	}
	return false
}

func (x *Version) GetSkipInUi() bool {
	if x != nil {
		return x.SkipInUi
	}
	return false
}

type ServiceInstanceState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta             *Metadata  `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	Application      string     `protobuf:"bytes,2,opt,name=application,proto3" json:"application,omitempty"`
	Service          string     `protobuf:"bytes,3,opt,name=service,proto3" json:"service,omitempty"`
	ReleaseChannel   string     `protobuf:"bytes,4,opt,name=release_channel,json=releaseChannel,proto3" json:"release_channel,omitempty"`
	ServiceId        string     `protobuf:"bytes,8,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`                        // set internally by prodvana
	ReleaseChannelId string     `protobuf:"bytes,9,opt,name=release_channel_id,json=releaseChannelId,proto3" json:"release_channel_id,omitempty"` // set internally by prodvana
	Versions         []*Version `protobuf:"bytes,5,rep,name=versions,proto3" json:"versions,omitempty"`
	// Types that are assignable to AutorollbackOneof:
	//
	//	*ServiceInstanceState_RollbackVersion
	//	*ServiceInstanceState_ComputeRollbackVersion
	AutorollbackOneof          isServiceInstanceState_AutorollbackOneof `protobuf_oneof:"autorollback_oneof"`
	Rollback                   bool                                     `protobuf:"varint,7,opt,name=rollback,proto3" json:"rollback,omitempty"`
	Delivery                   *DeliveryState                           `protobuf:"bytes,10,opt,name=delivery,proto3" json:"delivery,omitempty"`
	DeploymentOwnedByChildren  bool                                     `protobuf:"varint,12,opt,name=deployment_owned_by_children,json=deploymentOwnedByChildren,proto3" json:"deployment_owned_by_children,omitempty"` // used internally by prodvana. If set, the deployment action (apply) is done by the children, not by the Service Instance itself.
	AutorollbackDisabledReason string                                   `protobuf:"bytes,13,opt,name=autorollback_disabled_reason,json=autorollbackDisabledReason,proto3" json:"autorollback_disabled_reason,omitempty"` // used internally by Prodvana. For display purposes only.
	NeedsApply                 bool                                     `protobuf:"varint,14,opt,name=needs_apply,json=needsApply,proto3" json:"needs_apply,omitempty"`
}

func (x *ServiceInstanceState) Reset() {
	*x = ServiceInstanceState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceInstanceState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceInstanceState) ProtoMessage() {}

func (x *ServiceInstanceState) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceInstanceState.ProtoReflect.Descriptor instead.
func (*ServiceInstanceState) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{10}
}

func (x *ServiceInstanceState) GetMeta() *Metadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ServiceInstanceState) GetApplication() string {
	if x != nil {
		return x.Application
	}
	return ""
}

func (x *ServiceInstanceState) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *ServiceInstanceState) GetReleaseChannel() string {
	if x != nil {
		return x.ReleaseChannel
	}
	return ""
}

func (x *ServiceInstanceState) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *ServiceInstanceState) GetReleaseChannelId() string {
	if x != nil {
		return x.ReleaseChannelId
	}
	return ""
}

func (x *ServiceInstanceState) GetVersions() []*Version {
	if x != nil {
		return x.Versions
	}
	return nil
}

func (m *ServiceInstanceState) GetAutorollbackOneof() isServiceInstanceState_AutorollbackOneof {
	if m != nil {
		return m.AutorollbackOneof
	}
	return nil
}

func (x *ServiceInstanceState) GetRollbackVersion() *Version {
	if x, ok := x.GetAutorollbackOneof().(*ServiceInstanceState_RollbackVersion); ok {
		return x.RollbackVersion
	}
	return nil
}

func (x *ServiceInstanceState) GetComputeRollbackVersion() bool {
	if x, ok := x.GetAutorollbackOneof().(*ServiceInstanceState_ComputeRollbackVersion); ok {
		return x.ComputeRollbackVersion
	}
	return false
}

func (x *ServiceInstanceState) GetRollback() bool {
	if x != nil {
		return x.Rollback
	}
	return false
}

func (x *ServiceInstanceState) GetDelivery() *DeliveryState {
	if x != nil {
		return x.Delivery
	}
	return nil
}

func (x *ServiceInstanceState) GetDeploymentOwnedByChildren() bool {
	if x != nil {
		return x.DeploymentOwnedByChildren
	}
	return false
}

func (x *ServiceInstanceState) GetAutorollbackDisabledReason() string {
	if x != nil {
		return x.AutorollbackDisabledReason
	}
	return ""
}

func (x *ServiceInstanceState) GetNeedsApply() bool {
	if x != nil {
		return x.NeedsApply
	}
	return false
}

type isServiceInstanceState_AutorollbackOneof interface {
	isServiceInstanceState_AutorollbackOneof()
}

type ServiceInstanceState_RollbackVersion struct {
	// set an explicit auto rollback version
	RollbackVersion *Version `protobuf:"bytes,6,opt,name=rollback_version,json=rollbackVersion,proto3,oneof"`
}

type ServiceInstanceState_ComputeRollbackVersion struct {
	// use the last converged version as the auto rollback version
	// will not do anything if the *latest* service config has auto rollback disabled
	ComputeRollbackVersion bool `protobuf:"varint,11,opt,name=compute_rollback_version,json=computeRollbackVersion,proto3,oneof"`
}

func (*ServiceInstanceState_RollbackVersion) isServiceInstanceState_AutorollbackOneof() {}

func (*ServiceInstanceState_ComputeRollbackVersion) isServiceInstanceState_AutorollbackOneof() {}

type ServiceState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta            *Metadata               `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	Application     string                  `protobuf:"bytes,2,opt,name=application,proto3" json:"application,omitempty"`
	Service         string                  `protobuf:"bytes,3,opt,name=service,proto3" json:"service,omitempty"`
	ServiceId       string                  `protobuf:"bytes,5,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"` // set internally by prodvana
	ReleaseChannels []*ServiceInstanceState `protobuf:"bytes,6,rep,name=release_channels,json=releaseChannels,proto3" json:"release_channels,omitempty"`
	// Definitions for custom tasks used by this service. Must be empty if part of service group.
	CustomTasks        []*CustomTaskState        `protobuf:"bytes,7,rep,name=custom_tasks,json=customTasks,proto3" json:"custom_tasks,omitempty"`
	DeliveryExtensions []*DeliveryExtensionState `protobuf:"bytes,9,rep,name=delivery_extensions,json=deliveryExtensions,proto3" json:"delivery_extensions,omitempty"`
	// in leau of listing out individual release channels, specify versions for release channels using label selectors instead.
	// This can only be used as input to SetDesiredState and will never be returned as output from a convergence summary.
	ReleaseChannelLabelSelectors []*ServiceInstanceLabelSelector `protobuf:"bytes,10,rep,name=release_channel_label_selectors,json=releaseChannelLabelSelectors,proto3" json:"release_channel_label_selectors,omitempty"`
}

func (x *ServiceState) Reset() {
	*x = ServiceState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceState) ProtoMessage() {}

func (x *ServiceState) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceState.ProtoReflect.Descriptor instead.
func (*ServiceState) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{11}
}

func (x *ServiceState) GetMeta() *Metadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ServiceState) GetApplication() string {
	if x != nil {
		return x.Application
	}
	return ""
}

func (x *ServiceState) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *ServiceState) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *ServiceState) GetReleaseChannels() []*ServiceInstanceState {
	if x != nil {
		return x.ReleaseChannels
	}
	return nil
}

func (x *ServiceState) GetCustomTasks() []*CustomTaskState {
	if x != nil {
		return x.CustomTasks
	}
	return nil
}

func (x *ServiceState) GetDeliveryExtensions() []*DeliveryExtensionState {
	if x != nil {
		return x.DeliveryExtensions
	}
	return nil
}

func (x *ServiceState) GetReleaseChannelLabelSelectors() []*ServiceInstanceLabelSelector {
	if x != nil {
		return x.ReleaseChannelLabelSelectors
	}
	return nil
}

type ServiceInstanceLabelSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SelectorOneof:
	//
	//	*ServiceInstanceLabelSelector_ReleaseChannelSelector
	//	*ServiceInstanceLabelSelector_All
	SelectorOneof isServiceInstanceLabelSelector_SelectorOneof `protobuf_oneof:"selector_oneof"`
	Versions      []*Version                                   `protobuf:"bytes,3,rep,name=versions,proto3" json:"versions,omitempty"`
	// Types that are assignable to AutorollbackOneof:
	//
	//	*ServiceInstanceLabelSelector_RollbackVersion
	//	*ServiceInstanceLabelSelector_ComputeRollbackVersion
	AutorollbackOneof isServiceInstanceLabelSelector_AutorollbackOneof `protobuf_oneof:"autorollback_oneof"`
	// set internally by Prodvana in compiled desired state to track what this selector evaluated to. This includes all release channels,
	// including ones that would be overridden by something else.
	MaterializedReleaseChannels []string `protobuf:"bytes,6,rep,name=materialized_release_channels,json=materializedReleaseChannels,proto3" json:"materialized_release_channels,omitempty"`
}

func (x *ServiceInstanceLabelSelector) Reset() {
	*x = ServiceInstanceLabelSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceInstanceLabelSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceInstanceLabelSelector) ProtoMessage() {}

func (x *ServiceInstanceLabelSelector) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceInstanceLabelSelector.ProtoReflect.Descriptor instead.
func (*ServiceInstanceLabelSelector) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{12}
}

func (m *ServiceInstanceLabelSelector) GetSelectorOneof() isServiceInstanceLabelSelector_SelectorOneof {
	if m != nil {
		return m.SelectorOneof
	}
	return nil
}

func (x *ServiceInstanceLabelSelector) GetReleaseChannelSelector() string {
	if x, ok := x.GetSelectorOneof().(*ServiceInstanceLabelSelector_ReleaseChannelSelector); ok {
		return x.ReleaseChannelSelector
	}
	return ""
}

func (x *ServiceInstanceLabelSelector) GetAll() bool {
	if x, ok := x.GetSelectorOneof().(*ServiceInstanceLabelSelector_All); ok {
		return x.All
	}
	return false
}

func (x *ServiceInstanceLabelSelector) GetVersions() []*Version {
	if x != nil {
		return x.Versions
	}
	return nil
}

func (m *ServiceInstanceLabelSelector) GetAutorollbackOneof() isServiceInstanceLabelSelector_AutorollbackOneof {
	if m != nil {
		return m.AutorollbackOneof
	}
	return nil
}

func (x *ServiceInstanceLabelSelector) GetRollbackVersion() *Version {
	if x, ok := x.GetAutorollbackOneof().(*ServiceInstanceLabelSelector_RollbackVersion); ok {
		return x.RollbackVersion
	}
	return nil
}

func (x *ServiceInstanceLabelSelector) GetComputeRollbackVersion() bool {
	if x, ok := x.GetAutorollbackOneof().(*ServiceInstanceLabelSelector_ComputeRollbackVersion); ok {
		return x.ComputeRollbackVersion
	}
	return false
}

func (x *ServiceInstanceLabelSelector) GetMaterializedReleaseChannels() []string {
	if x != nil {
		return x.MaterializedReleaseChannels
	}
	return nil
}

type isServiceInstanceLabelSelector_SelectorOneof interface {
	isServiceInstanceLabelSelector_SelectorOneof()
}

type ServiceInstanceLabelSelector_ReleaseChannelSelector struct {
	ReleaseChannelSelector string `protobuf:"bytes,1,opt,name=release_channel_selector,json=releaseChannelSelector,proto3,oneof"` // release channel selector, automatically scoped to `@type=release-channel @application=<app>`
}

type ServiceInstanceLabelSelector_All struct {
	All bool `protobuf:"varint,2,opt,name=all,proto3,oneof"` // target all release channels
}

func (*ServiceInstanceLabelSelector_ReleaseChannelSelector) isServiceInstanceLabelSelector_SelectorOneof() {
}

func (*ServiceInstanceLabelSelector_All) isServiceInstanceLabelSelector_SelectorOneof() {}

type isServiceInstanceLabelSelector_AutorollbackOneof interface {
	isServiceInstanceLabelSelector_AutorollbackOneof()
}

type ServiceInstanceLabelSelector_RollbackVersion struct {
	// set an explicit auto rollback version
	RollbackVersion *Version `protobuf:"bytes,4,opt,name=rollback_version,json=rollbackVersion,proto3,oneof"`
}

type ServiceInstanceLabelSelector_ComputeRollbackVersion struct {
	// use the last converged version as the auto rollback version
	ComputeRollbackVersion bool `protobuf:"varint,5,opt,name=compute_rollback_version,json=computeRollbackVersion,proto3,oneof"`
}

func (*ServiceInstanceLabelSelector_RollbackVersion) isServiceInstanceLabelSelector_AutorollbackOneof() {
}

func (*ServiceInstanceLabelSelector_ComputeRollbackVersion) isServiceInstanceLabelSelector_AutorollbackOneof() {
}

type ServiceGroupState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta     *Metadata       `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	Services []*ServiceState `protobuf:"bytes,2,rep,name=services,proto3" json:"services,omitempty"`
	// Definitions for custom tasks used by this service group.
	CustomTasks        []*CustomTaskState        `protobuf:"bytes,3,rep,name=custom_tasks,json=customTasks,proto3" json:"custom_tasks,omitempty"`
	DeliveryExtensions []*DeliveryExtensionState `protobuf:"bytes,5,rep,name=delivery_extensions,json=deliveryExtensions,proto3" json:"delivery_extensions,omitempty"`
}

func (x *ServiceGroupState) Reset() {
	*x = ServiceGroupState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceGroupState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceGroupState) ProtoMessage() {}

func (x *ServiceGroupState) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceGroupState.ProtoReflect.Descriptor instead.
func (*ServiceGroupState) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{13}
}

func (x *ServiceGroupState) GetMeta() *Metadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ServiceGroupState) GetServices() []*ServiceState {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *ServiceGroupState) GetCustomTasks() []*CustomTaskState {
	if x != nil {
		return x.CustomTasks
	}
	return nil
}

func (x *ServiceGroupState) GetDeliveryExtensions() []*DeliveryExtensionState {
	if x != nil {
		return x.DeliveryExtensions
	}
	return nil
}

type CanaryProgressState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status CanaryProgressState_Status `protobuf:"varint,1,opt,name=status,proto3,enum=prodvana.desired_state.model.CanaryProgressState_Status" json:"status,omitempty"`
	// current canary weight
	CanaryWeight int32 `protobuf:"varint,2,opt,name=canary_weight,json=canaryWeight,proto3" json:"canary_weight,omitempty"`
	// pause duration at this weight before advancing
	Duration *durationpb.Duration `protobuf:"bytes,3,opt,name=duration,proto3" json:"duration,omitempty"`
	// when status = PAUSED this indicates when the pause started
	PauseStartTimestamp *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=pause_start_timestamp,json=pauseStartTimestamp,proto3" json:"pause_start_timestamp,omitempty"`
}

func (x *CanaryProgressState) Reset() {
	*x = CanaryProgressState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CanaryProgressState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CanaryProgressState) ProtoMessage() {}

func (x *CanaryProgressState) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CanaryProgressState.ProtoReflect.Descriptor instead.
func (*CanaryProgressState) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{14}
}

func (x *CanaryProgressState) GetStatus() CanaryProgressState_Status {
	if x != nil {
		return x.Status
	}
	return CanaryProgressState_UNKNOWN
}

func (x *CanaryProgressState) GetCanaryWeight() int32 {
	if x != nil {
		return x.CanaryWeight
	}
	return 0
}

func (x *CanaryProgressState) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *CanaryProgressState) GetPauseStartTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.PauseStartTimestamp
	}
	return nil
}

type BlueGreenProgressState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status BlueGreenProgressState_Status `protobuf:"varint,1,opt,name=status,proto3,enum=prodvana.desired_state.model.BlueGreenProgressState_Status" json:"status,omitempty"`
}

func (x *BlueGreenProgressState) Reset() {
	*x = BlueGreenProgressState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlueGreenProgressState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlueGreenProgressState) ProtoMessage() {}

func (x *BlueGreenProgressState) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlueGreenProgressState.ProtoReflect.Descriptor instead.
func (*BlueGreenProgressState) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{15}
}

func (x *BlueGreenProgressState) GetStatus() BlueGreenProgressState_Status {
	if x != nil {
		return x.Status
	}
	return BlueGreenProgressState_UNKNOWN
}

type DeliveryState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DesiredStateId string `protobuf:"bytes,12,opt,name=desired_state_id,json=desiredStateId,proto3" json:"desired_state_id,omitempty"`
	// overall delivery status
	Status DeliveryState_Status `protobuf:"varint,8,opt,name=status,proto3,enum=prodvana.desired_state.model.DeliveryState_Status" json:"status,omitempty"`
	// human readable message from the delivery controller
	Message string `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
	// current state of all Canary progression
	CanaryProgress []*CanaryProgressState `protobuf:"bytes,11,rep,name=canary_progress,json=canaryProgress,proto3" json:"canary_progress,omitempty"`
	FirstRun       bool                   `protobuf:"varint,13,opt,name=first_run,json=firstRun,proto3" json:"first_run,omitempty"`
	// string unique to each PD controller convergence,
	// e.g. when Argo Rollouts starts a new rollout, this will change.
	Generation        string                  `protobuf:"bytes,14,opt,name=generation,proto3" json:"generation,omitempty"`
	BlueGreenProgress *BlueGreenProgressState `protobuf:"bytes,15,opt,name=blue_green_progress,json=blueGreenProgress,proto3" json:"blue_green_progress,omitempty"`
}

func (x *DeliveryState) Reset() {
	*x = DeliveryState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliveryState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliveryState) ProtoMessage() {}

func (x *DeliveryState) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliveryState.ProtoReflect.Descriptor instead.
func (*DeliveryState) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{16}
}

func (x *DeliveryState) GetDesiredStateId() string {
	if x != nil {
		return x.DesiredStateId
	}
	return ""
}

func (x *DeliveryState) GetStatus() DeliveryState_Status {
	if x != nil {
		return x.Status
	}
	return DeliveryState_STATUS_UNKNOWN
}

func (x *DeliveryState) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeliveryState) GetCanaryProgress() []*CanaryProgressState {
	if x != nil {
		return x.CanaryProgress
	}
	return nil
}

func (x *DeliveryState) GetFirstRun() bool {
	if x != nil {
		return x.FirstRun
	}
	return false
}

func (x *DeliveryState) GetGeneration() string {
	if x != nil {
		return x.Generation
	}
	return ""
}

func (x *DeliveryState) GetBlueGreenProgress() *BlueGreenProgressState {
	if x != nil {
		return x.BlueGreenProgress
	}
	return nil
}

type FetchDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// when the fetch job started
	StartedTimestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=started_timestamp,json=startedTimestamp,proto3" json:"started_timestamp,omitempty"`
	// when the fetch job completed
	CompletedTimestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=completed_timestamp,json=completedTimestamp,proto3" json:"completed_timestamp,omitempty"`
	// for fetch commands that return a plan, this is the plan blob id
	FetchPlanBlobId string `protobuf:"bytes,3,opt,name=fetch_plan_blob_id,json=fetchPlanBlobId,proto3" json:"fetch_plan_blob_id,omitempty"` // optional
	// additionally, for fetch commands that return a plan with a separate explanation text, this is the explanation blob id
	FetchPlanExplanationBlobId string `protobuf:"bytes,4,opt,name=fetch_plan_explanation_blob_id,json=fetchPlanExplanationBlobId,proto3" json:"fetch_plan_explanation_blob_id,omitempty"` // optional
	// the version of the service associated with this fetch run
	Version string `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	// the resulting versions computed from the fetch.
	// for exit code, this is always going to match version but with a dirty bit set
	// for structured output, this is whatever the fetch returns.
	Versions              []*Version                   `protobuf:"bytes,10,rep,name=versions,proto3" json:"versions,omitempty"`
	RuntimeObjectStatus   RuntimeObject_Status         `protobuf:"varint,11,opt,name=runtime_object_status,json=runtimeObjectStatus,proto3,enum=prodvana.desired_state.model.RuntimeObject_Status" json:"runtime_object_status,omitempty"`
	ExternalObjects       []*extensions.ExternalObject `protobuf:"bytes,12,rep,name=external_objects,json=externalObjects,proto3" json:"external_objects,omitempty"`
	FetchStatus           FetchDetails_FetchStatus     `protobuf:"varint,6,opt,name=fetch_status,json=fetchStatus,proto3,enum=prodvana.desired_state.model.FetchDetails_FetchStatus" json:"fetch_status,omitempty"`
	FetcherDesiredStateId string                       `protobuf:"bytes,7,opt,name=fetcher_desired_state_id,json=fetcherDesiredStateId,proto3" json:"fetcher_desired_state_id,omitempty"`
	// freeform message from the convergence engine explaining the fetch result
	Message   string               `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
	FetchMode extensions.FetchMode `protobuf:"varint,9,opt,name=fetch_mode,json=fetchMode,proto3,enum=prodvana.runtimes.extensions.FetchMode" json:"fetch_mode,omitempty"`
	// the run of the fetch task
	TaskRun *TaskRun `protobuf:"bytes,13,opt,name=task_run,json=taskRun,proto3" json:"task_run,omitempty"` // next tag: 14
}

func (x *FetchDetails) Reset() {
	*x = FetchDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchDetails) ProtoMessage() {}

func (x *FetchDetails) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchDetails.ProtoReflect.Descriptor instead.
func (*FetchDetails) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{17}
}

func (x *FetchDetails) GetStartedTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedTimestamp
	}
	return nil
}

func (x *FetchDetails) GetCompletedTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.CompletedTimestamp
	}
	return nil
}

func (x *FetchDetails) GetFetchPlanBlobId() string {
	if x != nil {
		return x.FetchPlanBlobId
	}
	return ""
}

func (x *FetchDetails) GetFetchPlanExplanationBlobId() string {
	if x != nil {
		return x.FetchPlanExplanationBlobId
	}
	return ""
}

func (x *FetchDetails) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *FetchDetails) GetVersions() []*Version {
	if x != nil {
		return x.Versions
	}
	return nil
}

func (x *FetchDetails) GetRuntimeObjectStatus() RuntimeObject_Status {
	if x != nil {
		return x.RuntimeObjectStatus
	}
	return RuntimeObject_PENDING
}

func (x *FetchDetails) GetExternalObjects() []*extensions.ExternalObject {
	if x != nil {
		return x.ExternalObjects
	}
	return nil
}

func (x *FetchDetails) GetFetchStatus() FetchDetails_FetchStatus {
	if x != nil {
		return x.FetchStatus
	}
	return FetchDetails_UNKNOWN
}

func (x *FetchDetails) GetFetcherDesiredStateId() string {
	if x != nil {
		return x.FetcherDesiredStateId
	}
	return ""
}

func (x *FetchDetails) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *FetchDetails) GetFetchMode() extensions.FetchMode {
	if x != nil {
		return x.FetchMode
	}
	return extensions.FetchMode(0)
}

func (x *FetchDetails) GetTaskRun() *TaskRun {
	if x != nil {
		return x.TaskRun
	}
	return nil
}

type RuntimeExtensionFetchOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// details of an actively executing fetch, may be null if no fetch is currently executing
	OngoingFetch *FetchDetails `protobuf:"bytes,8,opt,name=ongoing_fetch,json=ongoingFetch,proto3" json:"ongoing_fetch,omitempty"`
	// details of the last fetch that completed successfully (as in, either DRIFTED or CONVERGED), may be null if no fetch has ever executed
	LastSuccessfulFetch *FetchDetails `protobuf:"bytes,9,opt,name=last_successful_fetch,json=lastSuccessfulFetch,proto3" json:"last_successful_fetch,omitempty"`
	// if the latest completed fetch is FAILED, then it is stored here.
	// if the latest completed fetch is not FAILED, then this is null.
	LastFailedFetch *FetchDetails `protobuf:"bytes,10,opt,name=last_failed_fetch,json=lastFailedFetch,proto3" json:"last_failed_fetch,omitempty"`
}

func (x *RuntimeExtensionFetchOutput) Reset() {
	*x = RuntimeExtensionFetchOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuntimeExtensionFetchOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeExtensionFetchOutput) ProtoMessage() {}

func (x *RuntimeExtensionFetchOutput) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeExtensionFetchOutput.ProtoReflect.Descriptor instead.
func (*RuntimeExtensionFetchOutput) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{18}
}

func (x *RuntimeExtensionFetchOutput) GetOngoingFetch() *FetchDetails {
	if x != nil {
		return x.OngoingFetch
	}
	return nil
}

func (x *RuntimeExtensionFetchOutput) GetLastSuccessfulFetch() *FetchDetails {
	if x != nil {
		return x.LastSuccessfulFetch
	}
	return nil
}

func (x *RuntimeExtensionFetchOutput) GetLastFailedFetch() *FetchDetails {
	if x != nil {
		return x.LastFailedFetch
	}
	return nil
}

type RuntimeExtensionGetInfoOutputContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	BlobId string `protobuf:"bytes,2,opt,name=blob_id,json=blobId,proto3" json:"blob_id,omitempty"`
}

func (x *RuntimeExtensionGetInfoOutputContent) Reset() {
	*x = RuntimeExtensionGetInfoOutputContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuntimeExtensionGetInfoOutputContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeExtensionGetInfoOutputContent) ProtoMessage() {}

func (x *RuntimeExtensionGetInfoOutputContent) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeExtensionGetInfoOutputContent.ProtoReflect.Descriptor instead.
func (*RuntimeExtensionGetInfoOutputContent) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{19}
}

func (x *RuntimeExtensionGetInfoOutputContent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RuntimeExtensionGetInfoOutputContent) GetBlobId() string {
	if x != nil {
		return x.BlobId
	}
	return ""
}

type RuntimeExtensionGetInfoDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// system message generated by prodvana
	SystemMessage string `protobuf:"bytes,1,opt,name=system_message,json=systemMessage,proto3" json:"system_message,omitempty"`
	// output from user process
	Contents []*RuntimeExtensionGetInfoOutputContent `protobuf:"bytes,2,rep,name=contents,proto3" json:"contents,omitempty"`
	Status   RuntimeExtensionGetInfoDetails_Status   `protobuf:"varint,3,opt,name=status,proto3,enum=prodvana.desired_state.model.RuntimeExtensionGetInfoDetails_Status" json:"status,omitempty"`
	// when the debug job started
	StartedTimestamp *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=started_timestamp,json=startedTimestamp,proto3" json:"started_timestamp,omitempty"`
	// when the debug job completed
	CompletedTimestamp *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=completed_timestamp,json=completedTimestamp,proto3" json:"completed_timestamp,omitempty"`
	// the version of the service associated with this debug run
	Version string `protobuf:"bytes,6,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *RuntimeExtensionGetInfoDetails) Reset() {
	*x = RuntimeExtensionGetInfoDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuntimeExtensionGetInfoDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeExtensionGetInfoDetails) ProtoMessage() {}

func (x *RuntimeExtensionGetInfoDetails) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeExtensionGetInfoDetails.ProtoReflect.Descriptor instead.
func (*RuntimeExtensionGetInfoDetails) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{20}
}

func (x *RuntimeExtensionGetInfoDetails) GetSystemMessage() string {
	if x != nil {
		return x.SystemMessage
	}
	return ""
}

func (x *RuntimeExtensionGetInfoDetails) GetContents() []*RuntimeExtensionGetInfoOutputContent {
	if x != nil {
		return x.Contents
	}
	return nil
}

func (x *RuntimeExtensionGetInfoDetails) GetStatus() RuntimeExtensionGetInfoDetails_Status {
	if x != nil {
		return x.Status
	}
	return RuntimeExtensionGetInfoDetails_UNKNOWN
}

func (x *RuntimeExtensionGetInfoDetails) GetStartedTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedTimestamp
	}
	return nil
}

func (x *RuntimeExtensionGetInfoDetails) GetCompletedTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.CompletedTimestamp
	}
	return nil
}

func (x *RuntimeExtensionGetInfoDetails) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type RuntimeExtensionGetInfoOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetInfoDetails *RuntimeExtensionGetInfoDetails `protobuf:"bytes,1,opt,name=get_info_details,json=getInfoDetails,proto3" json:"get_info_details,omitempty"`
}

func (x *RuntimeExtensionGetInfoOutput) Reset() {
	*x = RuntimeExtensionGetInfoOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuntimeExtensionGetInfoOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeExtensionGetInfoOutput) ProtoMessage() {}

func (x *RuntimeExtensionGetInfoOutput) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeExtensionGetInfoOutput.ProtoReflect.Descriptor instead.
func (*RuntimeExtensionGetInfoOutput) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{21}
}

func (x *RuntimeExtensionGetInfoOutput) GetGetInfoDetails() *RuntimeExtensionGetInfoDetails {
	if x != nil {
		return x.GetInfoDetails
	}
	return nil
}

type ApplyDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// when the apply job started
	StartedTimestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=started_timestamp,json=startedTimestamp,proto3" json:"started_timestamp,omitempty"`
	// when the apply job completed
	CompletedTimestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=completed_timestamp,json=completedTimestamp,proto3" json:"completed_timestamp,omitempty"`
	// the version of the service associated with this apply run
	Version     string                   `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	ApplyStatus ApplyDetails_ApplyStatus `protobuf:"varint,4,opt,name=apply_status,json=applyStatus,proto3,enum=prodvana.desired_state.model.ApplyDetails_ApplyStatus" json:"apply_status,omitempty"`
	// the fetch details used for this particular apply, including any plan id
	FetchDetails *FetchDetails `protobuf:"bytes,5,opt,name=fetch_details,json=fetchDetails,proto3" json:"fetch_details,omitempty"`
	// why did Prodvana decide to run apply?
	HasWorkReason string `protobuf:"bytes,7,opt,name=has_work_reason,json=hasWorkReason,proto3" json:"has_work_reason,omitempty"`
	// the run of the fetch task
	TaskRun *TaskRun `protobuf:"bytes,8,opt,name=task_run,json=taskRun,proto3" json:"task_run,omitempty"`
}

func (x *ApplyDetails) Reset() {
	*x = ApplyDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyDetails) ProtoMessage() {}

func (x *ApplyDetails) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyDetails.ProtoReflect.Descriptor instead.
func (*ApplyDetails) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{22}
}

func (x *ApplyDetails) GetStartedTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedTimestamp
	}
	return nil
}

func (x *ApplyDetails) GetCompletedTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.CompletedTimestamp
	}
	return nil
}

func (x *ApplyDetails) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ApplyDetails) GetApplyStatus() ApplyDetails_ApplyStatus {
	if x != nil {
		return x.ApplyStatus
	}
	return ApplyDetails_UNKNOWN
}

func (x *ApplyDetails) GetFetchDetails() *FetchDetails {
	if x != nil {
		return x.FetchDetails
	}
	return nil
}

func (x *ApplyDetails) GetHasWorkReason() string {
	if x != nil {
		return x.HasWorkReason
	}
	return ""
}

func (x *ApplyDetails) GetTaskRun() *TaskRun {
	if x != nil {
		return x.TaskRun
	}
	return nil
}

type RuntimeExtensionApplyOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// details of an actively executing apply, may be null if no apply is currently executing
	OngoingApply *ApplyDetails `protobuf:"bytes,1,opt,name=ongoing_apply,json=ongoingApply,proto3" json:"ongoing_apply,omitempty"`
	// details of the last apply that completed, may be null if no apply has ever executed
	LastApply *ApplyDetails `protobuf:"bytes,2,opt,name=last_apply,json=lastApply,proto3" json:"last_apply,omitempty"`
}

func (x *RuntimeExtensionApplyOutput) Reset() {
	*x = RuntimeExtensionApplyOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuntimeExtensionApplyOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeExtensionApplyOutput) ProtoMessage() {}

func (x *RuntimeExtensionApplyOutput) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeExtensionApplyOutput.ProtoReflect.Descriptor instead.
func (*RuntimeExtensionApplyOutput) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{23}
}

func (x *RuntimeExtensionApplyOutput) GetOngoingApply() *ApplyDetails {
	if x != nil {
		return x.OngoingApply
	}
	return nil
}

func (x *RuntimeExtensionApplyOutput) GetLastApply() *ApplyDetails {
	if x != nil {
		return x.LastApply
	}
	return nil
}

type RuntimeObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta                    *Metadata                       `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	ObjectType              string                          `protobuf:"bytes,2,opt,name=object_type,json=objectType,proto3" json:"object_type,omitempty"`
	Namespace               string                          `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name                    string                          `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	GenerateName            string                          `protobuf:"bytes,24,opt,name=generate_name,json=generateName,proto3" json:"generate_name,omitempty"` // if set, this runtime object will have a name that is generated at creation time, by the runtime implementation
	Versions                []*Version                      `protobuf:"bytes,5,rep,name=versions,proto3" json:"versions,omitempty"`
	FetchVersion            *Version                        `protobuf:"bytes,29,opt,name=fetch_version,json=fetchVersion,proto3" json:"fetch_version,omitempty"` // if set, this is the version of the fetch command that resulted in the rest of this object
	ApplyId                 string                          `protobuf:"bytes,34,opt,name=apply_id,json=applyId,proto3" json:"apply_id,omitempty"`
	Status                  RuntimeObject_Status            `protobuf:"varint,6,opt,name=status,proto3,enum=prodvana.desired_state.model.RuntimeObject_Status" json:"status,omitempty"`
	RollbackVersion         *Version                        `protobuf:"bytes,7,opt,name=rollback_version,json=rollbackVersion,proto3" json:"rollback_version,omitempty"`
	Delivery                *DeliveryState                  `protobuf:"bytes,8,opt,name=delivery,proto3" json:"delivery,omitempty"`
	VersionAgnostic         bool                            `protobuf:"varint,10,opt,name=version_agnostic,json=versionAgnostic,proto3" json:"version_agnostic,omitempty"`                             // This object just needs to exist - it doesn't change from version to version
	DesiredVersionDirtyOnly bool                            `protobuf:"varint,20,opt,name=desired_version_dirty_only,json=desiredVersionDirtyOnly,proto3" json:"desired_version_dirty_only,omitempty"` // when checking for whether or not to apply, only use the desired version and check if it's active and not dirty. that is, active && at desired version && dirty = hasWork, no work otherwise.
	Message                 string                          `protobuf:"bytes,12,opt,name=message,proto3" json:"message,omitempty"`                                                                     // Human readable message (typically for errors) explaining the status
	NeedsApply              bool                            `protobuf:"varint,33,opt,name=needs_apply,json=needsApply,proto3" json:"needs_apply,omitempty"`
	DebugEvents             []*runtimes.DebugEvent          `protobuf:"bytes,31,rep,name=debug_events,json=debugEvents,proto3" json:"debug_events,omitempty"`
	RuntimeExtension        *RuntimeObject_RuntimeExtension `protobuf:"bytes,13,opt,name=runtime_extension,json=runtimeExtension,proto3" json:"runtime_extension,omitempty"` // additional config if this runtime object belongs to a runtime extension
	Interval                *durationpb.Duration            `protobuf:"bytes,15,opt,name=interval,proto3" json:"interval,omitempty"`                                         // if set, runtime object is continuously applied instead of being done once when there is a version mismatch
	SteadyStateInterval     *durationpb.Duration            `protobuf:"bytes,26,opt,name=steady_state_interval,json=steadyStateInterval,proto3" json:"steady_state_interval,omitempty"`
	// output_blob_ids and exit_codes are in the same order, assuming output is saved
	OutputBlobIds              []string                       `protobuf:"bytes,18,rep,name=output_blob_ids,json=outputBlobIds,proto3" json:"output_blob_ids,omitempty"` // if output is saved, this is the ID of the blob to retrieve it, only for run-to-completion objects.
	ExitCodes                  []int32                        `protobuf:"varint,19,rep,packed,name=exit_codes,json=exitCodes,proto3" json:"exit_codes,omitempty"`       // exit codes, only for run-to-completion objects like jobs
	RequireApprovalBeforeApply bool                           `protobuf:"varint,21,opt,name=require_approval_before_apply,json=requireApprovalBeforeApply,proto3" json:"require_approval_before_apply,omitempty"`
	RawConfig                  string                         `protobuf:"bytes,23,opt,name=raw_config,json=rawConfig,proto3" json:"raw_config,omitempty"` // raw runtime-specific config, e.g. k8s yaml
	ManagementStatus           RuntimeObject_ManagementStatus `protobuf:"varint,25,opt,name=management_status,json=managementStatus,proto3,enum=prodvana.desired_state.model.RuntimeObject_ManagementStatus" json:"management_status,omitempty"`
	LastCompletedTaskRun       *TaskRun                       `protobuf:"bytes,27,opt,name=last_completed_task_run,json=lastCompletedTaskRun,proto3" json:"last_completed_task_run,omitempty"` // For entities that run jobs/tasks multiple times, what is the most recent status we have?
	LastTaskRun                *TaskRun                       `protobuf:"bytes,35,opt,name=last_task_run,json=lastTaskRun,proto3" json:"last_task_run,omitempty"`                              // For entities that run jobs/tasks multiple times, what is the most recent created run?
	ExternalLinks              []*common_config.ExternalLink  `protobuf:"bytes,28,rep,name=external_links,json=externalLinks,proto3" json:"external_links,omitempty"`
	ExternalObjects            []*extensions.ExternalObject   `protobuf:"bytes,30,rep,name=external_objects,json=externalObjects,proto3" json:"external_objects,omitempty"` // external objects tracked by this runtime, not represented in entity graph but useful to display to users
	Rollback                   bool                           `protobuf:"varint,32,opt,name=rollback,proto3" json:"rollback,omitempty"`
}

func (x *RuntimeObject) Reset() {
	*x = RuntimeObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuntimeObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeObject) ProtoMessage() {}

func (x *RuntimeObject) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeObject.ProtoReflect.Descriptor instead.
func (*RuntimeObject) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{24}
}

func (x *RuntimeObject) GetMeta() *Metadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *RuntimeObject) GetObjectType() string {
	if x != nil {
		return x.ObjectType
	}
	return ""
}

func (x *RuntimeObject) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *RuntimeObject) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RuntimeObject) GetGenerateName() string {
	if x != nil {
		return x.GenerateName
	}
	return ""
}

func (x *RuntimeObject) GetVersions() []*Version {
	if x != nil {
		return x.Versions
	}
	return nil
}

func (x *RuntimeObject) GetFetchVersion() *Version {
	if x != nil {
		return x.FetchVersion
	}
	return nil
}

func (x *RuntimeObject) GetApplyId() string {
	if x != nil {
		return x.ApplyId
	}
	return ""
}

func (x *RuntimeObject) GetStatus() RuntimeObject_Status {
	if x != nil {
		return x.Status
	}
	return RuntimeObject_PENDING
}

func (x *RuntimeObject) GetRollbackVersion() *Version {
	if x != nil {
		return x.RollbackVersion
	}
	return nil
}

func (x *RuntimeObject) GetDelivery() *DeliveryState {
	if x != nil {
		return x.Delivery
	}
	return nil
}

func (x *RuntimeObject) GetVersionAgnostic() bool {
	if x != nil {
		return x.VersionAgnostic
	}
	return false
}

func (x *RuntimeObject) GetDesiredVersionDirtyOnly() bool {
	if x != nil {
		return x.DesiredVersionDirtyOnly
	}
	return false
}

func (x *RuntimeObject) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RuntimeObject) GetNeedsApply() bool {
	if x != nil {
		return x.NeedsApply
	}
	return false
}

func (x *RuntimeObject) GetDebugEvents() []*runtimes.DebugEvent {
	if x != nil {
		return x.DebugEvents
	}
	return nil
}

func (x *RuntimeObject) GetRuntimeExtension() *RuntimeObject_RuntimeExtension {
	if x != nil {
		return x.RuntimeExtension
	}
	return nil
}

func (x *RuntimeObject) GetInterval() *durationpb.Duration {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *RuntimeObject) GetSteadyStateInterval() *durationpb.Duration {
	if x != nil {
		return x.SteadyStateInterval
	}
	return nil
}

func (x *RuntimeObject) GetOutputBlobIds() []string {
	if x != nil {
		return x.OutputBlobIds
	}
	return nil
}

func (x *RuntimeObject) GetExitCodes() []int32 {
	if x != nil {
		return x.ExitCodes
	}
	return nil
}

func (x *RuntimeObject) GetRequireApprovalBeforeApply() bool {
	if x != nil {
		return x.RequireApprovalBeforeApply
	}
	return false
}

func (x *RuntimeObject) GetRawConfig() string {
	if x != nil {
		return x.RawConfig
	}
	return ""
}

func (x *RuntimeObject) GetManagementStatus() RuntimeObject_ManagementStatus {
	if x != nil {
		return x.ManagementStatus
	}
	return RuntimeObject_PVN_MANAGED
}

func (x *RuntimeObject) GetLastCompletedTaskRun() *TaskRun {
	if x != nil {
		return x.LastCompletedTaskRun
	}
	return nil
}

func (x *RuntimeObject) GetLastTaskRun() *TaskRun {
	if x != nil {
		return x.LastTaskRun
	}
	return nil
}

func (x *RuntimeObject) GetExternalLinks() []*common_config.ExternalLink {
	if x != nil {
		return x.ExternalLinks
	}
	return nil
}

func (x *RuntimeObject) GetExternalObjects() []*extensions.ExternalObject {
	if x != nil {
		return x.ExternalObjects
	}
	return nil
}

func (x *RuntimeObject) GetRollback() bool {
	if x != nil {
		return x.Rollback
	}
	return false
}

type ConditionState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status ConditionStatus `protobuf:"varint,1,opt,name=status,proto3,enum=prodvana.desired_state.model.ConditionStatus" json:"status,omitempty"`
}

func (x *ConditionState) Reset() {
	*x = ConditionState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionState) ProtoMessage() {}

func (x *ConditionState) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionState.ProtoReflect.Descriptor instead.
func (*ConditionState) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{25}
}

func (x *ConditionState) GetStatus() ConditionStatus {
	if x != nil {
		return x.Status
	}
	return ConditionStatus_CONDITION_UNKNOWN_STATUS
}

type ApplyError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ApplyError) Reset() {
	*x = ApplyError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyError) ProtoMessage() {}

func (x *ApplyError) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyError.ProtoReflect.Descriptor instead.
func (*ApplyError) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{26}
}

func (x *ApplyError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ProtectionFailure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LinkId *Identifier                       `protobuf:"bytes,1,opt,name=link_id,json=linkId,proto3" json:"link_id,omitempty"`
	Status ProtectionAttachmentResult_Status `protobuf:"varint,2,opt,name=status,proto3,enum=prodvana.desired_state.model.ProtectionAttachmentResult_Status" json:"status,omitempty"`
}

func (x *ProtectionFailure) Reset() {
	*x = ProtectionFailure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtectionFailure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtectionFailure) ProtoMessage() {}

func (x *ProtectionFailure) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtectionFailure.ProtoReflect.Descriptor instead.
func (*ProtectionFailure) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{27}
}

func (x *ProtectionFailure) GetLinkId() *Identifier {
	if x != nil {
		return x.LinkId
	}
	return nil
}

func (x *ProtectionFailure) GetStatus() ProtectionAttachmentResult_Status {
	if x != nil {
		return x.Status
	}
	return ProtectionAttachmentResult_UNKNOWN
}

type ExecError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ExecError) Reset() {
	*x = ExecError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecError) ProtoMessage() {}

func (x *ExecError) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecError.ProtoReflect.Descriptor instead.
func (*ExecError) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{28}
}

func (x *ExecError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type NotificationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailureCount                   int32                       `protobuf:"varint,1,opt,name=failure_count,json=failureCount,proto3" json:"failure_count,omitempty"`
	MostRecentFailure              *timestamppb.Timestamp      `protobuf:"bytes,2,opt,name=most_recent_failure,json=mostRecentFailure,proto3" json:"most_recent_failure,omitempty"`
	RuntimeFetchInvokeError        *ApplyError                 `protobuf:"bytes,11,opt,name=runtime_fetch_invoke_error,json=runtimeFetchInvokeError,proto3" json:"runtime_fetch_invoke_error,omitempty"`
	RuntimeApplyInvokeError        *ApplyError                 `protobuf:"bytes,12,opt,name=runtime_apply_invoke_error,json=runtimeApplyInvokeError,proto3" json:"runtime_apply_invoke_error,omitempty"`
	ConcurrencyLimitExceededErrors []*ConcurrencyLimitExceeded `protobuf:"bytes,13,rep,name=concurrency_limit_exceeded_errors,json=concurrencyLimitExceededErrors,proto3" json:"concurrency_limit_exceeded_errors,omitempty"`
	ProtectionFailures             []*ProtectionFailure        `protobuf:"bytes,14,rep,name=protection_failures,json=protectionFailures,proto3" json:"protection_failures,omitempty"`
	RuntimeFetchExecError          *ExecError                  `protobuf:"bytes,15,opt,name=runtime_fetch_exec_error,json=runtimeFetchExecError,proto3" json:"runtime_fetch_exec_error,omitempty"`
	RuntimeApplyExecError          *ExecError                  `protobuf:"bytes,16,opt,name=runtime_apply_exec_error,json=runtimeApplyExecError,proto3" json:"runtime_apply_exec_error,omitempty"`
}

func (x *NotificationInfo) Reset() {
	*x = NotificationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationInfo) ProtoMessage() {}

func (x *NotificationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationInfo.ProtoReflect.Descriptor instead.
func (*NotificationInfo) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{29}
}

func (x *NotificationInfo) GetFailureCount() int32 {
	if x != nil {
		return x.FailureCount
	}
	return 0
}

func (x *NotificationInfo) GetMostRecentFailure() *timestamppb.Timestamp {
	if x != nil {
		return x.MostRecentFailure
	}
	return nil
}

func (x *NotificationInfo) GetRuntimeFetchInvokeError() *ApplyError {
	if x != nil {
		return x.RuntimeFetchInvokeError
	}
	return nil
}

func (x *NotificationInfo) GetRuntimeApplyInvokeError() *ApplyError {
	if x != nil {
		return x.RuntimeApplyInvokeError
	}
	return nil
}

func (x *NotificationInfo) GetConcurrencyLimitExceededErrors() []*ConcurrencyLimitExceeded {
	if x != nil {
		return x.ConcurrencyLimitExceededErrors
	}
	return nil
}

func (x *NotificationInfo) GetProtectionFailures() []*ProtectionFailure {
	if x != nil {
		return x.ProtectionFailures
	}
	return nil
}

func (x *NotificationInfo) GetRuntimeFetchExecError() *ExecError {
	if x != nil {
		return x.RuntimeFetchExecError
	}
	return nil
}

func (x *NotificationInfo) GetRuntimeApplyExecError() *ExecError {
	if x != nil {
		return x.RuntimeApplyExecError
	}
	return nil
}

type KeyDeliveryDecision struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Decision                  KeyDeliveryDecision_Decision          `protobuf:"varint,1,opt,name=decision,proto3,enum=prodvana.desired_state.model.KeyDeliveryDecision_Decision" json:"decision,omitempty"`
	Explanation               string                                `protobuf:"bytes,2,opt,name=explanation,proto3" json:"explanation,omitempty"`
	Status                    Status                                `protobuf:"varint,3,opt,name=status,proto3,enum=prodvana.desired_state.model.Status" json:"status,omitempty"` // convergence status at the time of the delivery decision
	StatusExplanations        []*StatusExplanation                  `protobuf:"bytes,4,rep,name=status_explanations,json=statusExplanations,proto3" json:"status_explanations,omitempty"`
	StatusExplanationEntities []*KeyDeliveryDecision_EntitySnapshot `protobuf:"bytes,5,rep,name=status_explanation_entities,json=statusExplanationEntities,proto3" json:"status_explanation_entities,omitempty"`
	Current                   *State                                `protobuf:"bytes,6,opt,name=current,proto3" json:"current,omitempty"` // current state at the time of the delivery decision
	Timestamp                 *timestamppb.Timestamp                `protobuf:"bytes,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *KeyDeliveryDecision) Reset() {
	*x = KeyDeliveryDecision{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyDeliveryDecision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyDeliveryDecision) ProtoMessage() {}

func (x *KeyDeliveryDecision) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyDeliveryDecision.ProtoReflect.Descriptor instead.
func (*KeyDeliveryDecision) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{30}
}

func (x *KeyDeliveryDecision) GetDecision() KeyDeliveryDecision_Decision {
	if x != nil {
		return x.Decision
	}
	return KeyDeliveryDecision_UNKNOWN
}

func (x *KeyDeliveryDecision) GetExplanation() string {
	if x != nil {
		return x.Explanation
	}
	return ""
}

func (x *KeyDeliveryDecision) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_UNKNOWN_STATUS
}

func (x *KeyDeliveryDecision) GetStatusExplanations() []*StatusExplanation {
	if x != nil {
		return x.StatusExplanations
	}
	return nil
}

func (x *KeyDeliveryDecision) GetStatusExplanationEntities() []*KeyDeliveryDecision_EntitySnapshot {
	if x != nil {
		return x.StatusExplanationEntities
	}
	return nil
}

func (x *KeyDeliveryDecision) GetCurrent() *State {
	if x != nil {
		return x.Current
	}
	return nil
}

func (x *KeyDeliveryDecision) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type ControlState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rollback bool `protobuf:"varint,1,opt,name=rollback,proto3" json:"rollback,omitempty"`
	// last delivery decision for rollback=false
	KeyDeliveryDecision *KeyDeliveryDecision `protobuf:"bytes,14,opt,name=key_delivery_decision,json=keyDeliveryDecision,proto3" json:"key_delivery_decision,omitempty"`
	// last delivery decision for rollback=true
	RollbackKeyDeliveryDecision *KeyDeliveryDecision `protobuf:"bytes,15,opt,name=rollback_key_delivery_decision,json=rollbackKeyDeliveryDecision,proto3" json:"rollback_key_delivery_decision,omitempty"`
	PreconditionStates          []*ConditionState    `protobuf:"bytes,2,rep,name=precondition_states,json=preconditionStates,proto3" json:"precondition_states,omitempty"`
	InvariantStates             []*ConditionState    `protobuf:"bytes,3,rep,name=invariant_states,json=invariantStates,proto3" json:"invariant_states,omitempty"`
	// An entity is paused if itself or any of its ancestors have paused field set.
	// Unlike rollback, this field does not get propagated to children.
	// Doing so would make to differentiate unpausing vs. the field not being set,
	// especially if pausing can happen at any layer.
	Paused bool `protobuf:"varint,4,opt,name=paused,proto3" json:"paused,omitempty"`
	// explanation for current status, will have more than one in the event multiple children have the same status
	StatusExplanations []*StatusExplanation `protobuf:"bytes,5,rep,name=status_explanations,json=statusExplanations,proto3" json:"status_explanations,omitempty"`
	// What is DD doing now?
	ActionExplanation    *ActionExplanation     `protobuf:"bytes,6,opt,name=action_explanation,json=actionExplanation,proto3" json:"action_explanation,omitempty"`
	LastFetchedTimestamp *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=last_fetched_timestamp,json=lastFetchedTimestamp,proto3" json:"last_fetched_timestamp,omitempty"`
	LastAppliedTimestamp *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=last_applied_timestamp,json=lastAppliedTimestamp,proto3" json:"last_applied_timestamp,omitempty"`
	// only relevant if there is a last_applied_timestamp
	DeploymentCompletedTimestamp *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=deployment_completed_timestamp,json=deploymentCompletedTimestamp,proto3" json:"deployment_completed_timestamp,omitempty"`
	ExpectedNextApplyTimestamp   *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=expected_next_apply_timestamp,json=expectedNextApplyTimestamp,proto3" json:"expected_next_apply_timestamp,omitempty"`
	MissingApproval              *MissingApproval       `protobuf:"bytes,9,opt,name=missing_approval,json=missingApproval,proto3" json:"missing_approval,omitempty"`
	ObserverMode                 bool                   `protobuf:"varint,10,opt,name=observer_mode,json=observerMode,proto3" json:"observer_mode,omitempty"`
	ApplyError                   *ApplyError            `protobuf:"bytes,11,opt,name=apply_error,json=applyError,proto3" json:"apply_error,omitempty"`
	NotificationInfo             *NotificationInfo      `protobuf:"bytes,12,opt,name=notification_info,json=notificationInfo,proto3" json:"notification_info,omitempty"`
}

func (x *ControlState) Reset() {
	*x = ControlState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlState) ProtoMessage() {}

func (x *ControlState) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlState.ProtoReflect.Descriptor instead.
func (*ControlState) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{31}
}

func (x *ControlState) GetRollback() bool {
	if x != nil {
		return x.Rollback
	}
	return false
}

func (x *ControlState) GetKeyDeliveryDecision() *KeyDeliveryDecision {
	if x != nil {
		return x.KeyDeliveryDecision
	}
	return nil
}

func (x *ControlState) GetRollbackKeyDeliveryDecision() *KeyDeliveryDecision {
	if x != nil {
		return x.RollbackKeyDeliveryDecision
	}
	return nil
}

func (x *ControlState) GetPreconditionStates() []*ConditionState {
	if x != nil {
		return x.PreconditionStates
	}
	return nil
}

func (x *ControlState) GetInvariantStates() []*ConditionState {
	if x != nil {
		return x.InvariantStates
	}
	return nil
}

func (x *ControlState) GetPaused() bool {
	if x != nil {
		return x.Paused
	}
	return false
}

func (x *ControlState) GetStatusExplanations() []*StatusExplanation {
	if x != nil {
		return x.StatusExplanations
	}
	return nil
}

func (x *ControlState) GetActionExplanation() *ActionExplanation {
	if x != nil {
		return x.ActionExplanation
	}
	return nil
}

func (x *ControlState) GetLastFetchedTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.LastFetchedTimestamp
	}
	return nil
}

func (x *ControlState) GetLastAppliedTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.LastAppliedTimestamp
	}
	return nil
}

func (x *ControlState) GetDeploymentCompletedTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.DeploymentCompletedTimestamp
	}
	return nil
}

func (x *ControlState) GetExpectedNextApplyTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpectedNextApplyTimestamp
	}
	return nil
}

func (x *ControlState) GetMissingApproval() *MissingApproval {
	if x != nil {
		return x.MissingApproval
	}
	return nil
}

func (x *ControlState) GetObserverMode() bool {
	if x != nil {
		return x.ObserverMode
	}
	return false
}

func (x *ControlState) GetApplyError() *ApplyError {
	if x != nil {
		return x.ApplyError
	}
	return nil
}

func (x *ControlState) GetNotificationInfo() *NotificationInfo {
	if x != nil {
		return x.NotificationInfo
	}
	return nil
}

type ManualApprovalState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta         *Metadata                       `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	Status       ManualApprovalStatus            `protobuf:"varint,2,opt,name=status,proto3,enum=prodvana.desired_state.model.ManualApprovalStatus" json:"status,omitempty"`
	Topic        string                          `protobuf:"bytes,3,opt,name=topic,proto3" json:"topic,omitempty"`
	Description  string                          `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Approvers    []*ManualApprovalState_Approver `protobuf:"bytes,5,rep,name=approvers,proto3" json:"approvers,omitempty"`
	MinApprovers int32                           `protobuf:"varint,6,opt,name=min_approvers,json=minApprovers,proto3" json:"min_approvers,omitempty"`
}

func (x *ManualApprovalState) Reset() {
	*x = ManualApprovalState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManualApprovalState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualApprovalState) ProtoMessage() {}

func (x *ManualApprovalState) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualApprovalState.ProtoReflect.Descriptor instead.
func (*ManualApprovalState) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{32}
}

func (x *ManualApprovalState) GetMeta() *Metadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ManualApprovalState) GetStatus() ManualApprovalStatus {
	if x != nil {
		return x.Status
	}
	return ManualApprovalStatus_PENDING
}

func (x *ManualApprovalState) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *ManualApprovalState) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ManualApprovalState) GetApprovers() []*ManualApprovalState_Approver {
	if x != nil {
		return x.Approvers
	}
	return nil
}

func (x *ManualApprovalState) GetMinApprovers() int32 {
	if x != nil {
		return x.MinApprovers
	}
	return 0
}

type State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to StateOneof:
	//
	//	*State_Service
	//	*State_ServiceInstance
	//	*State_ServiceGroup
	//	*State_RuntimeObject
	//	*State_ManualApproval
	//	*State_CustomTask
	//	*State_ProtectionAttachment
	//	*State_ProtectionLink
	//	*State_DeliveryExtension
	StateOneof isState_StateOneof `protobuf_oneof:"state_oneof"`
}

func (x *State) Reset() {
	*x = State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*State) ProtoMessage() {}

func (x *State) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use State.ProtoReflect.Descriptor instead.
func (*State) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{33}
}

func (m *State) GetStateOneof() isState_StateOneof {
	if m != nil {
		return m.StateOneof
	}
	return nil
}

func (x *State) GetService() *ServiceState {
	if x, ok := x.GetStateOneof().(*State_Service); ok {
		return x.Service
	}
	return nil
}

func (x *State) GetServiceInstance() *ServiceInstanceState {
	if x, ok := x.GetStateOneof().(*State_ServiceInstance); ok {
		return x.ServiceInstance
	}
	return nil
}

func (x *State) GetServiceGroup() *ServiceGroupState {
	if x, ok := x.GetStateOneof().(*State_ServiceGroup); ok {
		return x.ServiceGroup
	}
	return nil
}

func (x *State) GetRuntimeObject() *RuntimeObject {
	if x, ok := x.GetStateOneof().(*State_RuntimeObject); ok {
		return x.RuntimeObject
	}
	return nil
}

func (x *State) GetManualApproval() *ManualApprovalState {
	if x, ok := x.GetStateOneof().(*State_ManualApproval); ok {
		return x.ManualApproval
	}
	return nil
}

func (x *State) GetCustomTask() *CustomTaskState {
	if x, ok := x.GetStateOneof().(*State_CustomTask); ok {
		return x.CustomTask
	}
	return nil
}

func (x *State) GetProtectionAttachment() *ProtectionAttachment {
	if x, ok := x.GetStateOneof().(*State_ProtectionAttachment); ok {
		return x.ProtectionAttachment
	}
	return nil
}

func (x *State) GetProtectionLink() *ProtectionLinkState {
	if x, ok := x.GetStateOneof().(*State_ProtectionLink); ok {
		return x.ProtectionLink
	}
	return nil
}

func (x *State) GetDeliveryExtension() *DeliveryExtensionState {
	if x, ok := x.GetStateOneof().(*State_DeliveryExtension); ok {
		return x.DeliveryExtension
	}
	return nil
}

type isState_StateOneof interface {
	isState_StateOneof()
}

type State_Service struct {
	Service *ServiceState `protobuf:"bytes,1,opt,name=service,proto3,oneof"`
}

type State_ServiceInstance struct {
	ServiceInstance *ServiceInstanceState `protobuf:"bytes,2,opt,name=service_instance,json=serviceInstance,proto3,oneof"`
}

type State_ServiceGroup struct {
	ServiceGroup *ServiceGroupState `protobuf:"bytes,3,opt,name=service_group,json=serviceGroup,proto3,oneof"`
}

type State_RuntimeObject struct {
	RuntimeObject *RuntimeObject `protobuf:"bytes,4,opt,name=runtime_object,json=runtimeObject,proto3,oneof"`
}

type State_ManualApproval struct {
	ManualApproval *ManualApprovalState `protobuf:"bytes,5,opt,name=manual_approval,json=manualApproval,proto3,oneof"`
}

type State_CustomTask struct {
	CustomTask *CustomTaskState `protobuf:"bytes,6,opt,name=custom_task,json=customTask,proto3,oneof"`
}

type State_ProtectionAttachment struct {
	ProtectionAttachment *ProtectionAttachment `protobuf:"bytes,7,opt,name=protection_attachment,json=protectionAttachment,proto3,oneof"`
}

type State_ProtectionLink struct {
	ProtectionLink *ProtectionLinkState `protobuf:"bytes,8,opt,name=protection_link,json=protectionLink,proto3,oneof"`
}

type State_DeliveryExtension struct {
	DeliveryExtension *DeliveryExtensionState `protobuf:"bytes,9,opt,name=delivery_extension,json=deliveryExtension,proto3,oneof"`
}

func (*State_Service) isState_StateOneof() {}

func (*State_ServiceInstance) isState_StateOneof() {}

func (*State_ServiceGroup) isState_StateOneof() {}

func (*State_RuntimeObject) isState_StateOneof() {}

func (*State_ManualApproval) isState_StateOneof() {}

func (*State_CustomTask) isState_StateOneof() {}

func (*State_ProtectionAttachment) isState_StateOneof() {}

func (*State_ProtectionLink) isState_StateOneof() {}

func (*State_DeliveryExtension) isState_StateOneof() {}

type Annotations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Annotations []*Annotations_Annotation `protobuf:"bytes,1,rep,name=annotations,proto3" json:"annotations,omitempty"`
}

func (x *Annotations) Reset() {
	*x = Annotations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Annotations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Annotations) ProtoMessage() {}

func (x *Annotations) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Annotations.ProtoReflect.Descriptor instead.
func (*Annotations) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{34}
}

func (x *Annotations) GetAnnotations() []*Annotations_Annotation {
	if x != nil {
		return x.Annotations
	}
	return nil
}

type CustomTaskExecutionState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status                    CustomTaskStatus       `protobuf:"varint,1,opt,name=status,proto3,enum=prodvana.desired_state.model.CustomTaskStatus" json:"status,omitempty"`
	Attempts                  int64                  `protobuf:"varint,2,opt,name=attempts,proto3" json:"attempts,omitempty"`
	LatestAttemptEndTimestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=latest_attempt_end_timestamp,json=latestAttemptEndTimestamp,proto3" json:"latest_attempt_end_timestamp,omitempty"`
}

func (x *CustomTaskExecutionState) Reset() {
	*x = CustomTaskExecutionState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomTaskExecutionState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomTaskExecutionState) ProtoMessage() {}

func (x *CustomTaskExecutionState) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomTaskExecutionState.ProtoReflect.Descriptor instead.
func (*CustomTaskExecutionState) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{35}
}

func (x *CustomTaskExecutionState) GetStatus() CustomTaskStatus {
	if x != nil {
		return x.Status
	}
	return CustomTaskStatus_CUSTOM_TASK_PENDING
}

func (x *CustomTaskExecutionState) GetAttempts() int64 {
	if x != nil {
		return x.Attempts
	}
	return 0
}

func (x *CustomTaskExecutionState) GetLatestAttemptEndTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.LatestAttemptEndTimestamp
	}
	return nil
}

type CustomTaskState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta             *Metadata                    `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	Name             string                       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description      string                       `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Application      string                       `protobuf:"bytes,4,opt,name=application,proto3" json:"application,omitempty"`
	ApplicationId    string                       `protobuf:"bytes,5,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	ReleaseChannel   string                       `protobuf:"bytes,6,opt,name=release_channel,json=releaseChannel,proto3" json:"release_channel,omitempty"`
	ReleaseChannelId string                       `protobuf:"bytes,7,opt,name=release_channel_id,json=releaseChannelId,proto3" json:"release_channel_id,omitempty"`
	Program          *common_config.ProgramConfig `protobuf:"bytes,9,opt,name=program,proto3" json:"program,omitempty"`
	TaskState        *CustomTaskExecutionState    `protobuf:"bytes,12,opt,name=task_state,json=taskState,proto3" json:"task_state,omitempty"`
	// if not set, the custom task will not be retried once it starts executing once.
	RetryConfig *common_config.RetryConfig `protobuf:"bytes,13,opt,name=retry_config,json=retryConfig,proto3" json:"retry_config,omitempty"`
	ServiceIds  []string                   `protobuf:"bytes,14,rep,name=service_ids,json=serviceIds,proto3" json:"service_ids,omitempty"`
}

func (x *CustomTaskState) Reset() {
	*x = CustomTaskState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomTaskState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomTaskState) ProtoMessage() {}

func (x *CustomTaskState) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomTaskState.ProtoReflect.Descriptor instead.
func (*CustomTaskState) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{36}
}

func (x *CustomTaskState) GetMeta() *Metadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *CustomTaskState) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CustomTaskState) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CustomTaskState) GetApplication() string {
	if x != nil {
		return x.Application
	}
	return ""
}

func (x *CustomTaskState) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *CustomTaskState) GetReleaseChannel() string {
	if x != nil {
		return x.ReleaseChannel
	}
	return ""
}

func (x *CustomTaskState) GetReleaseChannelId() string {
	if x != nil {
		return x.ReleaseChannelId
	}
	return ""
}

func (x *CustomTaskState) GetProgram() *common_config.ProgramConfig {
	if x != nil {
		return x.Program
	}
	return nil
}

func (x *CustomTaskState) GetTaskState() *CustomTaskExecutionState {
	if x != nil {
		return x.TaskState
	}
	return nil
}

func (x *CustomTaskState) GetRetryConfig() *common_config.RetryConfig {
	if x != nil {
		return x.RetryConfig
	}
	return nil
}

func (x *CustomTaskState) GetServiceIds() []string {
	if x != nil {
		return x.ServiceIds
	}
	return nil
}

type ProtectionLinkState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta                     *Metadata                   `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	AttachmentName           string                      `protobuf:"bytes,8,opt,name=attachment_name,json=attachmentName,proto3" json:"attachment_name,omitempty"`
	LastSeenAttachmentStatus Status                      `protobuf:"varint,9,opt,name=last_seen_attachment_status,json=lastSeenAttachmentStatus,proto3,enum=prodvana.desired_state.model.Status" json:"last_seen_attachment_status,omitempty"` // status of the attachment, used to compute link status
	LastSeenAttachmentResult *ProtectionAttachmentResult `protobuf:"bytes,10,opt,name=last_seen_attachment_result,json=lastSeenAttachmentResult,proto3" json:"last_seen_attachment_result,omitempty"`
	Status                   ConditionStatus             `protobuf:"varint,2,opt,name=status,proto3,enum=prodvana.desired_state.model.ConditionStatus" json:"status,omitempty"` // status of the link
	// Copy of ProtectionLink description. Used in FetchState to know retries, durations etc.
	Link *ProtectionLink `protobuf:"bytes,3,opt,name=link,proto3" json:"link,omitempty"`
	// When did we start polling this protection? If not set, this protection has not started polling.
	StartedTimestamp *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=started_timestamp,json=startedTimestamp,proto3" json:"started_timestamp,omitempty"`
	// When did we stop polling this protection? If set, this protection will no longer change status (except to be manually bypassed).
	StoppedTimestamp *timestamppb.Timestamp         `protobuf:"bytes,5,opt,name=stopped_timestamp,json=stoppedTimestamp,proto3" json:"stopped_timestamp,omitempty"`
	StoppedReason    ProtectionLinkState_StopReason `protobuf:"varint,6,opt,name=stopped_reason,json=stoppedReason,proto3,enum=prodvana.desired_state.model.ProtectionLinkState_StopReason" json:"stopped_reason,omitempty"`
	// Will be set the first time this attachment returned success.
	// Useful for time-based protections (post-push - check X succeeds for N mins). We make the ProtectionLink return CONVERGING till time expires.
	FirstSuccessTimestamp *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=first_success_timestamp,json=firstSuccessTimestamp,proto3" json:"first_success_timestamp,omitempty"`
}

func (x *ProtectionLinkState) Reset() {
	*x = ProtectionLinkState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtectionLinkState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtectionLinkState) ProtoMessage() {}

func (x *ProtectionLinkState) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtectionLinkState.ProtoReflect.Descriptor instead.
func (*ProtectionLinkState) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{37}
}

func (x *ProtectionLinkState) GetMeta() *Metadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ProtectionLinkState) GetAttachmentName() string {
	if x != nil {
		return x.AttachmentName
	}
	return ""
}

func (x *ProtectionLinkState) GetLastSeenAttachmentStatus() Status {
	if x != nil {
		return x.LastSeenAttachmentStatus
	}
	return Status_UNKNOWN_STATUS
}

func (x *ProtectionLinkState) GetLastSeenAttachmentResult() *ProtectionAttachmentResult {
	if x != nil {
		return x.LastSeenAttachmentResult
	}
	return nil
}

func (x *ProtectionLinkState) GetStatus() ConditionStatus {
	if x != nil {
		return x.Status
	}
	return ConditionStatus_CONDITION_UNKNOWN_STATUS
}

func (x *ProtectionLinkState) GetLink() *ProtectionLink {
	if x != nil {
		return x.Link
	}
	return nil
}

func (x *ProtectionLinkState) GetStartedTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedTimestamp
	}
	return nil
}

func (x *ProtectionLinkState) GetStoppedTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.StoppedTimestamp
	}
	return nil
}

func (x *ProtectionLinkState) GetStoppedReason() ProtectionLinkState_StopReason {
	if x != nil {
		return x.StoppedReason
	}
	return ProtectionLinkState_UNKNOWN
}

func (x *ProtectionLinkState) GetFirstSuccessTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.FirstSuccessTimestamp
	}
	return nil
}

type ProtectionAttachmentResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status             ProtectionAttachmentResult_Status `protobuf:"varint,1,opt,name=status,proto3,enum=prodvana.desired_state.model.ProtectionAttachmentResult_Status" json:"status,omitempty"`
	Message            string                            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	SystemDebugMessage string                            `protobuf:"bytes,3,opt,name=system_debug_message,json=systemDebugMessage,proto3" json:"system_debug_message,omitempty"`
	Version            string                            `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"` // protection attachment version that executed
	ExecutionTimestamp *timestamppb.Timestamp            `protobuf:"bytes,5,opt,name=execution_timestamp,json=executionTimestamp,proto3" json:"execution_timestamp,omitempty"`
}

func (x *ProtectionAttachmentResult) Reset() {
	*x = ProtectionAttachmentResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtectionAttachmentResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtectionAttachmentResult) ProtoMessage() {}

func (x *ProtectionAttachmentResult) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtectionAttachmentResult.ProtoReflect.Descriptor instead.
func (*ProtectionAttachmentResult) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{38}
}

func (x *ProtectionAttachmentResult) GetStatus() ProtectionAttachmentResult_Status {
	if x != nil {
		return x.Status
	}
	return ProtectionAttachmentResult_UNKNOWN
}

func (x *ProtectionAttachmentResult) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ProtectionAttachmentResult) GetSystemDebugMessage() string {
	if x != nil {
		return x.SystemDebugMessage
	}
	return ""
}

func (x *ProtectionAttachmentResult) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ProtectionAttachmentResult) GetExecutionTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.ExecutionTimestamp
	}
	return nil
}

// TODO: Rename to ProtectionAttachmentState to be consistent with other entities.
type ProtectionAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta                            *Metadata                   `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	Versions                        []*Version                  `protobuf:"bytes,2,rep,name=versions,proto3" json:"versions,omitempty"`
	LastCompletedVersions           []*Version                  `protobuf:"bytes,5,rep,name=last_completed_versions,json=lastCompletedVersions,proto3" json:"last_completed_versions,omitempty"`
	LastCompletedTimestamp          *timestamppb.Timestamp      `protobuf:"bytes,6,opt,name=last_completed_timestamp,json=lastCompletedTimestamp,proto3" json:"last_completed_timestamp,omitempty"`
	LastCompletedStatus             SimpleStatus                `protobuf:"varint,7,opt,name=last_completed_status,json=lastCompletedStatus,proto3,enum=prodvana.desired_state.model.SimpleStatus" json:"last_completed_status,omitempty"`
	LastCompletedStatusExplanations []*StatusExplanation        `protobuf:"bytes,8,rep,name=last_completed_status_explanations,json=lastCompletedStatusExplanations,proto3" json:"last_completed_status_explanations,omitempty"`
	LastCompletedAppliedVersion     string                      `protobuf:"bytes,9,opt,name=last_completed_applied_version,json=lastCompletedAppliedVersion,proto3" json:"last_completed_applied_version,omitempty"`
	ProtectionId                    string                      `protobuf:"bytes,3,opt,name=protection_id,json=protectionId,proto3" json:"protection_id,omitempty"`
	AttachmentId                    string                      `protobuf:"bytes,4,opt,name=attachment_id,json=attachmentId,proto3" json:"attachment_id,omitempty"`
	Result                          *ProtectionAttachmentResult `protobuf:"bytes,10,opt,name=result,proto3" json:"result,omitempty"` // next tag: 11
}

func (x *ProtectionAttachment) Reset() {
	*x = ProtectionAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtectionAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtectionAttachment) ProtoMessage() {}

func (x *ProtectionAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtectionAttachment.ProtoReflect.Descriptor instead.
func (*ProtectionAttachment) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{39}
}

func (x *ProtectionAttachment) GetMeta() *Metadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ProtectionAttachment) GetVersions() []*Version {
	if x != nil {
		return x.Versions
	}
	return nil
}

func (x *ProtectionAttachment) GetLastCompletedVersions() []*Version {
	if x != nil {
		return x.LastCompletedVersions
	}
	return nil
}

func (x *ProtectionAttachment) GetLastCompletedTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.LastCompletedTimestamp
	}
	return nil
}

func (x *ProtectionAttachment) GetLastCompletedStatus() SimpleStatus {
	if x != nil {
		return x.LastCompletedStatus
	}
	return SimpleStatus_SS_UNKNOWN
}

func (x *ProtectionAttachment) GetLastCompletedStatusExplanations() []*StatusExplanation {
	if x != nil {
		return x.LastCompletedStatusExplanations
	}
	return nil
}

func (x *ProtectionAttachment) GetLastCompletedAppliedVersion() string {
	if x != nil {
		return x.LastCompletedAppliedVersion
	}
	return ""
}

func (x *ProtectionAttachment) GetProtectionId() string {
	if x != nil {
		return x.ProtectionId
	}
	return ""
}

func (x *ProtectionAttachment) GetAttachmentId() string {
	if x != nil {
		return x.AttachmentId
	}
	return ""
}

func (x *ProtectionAttachment) GetResult() *ProtectionAttachmentResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type DeliveryExtensionState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta                *Metadata                   `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	Versions            []*Version                  `protobuf:"bytes,2,rep,name=versions,proto3" json:"versions,omitempty"`
	ExtensionId         string                      `protobuf:"bytes,3,opt,name=extension_id,json=extensionId,proto3" json:"extension_id,omitempty"`
	ExtensionInstanceId string                      `protobuf:"bytes,10,opt,name=extension_instance_id,json=extensionInstanceId,proto3" json:"extension_instance_id,omitempty"`
	Lifecycle           common_config.TaskLifecycle `protobuf:"varint,11,opt,name=lifecycle,proto3,enum=prodvana.common_config.TaskLifecycle" json:"lifecycle,omitempty"`
	OngoingRun          *TaskRun                    `protobuf:"bytes,16,opt,name=ongoing_run,json=ongoingRun,proto3" json:"ongoing_run,omitempty"` // only set if there is an ongoing run
	// last couple of runs for this extension.
	// may not contain the full list, but guaranteed to contain the last.
	LastRuns                        []*TaskRun             `protobuf:"bytes,15,rep,name=last_runs,json=lastRuns,proto3" json:"last_runs,omitempty"`
	LastCompletedTimestamp          *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=last_completed_timestamp,json=lastCompletedTimestamp,proto3" json:"last_completed_timestamp,omitempty"`
	LastCompletedStatus             SimpleStatus           `protobuf:"varint,7,opt,name=last_completed_status,json=lastCompletedStatus,proto3,enum=prodvana.desired_state.model.SimpleStatus" json:"last_completed_status,omitempty"`
	LastCompletedStatusExplanations []*StatusExplanation   `protobuf:"bytes,8,rep,name=last_completed_status_explanations,json=lastCompletedStatusExplanations,proto3" json:"last_completed_status_explanations,omitempty"`
	LastCompletedAppliedVersion     string                 `protobuf:"bytes,9,opt,name=last_completed_applied_version,json=lastCompletedAppliedVersion,proto3" json:"last_completed_applied_version,omitempty"`
	// In desired/target state, this refers to the max number of attempts to run the extension. 0 means no limit.
	// In current state, this refers to total number of attempts to run the extension (unsuccessful attempts
	// because 1 successful attempt will stop the extension).
	Attempts   int32         `protobuf:"varint,14,opt,name=attempts,proto3" json:"attempts,omitempty"`
	References []*Identifier `protobuf:"bytes,12,rep,name=references,proto3" json:"references,omitempty"`
}

func (x *DeliveryExtensionState) Reset() {
	*x = DeliveryExtensionState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliveryExtensionState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliveryExtensionState) ProtoMessage() {}

func (x *DeliveryExtensionState) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliveryExtensionState.ProtoReflect.Descriptor instead.
func (*DeliveryExtensionState) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{40}
}

func (x *DeliveryExtensionState) GetMeta() *Metadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *DeliveryExtensionState) GetVersions() []*Version {
	if x != nil {
		return x.Versions
	}
	return nil
}

func (x *DeliveryExtensionState) GetExtensionId() string {
	if x != nil {
		return x.ExtensionId
	}
	return ""
}

func (x *DeliveryExtensionState) GetExtensionInstanceId() string {
	if x != nil {
		return x.ExtensionInstanceId
	}
	return ""
}

func (x *DeliveryExtensionState) GetLifecycle() common_config.TaskLifecycle {
	if x != nil {
		return x.Lifecycle
	}
	return common_config.TaskLifecycle(0)
}

func (x *DeliveryExtensionState) GetOngoingRun() *TaskRun {
	if x != nil {
		return x.OngoingRun
	}
	return nil
}

func (x *DeliveryExtensionState) GetLastRuns() []*TaskRun {
	if x != nil {
		return x.LastRuns
	}
	return nil
}

func (x *DeliveryExtensionState) GetLastCompletedTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.LastCompletedTimestamp
	}
	return nil
}

func (x *DeliveryExtensionState) GetLastCompletedStatus() SimpleStatus {
	if x != nil {
		return x.LastCompletedStatus
	}
	return SimpleStatus_SS_UNKNOWN
}

func (x *DeliveryExtensionState) GetLastCompletedStatusExplanations() []*StatusExplanation {
	if x != nil {
		return x.LastCompletedStatusExplanations
	}
	return nil
}

func (x *DeliveryExtensionState) GetLastCompletedAppliedVersion() string {
	if x != nil {
		return x.LastCompletedAppliedVersion
	}
	return ""
}

func (x *DeliveryExtensionState) GetAttempts() int32 {
	if x != nil {
		return x.Attempts
	}
	return 0
}

func (x *DeliveryExtensionState) GetReferences() []*Identifier {
	if x != nil {
		return x.References
	}
	return nil
}

type Signal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type SignalType `protobuf:"varint,1,opt,name=type,proto3,enum=prodvana.desired_state.model.SignalType" json:"type,omitempty"`
	// Types that are assignable to Config:
	//
	//	*Signal_DeliveryPromotion
	//	*Signal_ProtectionBypass_
	//	*Signal_RuntimeExtensionApproval_
	//	*Signal_ReleaseChannelBypass_
	//	*Signal_ConcurrencyLimitBypass_
	//	*Signal_ForceExecuteTask_
	Config isSignal_Config `protobuf_oneof:"config"`
}

func (x *Signal) Reset() {
	*x = Signal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Signal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signal) ProtoMessage() {}

func (x *Signal) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signal.ProtoReflect.Descriptor instead.
func (*Signal) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{41}
}

func (x *Signal) GetType() SignalType {
	if x != nil {
		return x.Type
	}
	return SignalType_SIGNAL_UNKNOWN
}

func (m *Signal) GetConfig() isSignal_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *Signal) GetDeliveryPromotion() *Signal_DeliveryPromotionConfig {
	if x, ok := x.GetConfig().(*Signal_DeliveryPromotion); ok {
		return x.DeliveryPromotion
	}
	return nil
}

func (x *Signal) GetProtectionBypass() *Signal_ProtectionBypass {
	if x, ok := x.GetConfig().(*Signal_ProtectionBypass_); ok {
		return x.ProtectionBypass
	}
	return nil
}

func (x *Signal) GetRuntimeExtensionApproval() *Signal_RuntimeExtensionApproval {
	if x, ok := x.GetConfig().(*Signal_RuntimeExtensionApproval_); ok {
		return x.RuntimeExtensionApproval
	}
	return nil
}

func (x *Signal) GetReleaseChannelBypass() *Signal_ReleaseChannelBypass {
	if x, ok := x.GetConfig().(*Signal_ReleaseChannelBypass_); ok {
		return x.ReleaseChannelBypass
	}
	return nil
}

func (x *Signal) GetConcurrencyLimitBypass() *Signal_ConcurrencyLimitBypass {
	if x, ok := x.GetConfig().(*Signal_ConcurrencyLimitBypass_); ok {
		return x.ConcurrencyLimitBypass
	}
	return nil
}

func (x *Signal) GetForceExecuteTask() *Signal_ForceExecuteTask {
	if x, ok := x.GetConfig().(*Signal_ForceExecuteTask_); ok {
		return x.ForceExecuteTask
	}
	return nil
}

type isSignal_Config interface {
	isSignal_Config()
}

type Signal_DeliveryPromotion struct {
	DeliveryPromotion *Signal_DeliveryPromotionConfig `protobuf:"bytes,2,opt,name=delivery_promotion,json=deliveryPromotion,proto3,oneof"`
}

type Signal_ProtectionBypass_ struct {
	ProtectionBypass *Signal_ProtectionBypass `protobuf:"bytes,3,opt,name=protection_bypass,json=protectionBypass,proto3,oneof"`
}

type Signal_RuntimeExtensionApproval_ struct {
	RuntimeExtensionApproval *Signal_RuntimeExtensionApproval `protobuf:"bytes,4,opt,name=runtime_extension_approval,json=runtimeExtensionApproval,proto3,oneof"`
}

type Signal_ReleaseChannelBypass_ struct {
	ReleaseChannelBypass *Signal_ReleaseChannelBypass `protobuf:"bytes,5,opt,name=release_channel_bypass,json=releaseChannelBypass,proto3,oneof"`
}

type Signal_ConcurrencyLimitBypass_ struct {
	ConcurrencyLimitBypass *Signal_ConcurrencyLimitBypass `protobuf:"bytes,6,opt,name=concurrency_limit_bypass,json=concurrencyLimitBypass,proto3,oneof"`
}

type Signal_ForceExecuteTask_ struct {
	ForceExecuteTask *Signal_ForceExecuteTask `protobuf:"bytes,7,opt,name=force_execute_task,json=forceExecuteTask,proto3,oneof"`
}

func (*Signal_DeliveryPromotion) isSignal_Config() {}

func (*Signal_ProtectionBypass_) isSignal_Config() {}

func (*Signal_RuntimeExtensionApproval_) isSignal_Config() {}

func (*Signal_ReleaseChannelBypass_) isSignal_Config() {}

func (*Signal_ConcurrencyLimitBypass_) isSignal_Config() {}

func (*Signal_ForceExecuteTask_) isSignal_Config() {}

type DebugLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts  *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"`
	Log string                 `protobuf:"bytes,2,opt,name=log,proto3" json:"log,omitempty"`
}

func (x *DebugLog) Reset() {
	*x = DebugLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugLog) ProtoMessage() {}

func (x *DebugLog) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugLog.ProtoReflect.Descriptor instead.
func (*DebugLog) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{42}
}

func (x *DebugLog) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *DebugLog) GetLog() string {
	if x != nil {
		return x.Log
	}
	return ""
}

type RuntimeExtensionMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Output              *RuntimeExtensionFetchOutput `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"` // the plan this approval is for, if any
	ApplyDesiredStateId string                       `protobuf:"bytes,2,opt,name=apply_desired_state_id,json=applyDesiredStateId,proto3" json:"apply_desired_state_id,omitempty"`
}

func (x *RuntimeExtensionMetadata) Reset() {
	*x = RuntimeExtensionMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuntimeExtensionMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeExtensionMetadata) ProtoMessage() {}

func (x *RuntimeExtensionMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeExtensionMetadata.ProtoReflect.Descriptor instead.
func (*RuntimeExtensionMetadata) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{43}
}

func (x *RuntimeExtensionMetadata) GetOutput() *RuntimeExtensionFetchOutput {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *RuntimeExtensionMetadata) GetApplyDesiredStateId() string {
	if x != nil {
		return x.ApplyDesiredStateId
	}
	return ""
}

type ManualApprovalConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Config:
	//
	//	*ManualApprovalConfig_RuntimeExtension
	Config       isManualApprovalConfig_Config `protobuf_oneof:"config"`
	MinApprovers int32                         `protobuf:"varint,2,opt,name=min_approvers,json=minApprovers,proto3" json:"min_approvers,omitempty"`
}

func (x *ManualApprovalConfig) Reset() {
	*x = ManualApprovalConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManualApprovalConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualApprovalConfig) ProtoMessage() {}

func (x *ManualApprovalConfig) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualApprovalConfig.ProtoReflect.Descriptor instead.
func (*ManualApprovalConfig) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{44}
}

func (m *ManualApprovalConfig) GetConfig() isManualApprovalConfig_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *ManualApprovalConfig) GetRuntimeExtension() *RuntimeExtensionMetadata {
	if x, ok := x.GetConfig().(*ManualApprovalConfig_RuntimeExtension); ok {
		return x.RuntimeExtension
	}
	return nil
}

func (x *ManualApprovalConfig) GetMinApprovers() int32 {
	if x != nil {
		return x.MinApprovers
	}
	return 0
}

type isManualApprovalConfig_Config interface {
	isManualApprovalConfig_Config()
}

type ManualApprovalConfig_RuntimeExtension struct {
	RuntimeExtension *RuntimeExtensionMetadata `protobuf:"bytes,1,opt,name=runtime_extension,json=runtimeExtension,proto3,oneof"`
}

func (*ManualApprovalConfig_RuntimeExtension) isManualApprovalConfig_Config() {}

type MissingApproval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DesiredStateId   string                    `protobuf:"bytes,1,opt,name=desired_state_id,json=desiredStateId,proto3" json:"desired_state_id,omitempty"`
	SignalType       SignalType                `protobuf:"varint,2,opt,name=signal_type,json=signalType,proto3,enum=prodvana.desired_state.model.SignalType" json:"signal_type,omitempty"`
	Topic            string                    `protobuf:"bytes,3,opt,name=topic,proto3" json:"topic,omitempty"`
	RuntimeExtension *RuntimeExtensionMetadata `protobuf:"bytes,4,opt,name=runtime_extension,json=runtimeExtension,proto3" json:"runtime_extension,omitempty"`
	Current          bool                      `protobuf:"varint,5,opt,name=current,proto3" json:"current,omitempty"`
}

func (x *MissingApproval) Reset() {
	*x = MissingApproval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MissingApproval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MissingApproval) ProtoMessage() {}

func (x *MissingApproval) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MissingApproval.ProtoReflect.Descriptor instead.
func (*MissingApproval) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{45}
}

func (x *MissingApproval) GetDesiredStateId() string {
	if x != nil {
		return x.DesiredStateId
	}
	return ""
}

func (x *MissingApproval) GetSignalType() SignalType {
	if x != nil {
		return x.SignalType
	}
	return SignalType_SIGNAL_UNKNOWN
}

func (x *MissingApproval) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *MissingApproval) GetRuntimeExtension() *RuntimeExtensionMetadata {
	if x != nil {
		return x.RuntimeExtension
	}
	return nil
}

func (x *MissingApproval) GetCurrent() bool {
	if x != nil {
		return x.Current
	}
	return false
}

type ConcurrencyLimitExceeded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// apply cannot run due to a concurrency limit
	EntityId         *Identifier                         `protobuf:"bytes,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"` // entity being blocked
	DesiredStateId   string                              `protobuf:"bytes,5,opt,name=desired_state_id,json=desiredStateId,proto3" json:"desired_state_id,omitempty"`
	ReleaseId        string                              `protobuf:"bytes,6,opt,name=release_id,json=releaseId,proto3" json:"release_id,omitempty"`
	Blockers         []*ConcurrencyLimitExceeded_Blocker `protobuf:"bytes,4,rep,name=blockers,proto3" json:"blockers,omitempty"` // list of entities that are blocking this entity
	LimitDescription string                              `protobuf:"bytes,3,opt,name=limit_description,json=limitDescription,proto3" json:"limit_description,omitempty"`
	LimitId          string                              `protobuf:"bytes,7,opt,name=limit_id,json=limitId,proto3" json:"limit_id,omitempty"`
}

func (x *ConcurrencyLimitExceeded) Reset() {
	*x = ConcurrencyLimitExceeded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConcurrencyLimitExceeded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConcurrencyLimitExceeded) ProtoMessage() {}

func (x *ConcurrencyLimitExceeded) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConcurrencyLimitExceeded.ProtoReflect.Descriptor instead.
func (*ConcurrencyLimitExceeded) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{46}
}

func (x *ConcurrencyLimitExceeded) GetEntityId() *Identifier {
	if x != nil {
		return x.EntityId
	}
	return nil
}

func (x *ConcurrencyLimitExceeded) GetDesiredStateId() string {
	if x != nil {
		return x.DesiredStateId
	}
	return ""
}

func (x *ConcurrencyLimitExceeded) GetReleaseId() string {
	if x != nil {
		return x.ReleaseId
	}
	return ""
}

func (x *ConcurrencyLimitExceeded) GetBlockers() []*ConcurrencyLimitExceeded_Blocker {
	if x != nil {
		return x.Blockers
	}
	return nil
}

func (x *ConcurrencyLimitExceeded) GetLimitDescription() string {
	if x != nil {
		return x.LimitDescription
	}
	return ""
}

func (x *ConcurrencyLimitExceeded) GetLimitId() string {
	if x != nil {
		return x.LimitId
	}
	return ""
}

type ApplyConditionUnsatisfied struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Reason:
	//
	//	*ApplyConditionUnsatisfied_MissingApproval
	//	*ApplyConditionUnsatisfied_ConcurrencyLimitExceeded
	Reason isApplyConditionUnsatisfied_Reason `protobuf_oneof:"reason"`
}

func (x *ApplyConditionUnsatisfied) Reset() {
	*x = ApplyConditionUnsatisfied{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyConditionUnsatisfied) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyConditionUnsatisfied) ProtoMessage() {}

func (x *ApplyConditionUnsatisfied) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyConditionUnsatisfied.ProtoReflect.Descriptor instead.
func (*ApplyConditionUnsatisfied) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{47}
}

func (m *ApplyConditionUnsatisfied) GetReason() isApplyConditionUnsatisfied_Reason {
	if m != nil {
		return m.Reason
	}
	return nil
}

func (x *ApplyConditionUnsatisfied) GetMissingApproval() *ApplyConditionUnsatisfied_InternalMissingApproval {
	if x, ok := x.GetReason().(*ApplyConditionUnsatisfied_MissingApproval); ok {
		return x.MissingApproval
	}
	return nil
}

func (x *ApplyConditionUnsatisfied) GetConcurrencyLimitExceeded() *ConcurrencyLimitExceeded {
	if x, ok := x.GetReason().(*ApplyConditionUnsatisfied_ConcurrencyLimitExceeded); ok {
		return x.ConcurrencyLimitExceeded
	}
	return nil
}

type isApplyConditionUnsatisfied_Reason interface {
	isApplyConditionUnsatisfied_Reason()
}

type ApplyConditionUnsatisfied_MissingApproval struct {
	// Cannot apply because this entity requires additional approval.
	MissingApproval *ApplyConditionUnsatisfied_InternalMissingApproval `protobuf:"bytes,1,opt,name=missing_approval,json=missingApproval,proto3,oneof"`
}

type ApplyConditionUnsatisfied_ConcurrencyLimitExceeded struct {
	ConcurrencyLimitExceeded *ConcurrencyLimitExceeded `protobuf:"bytes,2,opt,name=concurrency_limit_exceeded,json=concurrencyLimitExceeded,proto3,oneof"` // TODO: Add reasons like paused entities.
}

func (*ApplyConditionUnsatisfied_MissingApproval) isApplyConditionUnsatisfied_Reason() {}

func (*ApplyConditionUnsatisfied_ConcurrencyLimitExceeded) isApplyConditionUnsatisfied_Reason() {}

// metadata about how a RuntimeExtension fetch task was started
type FetchTaskStartDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FetchMode extensions.FetchMode `protobuf:"varint,1,opt,name=fetch_mode,json=fetchMode,proto3,enum=prodvana.runtimes.extensions.FetchMode" json:"fetch_mode,omitempty"`
}

func (x *FetchTaskStartDetails) Reset() {
	*x = FetchTaskStartDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchTaskStartDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchTaskStartDetails) ProtoMessage() {}

func (x *FetchTaskStartDetails) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchTaskStartDetails.ProtoReflect.Descriptor instead.
func (*FetchTaskStartDetails) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{48}
}

func (x *FetchTaskStartDetails) GetFetchMode() extensions.FetchMode {
	if x != nil {
		return x.FetchMode
	}
	return extensions.FetchMode(0)
}

type ConcurrencyLease struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LimitId string `protobuf:"bytes,1,opt,name=limit_id,json=limitId,proto3" json:"limit_id,omitempty"`
	LeaseId string `protobuf:"bytes,2,opt,name=lease_id,json=leaseId,proto3" json:"lease_id,omitempty"`
}

func (x *ConcurrencyLease) Reset() {
	*x = ConcurrencyLease{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConcurrencyLease) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConcurrencyLease) ProtoMessage() {}

func (x *ConcurrencyLease) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConcurrencyLease.ProtoReflect.Descriptor instead.
func (*ConcurrencyLease) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{49}
}

func (x *ConcurrencyLease) GetLimitId() string {
	if x != nil {
		return x.LimitId
	}
	return ""
}

func (x *ConcurrencyLease) GetLeaseId() string {
	if x != nil {
		return x.LeaseId
	}
	return ""
}

type TaskRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status             SimpleStatus         `protobuf:"varint,1,opt,name=status,proto3,enum=prodvana.desired_state.model.SimpleStatus" json:"status,omitempty"`
	StatusExplanations []*StatusExplanation `protobuf:"bytes,2,rep,name=status_explanations,json=statusExplanations,proto3" json:"status_explanations,omitempty"`
	Version            string               `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	SeenVersions       []*Version           `protobuf:"bytes,4,rep,name=seen_versions,json=seenVersions,proto3" json:"seen_versions,omitempty"`
	// IDs for the entity that started this task
	DesiredStateId     string                 `protobuf:"bytes,18,opt,name=desired_state_id,json=desiredStateId,proto3" json:"desired_state_id,omitempty"`
	ReleaseId          string                 `protobuf:"bytes,19,opt,name=release_id,json=releaseId,proto3" json:"release_id,omitempty"`
	CreatedTimestamp   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_timestamp,json=createdTimestamp,proto3" json:"created_timestamp,omitempty"`
	StartedTimestamp   *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=started_timestamp,json=startedTimestamp,proto3" json:"started_timestamp,omitempty"`
	CompletedTimestamp *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=completed_timestamp,json=completedTimestamp,proto3" json:"completed_timestamp,omitempty"`
	StartedByProcessId string                 `protobuf:"bytes,16,opt,name=started_by_process_id,json=startedByProcessId,proto3" json:"started_by_process_id,omitempty"`
	// these fields are only populated for completed tasks
	OutputBlobIds          []string                         `protobuf:"bytes,7,rep,name=output_blob_ids,json=outputBlobIds,proto3" json:"output_blob_ids,omitempty"`
	ExitCodes              []int32                          `protobuf:"varint,8,rep,packed,name=exit_codes,json=exitCodes,proto3" json:"exit_codes,omitempty"`
	RuntimeObjectMetadatas []*TaskRun_RuntimeObjectMetadata `protobuf:"bytes,23,rep,name=runtime_object_metadatas,json=runtimeObjectMetadatas,proto3" json:"runtime_object_metadatas,omitempty"`
	// if set, output_blob_ids, exit_codes and runtime objects can be ignored (it'll contain the output that will eventually lead to this pvn-wrapper output)
	PvnWrapperOutput *pvn_wrapper.Output `protobuf:"bytes,22,opt,name=pvn_wrapper_output,json=pvnWrapperOutput,proto3" json:"pvn_wrapper_output,omitempty"`
	// all entities that make up the task
	TaskEntities []*Identifier `protobuf:"bytes,9,rep,name=task_entities,json=taskEntities,proto3" json:"task_entities,omitempty"`
	// if there is any intersection between these and exit_codes, and the status is FAILED, then the retryable bit below will be
	// set to true.
	RetryableExitCodes []int32 `protobuf:"varint,11,rep,packed,name=retryable_exit_codes,json=retryableExitCodes,proto3" json:"retryable_exit_codes,omitempty"`
	Retryable          bool    `protobuf:"varint,12,opt,name=retryable,proto3" json:"retryable,omitempty"`
	// tasks are created first in the NOT_STARTED phase
	Phase TaskRun_Phase `protobuf:"varint,13,opt,name=phase,proto3,enum=prodvana.desired_state.model.TaskRun_Phase" json:"phase,omitempty"`
	// for runtime extension aggregate objects only, the fetch details used to start the task (will contain plan id)
	FetchDetails          *FetchDetails          `protobuf:"bytes,10,opt,name=fetch_details,json=fetchDetails,proto3" json:"fetch_details,omitempty"`
	FetchTaskStartDetails *FetchTaskStartDetails `protobuf:"bytes,14,opt,name=fetch_task_start_details,json=fetchTaskStartDetails,proto3" json:"fetch_task_start_details,omitempty"`
	HasWorkReason         string                 `protobuf:"bytes,21,opt,name=has_work_reason,json=hasWorkReason,proto3" json:"has_work_reason,omitempty"`
	// if set, the entity who started this task has a concurrency limit that needs to be renewed and released
	ConcurrencyLeases []*ConcurrencyLease `protobuf:"bytes,17,rep,name=concurrency_leases,json=concurrencyLeases,proto3" json:"concurrency_leases,omitempty"`
	ApplyId           string              `protobuf:"bytes,24,opt,name=apply_id,json=applyId,proto3" json:"apply_id,omitempty"`
}

func (x *TaskRun) Reset() {
	*x = TaskRun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRun) ProtoMessage() {}

func (x *TaskRun) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRun.ProtoReflect.Descriptor instead.
func (*TaskRun) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{50}
}

func (x *TaskRun) GetStatus() SimpleStatus {
	if x != nil {
		return x.Status
	}
	return SimpleStatus_SS_UNKNOWN
}

func (x *TaskRun) GetStatusExplanations() []*StatusExplanation {
	if x != nil {
		return x.StatusExplanations
	}
	return nil
}

func (x *TaskRun) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *TaskRun) GetSeenVersions() []*Version {
	if x != nil {
		return x.SeenVersions
	}
	return nil
}

func (x *TaskRun) GetDesiredStateId() string {
	if x != nil {
		return x.DesiredStateId
	}
	return ""
}

func (x *TaskRun) GetReleaseId() string {
	if x != nil {
		return x.ReleaseId
	}
	return ""
}

func (x *TaskRun) GetCreatedTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedTimestamp
	}
	return nil
}

func (x *TaskRun) GetStartedTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedTimestamp
	}
	return nil
}

func (x *TaskRun) GetCompletedTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.CompletedTimestamp
	}
	return nil
}

func (x *TaskRun) GetStartedByProcessId() string {
	if x != nil {
		return x.StartedByProcessId
	}
	return ""
}

func (x *TaskRun) GetOutputBlobIds() []string {
	if x != nil {
		return x.OutputBlobIds
	}
	return nil
}

func (x *TaskRun) GetExitCodes() []int32 {
	if x != nil {
		return x.ExitCodes
	}
	return nil
}

func (x *TaskRun) GetRuntimeObjectMetadatas() []*TaskRun_RuntimeObjectMetadata {
	if x != nil {
		return x.RuntimeObjectMetadatas
	}
	return nil
}

func (x *TaskRun) GetPvnWrapperOutput() *pvn_wrapper.Output {
	if x != nil {
		return x.PvnWrapperOutput
	}
	return nil
}

func (x *TaskRun) GetTaskEntities() []*Identifier {
	if x != nil {
		return x.TaskEntities
	}
	return nil
}

func (x *TaskRun) GetRetryableExitCodes() []int32 {
	if x != nil {
		return x.RetryableExitCodes
	}
	return nil
}

func (x *TaskRun) GetRetryable() bool {
	if x != nil {
		return x.Retryable
	}
	return false
}

func (x *TaskRun) GetPhase() TaskRun_Phase {
	if x != nil {
		return x.Phase
	}
	return TaskRun_RUNNING
}

func (x *TaskRun) GetFetchDetails() *FetchDetails {
	if x != nil {
		return x.FetchDetails
	}
	return nil
}

func (x *TaskRun) GetFetchTaskStartDetails() *FetchTaskStartDetails {
	if x != nil {
		return x.FetchTaskStartDetails
	}
	return nil
}

func (x *TaskRun) GetHasWorkReason() string {
	if x != nil {
		return x.HasWorkReason
	}
	return ""
}

func (x *TaskRun) GetConcurrencyLeases() []*ConcurrencyLease {
	if x != nil {
		return x.ConcurrencyLeases
	}
	return nil
}

func (x *TaskRun) GetApplyId() string {
	if x != nil {
		return x.ApplyId
	}
	return ""
}

type TaskEntityContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastCompletedRun       *TaskRun                                `protobuf:"bytes,1,opt,name=last_completed_run,json=lastCompletedRun,proto3" json:"last_completed_run,omitempty"`
	LastRun                *TaskRun                                `protobuf:"bytes,2,opt,name=last_run,json=lastRun,proto3" json:"last_run,omitempty"`
	LastSuccessfulApplyId  string                                  `protobuf:"bytes,6,opt,name=last_successful_apply_id,json=lastSuccessfulApplyId,proto3" json:"last_successful_apply_id,omitempty"`
	ApplyIdVersionOverride *TaskEntityContext_ApplyIdWithVersion   `protobuf:"bytes,7,opt,name=apply_id_version_override,json=applyIdVersionOverride,proto3" json:"apply_id_version_override,omitempty"` // DEPRECATED
	ApplyIdWithVersions    []*TaskEntityContext_ApplyIdWithVersion `protobuf:"bytes,8,rep,name=apply_id_with_versions,json=applyIdWithVersions,proto3" json:"apply_id_with_versions,omitempty"`
}

func (x *TaskEntityContext) Reset() {
	*x = TaskEntityContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskEntityContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskEntityContext) ProtoMessage() {}

func (x *TaskEntityContext) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskEntityContext.ProtoReflect.Descriptor instead.
func (*TaskEntityContext) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{51}
}

func (x *TaskEntityContext) GetLastCompletedRun() *TaskRun {
	if x != nil {
		return x.LastCompletedRun
	}
	return nil
}

func (x *TaskEntityContext) GetLastRun() *TaskRun {
	if x != nil {
		return x.LastRun
	}
	return nil
}

func (x *TaskEntityContext) GetLastSuccessfulApplyId() string {
	if x != nil {
		return x.LastSuccessfulApplyId
	}
	return ""
}

func (x *TaskEntityContext) GetApplyIdVersionOverride() *TaskEntityContext_ApplyIdWithVersion {
	if x != nil {
		return x.ApplyIdVersionOverride
	}
	return nil
}

func (x *TaskEntityContext) GetApplyIdWithVersions() []*TaskEntityContext_ApplyIdWithVersion {
	if x != nil {
		return x.ApplyIdWithVersions
	}
	return nil
}

// metadata about the desired state, set at the time of SetDesiredState
type SetDesiredStateMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rollback                          bool `protobuf:"varint,1,opt,name=rollback,proto3" json:"rollback,omitempty"`
	BypassPreconditionsAndProtections bool `protobuf:"varint,2,opt,name=bypass_preconditions_and_protections,json=bypassPreconditionsAndProtections,proto3" json:"bypass_preconditions_and_protections,omitempty"`
}

func (x *SetDesiredStateMetadata) Reset() {
	*x = SetDesiredStateMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDesiredStateMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDesiredStateMetadata) ProtoMessage() {}

func (x *SetDesiredStateMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDesiredStateMetadata.ProtoReflect.Descriptor instead.
func (*SetDesiredStateMetadata) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{52}
}

func (x *SetDesiredStateMetadata) GetRollback() bool {
	if x != nil {
		return x.Rollback
	}
	return false
}

func (x *SetDesiredStateMetadata) GetBypassPreconditionsAndProtections() bool {
	if x != nil {
		return x.BypassPreconditionsAndProtections
	}
	return false
}

// TODO(naphat) conditions need health
type Condition_ReleaseChannelStableCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Application      string `protobuf:"bytes,1,opt,name=application,proto3" json:"application,omitempty"`
	Service          string `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`                                             // service name or id
	ServiceId        string `protobuf:"bytes,3,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`                        // service id, normalized. Set internally by Prodvana
	ReleaseChannel   string `protobuf:"bytes,4,opt,name=release_channel,json=releaseChannel,proto3" json:"release_channel,omitempty"`         // release channel name or id
	ReleaseChannelId string `protobuf:"bytes,5,opt,name=release_channel_id,json=releaseChannelId,proto3" json:"release_channel_id,omitempty"` // release channel id, normalized. Set internally by Prodvana
	ServiceVersion   string `protobuf:"bytes,6,opt,name=service_version,json=serviceVersion,proto3" json:"service_version,omitempty"`
	// Set internally by Prodvana. If true, this condition has already been satisfied, but the
	// dependent release channel has been replaced with a new service version.
	// If set, this condition should be considered satisfied immediately.
	InternalOnlySatisfiedInReplacedDesiredState bool `protobuf:"varint,7,opt,name=internal_only_satisfied_in_replaced_desired_state,json=internalOnlySatisfiedInReplacedDesiredState,proto3" json:"internal_only_satisfied_in_replaced_desired_state,omitempty"`
}

func (x *Condition_ReleaseChannelStableCondition) Reset() {
	*x = Condition_ReleaseChannelStableCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition_ReleaseChannelStableCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition_ReleaseChannelStableCondition) ProtoMessage() {}

func (x *Condition_ReleaseChannelStableCondition) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition_ReleaseChannelStableCondition.ProtoReflect.Descriptor instead.
func (*Condition_ReleaseChannelStableCondition) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Condition_ReleaseChannelStableCondition) GetApplication() string {
	if x != nil {
		return x.Application
	}
	return ""
}

func (x *Condition_ReleaseChannelStableCondition) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *Condition_ReleaseChannelStableCondition) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *Condition_ReleaseChannelStableCondition) GetReleaseChannel() string {
	if x != nil {
		return x.ReleaseChannel
	}
	return ""
}

func (x *Condition_ReleaseChannelStableCondition) GetReleaseChannelId() string {
	if x != nil {
		return x.ReleaseChannelId
	}
	return ""
}

func (x *Condition_ReleaseChannelStableCondition) GetServiceVersion() string {
	if x != nil {
		return x.ServiceVersion
	}
	return ""
}

func (x *Condition_ReleaseChannelStableCondition) GetInternalOnlySatisfiedInReplacedDesiredState() bool {
	if x != nil {
		return x.InternalOnlySatisfiedInReplacedDesiredState
	}
	return false
}

type Condition_ManualApproval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic        string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Description  string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	MinApprovers int32  `protobuf:"varint,3,opt,name=min_approvers,json=minApprovers,proto3" json:"min_approvers,omitempty"`
}

func (x *Condition_ManualApproval) Reset() {
	*x = Condition_ManualApproval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition_ManualApproval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition_ManualApproval) ProtoMessage() {}

func (x *Condition_ManualApproval) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition_ManualApproval.ProtoReflect.Descriptor instead.
func (*Condition_ManualApproval) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{1, 1}
}

func (x *Condition_ManualApproval) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *Condition_ManualApproval) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Condition_ManualApproval) GetMinApprovers() int32 {
	if x != nil {
		return x.MinApprovers
	}
	return 0
}

type Condition_CustomTaskSuccessfulCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomTaskName string `protobuf:"bytes,1,opt,name=custom_task_name,json=customTaskName,proto3" json:"custom_task_name,omitempty"`
	// Types that are assignable to Source:
	//
	//	*Condition_CustomTaskSuccessfulCondition_Protection_
	Source isCondition_CustomTaskSuccessfulCondition_Source `protobuf_oneof:"source"`
}

func (x *Condition_CustomTaskSuccessfulCondition) Reset() {
	*x = Condition_CustomTaskSuccessfulCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition_CustomTaskSuccessfulCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition_CustomTaskSuccessfulCondition) ProtoMessage() {}

func (x *Condition_CustomTaskSuccessfulCondition) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition_CustomTaskSuccessfulCondition.ProtoReflect.Descriptor instead.
func (*Condition_CustomTaskSuccessfulCondition) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{1, 2}
}

func (x *Condition_CustomTaskSuccessfulCondition) GetCustomTaskName() string {
	if x != nil {
		return x.CustomTaskName
	}
	return ""
}

func (m *Condition_CustomTaskSuccessfulCondition) GetSource() isCondition_CustomTaskSuccessfulCondition_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *Condition_CustomTaskSuccessfulCondition) GetProtection() *Condition_CustomTaskSuccessfulCondition_Protection {
	if x, ok := x.GetSource().(*Condition_CustomTaskSuccessfulCondition_Protection_); ok {
		return x.Protection
	}
	return nil
}

type isCondition_CustomTaskSuccessfulCondition_Source interface {
	isCondition_CustomTaskSuccessfulCondition_Source()
}

type Condition_CustomTaskSuccessfulCondition_Protection_ struct {
	Protection *Condition_CustomTaskSuccessfulCondition_Protection `protobuf:"bytes,2,opt,name=protection,proto3,oneof"`
}

func (*Condition_CustomTaskSuccessfulCondition_Protection_) isCondition_CustomTaskSuccessfulCondition_Source() {
}

type Condition_CustomTaskSuccessfulCondition_Protection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	TaskType CustomTaskType `protobuf:"varint,3,opt,name=task_type,json=taskType,proto3,enum=prodvana.desired_state.model.CustomTaskType" json:"task_type,omitempty"`
}

func (x *Condition_CustomTaskSuccessfulCondition_Protection) Reset() {
	*x = Condition_CustomTaskSuccessfulCondition_Protection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition_CustomTaskSuccessfulCondition_Protection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition_CustomTaskSuccessfulCondition_Protection) ProtoMessage() {}

func (x *Condition_CustomTaskSuccessfulCondition_Protection) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition_CustomTaskSuccessfulCondition_Protection.ProtoReflect.Descriptor instead.
func (*Condition_CustomTaskSuccessfulCondition_Protection) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{1, 2, 0}
}

func (x *Condition_CustomTaskSuccessfulCondition_Protection) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Condition_CustomTaskSuccessfulCondition_Protection) GetTaskType() CustomTaskType {
	if x != nil {
		return x.TaskType
	}
	return CustomTaskType_CUSTOM_TASK_TYPE_UNKNOWN
}

type RuntimeObject_RuntimeExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// aggregate object will have all commands set. fetch and get_info will only have appropriate commands set.
	Apply                    *environment.CompiledExtensionCommand `protobuf:"bytes,3,opt,name=apply,proto3" json:"apply,omitempty"`
	Fetch                    *environment.CompiledExtensionCommand `protobuf:"bytes,1,opt,name=fetch,proto3" json:"fetch,omitempty"`
	GetInfo                  *environment.CompiledExtensionCommand `protobuf:"bytes,17,opt,name=get_info,json=getInfo,proto3" json:"get_info,omitempty"`
	FetchInterval            *durationpb.Duration                  `protobuf:"bytes,4,opt,name=fetch_interval,json=fetchInterval,proto3" json:"fetch_interval,omitempty"`
	FetchSteadyStateInterval *durationpb.Duration                  `protobuf:"bytes,11,opt,name=fetch_steady_state_interval,json=fetchSteadyStateInterval,proto3" json:"fetch_steady_state_interval,omitempty"`
	GetInfoInterval          *durationpb.Duration                  `protobuf:"bytes,19,opt,name=get_info_interval,json=getInfoInterval,proto3" json:"get_info_interval,omitempty"`
	ServiceId                string                                `protobuf:"bytes,2,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	ReleaseChannelId         string                                `protobuf:"bytes,6,opt,name=release_channel_id,json=releaseChannelId,proto3" json:"release_channel_id,omitempty"`
	Parameters               []*common_config.ParameterDefinition  `protobuf:"bytes,7,rep,name=parameters,proto3" json:"parameters,omitempty"`
	ParameterValues          []*common_config.ParameterValue       `protobuf:"bytes,8,rep,name=parameter_values,json=parameterValues,proto3" json:"parameter_values,omitempty"`
	Type                     environment.ExtensionType             `protobuf:"varint,9,opt,name=type,proto3,enum=prodvana.environment.ExtensionType" json:"type,omitempty"`
	FetchOutput              *RuntimeExtensionFetchOutput          `protobuf:"bytes,10,opt,name=fetch_output,json=fetchOutput,proto3" json:"fetch_output,omitempty"`
	GetInfoOutput            *RuntimeExtensionGetInfoOutput        `protobuf:"bytes,16,opt,name=get_info_output,json=getInfoOutput,proto3" json:"get_info_output,omitempty"`
	ApplyOutput              *RuntimeExtensionApplyOutput          `protobuf:"bytes,12,opt,name=apply_output,json=applyOutput,proto3" json:"apply_output,omitempty"`
	FetchRetryPolicy         *environment.RetryPolicy              `protobuf:"bytes,13,opt,name=fetch_retry_policy,json=fetchRetryPolicy,proto3" json:"fetch_retry_policy,omitempty"`
	ApplyRetryPolicy         *environment.RetryPolicy              `protobuf:"bytes,14,opt,name=apply_retry_policy,json=applyRetryPolicy,proto3" json:"apply_retry_policy,omitempty"`
	GetInfoRetryPolicy       *environment.RetryPolicy              `protobuf:"bytes,18,opt,name=get_info_retry_policy,json=getInfoRetryPolicy,proto3" json:"get_info_retry_policy,omitempty"`
	ApplyRetryableExitCodes  []int32                               `protobuf:"varint,15,rep,packed,name=apply_retryable_exit_codes,json=applyRetryableExitCodes,proto3" json:"apply_retryable_exit_codes,omitempty"`
	FetchMode                extensions.FetchMode                  `protobuf:"varint,20,opt,name=fetch_mode,json=fetchMode,proto3,enum=prodvana.runtimes.extensions.FetchMode" json:"fetch_mode,omitempty"`
}

func (x *RuntimeObject_RuntimeExtension) Reset() {
	*x = RuntimeObject_RuntimeExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuntimeObject_RuntimeExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeObject_RuntimeExtension) ProtoMessage() {}

func (x *RuntimeObject_RuntimeExtension) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeObject_RuntimeExtension.ProtoReflect.Descriptor instead.
func (*RuntimeObject_RuntimeExtension) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{24, 0}
}

func (x *RuntimeObject_RuntimeExtension) GetApply() *environment.CompiledExtensionCommand {
	if x != nil {
		return x.Apply
	}
	return nil
}

func (x *RuntimeObject_RuntimeExtension) GetFetch() *environment.CompiledExtensionCommand {
	if x != nil {
		return x.Fetch
	}
	return nil
}

func (x *RuntimeObject_RuntimeExtension) GetGetInfo() *environment.CompiledExtensionCommand {
	if x != nil {
		return x.GetInfo
	}
	return nil
}

func (x *RuntimeObject_RuntimeExtension) GetFetchInterval() *durationpb.Duration {
	if x != nil {
		return x.FetchInterval
	}
	return nil
}

func (x *RuntimeObject_RuntimeExtension) GetFetchSteadyStateInterval() *durationpb.Duration {
	if x != nil {
		return x.FetchSteadyStateInterval
	}
	return nil
}

func (x *RuntimeObject_RuntimeExtension) GetGetInfoInterval() *durationpb.Duration {
	if x != nil {
		return x.GetInfoInterval
	}
	return nil
}

func (x *RuntimeObject_RuntimeExtension) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *RuntimeObject_RuntimeExtension) GetReleaseChannelId() string {
	if x != nil {
		return x.ReleaseChannelId
	}
	return ""
}

func (x *RuntimeObject_RuntimeExtension) GetParameters() []*common_config.ParameterDefinition {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *RuntimeObject_RuntimeExtension) GetParameterValues() []*common_config.ParameterValue {
	if x != nil {
		return x.ParameterValues
	}
	return nil
}

func (x *RuntimeObject_RuntimeExtension) GetType() environment.ExtensionType {
	if x != nil {
		return x.Type
	}
	return environment.ExtensionType(0)
}

func (x *RuntimeObject_RuntimeExtension) GetFetchOutput() *RuntimeExtensionFetchOutput {
	if x != nil {
		return x.FetchOutput
	}
	return nil
}

func (x *RuntimeObject_RuntimeExtension) GetGetInfoOutput() *RuntimeExtensionGetInfoOutput {
	if x != nil {
		return x.GetInfoOutput
	}
	return nil
}

func (x *RuntimeObject_RuntimeExtension) GetApplyOutput() *RuntimeExtensionApplyOutput {
	if x != nil {
		return x.ApplyOutput
	}
	return nil
}

func (x *RuntimeObject_RuntimeExtension) GetFetchRetryPolicy() *environment.RetryPolicy {
	if x != nil {
		return x.FetchRetryPolicy
	}
	return nil
}

func (x *RuntimeObject_RuntimeExtension) GetApplyRetryPolicy() *environment.RetryPolicy {
	if x != nil {
		return x.ApplyRetryPolicy
	}
	return nil
}

func (x *RuntimeObject_RuntimeExtension) GetGetInfoRetryPolicy() *environment.RetryPolicy {
	if x != nil {
		return x.GetInfoRetryPolicy
	}
	return nil
}

func (x *RuntimeObject_RuntimeExtension) GetApplyRetryableExitCodes() []int32 {
	if x != nil {
		return x.ApplyRetryableExitCodes
	}
	return nil
}

func (x *RuntimeObject_RuntimeExtension) GetFetchMode() extensions.FetchMode {
	if x != nil {
		return x.FetchMode
	}
	return extensions.FetchMode(0)
}

type KeyDeliveryDecision_EntitySnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      *Identifier `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status  Status      `protobuf:"varint,2,opt,name=status,proto3,enum=prodvana.desired_state.model.Status" json:"status,omitempty"`
	Current *State      `protobuf:"bytes,3,opt,name=current,proto3" json:"current,omitempty"`
}

func (x *KeyDeliveryDecision_EntitySnapshot) Reset() {
	*x = KeyDeliveryDecision_EntitySnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyDeliveryDecision_EntitySnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyDeliveryDecision_EntitySnapshot) ProtoMessage() {}

func (x *KeyDeliveryDecision_EntitySnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyDeliveryDecision_EntitySnapshot.ProtoReflect.Descriptor instead.
func (*KeyDeliveryDecision_EntitySnapshot) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{30, 0}
}

func (x *KeyDeliveryDecision_EntitySnapshot) GetId() *Identifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *KeyDeliveryDecision_EntitySnapshot) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_UNKNOWN_STATUS
}

func (x *KeyDeliveryDecision_EntitySnapshot) GetCurrent() *State {
	if x != nil {
		return x.Current
	}
	return nil
}

type ManualApprovalState_Approver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source         version.Source          `protobuf:"varint,1,opt,name=source,proto3,enum=prodvana.version.Source" json:"source,omitempty"`
	SourceMetadata *version.SourceMetadata `protobuf:"bytes,2,opt,name=source_metadata,json=sourceMetadata,proto3" json:"source_metadata,omitempty"`
	Status         ManualApprovalStatus    `protobuf:"varint,3,opt,name=status,proto3,enum=prodvana.desired_state.model.ManualApprovalStatus" json:"status,omitempty"`
	Timestamp      *timestamppb.Timestamp  `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *ManualApprovalState_Approver) Reset() {
	*x = ManualApprovalState_Approver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManualApprovalState_Approver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualApprovalState_Approver) ProtoMessage() {}

func (x *ManualApprovalState_Approver) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualApprovalState_Approver.ProtoReflect.Descriptor instead.
func (*ManualApprovalState_Approver) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{32, 0}
}

func (x *ManualApprovalState_Approver) GetSource() version.Source {
	if x != nil {
		return x.Source
	}
	return version.Source(0)
}

func (x *ManualApprovalState_Approver) GetSourceMetadata() *version.SourceMetadata {
	if x != nil {
		return x.SourceMetadata
	}
	return nil
}

func (x *ManualApprovalState_Approver) GetStatus() ManualApprovalStatus {
	if x != nil {
		return x.Status
	}
	return ManualApprovalStatus_PENDING
}

func (x *ManualApprovalState_Approver) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type Annotations_Annotation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Annotations_Annotation) Reset() {
	*x = Annotations_Annotation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Annotations_Annotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Annotations_Annotation) ProtoMessage() {}

func (x *Annotations_Annotation) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Annotations_Annotation.ProtoReflect.Descriptor instead.
func (*Annotations_Annotation) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{34, 0}
}

func (x *Annotations_Annotation) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Annotations_Annotation) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Signal_DeliveryPromotionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// which canary progress stage to promote
	Stage int64 `protobuf:"varint,1,opt,name=stage,proto3" json:"stage,omitempty"`
	// when true, indicates delivery should be promoted fully, e.g. 100%
	Full   bool `protobuf:"varint,2,opt,name=full,proto3" json:"full,omitempty"`
	Reject bool `protobuf:"varint,3,opt,name=reject,proto3" json:"reject,omitempty"`
}

func (x *Signal_DeliveryPromotionConfig) Reset() {
	*x = Signal_DeliveryPromotionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Signal_DeliveryPromotionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signal_DeliveryPromotionConfig) ProtoMessage() {}

func (x *Signal_DeliveryPromotionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signal_DeliveryPromotionConfig.ProtoReflect.Descriptor instead.
func (*Signal_DeliveryPromotionConfig) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{41, 0}
}

func (x *Signal_DeliveryPromotionConfig) GetStage() int64 {
	if x != nil {
		return x.Stage
	}
	return 0
}

func (x *Signal_DeliveryPromotionConfig) GetFull() bool {
	if x != nil {
		return x.Full
	}
	return false
}

func (x *Signal_DeliveryPromotionConfig) GetReject() bool {
	if x != nil {
		return x.Reject
	}
	return false
}

type Signal_ProtectionBypass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Signal_ProtectionBypass) Reset() {
	*x = Signal_ProtectionBypass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Signal_ProtectionBypass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signal_ProtectionBypass) ProtoMessage() {}

func (x *Signal_ProtectionBypass) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signal_ProtectionBypass.ProtoReflect.Descriptor instead.
func (*Signal_ProtectionBypass) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{41, 1}
}

type Signal_RuntimeExtensionApproval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// When was the approval issued?
	// If this is after last run timestamp, apply can proceed.
	Timestamp  *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Reject     bool                   `protobuf:"varint,2,opt,name=reject,proto3" json:"reject,omitempty"`
	PlanBlobId string                 `protobuf:"bytes,3,opt,name=plan_blob_id,json=planBlobId,proto3" json:"plan_blob_id,omitempty"` // if set, approve specifically for this plan
}

func (x *Signal_RuntimeExtensionApproval) Reset() {
	*x = Signal_RuntimeExtensionApproval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Signal_RuntimeExtensionApproval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signal_RuntimeExtensionApproval) ProtoMessage() {}

func (x *Signal_RuntimeExtensionApproval) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signal_RuntimeExtensionApproval.ProtoReflect.Descriptor instead.
func (*Signal_RuntimeExtensionApproval) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{41, 2}
}

func (x *Signal_RuntimeExtensionApproval) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Signal_RuntimeExtensionApproval) GetReject() bool {
	if x != nil {
		return x.Reject
	}
	return false
}

func (x *Signal_RuntimeExtensionApproval) GetPlanBlobId() string {
	if x != nil {
		return x.PlanBlobId
	}
	return ""
}

type Signal_ReleaseChannelBypass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityIds []string `protobuf:"bytes,1,rep,name=entity_ids,json=entityIds,proto3" json:"entity_ids,omitempty"`
}

func (x *Signal_ReleaseChannelBypass) Reset() {
	*x = Signal_ReleaseChannelBypass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Signal_ReleaseChannelBypass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signal_ReleaseChannelBypass) ProtoMessage() {}

func (x *Signal_ReleaseChannelBypass) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signal_ReleaseChannelBypass.ProtoReflect.Descriptor instead.
func (*Signal_ReleaseChannelBypass) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{41, 3}
}

func (x *Signal_ReleaseChannelBypass) GetEntityIds() []string {
	if x != nil {
		return x.EntityIds
	}
	return nil
}

type Signal_ConcurrencyLimitBypass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Signal_ConcurrencyLimitBypass) Reset() {
	*x = Signal_ConcurrencyLimitBypass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Signal_ConcurrencyLimitBypass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signal_ConcurrencyLimitBypass) ProtoMessage() {}

func (x *Signal_ConcurrencyLimitBypass) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signal_ConcurrencyLimitBypass.ProtoReflect.Descriptor instead.
func (*Signal_ConcurrencyLimitBypass) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{41, 4}
}

type Signal_ForceExecuteTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Signal_ForceExecuteTask) Reset() {
	*x = Signal_ForceExecuteTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Signal_ForceExecuteTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signal_ForceExecuteTask) ProtoMessage() {}

func (x *Signal_ForceExecuteTask) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signal_ForceExecuteTask.ProtoReflect.Descriptor instead.
func (*Signal_ForceExecuteTask) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{41, 5}
}

type ConcurrencyLimitExceeded_Blocker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityId           *Identifier `protobuf:"bytes,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	DesiredStateId     string      `protobuf:"bytes,2,opt,name=desired_state_id,json=desiredStateId,proto3" json:"desired_state_id,omitempty"`
	RootDesiredStateId string      `protobuf:"bytes,3,opt,name=root_desired_state_id,json=rootDesiredStateId,proto3" json:"root_desired_state_id,omitempty"`
	ReleaseId          string      `protobuf:"bytes,4,opt,name=release_id,json=releaseId,proto3" json:"release_id,omitempty"`
	// time since this blocker has held on to its lease. This is *not* the time since this entity has been blocked.
	HeldSinceTimestamp *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=held_since_timestamp,json=heldSinceTimestamp,proto3" json:"held_since_timestamp,omitempty"`
}

func (x *ConcurrencyLimitExceeded_Blocker) Reset() {
	*x = ConcurrencyLimitExceeded_Blocker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConcurrencyLimitExceeded_Blocker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConcurrencyLimitExceeded_Blocker) ProtoMessage() {}

func (x *ConcurrencyLimitExceeded_Blocker) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConcurrencyLimitExceeded_Blocker.ProtoReflect.Descriptor instead.
func (*ConcurrencyLimitExceeded_Blocker) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{46, 0}
}

func (x *ConcurrencyLimitExceeded_Blocker) GetEntityId() *Identifier {
	if x != nil {
		return x.EntityId
	}
	return nil
}

func (x *ConcurrencyLimitExceeded_Blocker) GetDesiredStateId() string {
	if x != nil {
		return x.DesiredStateId
	}
	return ""
}

func (x *ConcurrencyLimitExceeded_Blocker) GetRootDesiredStateId() string {
	if x != nil {
		return x.RootDesiredStateId
	}
	return ""
}

func (x *ConcurrencyLimitExceeded_Blocker) GetReleaseId() string {
	if x != nil {
		return x.ReleaseId
	}
	return ""
}

func (x *ConcurrencyLimitExceeded_Blocker) GetHeldSinceTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.HeldSinceTimestamp
	}
	return nil
}

type ApplyConditionUnsatisfied_InternalMissingApproval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DesiredStateId   string                    `protobuf:"bytes,1,opt,name=desired_state_id,json=desiredStateId,proto3" json:"desired_state_id,omitempty"`
	SignalType       SignalType                `protobuf:"varint,2,opt,name=signal_type,json=signalType,proto3,enum=prodvana.desired_state.model.SignalType" json:"signal_type,omitempty"`
	Topic            string                    `protobuf:"bytes,3,opt,name=topic,proto3" json:"topic,omitempty"`
	RuntimeExtension *RuntimeExtensionMetadata `protobuf:"bytes,4,opt,name=runtime_extension,json=runtimeExtension,proto3" json:"runtime_extension,omitempty"`
	// What created this missing approval?
	// If any of these desired state ids have been superseded,
	// this approval should be considered not current.
	GeneratorDesiredStateIds []string `protobuf:"bytes,5,rep,name=generator_desired_state_ids,json=generatorDesiredStateIds,proto3" json:"generator_desired_state_ids,omitempty"`
}

func (x *ApplyConditionUnsatisfied_InternalMissingApproval) Reset() {
	*x = ApplyConditionUnsatisfied_InternalMissingApproval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyConditionUnsatisfied_InternalMissingApproval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyConditionUnsatisfied_InternalMissingApproval) ProtoMessage() {}

func (x *ApplyConditionUnsatisfied_InternalMissingApproval) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyConditionUnsatisfied_InternalMissingApproval.ProtoReflect.Descriptor instead.
func (*ApplyConditionUnsatisfied_InternalMissingApproval) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{47, 0}
}

func (x *ApplyConditionUnsatisfied_InternalMissingApproval) GetDesiredStateId() string {
	if x != nil {
		return x.DesiredStateId
	}
	return ""
}

func (x *ApplyConditionUnsatisfied_InternalMissingApproval) GetSignalType() SignalType {
	if x != nil {
		return x.SignalType
	}
	return SignalType_SIGNAL_UNKNOWN
}

func (x *ApplyConditionUnsatisfied_InternalMissingApproval) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *ApplyConditionUnsatisfied_InternalMissingApproval) GetRuntimeExtension() *RuntimeExtensionMetadata {
	if x != nil {
		return x.RuntimeExtension
	}
	return nil
}

func (x *ApplyConditionUnsatisfied_InternalMissingApproval) GetGeneratorDesiredStateIds() []string {
	if x != nil {
		return x.GeneratorDesiredStateIds
	}
	return nil
}

type TaskRun_RuntimeObjectMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// light, incomplete metadata about runtime object to identify the object
	Id         *Identifier `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ObjectType string      `protobuf:"bytes,3,opt,name=object_type,json=objectType,proto3" json:"object_type,omitempty"`
	Namespace  string      `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *TaskRun_RuntimeObjectMetadata) Reset() {
	*x = TaskRun_RuntimeObjectMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskRun_RuntimeObjectMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRun_RuntimeObjectMetadata) ProtoMessage() {}

func (x *TaskRun_RuntimeObjectMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRun_RuntimeObjectMetadata.ProtoReflect.Descriptor instead.
func (*TaskRun_RuntimeObjectMetadata) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{50, 0}
}

func (x *TaskRun_RuntimeObjectMetadata) GetId() *Identifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TaskRun_RuntimeObjectMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskRun_RuntimeObjectMetadata) GetObjectType() string {
	if x != nil {
		return x.ObjectType
	}
	return ""
}

func (x *TaskRun_RuntimeObjectMetadata) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type TaskEntityContext_ApplyIdWithVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplyId string `protobuf:"bytes,1,opt,name=apply_id,json=applyId,proto3" json:"apply_id,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// True if it is the version in which the underlying object is converging to.
	Active bool `protobuf:"varint,3,opt,name=active,proto3" json:"active,omitempty"`
	// Did this applyId get successfully applied?
	Successful bool `protobuf:"varint,4,opt,name=successful,proto3" json:"successful,omitempty"`
}

func (x *TaskEntityContext_ApplyIdWithVersion) Reset() {
	*x = TaskEntityContext_ApplyIdWithVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskEntityContext_ApplyIdWithVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskEntityContext_ApplyIdWithVersion) ProtoMessage() {}

func (x *TaskEntityContext_ApplyIdWithVersion) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskEntityContext_ApplyIdWithVersion.ProtoReflect.Descriptor instead.
func (*TaskEntityContext_ApplyIdWithVersion) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{51, 0}
}

func (x *TaskEntityContext_ApplyIdWithVersion) GetApplyId() string {
	if x != nil {
		return x.ApplyId
	}
	return ""
}

func (x *TaskEntityContext_ApplyIdWithVersion) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *TaskEntityContext_ApplyIdWithVersion) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *TaskEntityContext_ApplyIdWithVersion) GetSuccessful() bool {
	if x != nil {
		return x.Successful
	}
	return false
}

var File_prodvana_desired_state_model_desired_state_proto protoreflect.FileDescriptor

var file_prodvana_desired_state_model_desired_state_proto_rawDesc = []byte{
	0x0a, 0x30, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x64, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x64,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x1c, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x76, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x70,
	0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x24, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61,
	0x6e, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x23, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x70,
	0x76, 0x6e, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e,
	0x61, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x23, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x2f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61,
	0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x89,
	0x01, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e,
	0x6b, 0x12, 0x46, 0x0a, 0x09, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x09,
	0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x4a, 0x04,
	0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0xfc, 0x08, 0x0a, 0x09, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x07, 0x72, 0x63, 0x5f, 0x63,
	0x6f, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x06, 0x72, 0x63, 0x43, 0x6f, 0x6e, 0x64, 0x12, 0x61, 0x0a, 0x0f, 0x6d, 0x61,
	0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x0e, 0x6d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x68, 0x0a,
	0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x45, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49,
	0x64, 0x1a, 0xe2, 0x02, 0x0a, 0x1d, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x27,
	0x0a, 0x0f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x66,
	0x0a, 0x31, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f,
	0x73, 0x61, 0x74, 0x69, 0x73, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x2b, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x4f, 0x6e, 0x6c, 0x79, 0x53, 0x61, 0x74, 0x69, 0x73, 0x66, 0x69, 0x65, 0x64,
	0x49, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x6d, 0x0a, 0x0e, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x72, 0x73, 0x1a, 0xb4, 0x02, 0x0a, 0x1d, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x54, 0x61, 0x73, 0x6b, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x72, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61,
	0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x66, 0x75, 0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x6b, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0b, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc3, 0x01, 0x0a, 0x11, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x43, 0x0a, 0x09, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x09, 0x6c, 0x69, 0x66, 0x65,
	0x63, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x48, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x22,
	0x99, 0x01, 0x0a, 0x1e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12,
	0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x58, 0x0a, 0x0a, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61,
	0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4f, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa3, 0x08, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x4d, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x47, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e,
	0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x69, 0x6e, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x04, 0x73,
	0x65, 0x6c, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x52, 0x04, 0x73, 0x65, 0x6c, 0x66, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x72, 0x6f, 0x6f, 0x74, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x57, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x0f, 0x70,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x60,
	0x0a, 0x13, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x8a, 0x01, 0x0a, 0x22, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x20, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x5d, 0x0a,
	0x12, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x1a,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x74,
	0x5f, 0x62, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x16, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74,
	0x42, 0x79, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x1d, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x62, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1a, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x37, 0x0a, 0x18, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x49, 0x6e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x53, 0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x47, 0x72,
	0x61, 0x63, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xd0, 0x02, 0x0a,
	0x11, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x07, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64,
	0x12, 0x53, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61,
	0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22,
	0xa4, 0x01, 0x0a, 0x11, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74,
	0x73, 0x12, 0x49, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e,
	0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xd0, 0x02, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x41, 0x0a, 0x0e, 0x70, 0x75, 0x73, 0x68, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x70, 0x75, 0x73,
	0x68, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x64,
	0x69, 0x72, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x64, 0x69, 0x72, 0x74,
	0x79, 0x12, 0x1c, 0x0a, 0x0a, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x69, 0x6e, 0x5f, 0x75, 0x69, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x6b, 0x69, 0x70, 0x49, 0x6e, 0x55, 0x69, 0x4a,
	0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x52, 0x09, 0x75, 0x6e, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x52, 0x11, 0x75, 0x6e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x79, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x22, 0xfc, 0x05, 0x0a, 0x14, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x04, 0xa8, 0xa6, 0x1f, 0x01, 0x52, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x52, 0x0a, 0x10, 0x72, 0x6f, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x6f,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a,
	0x18, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x16, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x6f, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x47, 0x0a, 0x08, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61,
	0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x12, 0x3f,
	0x0a, 0x1c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x77, 0x6e,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4f, 0x77, 0x6e, 0x65, 0x64, 0x42, 0x79, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12,
	0x40, 0x0a, 0x1c, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x42, 0x14, 0x0a, 0x12, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x22, 0xd3, 0x04, 0x0a, 0x0c, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61,
	0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42,
	0x04, 0xa8, 0xa6, 0x1f, 0x01, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x5d, 0x0a, 0x10, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x50, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x65, 0x0a, 0x13, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x12, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x81,
	0x01, 0x0a, 0x1f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x1c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x22, 0xb2,
	0x03, 0x0a, 0x1c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x3a, 0x0a, 0x18, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x16, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x03, 0x61,
	0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x12,
	0x41, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x52, 0x0a, 0x10, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x0f, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x16, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x1d, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1b, 0x6d, 0x61, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x42, 0x15, 0x0a, 0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x42, 0x14, 0x0a,
	0x12, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x22, 0xdc, 0x02, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61,
	0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42,
	0x04, 0xa8, 0xa6, 0x1f, 0x01, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x46, 0x0a, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x61,
	0x73, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54,
	0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x65, 0x0a, 0x13, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x12, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x4a, 0x04, 0x08, 0x04,
	0x10, 0x05, 0x22, 0xdd, 0x02, 0x0a, 0x13, 0x43, 0x61, 0x6e, 0x61, 0x72, 0x79, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x50, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x61, 0x6e, 0x61, 0x72, 0x79,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x0d,
	0x63, 0x61, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x64, 0x28, 0x00, 0x52, 0x0c,
	0x63, 0x61, 0x6e, 0x61, 0x72, 0x79, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x35, 0x0a, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x15, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x13,
	0x70, 0x61, 0x75, 0x73, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x22, 0x3d, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x41, 0x55, 0x53, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44,
	0x10, 0x03, 0x22, 0xe3, 0x01, 0x0a, 0x16, 0x42, 0x6c, 0x75, 0x65, 0x47, 0x72, 0x65, 0x65, 0x6e,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x53, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x75,
	0x65, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x74, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x43, 0x41, 0x4c, 0x49, 0x4e,
	0x47, 0x5f, 0x55, 0x50, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44,
	0x5f, 0x50, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x43,
	0x41, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09,
	0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x41,
	0x42, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x06, 0x22, 0xc1, 0x04, 0x0a, 0x0d, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5a, 0x0a, 0x0f, 0x63, 0x61,
	0x6e, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x43, 0x61, 0x6e, 0x61, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x63, 0x61, 0x6e, 0x61, 0x72, 0x79, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f,
	0x72, 0x75, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x52, 0x75, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x64, 0x0a, 0x13, 0x62, 0x6c, 0x75, 0x65, 0x5f, 0x67, 0x72, 0x65, 0x65,
	0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x42, 0x6c, 0x75, 0x65, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x11, 0x62, 0x6c, 0x75, 0x65, 0x47, 0x72, 0x65, 0x65,
	0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0x71, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12,
	0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x48, 0x45, 0x41,
	0x4c, 0x54, 0x48, 0x59, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x4e, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x59, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x01,
	0x10, 0x02, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04,
	0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08,
	0x4a, 0x04, 0x08, 0x09, 0x10, 0x0a, 0x4a, 0x04, 0x08, 0x0a, 0x10, 0x0b, 0x22, 0xd9, 0x07, 0x0a,
	0x0c, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x47, 0x0a,
	0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x4b, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x12, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x31, 0x0a, 0x12, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x6c, 0x61,
	0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x04, 0xa8, 0xa6, 0x1f, 0x01, 0x52, 0x0f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x6e,
	0x42, 0x6c, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x1e, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f,
	0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04,
	0xa8, 0xa6, 0x1f, 0x01, 0x52, 0x1a, 0x66, 0x65, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x6e, 0x45,
	0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x62, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x08, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x42, 0x04, 0xa8, 0xa6, 0x1f, 0x01, 0x52, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x6c, 0x0a, 0x15, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x04, 0xa8, 0xa6, 0x1f, 0x01, 0x52, 0x13, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x5d, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x2e,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x04, 0xa8, 0xa6, 0x1f, 0x01, 0x52,
	0x0f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x12, 0x59, 0x0a, 0x0c, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e,
	0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b,
	0x66, 0x65, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x66,
	0x65, 0x74, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x66,
	0x65, 0x74, 0x63, 0x68, 0x65, 0x72, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xa8, 0xa6, 0x1f, 0x01, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x2e, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64,
	0x65, 0x52, 0x09, 0x66, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x08,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x75, 0x6e, 0x42, 0x04, 0xa8, 0xa6, 0x1f, 0x01, 0x52, 0x07, 0x74, 0x61, 0x73,
	0x6b, 0x52, 0x75, 0x6e, 0x22, 0x42, 0x0a, 0x0b, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x44, 0x52, 0x49, 0x46, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a,
	0x09, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x47, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x22, 0xc3, 0x03, 0x0a, 0x1b, 0x52, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x4f, 0x0a, 0x0d, 0x6f, 0x6e, 0x67, 0x6f,
	0x69, 0x6e, 0x67, 0x5f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0c, 0x6f, 0x6e, 0x67,
	0x6f, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x74, 0x63, 0x68, 0x12, 0x5e, 0x0a, 0x15, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x5f, 0x66, 0x65, 0x74,
	0x63, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x66, 0x75, 0x6c, 0x46, 0x65, 0x74, 0x63, 0x68, 0x12, 0x56, 0x0a, 0x11, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08,
	0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x4a,
	0x04, 0x08, 0x06, 0x10, 0x07, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x52, 0x12, 0x66, 0x65, 0x74,
	0x63, 0x68, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x52,
	0x1e, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x6c,
	0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x53,
	0x0a, 0x24, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x6c,
	0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x6c, 0x6f,
	0x62, 0x49, 0x64, 0x22, 0xec, 0x03, 0x0a, 0x1e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2b, 0x0a, 0x0e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04,
	0xa8, 0xa6, 0x1f, 0x01, 0x52, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x5e, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61,
	0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x5b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x47, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x4b, 0x0a, 0x13, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x30, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x56, 0x45,
	0x52, 0x47, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x02, 0x22, 0x87, 0x01, 0x0a, 0x1d, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x12, 0x66, 0x0a, 0x10, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x65,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0e, 0x67, 0x65,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xc7, 0x04, 0x0a,
	0x0c, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x47, 0x0a,
	0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x4b, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x12, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a,
	0x0c, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4f, 0x0a, 0x0d, 0x66, 0x65, 0x74, 0x63,
	0x68, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0c, 0x66, 0x65, 0x74,
	0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2c, 0x0a, 0x0f, 0x68, 0x61, 0x73,
	0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x04, 0xa8, 0xa6, 0x1f, 0x01, 0x52, 0x0d, 0x68, 0x61, 0x73, 0x57, 0x6f, 0x72,
	0x6b, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x72, 0x75, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e,
	0x42, 0x04, 0xa8, 0xa6, 0x1f, 0x01, 0x52, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x22,
	0x44, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43,
	0x4f, 0x4e, 0x56, 0x45, 0x52, 0x47, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x54, 0x52, 0x59, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x52, 0x19, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x22, 0xb9, 0x01, 0x0a, 0x1b, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x4f, 0x0a, 0x0d, 0x6f, 0x6e, 0x67, 0x6f, 0x69, 0x6e,
	0x67, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0c, 0x6f, 0x6e, 0x67, 0x6f, 0x69,
	0x6e, 0x67, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x49, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x22, 0xaa, 0x1a, 0x0a, 0x0d, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x40, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x04, 0xa8, 0xa6, 0x1f, 0x01,
	0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x41,
	0x0a, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x4a, 0x0a, 0x0d, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x0c, 0x66, 0x65, 0x74, 0x63, 0x68, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a,
	0x08, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x50, 0x0a, 0x10, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x08, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x12,
	0x29, 0x0a, 0x10, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x74, 0x69, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x41, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x12, 0x3b, 0x0a, 0x1a, 0x64, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x69,
	0x72, 0x74, 0x79, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x69,
	0x72, 0x74, 0x79, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x1e, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xa8, 0xa6, 0x1f, 0x01, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x65, 0x64, 0x73,
	0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6e, 0x65,
	0x65, 0x64, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x46, 0x0a, 0x0c, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x04, 0xa8,
	0xa6, 0x1f, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x62, 0x75, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x69, 0x0a, 0x11, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x08, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x4d, 0x0a, 0x15, 0x73, 0x74, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x73, 0x74,
	0x65, 0x61, 0x64, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x62,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x49, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x69,
	0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x65,
	0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x1d, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x62, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1a, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x23, 0x0a, 0x0a, 0x72,
	0x61, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x04, 0xa8, 0xa6, 0x1f, 0x01, 0x52, 0x09, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x69, 0x0a, 0x11, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x10, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5c, 0x0a, 0x17, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x75, 0x6e, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x12, 0x49, 0x0a, 0x0d, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x75, 0x6e, 0x12, 0x4b, 0x0a, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x69,
	0x6e, 0x6b, 0x52, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b,
	0x73, 0x12, 0x57, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x2e,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x6f,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x1a, 0xa5, 0x0b, 0x0a, 0x10, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x05, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x05, 0x61, 0x70, 0x70, 0x6c,
	0x79, 0x12, 0x44, 0x0a, 0x05, 0x66, 0x65, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x52, 0x05, 0x66, 0x65, 0x74, 0x63, 0x68, 0x12, 0x49, 0x0a, 0x08, 0x67, 0x65, 0x74, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x76, 0x61, 0x6e, 0x61, 0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x07, 0x67, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x40, 0x0a, 0x0e, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x66, 0x65, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x58, 0x0a, 0x1b, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74,
	0x65, 0x61, 0x64, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x18, 0x66, 0x65, 0x74, 0x63, 0x68, 0x53, 0x74, 0x65, 0x61, 0x64,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x45,
	0x0a, 0x11, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x4b, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e,
	0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x51, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x76, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x5c, 0x0a, 0x0c, 0x66,
	0x65, 0x74, 0x63, 0x68, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x0b, 0x66, 0x65,
	0x74, 0x63, 0x68, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x63, 0x0a, 0x0f, 0x67, 0x65, 0x74,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52,
	0x0d, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x5c,
	0x0a, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52,
	0x0b, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x4f, 0x0a, 0x12,
	0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x10, 0x66, 0x65, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x4f, 0x0a,
	0x12, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x76, 0x61, 0x6e, 0x61, 0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x10, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x54,
	0x0a, 0x15, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x12, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x3b, 0x0a, 0x1a, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x72, 0x65,
	0x74, 0x72, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x05, 0x52, 0x17, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x52,
	0x65, 0x74, 0x72, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x73, 0x12, 0x46, 0x0a, 0x0a, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61,
	0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x09,
	0x66, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x52,
	0x0d, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x30,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x43, 0x43, 0x45, 0x45, 0x44,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02,
	0x22, 0x32, 0x0a, 0x10, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x56, 0x4e, 0x5f, 0x4d, 0x41, 0x4e, 0x41,
	0x47, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x4d, 0x41, 0x4e, 0x41, 0x47,
	0x45, 0x44, 0x10, 0x01, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x0a, 0x4a, 0x04, 0x08, 0x0b, 0x10, 0x0c,
	0x4a, 0x04, 0x08, 0x0e, 0x10, 0x0f, 0x4a, 0x04, 0x08, 0x10, 0x10, 0x11, 0x4a, 0x04, 0x08, 0x11,
	0x10, 0x12, 0x4a, 0x04, 0x08, 0x16, 0x10, 0x17, 0x52, 0x0e, 0x75, 0x6e, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x79, 0x5f, 0x70, 0x6f, 0x64, 0x73, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x52, 0x10, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22,
	0x57, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x45, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x26, 0x0a, 0x0a, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0xaf, 0x01, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61,
	0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x06, 0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x57, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x25, 0x0a, 0x09, 0x45, 0x78, 0x65, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xfb, 0x05, 0x0a, 0x10, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23,
	0x0a, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x13, 0x6d, 0x6f, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x6e, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x6d, 0x6f,
	0x73, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12,
	0x65, 0x0a, 0x1a, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x65, 0x74, 0x63, 0x68,
	0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x17, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x65, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x76, 0x6f, 0x6b,
	0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x65, 0x0a, 0x1a, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x17, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x81, 0x01,
	0x0a, 0x21, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65,
	0x64, 0x52, 0x1e, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x12, 0x60, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52,
	0x12, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x73, 0x12, 0x60, 0x0a, 0x18, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66,
	0x65, 0x74, 0x63, 0x68, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61,
	0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x15,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x65, 0x74, 0x63, 0x68, 0x45, 0x78, 0x65, 0x63,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x60, 0x0a, 0x18, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61,
	0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x15, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x45, 0x78,
	0x65, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xb2, 0x06, 0x0a, 0x13, 0x4b, 0x65, 0x79, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x56, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x4b, 0x65, 0x79, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x6c, 0x61,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78,
	0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x60, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x78, 0x70,
	0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x80, 0x01, 0x0a, 0x1b, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x40, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4b,
	0x65, 0x79, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x52, 0x19, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x07,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0xc7, 0x01, 0x0a, 0x0e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x38, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x3d, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x22,
	0x3b, 0x0a, 0x08, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x4f, 0x4c, 0x4c,
	0x42, 0x41, 0x43, 0x4b, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x22, 0xbf, 0x0a, 0x0a,
	0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x65, 0x0a, 0x15, 0x6b, 0x65, 0x79,
	0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4b, 0x65, 0x79, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x6b, 0x65, 0x79,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x76, 0x0a, 0x1e, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4b, 0x65, 0x79, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x1b, 0x72, 0x6f, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x4b, 0x65, 0x79, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x13, 0x70, 0x72, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61,
	0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x12, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x0f, 0x69, 0x6e, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x75, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x70, 0x61, 0x75, 0x73, 0x65, 0x64, 0x12, 0x60, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61,
	0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x61,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x78,
	0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5e, 0x0a, 0x12, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e,
	0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x6c,
	0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x16, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0xa8, 0xa6, 0x1f, 0x01, 0x52, 0x14, 0x6c, 0x61,
	0x73, 0x74, 0x46, 0x65, 0x74, 0x63, 0x68, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x56, 0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04,
	0xa8, 0xa6, 0x1f, 0x01, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x66, 0x0a, 0x1e, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04,
	0xa8, 0xa6, 0x1f, 0x01, 0x52, 0x1c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x63, 0x0a, 0x1d, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0xa8, 0xa6, 0x1f, 0x01, 0x52, 0x1a, 0x65, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x4e, 0x65, 0x78, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x58, 0x0a, 0x10, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x52, 0x0f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x49, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x5b, 0x0a, 0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xf0,
	0x04, 0x0a, 0x13, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x04, 0xa8, 0xa6,
	0x1f, 0x01, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x4a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5e, 0x0a, 0x09,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x42, 0x04, 0xa8, 0xa6, 0x1f,
	0x01, 0x52, 0x09, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72,
	0x73, 0x1a, 0x8d, 0x02, 0x0a, 0x08, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x30,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x49, 0x0a, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x76, 0x61, 0x6e, 0x61, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4a, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x22, 0xcd, 0x06, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x5f, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x56, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0c,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x54, 0x0a, 0x0e,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x5c, 0x0a, 0x0f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x0e, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x12, 0x50, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61,
	0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x61,
	0x73, 0x6b, 0x12, 0x69, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x5c, 0x0a,
	0x0f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e,
	0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x65, 0x0a, 0x12, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61,
	0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x11, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x22, 0x9b, 0x01, 0x0a, 0x0b, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x56, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e,
	0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x34, 0x0a, 0x0a, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xdb, 0x01, 0x0a, 0x18, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73,
	0x12, 0x5b, 0x0a, 0x1c, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x19, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xd8, 0x04,
	0x0a, 0x0f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x40, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x04, 0xa8, 0xa6, 0x1f, 0x01, 0x52, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x29, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a,
	0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2c, 0x0a,
	0x12, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x55, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a,
	0x0c, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x74,
	0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x73, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x4a, 0x04, 0x08, 0x0a,
	0x10, 0x0b, 0x4a, 0x04, 0x08, 0x0b, 0x10, 0x0c, 0x22, 0xd6, 0x07, 0x0a, 0x13, 0x50, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x40, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x04, 0xa8, 0xa6, 0x1f, 0x01, 0x52, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x63, 0x0a, 0x1b, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x18, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x77, 0x0a, 0x1b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61,
	0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x18, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x45, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x40, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x04, 0x6c, 0x69,
	0x6e, 0x6b, 0x12, 0x47, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x47, 0x0a, 0x11, 0x73,
	0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x10, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x63, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x6f, 0x70,
	0x70, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x17, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x15, 0x66, 0x69, 0x72, 0x73, 0x74, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xa1, 0x01,
	0x0a, 0x0a, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x4c, 0x49, 0x46,
	0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x55, 0x43, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x5f,
	0x4f, 0x4e, 0x43, 0x45, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x55, 0x43, 0x43, 0x45, 0x45,
	0x44, 0x45, 0x44, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x49, 0x4d, 0x45, 0x44, 0x5f, 0x4f, 0x55, 0x54, 0x10,
	0x04, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0b, 0x0a,
	0x07, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x41,
	0x4e, 0x55, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x42, 0x59, 0x50, 0x41, 0x53, 0x53, 0x45, 0x44, 0x10,
	0x07, 0x22, 0x87, 0x03, 0x0a, 0x1a, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x57, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x62, 0x75, 0x67, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x4b, 0x0a, 0x13, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x5d, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x41, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x17,
	0x0a, 0x13, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x22, 0x8f, 0x06, 0x0a, 0x14,
	0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x04, 0xa8, 0xa6, 0x1f, 0x01,
	0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x41, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5d, 0x0a, 0x17, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x54, 0x0a, 0x18, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x5e,
	0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x7c,
	0x0a, 0x22, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1f, 0x6c, 0x61, 0x73,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x43, 0x0a, 0x1e,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xb2, 0x07,
	0x0a, 0x16, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e,
	0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x04,
	0xa8, 0xa6, 0x1f, 0x01, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x41, 0x0a, 0x08, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x32, 0x0a, 0x15, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x09, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61,
	0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x09,
	0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x6f, 0x6e, 0x67,
	0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x75, 0x6e, 0x52, 0x0a, 0x6f, 0x6e, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x52, 0x75,
	0x6e, 0x12, 0x42, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x0f,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x52, 0x08, 0x6c, 0x61, 0x73,
	0x74, 0x52, 0x75, 0x6e, 0x73, 0x12, 0x54, 0x0a, 0x18, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x5e, 0x0a, 0x15, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x7c, 0x0a, 0x22, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61,
	0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x78, 0x70,
	0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1f, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x78, 0x70,
	0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x43, 0x0a, 0x1e, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1b, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x48, 0x0a, 0x0a, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x4a, 0x04, 0x08, 0x0d, 0x10, 0x0e, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0xde, 0x08, 0x0a, 0x06, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x3c, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x6d, 0x0a, 0x12, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61,
	0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x11, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x64, 0x0a, 0x11, 0x70, 0x72,
	0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61,
	0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x70, 0x61, 0x73, 0x73, 0x48, 0x00, 0x52, 0x10,
	0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x70, 0x61, 0x73, 0x73,
	0x12, 0x7d, 0x0a, 0x1a, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x18, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12,
	0x71, 0x0a, 0x16, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x39, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x79, 0x70, 0x61, 0x73, 0x73, 0x48, 0x00, 0x52, 0x14, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x79, 0x70, 0x61,
	0x73, 0x73, 0x12, 0x77, 0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x79, 0x70, 0x61, 0x73,
	0x73, 0x48, 0x00, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x79, 0x70, 0x61, 0x73, 0x73, 0x12, 0x65, 0x0a, 0x12, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x73,
	0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61,
	0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x46, 0x6f,
	0x72, 0x63, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x00,
	0x52, 0x10, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x1a, 0x5b, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x50, 0x72,
	0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x66, 0x75, 0x6c, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x1a,
	0x12, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x70,
	0x61, 0x73, 0x73, 0x1a, 0x8e, 0x01, 0x0a, 0x18, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x6e, 0x42, 0x6c,
	0x6f, 0x62, 0x49, 0x64, 0x1a, 0x35, 0x0a, 0x14, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x79, 0x70, 0x61, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x73, 0x1a, 0x18, 0x0a, 0x16, 0x43,
	0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42,
	0x79, 0x70, 0x61, 0x73, 0x73, 0x1a, 0x12, 0x0a, 0x10, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x22, 0x48, 0x0a, 0x08, 0x44, 0x65, 0x62, 0x75, 0x67, 0x4c, 0x6f, 0x67, 0x12,
	0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6c,
	0x6f, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x22, 0xa2, 0x01,
	0x0a, 0x18, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x51, 0x0a, 0x06, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x33, 0x0a,
	0x16, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x49, 0x64, 0x22, 0xac, 0x01, 0x0a, 0x14, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x65, 0x0a, 0x11, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e,
	0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00,
	0x52, 0x10, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x22, 0x9b, 0x02, 0x0a, 0x0f, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12,
	0x49, 0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x12, 0x63, 0x0a, 0x11, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x10, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x22,
	0xff, 0x04, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x09,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x5a, 0x0a, 0x08,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f,
	0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x78,
	0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x08,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x64,
	0x1a, 0x9a, 0x02, 0x0a, 0x07, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x09,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x31, 0x0a,
	0x15, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x6f,
	0x6f, 0x74, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12,
	0x4c, 0x0a, 0x14, 0x68, 0x65, 0x6c, 0x64, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x68, 0x65, 0x6c, 0x64, 0x53,
	0x69, 0x6e, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4a, 0x04, 0x08,
	0x02, 0x10, 0x03, 0x52, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64,
	0x73, 0x22, 0xe6, 0x04, 0x0a, 0x19, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x73, 0x61, 0x74, 0x69, 0x73, 0x66, 0x69, 0x65, 0x64, 0x12,
	0x7c, 0x0a, 0x10, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x73, 0x61, 0x74, 0x69, 0x73, 0x66, 0x69,
	0x65, 0x64, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x76, 0x0a,
	0x1a, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x48, 0x00, 0x52, 0x18, 0x63, 0x6f, 0x6e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x63,
	0x65, 0x65, 0x64, 0x65, 0x64, 0x1a, 0xc8, 0x02, 0x0a, 0x17, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x0b, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x63, 0x0a, 0x11,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61,
	0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x10, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x3d, 0x0a, 0x1b, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x64,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x18, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x73,
	0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x5f, 0x0a, 0x15, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x46, 0x0a, 0x0a, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61,
	0x6e, 0x61, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x2e, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x09, 0x66, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x48, 0x0a, 0x10, 0x43,
	0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x49, 0x64, 0x22, 0xac, 0x0d, 0x0a, 0x07, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75,
	0x6e, 0x12, 0x42, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x60, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x12, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x61,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x4a, 0x0a, 0x0d, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x0c, 0x73, 0x65, 0x65, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x0a,
	0x10, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x47, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x4b, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x42, 0x79, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x49, 0x64, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x65, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12,
	0x75, 0x0a, 0x18, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3b, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x16,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x73, 0x12, 0x4a, 0x0a, 0x12, 0x70, 0x76, 0x6e, 0x5f, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x70, 0x76,
	0x6e, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x52, 0x10, 0x70, 0x76, 0x6e, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x12, 0x4d, 0x0a, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x52, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x74, 0x72, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65,
	0x78, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x12, 0x72, 0x65, 0x74, 0x72, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x78, 0x69, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x74, 0x72, 0x79, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x74, 0x72, 0x79, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x41, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x05, 0x70,
	0x68, 0x61, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0d, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0c, 0x66, 0x65, 0x74, 0x63, 0x68, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x6c, 0x0a, 0x18, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61,
	0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x15, 0x66, 0x65,
	0x74, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x61, 0x73, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x68, 0x61,
	0x73, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x12, 0x63,
	0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61,
	0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x49, 0x64, 0x1a, 0xa4, 0x01, 0x0a, 0x15, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x38, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x25, 0x0a, 0x05,
	0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45,
	0x44, 0x10, 0x01, 0x4a, 0x04, 0x08, 0x14, 0x10, 0x15, 0x52, 0x19, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x22, 0xa6, 0x05, 0x0a, 0x11, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x53, 0x0a, 0x12, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x75, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e,
	0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x52, 0x10, 0x6c,
	0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x52, 0x75, 0x6e, 0x12,
	0x40, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x52, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x75,
	0x6e, 0x12, 0x37, 0x0a, 0x18, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x66, 0x75, 0x6c, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x66, 0x75, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x12, 0x7d, 0x0a, 0x19, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x5f, 0x69, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x57, 0x69, 0x74, 0x68, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x16, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x77, 0x0a, 0x16, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x5f, 0x69, 0x64, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x49, 0x64, 0x57, 0x69, 0x74, 0x68, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x57, 0x69, 0x74, 0x68, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x1a, 0x81, 0x01, 0x0a, 0x12, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x57, 0x69,
	0x74, 0x68, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x66, 0x75, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x04,
	0x10, 0x05, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x52, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x52, 0x10, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x16, 0x69, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e,
	0x5f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0x86, 0x01,
	0x0a, 0x17, 0x53, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x6f, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x4f, 0x0a, 0x24, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x5f,
	0x70, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x61, 0x6e,
	0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x21, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x50, 0x72, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2a, 0xcb, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x02, 0x12,
	0x11, 0x0a, 0x0d, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x4f, 0x42,
	0x4a, 0x45, 0x43, 0x54, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c,
	0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x43,
	0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15,
	0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43,
	0x48, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x52, 0x4f, 0x54, 0x45,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12,
	0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49,
	0x4f, 0x4e, 0x10, 0x09, 0x2a, 0x9a, 0x01, 0x0a, 0x0e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54,
	0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x55, 0x53, 0x54, 0x4f,
	0x4d, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x52, 0x45, 0x5f, 0x41, 0x50, 0x50,
	0x52, 0x4f, 0x56, 0x41, 0x4c, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08,
	0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x4f,
	0x53, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x5f, 0x54, 0x41, 0x53, 0x4b,
	0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x41, 0x53, 0x4b, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x4f, 0x53, 0x54, 0x5f,
	0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x10,
	0x05, 0x2a, 0xa9, 0x02, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x47, 0x49, 0x4e, 0x47, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x47, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x52,
	0x4f, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x04, 0x12, 0x0f, 0x0a,
	0x0b, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x05, 0x12, 0x13,
	0x0a, 0x0f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x42, 0x41, 0x43,
	0x4b, 0x10, 0x0c, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x10, 0x06, 0x12,
	0x10, 0x0a, 0x0c, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x10,
	0x07, 0x12, 0x19, 0x0a, 0x15, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x45,
	0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08,
	0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x44, 0x10, 0x09, 0x12, 0x1b, 0x0a, 0x17, 0x57, 0x41,
	0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x41, 0x50, 0x50,
	0x52, 0x4f, 0x56, 0x41, 0x4c, 0x10, 0x0a, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x44, 0x10, 0x0b, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x10,
	0x0d, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x54,
	0x5f, 0x44, 0x45, 0x53, 0x49, 0x52, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x0e,
	0x12, 0x0b, 0x0a, 0x07, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x0f, 0x2a, 0x6f, 0x0a,
	0x0c, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a,
	0x0a, 0x53, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a,
	0x0d, 0x53, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x47, 0x49, 0x4e, 0x47, 0x10, 0x01,
	0x12, 0x10, 0x0a, 0x0c, 0x53, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x47, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0x03, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x53, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f,
	0x46, 0x4f, 0x52, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x10, 0x04, 0x2a, 0x9f,
	0x03, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x0e, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x4f, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x50, 0x50,
	0x4c, 0x59, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x55,
	0x4e, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x59, 0x5f, 0x50, 0x4f, 0x44, 0x53, 0x10, 0x03, 0x12,
	0x11, 0x0a, 0x0d, 0x55, 0x50, 0x44, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x4f, 0x44, 0x53,
	0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49,
	0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x55, 0x4e, 0x54,
	0x49, 0x4d, 0x45, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x07, 0x12, 0x1c, 0x0a,
	0x18, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c,
	0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c, 0x53,
	0x54, 0x55, 0x43, 0x4b, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x10, 0x09, 0x12, 0x11, 0x0a,
	0x0d, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x52, 0x54, 0x59, 0x10, 0x0a,
	0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x4f, 0x42, 0x4a, 0x45,
	0x43, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x4e, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10,
	0x0b, 0x12, 0x1a, 0x0a, 0x16, 0x4c, 0x49, 0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x43,
	0x48, 0x45, 0x43, 0x4b, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x0d, 0x12, 0x1b, 0x0a,
	0x17, 0x4c, 0x49, 0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b,
	0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x0e, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4f,
	0x4e, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f,
	0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x0f, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x45,
	0x4c, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x44, 0x45,
	0x50, 0x45, 0x4e, 0x44, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x55, 0x4e, 0x4d, 0x45, 0x54, 0x10, 0x10,
	0x2a, 0x72, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17,
	0x0a, 0x13, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x49, 0x4e, 0x47, 0x10,
	0x01, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x45, 0x44, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45,
	0x54, 0x45, 0x10, 0x03, 0x2a, 0x96, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4e, 0x44,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x17, 0x0a,
	0x13, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x41, 0x54, 0x49, 0x53,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x42, 0x59, 0x50,
	0x41, 0x53, 0x53, 0x45, 0x44, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4e, 0x44, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x2a, 0x3f, 0x0a,
	0x14, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x85,
	0x01, 0x0a, 0x10, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x54, 0x41,
	0x53, 0x4b, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16,
	0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x46, 0x55, 0x4c, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x55, 0x53, 0x54,
	0x4f, 0x4d, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x52, 0x45, 0x54, 0x52, 0x49, 0x45, 0x53, 0x5f,
	0x45, 0x58, 0x48, 0x41, 0x55, 0x53, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x43,
	0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x44,
	0x5f, 0x4f, 0x55, 0x54, 0x10, 0x03, 0x2a, 0xdd, 0x01, 0x0a, 0x0a, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x45, 0x4c,
	0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x01, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x42, 0x59, 0x50, 0x41, 0x53, 0x53, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x55, 0x4e, 0x54,
	0x49, 0x4d, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x50,
	0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x49, 0x47, 0x4e,
	0x41, 0x4c, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56,
	0x41, 0x4c, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x42, 0x59, 0x50, 0x41, 0x53, 0x53, 0x10, 0x05,
	0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4e, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f,
	0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x42, 0x59, 0x50, 0x41, 0x53, 0x53, 0x10, 0x06, 0x12, 0x16,
	0x0a, 0x12, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x45, 0x5f,
	0x54, 0x41, 0x53, 0x4b, 0x10, 0x07, 0x42, 0x58, 0x5a, 0x56, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x67, 0x6f,
	0x2f, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x64, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_prodvana_desired_state_model_desired_state_proto_rawDescOnce sync.Once
	file_prodvana_desired_state_model_desired_state_proto_rawDescData = file_prodvana_desired_state_model_desired_state_proto_rawDesc
)

func file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP() []byte {
	file_prodvana_desired_state_model_desired_state_proto_rawDescOnce.Do(func() {
		file_prodvana_desired_state_model_desired_state_proto_rawDescData = protoimpl.X.CompressGZIP(file_prodvana_desired_state_model_desired_state_proto_rawDescData)
	})
	return file_prodvana_desired_state_model_desired_state_proto_rawDescData
}

var file_prodvana_desired_state_model_desired_state_proto_enumTypes = make([]protoimpl.EnumInfo, 22)
var file_prodvana_desired_state_model_desired_state_proto_msgTypes = make([]protoimpl.MessageInfo, 71)
var file_prodvana_desired_state_model_desired_state_proto_goTypes = []interface{}{
	(Type)(0),                                                  // 0: prodvana.desired_state.model.Type
	(CustomTaskType)(0),                                        // 1: prodvana.desired_state.model.CustomTaskType
	(Status)(0),                                                // 2: prodvana.desired_state.model.Status
	(SimpleStatus)(0),                                          // 3: prodvana.desired_state.model.SimpleStatus
	(StatusReason)(0),                                          // 4: prodvana.desired_state.model.StatusReason
	(ActionType)(0),                                            // 5: prodvana.desired_state.model.ActionType
	(ConditionStatus)(0),                                       // 6: prodvana.desired_state.model.ConditionStatus
	(ManualApprovalStatus)(0),                                  // 7: prodvana.desired_state.model.ManualApprovalStatus
	(CustomTaskStatus)(0),                                      // 8: prodvana.desired_state.model.CustomTaskStatus
	(SignalType)(0),                                            // 9: prodvana.desired_state.model.SignalType
	(CanaryProgressState_Status)(0),                            // 10: prodvana.desired_state.model.CanaryProgressState.Status
	(BlueGreenProgressState_Status)(0),                         // 11: prodvana.desired_state.model.BlueGreenProgressState.Status
	(DeliveryState_Status)(0),                                  // 12: prodvana.desired_state.model.DeliveryState.Status
	(FetchDetails_FetchStatus)(0),                              // 13: prodvana.desired_state.model.FetchDetails.FetchStatus
	(RuntimeExtensionGetInfoDetails_Status)(0),                 // 14: prodvana.desired_state.model.RuntimeExtensionGetInfoDetails.Status
	(ApplyDetails_ApplyStatus)(0),                              // 15: prodvana.desired_state.model.ApplyDetails.ApplyStatus
	(RuntimeObject_Status)(0),                                  // 16: prodvana.desired_state.model.RuntimeObject.Status
	(RuntimeObject_ManagementStatus)(0),                        // 17: prodvana.desired_state.model.RuntimeObject.ManagementStatus
	(KeyDeliveryDecision_Decision)(0),                          // 18: prodvana.desired_state.model.KeyDeliveryDecision.Decision
	(ProtectionLinkState_StopReason)(0),                        // 19: prodvana.desired_state.model.ProtectionLinkState.StopReason
	(ProtectionAttachmentResult_Status)(0),                     // 20: prodvana.desired_state.model.ProtectionAttachmentResult.Status
	(TaskRun_Phase)(0),                                         // 21: prodvana.desired_state.model.TaskRun.Phase
	(*ProtectionLink)(nil),                                     // 22: prodvana.desired_state.model.ProtectionLink
	(*Condition)(nil),                                          // 23: prodvana.desired_state.model.Condition
	(*DeliveryExtension)(nil),                                  // 24: prodvana.desired_state.model.DeliveryExtension
	(*ProtectionAttachmentDefinition)(nil),                     // 25: prodvana.desired_state.model.ProtectionAttachmentDefinition
	(*Identifier)(nil),                                         // 26: prodvana.desired_state.model.Identifier
	(*ConcurrencyLimit)(nil),                                   // 27: prodvana.desired_state.model.ConcurrencyLimit
	(*Metadata)(nil),                                           // 28: prodvana.desired_state.model.Metadata
	(*StatusExplanation)(nil),                                  // 29: prodvana.desired_state.model.StatusExplanation
	(*ActionExplanation)(nil),                                  // 30: prodvana.desired_state.model.ActionExplanation
	(*Version)(nil),                                            // 31: prodvana.desired_state.model.Version
	(*ServiceInstanceState)(nil),                               // 32: prodvana.desired_state.model.ServiceInstanceState
	(*ServiceState)(nil),                                       // 33: prodvana.desired_state.model.ServiceState
	(*ServiceInstanceLabelSelector)(nil),                       // 34: prodvana.desired_state.model.ServiceInstanceLabelSelector
	(*ServiceGroupState)(nil),                                  // 35: prodvana.desired_state.model.ServiceGroupState
	(*CanaryProgressState)(nil),                                // 36: prodvana.desired_state.model.CanaryProgressState
	(*BlueGreenProgressState)(nil),                             // 37: prodvana.desired_state.model.BlueGreenProgressState
	(*DeliveryState)(nil),                                      // 38: prodvana.desired_state.model.DeliveryState
	(*FetchDetails)(nil),                                       // 39: prodvana.desired_state.model.FetchDetails
	(*RuntimeExtensionFetchOutput)(nil),                        // 40: prodvana.desired_state.model.RuntimeExtensionFetchOutput
	(*RuntimeExtensionGetInfoOutputContent)(nil),               // 41: prodvana.desired_state.model.RuntimeExtensionGetInfoOutputContent
	(*RuntimeExtensionGetInfoDetails)(nil),                     // 42: prodvana.desired_state.model.RuntimeExtensionGetInfoDetails
	(*RuntimeExtensionGetInfoOutput)(nil),                      // 43: prodvana.desired_state.model.RuntimeExtensionGetInfoOutput
	(*ApplyDetails)(nil),                                       // 44: prodvana.desired_state.model.ApplyDetails
	(*RuntimeExtensionApplyOutput)(nil),                        // 45: prodvana.desired_state.model.RuntimeExtensionApplyOutput
	(*RuntimeObject)(nil),                                      // 46: prodvana.desired_state.model.RuntimeObject
	(*ConditionState)(nil),                                     // 47: prodvana.desired_state.model.ConditionState
	(*ApplyError)(nil),                                         // 48: prodvana.desired_state.model.ApplyError
	(*ProtectionFailure)(nil),                                  // 49: prodvana.desired_state.model.ProtectionFailure
	(*ExecError)(nil),                                          // 50: prodvana.desired_state.model.ExecError
	(*NotificationInfo)(nil),                                   // 51: prodvana.desired_state.model.NotificationInfo
	(*KeyDeliveryDecision)(nil),                                // 52: prodvana.desired_state.model.KeyDeliveryDecision
	(*ControlState)(nil),                                       // 53: prodvana.desired_state.model.ControlState
	(*ManualApprovalState)(nil),                                // 54: prodvana.desired_state.model.ManualApprovalState
	(*State)(nil),                                              // 55: prodvana.desired_state.model.State
	(*Annotations)(nil),                                        // 56: prodvana.desired_state.model.Annotations
	(*CustomTaskExecutionState)(nil),                           // 57: prodvana.desired_state.model.CustomTaskExecutionState
	(*CustomTaskState)(nil),                                    // 58: prodvana.desired_state.model.CustomTaskState
	(*ProtectionLinkState)(nil),                                // 59: prodvana.desired_state.model.ProtectionLinkState
	(*ProtectionAttachmentResult)(nil),                         // 60: prodvana.desired_state.model.ProtectionAttachmentResult
	(*ProtectionAttachment)(nil),                               // 61: prodvana.desired_state.model.ProtectionAttachment
	(*DeliveryExtensionState)(nil),                             // 62: prodvana.desired_state.model.DeliveryExtensionState
	(*Signal)(nil),                                             // 63: prodvana.desired_state.model.Signal
	(*DebugLog)(nil),                                           // 64: prodvana.desired_state.model.DebugLog
	(*RuntimeExtensionMetadata)(nil),                           // 65: prodvana.desired_state.model.RuntimeExtensionMetadata
	(*ManualApprovalConfig)(nil),                               // 66: prodvana.desired_state.model.ManualApprovalConfig
	(*MissingApproval)(nil),                                    // 67: prodvana.desired_state.model.MissingApproval
	(*ConcurrencyLimitExceeded)(nil),                           // 68: prodvana.desired_state.model.ConcurrencyLimitExceeded
	(*ApplyConditionUnsatisfied)(nil),                          // 69: prodvana.desired_state.model.ApplyConditionUnsatisfied
	(*FetchTaskStartDetails)(nil),                              // 70: prodvana.desired_state.model.FetchTaskStartDetails
	(*ConcurrencyLease)(nil),                                   // 71: prodvana.desired_state.model.ConcurrencyLease
	(*TaskRun)(nil),                                            // 72: prodvana.desired_state.model.TaskRun
	(*TaskEntityContext)(nil),                                  // 73: prodvana.desired_state.model.TaskEntityContext
	(*SetDesiredStateMetadata)(nil),                            // 74: prodvana.desired_state.model.SetDesiredStateMetadata
	(*Condition_ReleaseChannelStableCondition)(nil),            // 75: prodvana.desired_state.model.Condition.ReleaseChannelStableCondition
	(*Condition_ManualApproval)(nil),                           // 76: prodvana.desired_state.model.Condition.ManualApproval
	(*Condition_CustomTaskSuccessfulCondition)(nil),            // 77: prodvana.desired_state.model.Condition.CustomTaskSuccessfulCondition
	(*Condition_CustomTaskSuccessfulCondition_Protection)(nil), // 78: prodvana.desired_state.model.Condition.CustomTaskSuccessfulCondition.Protection
	(*RuntimeObject_RuntimeExtension)(nil),                     // 79: prodvana.desired_state.model.RuntimeObject.RuntimeExtension
	(*KeyDeliveryDecision_EntitySnapshot)(nil),                 // 80: prodvana.desired_state.model.KeyDeliveryDecision.EntitySnapshot
	(*ManualApprovalState_Approver)(nil),                       // 81: prodvana.desired_state.model.ManualApprovalState.Approver
	(*Annotations_Annotation)(nil),                             // 82: prodvana.desired_state.model.Annotations.Annotation
	(*Signal_DeliveryPromotionConfig)(nil),                     // 83: prodvana.desired_state.model.Signal.DeliveryPromotionConfig
	(*Signal_ProtectionBypass)(nil),                            // 84: prodvana.desired_state.model.Signal.ProtectionBypass
	(*Signal_RuntimeExtensionApproval)(nil),                    // 85: prodvana.desired_state.model.Signal.RuntimeExtensionApproval
	(*Signal_ReleaseChannelBypass)(nil),                        // 86: prodvana.desired_state.model.Signal.ReleaseChannelBypass
	(*Signal_ConcurrencyLimitBypass)(nil),                      // 87: prodvana.desired_state.model.Signal.ConcurrencyLimitBypass
	(*Signal_ForceExecuteTask)(nil),                            // 88: prodvana.desired_state.model.Signal.ForceExecuteTask
	(*ConcurrencyLimitExceeded_Blocker)(nil),                   // 89: prodvana.desired_state.model.ConcurrencyLimitExceeded.Blocker
	(*ApplyConditionUnsatisfied_InternalMissingApproval)(nil),  // 90: prodvana.desired_state.model.ApplyConditionUnsatisfied.InternalMissingApproval
	(*TaskRun_RuntimeObjectMetadata)(nil),                      // 91: prodvana.desired_state.model.TaskRun.RuntimeObjectMetadata
	(*TaskEntityContext_ApplyIdWithVersion)(nil),               // 92: prodvana.desired_state.model.TaskEntityContext.ApplyIdWithVersion
	(*protection.ProtectionLifecycle)(nil),                     // 93: prodvana.protection.ProtectionLifecycle
	(common_config.TaskLifecycle)(0),                           // 94: prodvana.common_config.TaskLifecycle
	(*durationpb.Duration)(nil),                                // 95: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),                              // 96: google.protobuf.Timestamp
	(*extensions.ExternalObject)(nil),                          // 97: prodvana.runtimes.extensions.ExternalObject
	(extensions.FetchMode)(0),                                  // 98: prodvana.runtimes.extensions.FetchMode
	(*runtimes.DebugEvent)(nil),                                // 99: prodvana.runtimes.DebugEvent
	(*common_config.ExternalLink)(nil),                         // 100: prodvana.common_config.ExternalLink
	(*common_config.ProgramConfig)(nil),                        // 101: prodvana.common_config.ProgramConfig
	(*common_config.RetryConfig)(nil),                          // 102: prodvana.common_config.RetryConfig
	(*pvn_wrapper.Output)(nil),                                 // 103: prodvana.pvn_wrapper.Output
	(*environment.CompiledExtensionCommand)(nil),               // 104: prodvana.environment.CompiledExtensionCommand
	(*common_config.ParameterDefinition)(nil),                  // 105: prodvana.common_config.ParameterDefinition
	(*common_config.ParameterValue)(nil),                       // 106: prodvana.common_config.ParameterValue
	(environment.ExtensionType)(0),                             // 107: prodvana.environment.ExtensionType
	(*environment.RetryPolicy)(nil),                            // 108: prodvana.environment.RetryPolicy
	(version.Source)(0),                                        // 109: prodvana.version.Source
	(*version.SourceMetadata)(nil),                             // 110: prodvana.version.SourceMetadata
}
var file_prodvana_desired_state_model_desired_state_proto_depIdxs = []int32{
	93,  // 0: prodvana.desired_state.model.ProtectionLink.lifecycle:type_name -> prodvana.protection.ProtectionLifecycle
	75,  // 1: prodvana.desired_state.model.Condition.rc_cond:type_name -> prodvana.desired_state.model.Condition.ReleaseChannelStableCondition
	76,  // 2: prodvana.desired_state.model.Condition.manual_approval:type_name -> prodvana.desired_state.model.Condition.ManualApproval
	77,  // 3: prodvana.desired_state.model.Condition.custom_task:type_name -> prodvana.desired_state.model.Condition.CustomTaskSuccessfulCondition
	94,  // 4: prodvana.desired_state.model.DeliveryExtension.lifecycle:type_name -> prodvana.common_config.TaskLifecycle
	26,  // 5: prodvana.desired_state.model.DeliveryExtension.references:type_name -> prodvana.desired_state.model.Identifier
	0,   // 6: prodvana.desired_state.model.Identifier.type:type_name -> prodvana.desired_state.model.Type
	23,  // 7: prodvana.desired_state.model.Metadata.preconditions:type_name -> prodvana.desired_state.model.Condition
	23,  // 8: prodvana.desired_state.model.Metadata.invariants:type_name -> prodvana.desired_state.model.Condition
	26,  // 9: prodvana.desired_state.model.Metadata.self:type_name -> prodvana.desired_state.model.Identifier
	22,  // 10: prodvana.desired_state.model.Metadata.protection_links:type_name -> prodvana.desired_state.model.ProtectionLink
	24,  // 11: prodvana.desired_state.model.Metadata.delivery_extensions:type_name -> prodvana.desired_state.model.DeliveryExtension
	25,  // 12: prodvana.desired_state.model.Metadata.convergence_protection_attachments:type_name -> prodvana.desired_state.model.ProtectionAttachmentDefinition
	27,  // 13: prodvana.desired_state.model.Metadata.concurrency_limits:type_name -> prodvana.desired_state.model.ConcurrencyLimit
	95,  // 14: prodvana.desired_state.model.Metadata.convergence_grace_period:type_name -> google.protobuf.Duration
	26,  // 15: prodvana.desired_state.model.StatusExplanation.subject:type_name -> prodvana.desired_state.model.Identifier
	26,  // 16: prodvana.desired_state.model.StatusExplanation.service_instance:type_name -> prodvana.desired_state.model.Identifier
	4,   // 17: prodvana.desired_state.model.StatusExplanation.reason:type_name -> prodvana.desired_state.model.StatusReason
	96,  // 18: prodvana.desired_state.model.ActionExplanation.ts:type_name -> google.protobuf.Timestamp
	5,   // 19: prodvana.desired_state.model.ActionExplanation.action_type:type_name -> prodvana.desired_state.model.ActionType
	96,  // 20: prodvana.desired_state.model.Version.push_timestamp:type_name -> google.protobuf.Timestamp
	28,  // 21: prodvana.desired_state.model.ServiceInstanceState.meta:type_name -> prodvana.desired_state.model.Metadata
	31,  // 22: prodvana.desired_state.model.ServiceInstanceState.versions:type_name -> prodvana.desired_state.model.Version
	31,  // 23: prodvana.desired_state.model.ServiceInstanceState.rollback_version:type_name -> prodvana.desired_state.model.Version
	38,  // 24: prodvana.desired_state.model.ServiceInstanceState.delivery:type_name -> prodvana.desired_state.model.DeliveryState
	28,  // 25: prodvana.desired_state.model.ServiceState.meta:type_name -> prodvana.desired_state.model.Metadata
	32,  // 26: prodvana.desired_state.model.ServiceState.release_channels:type_name -> prodvana.desired_state.model.ServiceInstanceState
	58,  // 27: prodvana.desired_state.model.ServiceState.custom_tasks:type_name -> prodvana.desired_state.model.CustomTaskState
	62,  // 28: prodvana.desired_state.model.ServiceState.delivery_extensions:type_name -> prodvana.desired_state.model.DeliveryExtensionState
	34,  // 29: prodvana.desired_state.model.ServiceState.release_channel_label_selectors:type_name -> prodvana.desired_state.model.ServiceInstanceLabelSelector
	31,  // 30: prodvana.desired_state.model.ServiceInstanceLabelSelector.versions:type_name -> prodvana.desired_state.model.Version
	31,  // 31: prodvana.desired_state.model.ServiceInstanceLabelSelector.rollback_version:type_name -> prodvana.desired_state.model.Version
	28,  // 32: prodvana.desired_state.model.ServiceGroupState.meta:type_name -> prodvana.desired_state.model.Metadata
	33,  // 33: prodvana.desired_state.model.ServiceGroupState.services:type_name -> prodvana.desired_state.model.ServiceState
	58,  // 34: prodvana.desired_state.model.ServiceGroupState.custom_tasks:type_name -> prodvana.desired_state.model.CustomTaskState
	62,  // 35: prodvana.desired_state.model.ServiceGroupState.delivery_extensions:type_name -> prodvana.desired_state.model.DeliveryExtensionState
	10,  // 36: prodvana.desired_state.model.CanaryProgressState.status:type_name -> prodvana.desired_state.model.CanaryProgressState.Status
	95,  // 37: prodvana.desired_state.model.CanaryProgressState.duration:type_name -> google.protobuf.Duration
	96,  // 38: prodvana.desired_state.model.CanaryProgressState.pause_start_timestamp:type_name -> google.protobuf.Timestamp
	11,  // 39: prodvana.desired_state.model.BlueGreenProgressState.status:type_name -> prodvana.desired_state.model.BlueGreenProgressState.Status
	12,  // 40: prodvana.desired_state.model.DeliveryState.status:type_name -> prodvana.desired_state.model.DeliveryState.Status
	36,  // 41: prodvana.desired_state.model.DeliveryState.canary_progress:type_name -> prodvana.desired_state.model.CanaryProgressState
	37,  // 42: prodvana.desired_state.model.DeliveryState.blue_green_progress:type_name -> prodvana.desired_state.model.BlueGreenProgressState
	96,  // 43: prodvana.desired_state.model.FetchDetails.started_timestamp:type_name -> google.protobuf.Timestamp
	96,  // 44: prodvana.desired_state.model.FetchDetails.completed_timestamp:type_name -> google.protobuf.Timestamp
	31,  // 45: prodvana.desired_state.model.FetchDetails.versions:type_name -> prodvana.desired_state.model.Version
	16,  // 46: prodvana.desired_state.model.FetchDetails.runtime_object_status:type_name -> prodvana.desired_state.model.RuntimeObject.Status
	97,  // 47: prodvana.desired_state.model.FetchDetails.external_objects:type_name -> prodvana.runtimes.extensions.ExternalObject
	13,  // 48: prodvana.desired_state.model.FetchDetails.fetch_status:type_name -> prodvana.desired_state.model.FetchDetails.FetchStatus
	98,  // 49: prodvana.desired_state.model.FetchDetails.fetch_mode:type_name -> prodvana.runtimes.extensions.FetchMode
	72,  // 50: prodvana.desired_state.model.FetchDetails.task_run:type_name -> prodvana.desired_state.model.TaskRun
	39,  // 51: prodvana.desired_state.model.RuntimeExtensionFetchOutput.ongoing_fetch:type_name -> prodvana.desired_state.model.FetchDetails
	39,  // 52: prodvana.desired_state.model.RuntimeExtensionFetchOutput.last_successful_fetch:type_name -> prodvana.desired_state.model.FetchDetails
	39,  // 53: prodvana.desired_state.model.RuntimeExtensionFetchOutput.last_failed_fetch:type_name -> prodvana.desired_state.model.FetchDetails
	41,  // 54: prodvana.desired_state.model.RuntimeExtensionGetInfoDetails.contents:type_name -> prodvana.desired_state.model.RuntimeExtensionGetInfoOutputContent
	14,  // 55: prodvana.desired_state.model.RuntimeExtensionGetInfoDetails.status:type_name -> prodvana.desired_state.model.RuntimeExtensionGetInfoDetails.Status
	96,  // 56: prodvana.desired_state.model.RuntimeExtensionGetInfoDetails.started_timestamp:type_name -> google.protobuf.Timestamp
	96,  // 57: prodvana.desired_state.model.RuntimeExtensionGetInfoDetails.completed_timestamp:type_name -> google.protobuf.Timestamp
	42,  // 58: prodvana.desired_state.model.RuntimeExtensionGetInfoOutput.get_info_details:type_name -> prodvana.desired_state.model.RuntimeExtensionGetInfoDetails
	96,  // 59: prodvana.desired_state.model.ApplyDetails.started_timestamp:type_name -> google.protobuf.Timestamp
	96,  // 60: prodvana.desired_state.model.ApplyDetails.completed_timestamp:type_name -> google.protobuf.Timestamp
	15,  // 61: prodvana.desired_state.model.ApplyDetails.apply_status:type_name -> prodvana.desired_state.model.ApplyDetails.ApplyStatus
	39,  // 62: prodvana.desired_state.model.ApplyDetails.fetch_details:type_name -> prodvana.desired_state.model.FetchDetails
	72,  // 63: prodvana.desired_state.model.ApplyDetails.task_run:type_name -> prodvana.desired_state.model.TaskRun
	44,  // 64: prodvana.desired_state.model.RuntimeExtensionApplyOutput.ongoing_apply:type_name -> prodvana.desired_state.model.ApplyDetails
	44,  // 65: prodvana.desired_state.model.RuntimeExtensionApplyOutput.last_apply:type_name -> prodvana.desired_state.model.ApplyDetails
	28,  // 66: prodvana.desired_state.model.RuntimeObject.meta:type_name -> prodvana.desired_state.model.Metadata
	31,  // 67: prodvana.desired_state.model.RuntimeObject.versions:type_name -> prodvana.desired_state.model.Version
	31,  // 68: prodvana.desired_state.model.RuntimeObject.fetch_version:type_name -> prodvana.desired_state.model.Version
	16,  // 69: prodvana.desired_state.model.RuntimeObject.status:type_name -> prodvana.desired_state.model.RuntimeObject.Status
	31,  // 70: prodvana.desired_state.model.RuntimeObject.rollback_version:type_name -> prodvana.desired_state.model.Version
	38,  // 71: prodvana.desired_state.model.RuntimeObject.delivery:type_name -> prodvana.desired_state.model.DeliveryState
	99,  // 72: prodvana.desired_state.model.RuntimeObject.debug_events:type_name -> prodvana.runtimes.DebugEvent
	79,  // 73: prodvana.desired_state.model.RuntimeObject.runtime_extension:type_name -> prodvana.desired_state.model.RuntimeObject.RuntimeExtension
	95,  // 74: prodvana.desired_state.model.RuntimeObject.interval:type_name -> google.protobuf.Duration
	95,  // 75: prodvana.desired_state.model.RuntimeObject.steady_state_interval:type_name -> google.protobuf.Duration
	17,  // 76: prodvana.desired_state.model.RuntimeObject.management_status:type_name -> prodvana.desired_state.model.RuntimeObject.ManagementStatus
	72,  // 77: prodvana.desired_state.model.RuntimeObject.last_completed_task_run:type_name -> prodvana.desired_state.model.TaskRun
	72,  // 78: prodvana.desired_state.model.RuntimeObject.last_task_run:type_name -> prodvana.desired_state.model.TaskRun
	100, // 79: prodvana.desired_state.model.RuntimeObject.external_links:type_name -> prodvana.common_config.ExternalLink
	97,  // 80: prodvana.desired_state.model.RuntimeObject.external_objects:type_name -> prodvana.runtimes.extensions.ExternalObject
	6,   // 81: prodvana.desired_state.model.ConditionState.status:type_name -> prodvana.desired_state.model.ConditionStatus
	26,  // 82: prodvana.desired_state.model.ProtectionFailure.link_id:type_name -> prodvana.desired_state.model.Identifier
	20,  // 83: prodvana.desired_state.model.ProtectionFailure.status:type_name -> prodvana.desired_state.model.ProtectionAttachmentResult.Status
	96,  // 84: prodvana.desired_state.model.NotificationInfo.most_recent_failure:type_name -> google.protobuf.Timestamp
	48,  // 85: prodvana.desired_state.model.NotificationInfo.runtime_fetch_invoke_error:type_name -> prodvana.desired_state.model.ApplyError
	48,  // 86: prodvana.desired_state.model.NotificationInfo.runtime_apply_invoke_error:type_name -> prodvana.desired_state.model.ApplyError
	68,  // 87: prodvana.desired_state.model.NotificationInfo.concurrency_limit_exceeded_errors:type_name -> prodvana.desired_state.model.ConcurrencyLimitExceeded
	49,  // 88: prodvana.desired_state.model.NotificationInfo.protection_failures:type_name -> prodvana.desired_state.model.ProtectionFailure
	50,  // 89: prodvana.desired_state.model.NotificationInfo.runtime_fetch_exec_error:type_name -> prodvana.desired_state.model.ExecError
	50,  // 90: prodvana.desired_state.model.NotificationInfo.runtime_apply_exec_error:type_name -> prodvana.desired_state.model.ExecError
	18,  // 91: prodvana.desired_state.model.KeyDeliveryDecision.decision:type_name -> prodvana.desired_state.model.KeyDeliveryDecision.Decision
	2,   // 92: prodvana.desired_state.model.KeyDeliveryDecision.status:type_name -> prodvana.desired_state.model.Status
	29,  // 93: prodvana.desired_state.model.KeyDeliveryDecision.status_explanations:type_name -> prodvana.desired_state.model.StatusExplanation
	80,  // 94: prodvana.desired_state.model.KeyDeliveryDecision.status_explanation_entities:type_name -> prodvana.desired_state.model.KeyDeliveryDecision.EntitySnapshot
	55,  // 95: prodvana.desired_state.model.KeyDeliveryDecision.current:type_name -> prodvana.desired_state.model.State
	96,  // 96: prodvana.desired_state.model.KeyDeliveryDecision.timestamp:type_name -> google.protobuf.Timestamp
	52,  // 97: prodvana.desired_state.model.ControlState.key_delivery_decision:type_name -> prodvana.desired_state.model.KeyDeliveryDecision
	52,  // 98: prodvana.desired_state.model.ControlState.rollback_key_delivery_decision:type_name -> prodvana.desired_state.model.KeyDeliveryDecision
	47,  // 99: prodvana.desired_state.model.ControlState.precondition_states:type_name -> prodvana.desired_state.model.ConditionState
	47,  // 100: prodvana.desired_state.model.ControlState.invariant_states:type_name -> prodvana.desired_state.model.ConditionState
	29,  // 101: prodvana.desired_state.model.ControlState.status_explanations:type_name -> prodvana.desired_state.model.StatusExplanation
	30,  // 102: prodvana.desired_state.model.ControlState.action_explanation:type_name -> prodvana.desired_state.model.ActionExplanation
	96,  // 103: prodvana.desired_state.model.ControlState.last_fetched_timestamp:type_name -> google.protobuf.Timestamp
	96,  // 104: prodvana.desired_state.model.ControlState.last_applied_timestamp:type_name -> google.protobuf.Timestamp
	96,  // 105: prodvana.desired_state.model.ControlState.deployment_completed_timestamp:type_name -> google.protobuf.Timestamp
	96,  // 106: prodvana.desired_state.model.ControlState.expected_next_apply_timestamp:type_name -> google.protobuf.Timestamp
	67,  // 107: prodvana.desired_state.model.ControlState.missing_approval:type_name -> prodvana.desired_state.model.MissingApproval
	48,  // 108: prodvana.desired_state.model.ControlState.apply_error:type_name -> prodvana.desired_state.model.ApplyError
	51,  // 109: prodvana.desired_state.model.ControlState.notification_info:type_name -> prodvana.desired_state.model.NotificationInfo
	28,  // 110: prodvana.desired_state.model.ManualApprovalState.meta:type_name -> prodvana.desired_state.model.Metadata
	7,   // 111: prodvana.desired_state.model.ManualApprovalState.status:type_name -> prodvana.desired_state.model.ManualApprovalStatus
	81,  // 112: prodvana.desired_state.model.ManualApprovalState.approvers:type_name -> prodvana.desired_state.model.ManualApprovalState.Approver
	33,  // 113: prodvana.desired_state.model.State.service:type_name -> prodvana.desired_state.model.ServiceState
	32,  // 114: prodvana.desired_state.model.State.service_instance:type_name -> prodvana.desired_state.model.ServiceInstanceState
	35,  // 115: prodvana.desired_state.model.State.service_group:type_name -> prodvana.desired_state.model.ServiceGroupState
	46,  // 116: prodvana.desired_state.model.State.runtime_object:type_name -> prodvana.desired_state.model.RuntimeObject
	54,  // 117: prodvana.desired_state.model.State.manual_approval:type_name -> prodvana.desired_state.model.ManualApprovalState
	58,  // 118: prodvana.desired_state.model.State.custom_task:type_name -> prodvana.desired_state.model.CustomTaskState
	61,  // 119: prodvana.desired_state.model.State.protection_attachment:type_name -> prodvana.desired_state.model.ProtectionAttachment
	59,  // 120: prodvana.desired_state.model.State.protection_link:type_name -> prodvana.desired_state.model.ProtectionLinkState
	62,  // 121: prodvana.desired_state.model.State.delivery_extension:type_name -> prodvana.desired_state.model.DeliveryExtensionState
	82,  // 122: prodvana.desired_state.model.Annotations.annotations:type_name -> prodvana.desired_state.model.Annotations.Annotation
	8,   // 123: prodvana.desired_state.model.CustomTaskExecutionState.status:type_name -> prodvana.desired_state.model.CustomTaskStatus
	96,  // 124: prodvana.desired_state.model.CustomTaskExecutionState.latest_attempt_end_timestamp:type_name -> google.protobuf.Timestamp
	28,  // 125: prodvana.desired_state.model.CustomTaskState.meta:type_name -> prodvana.desired_state.model.Metadata
	101, // 126: prodvana.desired_state.model.CustomTaskState.program:type_name -> prodvana.common_config.ProgramConfig
	57,  // 127: prodvana.desired_state.model.CustomTaskState.task_state:type_name -> prodvana.desired_state.model.CustomTaskExecutionState
	102, // 128: prodvana.desired_state.model.CustomTaskState.retry_config:type_name -> prodvana.common_config.RetryConfig
	28,  // 129: prodvana.desired_state.model.ProtectionLinkState.meta:type_name -> prodvana.desired_state.model.Metadata
	2,   // 130: prodvana.desired_state.model.ProtectionLinkState.last_seen_attachment_status:type_name -> prodvana.desired_state.model.Status
	60,  // 131: prodvana.desired_state.model.ProtectionLinkState.last_seen_attachment_result:type_name -> prodvana.desired_state.model.ProtectionAttachmentResult
	6,   // 132: prodvana.desired_state.model.ProtectionLinkState.status:type_name -> prodvana.desired_state.model.ConditionStatus
	22,  // 133: prodvana.desired_state.model.ProtectionLinkState.link:type_name -> prodvana.desired_state.model.ProtectionLink
	96,  // 134: prodvana.desired_state.model.ProtectionLinkState.started_timestamp:type_name -> google.protobuf.Timestamp
	96,  // 135: prodvana.desired_state.model.ProtectionLinkState.stopped_timestamp:type_name -> google.protobuf.Timestamp
	19,  // 136: prodvana.desired_state.model.ProtectionLinkState.stopped_reason:type_name -> prodvana.desired_state.model.ProtectionLinkState.StopReason
	96,  // 137: prodvana.desired_state.model.ProtectionLinkState.first_success_timestamp:type_name -> google.protobuf.Timestamp
	20,  // 138: prodvana.desired_state.model.ProtectionAttachmentResult.status:type_name -> prodvana.desired_state.model.ProtectionAttachmentResult.Status
	96,  // 139: prodvana.desired_state.model.ProtectionAttachmentResult.execution_timestamp:type_name -> google.protobuf.Timestamp
	28,  // 140: prodvana.desired_state.model.ProtectionAttachment.meta:type_name -> prodvana.desired_state.model.Metadata
	31,  // 141: prodvana.desired_state.model.ProtectionAttachment.versions:type_name -> prodvana.desired_state.model.Version
	31,  // 142: prodvana.desired_state.model.ProtectionAttachment.last_completed_versions:type_name -> prodvana.desired_state.model.Version
	96,  // 143: prodvana.desired_state.model.ProtectionAttachment.last_completed_timestamp:type_name -> google.protobuf.Timestamp
	3,   // 144: prodvana.desired_state.model.ProtectionAttachment.last_completed_status:type_name -> prodvana.desired_state.model.SimpleStatus
	29,  // 145: prodvana.desired_state.model.ProtectionAttachment.last_completed_status_explanations:type_name -> prodvana.desired_state.model.StatusExplanation
	60,  // 146: prodvana.desired_state.model.ProtectionAttachment.result:type_name -> prodvana.desired_state.model.ProtectionAttachmentResult
	28,  // 147: prodvana.desired_state.model.DeliveryExtensionState.meta:type_name -> prodvana.desired_state.model.Metadata
	31,  // 148: prodvana.desired_state.model.DeliveryExtensionState.versions:type_name -> prodvana.desired_state.model.Version
	94,  // 149: prodvana.desired_state.model.DeliveryExtensionState.lifecycle:type_name -> prodvana.common_config.TaskLifecycle
	72,  // 150: prodvana.desired_state.model.DeliveryExtensionState.ongoing_run:type_name -> prodvana.desired_state.model.TaskRun
	72,  // 151: prodvana.desired_state.model.DeliveryExtensionState.last_runs:type_name -> prodvana.desired_state.model.TaskRun
	96,  // 152: prodvana.desired_state.model.DeliveryExtensionState.last_completed_timestamp:type_name -> google.protobuf.Timestamp
	3,   // 153: prodvana.desired_state.model.DeliveryExtensionState.last_completed_status:type_name -> prodvana.desired_state.model.SimpleStatus
	29,  // 154: prodvana.desired_state.model.DeliveryExtensionState.last_completed_status_explanations:type_name -> prodvana.desired_state.model.StatusExplanation
	26,  // 155: prodvana.desired_state.model.DeliveryExtensionState.references:type_name -> prodvana.desired_state.model.Identifier
	9,   // 156: prodvana.desired_state.model.Signal.type:type_name -> prodvana.desired_state.model.SignalType
	83,  // 157: prodvana.desired_state.model.Signal.delivery_promotion:type_name -> prodvana.desired_state.model.Signal.DeliveryPromotionConfig
	84,  // 158: prodvana.desired_state.model.Signal.protection_bypass:type_name -> prodvana.desired_state.model.Signal.ProtectionBypass
	85,  // 159: prodvana.desired_state.model.Signal.runtime_extension_approval:type_name -> prodvana.desired_state.model.Signal.RuntimeExtensionApproval
	86,  // 160: prodvana.desired_state.model.Signal.release_channel_bypass:type_name -> prodvana.desired_state.model.Signal.ReleaseChannelBypass
	87,  // 161: prodvana.desired_state.model.Signal.concurrency_limit_bypass:type_name -> prodvana.desired_state.model.Signal.ConcurrencyLimitBypass
	88,  // 162: prodvana.desired_state.model.Signal.force_execute_task:type_name -> prodvana.desired_state.model.Signal.ForceExecuteTask
	96,  // 163: prodvana.desired_state.model.DebugLog.ts:type_name -> google.protobuf.Timestamp
	40,  // 164: prodvana.desired_state.model.RuntimeExtensionMetadata.output:type_name -> prodvana.desired_state.model.RuntimeExtensionFetchOutput
	65,  // 165: prodvana.desired_state.model.ManualApprovalConfig.runtime_extension:type_name -> prodvana.desired_state.model.RuntimeExtensionMetadata
	9,   // 166: prodvana.desired_state.model.MissingApproval.signal_type:type_name -> prodvana.desired_state.model.SignalType
	65,  // 167: prodvana.desired_state.model.MissingApproval.runtime_extension:type_name -> prodvana.desired_state.model.RuntimeExtensionMetadata
	26,  // 168: prodvana.desired_state.model.ConcurrencyLimitExceeded.entity_id:type_name -> prodvana.desired_state.model.Identifier
	89,  // 169: prodvana.desired_state.model.ConcurrencyLimitExceeded.blockers:type_name -> prodvana.desired_state.model.ConcurrencyLimitExceeded.Blocker
	90,  // 170: prodvana.desired_state.model.ApplyConditionUnsatisfied.missing_approval:type_name -> prodvana.desired_state.model.ApplyConditionUnsatisfied.InternalMissingApproval
	68,  // 171: prodvana.desired_state.model.ApplyConditionUnsatisfied.concurrency_limit_exceeded:type_name -> prodvana.desired_state.model.ConcurrencyLimitExceeded
	98,  // 172: prodvana.desired_state.model.FetchTaskStartDetails.fetch_mode:type_name -> prodvana.runtimes.extensions.FetchMode
	3,   // 173: prodvana.desired_state.model.TaskRun.status:type_name -> prodvana.desired_state.model.SimpleStatus
	29,  // 174: prodvana.desired_state.model.TaskRun.status_explanations:type_name -> prodvana.desired_state.model.StatusExplanation
	31,  // 175: prodvana.desired_state.model.TaskRun.seen_versions:type_name -> prodvana.desired_state.model.Version
	96,  // 176: prodvana.desired_state.model.TaskRun.created_timestamp:type_name -> google.protobuf.Timestamp
	96,  // 177: prodvana.desired_state.model.TaskRun.started_timestamp:type_name -> google.protobuf.Timestamp
	96,  // 178: prodvana.desired_state.model.TaskRun.completed_timestamp:type_name -> google.protobuf.Timestamp
	91,  // 179: prodvana.desired_state.model.TaskRun.runtime_object_metadatas:type_name -> prodvana.desired_state.model.TaskRun.RuntimeObjectMetadata
	103, // 180: prodvana.desired_state.model.TaskRun.pvn_wrapper_output:type_name -> prodvana.pvn_wrapper.Output
	26,  // 181: prodvana.desired_state.model.TaskRun.task_entities:type_name -> prodvana.desired_state.model.Identifier
	21,  // 182: prodvana.desired_state.model.TaskRun.phase:type_name -> prodvana.desired_state.model.TaskRun.Phase
	39,  // 183: prodvana.desired_state.model.TaskRun.fetch_details:type_name -> prodvana.desired_state.model.FetchDetails
	70,  // 184: prodvana.desired_state.model.TaskRun.fetch_task_start_details:type_name -> prodvana.desired_state.model.FetchTaskStartDetails
	71,  // 185: prodvana.desired_state.model.TaskRun.concurrency_leases:type_name -> prodvana.desired_state.model.ConcurrencyLease
	72,  // 186: prodvana.desired_state.model.TaskEntityContext.last_completed_run:type_name -> prodvana.desired_state.model.TaskRun
	72,  // 187: prodvana.desired_state.model.TaskEntityContext.last_run:type_name -> prodvana.desired_state.model.TaskRun
	92,  // 188: prodvana.desired_state.model.TaskEntityContext.apply_id_version_override:type_name -> prodvana.desired_state.model.TaskEntityContext.ApplyIdWithVersion
	92,  // 189: prodvana.desired_state.model.TaskEntityContext.apply_id_with_versions:type_name -> prodvana.desired_state.model.TaskEntityContext.ApplyIdWithVersion
	78,  // 190: prodvana.desired_state.model.Condition.CustomTaskSuccessfulCondition.protection:type_name -> prodvana.desired_state.model.Condition.CustomTaskSuccessfulCondition.Protection
	1,   // 191: prodvana.desired_state.model.Condition.CustomTaskSuccessfulCondition.Protection.task_type:type_name -> prodvana.desired_state.model.CustomTaskType
	104, // 192: prodvana.desired_state.model.RuntimeObject.RuntimeExtension.apply:type_name -> prodvana.environment.CompiledExtensionCommand
	104, // 193: prodvana.desired_state.model.RuntimeObject.RuntimeExtension.fetch:type_name -> prodvana.environment.CompiledExtensionCommand
	104, // 194: prodvana.desired_state.model.RuntimeObject.RuntimeExtension.get_info:type_name -> prodvana.environment.CompiledExtensionCommand
	95,  // 195: prodvana.desired_state.model.RuntimeObject.RuntimeExtension.fetch_interval:type_name -> google.protobuf.Duration
	95,  // 196: prodvana.desired_state.model.RuntimeObject.RuntimeExtension.fetch_steady_state_interval:type_name -> google.protobuf.Duration
	95,  // 197: prodvana.desired_state.model.RuntimeObject.RuntimeExtension.get_info_interval:type_name -> google.protobuf.Duration
	105, // 198: prodvana.desired_state.model.RuntimeObject.RuntimeExtension.parameters:type_name -> prodvana.common_config.ParameterDefinition
	106, // 199: prodvana.desired_state.model.RuntimeObject.RuntimeExtension.parameter_values:type_name -> prodvana.common_config.ParameterValue
	107, // 200: prodvana.desired_state.model.RuntimeObject.RuntimeExtension.type:type_name -> prodvana.environment.ExtensionType
	40,  // 201: prodvana.desired_state.model.RuntimeObject.RuntimeExtension.fetch_output:type_name -> prodvana.desired_state.model.RuntimeExtensionFetchOutput
	43,  // 202: prodvana.desired_state.model.RuntimeObject.RuntimeExtension.get_info_output:type_name -> prodvana.desired_state.model.RuntimeExtensionGetInfoOutput
	45,  // 203: prodvana.desired_state.model.RuntimeObject.RuntimeExtension.apply_output:type_name -> prodvana.desired_state.model.RuntimeExtensionApplyOutput
	108, // 204: prodvana.desired_state.model.RuntimeObject.RuntimeExtension.fetch_retry_policy:type_name -> prodvana.environment.RetryPolicy
	108, // 205: prodvana.desired_state.model.RuntimeObject.RuntimeExtension.apply_retry_policy:type_name -> prodvana.environment.RetryPolicy
	108, // 206: prodvana.desired_state.model.RuntimeObject.RuntimeExtension.get_info_retry_policy:type_name -> prodvana.environment.RetryPolicy
	98,  // 207: prodvana.desired_state.model.RuntimeObject.RuntimeExtension.fetch_mode:type_name -> prodvana.runtimes.extensions.FetchMode
	26,  // 208: prodvana.desired_state.model.KeyDeliveryDecision.EntitySnapshot.id:type_name -> prodvana.desired_state.model.Identifier
	2,   // 209: prodvana.desired_state.model.KeyDeliveryDecision.EntitySnapshot.status:type_name -> prodvana.desired_state.model.Status
	55,  // 210: prodvana.desired_state.model.KeyDeliveryDecision.EntitySnapshot.current:type_name -> prodvana.desired_state.model.State
	109, // 211: prodvana.desired_state.model.ManualApprovalState.Approver.source:type_name -> prodvana.version.Source
	110, // 212: prodvana.desired_state.model.ManualApprovalState.Approver.source_metadata:type_name -> prodvana.version.SourceMetadata
	7,   // 213: prodvana.desired_state.model.ManualApprovalState.Approver.status:type_name -> prodvana.desired_state.model.ManualApprovalStatus
	96,  // 214: prodvana.desired_state.model.ManualApprovalState.Approver.timestamp:type_name -> google.protobuf.Timestamp
	96,  // 215: prodvana.desired_state.model.Signal.RuntimeExtensionApproval.timestamp:type_name -> google.protobuf.Timestamp
	26,  // 216: prodvana.desired_state.model.ConcurrencyLimitExceeded.Blocker.entity_id:type_name -> prodvana.desired_state.model.Identifier
	96,  // 217: prodvana.desired_state.model.ConcurrencyLimitExceeded.Blocker.held_since_timestamp:type_name -> google.protobuf.Timestamp
	9,   // 218: prodvana.desired_state.model.ApplyConditionUnsatisfied.InternalMissingApproval.signal_type:type_name -> prodvana.desired_state.model.SignalType
	65,  // 219: prodvana.desired_state.model.ApplyConditionUnsatisfied.InternalMissingApproval.runtime_extension:type_name -> prodvana.desired_state.model.RuntimeExtensionMetadata
	26,  // 220: prodvana.desired_state.model.TaskRun.RuntimeObjectMetadata.id:type_name -> prodvana.desired_state.model.Identifier
	221, // [221:221] is the sub-list for method output_type
	221, // [221:221] is the sub-list for method input_type
	221, // [221:221] is the sub-list for extension type_name
	221, // [221:221] is the sub-list for extension extendee
	0,   // [0:221] is the sub-list for field type_name
}

func init() { file_prodvana_desired_state_model_desired_state_proto_init() }
func file_prodvana_desired_state_model_desired_state_proto_init() {
	if File_prodvana_desired_state_model_desired_state_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtectionLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeliveryExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtectionAttachmentDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConcurrencyLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusExplanation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionExplanation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Version); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceInstanceState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceInstanceLabelSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceGroupState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CanaryProgressState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlueGreenProgressState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeliveryState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuntimeExtensionFetchOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuntimeExtensionGetInfoOutputContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuntimeExtensionGetInfoDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuntimeExtensionGetInfoOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuntimeExtensionApplyOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuntimeObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtectionFailure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyDeliveryDecision); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManualApprovalState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Annotations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomTaskExecutionState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomTaskState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtectionLinkState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtectionAttachmentResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtectionAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeliveryExtensionState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Signal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebugLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuntimeExtensionMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManualApprovalConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MissingApproval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConcurrencyLimitExceeded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyConditionUnsatisfied); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchTaskStartDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConcurrencyLease); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskRun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskEntityContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDesiredStateMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition_ReleaseChannelStableCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition_ManualApproval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition_CustomTaskSuccessfulCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition_CustomTaskSuccessfulCondition_Protection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuntimeObject_RuntimeExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyDeliveryDecision_EntitySnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManualApprovalState_Approver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Annotations_Annotation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Signal_DeliveryPromotionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Signal_ProtectionBypass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Signal_RuntimeExtensionApproval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Signal_ReleaseChannelBypass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Signal_ConcurrencyLimitBypass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Signal_ForceExecuteTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConcurrencyLimitExceeded_Blocker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyConditionUnsatisfied_InternalMissingApproval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskRun_RuntimeObjectMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskEntityContext_ApplyIdWithVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_prodvana_desired_state_model_desired_state_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Condition_RcCond)(nil),
		(*Condition_ManualApproval_)(nil),
		(*Condition_CustomTask)(nil),
	}
	file_prodvana_desired_state_model_desired_state_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*ServiceInstanceState_RollbackVersion)(nil),
		(*ServiceInstanceState_ComputeRollbackVersion)(nil),
	}
	file_prodvana_desired_state_model_desired_state_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*ServiceInstanceLabelSelector_ReleaseChannelSelector)(nil),
		(*ServiceInstanceLabelSelector_All)(nil),
		(*ServiceInstanceLabelSelector_RollbackVersion)(nil),
		(*ServiceInstanceLabelSelector_ComputeRollbackVersion)(nil),
	}
	file_prodvana_desired_state_model_desired_state_proto_msgTypes[33].OneofWrappers = []interface{}{
		(*State_Service)(nil),
		(*State_ServiceInstance)(nil),
		(*State_ServiceGroup)(nil),
		(*State_RuntimeObject)(nil),
		(*State_ManualApproval)(nil),
		(*State_CustomTask)(nil),
		(*State_ProtectionAttachment)(nil),
		(*State_ProtectionLink)(nil),
		(*State_DeliveryExtension)(nil),
	}
	file_prodvana_desired_state_model_desired_state_proto_msgTypes[41].OneofWrappers = []interface{}{
		(*Signal_DeliveryPromotion)(nil),
		(*Signal_ProtectionBypass_)(nil),
		(*Signal_RuntimeExtensionApproval_)(nil),
		(*Signal_ReleaseChannelBypass_)(nil),
		(*Signal_ConcurrencyLimitBypass_)(nil),
		(*Signal_ForceExecuteTask_)(nil),
	}
	file_prodvana_desired_state_model_desired_state_proto_msgTypes[44].OneofWrappers = []interface{}{
		(*ManualApprovalConfig_RuntimeExtension)(nil),
	}
	file_prodvana_desired_state_model_desired_state_proto_msgTypes[47].OneofWrappers = []interface{}{
		(*ApplyConditionUnsatisfied_MissingApproval)(nil),
		(*ApplyConditionUnsatisfied_ConcurrencyLimitExceeded)(nil),
	}
	file_prodvana_desired_state_model_desired_state_proto_msgTypes[55].OneofWrappers = []interface{}{
		(*Condition_CustomTaskSuccessfulCondition_Protection_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_prodvana_desired_state_model_desired_state_proto_rawDesc,
			NumEnums:      22,
			NumMessages:   71,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_prodvana_desired_state_model_desired_state_proto_goTypes,
		DependencyIndexes: file_prodvana_desired_state_model_desired_state_proto_depIdxs,
		EnumInfos:         file_prodvana_desired_state_model_desired_state_proto_enumTypes,
		MessageInfos:      file_prodvana_desired_state_model_desired_state_proto_msgTypes,
	}.Build()
	File_prodvana_desired_state_model_desired_state_proto = out.File
	file_prodvana_desired_state_model_desired_state_proto_rawDesc = nil
	file_prodvana_desired_state_model_desired_state_proto_goTypes = nil
	file_prodvana_desired_state_model_desired_state_proto_depIdxs = nil
}
