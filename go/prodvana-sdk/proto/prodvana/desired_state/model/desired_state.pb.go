// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.1
// 	protoc        v3.21.10
// source: prodvana/desired_state/model/desired_state.proto

package model

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	common_config "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/common_config"
	environment "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/environment"
	protection "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/protection"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Type int32

const (
	Type_UNKNOWN               Type = 0
	Type_SERVICE               Type = 1
	Type_SERVICE_INSTANCE      Type = 2
	Type_SERVICE_GROUP         Type = 3
	Type_RUNTIME_OBJECT        Type = 4
	Type_MANUAL_APPROVAL       Type = 5
	Type_CUSTOM_TASK           Type = 6
	Type_PROTECTION_ATTACHMENT Type = 7
	Type_PROTECTION_LINK       Type = 8
	Type_DELIVERY_EXTENSION    Type = 9
)

// Enum value maps for Type.
var (
	Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "SERVICE",
		2: "SERVICE_INSTANCE",
		3: "SERVICE_GROUP",
		4: "RUNTIME_OBJECT",
		5: "MANUAL_APPROVAL",
		6: "CUSTOM_TASK",
		7: "PROTECTION_ATTACHMENT",
		8: "PROTECTION_LINK",
		9: "DELIVERY_EXTENSION",
	}
	Type_value = map[string]int32{
		"UNKNOWN":               0,
		"SERVICE":               1,
		"SERVICE_INSTANCE":      2,
		"SERVICE_GROUP":         3,
		"RUNTIME_OBJECT":        4,
		"MANUAL_APPROVAL":       5,
		"CUSTOM_TASK":           6,
		"PROTECTION_ATTACHMENT": 7,
		"PROTECTION_LINK":       8,
		"DELIVERY_EXTENSION":    9,
	}
)

func (x Type) Enum() *Type {
	p := new(Type)
	*p = x
	return p
}

func (x Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Type) Descriptor() protoreflect.EnumDescriptor {
	return file_prodvana_desired_state_model_desired_state_proto_enumTypes[0].Descriptor()
}

func (Type) Type() protoreflect.EnumType {
	return &file_prodvana_desired_state_model_desired_state_proto_enumTypes[0]
}

func (x Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Type.Descriptor instead.
func (Type) EnumDescriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{0}
}

type CustomTaskType int32

const (
	CustomTaskType_CUSTOM_TASK_TYPE_UNKNOWN CustomTaskType = 0
	// Runs before everything else. May wait for any dependent RCs to be stable.
	CustomTaskType_PRE_APPROVAL_TASK CustomTaskType = 1
	// Approval tasks, manual or automated. Must wait for all PRE_APPROVAL_TASK to be satisfied.
	CustomTaskType_APPROVAL CustomTaskType = 2
	// Runs after approval, just before service push.
	CustomTaskType_POST_APPROVAL_TASK CustomTaskType = 3
	// Runs as long as service push is in progress.
	CustomTaskType_DEPLOYMENT_TASK CustomTaskType = 4
	// Runs after service push succeeds (pods are replaced and healthy, ...), before declaring the service CONVERGED.
	CustomTaskType_POST_DEPLOYMENT_TASK CustomTaskType = 5
)

// Enum value maps for CustomTaskType.
var (
	CustomTaskType_name = map[int32]string{
		0: "CUSTOM_TASK_TYPE_UNKNOWN",
		1: "PRE_APPROVAL_TASK",
		2: "APPROVAL",
		3: "POST_APPROVAL_TASK",
		4: "DEPLOYMENT_TASK",
		5: "POST_DEPLOYMENT_TASK",
	}
	CustomTaskType_value = map[string]int32{
		"CUSTOM_TASK_TYPE_UNKNOWN": 0,
		"PRE_APPROVAL_TASK":        1,
		"APPROVAL":                 2,
		"POST_APPROVAL_TASK":       3,
		"DEPLOYMENT_TASK":          4,
		"POST_DEPLOYMENT_TASK":     5,
	}
)

func (x CustomTaskType) Enum() *CustomTaskType {
	p := new(CustomTaskType)
	*p = x
	return p
}

func (x CustomTaskType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CustomTaskType) Descriptor() protoreflect.EnumDescriptor {
	return file_prodvana_desired_state_model_desired_state_proto_enumTypes[1].Descriptor()
}

func (CustomTaskType) Type() protoreflect.EnumType {
	return &file_prodvana_desired_state_model_desired_state_proto_enumTypes[1]
}

func (x CustomTaskType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CustomTaskType.Descriptor instead.
func (CustomTaskType) EnumDescriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{1}
}

type Status int32

const (
	Status_UNKNOWN_STATUS          Status = 0
	Status_CONVERGING              Status = 1
	Status_CONVERGED               Status = 2
	Status_FAILED                  Status = 3
	Status_ROLLING_BACK            Status = 4
	Status_ROLLED_BACK             Status = 5
	Status_FAILED_ROLLBACK         Status = 12
	Status_PAUSED                  Status = 6
	Status_CHILD_PAUSED            Status = 7 // entity itself not paused, but one of its children is paused, so it is not making any progress
	Status_WAITING_PRECONDITIONS   Status = 8 // Waiting for non-manual approval preconditions
	Status_REPLACED                Status = 9
	Status_WAITING_MANUAL_APPROVAL Status = 10 // Waiting only for manual approval
	Status_DELETED                 Status = 11
	Status_PREVIEW                 Status = 13 // status for all entities in a preview desired state. will never show up in a real desired state.
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0:  "UNKNOWN_STATUS",
		1:  "CONVERGING",
		2:  "CONVERGED",
		3:  "FAILED",
		4:  "ROLLING_BACK",
		5:  "ROLLED_BACK",
		12: "FAILED_ROLLBACK",
		6:  "PAUSED",
		7:  "CHILD_PAUSED",
		8:  "WAITING_PRECONDITIONS",
		9:  "REPLACED",
		10: "WAITING_MANUAL_APPROVAL",
		11: "DELETED",
		13: "PREVIEW",
	}
	Status_value = map[string]int32{
		"UNKNOWN_STATUS":          0,
		"CONVERGING":              1,
		"CONVERGED":               2,
		"FAILED":                  3,
		"ROLLING_BACK":            4,
		"ROLLED_BACK":             5,
		"FAILED_ROLLBACK":         12,
		"PAUSED":                  6,
		"CHILD_PAUSED":            7,
		"WAITING_PRECONDITIONS":   8,
		"REPLACED":                9,
		"WAITING_MANUAL_APPROVAL": 10,
		"DELETED":                 11,
		"PREVIEW":                 13,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_prodvana_desired_state_model_desired_state_proto_enumTypes[2].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_prodvana_desired_state_model_desired_state_proto_enumTypes[2]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{2}
}

type SimpleStatus int32

const (
	SimpleStatus_SS_UNKNOWN              SimpleStatus = 0
	SimpleStatus_SS_CONVERGING           SimpleStatus = 1
	SimpleStatus_SS_CONVERGED            SimpleStatus = 2
	SimpleStatus_SS_FAILED               SimpleStatus = 3
	SimpleStatus_SS_WAITING_FOR_APPROVAL SimpleStatus = 4
)

// Enum value maps for SimpleStatus.
var (
	SimpleStatus_name = map[int32]string{
		0: "SS_UNKNOWN",
		1: "SS_CONVERGING",
		2: "SS_CONVERGED",
		3: "SS_FAILED",
		4: "SS_WAITING_FOR_APPROVAL",
	}
	SimpleStatus_value = map[string]int32{
		"SS_UNKNOWN":              0,
		"SS_CONVERGING":           1,
		"SS_CONVERGED":            2,
		"SS_FAILED":               3,
		"SS_WAITING_FOR_APPROVAL": 4,
	}
)

func (x SimpleStatus) Enum() *SimpleStatus {
	p := new(SimpleStatus)
	*p = x
	return p
}

func (x SimpleStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SimpleStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_prodvana_desired_state_model_desired_state_proto_enumTypes[3].Descriptor()
}

func (SimpleStatus) Type() protoreflect.EnumType {
	return &file_prodvana_desired_state_model_desired_state_proto_enumTypes[3]
}

func (x SimpleStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SimpleStatus.Descriptor instead.
func (SimpleStatus) EnumDescriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{3}
}

type StatusReason int32

const (
	StatusReason_REASON_UNKNOWN StatusReason = 0
	// Prodvana has not fetched the data it needs to act on the entity
	StatusReason_NO_CURRENT_STATE StatusReason = 1
	// the command to apply target state failed
	StatusReason_APPLY_FAILED StatusReason = 2
	// unhealthy pods detected
	StatusReason_UNHEALTHY_PODS StatusReason = 3
	// pods are being updated
	StatusReason_UPDATING_PODS StatusReason = 4
	// no update in progress, but there are pods on the wrong version. This could be a transient state with the runtime, or something was updated out of band
	StatusReason_VERSION_MISMATCH StatusReason = 5
	// after applying successfully, the object arrived at a failed state
	StatusReason_RUNTIME_OBJECT_FAILED StatusReason = 6
	// a precondition failed in an unrecoverable way
	StatusReason_PRECONDITIONS_FAILED     StatusReason = 7
	StatusReason_MANUAL_APPROVAL_REJECTED StatusReason = 8
	// Entity has not been updated in a long time
	StatusReason_STUCK_ENTITY StatusReason = 9
	// the active version is explicitly marked as dirty
	StatusReason_VERSION_DIRTY StatusReason = 10
)

// Enum value maps for StatusReason.
var (
	StatusReason_name = map[int32]string{
		0:  "REASON_UNKNOWN",
		1:  "NO_CURRENT_STATE",
		2:  "APPLY_FAILED",
		3:  "UNHEALTHY_PODS",
		4:  "UPDATING_PODS",
		5:  "VERSION_MISMATCH",
		6:  "RUNTIME_OBJECT_FAILED",
		7:  "PRECONDITIONS_FAILED",
		8:  "MANUAL_APPROVAL_REJECTED",
		9:  "STUCK_ENTITY",
		10: "VERSION_DIRTY",
	}
	StatusReason_value = map[string]int32{
		"REASON_UNKNOWN":           0,
		"NO_CURRENT_STATE":         1,
		"APPLY_FAILED":             2,
		"UNHEALTHY_PODS":           3,
		"UPDATING_PODS":            4,
		"VERSION_MISMATCH":         5,
		"RUNTIME_OBJECT_FAILED":    6,
		"PRECONDITIONS_FAILED":     7,
		"MANUAL_APPROVAL_REJECTED": 8,
		"STUCK_ENTITY":             9,
		"VERSION_DIRTY":            10,
	}
)

func (x StatusReason) Enum() *StatusReason {
	p := new(StatusReason)
	*p = x
	return p
}

func (x StatusReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatusReason) Descriptor() protoreflect.EnumDescriptor {
	return file_prodvana_desired_state_model_desired_state_proto_enumTypes[4].Descriptor()
}

func (StatusReason) Type() protoreflect.EnumType {
	return &file_prodvana_desired_state_model_desired_state_proto_enumTypes[4]
}

func (x StatusReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatusReason.Descriptor instead.
func (StatusReason) EnumDescriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{4}
}

type ActionType int32

const (
	ActionType_ACTION_TYPE_UNKNOWN ActionType = 0
	// DD is currently apply target state - if its doing this for too long, probably means apply is stuck.
	ActionType_ACTION_TYPE_APPLYING ActionType = 1
	// DD has applied target state - waiting for object to converge.
	ActionType_ACTION_TYPE_APPLIED ActionType = 2
	// Reached terminal state - DD is doing nothing further.
	ActionType_ACTION_TYPE_COMPLETE ActionType = 3
)

// Enum value maps for ActionType.
var (
	ActionType_name = map[int32]string{
		0: "ACTION_TYPE_UNKNOWN",
		1: "ACTION_TYPE_APPLYING",
		2: "ACTION_TYPE_APPLIED",
		3: "ACTION_TYPE_COMPLETE",
	}
	ActionType_value = map[string]int32{
		"ACTION_TYPE_UNKNOWN":  0,
		"ACTION_TYPE_APPLYING": 1,
		"ACTION_TYPE_APPLIED":  2,
		"ACTION_TYPE_COMPLETE": 3,
	}
)

func (x ActionType) Enum() *ActionType {
	p := new(ActionType)
	*p = x
	return p
}

func (x ActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_prodvana_desired_state_model_desired_state_proto_enumTypes[5].Descriptor()
}

func (ActionType) Type() protoreflect.EnumType {
	return &file_prodvana_desired_state_model_desired_state_proto_enumTypes[5]
}

func (x ActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionType.Descriptor instead.
func (ActionType) EnumDescriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{5}
}

type ConditionStatus int32

const (
	ConditionStatus_CONDITION_UNKNOWN_STATUS    ConditionStatus = 0
	ConditionStatus_CONDITION_PENDING           ConditionStatus = 1
	ConditionStatus_CONDITION_SATISFIED         ConditionStatus = 2
	ConditionStatus_CONDITION_MANUALLY_BYPASSED ConditionStatus = 3
	ConditionStatus_CONDITION_FAILED            ConditionStatus = 4
)

// Enum value maps for ConditionStatus.
var (
	ConditionStatus_name = map[int32]string{
		0: "CONDITION_UNKNOWN_STATUS",
		1: "CONDITION_PENDING",
		2: "CONDITION_SATISFIED",
		3: "CONDITION_MANUALLY_BYPASSED",
		4: "CONDITION_FAILED",
	}
	ConditionStatus_value = map[string]int32{
		"CONDITION_UNKNOWN_STATUS":    0,
		"CONDITION_PENDING":           1,
		"CONDITION_SATISFIED":         2,
		"CONDITION_MANUALLY_BYPASSED": 3,
		"CONDITION_FAILED":            4,
	}
)

func (x ConditionStatus) Enum() *ConditionStatus {
	p := new(ConditionStatus)
	*p = x
	return p
}

func (x ConditionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConditionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_prodvana_desired_state_model_desired_state_proto_enumTypes[6].Descriptor()
}

func (ConditionStatus) Type() protoreflect.EnumType {
	return &file_prodvana_desired_state_model_desired_state_proto_enumTypes[6]
}

func (x ConditionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConditionStatus.Descriptor instead.
func (ConditionStatus) EnumDescriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{6}
}

type ManualApprovalStatus int32

const (
	ManualApprovalStatus_PENDING  ManualApprovalStatus = 0
	ManualApprovalStatus_APPROVED ManualApprovalStatus = 1
	ManualApprovalStatus_REJECTED ManualApprovalStatus = 2
)

// Enum value maps for ManualApprovalStatus.
var (
	ManualApprovalStatus_name = map[int32]string{
		0: "PENDING",
		1: "APPROVED",
		2: "REJECTED",
	}
	ManualApprovalStatus_value = map[string]int32{
		"PENDING":  0,
		"APPROVED": 1,
		"REJECTED": 2,
	}
)

func (x ManualApprovalStatus) Enum() *ManualApprovalStatus {
	p := new(ManualApprovalStatus)
	*p = x
	return p
}

func (x ManualApprovalStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ManualApprovalStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_prodvana_desired_state_model_desired_state_proto_enumTypes[7].Descriptor()
}

func (ManualApprovalStatus) Type() protoreflect.EnumType {
	return &file_prodvana_desired_state_model_desired_state_proto_enumTypes[7]
}

func (x ManualApprovalStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ManualApprovalStatus.Descriptor instead.
func (ManualApprovalStatus) EnumDescriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{7}
}

type CustomTaskStatus int32

const (
	CustomTaskStatus_CUSTOM_TASK_PENDING           CustomTaskStatus = 0
	CustomTaskStatus_CUSTOM_TASK_SUCCESSFUL        CustomTaskStatus = 1
	CustomTaskStatus_CUSTOM_TASK_RETRIES_EXHAUSTED CustomTaskStatus = 2
	CustomTaskStatus_CUSTOM_TASK_TIMED_OUT         CustomTaskStatus = 3
)

// Enum value maps for CustomTaskStatus.
var (
	CustomTaskStatus_name = map[int32]string{
		0: "CUSTOM_TASK_PENDING",
		1: "CUSTOM_TASK_SUCCESSFUL",
		2: "CUSTOM_TASK_RETRIES_EXHAUSTED",
		3: "CUSTOM_TASK_TIMED_OUT",
	}
	CustomTaskStatus_value = map[string]int32{
		"CUSTOM_TASK_PENDING":           0,
		"CUSTOM_TASK_SUCCESSFUL":        1,
		"CUSTOM_TASK_RETRIES_EXHAUSTED": 2,
		"CUSTOM_TASK_TIMED_OUT":         3,
	}
)

func (x CustomTaskStatus) Enum() *CustomTaskStatus {
	p := new(CustomTaskStatus)
	*p = x
	return p
}

func (x CustomTaskStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CustomTaskStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_prodvana_desired_state_model_desired_state_proto_enumTypes[8].Descriptor()
}

func (CustomTaskStatus) Type() protoreflect.EnumType {
	return &file_prodvana_desired_state_model_desired_state_proto_enumTypes[8]
}

func (x CustomTaskStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CustomTaskStatus.Descriptor instead.
func (CustomTaskStatus) EnumDescriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{8}
}

type SignalType int32

const (
	SignalType_SIGNAL_UNKNOWN             SignalType = 0
	SignalType_DELIVERY_PROMOTION         SignalType = 1
	SignalType_PROTECTION_BYPASS          SignalType = 2
	SignalType_RUNTIME_EXTENSION_APPROVAL SignalType = 3
	SignalType_SIGNAL_MANUAL_APPROVAL     SignalType = 4
)

// Enum value maps for SignalType.
var (
	SignalType_name = map[int32]string{
		0: "SIGNAL_UNKNOWN",
		1: "DELIVERY_PROMOTION",
		2: "PROTECTION_BYPASS",
		3: "RUNTIME_EXTENSION_APPROVAL",
		4: "SIGNAL_MANUAL_APPROVAL",
	}
	SignalType_value = map[string]int32{
		"SIGNAL_UNKNOWN":             0,
		"DELIVERY_PROMOTION":         1,
		"PROTECTION_BYPASS":          2,
		"RUNTIME_EXTENSION_APPROVAL": 3,
		"SIGNAL_MANUAL_APPROVAL":     4,
	}
)

func (x SignalType) Enum() *SignalType {
	p := new(SignalType)
	*p = x
	return p
}

func (x SignalType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SignalType) Descriptor() protoreflect.EnumDescriptor {
	return file_prodvana_desired_state_model_desired_state_proto_enumTypes[9].Descriptor()
}

func (SignalType) Type() protoreflect.EnumType {
	return &file_prodvana_desired_state_model_desired_state_proto_enumTypes[9]
}

func (x SignalType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SignalType.Descriptor instead.
func (SignalType) EnumDescriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{9}
}

type CanaryProgressState_Status int32

const (
	CanaryProgressState_UNKNOWN   CanaryProgressState_Status = 0
	CanaryProgressState_PENDING   CanaryProgressState_Status = 1
	CanaryProgressState_PAUSED    CanaryProgressState_Status = 2
	CanaryProgressState_COMPLETED CanaryProgressState_Status = 3
)

// Enum value maps for CanaryProgressState_Status.
var (
	CanaryProgressState_Status_name = map[int32]string{
		0: "UNKNOWN",
		1: "PENDING",
		2: "PAUSED",
		3: "COMPLETED",
	}
	CanaryProgressState_Status_value = map[string]int32{
		"UNKNOWN":   0,
		"PENDING":   1,
		"PAUSED":    2,
		"COMPLETED": 3,
	}
)

func (x CanaryProgressState_Status) Enum() *CanaryProgressState_Status {
	p := new(CanaryProgressState_Status)
	*p = x
	return p
}

func (x CanaryProgressState_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CanaryProgressState_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_prodvana_desired_state_model_desired_state_proto_enumTypes[10].Descriptor()
}

func (CanaryProgressState_Status) Type() protoreflect.EnumType {
	return &file_prodvana_desired_state_model_desired_state_proto_enumTypes[10]
}

func (x CanaryProgressState_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CanaryProgressState_Status.Descriptor instead.
func (CanaryProgressState_Status) EnumDescriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{11, 0}
}

type DeliveryState_Status int32

const (
	DeliveryState_STATUS_UNKNOWN     DeliveryState_Status = 0
	DeliveryState_STATUS_PROGRESSING DeliveryState_Status = 1
	DeliveryState_STATUS_PAUSED      DeliveryState_Status = 2
	DeliveryState_STATUS_HEALTHY     DeliveryState_Status = 3
	DeliveryState_STATUS_UNHEALTHY   DeliveryState_Status = 4
)

// Enum value maps for DeliveryState_Status.
var (
	DeliveryState_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_PROGRESSING",
		2: "STATUS_PAUSED",
		3: "STATUS_HEALTHY",
		4: "STATUS_UNHEALTHY",
	}
	DeliveryState_Status_value = map[string]int32{
		"STATUS_UNKNOWN":     0,
		"STATUS_PROGRESSING": 1,
		"STATUS_PAUSED":      2,
		"STATUS_HEALTHY":     3,
		"STATUS_UNHEALTHY":   4,
	}
)

func (x DeliveryState_Status) Enum() *DeliveryState_Status {
	p := new(DeliveryState_Status)
	*p = x
	return p
}

func (x DeliveryState_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeliveryState_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_prodvana_desired_state_model_desired_state_proto_enumTypes[11].Descriptor()
}

func (DeliveryState_Status) Type() protoreflect.EnumType {
	return &file_prodvana_desired_state_model_desired_state_proto_enumTypes[11]
}

func (x DeliveryState_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeliveryState_Status.Descriptor instead.
func (DeliveryState_Status) EnumDescriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{12, 0}
}

type RuntimeObject_Status int32

const (
	RuntimeObject_PENDING   RuntimeObject_Status = 0
	RuntimeObject_SUCCEEDED RuntimeObject_Status = 1
	RuntimeObject_FAILED    RuntimeObject_Status = 2
)

// Enum value maps for RuntimeObject_Status.
var (
	RuntimeObject_Status_name = map[int32]string{
		0: "PENDING",
		1: "SUCCEEDED",
		2: "FAILED",
	}
	RuntimeObject_Status_value = map[string]int32{
		"PENDING":   0,
		"SUCCEEDED": 1,
		"FAILED":    2,
	}
)

func (x RuntimeObject_Status) Enum() *RuntimeObject_Status {
	p := new(RuntimeObject_Status)
	*p = x
	return p
}

func (x RuntimeObject_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RuntimeObject_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_prodvana_desired_state_model_desired_state_proto_enumTypes[12].Descriptor()
}

func (RuntimeObject_Status) Type() protoreflect.EnumType {
	return &file_prodvana_desired_state_model_desired_state_proto_enumTypes[12]
}

func (x RuntimeObject_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RuntimeObject_Status.Descriptor instead.
func (RuntimeObject_Status) EnumDescriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{14, 0}
}

type ProtectionLinkState_StopReason int32

const (
	ProtectionLinkState_UNKNOWN                ProtectionLinkState_StopReason = 0
	ProtectionLinkState_LIFECYCLE_COMPLETED    ProtectionLinkState_StopReason = 1
	ProtectionLinkState_SUCCEEDED_ONCE         ProtectionLinkState_StopReason = 2
	ProtectionLinkState_SUCCEEDED_FOR_DURATION ProtectionLinkState_StopReason = 3
	ProtectionLinkState_TIMED_OUT              ProtectionLinkState_StopReason = 4
	ProtectionLinkState_FAILED                 ProtectionLinkState_StopReason = 5
	ProtectionLinkState_DELETED                ProtectionLinkState_StopReason = 6
	ProtectionLinkState_MANUALLY_BYPASSED      ProtectionLinkState_StopReason = 7
)

// Enum value maps for ProtectionLinkState_StopReason.
var (
	ProtectionLinkState_StopReason_name = map[int32]string{
		0: "UNKNOWN",
		1: "LIFECYCLE_COMPLETED",
		2: "SUCCEEDED_ONCE",
		3: "SUCCEEDED_FOR_DURATION",
		4: "TIMED_OUT",
		5: "FAILED",
		6: "DELETED",
		7: "MANUALLY_BYPASSED",
	}
	ProtectionLinkState_StopReason_value = map[string]int32{
		"UNKNOWN":                0,
		"LIFECYCLE_COMPLETED":    1,
		"SUCCEEDED_ONCE":         2,
		"SUCCEEDED_FOR_DURATION": 3,
		"TIMED_OUT":              4,
		"FAILED":                 5,
		"DELETED":                6,
		"MANUALLY_BYPASSED":      7,
	}
)

func (x ProtectionLinkState_StopReason) Enum() *ProtectionLinkState_StopReason {
	p := new(ProtectionLinkState_StopReason)
	*p = x
	return p
}

func (x ProtectionLinkState_StopReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtectionLinkState_StopReason) Descriptor() protoreflect.EnumDescriptor {
	return file_prodvana_desired_state_model_desired_state_proto_enumTypes[13].Descriptor()
}

func (ProtectionLinkState_StopReason) Type() protoreflect.EnumType {
	return &file_prodvana_desired_state_model_desired_state_proto_enumTypes[13]
}

func (x ProtectionLinkState_StopReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProtectionLinkState_StopReason.Descriptor instead.
func (ProtectionLinkState_StopReason) EnumDescriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{22, 0}
}

type ProtectionLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lifecycle    *protection.ProtectionLifecycle `protobuf:"bytes,3,opt,name=lifecycle,proto3" json:"lifecycle,omitempty"`
	AttachmentId string                          `protobuf:"bytes,4,opt,name=attachment_id,json=attachmentId,proto3" json:"attachment_id,omitempty"`
}

func (x *ProtectionLink) Reset() {
	*x = ProtectionLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtectionLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtectionLink) ProtoMessage() {}

func (x *ProtectionLink) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtectionLink.ProtoReflect.Descriptor instead.
func (*ProtectionLink) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{0}
}

func (x *ProtectionLink) GetLifecycle() *protection.ProtectionLifecycle {
	if x != nil {
		return x.Lifecycle
	}
	return nil
}

func (x *ProtectionLink) GetAttachmentId() string {
	if x != nil {
		return x.AttachmentId
	}
	return ""
}

type Condition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Condition:
	//
	//	*Condition_RcCond
	//	*Condition_ManualApproval_
	//	*Condition_CustomTask
	Condition isCondition_Condition `protobuf_oneof:"condition"`
	// Generated during SetDesiredState.
	// Do not set as part of input unless reusing an existing precondition, e.g., patching an existing desired state without regenerating some preconditions.
	DesiredStateId string `protobuf:"bytes,4,opt,name=desired_state_id,json=desiredStateId,proto3" json:"desired_state_id,omitempty"`
}

func (x *Condition) Reset() {
	*x = Condition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition) ProtoMessage() {}

func (x *Condition) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition.ProtoReflect.Descriptor instead.
func (*Condition) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{1}
}

func (m *Condition) GetCondition() isCondition_Condition {
	if m != nil {
		return m.Condition
	}
	return nil
}

func (x *Condition) GetRcCond() *Condition_ReleaseChannelStableCondition {
	if x, ok := x.GetCondition().(*Condition_RcCond); ok {
		return x.RcCond
	}
	return nil
}

func (x *Condition) GetManualApproval() *Condition_ManualApproval {
	if x, ok := x.GetCondition().(*Condition_ManualApproval_); ok {
		return x.ManualApproval
	}
	return nil
}

func (x *Condition) GetCustomTask() *Condition_CustomTaskSuccessfulCondition {
	if x, ok := x.GetCondition().(*Condition_CustomTask); ok {
		return x.CustomTask
	}
	return nil
}

func (x *Condition) GetDesiredStateId() string {
	if x != nil {
		return x.DesiredStateId
	}
	return ""
}

type isCondition_Condition interface {
	isCondition_Condition()
}

type Condition_RcCond struct {
	RcCond *Condition_ReleaseChannelStableCondition `protobuf:"bytes,1,opt,name=rc_cond,json=rcCond,proto3,oneof"`
}

type Condition_ManualApproval_ struct {
	ManualApproval *Condition_ManualApproval `protobuf:"bytes,2,opt,name=manual_approval,json=manualApproval,proto3,oneof"`
}

type Condition_CustomTask struct {
	CustomTask *Condition_CustomTaskSuccessfulCondition `protobuf:"bytes,3,opt,name=custom_task,json=customTask,proto3,oneof"`
}

func (*Condition_RcCond) isCondition_Condition() {}

func (*Condition_ManualApproval_) isCondition_Condition() {}

func (*Condition_CustomTask) isCondition_Condition() {}

type DeliveryExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId string                      `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Lifecycle  common_config.TaskLifecycle `protobuf:"varint,2,opt,name=lifecycle,proto3,enum=prodvana.common_config.TaskLifecycle" json:"lifecycle,omitempty"`
	References []*Identifier               `protobuf:"bytes,3,rep,name=references,proto3" json:"references,omitempty"`
}

func (x *DeliveryExtension) Reset() {
	*x = DeliveryExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliveryExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliveryExtension) ProtoMessage() {}

func (x *DeliveryExtension) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliveryExtension.ProtoReflect.Descriptor instead.
func (*DeliveryExtension) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{2}
}

func (x *DeliveryExtension) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *DeliveryExtension) GetLifecycle() common_config.TaskLifecycle {
	if x != nil {
		return x.Lifecycle
	}
	return common_config.TaskLifecycle(0)
}

func (x *DeliveryExtension) GetReferences() []*Identifier {
	if x != nil {
		return x.References
	}
	return nil
}

type Identifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type Type `protobuf:"varint,1,opt,name=type,proto3,enum=prodvana.desired_state.model.Type" json:"type,omitempty"`
	// globally unique identifier
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Identifier) Reset() {
	*x = Identifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identifier) ProtoMessage() {}

func (x *Identifier) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identifier.ProtoReflect.Descriptor instead.
func (*Identifier) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{3}
}

func (x *Identifier) GetType() Type {
	if x != nil {
		return x.Type
	}
	return Type_UNKNOWN
}

func (x *Identifier) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Preconditions      []*Condition         `protobuf:"bytes,1,rep,name=preconditions,proto3" json:"preconditions,omitempty"`
	Invariants         []*Condition         `protobuf:"bytes,2,rep,name=invariants,proto3" json:"invariants,omitempty"`
	Self               *Identifier          `protobuf:"bytes,3,opt,name=self,proto3" json:"self,omitempty"`
	DesiredStateId     string               `protobuf:"bytes,4,opt,name=desired_state_id,json=desiredStateId,proto3" json:"desired_state_id,omitempty"`
	RootDesiredStateId string               `protobuf:"bytes,5,opt,name=root_desired_state_id,json=rootDesiredStateId,proto3" json:"root_desired_state_id,omitempty"`
	ProtectionLinks    []*ProtectionLink    `protobuf:"bytes,6,rep,name=protection_links,json=protectionLinks,proto3" json:"protection_links,omitempty"`
	DeliveryExtensions []*DeliveryExtension `protobuf:"bytes,8,rep,name=delivery_extensions,json=deliveryExtensions,proto3" json:"delivery_extensions,omitempty"`
	// if true, the entity does not set its own target state. instead, the target state will be set when the parent decides to set target state.
	TargetStateSetByParent     bool `protobuf:"varint,9,opt,name=target_state_set_by_parent,json=targetStateSetByParent,proto3" json:"target_state_set_by_parent,omitempty"`
	RequireApprovalBeforeApply bool `protobuf:"varint,10,opt,name=require_approval_before_apply,json=requireApprovalBeforeApply,proto3" json:"require_approval_before_apply,omitempty"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{4}
}

func (x *Metadata) GetPreconditions() []*Condition {
	if x != nil {
		return x.Preconditions
	}
	return nil
}

func (x *Metadata) GetInvariants() []*Condition {
	if x != nil {
		return x.Invariants
	}
	return nil
}

func (x *Metadata) GetSelf() *Identifier {
	if x != nil {
		return x.Self
	}
	return nil
}

func (x *Metadata) GetDesiredStateId() string {
	if x != nil {
		return x.DesiredStateId
	}
	return ""
}

func (x *Metadata) GetRootDesiredStateId() string {
	if x != nil {
		return x.RootDesiredStateId
	}
	return ""
}

func (x *Metadata) GetProtectionLinks() []*ProtectionLink {
	if x != nil {
		return x.ProtectionLinks
	}
	return nil
}

func (x *Metadata) GetDeliveryExtensions() []*DeliveryExtension {
	if x != nil {
		return x.DeliveryExtensions
	}
	return nil
}

func (x *Metadata) GetTargetStateSetByParent() bool {
	if x != nil {
		return x.TargetStateSetByParent
	}
	return false
}

func (x *Metadata) GetRequireApprovalBeforeApply() bool {
	if x != nil {
		return x.RequireApprovalBeforeApply
	}
	return false
}

type StatusExplanation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subject *Identifier  `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"` // the id of the object that resulted in this status. In the case of parent entities, this may be one of the child entities, or itself.
	Reason  StatusReason `protobuf:"varint,2,opt,name=reason,proto3,enum=prodvana.desired_state.model.StatusReason" json:"reason,omitempty"`
	// Optional freeform message to be shown to the user alongside reason.
	// only one of the two will be set
	Message  string   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Messages []string `protobuf:"bytes,4,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (x *StatusExplanation) Reset() {
	*x = StatusExplanation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusExplanation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusExplanation) ProtoMessage() {}

func (x *StatusExplanation) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusExplanation.ProtoReflect.Descriptor instead.
func (*StatusExplanation) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{5}
}

func (x *StatusExplanation) GetSubject() *Identifier {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *StatusExplanation) GetReason() StatusReason {
	if x != nil {
		return x.Reason
	}
	return StatusReason_REASON_UNKNOWN
}

func (x *StatusExplanation) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *StatusExplanation) GetMessages() []string {
	if x != nil {
		return x.Messages
	}
	return nil
}

// What action is DD taking now?
type ActionExplanation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts         *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"`
	ActionType ActionType             `protobuf:"varint,2,opt,name=action_type,json=actionType,proto3,enum=prodvana.desired_state.model.ActionType" json:"action_type,omitempty"`
	Message    string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ActionExplanation) Reset() {
	*x = ActionExplanation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionExplanation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionExplanation) ProtoMessage() {}

func (x *ActionExplanation) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionExplanation.ProtoReflect.Descriptor instead.
func (*ActionExplanation) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{6}
}

func (x *ActionExplanation) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *ActionExplanation) GetActionType() ActionType {
	if x != nil {
		return x.ActionType
	}
	return ActionType_ACTION_TYPE_UNKNOWN
}

func (x *ActionExplanation) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Version struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version           string                 `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Replicas          int32                  `protobuf:"varint,2,opt,name=replicas,proto3" json:"replicas,omitempty"`                                            // Created/running replicas, can be in any state
	AvailableReplicas int32                  `protobuf:"varint,8,opt,name=available_replicas,json=availableReplicas,proto3" json:"available_replicas,omitempty"` // Replicas which have passed healthchecks for required duration.
	PushTimestamp     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=push_timestamp,json=pushTimestamp,proto3" json:"push_timestamp,omitempty"`
	// A version is active if it is the version in which the underlying object is converging to.
	// A runtime object will have exactly one active version, while a service instance may have one or more
	// depending on if it maps to more than one runtime object.
	Active         bool  `protobuf:"varint,5,opt,name=active,proto3" json:"active,omitempty"`
	TargetReplicas int32 `protobuf:"varint,6,opt,name=target_replicas,json=targetReplicas,proto3" json:"target_replicas,omitempty"`
	// A version is dirty if its state no longer matches desired state and must be fixed by a redeploy.
	// For example, a terraform version is dirty if its plan output returns differences.
	// DD will only take action on dirty if the version is also active.
	Dirty bool `protobuf:"varint,9,opt,name=dirty,proto3" json:"dirty,omitempty"`
}

func (x *Version) Reset() {
	*x = Version{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Version) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Version) ProtoMessage() {}

func (x *Version) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Version.ProtoReflect.Descriptor instead.
func (*Version) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{7}
}

func (x *Version) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Version) GetReplicas() int32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

func (x *Version) GetAvailableReplicas() int32 {
	if x != nil {
		return x.AvailableReplicas
	}
	return 0
}

func (x *Version) GetPushTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.PushTimestamp
	}
	return nil
}

func (x *Version) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *Version) GetTargetReplicas() int32 {
	if x != nil {
		return x.TargetReplicas
	}
	return 0
}

func (x *Version) GetDirty() bool {
	if x != nil {
		return x.Dirty
	}
	return false
}

type ServiceInstanceState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta             *Metadata      `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	Application      string         `protobuf:"bytes,2,opt,name=application,proto3" json:"application,omitempty"`
	Service          string         `protobuf:"bytes,3,opt,name=service,proto3" json:"service,omitempty"`
	ReleaseChannel   string         `protobuf:"bytes,4,opt,name=release_channel,json=releaseChannel,proto3" json:"release_channel,omitempty"`
	ServiceId        string         `protobuf:"bytes,8,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`                        // set internally by prodvana
	ReleaseChannelId string         `protobuf:"bytes,9,opt,name=release_channel_id,json=releaseChannelId,proto3" json:"release_channel_id,omitempty"` // set internally by prodvana
	Versions         []*Version     `protobuf:"bytes,5,rep,name=versions,proto3" json:"versions,omitempty"`
	RollbackVersion  *Version       `protobuf:"bytes,6,opt,name=rollback_version,json=rollbackVersion,proto3" json:"rollback_version,omitempty"`
	Rollback         bool           `protobuf:"varint,7,opt,name=rollback,proto3" json:"rollback,omitempty"`
	Delivery         *DeliveryState `protobuf:"bytes,10,opt,name=delivery,proto3" json:"delivery,omitempty"`
}

func (x *ServiceInstanceState) Reset() {
	*x = ServiceInstanceState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceInstanceState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceInstanceState) ProtoMessage() {}

func (x *ServiceInstanceState) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceInstanceState.ProtoReflect.Descriptor instead.
func (*ServiceInstanceState) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{8}
}

func (x *ServiceInstanceState) GetMeta() *Metadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ServiceInstanceState) GetApplication() string {
	if x != nil {
		return x.Application
	}
	return ""
}

func (x *ServiceInstanceState) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *ServiceInstanceState) GetReleaseChannel() string {
	if x != nil {
		return x.ReleaseChannel
	}
	return ""
}

func (x *ServiceInstanceState) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *ServiceInstanceState) GetReleaseChannelId() string {
	if x != nil {
		return x.ReleaseChannelId
	}
	return ""
}

func (x *ServiceInstanceState) GetVersions() []*Version {
	if x != nil {
		return x.Versions
	}
	return nil
}

func (x *ServiceInstanceState) GetRollbackVersion() *Version {
	if x != nil {
		return x.RollbackVersion
	}
	return nil
}

func (x *ServiceInstanceState) GetRollback() bool {
	if x != nil {
		return x.Rollback
	}
	return false
}

func (x *ServiceInstanceState) GetDelivery() *DeliveryState {
	if x != nil {
		return x.Delivery
	}
	return nil
}

type ServiceState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta            *Metadata               `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	Application     string                  `protobuf:"bytes,2,opt,name=application,proto3" json:"application,omitempty"`
	Service         string                  `protobuf:"bytes,3,opt,name=service,proto3" json:"service,omitempty"`
	ServiceId       string                  `protobuf:"bytes,5,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"` // set internally by prodvana
	ReleaseChannels []*ServiceInstanceState `protobuf:"bytes,6,rep,name=release_channels,json=releaseChannels,proto3" json:"release_channels,omitempty"`
	// Definitions for custom tasks used by this service. Must be empty if part of service group.
	CustomTasks        []*CustomTaskState        `protobuf:"bytes,7,rep,name=custom_tasks,json=customTasks,proto3" json:"custom_tasks,omitempty"`
	DeliveryExtensions []*DeliveryExtensionState `protobuf:"bytes,9,rep,name=delivery_extensions,json=deliveryExtensions,proto3" json:"delivery_extensions,omitempty"`
}

func (x *ServiceState) Reset() {
	*x = ServiceState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceState) ProtoMessage() {}

func (x *ServiceState) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceState.ProtoReflect.Descriptor instead.
func (*ServiceState) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{9}
}

func (x *ServiceState) GetMeta() *Metadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ServiceState) GetApplication() string {
	if x != nil {
		return x.Application
	}
	return ""
}

func (x *ServiceState) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *ServiceState) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *ServiceState) GetReleaseChannels() []*ServiceInstanceState {
	if x != nil {
		return x.ReleaseChannels
	}
	return nil
}

func (x *ServiceState) GetCustomTasks() []*CustomTaskState {
	if x != nil {
		return x.CustomTasks
	}
	return nil
}

func (x *ServiceState) GetDeliveryExtensions() []*DeliveryExtensionState {
	if x != nil {
		return x.DeliveryExtensions
	}
	return nil
}

type ServiceGroupState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta     *Metadata       `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	Services []*ServiceState `protobuf:"bytes,2,rep,name=services,proto3" json:"services,omitempty"`
	// Definitions for custom tasks used by this service group.
	CustomTasks        []*CustomTaskState        `protobuf:"bytes,3,rep,name=custom_tasks,json=customTasks,proto3" json:"custom_tasks,omitempty"`
	DeliveryExtensions []*DeliveryExtensionState `protobuf:"bytes,5,rep,name=delivery_extensions,json=deliveryExtensions,proto3" json:"delivery_extensions,omitempty"`
}

func (x *ServiceGroupState) Reset() {
	*x = ServiceGroupState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceGroupState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceGroupState) ProtoMessage() {}

func (x *ServiceGroupState) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceGroupState.ProtoReflect.Descriptor instead.
func (*ServiceGroupState) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{10}
}

func (x *ServiceGroupState) GetMeta() *Metadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ServiceGroupState) GetServices() []*ServiceState {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *ServiceGroupState) GetCustomTasks() []*CustomTaskState {
	if x != nil {
		return x.CustomTasks
	}
	return nil
}

func (x *ServiceGroupState) GetDeliveryExtensions() []*DeliveryExtensionState {
	if x != nil {
		return x.DeliveryExtensions
	}
	return nil
}

type CanaryProgressState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status CanaryProgressState_Status `protobuf:"varint,1,opt,name=status,proto3,enum=prodvana.desired_state.model.CanaryProgressState_Status" json:"status,omitempty"`
	// current canary weight
	CanaryWeight int32 `protobuf:"varint,2,opt,name=canary_weight,json=canaryWeight,proto3" json:"canary_weight,omitempty"`
	// pause duration at this weight before advancing
	Duration *durationpb.Duration `protobuf:"bytes,3,opt,name=duration,proto3" json:"duration,omitempty"`
	// when status = PAUSED this indicates when the pause started
	PauseStartTimestamp *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=pause_start_timestamp,json=pauseStartTimestamp,proto3" json:"pause_start_timestamp,omitempty"`
}

func (x *CanaryProgressState) Reset() {
	*x = CanaryProgressState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CanaryProgressState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CanaryProgressState) ProtoMessage() {}

func (x *CanaryProgressState) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CanaryProgressState.ProtoReflect.Descriptor instead.
func (*CanaryProgressState) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{11}
}

func (x *CanaryProgressState) GetStatus() CanaryProgressState_Status {
	if x != nil {
		return x.Status
	}
	return CanaryProgressState_UNKNOWN
}

func (x *CanaryProgressState) GetCanaryWeight() int32 {
	if x != nil {
		return x.CanaryWeight
	}
	return 0
}

func (x *CanaryProgressState) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *CanaryProgressState) GetPauseStartTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.PauseStartTimestamp
	}
	return nil
}

type DeliveryState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DesiredStateId string `protobuf:"bytes,12,opt,name=desired_state_id,json=desiredStateId,proto3" json:"desired_state_id,omitempty"`
	// overall delivery status
	Status DeliveryState_Status `protobuf:"varint,8,opt,name=status,proto3,enum=prodvana.desired_state.model.DeliveryState_Status" json:"status,omitempty"`
	// human readable message from the delivery controller
	Message string `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
	// current state of all Canary progression
	CanaryProgress []*CanaryProgressState `protobuf:"bytes,11,rep,name=canary_progress,json=canaryProgress,proto3" json:"canary_progress,omitempty"`
	FirstRun       bool                   `protobuf:"varint,13,opt,name=first_run,json=firstRun,proto3" json:"first_run,omitempty"`
	// string unique to each PD controller convergence,
	// e.g. when Argo Rollouts starts a new rollout, this will change.
	Generation string `protobuf:"bytes,14,opt,name=generation,proto3" json:"generation,omitempty"`
}

func (x *DeliveryState) Reset() {
	*x = DeliveryState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliveryState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliveryState) ProtoMessage() {}

func (x *DeliveryState) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliveryState.ProtoReflect.Descriptor instead.
func (*DeliveryState) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{12}
}

func (x *DeliveryState) GetDesiredStateId() string {
	if x != nil {
		return x.DesiredStateId
	}
	return ""
}

func (x *DeliveryState) GetStatus() DeliveryState_Status {
	if x != nil {
		return x.Status
	}
	return DeliveryState_STATUS_UNKNOWN
}

func (x *DeliveryState) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeliveryState) GetCanaryProgress() []*CanaryProgressState {
	if x != nil {
		return x.CanaryProgress
	}
	return nil
}

func (x *DeliveryState) GetFirstRun() bool {
	if x != nil {
		return x.FirstRun
	}
	return false
}

func (x *DeliveryState) GetGeneration() string {
	if x != nil {
		return x.Generation
	}
	return ""
}

type RuntimeExtensionFetchOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dirty   bool   `protobuf:"varint,1,opt,name=dirty,proto3" json:"dirty,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *RuntimeExtensionFetchOutput) Reset() {
	*x = RuntimeExtensionFetchOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuntimeExtensionFetchOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeExtensionFetchOutput) ProtoMessage() {}

func (x *RuntimeExtensionFetchOutput) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeExtensionFetchOutput.ProtoReflect.Descriptor instead.
func (*RuntimeExtensionFetchOutput) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{13}
}

func (x *RuntimeExtensionFetchOutput) GetDirty() bool {
	if x != nil {
		return x.Dirty
	}
	return false
}

func (x *RuntimeExtensionFetchOutput) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type RuntimeObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta                    *Metadata                       `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	ObjectType              string                          `protobuf:"bytes,2,opt,name=object_type,json=objectType,proto3" json:"object_type,omitempty"`
	Namespace               string                          `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name                    string                          `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Versions                []*Version                      `protobuf:"bytes,5,rep,name=versions,proto3" json:"versions,omitempty"`
	Status                  RuntimeObject_Status            `protobuf:"varint,6,opt,name=status,proto3,enum=prodvana.desired_state.model.RuntimeObject_Status" json:"status,omitempty"`
	RollbackVersion         *Version                        `protobuf:"bytes,7,opt,name=rollback_version,json=rollbackVersion,proto3" json:"rollback_version,omitempty"`
	Delivery                *DeliveryState                  `protobuf:"bytes,8,opt,name=delivery,proto3" json:"delivery,omitempty"`
	VersionAgnostic         bool                            `protobuf:"varint,10,opt,name=version_agnostic,json=versionAgnostic,proto3" json:"version_agnostic,omitempty"`                             // This object just needs to exist - it doesn't change from version to version
	DesiredVersionDirtyOnly bool                            `protobuf:"varint,20,opt,name=desired_version_dirty_only,json=desiredVersionDirtyOnly,proto3" json:"desired_version_dirty_only,omitempty"` // when checking for whether or not to apply, only use the desired version and check if it's active and not dirty. that is, active && at desired version && dirty = hasWork, no work otherwise.
	Message                 string                          `protobuf:"bytes,12,opt,name=message,proto3" json:"message,omitempty"`                                                                     // Human readable message (typically for errors).
	RuntimeExtension        *RuntimeObject_RuntimeExtension `protobuf:"bytes,13,opt,name=runtime_extension,json=runtimeExtension,proto3" json:"runtime_extension,omitempty"`                           // additional config if this runtime object belongs to a runtime extension
	Interval                *durationpb.Duration            `protobuf:"bytes,15,opt,name=interval,proto3" json:"interval,omitempty"`                                                                   // if set, runtime object is continuously applied instead of being done once when there is a version mismatch
	Timeout                 *durationpb.Duration            `protobuf:"bytes,16,opt,name=timeout,proto3" json:"timeout,omitempty"`                                                                     // if set, runtime object is recreated when this timeout is hit if it has not converged by then.
	// output_blob_ids and exit_codes are in the same order, assuming output is saved
	OutputBlobIds              []string `protobuf:"bytes,18,rep,name=output_blob_ids,json=outputBlobIds,proto3" json:"output_blob_ids,omitempty"` // if output is saved, this is the ID of the blob to retrieve it, only for run-to-completion objects.
	ExitCodes                  []int32  `protobuf:"varint,19,rep,packed,name=exit_codes,json=exitCodes,proto3" json:"exit_codes,omitempty"`       // exit codes, only for run-to-completion objects like jobs
	RequireApprovalBeforeApply bool     `protobuf:"varint,21,opt,name=require_approval_before_apply,json=requireApprovalBeforeApply,proto3" json:"require_approval_before_apply,omitempty"`
}

func (x *RuntimeObject) Reset() {
	*x = RuntimeObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuntimeObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeObject) ProtoMessage() {}

func (x *RuntimeObject) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeObject.ProtoReflect.Descriptor instead.
func (*RuntimeObject) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{14}
}

func (x *RuntimeObject) GetMeta() *Metadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *RuntimeObject) GetObjectType() string {
	if x != nil {
		return x.ObjectType
	}
	return ""
}

func (x *RuntimeObject) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *RuntimeObject) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RuntimeObject) GetVersions() []*Version {
	if x != nil {
		return x.Versions
	}
	return nil
}

func (x *RuntimeObject) GetStatus() RuntimeObject_Status {
	if x != nil {
		return x.Status
	}
	return RuntimeObject_PENDING
}

func (x *RuntimeObject) GetRollbackVersion() *Version {
	if x != nil {
		return x.RollbackVersion
	}
	return nil
}

func (x *RuntimeObject) GetDelivery() *DeliveryState {
	if x != nil {
		return x.Delivery
	}
	return nil
}

func (x *RuntimeObject) GetVersionAgnostic() bool {
	if x != nil {
		return x.VersionAgnostic
	}
	return false
}

func (x *RuntimeObject) GetDesiredVersionDirtyOnly() bool {
	if x != nil {
		return x.DesiredVersionDirtyOnly
	}
	return false
}

func (x *RuntimeObject) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RuntimeObject) GetRuntimeExtension() *RuntimeObject_RuntimeExtension {
	if x != nil {
		return x.RuntimeExtension
	}
	return nil
}

func (x *RuntimeObject) GetInterval() *durationpb.Duration {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *RuntimeObject) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *RuntimeObject) GetOutputBlobIds() []string {
	if x != nil {
		return x.OutputBlobIds
	}
	return nil
}

func (x *RuntimeObject) GetExitCodes() []int32 {
	if x != nil {
		return x.ExitCodes
	}
	return nil
}

func (x *RuntimeObject) GetRequireApprovalBeforeApply() bool {
	if x != nil {
		return x.RequireApprovalBeforeApply
	}
	return false
}

type ConditionState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status ConditionStatus `protobuf:"varint,1,opt,name=status,proto3,enum=prodvana.desired_state.model.ConditionStatus" json:"status,omitempty"`
}

func (x *ConditionState) Reset() {
	*x = ConditionState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionState) ProtoMessage() {}

func (x *ConditionState) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionState.ProtoReflect.Descriptor instead.
func (*ConditionState) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{15}
}

func (x *ConditionState) GetStatus() ConditionStatus {
	if x != nil {
		return x.Status
	}
	return ConditionStatus_CONDITION_UNKNOWN_STATUS
}

type ControlState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rollback           bool              `protobuf:"varint,1,opt,name=rollback,proto3" json:"rollback,omitempty"`
	PreconditionStates []*ConditionState `protobuf:"bytes,2,rep,name=precondition_states,json=preconditionStates,proto3" json:"precondition_states,omitempty"`
	InvariantStates    []*ConditionState `protobuf:"bytes,3,rep,name=invariant_states,json=invariantStates,proto3" json:"invariant_states,omitempty"`
	// An entity is paused if itself or any of its ancestors have paused field set.
	// Unlike rollback, this field does not get propagated to children.
	// Doing so would make to differentiate unpausing vs. the field not being set,
	// especially if pausing can happen at any layer.
	Paused bool `protobuf:"varint,4,opt,name=paused,proto3" json:"paused,omitempty"`
	// explanation for current status, will have more than one in the event multiple children have the same status
	StatusExplanations []*StatusExplanation `protobuf:"bytes,5,rep,name=status_explanations,json=statusExplanations,proto3" json:"status_explanations,omitempty"`
	// What is DD doing now?
	ActionExplanation    *ActionExplanation     `protobuf:"bytes,6,opt,name=action_explanation,json=actionExplanation,proto3" json:"action_explanation,omitempty"`
	LastFetchedTimestamp *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=last_fetched_timestamp,json=lastFetchedTimestamp,proto3" json:"last_fetched_timestamp,omitempty"`
	LastAppliedTimestamp *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=last_applied_timestamp,json=lastAppliedTimestamp,proto3" json:"last_applied_timestamp,omitempty"`
	MissingApproval      *MissingApproval       `protobuf:"bytes,9,opt,name=missing_approval,json=missingApproval,proto3" json:"missing_approval,omitempty"`
}

func (x *ControlState) Reset() {
	*x = ControlState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlState) ProtoMessage() {}

func (x *ControlState) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlState.ProtoReflect.Descriptor instead.
func (*ControlState) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{16}
}

func (x *ControlState) GetRollback() bool {
	if x != nil {
		return x.Rollback
	}
	return false
}

func (x *ControlState) GetPreconditionStates() []*ConditionState {
	if x != nil {
		return x.PreconditionStates
	}
	return nil
}

func (x *ControlState) GetInvariantStates() []*ConditionState {
	if x != nil {
		return x.InvariantStates
	}
	return nil
}

func (x *ControlState) GetPaused() bool {
	if x != nil {
		return x.Paused
	}
	return false
}

func (x *ControlState) GetStatusExplanations() []*StatusExplanation {
	if x != nil {
		return x.StatusExplanations
	}
	return nil
}

func (x *ControlState) GetActionExplanation() *ActionExplanation {
	if x != nil {
		return x.ActionExplanation
	}
	return nil
}

func (x *ControlState) GetLastFetchedTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.LastFetchedTimestamp
	}
	return nil
}

func (x *ControlState) GetLastAppliedTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.LastAppliedTimestamp
	}
	return nil
}

func (x *ControlState) GetMissingApproval() *MissingApproval {
	if x != nil {
		return x.MissingApproval
	}
	return nil
}

type ManualApprovalState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta        *Metadata            `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	Status      ManualApprovalStatus `protobuf:"varint,2,opt,name=status,proto3,enum=prodvana.desired_state.model.ManualApprovalStatus" json:"status,omitempty"`
	Topic       string               `protobuf:"bytes,3,opt,name=topic,proto3" json:"topic,omitempty"`
	Description string               `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *ManualApprovalState) Reset() {
	*x = ManualApprovalState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManualApprovalState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualApprovalState) ProtoMessage() {}

func (x *ManualApprovalState) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualApprovalState.ProtoReflect.Descriptor instead.
func (*ManualApprovalState) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{17}
}

func (x *ManualApprovalState) GetMeta() *Metadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ManualApprovalState) GetStatus() ManualApprovalStatus {
	if x != nil {
		return x.Status
	}
	return ManualApprovalStatus_PENDING
}

func (x *ManualApprovalState) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *ManualApprovalState) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to StateOneof:
	//
	//	*State_Service
	//	*State_ServiceInstance
	//	*State_ServiceGroup
	//	*State_RuntimeObject
	//	*State_ManualApproval
	//	*State_CustomTask
	//	*State_ProtectionAttachment
	//	*State_ProtectionLink
	//	*State_DeliveryExtension
	StateOneof isState_StateOneof `protobuf_oneof:"state_oneof"`
}

func (x *State) Reset() {
	*x = State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*State) ProtoMessage() {}

func (x *State) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use State.ProtoReflect.Descriptor instead.
func (*State) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{18}
}

func (m *State) GetStateOneof() isState_StateOneof {
	if m != nil {
		return m.StateOneof
	}
	return nil
}

func (x *State) GetService() *ServiceState {
	if x, ok := x.GetStateOneof().(*State_Service); ok {
		return x.Service
	}
	return nil
}

func (x *State) GetServiceInstance() *ServiceInstanceState {
	if x, ok := x.GetStateOneof().(*State_ServiceInstance); ok {
		return x.ServiceInstance
	}
	return nil
}

func (x *State) GetServiceGroup() *ServiceGroupState {
	if x, ok := x.GetStateOneof().(*State_ServiceGroup); ok {
		return x.ServiceGroup
	}
	return nil
}

func (x *State) GetRuntimeObject() *RuntimeObject {
	if x, ok := x.GetStateOneof().(*State_RuntimeObject); ok {
		return x.RuntimeObject
	}
	return nil
}

func (x *State) GetManualApproval() *ManualApprovalState {
	if x, ok := x.GetStateOneof().(*State_ManualApproval); ok {
		return x.ManualApproval
	}
	return nil
}

func (x *State) GetCustomTask() *CustomTaskState {
	if x, ok := x.GetStateOneof().(*State_CustomTask); ok {
		return x.CustomTask
	}
	return nil
}

func (x *State) GetProtectionAttachment() *ProtectionAttachment {
	if x, ok := x.GetStateOneof().(*State_ProtectionAttachment); ok {
		return x.ProtectionAttachment
	}
	return nil
}

func (x *State) GetProtectionLink() *ProtectionLinkState {
	if x, ok := x.GetStateOneof().(*State_ProtectionLink); ok {
		return x.ProtectionLink
	}
	return nil
}

func (x *State) GetDeliveryExtension() *DeliveryExtensionState {
	if x, ok := x.GetStateOneof().(*State_DeliveryExtension); ok {
		return x.DeliveryExtension
	}
	return nil
}

type isState_StateOneof interface {
	isState_StateOneof()
}

type State_Service struct {
	Service *ServiceState `protobuf:"bytes,1,opt,name=service,proto3,oneof"`
}

type State_ServiceInstance struct {
	ServiceInstance *ServiceInstanceState `protobuf:"bytes,2,opt,name=service_instance,json=serviceInstance,proto3,oneof"`
}

type State_ServiceGroup struct {
	ServiceGroup *ServiceGroupState `protobuf:"bytes,3,opt,name=service_group,json=serviceGroup,proto3,oneof"`
}

type State_RuntimeObject struct {
	RuntimeObject *RuntimeObject `protobuf:"bytes,4,opt,name=runtime_object,json=runtimeObject,proto3,oneof"`
}

type State_ManualApproval struct {
	ManualApproval *ManualApprovalState `protobuf:"bytes,5,opt,name=manual_approval,json=manualApproval,proto3,oneof"`
}

type State_CustomTask struct {
	CustomTask *CustomTaskState `protobuf:"bytes,6,opt,name=custom_task,json=customTask,proto3,oneof"`
}

type State_ProtectionAttachment struct {
	ProtectionAttachment *ProtectionAttachment `protobuf:"bytes,7,opt,name=protection_attachment,json=protectionAttachment,proto3,oneof"`
}

type State_ProtectionLink struct {
	ProtectionLink *ProtectionLinkState `protobuf:"bytes,8,opt,name=protection_link,json=protectionLink,proto3,oneof"`
}

type State_DeliveryExtension struct {
	DeliveryExtension *DeliveryExtensionState `protobuf:"bytes,9,opt,name=delivery_extension,json=deliveryExtension,proto3,oneof"`
}

func (*State_Service) isState_StateOneof() {}

func (*State_ServiceInstance) isState_StateOneof() {}

func (*State_ServiceGroup) isState_StateOneof() {}

func (*State_RuntimeObject) isState_StateOneof() {}

func (*State_ManualApproval) isState_StateOneof() {}

func (*State_CustomTask) isState_StateOneof() {}

func (*State_ProtectionAttachment) isState_StateOneof() {}

func (*State_ProtectionLink) isState_StateOneof() {}

func (*State_DeliveryExtension) isState_StateOneof() {}

type Annotations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Annotations []*Annotations_Annotation `protobuf:"bytes,1,rep,name=annotations,proto3" json:"annotations,omitempty"`
}

func (x *Annotations) Reset() {
	*x = Annotations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Annotations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Annotations) ProtoMessage() {}

func (x *Annotations) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Annotations.ProtoReflect.Descriptor instead.
func (*Annotations) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{19}
}

func (x *Annotations) GetAnnotations() []*Annotations_Annotation {
	if x != nil {
		return x.Annotations
	}
	return nil
}

type CustomTaskExecutionState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status                    CustomTaskStatus       `protobuf:"varint,1,opt,name=status,proto3,enum=prodvana.desired_state.model.CustomTaskStatus" json:"status,omitempty"`
	Attempts                  int64                  `protobuf:"varint,2,opt,name=attempts,proto3" json:"attempts,omitempty"`
	LatestAttemptEndTimestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=latest_attempt_end_timestamp,json=latestAttemptEndTimestamp,proto3" json:"latest_attempt_end_timestamp,omitempty"`
}

func (x *CustomTaskExecutionState) Reset() {
	*x = CustomTaskExecutionState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomTaskExecutionState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomTaskExecutionState) ProtoMessage() {}

func (x *CustomTaskExecutionState) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomTaskExecutionState.ProtoReflect.Descriptor instead.
func (*CustomTaskExecutionState) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{20}
}

func (x *CustomTaskExecutionState) GetStatus() CustomTaskStatus {
	if x != nil {
		return x.Status
	}
	return CustomTaskStatus_CUSTOM_TASK_PENDING
}

func (x *CustomTaskExecutionState) GetAttempts() int64 {
	if x != nil {
		return x.Attempts
	}
	return 0
}

func (x *CustomTaskExecutionState) GetLatestAttemptEndTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.LatestAttemptEndTimestamp
	}
	return nil
}

type CustomTaskState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta             *Metadata                    `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	Name             string                       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description      string                       `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Application      string                       `protobuf:"bytes,4,opt,name=application,proto3" json:"application,omitempty"`
	ApplicationId    string                       `protobuf:"bytes,5,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	ReleaseChannel   string                       `protobuf:"bytes,6,opt,name=release_channel,json=releaseChannel,proto3" json:"release_channel,omitempty"`
	ReleaseChannelId string                       `protobuf:"bytes,7,opt,name=release_channel_id,json=releaseChannelId,proto3" json:"release_channel_id,omitempty"`
	Program          *common_config.ProgramConfig `protobuf:"bytes,9,opt,name=program,proto3" json:"program,omitempty"`
	TaskState        *CustomTaskExecutionState    `protobuf:"bytes,12,opt,name=task_state,json=taskState,proto3" json:"task_state,omitempty"`
	// if not set, the custom task will not be retried once it starts executing once.
	RetryConfig *common_config.RetryConfig `protobuf:"bytes,13,opt,name=retry_config,json=retryConfig,proto3" json:"retry_config,omitempty"`
	ServiceIds  []string                   `protobuf:"bytes,14,rep,name=service_ids,json=serviceIds,proto3" json:"service_ids,omitempty"`
}

func (x *CustomTaskState) Reset() {
	*x = CustomTaskState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomTaskState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomTaskState) ProtoMessage() {}

func (x *CustomTaskState) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomTaskState.ProtoReflect.Descriptor instead.
func (*CustomTaskState) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{21}
}

func (x *CustomTaskState) GetMeta() *Metadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *CustomTaskState) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CustomTaskState) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CustomTaskState) GetApplication() string {
	if x != nil {
		return x.Application
	}
	return ""
}

func (x *CustomTaskState) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *CustomTaskState) GetReleaseChannel() string {
	if x != nil {
		return x.ReleaseChannel
	}
	return ""
}

func (x *CustomTaskState) GetReleaseChannelId() string {
	if x != nil {
		return x.ReleaseChannelId
	}
	return ""
}

func (x *CustomTaskState) GetProgram() *common_config.ProgramConfig {
	if x != nil {
		return x.Program
	}
	return nil
}

func (x *CustomTaskState) GetTaskState() *CustomTaskExecutionState {
	if x != nil {
		return x.TaskState
	}
	return nil
}

func (x *CustomTaskState) GetRetryConfig() *common_config.RetryConfig {
	if x != nil {
		return x.RetryConfig
	}
	return nil
}

func (x *CustomTaskState) GetServiceIds() []string {
	if x != nil {
		return x.ServiceIds
	}
	return nil
}

type ProtectionLinkState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta   *Metadata       `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	Status ConditionStatus `protobuf:"varint,2,opt,name=status,proto3,enum=prodvana.desired_state.model.ConditionStatus" json:"status,omitempty"`
	// Copy of ProtectionLink description. Used in FetchState to know retries, durations etc.
	Link *ProtectionLink `protobuf:"bytes,3,opt,name=link,proto3" json:"link,omitempty"`
	// When did we start polling this protection? If not set, this protection has not started polling.
	StartedTimestamp *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=started_timestamp,json=startedTimestamp,proto3" json:"started_timestamp,omitempty"`
	// When did we stop polling this protection? If set, this protection will no longer change status (except to be manually bypassed).
	StoppedTimestamp *timestamppb.Timestamp         `protobuf:"bytes,5,opt,name=stopped_timestamp,json=stoppedTimestamp,proto3" json:"stopped_timestamp,omitempty"`
	StoppedReason    ProtectionLinkState_StopReason `protobuf:"varint,6,opt,name=stopped_reason,json=stoppedReason,proto3,enum=prodvana.desired_state.model.ProtectionLinkState_StopReason" json:"stopped_reason,omitempty"`
	// Will be set the first time this attachment returned success.
	// Useful for time-based protections (post-push - check X succeeds for N mins). We make the ProtectionLink return CONVERGING till time expires.
	FirstSuccessTimestamp *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=first_success_timestamp,json=firstSuccessTimestamp,proto3" json:"first_success_timestamp,omitempty"`
}

func (x *ProtectionLinkState) Reset() {
	*x = ProtectionLinkState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtectionLinkState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtectionLinkState) ProtoMessage() {}

func (x *ProtectionLinkState) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtectionLinkState.ProtoReflect.Descriptor instead.
func (*ProtectionLinkState) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{22}
}

func (x *ProtectionLinkState) GetMeta() *Metadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ProtectionLinkState) GetStatus() ConditionStatus {
	if x != nil {
		return x.Status
	}
	return ConditionStatus_CONDITION_UNKNOWN_STATUS
}

func (x *ProtectionLinkState) GetLink() *ProtectionLink {
	if x != nil {
		return x.Link
	}
	return nil
}

func (x *ProtectionLinkState) GetStartedTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedTimestamp
	}
	return nil
}

func (x *ProtectionLinkState) GetStoppedTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.StoppedTimestamp
	}
	return nil
}

func (x *ProtectionLinkState) GetStoppedReason() ProtectionLinkState_StopReason {
	if x != nil {
		return x.StoppedReason
	}
	return ProtectionLinkState_UNKNOWN
}

func (x *ProtectionLinkState) GetFirstSuccessTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.FirstSuccessTimestamp
	}
	return nil
}

type ProtectionAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta                            *Metadata              `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	Versions                        []*Version             `protobuf:"bytes,2,rep,name=versions,proto3" json:"versions,omitempty"`
	LastCompletedVersions           []*Version             `protobuf:"bytes,5,rep,name=last_completed_versions,json=lastCompletedVersions,proto3" json:"last_completed_versions,omitempty"`
	LastCompletedTimestamp          *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=last_completed_timestamp,json=lastCompletedTimestamp,proto3" json:"last_completed_timestamp,omitempty"`
	LastCompletedStatus             SimpleStatus           `protobuf:"varint,7,opt,name=last_completed_status,json=lastCompletedStatus,proto3,enum=prodvana.desired_state.model.SimpleStatus" json:"last_completed_status,omitempty"`
	LastCompletedStatusExplanations []*StatusExplanation   `protobuf:"bytes,8,rep,name=last_completed_status_explanations,json=lastCompletedStatusExplanations,proto3" json:"last_completed_status_explanations,omitempty"`
	LastCompletedAppliedVersion     string                 `protobuf:"bytes,9,opt,name=last_completed_applied_version,json=lastCompletedAppliedVersion,proto3" json:"last_completed_applied_version,omitempty"`
	ProtectionId                    string                 `protobuf:"bytes,3,opt,name=protection_id,json=protectionId,proto3" json:"protection_id,omitempty"`
	AttachmentId                    string                 `protobuf:"bytes,4,opt,name=attachment_id,json=attachmentId,proto3" json:"attachment_id,omitempty"` // next tag: 9
}

func (x *ProtectionAttachment) Reset() {
	*x = ProtectionAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtectionAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtectionAttachment) ProtoMessage() {}

func (x *ProtectionAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtectionAttachment.ProtoReflect.Descriptor instead.
func (*ProtectionAttachment) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{23}
}

func (x *ProtectionAttachment) GetMeta() *Metadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ProtectionAttachment) GetVersions() []*Version {
	if x != nil {
		return x.Versions
	}
	return nil
}

func (x *ProtectionAttachment) GetLastCompletedVersions() []*Version {
	if x != nil {
		return x.LastCompletedVersions
	}
	return nil
}

func (x *ProtectionAttachment) GetLastCompletedTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.LastCompletedTimestamp
	}
	return nil
}

func (x *ProtectionAttachment) GetLastCompletedStatus() SimpleStatus {
	if x != nil {
		return x.LastCompletedStatus
	}
	return SimpleStatus_SS_UNKNOWN
}

func (x *ProtectionAttachment) GetLastCompletedStatusExplanations() []*StatusExplanation {
	if x != nil {
		return x.LastCompletedStatusExplanations
	}
	return nil
}

func (x *ProtectionAttachment) GetLastCompletedAppliedVersion() string {
	if x != nil {
		return x.LastCompletedAppliedVersion
	}
	return ""
}

func (x *ProtectionAttachment) GetProtectionId() string {
	if x != nil {
		return x.ProtectionId
	}
	return ""
}

func (x *ProtectionAttachment) GetAttachmentId() string {
	if x != nil {
		return x.AttachmentId
	}
	return ""
}

type DeliveryExtensionState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta                            *Metadata                   `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	Versions                        []*Version                  `protobuf:"bytes,2,rep,name=versions,proto3" json:"versions,omitempty"`
	ExtensionId                     string                      `protobuf:"bytes,3,opt,name=extension_id,json=extensionId,proto3" json:"extension_id,omitempty"`
	ExtensionInstanceId             string                      `protobuf:"bytes,10,opt,name=extension_instance_id,json=extensionInstanceId,proto3" json:"extension_instance_id,omitempty"`
	Lifecycle                       common_config.TaskLifecycle `protobuf:"varint,11,opt,name=lifecycle,proto3,enum=prodvana.common_config.TaskLifecycle" json:"lifecycle,omitempty"`
	LastCompletedTimestamp          *timestamppb.Timestamp      `protobuf:"bytes,6,opt,name=last_completed_timestamp,json=lastCompletedTimestamp,proto3" json:"last_completed_timestamp,omitempty"`
	LastCompletedStatus             SimpleStatus                `protobuf:"varint,7,opt,name=last_completed_status,json=lastCompletedStatus,proto3,enum=prodvana.desired_state.model.SimpleStatus" json:"last_completed_status,omitempty"`
	LastCompletedStatusExplanations []*StatusExplanation        `protobuf:"bytes,8,rep,name=last_completed_status_explanations,json=lastCompletedStatusExplanations,proto3" json:"last_completed_status_explanations,omitempty"`
	LastCompletedAppliedVersion     string                      `protobuf:"bytes,9,opt,name=last_completed_applied_version,json=lastCompletedAppliedVersion,proto3" json:"last_completed_applied_version,omitempty"`
	References                      []*Identifier               `protobuf:"bytes,12,rep,name=references,proto3" json:"references,omitempty"`
	Status                          ConditionStatus             `protobuf:"varint,13,opt,name=status,proto3,enum=prodvana.desired_state.model.ConditionStatus" json:"status,omitempty"` // next tag: 14
}

func (x *DeliveryExtensionState) Reset() {
	*x = DeliveryExtensionState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliveryExtensionState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliveryExtensionState) ProtoMessage() {}

func (x *DeliveryExtensionState) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliveryExtensionState.ProtoReflect.Descriptor instead.
func (*DeliveryExtensionState) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{24}
}

func (x *DeliveryExtensionState) GetMeta() *Metadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *DeliveryExtensionState) GetVersions() []*Version {
	if x != nil {
		return x.Versions
	}
	return nil
}

func (x *DeliveryExtensionState) GetExtensionId() string {
	if x != nil {
		return x.ExtensionId
	}
	return ""
}

func (x *DeliveryExtensionState) GetExtensionInstanceId() string {
	if x != nil {
		return x.ExtensionInstanceId
	}
	return ""
}

func (x *DeliveryExtensionState) GetLifecycle() common_config.TaskLifecycle {
	if x != nil {
		return x.Lifecycle
	}
	return common_config.TaskLifecycle(0)
}

func (x *DeliveryExtensionState) GetLastCompletedTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.LastCompletedTimestamp
	}
	return nil
}

func (x *DeliveryExtensionState) GetLastCompletedStatus() SimpleStatus {
	if x != nil {
		return x.LastCompletedStatus
	}
	return SimpleStatus_SS_UNKNOWN
}

func (x *DeliveryExtensionState) GetLastCompletedStatusExplanations() []*StatusExplanation {
	if x != nil {
		return x.LastCompletedStatusExplanations
	}
	return nil
}

func (x *DeliveryExtensionState) GetLastCompletedAppliedVersion() string {
	if x != nil {
		return x.LastCompletedAppliedVersion
	}
	return ""
}

func (x *DeliveryExtensionState) GetReferences() []*Identifier {
	if x != nil {
		return x.References
	}
	return nil
}

func (x *DeliveryExtensionState) GetStatus() ConditionStatus {
	if x != nil {
		return x.Status
	}
	return ConditionStatus_CONDITION_UNKNOWN_STATUS
}

type Signal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type SignalType `protobuf:"varint,1,opt,name=type,proto3,enum=prodvana.desired_state.model.SignalType" json:"type,omitempty"`
	// Types that are assignable to Config:
	//
	//	*Signal_DeliveryPromotion
	//	*Signal_ProtectionBypass_
	//	*Signal_RuntimeExtensionApproval_
	Config isSignal_Config `protobuf_oneof:"config"`
}

func (x *Signal) Reset() {
	*x = Signal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Signal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signal) ProtoMessage() {}

func (x *Signal) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signal.ProtoReflect.Descriptor instead.
func (*Signal) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{25}
}

func (x *Signal) GetType() SignalType {
	if x != nil {
		return x.Type
	}
	return SignalType_SIGNAL_UNKNOWN
}

func (m *Signal) GetConfig() isSignal_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *Signal) GetDeliveryPromotion() *Signal_DeliveryPromotionConfig {
	if x, ok := x.GetConfig().(*Signal_DeliveryPromotion); ok {
		return x.DeliveryPromotion
	}
	return nil
}

func (x *Signal) GetProtectionBypass() *Signal_ProtectionBypass {
	if x, ok := x.GetConfig().(*Signal_ProtectionBypass_); ok {
		return x.ProtectionBypass
	}
	return nil
}

func (x *Signal) GetRuntimeExtensionApproval() *Signal_RuntimeExtensionApproval {
	if x, ok := x.GetConfig().(*Signal_RuntimeExtensionApproval_); ok {
		return x.RuntimeExtensionApproval
	}
	return nil
}

type isSignal_Config interface {
	isSignal_Config()
}

type Signal_DeliveryPromotion struct {
	DeliveryPromotion *Signal_DeliveryPromotionConfig `protobuf:"bytes,2,opt,name=delivery_promotion,json=deliveryPromotion,proto3,oneof"`
}

type Signal_ProtectionBypass_ struct {
	ProtectionBypass *Signal_ProtectionBypass `protobuf:"bytes,3,opt,name=protection_bypass,json=protectionBypass,proto3,oneof"`
}

type Signal_RuntimeExtensionApproval_ struct {
	RuntimeExtensionApproval *Signal_RuntimeExtensionApproval `protobuf:"bytes,4,opt,name=runtime_extension_approval,json=runtimeExtensionApproval,proto3,oneof"`
}

func (*Signal_DeliveryPromotion) isSignal_Config() {}

func (*Signal_ProtectionBypass_) isSignal_Config() {}

func (*Signal_RuntimeExtensionApproval_) isSignal_Config() {}

type DebugLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts  *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"`
	Log string                 `protobuf:"bytes,2,opt,name=log,proto3" json:"log,omitempty"`
}

func (x *DebugLog) Reset() {
	*x = DebugLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugLog) ProtoMessage() {}

func (x *DebugLog) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugLog.ProtoReflect.Descriptor instead.
func (*DebugLog) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{26}
}

func (x *DebugLog) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *DebugLog) GetLog() string {
	if x != nil {
		return x.Log
	}
	return ""
}

type MissingApproval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DesiredStateId string     `protobuf:"bytes,1,opt,name=desired_state_id,json=desiredStateId,proto3" json:"desired_state_id,omitempty"`
	SignalType     SignalType `protobuf:"varint,2,opt,name=signal_type,json=signalType,proto3,enum=prodvana.desired_state.model.SignalType" json:"signal_type,omitempty"`
	Topic          string     `protobuf:"bytes,3,opt,name=topic,proto3" json:"topic,omitempty"`
}

func (x *MissingApproval) Reset() {
	*x = MissingApproval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MissingApproval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MissingApproval) ProtoMessage() {}

func (x *MissingApproval) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MissingApproval.ProtoReflect.Descriptor instead.
func (*MissingApproval) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{27}
}

func (x *MissingApproval) GetDesiredStateId() string {
	if x != nil {
		return x.DesiredStateId
	}
	return ""
}

func (x *MissingApproval) GetSignalType() SignalType {
	if x != nil {
		return x.SignalType
	}
	return SignalType_SIGNAL_UNKNOWN
}

func (x *MissingApproval) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

type ApplyRejected struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Reason:
	//
	//	*ApplyRejected_MissingApproval
	Reason isApplyRejected_Reason `protobuf_oneof:"reason"`
}

func (x *ApplyRejected) Reset() {
	*x = ApplyRejected{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyRejected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyRejected) ProtoMessage() {}

func (x *ApplyRejected) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyRejected.ProtoReflect.Descriptor instead.
func (*ApplyRejected) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{28}
}

func (m *ApplyRejected) GetReason() isApplyRejected_Reason {
	if m != nil {
		return m.Reason
	}
	return nil
}

func (x *ApplyRejected) GetMissingApproval() *MissingApproval {
	if x, ok := x.GetReason().(*ApplyRejected_MissingApproval); ok {
		return x.MissingApproval
	}
	return nil
}

type isApplyRejected_Reason interface {
	isApplyRejected_Reason()
}

type ApplyRejected_MissingApproval struct {
	// Cannot apply because this entity requires additional approval.
	MissingApproval *MissingApproval `protobuf:"bytes,1,opt,name=missing_approval,json=missingApproval,proto3,oneof"` // TODO: Add reasons like paused entities.
}

func (*ApplyRejected_MissingApproval) isApplyRejected_Reason() {}

// TODO(naphat) conditions need health
type Condition_ReleaseChannelStableCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Application      string `protobuf:"bytes,1,opt,name=application,proto3" json:"application,omitempty"`
	Service          string `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`                                             // service name or id
	ServiceId        string `protobuf:"bytes,3,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`                        // service id, normalized. Set internally by Prodvana
	ReleaseChannel   string `protobuf:"bytes,4,opt,name=release_channel,json=releaseChannel,proto3" json:"release_channel,omitempty"`         // release channel name or id
	ReleaseChannelId string `protobuf:"bytes,5,opt,name=release_channel_id,json=releaseChannelId,proto3" json:"release_channel_id,omitempty"` // release channel id, normalized. Set internally by Prodvana
	ServiceVersion   string `protobuf:"bytes,6,opt,name=service_version,json=serviceVersion,proto3" json:"service_version,omitempty"`
}

func (x *Condition_ReleaseChannelStableCondition) Reset() {
	*x = Condition_ReleaseChannelStableCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition_ReleaseChannelStableCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition_ReleaseChannelStableCondition) ProtoMessage() {}

func (x *Condition_ReleaseChannelStableCondition) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition_ReleaseChannelStableCondition.ProtoReflect.Descriptor instead.
func (*Condition_ReleaseChannelStableCondition) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Condition_ReleaseChannelStableCondition) GetApplication() string {
	if x != nil {
		return x.Application
	}
	return ""
}

func (x *Condition_ReleaseChannelStableCondition) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *Condition_ReleaseChannelStableCondition) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *Condition_ReleaseChannelStableCondition) GetReleaseChannel() string {
	if x != nil {
		return x.ReleaseChannel
	}
	return ""
}

func (x *Condition_ReleaseChannelStableCondition) GetReleaseChannelId() string {
	if x != nil {
		return x.ReleaseChannelId
	}
	return ""
}

func (x *Condition_ReleaseChannelStableCondition) GetServiceVersion() string {
	if x != nil {
		return x.ServiceVersion
	}
	return ""
}

type Condition_ManualApproval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic       string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *Condition_ManualApproval) Reset() {
	*x = Condition_ManualApproval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition_ManualApproval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition_ManualApproval) ProtoMessage() {}

func (x *Condition_ManualApproval) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition_ManualApproval.ProtoReflect.Descriptor instead.
func (*Condition_ManualApproval) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{1, 1}
}

func (x *Condition_ManualApproval) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *Condition_ManualApproval) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type Condition_CustomTaskSuccessfulCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomTaskName string `protobuf:"bytes,1,opt,name=custom_task_name,json=customTaskName,proto3" json:"custom_task_name,omitempty"`
	// Types that are assignable to Source:
	//
	//	*Condition_CustomTaskSuccessfulCondition_Protection_
	Source isCondition_CustomTaskSuccessfulCondition_Source `protobuf_oneof:"source"`
}

func (x *Condition_CustomTaskSuccessfulCondition) Reset() {
	*x = Condition_CustomTaskSuccessfulCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition_CustomTaskSuccessfulCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition_CustomTaskSuccessfulCondition) ProtoMessage() {}

func (x *Condition_CustomTaskSuccessfulCondition) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition_CustomTaskSuccessfulCondition.ProtoReflect.Descriptor instead.
func (*Condition_CustomTaskSuccessfulCondition) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{1, 2}
}

func (x *Condition_CustomTaskSuccessfulCondition) GetCustomTaskName() string {
	if x != nil {
		return x.CustomTaskName
	}
	return ""
}

func (m *Condition_CustomTaskSuccessfulCondition) GetSource() isCondition_CustomTaskSuccessfulCondition_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *Condition_CustomTaskSuccessfulCondition) GetProtection() *Condition_CustomTaskSuccessfulCondition_Protection {
	if x, ok := x.GetSource().(*Condition_CustomTaskSuccessfulCondition_Protection_); ok {
		return x.Protection
	}
	return nil
}

type isCondition_CustomTaskSuccessfulCondition_Source interface {
	isCondition_CustomTaskSuccessfulCondition_Source()
}

type Condition_CustomTaskSuccessfulCondition_Protection_ struct {
	Protection *Condition_CustomTaskSuccessfulCondition_Protection `protobuf:"bytes,2,opt,name=protection,proto3,oneof"`
}

func (*Condition_CustomTaskSuccessfulCondition_Protection_) isCondition_CustomTaskSuccessfulCondition_Source() {
}

type Condition_CustomTaskSuccessfulCondition_Protection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	TaskType CustomTaskType `protobuf:"varint,3,opt,name=task_type,json=taskType,proto3,enum=prodvana.desired_state.model.CustomTaskType" json:"task_type,omitempty"`
}

func (x *Condition_CustomTaskSuccessfulCondition_Protection) Reset() {
	*x = Condition_CustomTaskSuccessfulCondition_Protection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition_CustomTaskSuccessfulCondition_Protection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition_CustomTaskSuccessfulCondition_Protection) ProtoMessage() {}

func (x *Condition_CustomTaskSuccessfulCondition_Protection) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition_CustomTaskSuccessfulCondition_Protection.ProtoReflect.Descriptor instead.
func (*Condition_CustomTaskSuccessfulCondition_Protection) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{1, 2, 0}
}

func (x *Condition_CustomTaskSuccessfulCondition_Protection) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Condition_CustomTaskSuccessfulCondition_Protection) GetTaskType() CustomTaskType {
	if x != nil {
		return x.TaskType
	}
	return CustomTaskType_CUSTOM_TASK_TYPE_UNKNOWN
}

type RuntimeObject_RuntimeExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// aggregate object will have all commands set. Fetcher will only have fetch set.
	Apply            *environment.CompiledExtensionCommand `protobuf:"bytes,3,opt,name=apply,proto3" json:"apply,omitempty"`
	Fetch            *environment.CompiledExtensionCommand `protobuf:"bytes,1,opt,name=fetch,proto3" json:"fetch,omitempty"`
	FetchInterval    *durationpb.Duration                  `protobuf:"bytes,4,opt,name=fetch_interval,json=fetchInterval,proto3" json:"fetch_interval,omitempty"`
	FetchTimeout     *durationpb.Duration                  `protobuf:"bytes,5,opt,name=fetch_timeout,json=fetchTimeout,proto3" json:"fetch_timeout,omitempty"`
	ServiceId        string                                `protobuf:"bytes,2,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	ReleaseChannelId string                                `protobuf:"bytes,6,opt,name=release_channel_id,json=releaseChannelId,proto3" json:"release_channel_id,omitempty"`
	Parameters       []*common_config.ParameterDefinition  `protobuf:"bytes,7,rep,name=parameters,proto3" json:"parameters,omitempty"`
	ParameterValues  []*common_config.ParameterValue       `protobuf:"bytes,8,rep,name=parameter_values,json=parameterValues,proto3" json:"parameter_values,omitempty"`
	Type             environment.ExtensionType             `protobuf:"varint,9,opt,name=type,proto3,enum=prodvana.environment.ExtensionType" json:"type,omitempty"` // next tag: 10
}

func (x *RuntimeObject_RuntimeExtension) Reset() {
	*x = RuntimeObject_RuntimeExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuntimeObject_RuntimeExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeObject_RuntimeExtension) ProtoMessage() {}

func (x *RuntimeObject_RuntimeExtension) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeObject_RuntimeExtension.ProtoReflect.Descriptor instead.
func (*RuntimeObject_RuntimeExtension) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{14, 0}
}

func (x *RuntimeObject_RuntimeExtension) GetApply() *environment.CompiledExtensionCommand {
	if x != nil {
		return x.Apply
	}
	return nil
}

func (x *RuntimeObject_RuntimeExtension) GetFetch() *environment.CompiledExtensionCommand {
	if x != nil {
		return x.Fetch
	}
	return nil
}

func (x *RuntimeObject_RuntimeExtension) GetFetchInterval() *durationpb.Duration {
	if x != nil {
		return x.FetchInterval
	}
	return nil
}

func (x *RuntimeObject_RuntimeExtension) GetFetchTimeout() *durationpb.Duration {
	if x != nil {
		return x.FetchTimeout
	}
	return nil
}

func (x *RuntimeObject_RuntimeExtension) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *RuntimeObject_RuntimeExtension) GetReleaseChannelId() string {
	if x != nil {
		return x.ReleaseChannelId
	}
	return ""
}

func (x *RuntimeObject_RuntimeExtension) GetParameters() []*common_config.ParameterDefinition {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *RuntimeObject_RuntimeExtension) GetParameterValues() []*common_config.ParameterValue {
	if x != nil {
		return x.ParameterValues
	}
	return nil
}

func (x *RuntimeObject_RuntimeExtension) GetType() environment.ExtensionType {
	if x != nil {
		return x.Type
	}
	return environment.ExtensionType(0)
}

type Annotations_Annotation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Annotations_Annotation) Reset() {
	*x = Annotations_Annotation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Annotations_Annotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Annotations_Annotation) ProtoMessage() {}

func (x *Annotations_Annotation) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Annotations_Annotation.ProtoReflect.Descriptor instead.
func (*Annotations_Annotation) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{19, 0}
}

func (x *Annotations_Annotation) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Annotations_Annotation) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Signal_DeliveryPromotionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// which canary progress stage to promote
	Stage int64 `protobuf:"varint,1,opt,name=stage,proto3" json:"stage,omitempty"`
	// when true, indicates delivery should be promoted fully, e.g. 100%
	Full bool `protobuf:"varint,2,opt,name=full,proto3" json:"full,omitempty"`
}

func (x *Signal_DeliveryPromotionConfig) Reset() {
	*x = Signal_DeliveryPromotionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Signal_DeliveryPromotionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signal_DeliveryPromotionConfig) ProtoMessage() {}

func (x *Signal_DeliveryPromotionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signal_DeliveryPromotionConfig.ProtoReflect.Descriptor instead.
func (*Signal_DeliveryPromotionConfig) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{25, 0}
}

func (x *Signal_DeliveryPromotionConfig) GetStage() int64 {
	if x != nil {
		return x.Stage
	}
	return 0
}

func (x *Signal_DeliveryPromotionConfig) GetFull() bool {
	if x != nil {
		return x.Full
	}
	return false
}

type Signal_ProtectionBypass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Signal_ProtectionBypass) Reset() {
	*x = Signal_ProtectionBypass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Signal_ProtectionBypass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signal_ProtectionBypass) ProtoMessage() {}

func (x *Signal_ProtectionBypass) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signal_ProtectionBypass.ProtoReflect.Descriptor instead.
func (*Signal_ProtectionBypass) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{25, 1}
}

type Signal_RuntimeExtensionApproval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// When was the approval issued?
	// If this is after last run timestamp, apply can proceed.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Reject    bool                   `protobuf:"varint,2,opt,name=reject,proto3" json:"reject,omitempty"`
}

func (x *Signal_RuntimeExtensionApproval) Reset() {
	*x = Signal_RuntimeExtensionApproval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Signal_RuntimeExtensionApproval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signal_RuntimeExtensionApproval) ProtoMessage() {}

func (x *Signal_RuntimeExtensionApproval) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_desired_state_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signal_RuntimeExtensionApproval.ProtoReflect.Descriptor instead.
func (*Signal_RuntimeExtensionApproval) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP(), []int{25, 2}
}

func (x *Signal_RuntimeExtensionApproval) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Signal_RuntimeExtensionApproval) GetReject() bool {
	if x != nil {
		return x.Reject
	}
	return false
}

var File_prodvana_desired_state_model_desired_state_proto protoreflect.FileDescriptor

var file_prodvana_desired_state_model_desired_state_proto_rawDesc = []byte{
	0x0a, 0x30, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x64, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x64,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x1c, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x70, 0x72, 0x6f, 0x64,
	0x76, 0x61, 0x6e, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x70,
	0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x23, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x89, 0x01, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x46, 0x0a, 0x09, 0x6c, 0x69, 0x66, 0x65,
	0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x66, 0x65,
	0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x09, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x02, 0x10,
	0x03, 0x22, 0xef, 0x07, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x60, 0x0a, 0x07, 0x72, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x45, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x72, 0x63, 0x43, 0x6f, 0x6e,
	0x64, 0x12, 0x61, 0x0a, 0x0f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x48, 0x00, 0x52, 0x0e, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x12, 0x68, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x74,
	0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x28,
	0x0a, 0x10, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x1a, 0xfa, 0x01, 0x0a, 0x1d, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2c,
	0x0a, 0x12, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x48, 0x0a, 0x0e, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0xb4, 0x02, 0x0a, 0x1d, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x72, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x50, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54,
	0x61, 0x73, 0x6b, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x6b, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x49, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xc3, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x09, 0x6c, 0x69,
	0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x66, 0x65, 0x63,
	0x79, 0x63, 0x6c, 0x65, 0x52, 0x09, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x12,
	0x48, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x58, 0x0a, 0x0a, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61,
	0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x8a, 0x05, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x4d, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61,
	0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0d, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x47, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x69, 0x6e,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x04, 0x73, 0x65, 0x6c, 0x66,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e,
	0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x04, 0x73, 0x65, 0x6c, 0x66, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64,
	0x12, 0x31, 0x0a, 0x15, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x72, 0x6f, 0x6f, 0x74, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x49, 0x64, 0x12, 0x57, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x0f, 0x70, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x60, 0x0a, 0x13,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a,
	0x0a, 0x1a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x73,
	0x65, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x16, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x74, 0x42, 0x79, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x1d, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x62,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1a, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4a, 0x04, 0x08,
	0x07, 0x10, 0x08, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0xd1, 0x01, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x61,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61,
	0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x42, 0x0a, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x22, 0xa4, 0x01, 0x0a, 0x11, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x12, 0x49, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xb2, 0x02, 0x0a, 0x07,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x2d, 0x0a,
	0x12, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x41, 0x0a, 0x0e,
	0x70, 0x75, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0d, 0x70, 0x75, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x64, 0x69, 0x72, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x64, 0x69, 0x72, 0x74, 0x79, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x07,
	0x10, 0x08, 0x52, 0x09, 0x75, 0x6e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x52, 0x11, 0x75,
	0x6e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73,
	0x22, 0xfe, 0x03, 0x0a, 0x14, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61,
	0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x50, 0x0a, 0x10, 0x72, 0x6f,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x72, 0x6f, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x47, 0x0a, 0x08, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x22, 0xc9, 0x03, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x20,
	0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x5d, 0x0a, 0x10, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x50, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x65, 0x0a, 0x13, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61,
	0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x12, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x22, 0xd6, 0x02,
	0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12,
	0x46, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x65, 0x0a, 0x13, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e,
	0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x12, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x22, 0xdd, 0x02, 0x0a, 0x13, 0x43, 0x61, 0x6e, 0x61, 0x72,
	0x79, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x50,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x61,
	0x6e, 0x61, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x2e, 0x0a, 0x0d, 0x63, 0x61, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x64,
	0x28, 0x00, 0x52, 0x0c, 0x63, 0x61, 0x6e, 0x61, 0x72, 0x79, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x15, 0x70, 0x61, 0x75, 0x73, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x13, 0x70, 0x61, 0x75, 0x73, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x3d, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x50,
	0x41, 0x55, 0x53, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c,
	0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x22, 0xdb, 0x03, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x49, 0x64, 0x12, 0x4a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5a, 0x0a, 0x0f, 0x63, 0x61, 0x6e, 0x61,
	0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x43, 0x61, 0x6e, 0x61, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x63, 0x61, 0x6e, 0x61, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x72, 0x75,
	0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x69, 0x72, 0x73, 0x74, 0x52, 0x75,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x71, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45,
	0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x59, 0x10, 0x03, 0x12, 0x14,
	0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x48, 0x45, 0x41, 0x4c, 0x54,
	0x48, 0x59, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03,
	0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x05,
	0x10, 0x06, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x0a, 0x4a, 0x04,
	0x08, 0x0a, 0x10, 0x0b, 0x22, 0x4d, 0x0a, 0x1b, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x69, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x64, 0x69, 0x72, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0xf2, 0x0c, 0x0a, 0x0d, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x3a, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e,
	0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61,
	0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x50, 0x0a, 0x10, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x08, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61,
	0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x12, 0x29,
	0x0a, 0x10, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74,
	0x69, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x41, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x12, 0x3b, 0x0a, 0x1a, 0x64, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x72,
	0x74, 0x79, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x64,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x72,
	0x74, 0x79, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x69, 0x0a, 0x11, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x08, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x49, 0x64, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x13, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x09, 0x65, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x41,
	0x0a, 0x1d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x1a, 0xc6, 0x04, 0x0a, 0x10, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61,
	0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x05, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x44, 0x0a, 0x05,
	0x66, 0x65, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x05, 0x66, 0x65, 0x74,
	0x63, 0x68, 0x12, 0x40, 0x0a, 0x0e, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x66, 0x65, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x3e, 0x0a, 0x0d, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x66, 0x65, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x12, 0x4b, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x51,
	0x0a, 0x10, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x30, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10,
	0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x43, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x09,
	0x10, 0x0a, 0x4a, 0x04, 0x08, 0x0b, 0x10, 0x0c, 0x4a, 0x04, 0x08, 0x0e, 0x10, 0x0f, 0x4a, 0x04,
	0x08, 0x11, 0x10, 0x12, 0x4a, 0x04, 0x08, 0x16, 0x10, 0x17, 0x52, 0x0e, 0x75, 0x6e, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x79, 0x5f, 0x70, 0x6f, 0x64, 0x73, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x52, 0x10, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x22, 0x57, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x45, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0xba, 0x05, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x5d,
	0x0a, 0x13, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x12, 0x70, 0x72, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x57, 0x0a,
	0x10, 0x69, 0x6e, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61,
	0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x75, 0x73, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x61, 0x75, 0x73, 0x65, 0x64, 0x12, 0x60,
	0x0a, 0x13, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x5e, 0x0a, 0x12, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x61,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x50, 0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x14, 0x6c, 0x61,
	0x73, 0x74, 0x46, 0x65, 0x74, 0x63, 0x68, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x50, 0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x14,
	0x6c, 0x61, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x58, 0x0a, 0x10, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x0f, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x22, 0xd5,
	0x01, 0x0a, 0x13, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x12, 0x4a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xcd, 0x06, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x46, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5f, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x56, 0x0a, 0x0d, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x54, 0x0a, 0x0e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x5c, 0x0a, 0x0f, 0x6d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x50, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x74, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x69, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e,
	0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x14, 0x70, 0x72,
	0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x5c, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b,
	0x12, 0x65, 0x0a, 0x12, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x48, 0x00, 0x52, 0x11, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x22, 0x9b, 0x01, 0x0a, 0x0b, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x56, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x34,
	0x0a, 0x0a, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xdb, 0x01, 0x0a, 0x18, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54,
	0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x5b, 0x0a, 0x1c, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x19, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x41,
	0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x22, 0xd2, 0x04, 0x0a, 0x0f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x61, 0x73,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x29, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x12,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x07, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x55, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54,
	0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x0c,
	0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x74, 0x72,
	0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x73, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x4a, 0x04, 0x08, 0x0a, 0x10,
	0x0b, 0x4a, 0x04, 0x08, 0x0b, 0x10, 0x0c, 0x22, 0xc9, 0x05, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x3a, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x45, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x40, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x04,
	0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x47, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x47, 0x0a,
	0x11, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x63, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65,
	0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74,
	0x6f, 0x70, 0x70, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x17, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x15, 0x66, 0x69, 0x72, 0x73, 0x74, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22,
	0xa1, 0x01, 0x0a, 0x0a, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x4c,
	0x49, 0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x55, 0x43, 0x43, 0x45, 0x45, 0x44, 0x45,
	0x44, 0x5f, 0x4f, 0x4e, 0x43, 0x45, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x45, 0x44, 0x45, 0x44, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x49, 0x4d, 0x45, 0x44, 0x5f, 0x4f, 0x55,
	0x54, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12,
	0x0b, 0x0a, 0x07, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11,
	0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x42, 0x59, 0x50, 0x41, 0x53, 0x53, 0x45,
	0x44, 0x10, 0x07, 0x22, 0xb7, 0x05, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x41, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5d, 0x0a, 0x17, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x54, 0x0a, 0x18, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x5e, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x13, 0x6c, 0x61, 0x73,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x7c, 0x0a, 0x22, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1f, 0x6c,
	0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x43,
	0x0a, 0x1e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xbd, 0x06,
	0x0a, 0x16, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e,
	0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x12, 0x41, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e,
	0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x43,
	0x0a, 0x09, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c,
	0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x09, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79,
	0x63, 0x6c, 0x65, 0x12, 0x54, 0x0a, 0x18, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x5e, 0x0a, 0x15, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x7c, 0x0a, 0x22, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61,
	0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x61,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1f, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x61,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x43, 0x0a, 0x1e, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1b, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x0a,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e,
	0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xeb, 0x04,
	0x0a, 0x06, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e,
	0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x6d, 0x0a, 0x12, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x48, 0x00, 0x52, 0x11, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x64, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x79, 0x70, 0x61, 0x73, 0x73, 0x48, 0x00, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x70, 0x61, 0x73, 0x73, 0x12, 0x7d, 0x0a, 0x1a, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x48, 0x00,
	0x52, 0x18, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x1a, 0x43, 0x0a, 0x17, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66,
	0x75, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x66, 0x75, 0x6c, 0x6c, 0x1a,
	0x12, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x70,
	0x61, 0x73, 0x73, 0x1a, 0x6c, 0x0a, 0x18, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12,
	0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x48, 0x0a, 0x08, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x4c, 0x6f, 0x67, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x02, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6c, 0x6f, 0x67, 0x22, 0x9c, 0x01, 0x0a, 0x0f, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x22, 0x75, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x5a, 0x0a, 0x10, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d,
	0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x48, 0x00,
	0x52, 0x0f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2a, 0xcb, 0x01, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x01, 0x12, 0x14,
	0x0a, 0x10, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e,
	0x43, 0x45, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x55, 0x4e, 0x54, 0x49,
	0x4d, 0x45, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x4d,
	0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x10, 0x05,
	0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x10,
	0x06, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x41, 0x54, 0x54, 0x41, 0x43, 0x48, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f,
	0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10,
	0x08, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x45, 0x58,
	0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x09, 0x2a, 0x9a, 0x01, 0x0a, 0x0e, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18,
	0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x52,
	0x45, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x10, 0x02, 0x12,
	0x16, 0x0a, 0x12, 0x50, 0x4f, 0x53, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c,
	0x5f, 0x54, 0x41, 0x53, 0x4b, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x45, 0x50, 0x4c, 0x4f,
	0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14,
	0x50, 0x4f, 0x53, 0x54, 0x5f, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x41, 0x53, 0x4b, 0x10, 0x05, 0x2a, 0xfd, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x47,
	0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x47,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03,
	0x12, 0x10, 0x0a, 0x0c, 0x52, 0x4f, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x42, 0x41, 0x43, 0x4b,
	0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x42, 0x41, 0x43,
	0x4b, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x52, 0x4f,
	0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x0c, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x41, 0x55, 0x53,
	0x45, 0x44, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x5f, 0x50, 0x41,
	0x55, 0x53, 0x45, 0x44, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e,
	0x47, 0x5f, 0x50, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10,
	0x08, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x44, 0x10, 0x09, 0x12,
	0x1b, 0x0a, 0x17, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41,
	0x4c, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x10, 0x0a, 0x12, 0x0b, 0x0a, 0x07,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x45,
	0x56, 0x49, 0x45, 0x57, 0x10, 0x0d, 0x2a, 0x6f, 0x0a, 0x0c, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x53, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x53, 0x5f, 0x43, 0x4f, 0x4e,
	0x56, 0x45, 0x52, 0x47, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x53, 0x5f,
	0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x47, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x53,
	0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x53,
	0x5f, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x41, 0x50, 0x50,
	0x52, 0x4f, 0x56, 0x41, 0x4c, 0x10, 0x04, 0x2a, 0xff, 0x01, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10,
	0x4e, 0x4f, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48,
	0x59, 0x5f, 0x50, 0x4f, 0x44, 0x53, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x4f, 0x44, 0x53, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x56,
	0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10,
	0x05, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x4f, 0x42, 0x4a,
	0x45, 0x43, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14,
	0x50, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0x07, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c,
	0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x55, 0x43, 0x4b, 0x5f, 0x45, 0x4e,
	0x54, 0x49, 0x54, 0x59, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x44, 0x49, 0x52, 0x54, 0x59, 0x10, 0x0a, 0x2a, 0x72, 0x0a, 0x0a, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x18, 0x0a, 0x14, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x41, 0x50, 0x50, 0x4c, 0x59, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x2a, 0x96, 0x01,
	0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x00, 0x12,
	0x15, 0x0a, 0x11, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x41, 0x54, 0x49, 0x53, 0x46, 0x49, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x1f, 0x0a, 0x1b, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x4e,
	0x55, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x42, 0x59, 0x50, 0x41, 0x53, 0x53, 0x45, 0x44, 0x10, 0x03,
	0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x2a, 0x3f, 0x0a, 0x14, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b,
	0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41,
	0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4a,
	0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x85, 0x01, 0x0a, 0x10, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x13,
	0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x50, 0x45, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f,
	0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x46, 0x55, 0x4c, 0x10,
	0x01, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x54, 0x41, 0x53, 0x4b,
	0x5f, 0x52, 0x45, 0x54, 0x52, 0x49, 0x45, 0x53, 0x5f, 0x45, 0x58, 0x48, 0x41, 0x55, 0x53, 0x54,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x54,
	0x41, 0x53, 0x4b, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x44, 0x5f, 0x4f, 0x55, 0x54, 0x10, 0x03, 0x2a,
	0x8b, 0x01, 0x0a, 0x0a, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x0e, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x50,
	0x52, 0x4f, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x52,
	0x4f, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x59, 0x50, 0x41, 0x53, 0x53, 0x10,
	0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x45, 0x58, 0x54,
	0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x10,
	0x03, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x5f, 0x4d, 0x41, 0x4e, 0x55,
	0x41, 0x4c, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x10, 0x04, 0x42, 0x58, 0x5a,
	0x56, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x64,
	0x76, 0x61, 0x6e, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2d, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61,
	0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_prodvana_desired_state_model_desired_state_proto_rawDescOnce sync.Once
	file_prodvana_desired_state_model_desired_state_proto_rawDescData = file_prodvana_desired_state_model_desired_state_proto_rawDesc
)

func file_prodvana_desired_state_model_desired_state_proto_rawDescGZIP() []byte {
	file_prodvana_desired_state_model_desired_state_proto_rawDescOnce.Do(func() {
		file_prodvana_desired_state_model_desired_state_proto_rawDescData = protoimpl.X.CompressGZIP(file_prodvana_desired_state_model_desired_state_proto_rawDescData)
	})
	return file_prodvana_desired_state_model_desired_state_proto_rawDescData
}

var file_prodvana_desired_state_model_desired_state_proto_enumTypes = make([]protoimpl.EnumInfo, 14)
var file_prodvana_desired_state_model_desired_state_proto_msgTypes = make([]protoimpl.MessageInfo, 38)
var file_prodvana_desired_state_model_desired_state_proto_goTypes = []interface{}{
	(Type)(0),                                       // 0: prodvana.desired_state.model.Type
	(CustomTaskType)(0),                             // 1: prodvana.desired_state.model.CustomTaskType
	(Status)(0),                                     // 2: prodvana.desired_state.model.Status
	(SimpleStatus)(0),                               // 3: prodvana.desired_state.model.SimpleStatus
	(StatusReason)(0),                               // 4: prodvana.desired_state.model.StatusReason
	(ActionType)(0),                                 // 5: prodvana.desired_state.model.ActionType
	(ConditionStatus)(0),                            // 6: prodvana.desired_state.model.ConditionStatus
	(ManualApprovalStatus)(0),                       // 7: prodvana.desired_state.model.ManualApprovalStatus
	(CustomTaskStatus)(0),                           // 8: prodvana.desired_state.model.CustomTaskStatus
	(SignalType)(0),                                 // 9: prodvana.desired_state.model.SignalType
	(CanaryProgressState_Status)(0),                 // 10: prodvana.desired_state.model.CanaryProgressState.Status
	(DeliveryState_Status)(0),                       // 11: prodvana.desired_state.model.DeliveryState.Status
	(RuntimeObject_Status)(0),                       // 12: prodvana.desired_state.model.RuntimeObject.Status
	(ProtectionLinkState_StopReason)(0),             // 13: prodvana.desired_state.model.ProtectionLinkState.StopReason
	(*ProtectionLink)(nil),                          // 14: prodvana.desired_state.model.ProtectionLink
	(*Condition)(nil),                               // 15: prodvana.desired_state.model.Condition
	(*DeliveryExtension)(nil),                       // 16: prodvana.desired_state.model.DeliveryExtension
	(*Identifier)(nil),                              // 17: prodvana.desired_state.model.Identifier
	(*Metadata)(nil),                                // 18: prodvana.desired_state.model.Metadata
	(*StatusExplanation)(nil),                       // 19: prodvana.desired_state.model.StatusExplanation
	(*ActionExplanation)(nil),                       // 20: prodvana.desired_state.model.ActionExplanation
	(*Version)(nil),                                 // 21: prodvana.desired_state.model.Version
	(*ServiceInstanceState)(nil),                    // 22: prodvana.desired_state.model.ServiceInstanceState
	(*ServiceState)(nil),                            // 23: prodvana.desired_state.model.ServiceState
	(*ServiceGroupState)(nil),                       // 24: prodvana.desired_state.model.ServiceGroupState
	(*CanaryProgressState)(nil),                     // 25: prodvana.desired_state.model.CanaryProgressState
	(*DeliveryState)(nil),                           // 26: prodvana.desired_state.model.DeliveryState
	(*RuntimeExtensionFetchOutput)(nil),             // 27: prodvana.desired_state.model.RuntimeExtensionFetchOutput
	(*RuntimeObject)(nil),                           // 28: prodvana.desired_state.model.RuntimeObject
	(*ConditionState)(nil),                          // 29: prodvana.desired_state.model.ConditionState
	(*ControlState)(nil),                            // 30: prodvana.desired_state.model.ControlState
	(*ManualApprovalState)(nil),                     // 31: prodvana.desired_state.model.ManualApprovalState
	(*State)(nil),                                   // 32: prodvana.desired_state.model.State
	(*Annotations)(nil),                             // 33: prodvana.desired_state.model.Annotations
	(*CustomTaskExecutionState)(nil),                // 34: prodvana.desired_state.model.CustomTaskExecutionState
	(*CustomTaskState)(nil),                         // 35: prodvana.desired_state.model.CustomTaskState
	(*ProtectionLinkState)(nil),                     // 36: prodvana.desired_state.model.ProtectionLinkState
	(*ProtectionAttachment)(nil),                    // 37: prodvana.desired_state.model.ProtectionAttachment
	(*DeliveryExtensionState)(nil),                  // 38: prodvana.desired_state.model.DeliveryExtensionState
	(*Signal)(nil),                                  // 39: prodvana.desired_state.model.Signal
	(*DebugLog)(nil),                                // 40: prodvana.desired_state.model.DebugLog
	(*MissingApproval)(nil),                         // 41: prodvana.desired_state.model.MissingApproval
	(*ApplyRejected)(nil),                           // 42: prodvana.desired_state.model.ApplyRejected
	(*Condition_ReleaseChannelStableCondition)(nil), // 43: prodvana.desired_state.model.Condition.ReleaseChannelStableCondition
	(*Condition_ManualApproval)(nil),                // 44: prodvana.desired_state.model.Condition.ManualApproval
	(*Condition_CustomTaskSuccessfulCondition)(nil), // 45: prodvana.desired_state.model.Condition.CustomTaskSuccessfulCondition
	(*Condition_CustomTaskSuccessfulCondition_Protection)(nil), // 46: prodvana.desired_state.model.Condition.CustomTaskSuccessfulCondition.Protection
	(*RuntimeObject_RuntimeExtension)(nil),                     // 47: prodvana.desired_state.model.RuntimeObject.RuntimeExtension
	(*Annotations_Annotation)(nil),                             // 48: prodvana.desired_state.model.Annotations.Annotation
	(*Signal_DeliveryPromotionConfig)(nil),                     // 49: prodvana.desired_state.model.Signal.DeliveryPromotionConfig
	(*Signal_ProtectionBypass)(nil),                            // 50: prodvana.desired_state.model.Signal.ProtectionBypass
	(*Signal_RuntimeExtensionApproval)(nil),                    // 51: prodvana.desired_state.model.Signal.RuntimeExtensionApproval
	(*protection.ProtectionLifecycle)(nil),                     // 52: prodvana.protection.ProtectionLifecycle
	(common_config.TaskLifecycle)(0),                           // 53: prodvana.common_config.TaskLifecycle
	(*timestamppb.Timestamp)(nil),                              // 54: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),                                // 55: google.protobuf.Duration
	(*common_config.ProgramConfig)(nil),                        // 56: prodvana.common_config.ProgramConfig
	(*common_config.RetryConfig)(nil),                          // 57: prodvana.common_config.RetryConfig
	(*environment.CompiledExtensionCommand)(nil),               // 58: prodvana.environment.CompiledExtensionCommand
	(*common_config.ParameterDefinition)(nil),                  // 59: prodvana.common_config.ParameterDefinition
	(*common_config.ParameterValue)(nil),                       // 60: prodvana.common_config.ParameterValue
	(environment.ExtensionType)(0),                             // 61: prodvana.environment.ExtensionType
}
var file_prodvana_desired_state_model_desired_state_proto_depIdxs = []int32{
	52,  // 0: prodvana.desired_state.model.ProtectionLink.lifecycle:type_name -> prodvana.protection.ProtectionLifecycle
	43,  // 1: prodvana.desired_state.model.Condition.rc_cond:type_name -> prodvana.desired_state.model.Condition.ReleaseChannelStableCondition
	44,  // 2: prodvana.desired_state.model.Condition.manual_approval:type_name -> prodvana.desired_state.model.Condition.ManualApproval
	45,  // 3: prodvana.desired_state.model.Condition.custom_task:type_name -> prodvana.desired_state.model.Condition.CustomTaskSuccessfulCondition
	53,  // 4: prodvana.desired_state.model.DeliveryExtension.lifecycle:type_name -> prodvana.common_config.TaskLifecycle
	17,  // 5: prodvana.desired_state.model.DeliveryExtension.references:type_name -> prodvana.desired_state.model.Identifier
	0,   // 6: prodvana.desired_state.model.Identifier.type:type_name -> prodvana.desired_state.model.Type
	15,  // 7: prodvana.desired_state.model.Metadata.preconditions:type_name -> prodvana.desired_state.model.Condition
	15,  // 8: prodvana.desired_state.model.Metadata.invariants:type_name -> prodvana.desired_state.model.Condition
	17,  // 9: prodvana.desired_state.model.Metadata.self:type_name -> prodvana.desired_state.model.Identifier
	14,  // 10: prodvana.desired_state.model.Metadata.protection_links:type_name -> prodvana.desired_state.model.ProtectionLink
	16,  // 11: prodvana.desired_state.model.Metadata.delivery_extensions:type_name -> prodvana.desired_state.model.DeliveryExtension
	17,  // 12: prodvana.desired_state.model.StatusExplanation.subject:type_name -> prodvana.desired_state.model.Identifier
	4,   // 13: prodvana.desired_state.model.StatusExplanation.reason:type_name -> prodvana.desired_state.model.StatusReason
	54,  // 14: prodvana.desired_state.model.ActionExplanation.ts:type_name -> google.protobuf.Timestamp
	5,   // 15: prodvana.desired_state.model.ActionExplanation.action_type:type_name -> prodvana.desired_state.model.ActionType
	54,  // 16: prodvana.desired_state.model.Version.push_timestamp:type_name -> google.protobuf.Timestamp
	18,  // 17: prodvana.desired_state.model.ServiceInstanceState.meta:type_name -> prodvana.desired_state.model.Metadata
	21,  // 18: prodvana.desired_state.model.ServiceInstanceState.versions:type_name -> prodvana.desired_state.model.Version
	21,  // 19: prodvana.desired_state.model.ServiceInstanceState.rollback_version:type_name -> prodvana.desired_state.model.Version
	26,  // 20: prodvana.desired_state.model.ServiceInstanceState.delivery:type_name -> prodvana.desired_state.model.DeliveryState
	18,  // 21: prodvana.desired_state.model.ServiceState.meta:type_name -> prodvana.desired_state.model.Metadata
	22,  // 22: prodvana.desired_state.model.ServiceState.release_channels:type_name -> prodvana.desired_state.model.ServiceInstanceState
	35,  // 23: prodvana.desired_state.model.ServiceState.custom_tasks:type_name -> prodvana.desired_state.model.CustomTaskState
	38,  // 24: prodvana.desired_state.model.ServiceState.delivery_extensions:type_name -> prodvana.desired_state.model.DeliveryExtensionState
	18,  // 25: prodvana.desired_state.model.ServiceGroupState.meta:type_name -> prodvana.desired_state.model.Metadata
	23,  // 26: prodvana.desired_state.model.ServiceGroupState.services:type_name -> prodvana.desired_state.model.ServiceState
	35,  // 27: prodvana.desired_state.model.ServiceGroupState.custom_tasks:type_name -> prodvana.desired_state.model.CustomTaskState
	38,  // 28: prodvana.desired_state.model.ServiceGroupState.delivery_extensions:type_name -> prodvana.desired_state.model.DeliveryExtensionState
	10,  // 29: prodvana.desired_state.model.CanaryProgressState.status:type_name -> prodvana.desired_state.model.CanaryProgressState.Status
	55,  // 30: prodvana.desired_state.model.CanaryProgressState.duration:type_name -> google.protobuf.Duration
	54,  // 31: prodvana.desired_state.model.CanaryProgressState.pause_start_timestamp:type_name -> google.protobuf.Timestamp
	11,  // 32: prodvana.desired_state.model.DeliveryState.status:type_name -> prodvana.desired_state.model.DeliveryState.Status
	25,  // 33: prodvana.desired_state.model.DeliveryState.canary_progress:type_name -> prodvana.desired_state.model.CanaryProgressState
	18,  // 34: prodvana.desired_state.model.RuntimeObject.meta:type_name -> prodvana.desired_state.model.Metadata
	21,  // 35: prodvana.desired_state.model.RuntimeObject.versions:type_name -> prodvana.desired_state.model.Version
	12,  // 36: prodvana.desired_state.model.RuntimeObject.status:type_name -> prodvana.desired_state.model.RuntimeObject.Status
	21,  // 37: prodvana.desired_state.model.RuntimeObject.rollback_version:type_name -> prodvana.desired_state.model.Version
	26,  // 38: prodvana.desired_state.model.RuntimeObject.delivery:type_name -> prodvana.desired_state.model.DeliveryState
	47,  // 39: prodvana.desired_state.model.RuntimeObject.runtime_extension:type_name -> prodvana.desired_state.model.RuntimeObject.RuntimeExtension
	55,  // 40: prodvana.desired_state.model.RuntimeObject.interval:type_name -> google.protobuf.Duration
	55,  // 41: prodvana.desired_state.model.RuntimeObject.timeout:type_name -> google.protobuf.Duration
	6,   // 42: prodvana.desired_state.model.ConditionState.status:type_name -> prodvana.desired_state.model.ConditionStatus
	29,  // 43: prodvana.desired_state.model.ControlState.precondition_states:type_name -> prodvana.desired_state.model.ConditionState
	29,  // 44: prodvana.desired_state.model.ControlState.invariant_states:type_name -> prodvana.desired_state.model.ConditionState
	19,  // 45: prodvana.desired_state.model.ControlState.status_explanations:type_name -> prodvana.desired_state.model.StatusExplanation
	20,  // 46: prodvana.desired_state.model.ControlState.action_explanation:type_name -> prodvana.desired_state.model.ActionExplanation
	54,  // 47: prodvana.desired_state.model.ControlState.last_fetched_timestamp:type_name -> google.protobuf.Timestamp
	54,  // 48: prodvana.desired_state.model.ControlState.last_applied_timestamp:type_name -> google.protobuf.Timestamp
	41,  // 49: prodvana.desired_state.model.ControlState.missing_approval:type_name -> prodvana.desired_state.model.MissingApproval
	18,  // 50: prodvana.desired_state.model.ManualApprovalState.meta:type_name -> prodvana.desired_state.model.Metadata
	7,   // 51: prodvana.desired_state.model.ManualApprovalState.status:type_name -> prodvana.desired_state.model.ManualApprovalStatus
	23,  // 52: prodvana.desired_state.model.State.service:type_name -> prodvana.desired_state.model.ServiceState
	22,  // 53: prodvana.desired_state.model.State.service_instance:type_name -> prodvana.desired_state.model.ServiceInstanceState
	24,  // 54: prodvana.desired_state.model.State.service_group:type_name -> prodvana.desired_state.model.ServiceGroupState
	28,  // 55: prodvana.desired_state.model.State.runtime_object:type_name -> prodvana.desired_state.model.RuntimeObject
	31,  // 56: prodvana.desired_state.model.State.manual_approval:type_name -> prodvana.desired_state.model.ManualApprovalState
	35,  // 57: prodvana.desired_state.model.State.custom_task:type_name -> prodvana.desired_state.model.CustomTaskState
	37,  // 58: prodvana.desired_state.model.State.protection_attachment:type_name -> prodvana.desired_state.model.ProtectionAttachment
	36,  // 59: prodvana.desired_state.model.State.protection_link:type_name -> prodvana.desired_state.model.ProtectionLinkState
	38,  // 60: prodvana.desired_state.model.State.delivery_extension:type_name -> prodvana.desired_state.model.DeliveryExtensionState
	48,  // 61: prodvana.desired_state.model.Annotations.annotations:type_name -> prodvana.desired_state.model.Annotations.Annotation
	8,   // 62: prodvana.desired_state.model.CustomTaskExecutionState.status:type_name -> prodvana.desired_state.model.CustomTaskStatus
	54,  // 63: prodvana.desired_state.model.CustomTaskExecutionState.latest_attempt_end_timestamp:type_name -> google.protobuf.Timestamp
	18,  // 64: prodvana.desired_state.model.CustomTaskState.meta:type_name -> prodvana.desired_state.model.Metadata
	56,  // 65: prodvana.desired_state.model.CustomTaskState.program:type_name -> prodvana.common_config.ProgramConfig
	34,  // 66: prodvana.desired_state.model.CustomTaskState.task_state:type_name -> prodvana.desired_state.model.CustomTaskExecutionState
	57,  // 67: prodvana.desired_state.model.CustomTaskState.retry_config:type_name -> prodvana.common_config.RetryConfig
	18,  // 68: prodvana.desired_state.model.ProtectionLinkState.meta:type_name -> prodvana.desired_state.model.Metadata
	6,   // 69: prodvana.desired_state.model.ProtectionLinkState.status:type_name -> prodvana.desired_state.model.ConditionStatus
	14,  // 70: prodvana.desired_state.model.ProtectionLinkState.link:type_name -> prodvana.desired_state.model.ProtectionLink
	54,  // 71: prodvana.desired_state.model.ProtectionLinkState.started_timestamp:type_name -> google.protobuf.Timestamp
	54,  // 72: prodvana.desired_state.model.ProtectionLinkState.stopped_timestamp:type_name -> google.protobuf.Timestamp
	13,  // 73: prodvana.desired_state.model.ProtectionLinkState.stopped_reason:type_name -> prodvana.desired_state.model.ProtectionLinkState.StopReason
	54,  // 74: prodvana.desired_state.model.ProtectionLinkState.first_success_timestamp:type_name -> google.protobuf.Timestamp
	18,  // 75: prodvana.desired_state.model.ProtectionAttachment.meta:type_name -> prodvana.desired_state.model.Metadata
	21,  // 76: prodvana.desired_state.model.ProtectionAttachment.versions:type_name -> prodvana.desired_state.model.Version
	21,  // 77: prodvana.desired_state.model.ProtectionAttachment.last_completed_versions:type_name -> prodvana.desired_state.model.Version
	54,  // 78: prodvana.desired_state.model.ProtectionAttachment.last_completed_timestamp:type_name -> google.protobuf.Timestamp
	3,   // 79: prodvana.desired_state.model.ProtectionAttachment.last_completed_status:type_name -> prodvana.desired_state.model.SimpleStatus
	19,  // 80: prodvana.desired_state.model.ProtectionAttachment.last_completed_status_explanations:type_name -> prodvana.desired_state.model.StatusExplanation
	18,  // 81: prodvana.desired_state.model.DeliveryExtensionState.meta:type_name -> prodvana.desired_state.model.Metadata
	21,  // 82: prodvana.desired_state.model.DeliveryExtensionState.versions:type_name -> prodvana.desired_state.model.Version
	53,  // 83: prodvana.desired_state.model.DeliveryExtensionState.lifecycle:type_name -> prodvana.common_config.TaskLifecycle
	54,  // 84: prodvana.desired_state.model.DeliveryExtensionState.last_completed_timestamp:type_name -> google.protobuf.Timestamp
	3,   // 85: prodvana.desired_state.model.DeliveryExtensionState.last_completed_status:type_name -> prodvana.desired_state.model.SimpleStatus
	19,  // 86: prodvana.desired_state.model.DeliveryExtensionState.last_completed_status_explanations:type_name -> prodvana.desired_state.model.StatusExplanation
	17,  // 87: prodvana.desired_state.model.DeliveryExtensionState.references:type_name -> prodvana.desired_state.model.Identifier
	6,   // 88: prodvana.desired_state.model.DeliveryExtensionState.status:type_name -> prodvana.desired_state.model.ConditionStatus
	9,   // 89: prodvana.desired_state.model.Signal.type:type_name -> prodvana.desired_state.model.SignalType
	49,  // 90: prodvana.desired_state.model.Signal.delivery_promotion:type_name -> prodvana.desired_state.model.Signal.DeliveryPromotionConfig
	50,  // 91: prodvana.desired_state.model.Signal.protection_bypass:type_name -> prodvana.desired_state.model.Signal.ProtectionBypass
	51,  // 92: prodvana.desired_state.model.Signal.runtime_extension_approval:type_name -> prodvana.desired_state.model.Signal.RuntimeExtensionApproval
	54,  // 93: prodvana.desired_state.model.DebugLog.ts:type_name -> google.protobuf.Timestamp
	9,   // 94: prodvana.desired_state.model.MissingApproval.signal_type:type_name -> prodvana.desired_state.model.SignalType
	41,  // 95: prodvana.desired_state.model.ApplyRejected.missing_approval:type_name -> prodvana.desired_state.model.MissingApproval
	46,  // 96: prodvana.desired_state.model.Condition.CustomTaskSuccessfulCondition.protection:type_name -> prodvana.desired_state.model.Condition.CustomTaskSuccessfulCondition.Protection
	1,   // 97: prodvana.desired_state.model.Condition.CustomTaskSuccessfulCondition.Protection.task_type:type_name -> prodvana.desired_state.model.CustomTaskType
	58,  // 98: prodvana.desired_state.model.RuntimeObject.RuntimeExtension.apply:type_name -> prodvana.environment.CompiledExtensionCommand
	58,  // 99: prodvana.desired_state.model.RuntimeObject.RuntimeExtension.fetch:type_name -> prodvana.environment.CompiledExtensionCommand
	55,  // 100: prodvana.desired_state.model.RuntimeObject.RuntimeExtension.fetch_interval:type_name -> google.protobuf.Duration
	55,  // 101: prodvana.desired_state.model.RuntimeObject.RuntimeExtension.fetch_timeout:type_name -> google.protobuf.Duration
	59,  // 102: prodvana.desired_state.model.RuntimeObject.RuntimeExtension.parameters:type_name -> prodvana.common_config.ParameterDefinition
	60,  // 103: prodvana.desired_state.model.RuntimeObject.RuntimeExtension.parameter_values:type_name -> prodvana.common_config.ParameterValue
	61,  // 104: prodvana.desired_state.model.RuntimeObject.RuntimeExtension.type:type_name -> prodvana.environment.ExtensionType
	54,  // 105: prodvana.desired_state.model.Signal.RuntimeExtensionApproval.timestamp:type_name -> google.protobuf.Timestamp
	106, // [106:106] is the sub-list for method output_type
	106, // [106:106] is the sub-list for method input_type
	106, // [106:106] is the sub-list for extension type_name
	106, // [106:106] is the sub-list for extension extendee
	0,   // [0:106] is the sub-list for field type_name
}

func init() { file_prodvana_desired_state_model_desired_state_proto_init() }
func file_prodvana_desired_state_model_desired_state_proto_init() {
	if File_prodvana_desired_state_model_desired_state_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtectionLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeliveryExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusExplanation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionExplanation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Version); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceInstanceState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceGroupState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CanaryProgressState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeliveryState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuntimeExtensionFetchOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuntimeObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManualApprovalState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Annotations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomTaskExecutionState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomTaskState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtectionLinkState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtectionAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeliveryExtensionState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Signal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebugLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MissingApproval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyRejected); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition_ReleaseChannelStableCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition_ManualApproval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition_CustomTaskSuccessfulCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition_CustomTaskSuccessfulCondition_Protection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuntimeObject_RuntimeExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Annotations_Annotation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Signal_DeliveryPromotionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Signal_ProtectionBypass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_desired_state_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Signal_RuntimeExtensionApproval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_prodvana_desired_state_model_desired_state_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Condition_RcCond)(nil),
		(*Condition_ManualApproval_)(nil),
		(*Condition_CustomTask)(nil),
	}
	file_prodvana_desired_state_model_desired_state_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*State_Service)(nil),
		(*State_ServiceInstance)(nil),
		(*State_ServiceGroup)(nil),
		(*State_RuntimeObject)(nil),
		(*State_ManualApproval)(nil),
		(*State_CustomTask)(nil),
		(*State_ProtectionAttachment)(nil),
		(*State_ProtectionLink)(nil),
		(*State_DeliveryExtension)(nil),
	}
	file_prodvana_desired_state_model_desired_state_proto_msgTypes[25].OneofWrappers = []interface{}{
		(*Signal_DeliveryPromotion)(nil),
		(*Signal_ProtectionBypass_)(nil),
		(*Signal_RuntimeExtensionApproval_)(nil),
	}
	file_prodvana_desired_state_model_desired_state_proto_msgTypes[28].OneofWrappers = []interface{}{
		(*ApplyRejected_MissingApproval)(nil),
	}
	file_prodvana_desired_state_model_desired_state_proto_msgTypes[31].OneofWrappers = []interface{}{
		(*Condition_CustomTaskSuccessfulCondition_Protection_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_prodvana_desired_state_model_desired_state_proto_rawDesc,
			NumEnums:      14,
			NumMessages:   38,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_prodvana_desired_state_model_desired_state_proto_goTypes,
		DependencyIndexes: file_prodvana_desired_state_model_desired_state_proto_depIdxs,
		EnumInfos:         file_prodvana_desired_state_model_desired_state_proto_enumTypes,
		MessageInfos:      file_prodvana_desired_state_model_desired_state_proto_msgTypes,
	}.Build()
	File_prodvana_desired_state_model_desired_state_proto = out.File
	file_prodvana_desired_state_model_desired_state_proto_rawDesc = nil
	file_prodvana_desired_state_model_desired_state_proto_goTypes = nil
	file_prodvana_desired_state_model_desired_state_proto_depIdxs = nil
}
