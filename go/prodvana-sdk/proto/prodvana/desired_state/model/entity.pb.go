// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.1
// 	protoc        v3.21.10
// source: prodvana/desired_state/model/entity.proto

package model

import (
	common_config "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/common_config"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DependencyType int32

const (
	DependencyType_DEPENDENCY_UNKNOWN               DependencyType = 0
	DependencyType_DEPENDENCY_CHILD                 DependencyType = 1
	DependencyType_DEPENDENCY_PROTECTION_ATTACHMENT DependencyType = 2
	DependencyType_DEPENDENCY_RELEASE_CHANNEL       DependencyType = 3
	DependencyType_DEPENDENCY_PRECONDITION          DependencyType = 4
	DependencyType_DEPENDENCY_DELIVERY_EXTENSION    DependencyType = 5
)

// Enum value maps for DependencyType.
var (
	DependencyType_name = map[int32]string{
		0: "DEPENDENCY_UNKNOWN",
		1: "DEPENDENCY_CHILD",
		2: "DEPENDENCY_PROTECTION_ATTACHMENT",
		3: "DEPENDENCY_RELEASE_CHANNEL",
		4: "DEPENDENCY_PRECONDITION",
		5: "DEPENDENCY_DELIVERY_EXTENSION",
	}
	DependencyType_value = map[string]int32{
		"DEPENDENCY_UNKNOWN":               0,
		"DEPENDENCY_CHILD":                 1,
		"DEPENDENCY_PROTECTION_ATTACHMENT": 2,
		"DEPENDENCY_RELEASE_CHANNEL":       3,
		"DEPENDENCY_PRECONDITION":          4,
		"DEPENDENCY_DELIVERY_EXTENSION":    5,
	}
)

func (x DependencyType) Enum() *DependencyType {
	p := new(DependencyType)
	*p = x
	return p
}

func (x DependencyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DependencyType) Descriptor() protoreflect.EnumDescriptor {
	return file_prodvana_desired_state_model_entity_proto_enumTypes[0].Descriptor()
}

func (DependencyType) Type() protoreflect.EnumType {
	return &file_prodvana_desired_state_model_entity_proto_enumTypes[0]
}

func (x DependencyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DependencyType.Descriptor instead.
func (DependencyType) EnumDescriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_entity_proto_rawDescGZIP(), []int{0}
}

type Notifications_RuntimeFailure_FailureType int32

const (
	Notifications_RuntimeFailure_UNKNOWN                      Notifications_RuntimeFailure_FailureType = 0
	Notifications_RuntimeFailure_EXTENSION_FETCH_INVOKE_ERROR Notifications_RuntimeFailure_FailureType = 1
	Notifications_RuntimeFailure_EXTENSION_FETCH_RESULT_ERROR Notifications_RuntimeFailure_FailureType = 2
	Notifications_RuntimeFailure_RUNTIME_APPLY_ERROR          Notifications_RuntimeFailure_FailureType = 3
	Notifications_RuntimeFailure_EXTENSION_APPLY_INVOKE_ERROR Notifications_RuntimeFailure_FailureType = 4
)

// Enum value maps for Notifications_RuntimeFailure_FailureType.
var (
	Notifications_RuntimeFailure_FailureType_name = map[int32]string{
		0: "UNKNOWN",
		1: "EXTENSION_FETCH_INVOKE_ERROR",
		2: "EXTENSION_FETCH_RESULT_ERROR",
		3: "RUNTIME_APPLY_ERROR",
		4: "EXTENSION_APPLY_INVOKE_ERROR",
	}
	Notifications_RuntimeFailure_FailureType_value = map[string]int32{
		"UNKNOWN":                      0,
		"EXTENSION_FETCH_INVOKE_ERROR": 1,
		"EXTENSION_FETCH_RESULT_ERROR": 2,
		"RUNTIME_APPLY_ERROR":          3,
		"EXTENSION_APPLY_INVOKE_ERROR": 4,
	}
)

func (x Notifications_RuntimeFailure_FailureType) Enum() *Notifications_RuntimeFailure_FailureType {
	p := new(Notifications_RuntimeFailure_FailureType)
	*p = x
	return p
}

func (x Notifications_RuntimeFailure_FailureType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Notifications_RuntimeFailure_FailureType) Descriptor() protoreflect.EnumDescriptor {
	return file_prodvana_desired_state_model_entity_proto_enumTypes[1].Descriptor()
}

func (Notifications_RuntimeFailure_FailureType) Type() protoreflect.EnumType {
	return &file_prodvana_desired_state_model_entity_proto_enumTypes[1]
}

func (x Notifications_RuntimeFailure_FailureType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Notifications_RuntimeFailure_FailureType.Descriptor instead.
func (Notifications_RuntimeFailure_FailureType) EnumDescriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_entity_proto_rawDescGZIP(), []int{0, 1, 0}
}

type Notifications struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProgramFailures                *Notifications_ProgramFailures               `protobuf:"bytes,1,opt,name=program_failures,json=programFailures,proto3" json:"program_failures,omitempty"`
	RuntimeFailures                []*Notifications_RuntimeFailure              `protobuf:"bytes,2,rep,name=runtime_failures,json=runtimeFailures,proto3" json:"runtime_failures,omitempty"`
	ProtectionFailure              []*ProtectionFailure                         `protobuf:"bytes,3,rep,name=protection_failure,json=protectionFailure,proto3" json:"protection_failure,omitempty"`
	ConvergenceExtensionFailure    []*Notifications_ConvergenceExtensionFailure `protobuf:"bytes,4,rep,name=convergence_extension_failure,json=convergenceExtensionFailure,proto3" json:"convergence_extension_failure,omitempty"`
	DelayedConvergence             *Notifications_DelayedConvergence            `protobuf:"bytes,5,opt,name=delayed_convergence,json=delayedConvergence,proto3" json:"delayed_convergence,omitempty"`
	ConcurrencyLimitExceededErrors []*ConcurrencyLimitExceeded                  `protobuf:"bytes,6,rep,name=concurrency_limit_exceeded_errors,json=concurrencyLimitExceededErrors,proto3" json:"concurrency_limit_exceeded_errors,omitempty"` // TODO: Link to next action?
}

func (x *Notifications) Reset() {
	*x = Notifications{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_entity_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Notifications) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notifications) ProtoMessage() {}

func (x *Notifications) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_entity_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notifications.ProtoReflect.Descriptor instead.
func (*Notifications) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_entity_proto_rawDescGZIP(), []int{0}
}

func (x *Notifications) GetProgramFailures() *Notifications_ProgramFailures {
	if x != nil {
		return x.ProgramFailures
	}
	return nil
}

func (x *Notifications) GetRuntimeFailures() []*Notifications_RuntimeFailure {
	if x != nil {
		return x.RuntimeFailures
	}
	return nil
}

func (x *Notifications) GetProtectionFailure() []*ProtectionFailure {
	if x != nil {
		return x.ProtectionFailure
	}
	return nil
}

func (x *Notifications) GetConvergenceExtensionFailure() []*Notifications_ConvergenceExtensionFailure {
	if x != nil {
		return x.ConvergenceExtensionFailure
	}
	return nil
}

func (x *Notifications) GetDelayedConvergence() *Notifications_DelayedConvergence {
	if x != nil {
		return x.DelayedConvergence
	}
	return nil
}

func (x *Notifications) GetConcurrencyLimitExceededErrors() []*ConcurrencyLimitExceeded {
	if x != nil {
		return x.ConcurrencyLimitExceededErrors
	}
	return nil
}

type Dependency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type DependencyType `protobuf:"varint,1,opt,name=type,proto3,enum=prodvana.desired_state.model.DependencyType" json:"type,omitempty"`
	Id   *Identifier    `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Dependency) Reset() {
	*x = Dependency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_entity_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dependency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dependency) ProtoMessage() {}

func (x *Dependency) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_entity_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dependency.ProtoReflect.Descriptor instead.
func (*Dependency) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_entity_proto_rawDescGZIP(), []int{1}
}

func (x *Dependency) GetType() DependencyType {
	if x != nil {
		return x.Type
	}
	return DependencyType_DEPENDENCY_UNKNOWN
}

func (x *Dependency) GetId() *Identifier {
	if x != nil {
		return x.Id
	}
	return nil
}

type Entity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                              *Identifier                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DesiredStateId                  string                      `protobuf:"bytes,2,opt,name=desired_state_id,json=desiredStateId,proto3" json:"desired_state_id,omitempty"`
	RootDesiredStateId              string                      `protobuf:"bytes,3,opt,name=root_desired_state_id,json=rootDesiredStateId,proto3" json:"root_desired_state_id,omitempty"`
	ParentDesiredStateId            string                      `protobuf:"bytes,25,opt,name=parent_desired_state_id,json=parentDesiredStateId,proto3" json:"parent_desired_state_id,omitempty"`
	ReleaseId                       string                      `protobuf:"bytes,24,opt,name=release_id,json=releaseId,proto3" json:"release_id,omitempty"`
	Annotations                     *Annotations                `protobuf:"bytes,4,opt,name=annotations,proto3" json:"annotations,omitempty"`
	Status                          Status                      `protobuf:"varint,5,opt,name=status,proto3,enum=prodvana.desired_state.model.Status" json:"status,omitempty"`
	SimpleStatus                    SimpleStatus                `protobuf:"varint,17,opt,name=simple_status,json=simpleStatus,proto3,enum=prodvana.desired_state.model.SimpleStatus" json:"simple_status,omitempty"`
	StartingState                   *State                      `protobuf:"bytes,6,opt,name=starting_state,json=startingState,proto3" json:"starting_state,omitempty"`
	LastSeenState                   *State                      `protobuf:"bytes,7,opt,name=last_seen_state,json=lastSeenState,proto3" json:"last_seen_state,omitempty"`
	DesiredState                    *State                      `protobuf:"bytes,8,opt,name=desired_state,json=desiredState,proto3" json:"desired_state,omitempty"` // the state we want to get to before calling convergence complete
	TargetState                     *State                      `protobuf:"bytes,19,opt,name=target_state,json=targetState,proto3" json:"target_state,omitempty"`   // the state we are actually going to apply. when preconditions are met, target state = desired state, otherwise, target state = previous desired state
	PreconditionStatuses            []*ConditionState           `protobuf:"bytes,9,rep,name=precondition_statuses,json=preconditionStatuses,proto3" json:"precondition_statuses,omitempty"`
	StatusExplanations              []*StatusExplanation        `protobuf:"bytes,10,rep,name=status_explanations,json=statusExplanations,proto3" json:"status_explanations,omitempty"`
	Logs                            []*DebugLog                 `protobuf:"bytes,11,rep,name=logs,proto3" json:"logs,omitempty"`
	ActionExplanation               *ActionExplanation          `protobuf:"bytes,12,opt,name=action_explanation,json=actionExplanation,proto3" json:"action_explanation,omitempty"`
	LastUpdateTimestamp             *timestamppb.Timestamp      `protobuf:"bytes,13,opt,name=last_update_timestamp,json=lastUpdateTimestamp,proto3" json:"last_update_timestamp,omitempty"`                        // when the entity state last changed
	LastFetchedTimestamp            *timestamppb.Timestamp      `protobuf:"bytes,14,opt,name=last_fetched_timestamp,json=lastFetchedTimestamp,proto3" json:"last_fetched_timestamp,omitempty"`                     // when prodvana last fetched entity state, best effort
	LastAppliedTimestamp            *timestamppb.Timestamp      `protobuf:"bytes,15,opt,name=last_applied_timestamp,json=lastAppliedTimestamp,proto3" json:"last_applied_timestamp,omitempty"`                     // when prodvana last applied state for this entity, best effort
	ExpectedNextApplyTimestamp      *timestamppb.Timestamp      `protobuf:"bytes,27,opt,name=expected_next_apply_timestamp,json=expectedNextApplyTimestamp,proto3" json:"expected_next_apply_timestamp,omitempty"` // when prodvana expects to run apply again for this entity, if there is any work to be done. If nil, apply is expected to happen immediately, again if there is any work to be done.
	HasWork                         bool                        `protobuf:"varint,28,opt,name=has_work,json=hasWork,proto3" json:"has_work,omitempty"`                                                             // if true, Prodvana will try to run apply at next expected_next_apply_timestamp
	HasWorkReason                   string                      `protobuf:"bytes,29,opt,name=has_work_reason,json=hasWorkReason,proto3" json:"has_work_reason,omitempty"`
	Dependencies                    []*Identifier               `protobuf:"bytes,16,rep,name=dependencies,proto3" json:"dependencies,omitempty"`
	DirectDependencies              []*Identifier               `protobuf:"bytes,23,rep,name=direct_dependencies,json=directDependencies,proto3" json:"direct_dependencies,omitempty"`
	DependenciesWithType            []*Dependency               `protobuf:"bytes,26,rep,name=dependencies_with_type,json=dependenciesWithType,proto3" json:"dependencies_with_type,omitempty"`
	Lifecycle                       common_config.TaskLifecycle `protobuf:"varint,18,opt,name=lifecycle,proto3,enum=prodvana.common_config.TaskLifecycle" json:"lifecycle,omitempty"`
	MissingApproval                 *MissingApproval            `protobuf:"bytes,20,opt,name=missing_approval,json=missingApproval,proto3" json:"missing_approval,omitempty"`
	ApplyError                      *ApplyError                 `protobuf:"bytes,21,opt,name=apply_error,json=applyError,proto3" json:"apply_error,omitempty"`
	Notifications                   *Notifications              `protobuf:"bytes,22,opt,name=notifications,proto3" json:"notifications,omitempty"`
	LastKeyDeliveryDecision         *KeyDeliveryDecision        `protobuf:"bytes,30,opt,name=last_key_delivery_decision,json=lastKeyDeliveryDecision,proto3" json:"last_key_delivery_decision,omitempty"`
	LastRollbackKeyDeliveryDecision *KeyDeliveryDecision        `protobuf:"bytes,31,opt,name=last_rollback_key_delivery_decision,json=lastRollbackKeyDeliveryDecision,proto3" json:"last_rollback_key_delivery_decision,omitempty"`
}

func (x *Entity) Reset() {
	*x = Entity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_entity_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Entity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entity) ProtoMessage() {}

func (x *Entity) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_entity_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entity.ProtoReflect.Descriptor instead.
func (*Entity) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_entity_proto_rawDescGZIP(), []int{2}
}

func (x *Entity) GetId() *Identifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Entity) GetDesiredStateId() string {
	if x != nil {
		return x.DesiredStateId
	}
	return ""
}

func (x *Entity) GetRootDesiredStateId() string {
	if x != nil {
		return x.RootDesiredStateId
	}
	return ""
}

func (x *Entity) GetParentDesiredStateId() string {
	if x != nil {
		return x.ParentDesiredStateId
	}
	return ""
}

func (x *Entity) GetReleaseId() string {
	if x != nil {
		return x.ReleaseId
	}
	return ""
}

func (x *Entity) GetAnnotations() *Annotations {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *Entity) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_UNKNOWN_STATUS
}

func (x *Entity) GetSimpleStatus() SimpleStatus {
	if x != nil {
		return x.SimpleStatus
	}
	return SimpleStatus_SS_UNKNOWN
}

func (x *Entity) GetStartingState() *State {
	if x != nil {
		return x.StartingState
	}
	return nil
}

func (x *Entity) GetLastSeenState() *State {
	if x != nil {
		return x.LastSeenState
	}
	return nil
}

func (x *Entity) GetDesiredState() *State {
	if x != nil {
		return x.DesiredState
	}
	return nil
}

func (x *Entity) GetTargetState() *State {
	if x != nil {
		return x.TargetState
	}
	return nil
}

func (x *Entity) GetPreconditionStatuses() []*ConditionState {
	if x != nil {
		return x.PreconditionStatuses
	}
	return nil
}

func (x *Entity) GetStatusExplanations() []*StatusExplanation {
	if x != nil {
		return x.StatusExplanations
	}
	return nil
}

func (x *Entity) GetLogs() []*DebugLog {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *Entity) GetActionExplanation() *ActionExplanation {
	if x != nil {
		return x.ActionExplanation
	}
	return nil
}

func (x *Entity) GetLastUpdateTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdateTimestamp
	}
	return nil
}

func (x *Entity) GetLastFetchedTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.LastFetchedTimestamp
	}
	return nil
}

func (x *Entity) GetLastAppliedTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.LastAppliedTimestamp
	}
	return nil
}

func (x *Entity) GetExpectedNextApplyTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpectedNextApplyTimestamp
	}
	return nil
}

func (x *Entity) GetHasWork() bool {
	if x != nil {
		return x.HasWork
	}
	return false
}

func (x *Entity) GetHasWorkReason() string {
	if x != nil {
		return x.HasWorkReason
	}
	return ""
}

func (x *Entity) GetDependencies() []*Identifier {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

func (x *Entity) GetDirectDependencies() []*Identifier {
	if x != nil {
		return x.DirectDependencies
	}
	return nil
}

func (x *Entity) GetDependenciesWithType() []*Dependency {
	if x != nil {
		return x.DependenciesWithType
	}
	return nil
}

func (x *Entity) GetLifecycle() common_config.TaskLifecycle {
	if x != nil {
		return x.Lifecycle
	}
	return common_config.TaskLifecycle(0)
}

func (x *Entity) GetMissingApproval() *MissingApproval {
	if x != nil {
		return x.MissingApproval
	}
	return nil
}

func (x *Entity) GetApplyError() *ApplyError {
	if x != nil {
		return x.ApplyError
	}
	return nil
}

func (x *Entity) GetNotifications() *Notifications {
	if x != nil {
		return x.Notifications
	}
	return nil
}

func (x *Entity) GetLastKeyDeliveryDecision() *KeyDeliveryDecision {
	if x != nil {
		return x.LastKeyDeliveryDecision
	}
	return nil
}

func (x *Entity) GetLastRollbackKeyDeliveryDecision() *KeyDeliveryDecision {
	if x != nil {
		return x.LastRollbackKeyDeliveryDecision
	}
	return nil
}

type EntityGraph struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Root     *Identifier `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
	Entities []*Entity   `protobuf:"bytes,2,rep,name=entities,proto3" json:"entities,omitempty"`
	// if set, this entity graph is for a desired state that has been replaced, and this is the root's replaced timestamp
	ReplacedTimestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=replaced_timestamp,json=replacedTimestamp,proto3" json:"replaced_timestamp,omitempty"`
}

func (x *EntityGraph) Reset() {
	*x = EntityGraph{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_entity_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityGraph) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityGraph) ProtoMessage() {}

func (x *EntityGraph) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_entity_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityGraph.ProtoReflect.Descriptor instead.
func (*EntityGraph) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_entity_proto_rawDescGZIP(), []int{3}
}

func (x *EntityGraph) GetRoot() *Identifier {
	if x != nil {
		return x.Root
	}
	return nil
}

func (x *EntityGraph) GetEntities() []*Entity {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *EntityGraph) GetReplacedTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.ReplacedTimestamp
	}
	return nil
}

type Notifications_ProgramFailures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Either k8s errors or runtime extension apply errors
	FailureCount      int32                  `protobuf:"varint,1,opt,name=failure_count,json=failureCount,proto3" json:"failure_count,omitempty"`
	MostRecentFailure *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=most_recent_failure,json=mostRecentFailure,proto3" json:"most_recent_failure,omitempty"`
}

func (x *Notifications_ProgramFailures) Reset() {
	*x = Notifications_ProgramFailures{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_entity_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Notifications_ProgramFailures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notifications_ProgramFailures) ProtoMessage() {}

func (x *Notifications_ProgramFailures) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_entity_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notifications_ProgramFailures.ProtoReflect.Descriptor instead.
func (*Notifications_ProgramFailures) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_entity_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Notifications_ProgramFailures) GetFailureCount() int32 {
	if x != nil {
		return x.FailureCount
	}
	return 0
}

func (x *Notifications_ProgramFailures) GetMostRecentFailure() *timestamppb.Timestamp {
	if x != nil {
		return x.MostRecentFailure
	}
	return nil
}

type Notifications_RuntimeFailure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailureType Notifications_RuntimeFailure_FailureType `protobuf:"varint,1,opt,name=failure_type,json=failureType,proto3,enum=prodvana.desired_state.model.Notifications_RuntimeFailure_FailureType" json:"failure_type,omitempty"`
	Message     string                                   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` // TODO: Indicate event id if possible
}

func (x *Notifications_RuntimeFailure) Reset() {
	*x = Notifications_RuntimeFailure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_entity_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Notifications_RuntimeFailure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notifications_RuntimeFailure) ProtoMessage() {}

func (x *Notifications_RuntimeFailure) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_entity_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notifications_RuntimeFailure.ProtoReflect.Descriptor instead.
func (*Notifications_RuntimeFailure) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_entity_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Notifications_RuntimeFailure) GetFailureType() Notifications_RuntimeFailure_FailureType {
	if x != nil {
		return x.FailureType
	}
	return Notifications_RuntimeFailure_UNKNOWN
}

func (x *Notifications_RuntimeFailure) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Notifications_ConvergenceExtensionFailure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExtensionId *Identifier `protobuf:"bytes,1,opt,name=extension_id,json=extensionId,proto3" json:"extension_id,omitempty"`
}

func (x *Notifications_ConvergenceExtensionFailure) Reset() {
	*x = Notifications_ConvergenceExtensionFailure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_entity_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Notifications_ConvergenceExtensionFailure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notifications_ConvergenceExtensionFailure) ProtoMessage() {}

func (x *Notifications_ConvergenceExtensionFailure) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_entity_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notifications_ConvergenceExtensionFailure.ProtoReflect.Descriptor instead.
func (*Notifications_ConvergenceExtensionFailure) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_entity_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Notifications_ConvergenceExtensionFailure) GetExtensionId() *Identifier {
	if x != nil {
		return x.ExtensionId
	}
	return nil
}

type Notifications_DelayedConvergence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Notifications_DelayedConvergence) Reset() {
	*x = Notifications_DelayedConvergence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_model_entity_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Notifications_DelayedConvergence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notifications_DelayedConvergence) ProtoMessage() {}

func (x *Notifications_DelayedConvergence) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_model_entity_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notifications_DelayedConvergence.ProtoReflect.Descriptor instead.
func (*Notifications_DelayedConvergence) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_model_entity_proto_rawDescGZIP(), []int{0, 3}
}

var File_prodvana_desired_state_model_entity_proto protoreflect.FileDescriptor

var file_prodvana_desired_state_model_entity_proto_rawDesc = []byte{
	0x0a, 0x29, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x64, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x70, 0x72, 0x6f,
	0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x1a, 0x21, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x64, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xfc, 0x09, 0x0a, 0x0d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x66, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x12, 0x65, 0x0a, 0x10, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52,
	0x0f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73,
	0x12, 0x5e, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x11, 0x70,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x12, 0x8b, 0x01, 0x0a, 0x1d, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63,
	0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x52, 0x1b, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x6f,
	0x0a, 0x13, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x67, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x12, 0x64, 0x65, 0x6c,
	0x61, 0x79, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x81, 0x01, 0x0a, 0x21, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x63, 0x65, 0x65,
	0x64, 0x65, 0x64, 0x52, 0x1e, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x1a, 0x82, 0x01, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x46,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x13,
	0x6d, 0x6f, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x6d, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e,
	0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x1a, 0xb1, 0x02, 0x0a, 0x0e, 0x52, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x69, 0x0a, 0x0c, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x46, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x2e, 0x46, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x99, 0x01, 0x0a, 0x0b, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x20, 0x0a,
	0x1c, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x45, 0x54, 0x43, 0x48,
	0x5f, 0x49, 0x4e, 0x56, 0x4f, 0x4b, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12,
	0x20, 0x0a, 0x1c, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x45, 0x54,
	0x43, 0x48, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x02, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x41, 0x50, 0x50,
	0x4c, 0x59, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x58,
	0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x49, 0x4e,
	0x56, 0x4f, 0x4b, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x1a, 0x6a, 0x0a, 0x1b,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x4b, 0x0a, 0x0c, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0b, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x1a, 0x14, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x61,
	0x79, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x88,
	0x01, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x40, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x65, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x38, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02, 0x69, 0x64, 0x22, 0xaa, 0x12, 0x0a, 0x06, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28,
	0x0a, 0x10, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x72, 0x6f, 0x6f, 0x74,
	0x5f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x6f, 0x6f, 0x74, 0x44, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49,
	0x64, 0x12, 0x4b, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e,
	0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3c,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4f, 0x0a, 0x0d,
	0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x0c, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4a, 0x0a,
	0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61,
	0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4b, 0x0a, 0x0f, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x48, 0x0a, 0x0d, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x46, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e,
	0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x61, 0x0a, 0x15, 0x70, 0x72, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61,
	0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x14, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x60, 0x0a, 0x13, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x78,
	0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x0a,
	0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x4c, 0x6f, 0x67, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x5e, 0x0a, 0x12, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61,
	0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x6c, 0x61,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78,
	0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x15, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x50, 0x0a, 0x16, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x50, 0x0a, 0x16, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x5d, 0x0a,
	0x1d, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x1a, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4e, 0x65, 0x78, 0x74, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x19, 0x0a, 0x08,
	0x68, 0x61, 0x73, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x68, 0x61, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x61, 0x73, 0x5f, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x68, 0x61, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x4c, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18,
	0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61,
	0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x59, 0x0a,
	0x13, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e,
	0x63, 0x69, 0x65, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x12, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x44, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x5e, 0x0a, 0x16, 0x64, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e,
	0x63, 0x79, 0x52, 0x14, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x09, 0x6c, 0x69, 0x66, 0x65,
	0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63,
	0x6c, 0x65, 0x52, 0x09, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x58, 0x0a,
	0x10, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61,
	0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x0f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x49, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x51, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6e, 0x0a, 0x1a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4b, 0x65, 0x79, 0x44, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x17, 0x6c, 0x61,
	0x73, 0x74, 0x4b, 0x65, 0x79, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x7f, 0x0a, 0x23, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x6f,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x4b, 0x65, 0x79, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x1f, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x6f, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x4b, 0x65, 0x79, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xd8, 0x01, 0x0a, 0x0b, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x47, 0x72, 0x61, 0x70, 0x68, 0x12, 0x3c, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x04,
	0x72, 0x6f, 0x6f, 0x74, 0x12, 0x40, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e,
	0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11,
	0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2a, 0xc4, 0x01, 0x0a, 0x0e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x45, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x4e,
	0x43, 0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10,
	0x44, 0x45, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x43, 0x48, 0x49, 0x4c, 0x44,
	0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x44, 0x45, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x4e, 0x43, 0x59,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x41,
	0x43, 0x48, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x45, 0x50, 0x45,
	0x4e, 0x44, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x52, 0x45, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x45, 0x50, 0x45,
	0x4e, 0x44, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x50, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x45, 0x50, 0x45, 0x4e, 0x44, 0x45,
	0x4e, 0x43, 0x59, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x45, 0x58, 0x54,
	0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x42, 0x58, 0x5a, 0x56, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f,
	0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f,
	0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2d, 0x73, 0x64, 0x6b, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x64,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_prodvana_desired_state_model_entity_proto_rawDescOnce sync.Once
	file_prodvana_desired_state_model_entity_proto_rawDescData = file_prodvana_desired_state_model_entity_proto_rawDesc
)

func file_prodvana_desired_state_model_entity_proto_rawDescGZIP() []byte {
	file_prodvana_desired_state_model_entity_proto_rawDescOnce.Do(func() {
		file_prodvana_desired_state_model_entity_proto_rawDescData = protoimpl.X.CompressGZIP(file_prodvana_desired_state_model_entity_proto_rawDescData)
	})
	return file_prodvana_desired_state_model_entity_proto_rawDescData
}

var file_prodvana_desired_state_model_entity_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_prodvana_desired_state_model_entity_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_prodvana_desired_state_model_entity_proto_goTypes = []interface{}{
	(DependencyType)(0),                               // 0: prodvana.desired_state.model.DependencyType
	(Notifications_RuntimeFailure_FailureType)(0),     // 1: prodvana.desired_state.model.Notifications.RuntimeFailure.FailureType
	(*Notifications)(nil),                             // 2: prodvana.desired_state.model.Notifications
	(*Dependency)(nil),                                // 3: prodvana.desired_state.model.Dependency
	(*Entity)(nil),                                    // 4: prodvana.desired_state.model.Entity
	(*EntityGraph)(nil),                               // 5: prodvana.desired_state.model.EntityGraph
	(*Notifications_ProgramFailures)(nil),             // 6: prodvana.desired_state.model.Notifications.ProgramFailures
	(*Notifications_RuntimeFailure)(nil),              // 7: prodvana.desired_state.model.Notifications.RuntimeFailure
	(*Notifications_ConvergenceExtensionFailure)(nil), // 8: prodvana.desired_state.model.Notifications.ConvergenceExtensionFailure
	(*Notifications_DelayedConvergence)(nil),          // 9: prodvana.desired_state.model.Notifications.DelayedConvergence
	(*ProtectionFailure)(nil),                         // 10: prodvana.desired_state.model.ProtectionFailure
	(*ConcurrencyLimitExceeded)(nil),                  // 11: prodvana.desired_state.model.ConcurrencyLimitExceeded
	(*Identifier)(nil),                                // 12: prodvana.desired_state.model.Identifier
	(*Annotations)(nil),                               // 13: prodvana.desired_state.model.Annotations
	(Status)(0),                                       // 14: prodvana.desired_state.model.Status
	(SimpleStatus)(0),                                 // 15: prodvana.desired_state.model.SimpleStatus
	(*State)(nil),                                     // 16: prodvana.desired_state.model.State
	(*ConditionState)(nil),                            // 17: prodvana.desired_state.model.ConditionState
	(*StatusExplanation)(nil),                         // 18: prodvana.desired_state.model.StatusExplanation
	(*DebugLog)(nil),                                  // 19: prodvana.desired_state.model.DebugLog
	(*ActionExplanation)(nil),                         // 20: prodvana.desired_state.model.ActionExplanation
	(*timestamppb.Timestamp)(nil),                     // 21: google.protobuf.Timestamp
	(common_config.TaskLifecycle)(0),                  // 22: prodvana.common_config.TaskLifecycle
	(*MissingApproval)(nil),                           // 23: prodvana.desired_state.model.MissingApproval
	(*ApplyError)(nil),                                // 24: prodvana.desired_state.model.ApplyError
	(*KeyDeliveryDecision)(nil),                       // 25: prodvana.desired_state.model.KeyDeliveryDecision
}
var file_prodvana_desired_state_model_entity_proto_depIdxs = []int32{
	6,  // 0: prodvana.desired_state.model.Notifications.program_failures:type_name -> prodvana.desired_state.model.Notifications.ProgramFailures
	7,  // 1: prodvana.desired_state.model.Notifications.runtime_failures:type_name -> prodvana.desired_state.model.Notifications.RuntimeFailure
	10, // 2: prodvana.desired_state.model.Notifications.protection_failure:type_name -> prodvana.desired_state.model.ProtectionFailure
	8,  // 3: prodvana.desired_state.model.Notifications.convergence_extension_failure:type_name -> prodvana.desired_state.model.Notifications.ConvergenceExtensionFailure
	9,  // 4: prodvana.desired_state.model.Notifications.delayed_convergence:type_name -> prodvana.desired_state.model.Notifications.DelayedConvergence
	11, // 5: prodvana.desired_state.model.Notifications.concurrency_limit_exceeded_errors:type_name -> prodvana.desired_state.model.ConcurrencyLimitExceeded
	0,  // 6: prodvana.desired_state.model.Dependency.type:type_name -> prodvana.desired_state.model.DependencyType
	12, // 7: prodvana.desired_state.model.Dependency.id:type_name -> prodvana.desired_state.model.Identifier
	12, // 8: prodvana.desired_state.model.Entity.id:type_name -> prodvana.desired_state.model.Identifier
	13, // 9: prodvana.desired_state.model.Entity.annotations:type_name -> prodvana.desired_state.model.Annotations
	14, // 10: prodvana.desired_state.model.Entity.status:type_name -> prodvana.desired_state.model.Status
	15, // 11: prodvana.desired_state.model.Entity.simple_status:type_name -> prodvana.desired_state.model.SimpleStatus
	16, // 12: prodvana.desired_state.model.Entity.starting_state:type_name -> prodvana.desired_state.model.State
	16, // 13: prodvana.desired_state.model.Entity.last_seen_state:type_name -> prodvana.desired_state.model.State
	16, // 14: prodvana.desired_state.model.Entity.desired_state:type_name -> prodvana.desired_state.model.State
	16, // 15: prodvana.desired_state.model.Entity.target_state:type_name -> prodvana.desired_state.model.State
	17, // 16: prodvana.desired_state.model.Entity.precondition_statuses:type_name -> prodvana.desired_state.model.ConditionState
	18, // 17: prodvana.desired_state.model.Entity.status_explanations:type_name -> prodvana.desired_state.model.StatusExplanation
	19, // 18: prodvana.desired_state.model.Entity.logs:type_name -> prodvana.desired_state.model.DebugLog
	20, // 19: prodvana.desired_state.model.Entity.action_explanation:type_name -> prodvana.desired_state.model.ActionExplanation
	21, // 20: prodvana.desired_state.model.Entity.last_update_timestamp:type_name -> google.protobuf.Timestamp
	21, // 21: prodvana.desired_state.model.Entity.last_fetched_timestamp:type_name -> google.protobuf.Timestamp
	21, // 22: prodvana.desired_state.model.Entity.last_applied_timestamp:type_name -> google.protobuf.Timestamp
	21, // 23: prodvana.desired_state.model.Entity.expected_next_apply_timestamp:type_name -> google.protobuf.Timestamp
	12, // 24: prodvana.desired_state.model.Entity.dependencies:type_name -> prodvana.desired_state.model.Identifier
	12, // 25: prodvana.desired_state.model.Entity.direct_dependencies:type_name -> prodvana.desired_state.model.Identifier
	3,  // 26: prodvana.desired_state.model.Entity.dependencies_with_type:type_name -> prodvana.desired_state.model.Dependency
	22, // 27: prodvana.desired_state.model.Entity.lifecycle:type_name -> prodvana.common_config.TaskLifecycle
	23, // 28: prodvana.desired_state.model.Entity.missing_approval:type_name -> prodvana.desired_state.model.MissingApproval
	24, // 29: prodvana.desired_state.model.Entity.apply_error:type_name -> prodvana.desired_state.model.ApplyError
	2,  // 30: prodvana.desired_state.model.Entity.notifications:type_name -> prodvana.desired_state.model.Notifications
	25, // 31: prodvana.desired_state.model.Entity.last_key_delivery_decision:type_name -> prodvana.desired_state.model.KeyDeliveryDecision
	25, // 32: prodvana.desired_state.model.Entity.last_rollback_key_delivery_decision:type_name -> prodvana.desired_state.model.KeyDeliveryDecision
	12, // 33: prodvana.desired_state.model.EntityGraph.root:type_name -> prodvana.desired_state.model.Identifier
	4,  // 34: prodvana.desired_state.model.EntityGraph.entities:type_name -> prodvana.desired_state.model.Entity
	21, // 35: prodvana.desired_state.model.EntityGraph.replaced_timestamp:type_name -> google.protobuf.Timestamp
	21, // 36: prodvana.desired_state.model.Notifications.ProgramFailures.most_recent_failure:type_name -> google.protobuf.Timestamp
	1,  // 37: prodvana.desired_state.model.Notifications.RuntimeFailure.failure_type:type_name -> prodvana.desired_state.model.Notifications.RuntimeFailure.FailureType
	12, // 38: prodvana.desired_state.model.Notifications.ConvergenceExtensionFailure.extension_id:type_name -> prodvana.desired_state.model.Identifier
	39, // [39:39] is the sub-list for method output_type
	39, // [39:39] is the sub-list for method input_type
	39, // [39:39] is the sub-list for extension type_name
	39, // [39:39] is the sub-list for extension extendee
	0,  // [0:39] is the sub-list for field type_name
}

func init() { file_prodvana_desired_state_model_entity_proto_init() }
func file_prodvana_desired_state_model_entity_proto_init() {
	if File_prodvana_desired_state_model_entity_proto != nil {
		return
	}
	file_prodvana_desired_state_model_desired_state_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_prodvana_desired_state_model_entity_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Notifications); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_entity_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dependency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_entity_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Entity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_entity_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityGraph); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_entity_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Notifications_ProgramFailures); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_entity_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Notifications_RuntimeFailure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_entity_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Notifications_ConvergenceExtensionFailure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_model_entity_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Notifications_DelayedConvergence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_prodvana_desired_state_model_entity_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_prodvana_desired_state_model_entity_proto_goTypes,
		DependencyIndexes: file_prodvana_desired_state_model_entity_proto_depIdxs,
		EnumInfos:         file_prodvana_desired_state_model_entity_proto_enumTypes,
		MessageInfos:      file_prodvana_desired_state_model_entity_proto_msgTypes,
	}.Build()
	File_prodvana_desired_state_model_entity_proto = out.File
	file_prodvana_desired_state_model_entity_proto_rawDesc = nil
	file_prodvana_desired_state_model_entity_proto_goTypes = nil
	file_prodvana_desired_state_model_entity_proto_depIdxs = nil
}
