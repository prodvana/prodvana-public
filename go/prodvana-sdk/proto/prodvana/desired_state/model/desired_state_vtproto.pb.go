// Code generated by protoc-gen-go-vtproto. DO NOT EDIT.
// protoc-gen-go-vtproto version: v0.6.0
// source: prodvana/desired_state/model/desired_state.proto

package model

import (
	durationpb1 "github.com/planetscale/vtprotobuf/types/known/durationpb"
	timestamppb1 "github.com/planetscale/vtprotobuf/types/known/timestamppb"
	common_config "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/common_config"
	runtimes "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/runtimes"
	extensions "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/runtimes/extensions"
	proto "google.golang.org/protobuf/proto"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

func (m *ProtectionLink) CloneVT() *ProtectionLink {
	if m == nil {
		return (*ProtectionLink)(nil)
	}
	r := new(ProtectionLink)
	r.Lifecycle = m.Lifecycle.CloneVT()
	r.AttachmentId = m.AttachmentId
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ProtectionLink) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *Condition_ReleaseChannelStableCondition) CloneVT() *Condition_ReleaseChannelStableCondition {
	if m == nil {
		return (*Condition_ReleaseChannelStableCondition)(nil)
	}
	r := new(Condition_ReleaseChannelStableCondition)
	r.Application = m.Application
	r.Service = m.Service
	r.ServiceId = m.ServiceId
	r.ReleaseChannel = m.ReleaseChannel
	r.ReleaseChannelId = m.ReleaseChannelId
	r.ServiceVersion = m.ServiceVersion
	r.InternalOnlySatisfiedInReplacedDesiredState = m.InternalOnlySatisfiedInReplacedDesiredState
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Condition_ReleaseChannelStableCondition) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *Condition_ManualApproval) CloneVT() *Condition_ManualApproval {
	if m == nil {
		return (*Condition_ManualApproval)(nil)
	}
	r := new(Condition_ManualApproval)
	r.Topic = m.Topic
	r.Description = m.Description
	r.MinApprovers = m.MinApprovers
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Condition_ManualApproval) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *Condition_CustomTaskSuccessfulCondition_Protection) CloneVT() *Condition_CustomTaskSuccessfulCondition_Protection {
	if m == nil {
		return (*Condition_CustomTaskSuccessfulCondition_Protection)(nil)
	}
	r := new(Condition_CustomTaskSuccessfulCondition_Protection)
	r.Name = m.Name
	r.TaskType = m.TaskType
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Condition_CustomTaskSuccessfulCondition_Protection) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *Condition_CustomTaskSuccessfulCondition) CloneVT() *Condition_CustomTaskSuccessfulCondition {
	if m == nil {
		return (*Condition_CustomTaskSuccessfulCondition)(nil)
	}
	r := new(Condition_CustomTaskSuccessfulCondition)
	r.CustomTaskName = m.CustomTaskName
	if m.Source != nil {
		r.Source = m.Source.(interface {
			CloneVT() isCondition_CustomTaskSuccessfulCondition_Source
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Condition_CustomTaskSuccessfulCondition) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *Condition_CustomTaskSuccessfulCondition_Protection_) CloneVT() isCondition_CustomTaskSuccessfulCondition_Source {
	if m == nil {
		return (*Condition_CustomTaskSuccessfulCondition_Protection_)(nil)
	}
	r := new(Condition_CustomTaskSuccessfulCondition_Protection_)
	r.Protection = m.Protection.CloneVT()
	return r
}

func (m *Condition) CloneVT() *Condition {
	if m == nil {
		return (*Condition)(nil)
	}
	r := new(Condition)
	r.DesiredStateId = m.DesiredStateId
	if m.Condition != nil {
		r.Condition = m.Condition.(interface{ CloneVT() isCondition_Condition }).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Condition) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *Condition_RcCond) CloneVT() isCondition_Condition {
	if m == nil {
		return (*Condition_RcCond)(nil)
	}
	r := new(Condition_RcCond)
	r.RcCond = m.RcCond.CloneVT()
	return r
}

func (m *Condition_ManualApproval_) CloneVT() isCondition_Condition {
	if m == nil {
		return (*Condition_ManualApproval_)(nil)
	}
	r := new(Condition_ManualApproval_)
	r.ManualApproval = m.ManualApproval.CloneVT()
	return r
}

func (m *Condition_CustomTask) CloneVT() isCondition_Condition {
	if m == nil {
		return (*Condition_CustomTask)(nil)
	}
	r := new(Condition_CustomTask)
	r.CustomTask = m.CustomTask.CloneVT()
	return r
}

func (m *DeliveryExtension) CloneVT() *DeliveryExtension {
	if m == nil {
		return (*DeliveryExtension)(nil)
	}
	r := new(DeliveryExtension)
	r.InstanceId = m.InstanceId
	r.Lifecycle = m.Lifecycle
	if rhs := m.References; rhs != nil {
		tmpContainer := make([]*Identifier, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.References = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *DeliveryExtension) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ProtectionAttachmentDefinition) CloneVT() *ProtectionAttachmentDefinition {
	if m == nil {
		return (*ProtectionAttachmentDefinition)(nil)
	}
	r := new(ProtectionAttachmentDefinition)
	r.ProtectionId = m.ProtectionId
	r.AttachmentId = m.AttachmentId
	r.ProtectionVersion = m.ProtectionVersion
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ProtectionAttachmentDefinition) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *Identifier) CloneVT() *Identifier {
	if m == nil {
		return (*Identifier)(nil)
	}
	r := new(Identifier)
	r.Type = m.Type
	r.Name = m.Name
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Identifier) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ConcurrencyLimit) CloneVT() *ConcurrencyLimit {
	if m == nil {
		return (*ConcurrencyLimit)(nil)
	}
	r := new(ConcurrencyLimit)
	r.LimitId = m.LimitId
	r.Description = m.Description
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ConcurrencyLimit) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *Metadata) CloneVT() *Metadata {
	if m == nil {
		return (*Metadata)(nil)
	}
	r := new(Metadata)
	r.Self = m.Self.CloneVT()
	r.DesiredStateId = m.DesiredStateId
	r.RootDesiredStateId = m.RootDesiredStateId
	r.ReleaseId = m.ReleaseId
	r.TargetStateSetByParent = m.TargetStateSetByParent
	r.RequireApprovalBeforeApply = m.RequireApprovalBeforeApply
	r.AppliesInObserverMode = m.AppliesInObserverMode
	r.ConvergenceGracePeriod = (*durationpb.Duration)((*durationpb1.Duration)(m.ConvergenceGracePeriod).CloneVT())
	if rhs := m.Preconditions; rhs != nil {
		tmpContainer := make([]*Condition, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Preconditions = tmpContainer
	}
	if rhs := m.Invariants; rhs != nil {
		tmpContainer := make([]*Condition, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Invariants = tmpContainer
	}
	if rhs := m.ProtectionLinks; rhs != nil {
		tmpContainer := make([]*ProtectionLink, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.ProtectionLinks = tmpContainer
	}
	if rhs := m.DeliveryExtensions; rhs != nil {
		tmpContainer := make([]*DeliveryExtension, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.DeliveryExtensions = tmpContainer
	}
	if rhs := m.ConvergenceProtectionAttachments; rhs != nil {
		tmpContainer := make([]*ProtectionAttachmentDefinition, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.ConvergenceProtectionAttachments = tmpContainer
	}
	if rhs := m.ConcurrencyLimits; rhs != nil {
		tmpContainer := make([]*ConcurrencyLimit, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.ConcurrencyLimits = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Metadata) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *StatusExplanation) CloneVT() *StatusExplanation {
	if m == nil {
		return (*StatusExplanation)(nil)
	}
	r := new(StatusExplanation)
	r.Subject = m.Subject.CloneVT()
	r.DesiredStateId = m.DesiredStateId
	r.ServiceInstance = m.ServiceInstance.CloneVT()
	r.Reason = m.Reason
	r.Message = m.Message
	if rhs := m.Messages; rhs != nil {
		tmpContainer := make([]string, len(rhs))
		copy(tmpContainer, rhs)
		r.Messages = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *StatusExplanation) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ActionExplanation) CloneVT() *ActionExplanation {
	if m == nil {
		return (*ActionExplanation)(nil)
	}
	r := new(ActionExplanation)
	r.Ts = (*timestamppb.Timestamp)((*timestamppb1.Timestamp)(m.Ts).CloneVT())
	r.ActionType = m.ActionType
	r.Message = m.Message
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ActionExplanation) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *Version) CloneVT() *Version {
	if m == nil {
		return (*Version)(nil)
	}
	r := new(Version)
	r.Version = m.Version
	r.Replicas = m.Replicas
	r.AvailableReplicas = m.AvailableReplicas
	r.PushTimestamp = (*timestamppb.Timestamp)((*timestamppb1.Timestamp)(m.PushTimestamp).CloneVT())
	r.Active = m.Active
	r.TargetReplicas = m.TargetReplicas
	r.Dirty = m.Dirty
	r.SkipInUi = m.SkipInUi
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Version) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ServiceInstanceState) CloneVT() *ServiceInstanceState {
	if m == nil {
		return (*ServiceInstanceState)(nil)
	}
	r := new(ServiceInstanceState)
	r.Meta = m.Meta.CloneVT()
	r.Application = m.Application
	r.Service = m.Service
	r.ReleaseChannel = m.ReleaseChannel
	r.ServiceId = m.ServiceId
	r.ReleaseChannelId = m.ReleaseChannelId
	r.Rollback = m.Rollback
	r.Delivery = m.Delivery.CloneVT()
	r.DeploymentOwnedByChildren = m.DeploymentOwnedByChildren
	r.AutorollbackDisabledReason = m.AutorollbackDisabledReason
	r.NeedsApply = m.NeedsApply
	if rhs := m.Versions; rhs != nil {
		tmpContainer := make([]*Version, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Versions = tmpContainer
	}
	if m.AutorollbackOneof != nil {
		r.AutorollbackOneof = m.AutorollbackOneof.(interface {
			CloneVT() isServiceInstanceState_AutorollbackOneof
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ServiceInstanceState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ServiceInstanceState_RollbackVersion) CloneVT() isServiceInstanceState_AutorollbackOneof {
	if m == nil {
		return (*ServiceInstanceState_RollbackVersion)(nil)
	}
	r := new(ServiceInstanceState_RollbackVersion)
	r.RollbackVersion = m.RollbackVersion.CloneVT()
	return r
}

func (m *ServiceInstanceState_ComputeRollbackVersion) CloneVT() isServiceInstanceState_AutorollbackOneof {
	if m == nil {
		return (*ServiceInstanceState_ComputeRollbackVersion)(nil)
	}
	r := new(ServiceInstanceState_ComputeRollbackVersion)
	r.ComputeRollbackVersion = m.ComputeRollbackVersion
	return r
}

func (m *ServiceState) CloneVT() *ServiceState {
	if m == nil {
		return (*ServiceState)(nil)
	}
	r := new(ServiceState)
	r.Meta = m.Meta.CloneVT()
	r.Application = m.Application
	r.Service = m.Service
	r.ServiceId = m.ServiceId
	if rhs := m.ReleaseChannels; rhs != nil {
		tmpContainer := make([]*ServiceInstanceState, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.ReleaseChannels = tmpContainer
	}
	if rhs := m.CustomTasks; rhs != nil {
		tmpContainer := make([]*CustomTaskState, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.CustomTasks = tmpContainer
	}
	if rhs := m.DeliveryExtensions; rhs != nil {
		tmpContainer := make([]*DeliveryExtensionState, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.DeliveryExtensions = tmpContainer
	}
	if rhs := m.ReleaseChannelLabelSelectors; rhs != nil {
		tmpContainer := make([]*ServiceInstanceLabelSelector, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.ReleaseChannelLabelSelectors = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ServiceState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ServiceInstanceLabelSelector) CloneVT() *ServiceInstanceLabelSelector {
	if m == nil {
		return (*ServiceInstanceLabelSelector)(nil)
	}
	r := new(ServiceInstanceLabelSelector)
	if m.SelectorOneof != nil {
		r.SelectorOneof = m.SelectorOneof.(interface {
			CloneVT() isServiceInstanceLabelSelector_SelectorOneof
		}).CloneVT()
	}
	if rhs := m.Versions; rhs != nil {
		tmpContainer := make([]*Version, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Versions = tmpContainer
	}
	if m.AutorollbackOneof != nil {
		r.AutorollbackOneof = m.AutorollbackOneof.(interface {
			CloneVT() isServiceInstanceLabelSelector_AutorollbackOneof
		}).CloneVT()
	}
	if rhs := m.MaterializedReleaseChannels; rhs != nil {
		tmpContainer := make([]string, len(rhs))
		copy(tmpContainer, rhs)
		r.MaterializedReleaseChannels = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ServiceInstanceLabelSelector) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ServiceInstanceLabelSelector_ReleaseChannelSelector) CloneVT() isServiceInstanceLabelSelector_SelectorOneof {
	if m == nil {
		return (*ServiceInstanceLabelSelector_ReleaseChannelSelector)(nil)
	}
	r := new(ServiceInstanceLabelSelector_ReleaseChannelSelector)
	r.ReleaseChannelSelector = m.ReleaseChannelSelector
	return r
}

func (m *ServiceInstanceLabelSelector_All) CloneVT() isServiceInstanceLabelSelector_SelectorOneof {
	if m == nil {
		return (*ServiceInstanceLabelSelector_All)(nil)
	}
	r := new(ServiceInstanceLabelSelector_All)
	r.All = m.All
	return r
}

func (m *ServiceInstanceLabelSelector_RollbackVersion) CloneVT() isServiceInstanceLabelSelector_AutorollbackOneof {
	if m == nil {
		return (*ServiceInstanceLabelSelector_RollbackVersion)(nil)
	}
	r := new(ServiceInstanceLabelSelector_RollbackVersion)
	r.RollbackVersion = m.RollbackVersion.CloneVT()
	return r
}

func (m *ServiceInstanceLabelSelector_ComputeRollbackVersion) CloneVT() isServiceInstanceLabelSelector_AutorollbackOneof {
	if m == nil {
		return (*ServiceInstanceLabelSelector_ComputeRollbackVersion)(nil)
	}
	r := new(ServiceInstanceLabelSelector_ComputeRollbackVersion)
	r.ComputeRollbackVersion = m.ComputeRollbackVersion
	return r
}

func (m *ServiceGroupState) CloneVT() *ServiceGroupState {
	if m == nil {
		return (*ServiceGroupState)(nil)
	}
	r := new(ServiceGroupState)
	r.Meta = m.Meta.CloneVT()
	if rhs := m.Services; rhs != nil {
		tmpContainer := make([]*ServiceState, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Services = tmpContainer
	}
	if rhs := m.CustomTasks; rhs != nil {
		tmpContainer := make([]*CustomTaskState, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.CustomTasks = tmpContainer
	}
	if rhs := m.DeliveryExtensions; rhs != nil {
		tmpContainer := make([]*DeliveryExtensionState, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.DeliveryExtensions = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ServiceGroupState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CanaryProgressState) CloneVT() *CanaryProgressState {
	if m == nil {
		return (*CanaryProgressState)(nil)
	}
	r := new(CanaryProgressState)
	r.Status = m.Status
	r.CanaryWeight = m.CanaryWeight
	r.Duration = (*durationpb.Duration)((*durationpb1.Duration)(m.Duration).CloneVT())
	r.PauseStartTimestamp = (*timestamppb.Timestamp)((*timestamppb1.Timestamp)(m.PauseStartTimestamp).CloneVT())
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CanaryProgressState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *BlueGreenProgressState) CloneVT() *BlueGreenProgressState {
	if m == nil {
		return (*BlueGreenProgressState)(nil)
	}
	r := new(BlueGreenProgressState)
	r.Status = m.Status
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *BlueGreenProgressState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *DeliveryState) CloneVT() *DeliveryState {
	if m == nil {
		return (*DeliveryState)(nil)
	}
	r := new(DeliveryState)
	r.DesiredStateId = m.DesiredStateId
	r.Status = m.Status
	r.Message = m.Message
	r.FirstRun = m.FirstRun
	r.Generation = m.Generation
	r.BlueGreenProgress = m.BlueGreenProgress.CloneVT()
	if rhs := m.CanaryProgress; rhs != nil {
		tmpContainer := make([]*CanaryProgressState, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.CanaryProgress = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *DeliveryState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *FetchDetails) CloneVT() *FetchDetails {
	if m == nil {
		return (*FetchDetails)(nil)
	}
	r := new(FetchDetails)
	r.StartedTimestamp = (*timestamppb.Timestamp)((*timestamppb1.Timestamp)(m.StartedTimestamp).CloneVT())
	r.CompletedTimestamp = (*timestamppb.Timestamp)((*timestamppb1.Timestamp)(m.CompletedTimestamp).CloneVT())
	r.FetchPlanBlobId = m.FetchPlanBlobId
	r.FetchPlanExplanationBlobId = m.FetchPlanExplanationBlobId
	r.Version = m.Version
	r.RuntimeObjectStatus = m.RuntimeObjectStatus
	r.FetchStatus = m.FetchStatus
	r.FetcherDesiredStateId = m.FetcherDesiredStateId
	r.Message = m.Message
	r.FetchMode = m.FetchMode
	r.TaskRun = m.TaskRun.CloneVT()
	if rhs := m.Versions; rhs != nil {
		tmpContainer := make([]*Version, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Versions = tmpContainer
	}
	if rhs := m.ExternalObjects; rhs != nil {
		tmpContainer := make([]*extensions.ExternalObject, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.ExternalObjects = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *FetchDetails) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RuntimeExtensionFetchOutput) CloneVT() *RuntimeExtensionFetchOutput {
	if m == nil {
		return (*RuntimeExtensionFetchOutput)(nil)
	}
	r := new(RuntimeExtensionFetchOutput)
	r.OngoingFetch = m.OngoingFetch.CloneVT()
	r.LastSuccessfulFetch = m.LastSuccessfulFetch.CloneVT()
	r.LastFailedFetch = m.LastFailedFetch.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RuntimeExtensionFetchOutput) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RuntimeExtensionGetInfoOutputContent) CloneVT() *RuntimeExtensionGetInfoOutputContent {
	if m == nil {
		return (*RuntimeExtensionGetInfoOutputContent)(nil)
	}
	r := new(RuntimeExtensionGetInfoOutputContent)
	r.Name = m.Name
	r.BlobId = m.BlobId
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RuntimeExtensionGetInfoOutputContent) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RuntimeExtensionGetInfoDetails) CloneVT() *RuntimeExtensionGetInfoDetails {
	if m == nil {
		return (*RuntimeExtensionGetInfoDetails)(nil)
	}
	r := new(RuntimeExtensionGetInfoDetails)
	r.SystemMessage = m.SystemMessage
	r.Status = m.Status
	r.StartedTimestamp = (*timestamppb.Timestamp)((*timestamppb1.Timestamp)(m.StartedTimestamp).CloneVT())
	r.CompletedTimestamp = (*timestamppb.Timestamp)((*timestamppb1.Timestamp)(m.CompletedTimestamp).CloneVT())
	r.Version = m.Version
	if rhs := m.Contents; rhs != nil {
		tmpContainer := make([]*RuntimeExtensionGetInfoOutputContent, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Contents = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RuntimeExtensionGetInfoDetails) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RuntimeExtensionGetInfoOutput) CloneVT() *RuntimeExtensionGetInfoOutput {
	if m == nil {
		return (*RuntimeExtensionGetInfoOutput)(nil)
	}
	r := new(RuntimeExtensionGetInfoOutput)
	r.GetInfoDetails = m.GetInfoDetails.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RuntimeExtensionGetInfoOutput) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ApplyDetails) CloneVT() *ApplyDetails {
	if m == nil {
		return (*ApplyDetails)(nil)
	}
	r := new(ApplyDetails)
	r.StartedTimestamp = (*timestamppb.Timestamp)((*timestamppb1.Timestamp)(m.StartedTimestamp).CloneVT())
	r.CompletedTimestamp = (*timestamppb.Timestamp)((*timestamppb1.Timestamp)(m.CompletedTimestamp).CloneVT())
	r.Version = m.Version
	r.ApplyStatus = m.ApplyStatus
	r.FetchDetails = m.FetchDetails.CloneVT()
	r.HasWorkReason = m.HasWorkReason
	r.TaskRun = m.TaskRun.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ApplyDetails) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RuntimeExtensionApplyOutput) CloneVT() *RuntimeExtensionApplyOutput {
	if m == nil {
		return (*RuntimeExtensionApplyOutput)(nil)
	}
	r := new(RuntimeExtensionApplyOutput)
	r.OngoingApply = m.OngoingApply.CloneVT()
	r.LastApply = m.LastApply.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RuntimeExtensionApplyOutput) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RuntimeObject_RuntimeExtension) CloneVT() *RuntimeObject_RuntimeExtension {
	if m == nil {
		return (*RuntimeObject_RuntimeExtension)(nil)
	}
	r := new(RuntimeObject_RuntimeExtension)
	r.Apply = m.Apply.CloneVT()
	r.Fetch = m.Fetch.CloneVT()
	r.GetInfo = m.GetInfo.CloneVT()
	r.FetchInterval = (*durationpb.Duration)((*durationpb1.Duration)(m.FetchInterval).CloneVT())
	r.FetchSteadyStateInterval = (*durationpb.Duration)((*durationpb1.Duration)(m.FetchSteadyStateInterval).CloneVT())
	r.GetInfoInterval = (*durationpb.Duration)((*durationpb1.Duration)(m.GetInfoInterval).CloneVT())
	r.ServiceId = m.ServiceId
	r.ReleaseChannelId = m.ReleaseChannelId
	r.Type = m.Type
	r.FetchOutput = m.FetchOutput.CloneVT()
	r.GetInfoOutput = m.GetInfoOutput.CloneVT()
	r.ApplyOutput = m.ApplyOutput.CloneVT()
	r.FetchRetryPolicy = m.FetchRetryPolicy.CloneVT()
	r.ApplyRetryPolicy = m.ApplyRetryPolicy.CloneVT()
	r.GetInfoRetryPolicy = m.GetInfoRetryPolicy.CloneVT()
	r.FetchMode = m.FetchMode
	if rhs := m.Parameters; rhs != nil {
		tmpContainer := make([]*common_config.ParameterDefinition, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Parameters = tmpContainer
	}
	if rhs := m.ParameterValues; rhs != nil {
		tmpContainer := make([]*common_config.ParameterValue, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.ParameterValues = tmpContainer
	}
	if rhs := m.ApplyRetryableExitCodes; rhs != nil {
		tmpContainer := make([]int32, len(rhs))
		copy(tmpContainer, rhs)
		r.ApplyRetryableExitCodes = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RuntimeObject_RuntimeExtension) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RuntimeObject) CloneVT() *RuntimeObject {
	if m == nil {
		return (*RuntimeObject)(nil)
	}
	r := new(RuntimeObject)
	r.Meta = m.Meta.CloneVT()
	r.ObjectType = m.ObjectType
	r.Namespace = m.Namespace
	r.Name = m.Name
	r.GenerateName = m.GenerateName
	r.FetchVersion = m.FetchVersion.CloneVT()
	r.ApplyId = m.ApplyId
	r.Status = m.Status
	r.RollbackVersion = m.RollbackVersion.CloneVT()
	r.Delivery = m.Delivery.CloneVT()
	r.VersionAgnostic = m.VersionAgnostic
	r.DesiredVersionDirtyOnly = m.DesiredVersionDirtyOnly
	r.Message = m.Message
	r.NeedsApply = m.NeedsApply
	r.RuntimeExtension = m.RuntimeExtension.CloneVT()
	r.Interval = (*durationpb.Duration)((*durationpb1.Duration)(m.Interval).CloneVT())
	r.SteadyStateInterval = (*durationpb.Duration)((*durationpb1.Duration)(m.SteadyStateInterval).CloneVT())
	r.RequireApprovalBeforeApply = m.RequireApprovalBeforeApply
	r.RawConfig = m.RawConfig
	r.ManagementStatus = m.ManagementStatus
	r.LastCompletedTaskRun = m.LastCompletedTaskRun.CloneVT()
	r.Rollback = m.Rollback
	if rhs := m.Versions; rhs != nil {
		tmpContainer := make([]*Version, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Versions = tmpContainer
	}
	if rhs := m.DebugEvents; rhs != nil {
		tmpContainer := make([]*runtimes.DebugEvent, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.DebugEvents = tmpContainer
	}
	if rhs := m.OutputBlobIds; rhs != nil {
		tmpContainer := make([]string, len(rhs))
		copy(tmpContainer, rhs)
		r.OutputBlobIds = tmpContainer
	}
	if rhs := m.ExitCodes; rhs != nil {
		tmpContainer := make([]int32, len(rhs))
		copy(tmpContainer, rhs)
		r.ExitCodes = tmpContainer
	}
	if rhs := m.ExternalLinks; rhs != nil {
		tmpContainer := make([]*common_config.ExternalLink, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.ExternalLinks = tmpContainer
	}
	if rhs := m.ExternalObjects; rhs != nil {
		tmpContainer := make([]*extensions.ExternalObject, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.ExternalObjects = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RuntimeObject) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ConditionState) CloneVT() *ConditionState {
	if m == nil {
		return (*ConditionState)(nil)
	}
	r := new(ConditionState)
	r.Status = m.Status
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ConditionState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ApplyError) CloneVT() *ApplyError {
	if m == nil {
		return (*ApplyError)(nil)
	}
	r := new(ApplyError)
	r.Message = m.Message
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ApplyError) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *NotificationInfo) CloneVT() *NotificationInfo {
	if m == nil {
		return (*NotificationInfo)(nil)
	}
	r := new(NotificationInfo)
	r.FailureCount = m.FailureCount
	r.MostRecentFailure = (*timestamppb.Timestamp)((*timestamppb1.Timestamp)(m.MostRecentFailure).CloneVT())
	r.RuntimeFetchInvokeError = m.RuntimeFetchInvokeError.CloneVT()
	r.RuntimeApplyInvokeError = m.RuntimeApplyInvokeError.CloneVT()
	if rhs := m.ConcurrencyLimitExceededErrors; rhs != nil {
		tmpContainer := make([]*ConcurrencyLimitExceeded, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.ConcurrencyLimitExceededErrors = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *NotificationInfo) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *KeyDeliveryDecision_EntitySnapshot) CloneVT() *KeyDeliveryDecision_EntitySnapshot {
	if m == nil {
		return (*KeyDeliveryDecision_EntitySnapshot)(nil)
	}
	r := new(KeyDeliveryDecision_EntitySnapshot)
	r.Id = m.Id.CloneVT()
	r.Status = m.Status
	r.Current = m.Current.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *KeyDeliveryDecision_EntitySnapshot) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *KeyDeliveryDecision) CloneVT() *KeyDeliveryDecision {
	if m == nil {
		return (*KeyDeliveryDecision)(nil)
	}
	r := new(KeyDeliveryDecision)
	r.Decision = m.Decision
	r.Explanation = m.Explanation
	r.Status = m.Status
	r.Current = m.Current.CloneVT()
	r.Timestamp = (*timestamppb.Timestamp)((*timestamppb1.Timestamp)(m.Timestamp).CloneVT())
	if rhs := m.StatusExplanations; rhs != nil {
		tmpContainer := make([]*StatusExplanation, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.StatusExplanations = tmpContainer
	}
	if rhs := m.StatusExplanationEntities; rhs != nil {
		tmpContainer := make([]*KeyDeliveryDecision_EntitySnapshot, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.StatusExplanationEntities = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *KeyDeliveryDecision) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ControlState) CloneVT() *ControlState {
	if m == nil {
		return (*ControlState)(nil)
	}
	r := new(ControlState)
	r.Rollback = m.Rollback
	r.KeyDeliveryDecision = m.KeyDeliveryDecision.CloneVT()
	r.RollbackKeyDeliveryDecision = m.RollbackKeyDeliveryDecision.CloneVT()
	r.Paused = m.Paused
	r.ActionExplanation = m.ActionExplanation.CloneVT()
	r.LastFetchedTimestamp = (*timestamppb.Timestamp)((*timestamppb1.Timestamp)(m.LastFetchedTimestamp).CloneVT())
	r.LastAppliedTimestamp = (*timestamppb.Timestamp)((*timestamppb1.Timestamp)(m.LastAppliedTimestamp).CloneVT())
	r.ExpectedNextApplyTimestamp = (*timestamppb.Timestamp)((*timestamppb1.Timestamp)(m.ExpectedNextApplyTimestamp).CloneVT())
	r.MissingApproval = m.MissingApproval.CloneVT()
	r.ObserverMode = m.ObserverMode
	r.ApplyError = m.ApplyError.CloneVT()
	r.NotificationInfo = m.NotificationInfo.CloneVT()
	if rhs := m.PreconditionStates; rhs != nil {
		tmpContainer := make([]*ConditionState, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.PreconditionStates = tmpContainer
	}
	if rhs := m.InvariantStates; rhs != nil {
		tmpContainer := make([]*ConditionState, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.InvariantStates = tmpContainer
	}
	if rhs := m.StatusExplanations; rhs != nil {
		tmpContainer := make([]*StatusExplanation, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.StatusExplanations = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ControlState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ManualApprovalState_Approver) CloneVT() *ManualApprovalState_Approver {
	if m == nil {
		return (*ManualApprovalState_Approver)(nil)
	}
	r := new(ManualApprovalState_Approver)
	r.Source = m.Source
	r.SourceMetadata = m.SourceMetadata.CloneVT()
	r.Status = m.Status
	r.Timestamp = (*timestamppb.Timestamp)((*timestamppb1.Timestamp)(m.Timestamp).CloneVT())
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ManualApprovalState_Approver) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ManualApprovalState) CloneVT() *ManualApprovalState {
	if m == nil {
		return (*ManualApprovalState)(nil)
	}
	r := new(ManualApprovalState)
	r.Meta = m.Meta.CloneVT()
	r.Status = m.Status
	r.Topic = m.Topic
	r.Description = m.Description
	r.MinApprovers = m.MinApprovers
	if rhs := m.Approvers; rhs != nil {
		tmpContainer := make([]*ManualApprovalState_Approver, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Approvers = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ManualApprovalState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *State) CloneVT() *State {
	if m == nil {
		return (*State)(nil)
	}
	r := new(State)
	if m.StateOneof != nil {
		r.StateOneof = m.StateOneof.(interface{ CloneVT() isState_StateOneof }).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *State) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *State_Service) CloneVT() isState_StateOneof {
	if m == nil {
		return (*State_Service)(nil)
	}
	r := new(State_Service)
	r.Service = m.Service.CloneVT()
	return r
}

func (m *State_ServiceInstance) CloneVT() isState_StateOneof {
	if m == nil {
		return (*State_ServiceInstance)(nil)
	}
	r := new(State_ServiceInstance)
	r.ServiceInstance = m.ServiceInstance.CloneVT()
	return r
}

func (m *State_ServiceGroup) CloneVT() isState_StateOneof {
	if m == nil {
		return (*State_ServiceGroup)(nil)
	}
	r := new(State_ServiceGroup)
	r.ServiceGroup = m.ServiceGroup.CloneVT()
	return r
}

func (m *State_RuntimeObject) CloneVT() isState_StateOneof {
	if m == nil {
		return (*State_RuntimeObject)(nil)
	}
	r := new(State_RuntimeObject)
	r.RuntimeObject = m.RuntimeObject.CloneVT()
	return r
}

func (m *State_ManualApproval) CloneVT() isState_StateOneof {
	if m == nil {
		return (*State_ManualApproval)(nil)
	}
	r := new(State_ManualApproval)
	r.ManualApproval = m.ManualApproval.CloneVT()
	return r
}

func (m *State_CustomTask) CloneVT() isState_StateOneof {
	if m == nil {
		return (*State_CustomTask)(nil)
	}
	r := new(State_CustomTask)
	r.CustomTask = m.CustomTask.CloneVT()
	return r
}

func (m *State_ProtectionAttachment) CloneVT() isState_StateOneof {
	if m == nil {
		return (*State_ProtectionAttachment)(nil)
	}
	r := new(State_ProtectionAttachment)
	r.ProtectionAttachment = m.ProtectionAttachment.CloneVT()
	return r
}

func (m *State_ProtectionLink) CloneVT() isState_StateOneof {
	if m == nil {
		return (*State_ProtectionLink)(nil)
	}
	r := new(State_ProtectionLink)
	r.ProtectionLink = m.ProtectionLink.CloneVT()
	return r
}

func (m *State_DeliveryExtension) CloneVT() isState_StateOneof {
	if m == nil {
		return (*State_DeliveryExtension)(nil)
	}
	r := new(State_DeliveryExtension)
	r.DeliveryExtension = m.DeliveryExtension.CloneVT()
	return r
}

func (m *Annotations_Annotation) CloneVT() *Annotations_Annotation {
	if m == nil {
		return (*Annotations_Annotation)(nil)
	}
	r := new(Annotations_Annotation)
	r.Key = m.Key
	r.Value = m.Value
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Annotations_Annotation) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *Annotations) CloneVT() *Annotations {
	if m == nil {
		return (*Annotations)(nil)
	}
	r := new(Annotations)
	if rhs := m.Annotations; rhs != nil {
		tmpContainer := make([]*Annotations_Annotation, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Annotations = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Annotations) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CustomTaskExecutionState) CloneVT() *CustomTaskExecutionState {
	if m == nil {
		return (*CustomTaskExecutionState)(nil)
	}
	r := new(CustomTaskExecutionState)
	r.Status = m.Status
	r.Attempts = m.Attempts
	r.LatestAttemptEndTimestamp = (*timestamppb.Timestamp)((*timestamppb1.Timestamp)(m.LatestAttemptEndTimestamp).CloneVT())
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CustomTaskExecutionState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CustomTaskState) CloneVT() *CustomTaskState {
	if m == nil {
		return (*CustomTaskState)(nil)
	}
	r := new(CustomTaskState)
	r.Meta = m.Meta.CloneVT()
	r.Name = m.Name
	r.Description = m.Description
	r.Application = m.Application
	r.ApplicationId = m.ApplicationId
	r.ReleaseChannel = m.ReleaseChannel
	r.ReleaseChannelId = m.ReleaseChannelId
	r.Program = m.Program.CloneVT()
	r.TaskState = m.TaskState.CloneVT()
	r.RetryConfig = m.RetryConfig.CloneVT()
	if rhs := m.ServiceIds; rhs != nil {
		tmpContainer := make([]string, len(rhs))
		copy(tmpContainer, rhs)
		r.ServiceIds = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CustomTaskState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ProtectionLinkState) CloneVT() *ProtectionLinkState {
	if m == nil {
		return (*ProtectionLinkState)(nil)
	}
	r := new(ProtectionLinkState)
	r.Meta = m.Meta.CloneVT()
	r.AttachmentName = m.AttachmentName
	r.LastSeenAttachmentStatus = m.LastSeenAttachmentStatus
	r.LastSeenAttachmentResult = m.LastSeenAttachmentResult.CloneVT()
	r.Status = m.Status
	r.Link = m.Link.CloneVT()
	r.StartedTimestamp = (*timestamppb.Timestamp)((*timestamppb1.Timestamp)(m.StartedTimestamp).CloneVT())
	r.StoppedTimestamp = (*timestamppb.Timestamp)((*timestamppb1.Timestamp)(m.StoppedTimestamp).CloneVT())
	r.StoppedReason = m.StoppedReason
	r.FirstSuccessTimestamp = (*timestamppb.Timestamp)((*timestamppb1.Timestamp)(m.FirstSuccessTimestamp).CloneVT())
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ProtectionLinkState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ProtectionAttachmentResult) CloneVT() *ProtectionAttachmentResult {
	if m == nil {
		return (*ProtectionAttachmentResult)(nil)
	}
	r := new(ProtectionAttachmentResult)
	r.Status = m.Status
	r.Message = m.Message
	r.SystemDebugMessage = m.SystemDebugMessage
	r.Version = m.Version
	r.ExecutionTimestamp = (*timestamppb.Timestamp)((*timestamppb1.Timestamp)(m.ExecutionTimestamp).CloneVT())
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ProtectionAttachmentResult) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ProtectionAttachment) CloneVT() *ProtectionAttachment {
	if m == nil {
		return (*ProtectionAttachment)(nil)
	}
	r := new(ProtectionAttachment)
	r.Meta = m.Meta.CloneVT()
	r.LastCompletedTimestamp = (*timestamppb.Timestamp)((*timestamppb1.Timestamp)(m.LastCompletedTimestamp).CloneVT())
	r.LastCompletedStatus = m.LastCompletedStatus
	r.LastCompletedAppliedVersion = m.LastCompletedAppliedVersion
	r.ProtectionId = m.ProtectionId
	r.AttachmentId = m.AttachmentId
	r.Result = m.Result.CloneVT()
	if rhs := m.Versions; rhs != nil {
		tmpContainer := make([]*Version, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Versions = tmpContainer
	}
	if rhs := m.LastCompletedVersions; rhs != nil {
		tmpContainer := make([]*Version, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.LastCompletedVersions = tmpContainer
	}
	if rhs := m.LastCompletedStatusExplanations; rhs != nil {
		tmpContainer := make([]*StatusExplanation, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.LastCompletedStatusExplanations = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ProtectionAttachment) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *DeliveryExtensionState) CloneVT() *DeliveryExtensionState {
	if m == nil {
		return (*DeliveryExtensionState)(nil)
	}
	r := new(DeliveryExtensionState)
	r.Meta = m.Meta.CloneVT()
	r.ExtensionId = m.ExtensionId
	r.ExtensionInstanceId = m.ExtensionInstanceId
	r.Lifecycle = m.Lifecycle
	r.OngoingRun = m.OngoingRun.CloneVT()
	r.LastCompletedTimestamp = (*timestamppb.Timestamp)((*timestamppb1.Timestamp)(m.LastCompletedTimestamp).CloneVT())
	r.LastCompletedStatus = m.LastCompletedStatus
	r.LastCompletedAppliedVersion = m.LastCompletedAppliedVersion
	r.Attempts = m.Attempts
	if rhs := m.Versions; rhs != nil {
		tmpContainer := make([]*Version, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Versions = tmpContainer
	}
	if rhs := m.LastRuns; rhs != nil {
		tmpContainer := make([]*TaskRun, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.LastRuns = tmpContainer
	}
	if rhs := m.LastCompletedStatusExplanations; rhs != nil {
		tmpContainer := make([]*StatusExplanation, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.LastCompletedStatusExplanations = tmpContainer
	}
	if rhs := m.References; rhs != nil {
		tmpContainer := make([]*Identifier, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.References = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *DeliveryExtensionState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *Signal_DeliveryPromotionConfig) CloneVT() *Signal_DeliveryPromotionConfig {
	if m == nil {
		return (*Signal_DeliveryPromotionConfig)(nil)
	}
	r := new(Signal_DeliveryPromotionConfig)
	r.Stage = m.Stage
	r.Full = m.Full
	r.Reject = m.Reject
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Signal_DeliveryPromotionConfig) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *Signal_ProtectionBypass) CloneVT() *Signal_ProtectionBypass {
	if m == nil {
		return (*Signal_ProtectionBypass)(nil)
	}
	r := new(Signal_ProtectionBypass)
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Signal_ProtectionBypass) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *Signal_RuntimeExtensionApproval) CloneVT() *Signal_RuntimeExtensionApproval {
	if m == nil {
		return (*Signal_RuntimeExtensionApproval)(nil)
	}
	r := new(Signal_RuntimeExtensionApproval)
	r.Timestamp = (*timestamppb.Timestamp)((*timestamppb1.Timestamp)(m.Timestamp).CloneVT())
	r.Reject = m.Reject
	r.PlanBlobId = m.PlanBlobId
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Signal_RuntimeExtensionApproval) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *Signal_ReleaseChannelBypass) CloneVT() *Signal_ReleaseChannelBypass {
	if m == nil {
		return (*Signal_ReleaseChannelBypass)(nil)
	}
	r := new(Signal_ReleaseChannelBypass)
	if rhs := m.EntityIds; rhs != nil {
		tmpContainer := make([]string, len(rhs))
		copy(tmpContainer, rhs)
		r.EntityIds = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Signal_ReleaseChannelBypass) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *Signal_ConcurrencyLimitBypass) CloneVT() *Signal_ConcurrencyLimitBypass {
	if m == nil {
		return (*Signal_ConcurrencyLimitBypass)(nil)
	}
	r := new(Signal_ConcurrencyLimitBypass)
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Signal_ConcurrencyLimitBypass) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *Signal) CloneVT() *Signal {
	if m == nil {
		return (*Signal)(nil)
	}
	r := new(Signal)
	r.Type = m.Type
	if m.Config != nil {
		r.Config = m.Config.(interface{ CloneVT() isSignal_Config }).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Signal) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *Signal_DeliveryPromotion) CloneVT() isSignal_Config {
	if m == nil {
		return (*Signal_DeliveryPromotion)(nil)
	}
	r := new(Signal_DeliveryPromotion)
	r.DeliveryPromotion = m.DeliveryPromotion.CloneVT()
	return r
}

func (m *Signal_ProtectionBypass_) CloneVT() isSignal_Config {
	if m == nil {
		return (*Signal_ProtectionBypass_)(nil)
	}
	r := new(Signal_ProtectionBypass_)
	r.ProtectionBypass = m.ProtectionBypass.CloneVT()
	return r
}

func (m *Signal_RuntimeExtensionApproval_) CloneVT() isSignal_Config {
	if m == nil {
		return (*Signal_RuntimeExtensionApproval_)(nil)
	}
	r := new(Signal_RuntimeExtensionApproval_)
	r.RuntimeExtensionApproval = m.RuntimeExtensionApproval.CloneVT()
	return r
}

func (m *Signal_ReleaseChannelBypass_) CloneVT() isSignal_Config {
	if m == nil {
		return (*Signal_ReleaseChannelBypass_)(nil)
	}
	r := new(Signal_ReleaseChannelBypass_)
	r.ReleaseChannelBypass = m.ReleaseChannelBypass.CloneVT()
	return r
}

func (m *Signal_ConcurrencyLimitBypass_) CloneVT() isSignal_Config {
	if m == nil {
		return (*Signal_ConcurrencyLimitBypass_)(nil)
	}
	r := new(Signal_ConcurrencyLimitBypass_)
	r.ConcurrencyLimitBypass = m.ConcurrencyLimitBypass.CloneVT()
	return r
}

func (m *DebugLog) CloneVT() *DebugLog {
	if m == nil {
		return (*DebugLog)(nil)
	}
	r := new(DebugLog)
	r.Ts = (*timestamppb.Timestamp)((*timestamppb1.Timestamp)(m.Ts).CloneVT())
	r.Log = m.Log
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *DebugLog) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RuntimeExtensionMetadata) CloneVT() *RuntimeExtensionMetadata {
	if m == nil {
		return (*RuntimeExtensionMetadata)(nil)
	}
	r := new(RuntimeExtensionMetadata)
	r.Output = m.Output.CloneVT()
	r.ApplyDesiredStateId = m.ApplyDesiredStateId
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RuntimeExtensionMetadata) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ManualApprovalConfig) CloneVT() *ManualApprovalConfig {
	if m == nil {
		return (*ManualApprovalConfig)(nil)
	}
	r := new(ManualApprovalConfig)
	r.MinApprovers = m.MinApprovers
	if m.Config != nil {
		r.Config = m.Config.(interface {
			CloneVT() isManualApprovalConfig_Config
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ManualApprovalConfig) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ManualApprovalConfig_RuntimeExtension) CloneVT() isManualApprovalConfig_Config {
	if m == nil {
		return (*ManualApprovalConfig_RuntimeExtension)(nil)
	}
	r := new(ManualApprovalConfig_RuntimeExtension)
	r.RuntimeExtension = m.RuntimeExtension.CloneVT()
	return r
}

func (m *MissingApproval) CloneVT() *MissingApproval {
	if m == nil {
		return (*MissingApproval)(nil)
	}
	r := new(MissingApproval)
	r.DesiredStateId = m.DesiredStateId
	r.SignalType = m.SignalType
	r.Topic = m.Topic
	r.RuntimeExtension = m.RuntimeExtension.CloneVT()
	r.Current = m.Current
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *MissingApproval) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ConcurrencyLimitExceeded_Blocker) CloneVT() *ConcurrencyLimitExceeded_Blocker {
	if m == nil {
		return (*ConcurrencyLimitExceeded_Blocker)(nil)
	}
	r := new(ConcurrencyLimitExceeded_Blocker)
	r.EntityId = m.EntityId.CloneVT()
	r.DesiredStateId = m.DesiredStateId
	r.RootDesiredStateId = m.RootDesiredStateId
	r.ReleaseId = m.ReleaseId
	r.HeldSinceTimestamp = (*timestamppb.Timestamp)((*timestamppb1.Timestamp)(m.HeldSinceTimestamp).CloneVT())
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ConcurrencyLimitExceeded_Blocker) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ConcurrencyLimitExceeded) CloneVT() *ConcurrencyLimitExceeded {
	if m == nil {
		return (*ConcurrencyLimitExceeded)(nil)
	}
	r := new(ConcurrencyLimitExceeded)
	r.EntityId = m.EntityId.CloneVT()
	r.DesiredStateId = m.DesiredStateId
	r.ReleaseId = m.ReleaseId
	r.LimitDescription = m.LimitDescription
	r.LimitId = m.LimitId
	if rhs := m.Blockers; rhs != nil {
		tmpContainer := make([]*ConcurrencyLimitExceeded_Blocker, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Blockers = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ConcurrencyLimitExceeded) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ApplyConditionUnsatisfied_InternalMissingApproval) CloneVT() *ApplyConditionUnsatisfied_InternalMissingApproval {
	if m == nil {
		return (*ApplyConditionUnsatisfied_InternalMissingApproval)(nil)
	}
	r := new(ApplyConditionUnsatisfied_InternalMissingApproval)
	r.DesiredStateId = m.DesiredStateId
	r.SignalType = m.SignalType
	r.Topic = m.Topic
	r.RuntimeExtension = m.RuntimeExtension.CloneVT()
	if rhs := m.GeneratorDesiredStateIds; rhs != nil {
		tmpContainer := make([]string, len(rhs))
		copy(tmpContainer, rhs)
		r.GeneratorDesiredStateIds = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ApplyConditionUnsatisfied_InternalMissingApproval) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ApplyConditionUnsatisfied) CloneVT() *ApplyConditionUnsatisfied {
	if m == nil {
		return (*ApplyConditionUnsatisfied)(nil)
	}
	r := new(ApplyConditionUnsatisfied)
	if m.Reason != nil {
		r.Reason = m.Reason.(interface {
			CloneVT() isApplyConditionUnsatisfied_Reason
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ApplyConditionUnsatisfied) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ApplyConditionUnsatisfied_MissingApproval) CloneVT() isApplyConditionUnsatisfied_Reason {
	if m == nil {
		return (*ApplyConditionUnsatisfied_MissingApproval)(nil)
	}
	r := new(ApplyConditionUnsatisfied_MissingApproval)
	r.MissingApproval = m.MissingApproval.CloneVT()
	return r
}

func (m *ApplyConditionUnsatisfied_ConcurrencyLimitExceeded) CloneVT() isApplyConditionUnsatisfied_Reason {
	if m == nil {
		return (*ApplyConditionUnsatisfied_ConcurrencyLimitExceeded)(nil)
	}
	r := new(ApplyConditionUnsatisfied_ConcurrencyLimitExceeded)
	r.ConcurrencyLimitExceeded = m.ConcurrencyLimitExceeded.CloneVT()
	return r
}

func (m *FetchTaskStartDetails) CloneVT() *FetchTaskStartDetails {
	if m == nil {
		return (*FetchTaskStartDetails)(nil)
	}
	r := new(FetchTaskStartDetails)
	r.FetchMode = m.FetchMode
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *FetchTaskStartDetails) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ConcurrencyLease) CloneVT() *ConcurrencyLease {
	if m == nil {
		return (*ConcurrencyLease)(nil)
	}
	r := new(ConcurrencyLease)
	r.LimitId = m.LimitId
	r.LeaseId = m.LeaseId
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ConcurrencyLease) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *TaskRun_RuntimeObjectMetadata) CloneVT() *TaskRun_RuntimeObjectMetadata {
	if m == nil {
		return (*TaskRun_RuntimeObjectMetadata)(nil)
	}
	r := new(TaskRun_RuntimeObjectMetadata)
	r.Id = m.Id.CloneVT()
	r.Name = m.Name
	r.ObjectType = m.ObjectType
	r.Namespace = m.Namespace
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *TaskRun_RuntimeObjectMetadata) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *TaskRun) CloneVT() *TaskRun {
	if m == nil {
		return (*TaskRun)(nil)
	}
	r := new(TaskRun)
	r.Status = m.Status
	r.Version = m.Version
	r.DesiredStateId = m.DesiredStateId
	r.ReleaseId = m.ReleaseId
	r.CreatedTimestamp = (*timestamppb.Timestamp)((*timestamppb1.Timestamp)(m.CreatedTimestamp).CloneVT())
	r.StartedTimestamp = (*timestamppb.Timestamp)((*timestamppb1.Timestamp)(m.StartedTimestamp).CloneVT())
	r.CompletedTimestamp = (*timestamppb.Timestamp)((*timestamppb1.Timestamp)(m.CompletedTimestamp).CloneVT())
	r.StartedByProcessId = m.StartedByProcessId
	r.PvnWrapperOutput = m.PvnWrapperOutput.CloneVT()
	r.Retryable = m.Retryable
	r.Phase = m.Phase
	r.FetchDetails = m.FetchDetails.CloneVT()
	r.FetchTaskStartDetails = m.FetchTaskStartDetails.CloneVT()
	r.HasWorkReason = m.HasWorkReason
	r.ApplyId = m.ApplyId
	if rhs := m.StatusExplanations; rhs != nil {
		tmpContainer := make([]*StatusExplanation, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.StatusExplanations = tmpContainer
	}
	if rhs := m.SeenVersions; rhs != nil {
		tmpContainer := make([]*Version, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.SeenVersions = tmpContainer
	}
	if rhs := m.OutputBlobIds; rhs != nil {
		tmpContainer := make([]string, len(rhs))
		copy(tmpContainer, rhs)
		r.OutputBlobIds = tmpContainer
	}
	if rhs := m.ExitCodes; rhs != nil {
		tmpContainer := make([]int32, len(rhs))
		copy(tmpContainer, rhs)
		r.ExitCodes = tmpContainer
	}
	if rhs := m.RuntimeObjectMetadatas; rhs != nil {
		tmpContainer := make([]*TaskRun_RuntimeObjectMetadata, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.RuntimeObjectMetadatas = tmpContainer
	}
	if rhs := m.TaskEntities; rhs != nil {
		tmpContainer := make([]*Identifier, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.TaskEntities = tmpContainer
	}
	if rhs := m.RetryableExitCodes; rhs != nil {
		tmpContainer := make([]int32, len(rhs))
		copy(tmpContainer, rhs)
		r.RetryableExitCodes = tmpContainer
	}
	if rhs := m.ConcurrencyLeases; rhs != nil {
		tmpContainer := make([]*ConcurrencyLease, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.ConcurrencyLeases = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *TaskRun) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *TaskEntityContext_ApplyIdWithVersion) CloneVT() *TaskEntityContext_ApplyIdWithVersion {
	if m == nil {
		return (*TaskEntityContext_ApplyIdWithVersion)(nil)
	}
	r := new(TaskEntityContext_ApplyIdWithVersion)
	r.ApplyId = m.ApplyId
	r.Version = m.Version
	r.Active = m.Active
	r.Successful = m.Successful
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *TaskEntityContext_ApplyIdWithVersion) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *TaskEntityContext) CloneVT() *TaskEntityContext {
	if m == nil {
		return (*TaskEntityContext)(nil)
	}
	r := new(TaskEntityContext)
	r.LastCompletedRun = m.LastCompletedRun.CloneVT()
	r.LastRun = m.LastRun.CloneVT()
	r.LastSuccessfulApplyId = m.LastSuccessfulApplyId
	r.ApplyIdVersionOverride = m.ApplyIdVersionOverride.CloneVT()
	if rhs := m.ApplyIdWithVersions; rhs != nil {
		tmpContainer := make([]*TaskEntityContext_ApplyIdWithVersion, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.ApplyIdWithVersions = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *TaskEntityContext) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *SetDesiredStateMetadata) CloneVT() *SetDesiredStateMetadata {
	if m == nil {
		return (*SetDesiredStateMetadata)(nil)
	}
	r := new(SetDesiredStateMetadata)
	r.Rollback = m.Rollback
	r.BypassPreconditionsAndProtections = m.BypassPreconditionsAndProtections
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *SetDesiredStateMetadata) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (this *ProtectionLink) StableEqualVT(that *ProtectionLink) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Lifecycle.StableEqualVT(that.Lifecycle) {
		return false
	}
	if this.AttachmentId != that.AttachmentId {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ProtectionLink) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ProtectionLink)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ProtectionLink) EqualVT(that *ProtectionLink) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Lifecycle.EqualVT(that.Lifecycle) {
		return false
	}
	if this.AttachmentId != that.AttachmentId {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ProtectionLink) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ProtectionLink)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Condition_ReleaseChannelStableCondition) StableEqualVT(that *Condition_ReleaseChannelStableCondition) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Application != that.Application {
		return false
	}
	if this.Service != that.Service {
		return false
	}
	if this.ServiceId != that.ServiceId {
		return false
	}
	if this.ReleaseChannel != that.ReleaseChannel {
		return false
	}
	if this.ReleaseChannelId != that.ReleaseChannelId {
		return false
	}
	if this.ServiceVersion != that.ServiceVersion {
		return false
	}
	if this.InternalOnlySatisfiedInReplacedDesiredState != that.InternalOnlySatisfiedInReplacedDesiredState {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Condition_ReleaseChannelStableCondition) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Condition_ReleaseChannelStableCondition)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *Condition_ManualApproval) StableEqualVT(that *Condition_ManualApproval) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Topic != that.Topic {
		return false
	}
	if this.Description != that.Description {
		return false
	}
	if this.MinApprovers != that.MinApprovers {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Condition_ManualApproval) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Condition_ManualApproval)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *Condition_CustomTaskSuccessfulCondition_Protection) StableEqualVT(that *Condition_CustomTaskSuccessfulCondition_Protection) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	if this.TaskType != that.TaskType {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Condition_CustomTaskSuccessfulCondition_Protection) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Condition_CustomTaskSuccessfulCondition_Protection)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *Condition_CustomTaskSuccessfulCondition) StableEqualVT(that *Condition_CustomTaskSuccessfulCondition) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Source == nil && that.Source != nil {
		return false
	} else if this.Source != nil {
		if that.Source == nil {
			return false
		}
		if !this.Source.(interface {
			StableEqualVT(isCondition_CustomTaskSuccessfulCondition_Source) bool
		}).StableEqualVT(that.Source) {
			return false
		}
	}
	if this.CustomTaskName != that.CustomTaskName {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Condition_CustomTaskSuccessfulCondition) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Condition_CustomTaskSuccessfulCondition)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *Condition_CustomTaskSuccessfulCondition_Protection_) StableEqualVT(thatIface isCondition_CustomTaskSuccessfulCondition_Source) bool {
	that, ok := thatIface.(*Condition_CustomTaskSuccessfulCondition_Protection_)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Protection, that.Protection; p != q {
		if p == nil {
			p = &Condition_CustomTaskSuccessfulCondition_Protection{}
		}
		if q == nil {
			q = &Condition_CustomTaskSuccessfulCondition_Protection{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Condition) StableEqualVT(that *Condition) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Condition == nil && that.Condition != nil {
		return false
	} else if this.Condition != nil {
		if that.Condition == nil {
			return false
		}
		if !this.Condition.(interface {
			StableEqualVT(isCondition_Condition) bool
		}).StableEqualVT(that.Condition) {
			return false
		}
	}
	if this.DesiredStateId != that.DesiredStateId {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Condition) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Condition)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *Condition_RcCond) StableEqualVT(thatIface isCondition_Condition) bool {
	that, ok := thatIface.(*Condition_RcCond)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.RcCond, that.RcCond; p != q {
		if p == nil {
			p = &Condition_ReleaseChannelStableCondition{}
		}
		if q == nil {
			q = &Condition_ReleaseChannelStableCondition{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Condition_ManualApproval_) StableEqualVT(thatIface isCondition_Condition) bool {
	that, ok := thatIface.(*Condition_ManualApproval_)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ManualApproval, that.ManualApproval; p != q {
		if p == nil {
			p = &Condition_ManualApproval{}
		}
		if q == nil {
			q = &Condition_ManualApproval{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Condition_CustomTask) StableEqualVT(thatIface isCondition_Condition) bool {
	that, ok := thatIface.(*Condition_CustomTask)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.CustomTask, that.CustomTask; p != q {
		if p == nil {
			p = &Condition_CustomTaskSuccessfulCondition{}
		}
		if q == nil {
			q = &Condition_CustomTaskSuccessfulCondition{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Condition_ReleaseChannelStableCondition) EqualVT(that *Condition_ReleaseChannelStableCondition) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Application != that.Application {
		return false
	}
	if this.Service != that.Service {
		return false
	}
	if this.ServiceId != that.ServiceId {
		return false
	}
	if this.ReleaseChannel != that.ReleaseChannel {
		return false
	}
	if this.ReleaseChannelId != that.ReleaseChannelId {
		return false
	}
	if this.ServiceVersion != that.ServiceVersion {
		return false
	}
	if this.InternalOnlySatisfiedInReplacedDesiredState != that.InternalOnlySatisfiedInReplacedDesiredState {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Condition_ReleaseChannelStableCondition) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Condition_ReleaseChannelStableCondition)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Condition_ManualApproval) EqualVT(that *Condition_ManualApproval) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Topic != that.Topic {
		return false
	}
	if this.Description != that.Description {
		return false
	}
	if this.MinApprovers != that.MinApprovers {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Condition_ManualApproval) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Condition_ManualApproval)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Condition_CustomTaskSuccessfulCondition_Protection) EqualVT(that *Condition_CustomTaskSuccessfulCondition_Protection) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	if this.TaskType != that.TaskType {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Condition_CustomTaskSuccessfulCondition_Protection) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Condition_CustomTaskSuccessfulCondition_Protection)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Condition_CustomTaskSuccessfulCondition) EqualVT(that *Condition_CustomTaskSuccessfulCondition) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Source == nil && that.Source != nil {
		return false
	} else if this.Source != nil {
		if that.Source == nil {
			return false
		}
		if !this.Source.(interface {
			EqualVT(isCondition_CustomTaskSuccessfulCondition_Source) bool
		}).EqualVT(that.Source) {
			return false
		}
	}
	if this.CustomTaskName != that.CustomTaskName {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Condition_CustomTaskSuccessfulCondition) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Condition_CustomTaskSuccessfulCondition)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Condition_CustomTaskSuccessfulCondition_Protection_) EqualVT(thatIface isCondition_CustomTaskSuccessfulCondition_Source) bool {
	that, ok := thatIface.(*Condition_CustomTaskSuccessfulCondition_Protection_)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Protection, that.Protection; p != q {
		if p == nil {
			p = &Condition_CustomTaskSuccessfulCondition_Protection{}
		}
		if q == nil {
			q = &Condition_CustomTaskSuccessfulCondition_Protection{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Condition) EqualVT(that *Condition) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Condition == nil && that.Condition != nil {
		return false
	} else if this.Condition != nil {
		if that.Condition == nil {
			return false
		}
		if !this.Condition.(interface {
			EqualVT(isCondition_Condition) bool
		}).EqualVT(that.Condition) {
			return false
		}
	}
	if this.DesiredStateId != that.DesiredStateId {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Condition) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Condition)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Condition_RcCond) EqualVT(thatIface isCondition_Condition) bool {
	that, ok := thatIface.(*Condition_RcCond)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.RcCond, that.RcCond; p != q {
		if p == nil {
			p = &Condition_ReleaseChannelStableCondition{}
		}
		if q == nil {
			q = &Condition_ReleaseChannelStableCondition{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Condition_ManualApproval_) EqualVT(thatIface isCondition_Condition) bool {
	that, ok := thatIface.(*Condition_ManualApproval_)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ManualApproval, that.ManualApproval; p != q {
		if p == nil {
			p = &Condition_ManualApproval{}
		}
		if q == nil {
			q = &Condition_ManualApproval{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Condition_CustomTask) EqualVT(thatIface isCondition_Condition) bool {
	that, ok := thatIface.(*Condition_CustomTask)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.CustomTask, that.CustomTask; p != q {
		if p == nil {
			p = &Condition_CustomTaskSuccessfulCondition{}
		}
		if q == nil {
			q = &Condition_CustomTaskSuccessfulCondition{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *DeliveryExtension) StableEqualVT(that *DeliveryExtension) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.InstanceId != that.InstanceId {
		return false
	}
	if this.Lifecycle != that.Lifecycle {
		return false
	}
	if len(this.References) != len(that.References) {
		return false
	}
	for i, vx := range this.References {
		vy := that.References[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Identifier{}
			}
			if q == nil {
				q = &Identifier{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *DeliveryExtension) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*DeliveryExtension)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *DeliveryExtension) EqualVT(that *DeliveryExtension) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.InstanceId != that.InstanceId {
		return false
	}
	if this.Lifecycle != that.Lifecycle {
		return false
	}
	if len(this.References) != len(that.References) {
		return false
	}
	for i, vx := range this.References {
		vy := that.References[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Identifier{}
			}
			if q == nil {
				q = &Identifier{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *DeliveryExtension) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*DeliveryExtension)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ProtectionAttachmentDefinition) StableEqualVT(that *ProtectionAttachmentDefinition) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.ProtectionId != that.ProtectionId {
		return false
	}
	if this.AttachmentId != that.AttachmentId {
		return false
	}
	if this.ProtectionVersion != that.ProtectionVersion {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ProtectionAttachmentDefinition) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ProtectionAttachmentDefinition)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ProtectionAttachmentDefinition) EqualVT(that *ProtectionAttachmentDefinition) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.ProtectionId != that.ProtectionId {
		return false
	}
	if this.AttachmentId != that.AttachmentId {
		return false
	}
	if this.ProtectionVersion != that.ProtectionVersion {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ProtectionAttachmentDefinition) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ProtectionAttachmentDefinition)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Identifier) StableEqualVT(that *Identifier) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Type != that.Type {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Identifier) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Identifier)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *Identifier) EqualVT(that *Identifier) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Type != that.Type {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Identifier) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Identifier)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ConcurrencyLimit) StableEqualVT(that *ConcurrencyLimit) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.LimitId != that.LimitId {
		return false
	}
	if this.Description != that.Description {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ConcurrencyLimit) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ConcurrencyLimit)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ConcurrencyLimit) EqualVT(that *ConcurrencyLimit) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.LimitId != that.LimitId {
		return false
	}
	if this.Description != that.Description {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ConcurrencyLimit) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ConcurrencyLimit)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Metadata) StableEqualVT(that *Metadata) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Preconditions) != len(that.Preconditions) {
		return false
	}
	for i, vx := range this.Preconditions {
		vy := that.Preconditions[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Condition{}
			}
			if q == nil {
				q = &Condition{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if len(this.Invariants) != len(that.Invariants) {
		return false
	}
	for i, vx := range this.Invariants {
		vy := that.Invariants[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Condition{}
			}
			if q == nil {
				q = &Condition{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if !this.Self.StableEqualVT(that.Self) {
		return false
	}
	if this.DesiredStateId != that.DesiredStateId {
		return false
	}
	if this.RootDesiredStateId != that.RootDesiredStateId {
		return false
	}
	if len(this.ProtectionLinks) != len(that.ProtectionLinks) {
		return false
	}
	for i, vx := range this.ProtectionLinks {
		vy := that.ProtectionLinks[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &ProtectionLink{}
			}
			if q == nil {
				q = &ProtectionLink{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if len(this.DeliveryExtensions) != len(that.DeliveryExtensions) {
		return false
	}
	for i, vx := range this.DeliveryExtensions {
		vy := that.DeliveryExtensions[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &DeliveryExtension{}
			}
			if q == nil {
				q = &DeliveryExtension{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if this.TargetStateSetByParent != that.TargetStateSetByParent {
		return false
	}
	if this.RequireApprovalBeforeApply != that.RequireApprovalBeforeApply {
		return false
	}
	if this.AppliesInObserverMode != that.AppliesInObserverMode {
		return false
	}
	if !(*durationpb1.Duration)(this.ConvergenceGracePeriod).StableEqualVT((*durationpb1.Duration)(that.ConvergenceGracePeriod)) {
		return false
	}
	if len(this.ConvergenceProtectionAttachments) != len(that.ConvergenceProtectionAttachments) {
		return false
	}
	for i, vx := range this.ConvergenceProtectionAttachments {
		vy := that.ConvergenceProtectionAttachments[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &ProtectionAttachmentDefinition{}
			}
			if q == nil {
				q = &ProtectionAttachmentDefinition{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if this.ReleaseId != that.ReleaseId {
		return false
	}
	if len(this.ConcurrencyLimits) != len(that.ConcurrencyLimits) {
		return false
	}
	for i, vx := range this.ConcurrencyLimits {
		vy := that.ConcurrencyLimits[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &ConcurrencyLimit{}
			}
			if q == nil {
				q = &ConcurrencyLimit{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Metadata) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Metadata)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *Metadata) EqualVT(that *Metadata) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Preconditions) != len(that.Preconditions) {
		return false
	}
	for i, vx := range this.Preconditions {
		vy := that.Preconditions[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Condition{}
			}
			if q == nil {
				q = &Condition{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if len(this.Invariants) != len(that.Invariants) {
		return false
	}
	for i, vx := range this.Invariants {
		vy := that.Invariants[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Condition{}
			}
			if q == nil {
				q = &Condition{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if !this.Self.EqualVT(that.Self) {
		return false
	}
	if this.DesiredStateId != that.DesiredStateId {
		return false
	}
	if this.RootDesiredStateId != that.RootDesiredStateId {
		return false
	}
	if len(this.ProtectionLinks) != len(that.ProtectionLinks) {
		return false
	}
	for i, vx := range this.ProtectionLinks {
		vy := that.ProtectionLinks[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &ProtectionLink{}
			}
			if q == nil {
				q = &ProtectionLink{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if len(this.DeliveryExtensions) != len(that.DeliveryExtensions) {
		return false
	}
	for i, vx := range this.DeliveryExtensions {
		vy := that.DeliveryExtensions[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &DeliveryExtension{}
			}
			if q == nil {
				q = &DeliveryExtension{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if this.TargetStateSetByParent != that.TargetStateSetByParent {
		return false
	}
	if this.RequireApprovalBeforeApply != that.RequireApprovalBeforeApply {
		return false
	}
	if this.AppliesInObserverMode != that.AppliesInObserverMode {
		return false
	}
	if !(*durationpb1.Duration)(this.ConvergenceGracePeriod).EqualVT((*durationpb1.Duration)(that.ConvergenceGracePeriod)) {
		return false
	}
	if len(this.ConvergenceProtectionAttachments) != len(that.ConvergenceProtectionAttachments) {
		return false
	}
	for i, vx := range this.ConvergenceProtectionAttachments {
		vy := that.ConvergenceProtectionAttachments[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &ProtectionAttachmentDefinition{}
			}
			if q == nil {
				q = &ProtectionAttachmentDefinition{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if this.ReleaseId != that.ReleaseId {
		return false
	}
	if len(this.ConcurrencyLimits) != len(that.ConcurrencyLimits) {
		return false
	}
	for i, vx := range this.ConcurrencyLimits {
		vy := that.ConcurrencyLimits[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &ConcurrencyLimit{}
			}
			if q == nil {
				q = &ConcurrencyLimit{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Metadata) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Metadata)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *StatusExplanation) StableEqualVT(that *StatusExplanation) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Subject.StableEqualVT(that.Subject) {
		return false
	}
	if this.Reason != that.Reason {
		return false
	}
	if this.Message != that.Message {
		return false
	}
	if len(this.Messages) != len(that.Messages) {
		return false
	}
	for i, vx := range this.Messages {
		vy := that.Messages[i]
		if vx != vy {
			return false
		}
	}
	if this.DesiredStateId != that.DesiredStateId {
		return false
	}
	if !this.ServiceInstance.StableEqualVT(that.ServiceInstance) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *StatusExplanation) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*StatusExplanation)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *StatusExplanation) EqualVT(that *StatusExplanation) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Subject.EqualVT(that.Subject) {
		return false
	}
	if this.Reason != that.Reason {
		return false
	}
	if this.Message != that.Message {
		return false
	}
	if len(this.Messages) != len(that.Messages) {
		return false
	}
	for i, vx := range this.Messages {
		vy := that.Messages[i]
		if vx != vy {
			return false
		}
	}
	if this.DesiredStateId != that.DesiredStateId {
		return false
	}
	if !this.ServiceInstance.EqualVT(that.ServiceInstance) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *StatusExplanation) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*StatusExplanation)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ActionExplanation) StableEqualVT(that *ActionExplanation) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.Ts).StableEqualVT((*timestamppb1.Timestamp)(that.Ts)) {
		return false
	}
	if this.ActionType != that.ActionType {
		return false
	}
	if this.Message != that.Message {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ActionExplanation) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ActionExplanation)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ActionExplanation) EqualVT(that *ActionExplanation) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.Ts).EqualVT((*timestamppb1.Timestamp)(that.Ts)) {
		return false
	}
	if this.ActionType != that.ActionType {
		return false
	}
	if this.Message != that.Message {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ActionExplanation) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ActionExplanation)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Version) StableEqualVT(that *Version) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Version != that.Version {
		return false
	}
	if this.Replicas != that.Replicas {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.PushTimestamp).StableEqualVT((*timestamppb1.Timestamp)(that.PushTimestamp)) {
		return false
	}
	if this.Active != that.Active {
		return false
	}
	if this.TargetReplicas != that.TargetReplicas {
		return false
	}
	if this.AvailableReplicas != that.AvailableReplicas {
		return false
	}
	if this.Dirty != that.Dirty {
		return false
	}
	if this.SkipInUi != that.SkipInUi {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Version) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Version)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *Version) EqualVT(that *Version) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Version != that.Version {
		return false
	}
	if this.Replicas != that.Replicas {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.PushTimestamp).EqualVT((*timestamppb1.Timestamp)(that.PushTimestamp)) {
		return false
	}
	if this.Active != that.Active {
		return false
	}
	if this.TargetReplicas != that.TargetReplicas {
		return false
	}
	if this.AvailableReplicas != that.AvailableReplicas {
		return false
	}
	if this.Dirty != that.Dirty {
		return false
	}
	if this.SkipInUi != that.SkipInUi {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Version) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Version)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ServiceInstanceState) StableEqualVT(that *ServiceInstanceState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.AutorollbackOneof == nil && that.AutorollbackOneof != nil {
		return false
	} else if this.AutorollbackOneof != nil {
		if that.AutorollbackOneof == nil {
			return false
		}
		if !this.AutorollbackOneof.(interface {
			StableEqualVT(isServiceInstanceState_AutorollbackOneof) bool
		}).StableEqualVT(that.AutorollbackOneof) {
			return false
		}
	}
	if this.Application != that.Application {
		return false
	}
	if this.Service != that.Service {
		return false
	}
	if this.ReleaseChannel != that.ReleaseChannel {
		return false
	}
	if len(this.Versions) != len(that.Versions) {
		return false
	}
	for i, vx := range this.Versions {
		vy := that.Versions[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Version{}
			}
			if q == nil {
				q = &Version{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if this.Rollback != that.Rollback {
		return false
	}
	if this.ServiceId != that.ServiceId {
		return false
	}
	if this.ReleaseChannelId != that.ReleaseChannelId {
		return false
	}
	if !this.Delivery.StableEqualVT(that.Delivery) {
		return false
	}
	if this.DeploymentOwnedByChildren != that.DeploymentOwnedByChildren {
		return false
	}
	if this.AutorollbackDisabledReason != that.AutorollbackDisabledReason {
		return false
	}
	if this.NeedsApply != that.NeedsApply {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ServiceInstanceState) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ServiceInstanceState)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ServiceInstanceState_RollbackVersion) StableEqualVT(thatIface isServiceInstanceState_AutorollbackOneof) bool {
	that, ok := thatIface.(*ServiceInstanceState_RollbackVersion)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.RollbackVersion, that.RollbackVersion; p != q {
		if p == nil {
			p = &Version{}
		}
		if q == nil {
			q = &Version{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ServiceInstanceState_ComputeRollbackVersion) StableEqualVT(thatIface isServiceInstanceState_AutorollbackOneof) bool {
	that, ok := thatIface.(*ServiceInstanceState_ComputeRollbackVersion)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.ComputeRollbackVersion != that.ComputeRollbackVersion {
		return false
	}
	return true
}

func (this *ServiceInstanceState) EqualVT(that *ServiceInstanceState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.AutorollbackOneof == nil && that.AutorollbackOneof != nil {
		return false
	} else if this.AutorollbackOneof != nil {
		if that.AutorollbackOneof == nil {
			return false
		}
		if !this.AutorollbackOneof.(interface {
			EqualVT(isServiceInstanceState_AutorollbackOneof) bool
		}).EqualVT(that.AutorollbackOneof) {
			return false
		}
	}
	if !this.Meta.EqualVT(that.Meta) {
		return false
	}
	if this.Application != that.Application {
		return false
	}
	if this.Service != that.Service {
		return false
	}
	if this.ReleaseChannel != that.ReleaseChannel {
		return false
	}
	if len(this.Versions) != len(that.Versions) {
		return false
	}
	for i, vx := range this.Versions {
		vy := that.Versions[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Version{}
			}
			if q == nil {
				q = &Version{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if this.Rollback != that.Rollback {
		return false
	}
	if this.ServiceId != that.ServiceId {
		return false
	}
	if this.ReleaseChannelId != that.ReleaseChannelId {
		return false
	}
	if !this.Delivery.EqualVT(that.Delivery) {
		return false
	}
	if this.DeploymentOwnedByChildren != that.DeploymentOwnedByChildren {
		return false
	}
	if this.AutorollbackDisabledReason != that.AutorollbackDisabledReason {
		return false
	}
	if this.NeedsApply != that.NeedsApply {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ServiceInstanceState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ServiceInstanceState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ServiceInstanceState_RollbackVersion) EqualVT(thatIface isServiceInstanceState_AutorollbackOneof) bool {
	that, ok := thatIface.(*ServiceInstanceState_RollbackVersion)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.RollbackVersion, that.RollbackVersion; p != q {
		if p == nil {
			p = &Version{}
		}
		if q == nil {
			q = &Version{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ServiceInstanceState_ComputeRollbackVersion) EqualVT(thatIface isServiceInstanceState_AutorollbackOneof) bool {
	that, ok := thatIface.(*ServiceInstanceState_ComputeRollbackVersion)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.ComputeRollbackVersion != that.ComputeRollbackVersion {
		return false
	}
	return true
}

func (this *ServiceState) StableEqualVT(that *ServiceState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Application != that.Application {
		return false
	}
	if this.Service != that.Service {
		return false
	}
	if this.ServiceId != that.ServiceId {
		return false
	}
	if len(this.ReleaseChannels) != len(that.ReleaseChannels) {
		return false
	}
	for i, vx := range this.ReleaseChannels {
		vy := that.ReleaseChannels[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &ServiceInstanceState{}
			}
			if q == nil {
				q = &ServiceInstanceState{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if len(this.CustomTasks) != len(that.CustomTasks) {
		return false
	}
	for i, vx := range this.CustomTasks {
		vy := that.CustomTasks[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &CustomTaskState{}
			}
			if q == nil {
				q = &CustomTaskState{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if len(this.DeliveryExtensions) != len(that.DeliveryExtensions) {
		return false
	}
	for i, vx := range this.DeliveryExtensions {
		vy := that.DeliveryExtensions[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &DeliveryExtensionState{}
			}
			if q == nil {
				q = &DeliveryExtensionState{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if len(this.ReleaseChannelLabelSelectors) != len(that.ReleaseChannelLabelSelectors) {
		return false
	}
	for i, vx := range this.ReleaseChannelLabelSelectors {
		vy := that.ReleaseChannelLabelSelectors[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &ServiceInstanceLabelSelector{}
			}
			if q == nil {
				q = &ServiceInstanceLabelSelector{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ServiceState) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ServiceState)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ServiceState) EqualVT(that *ServiceState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Meta.EqualVT(that.Meta) {
		return false
	}
	if this.Application != that.Application {
		return false
	}
	if this.Service != that.Service {
		return false
	}
	if this.ServiceId != that.ServiceId {
		return false
	}
	if len(this.ReleaseChannels) != len(that.ReleaseChannels) {
		return false
	}
	for i, vx := range this.ReleaseChannels {
		vy := that.ReleaseChannels[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &ServiceInstanceState{}
			}
			if q == nil {
				q = &ServiceInstanceState{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if len(this.CustomTasks) != len(that.CustomTasks) {
		return false
	}
	for i, vx := range this.CustomTasks {
		vy := that.CustomTasks[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &CustomTaskState{}
			}
			if q == nil {
				q = &CustomTaskState{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if len(this.DeliveryExtensions) != len(that.DeliveryExtensions) {
		return false
	}
	for i, vx := range this.DeliveryExtensions {
		vy := that.DeliveryExtensions[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &DeliveryExtensionState{}
			}
			if q == nil {
				q = &DeliveryExtensionState{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if len(this.ReleaseChannelLabelSelectors) != len(that.ReleaseChannelLabelSelectors) {
		return false
	}
	for i, vx := range this.ReleaseChannelLabelSelectors {
		vy := that.ReleaseChannelLabelSelectors[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &ServiceInstanceLabelSelector{}
			}
			if q == nil {
				q = &ServiceInstanceLabelSelector{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ServiceState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ServiceState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ServiceInstanceLabelSelector) StableEqualVT(that *ServiceInstanceLabelSelector) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.SelectorOneof == nil && that.SelectorOneof != nil {
		return false
	} else if this.SelectorOneof != nil {
		if that.SelectorOneof == nil {
			return false
		}
		if !this.SelectorOneof.(interface {
			StableEqualVT(isServiceInstanceLabelSelector_SelectorOneof) bool
		}).StableEqualVT(that.SelectorOneof) {
			return false
		}
	}
	if this.AutorollbackOneof == nil && that.AutorollbackOneof != nil {
		return false
	} else if this.AutorollbackOneof != nil {
		if that.AutorollbackOneof == nil {
			return false
		}
		if !this.AutorollbackOneof.(interface {
			StableEqualVT(isServiceInstanceLabelSelector_AutorollbackOneof) bool
		}).StableEqualVT(that.AutorollbackOneof) {
			return false
		}
	}
	if len(this.Versions) != len(that.Versions) {
		return false
	}
	for i, vx := range this.Versions {
		vy := that.Versions[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Version{}
			}
			if q == nil {
				q = &Version{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if len(this.MaterializedReleaseChannels) != len(that.MaterializedReleaseChannels) {
		return false
	}
	for i, vx := range this.MaterializedReleaseChannels {
		vy := that.MaterializedReleaseChannels[i]
		if vx != vy {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ServiceInstanceLabelSelector) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ServiceInstanceLabelSelector)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ServiceInstanceLabelSelector_ReleaseChannelSelector) StableEqualVT(thatIface isServiceInstanceLabelSelector_SelectorOneof) bool {
	that, ok := thatIface.(*ServiceInstanceLabelSelector_ReleaseChannelSelector)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.ReleaseChannelSelector != that.ReleaseChannelSelector {
		return false
	}
	return true
}

func (this *ServiceInstanceLabelSelector_All) StableEqualVT(thatIface isServiceInstanceLabelSelector_SelectorOneof) bool {
	that, ok := thatIface.(*ServiceInstanceLabelSelector_All)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.All != that.All {
		return false
	}
	return true
}

func (this *ServiceInstanceLabelSelector_RollbackVersion) StableEqualVT(thatIface isServiceInstanceLabelSelector_AutorollbackOneof) bool {
	that, ok := thatIface.(*ServiceInstanceLabelSelector_RollbackVersion)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.RollbackVersion, that.RollbackVersion; p != q {
		if p == nil {
			p = &Version{}
		}
		if q == nil {
			q = &Version{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ServiceInstanceLabelSelector_ComputeRollbackVersion) StableEqualVT(thatIface isServiceInstanceLabelSelector_AutorollbackOneof) bool {
	that, ok := thatIface.(*ServiceInstanceLabelSelector_ComputeRollbackVersion)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.ComputeRollbackVersion != that.ComputeRollbackVersion {
		return false
	}
	return true
}

func (this *ServiceInstanceLabelSelector) EqualVT(that *ServiceInstanceLabelSelector) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.SelectorOneof == nil && that.SelectorOneof != nil {
		return false
	} else if this.SelectorOneof != nil {
		if that.SelectorOneof == nil {
			return false
		}
		if !this.SelectorOneof.(interface {
			EqualVT(isServiceInstanceLabelSelector_SelectorOneof) bool
		}).EqualVT(that.SelectorOneof) {
			return false
		}
	}
	if this.AutorollbackOneof == nil && that.AutorollbackOneof != nil {
		return false
	} else if this.AutorollbackOneof != nil {
		if that.AutorollbackOneof == nil {
			return false
		}
		if !this.AutorollbackOneof.(interface {
			EqualVT(isServiceInstanceLabelSelector_AutorollbackOneof) bool
		}).EqualVT(that.AutorollbackOneof) {
			return false
		}
	}
	if len(this.Versions) != len(that.Versions) {
		return false
	}
	for i, vx := range this.Versions {
		vy := that.Versions[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Version{}
			}
			if q == nil {
				q = &Version{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if len(this.MaterializedReleaseChannels) != len(that.MaterializedReleaseChannels) {
		return false
	}
	for i, vx := range this.MaterializedReleaseChannels {
		vy := that.MaterializedReleaseChannels[i]
		if vx != vy {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ServiceInstanceLabelSelector) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ServiceInstanceLabelSelector)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ServiceInstanceLabelSelector_ReleaseChannelSelector) EqualVT(thatIface isServiceInstanceLabelSelector_SelectorOneof) bool {
	that, ok := thatIface.(*ServiceInstanceLabelSelector_ReleaseChannelSelector)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.ReleaseChannelSelector != that.ReleaseChannelSelector {
		return false
	}
	return true
}

func (this *ServiceInstanceLabelSelector_All) EqualVT(thatIface isServiceInstanceLabelSelector_SelectorOneof) bool {
	that, ok := thatIface.(*ServiceInstanceLabelSelector_All)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.All != that.All {
		return false
	}
	return true
}

func (this *ServiceInstanceLabelSelector_RollbackVersion) EqualVT(thatIface isServiceInstanceLabelSelector_AutorollbackOneof) bool {
	that, ok := thatIface.(*ServiceInstanceLabelSelector_RollbackVersion)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.RollbackVersion, that.RollbackVersion; p != q {
		if p == nil {
			p = &Version{}
		}
		if q == nil {
			q = &Version{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ServiceInstanceLabelSelector_ComputeRollbackVersion) EqualVT(thatIface isServiceInstanceLabelSelector_AutorollbackOneof) bool {
	that, ok := thatIface.(*ServiceInstanceLabelSelector_ComputeRollbackVersion)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.ComputeRollbackVersion != that.ComputeRollbackVersion {
		return false
	}
	return true
}

func (this *ServiceGroupState) StableEqualVT(that *ServiceGroupState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Services) != len(that.Services) {
		return false
	}
	for i, vx := range this.Services {
		vy := that.Services[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &ServiceState{}
			}
			if q == nil {
				q = &ServiceState{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if len(this.CustomTasks) != len(that.CustomTasks) {
		return false
	}
	for i, vx := range this.CustomTasks {
		vy := that.CustomTasks[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &CustomTaskState{}
			}
			if q == nil {
				q = &CustomTaskState{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if len(this.DeliveryExtensions) != len(that.DeliveryExtensions) {
		return false
	}
	for i, vx := range this.DeliveryExtensions {
		vy := that.DeliveryExtensions[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &DeliveryExtensionState{}
			}
			if q == nil {
				q = &DeliveryExtensionState{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ServiceGroupState) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ServiceGroupState)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ServiceGroupState) EqualVT(that *ServiceGroupState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Meta.EqualVT(that.Meta) {
		return false
	}
	if len(this.Services) != len(that.Services) {
		return false
	}
	for i, vx := range this.Services {
		vy := that.Services[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &ServiceState{}
			}
			if q == nil {
				q = &ServiceState{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if len(this.CustomTasks) != len(that.CustomTasks) {
		return false
	}
	for i, vx := range this.CustomTasks {
		vy := that.CustomTasks[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &CustomTaskState{}
			}
			if q == nil {
				q = &CustomTaskState{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if len(this.DeliveryExtensions) != len(that.DeliveryExtensions) {
		return false
	}
	for i, vx := range this.DeliveryExtensions {
		vy := that.DeliveryExtensions[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &DeliveryExtensionState{}
			}
			if q == nil {
				q = &DeliveryExtensionState{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ServiceGroupState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ServiceGroupState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CanaryProgressState) StableEqualVT(that *CanaryProgressState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Status != that.Status {
		return false
	}
	if this.CanaryWeight != that.CanaryWeight {
		return false
	}
	if !(*durationpb1.Duration)(this.Duration).StableEqualVT((*durationpb1.Duration)(that.Duration)) {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.PauseStartTimestamp).StableEqualVT((*timestamppb1.Timestamp)(that.PauseStartTimestamp)) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CanaryProgressState) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CanaryProgressState)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *CanaryProgressState) EqualVT(that *CanaryProgressState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Status != that.Status {
		return false
	}
	if this.CanaryWeight != that.CanaryWeight {
		return false
	}
	if !(*durationpb1.Duration)(this.Duration).EqualVT((*durationpb1.Duration)(that.Duration)) {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.PauseStartTimestamp).EqualVT((*timestamppb1.Timestamp)(that.PauseStartTimestamp)) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CanaryProgressState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CanaryProgressState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *BlueGreenProgressState) StableEqualVT(that *BlueGreenProgressState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Status != that.Status {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *BlueGreenProgressState) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*BlueGreenProgressState)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *BlueGreenProgressState) EqualVT(that *BlueGreenProgressState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Status != that.Status {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *BlueGreenProgressState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*BlueGreenProgressState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *DeliveryState) StableEqualVT(that *DeliveryState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Message != that.Message {
		return false
	}
	if this.Status != that.Status {
		return false
	}
	if len(this.CanaryProgress) != len(that.CanaryProgress) {
		return false
	}
	for i, vx := range this.CanaryProgress {
		vy := that.CanaryProgress[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &CanaryProgressState{}
			}
			if q == nil {
				q = &CanaryProgressState{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if this.DesiredStateId != that.DesiredStateId {
		return false
	}
	if this.FirstRun != that.FirstRun {
		return false
	}
	if this.Generation != that.Generation {
		return false
	}
	if !this.BlueGreenProgress.StableEqualVT(that.BlueGreenProgress) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *DeliveryState) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*DeliveryState)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *DeliveryState) EqualVT(that *DeliveryState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Message != that.Message {
		return false
	}
	if this.Status != that.Status {
		return false
	}
	if len(this.CanaryProgress) != len(that.CanaryProgress) {
		return false
	}
	for i, vx := range this.CanaryProgress {
		vy := that.CanaryProgress[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &CanaryProgressState{}
			}
			if q == nil {
				q = &CanaryProgressState{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if this.DesiredStateId != that.DesiredStateId {
		return false
	}
	if this.FirstRun != that.FirstRun {
		return false
	}
	if this.Generation != that.Generation {
		return false
	}
	if !this.BlueGreenProgress.EqualVT(that.BlueGreenProgress) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *DeliveryState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*DeliveryState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *FetchDetails) StableEqualVT(that *FetchDetails) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.StartedTimestamp).StableEqualVT((*timestamppb1.Timestamp)(that.StartedTimestamp)) {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.CompletedTimestamp).StableEqualVT((*timestamppb1.Timestamp)(that.CompletedTimestamp)) {
		return false
	}
	if this.Version != that.Version {
		return false
	}
	if this.FetchStatus != that.FetchStatus {
		return false
	}
	if this.FetcherDesiredStateId != that.FetcherDesiredStateId {
		return false
	}
	if this.FetchMode != that.FetchMode {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *FetchDetails) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*FetchDetails)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *FetchDetails) EqualVT(that *FetchDetails) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.StartedTimestamp).EqualVT((*timestamppb1.Timestamp)(that.StartedTimestamp)) {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.CompletedTimestamp).EqualVT((*timestamppb1.Timestamp)(that.CompletedTimestamp)) {
		return false
	}
	if this.FetchPlanBlobId != that.FetchPlanBlobId {
		return false
	}
	if this.FetchPlanExplanationBlobId != that.FetchPlanExplanationBlobId {
		return false
	}
	if this.Version != that.Version {
		return false
	}
	if this.FetchStatus != that.FetchStatus {
		return false
	}
	if this.FetcherDesiredStateId != that.FetcherDesiredStateId {
		return false
	}
	if this.Message != that.Message {
		return false
	}
	if this.FetchMode != that.FetchMode {
		return false
	}
	if len(this.Versions) != len(that.Versions) {
		return false
	}
	for i, vx := range this.Versions {
		vy := that.Versions[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Version{}
			}
			if q == nil {
				q = &Version{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if this.RuntimeObjectStatus != that.RuntimeObjectStatus {
		return false
	}
	if len(this.ExternalObjects) != len(that.ExternalObjects) {
		return false
	}
	for i, vx := range this.ExternalObjects {
		vy := that.ExternalObjects[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &extensions.ExternalObject{}
			}
			if q == nil {
				q = &extensions.ExternalObject{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if !this.TaskRun.EqualVT(that.TaskRun) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *FetchDetails) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*FetchDetails)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RuntimeExtensionFetchOutput) StableEqualVT(that *RuntimeExtensionFetchOutput) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.OngoingFetch.StableEqualVT(that.OngoingFetch) {
		return false
	}
	if !this.LastSuccessfulFetch.StableEqualVT(that.LastSuccessfulFetch) {
		return false
	}
	if !this.LastFailedFetch.StableEqualVT(that.LastFailedFetch) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RuntimeExtensionFetchOutput) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RuntimeExtensionFetchOutput)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *RuntimeExtensionFetchOutput) EqualVT(that *RuntimeExtensionFetchOutput) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.OngoingFetch.EqualVT(that.OngoingFetch) {
		return false
	}
	if !this.LastSuccessfulFetch.EqualVT(that.LastSuccessfulFetch) {
		return false
	}
	if !this.LastFailedFetch.EqualVT(that.LastFailedFetch) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RuntimeExtensionFetchOutput) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RuntimeExtensionFetchOutput)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RuntimeExtensionGetInfoOutputContent) StableEqualVT(that *RuntimeExtensionGetInfoOutputContent) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	if this.BlobId != that.BlobId {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RuntimeExtensionGetInfoOutputContent) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RuntimeExtensionGetInfoOutputContent)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *RuntimeExtensionGetInfoOutputContent) EqualVT(that *RuntimeExtensionGetInfoOutputContent) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	if this.BlobId != that.BlobId {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RuntimeExtensionGetInfoOutputContent) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RuntimeExtensionGetInfoOutputContent)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RuntimeExtensionGetInfoDetails) StableEqualVT(that *RuntimeExtensionGetInfoDetails) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Contents) != len(that.Contents) {
		return false
	}
	for i, vx := range this.Contents {
		vy := that.Contents[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &RuntimeExtensionGetInfoOutputContent{}
			}
			if q == nil {
				q = &RuntimeExtensionGetInfoOutputContent{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if this.Status != that.Status {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.StartedTimestamp).StableEqualVT((*timestamppb1.Timestamp)(that.StartedTimestamp)) {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.CompletedTimestamp).StableEqualVT((*timestamppb1.Timestamp)(that.CompletedTimestamp)) {
		return false
	}
	if this.Version != that.Version {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RuntimeExtensionGetInfoDetails) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RuntimeExtensionGetInfoDetails)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *RuntimeExtensionGetInfoDetails) EqualVT(that *RuntimeExtensionGetInfoDetails) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.SystemMessage != that.SystemMessage {
		return false
	}
	if len(this.Contents) != len(that.Contents) {
		return false
	}
	for i, vx := range this.Contents {
		vy := that.Contents[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &RuntimeExtensionGetInfoOutputContent{}
			}
			if q == nil {
				q = &RuntimeExtensionGetInfoOutputContent{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if this.Status != that.Status {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.StartedTimestamp).EqualVT((*timestamppb1.Timestamp)(that.StartedTimestamp)) {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.CompletedTimestamp).EqualVT((*timestamppb1.Timestamp)(that.CompletedTimestamp)) {
		return false
	}
	if this.Version != that.Version {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RuntimeExtensionGetInfoDetails) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RuntimeExtensionGetInfoDetails)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RuntimeExtensionGetInfoOutput) StableEqualVT(that *RuntimeExtensionGetInfoOutput) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.GetInfoDetails.StableEqualVT(that.GetInfoDetails) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RuntimeExtensionGetInfoOutput) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RuntimeExtensionGetInfoOutput)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *RuntimeExtensionGetInfoOutput) EqualVT(that *RuntimeExtensionGetInfoOutput) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.GetInfoDetails.EqualVT(that.GetInfoDetails) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RuntimeExtensionGetInfoOutput) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RuntimeExtensionGetInfoOutput)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ApplyDetails) StableEqualVT(that *ApplyDetails) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.StartedTimestamp).StableEqualVT((*timestamppb1.Timestamp)(that.StartedTimestamp)) {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.CompletedTimestamp).StableEqualVT((*timestamppb1.Timestamp)(that.CompletedTimestamp)) {
		return false
	}
	if this.Version != that.Version {
		return false
	}
	if this.ApplyStatus != that.ApplyStatus {
		return false
	}
	if !this.FetchDetails.StableEqualVT(that.FetchDetails) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ApplyDetails) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ApplyDetails)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ApplyDetails) EqualVT(that *ApplyDetails) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.StartedTimestamp).EqualVT((*timestamppb1.Timestamp)(that.StartedTimestamp)) {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.CompletedTimestamp).EqualVT((*timestamppb1.Timestamp)(that.CompletedTimestamp)) {
		return false
	}
	if this.Version != that.Version {
		return false
	}
	if this.ApplyStatus != that.ApplyStatus {
		return false
	}
	if !this.FetchDetails.EqualVT(that.FetchDetails) {
		return false
	}
	if this.HasWorkReason != that.HasWorkReason {
		return false
	}
	if !this.TaskRun.EqualVT(that.TaskRun) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ApplyDetails) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ApplyDetails)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RuntimeExtensionApplyOutput) StableEqualVT(that *RuntimeExtensionApplyOutput) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.OngoingApply.StableEqualVT(that.OngoingApply) {
		return false
	}
	if !this.LastApply.StableEqualVT(that.LastApply) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RuntimeExtensionApplyOutput) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RuntimeExtensionApplyOutput)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *RuntimeExtensionApplyOutput) EqualVT(that *RuntimeExtensionApplyOutput) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.OngoingApply.EqualVT(that.OngoingApply) {
		return false
	}
	if !this.LastApply.EqualVT(that.LastApply) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RuntimeExtensionApplyOutput) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RuntimeExtensionApplyOutput)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RuntimeObject_RuntimeExtension) StableEqualVT(that *RuntimeObject_RuntimeExtension) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Fetch.StableEqualVT(that.Fetch) {
		return false
	}
	if this.ServiceId != that.ServiceId {
		return false
	}
	if !this.Apply.StableEqualVT(that.Apply) {
		return false
	}
	if !(*durationpb1.Duration)(this.FetchInterval).StableEqualVT((*durationpb1.Duration)(that.FetchInterval)) {
		return false
	}
	if this.ReleaseChannelId != that.ReleaseChannelId {
		return false
	}
	if len(this.Parameters) != len(that.Parameters) {
		return false
	}
	for i, vx := range this.Parameters {
		vy := that.Parameters[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &common_config.ParameterDefinition{}
			}
			if q == nil {
				q = &common_config.ParameterDefinition{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if len(this.ParameterValues) != len(that.ParameterValues) {
		return false
	}
	for i, vx := range this.ParameterValues {
		vy := that.ParameterValues[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &common_config.ParameterValue{}
			}
			if q == nil {
				q = &common_config.ParameterValue{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if this.Type != that.Type {
		return false
	}
	if !this.FetchOutput.StableEqualVT(that.FetchOutput) {
		return false
	}
	if !(*durationpb1.Duration)(this.FetchSteadyStateInterval).StableEqualVT((*durationpb1.Duration)(that.FetchSteadyStateInterval)) {
		return false
	}
	if !this.ApplyOutput.StableEqualVT(that.ApplyOutput) {
		return false
	}
	if !this.FetchRetryPolicy.StableEqualVT(that.FetchRetryPolicy) {
		return false
	}
	if !this.ApplyRetryPolicy.StableEqualVT(that.ApplyRetryPolicy) {
		return false
	}
	if len(this.ApplyRetryableExitCodes) != len(that.ApplyRetryableExitCodes) {
		return false
	}
	for i, vx := range this.ApplyRetryableExitCodes {
		vy := that.ApplyRetryableExitCodes[i]
		if vx != vy {
			return false
		}
	}
	if !this.GetInfoOutput.StableEqualVT(that.GetInfoOutput) {
		return false
	}
	if !this.GetInfo.StableEqualVT(that.GetInfo) {
		return false
	}
	if !this.GetInfoRetryPolicy.StableEqualVT(that.GetInfoRetryPolicy) {
		return false
	}
	if !(*durationpb1.Duration)(this.GetInfoInterval).StableEqualVT((*durationpb1.Duration)(that.GetInfoInterval)) {
		return false
	}
	if this.FetchMode != that.FetchMode {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RuntimeObject_RuntimeExtension) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RuntimeObject_RuntimeExtension)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *RuntimeObject) StableEqualVT(that *RuntimeObject) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.ObjectType != that.ObjectType {
		return false
	}
	if this.Namespace != that.Namespace {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	if len(this.Versions) != len(that.Versions) {
		return false
	}
	for i, vx := range this.Versions {
		vy := that.Versions[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Version{}
			}
			if q == nil {
				q = &Version{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if this.Status != that.Status {
		return false
	}
	if !this.RollbackVersion.StableEqualVT(that.RollbackVersion) {
		return false
	}
	if !this.Delivery.StableEqualVT(that.Delivery) {
		return false
	}
	if this.VersionAgnostic != that.VersionAgnostic {
		return false
	}
	if !this.RuntimeExtension.StableEqualVT(that.RuntimeExtension) {
		return false
	}
	if !(*durationpb1.Duration)(this.Interval).StableEqualVT((*durationpb1.Duration)(that.Interval)) {
		return false
	}
	if len(this.OutputBlobIds) != len(that.OutputBlobIds) {
		return false
	}
	for i, vx := range this.OutputBlobIds {
		vy := that.OutputBlobIds[i]
		if vx != vy {
			return false
		}
	}
	if len(this.ExitCodes) != len(that.ExitCodes) {
		return false
	}
	for i, vx := range this.ExitCodes {
		vy := that.ExitCodes[i]
		if vx != vy {
			return false
		}
	}
	if this.DesiredVersionDirtyOnly != that.DesiredVersionDirtyOnly {
		return false
	}
	if this.RequireApprovalBeforeApply != that.RequireApprovalBeforeApply {
		return false
	}
	if this.GenerateName != that.GenerateName {
		return false
	}
	if this.ManagementStatus != that.ManagementStatus {
		return false
	}
	if !(*durationpb1.Duration)(this.SteadyStateInterval).StableEqualVT((*durationpb1.Duration)(that.SteadyStateInterval)) {
		return false
	}
	if !this.LastCompletedTaskRun.StableEqualVT(that.LastCompletedTaskRun) {
		return false
	}
	if len(this.ExternalLinks) != len(that.ExternalLinks) {
		return false
	}
	for i, vx := range this.ExternalLinks {
		vy := that.ExternalLinks[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &common_config.ExternalLink{}
			}
			if q == nil {
				q = &common_config.ExternalLink{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if !this.FetchVersion.StableEqualVT(that.FetchVersion) {
		return false
	}
	if len(this.ExternalObjects) != len(that.ExternalObjects) {
		return false
	}
	for i, vx := range this.ExternalObjects {
		vy := that.ExternalObjects[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &extensions.ExternalObject{}
			}
			if q == nil {
				q = &extensions.ExternalObject{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if this.Rollback != that.Rollback {
		return false
	}
	if this.NeedsApply != that.NeedsApply {
		return false
	}
	if this.ApplyId != that.ApplyId {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RuntimeObject) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RuntimeObject)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *RuntimeObject_RuntimeExtension) EqualVT(that *RuntimeObject_RuntimeExtension) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Fetch.EqualVT(that.Fetch) {
		return false
	}
	if this.ServiceId != that.ServiceId {
		return false
	}
	if !this.Apply.EqualVT(that.Apply) {
		return false
	}
	if !(*durationpb1.Duration)(this.FetchInterval).EqualVT((*durationpb1.Duration)(that.FetchInterval)) {
		return false
	}
	if this.ReleaseChannelId != that.ReleaseChannelId {
		return false
	}
	if len(this.Parameters) != len(that.Parameters) {
		return false
	}
	for i, vx := range this.Parameters {
		vy := that.Parameters[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &common_config.ParameterDefinition{}
			}
			if q == nil {
				q = &common_config.ParameterDefinition{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if len(this.ParameterValues) != len(that.ParameterValues) {
		return false
	}
	for i, vx := range this.ParameterValues {
		vy := that.ParameterValues[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &common_config.ParameterValue{}
			}
			if q == nil {
				q = &common_config.ParameterValue{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if this.Type != that.Type {
		return false
	}
	if !this.FetchOutput.EqualVT(that.FetchOutput) {
		return false
	}
	if !(*durationpb1.Duration)(this.FetchSteadyStateInterval).EqualVT((*durationpb1.Duration)(that.FetchSteadyStateInterval)) {
		return false
	}
	if !this.ApplyOutput.EqualVT(that.ApplyOutput) {
		return false
	}
	if !this.FetchRetryPolicy.EqualVT(that.FetchRetryPolicy) {
		return false
	}
	if !this.ApplyRetryPolicy.EqualVT(that.ApplyRetryPolicy) {
		return false
	}
	if len(this.ApplyRetryableExitCodes) != len(that.ApplyRetryableExitCodes) {
		return false
	}
	for i, vx := range this.ApplyRetryableExitCodes {
		vy := that.ApplyRetryableExitCodes[i]
		if vx != vy {
			return false
		}
	}
	if !this.GetInfoOutput.EqualVT(that.GetInfoOutput) {
		return false
	}
	if !this.GetInfo.EqualVT(that.GetInfo) {
		return false
	}
	if !this.GetInfoRetryPolicy.EqualVT(that.GetInfoRetryPolicy) {
		return false
	}
	if !(*durationpb1.Duration)(this.GetInfoInterval).EqualVT((*durationpb1.Duration)(that.GetInfoInterval)) {
		return false
	}
	if this.FetchMode != that.FetchMode {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RuntimeObject_RuntimeExtension) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RuntimeObject_RuntimeExtension)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RuntimeObject) EqualVT(that *RuntimeObject) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Meta.EqualVT(that.Meta) {
		return false
	}
	if this.ObjectType != that.ObjectType {
		return false
	}
	if this.Namespace != that.Namespace {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	if len(this.Versions) != len(that.Versions) {
		return false
	}
	for i, vx := range this.Versions {
		vy := that.Versions[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Version{}
			}
			if q == nil {
				q = &Version{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if this.Status != that.Status {
		return false
	}
	if !this.RollbackVersion.EqualVT(that.RollbackVersion) {
		return false
	}
	if !this.Delivery.EqualVT(that.Delivery) {
		return false
	}
	if this.VersionAgnostic != that.VersionAgnostic {
		return false
	}
	if this.Message != that.Message {
		return false
	}
	if !this.RuntimeExtension.EqualVT(that.RuntimeExtension) {
		return false
	}
	if !(*durationpb1.Duration)(this.Interval).EqualVT((*durationpb1.Duration)(that.Interval)) {
		return false
	}
	if len(this.OutputBlobIds) != len(that.OutputBlobIds) {
		return false
	}
	for i, vx := range this.OutputBlobIds {
		vy := that.OutputBlobIds[i]
		if vx != vy {
			return false
		}
	}
	if len(this.ExitCodes) != len(that.ExitCodes) {
		return false
	}
	for i, vx := range this.ExitCodes {
		vy := that.ExitCodes[i]
		if vx != vy {
			return false
		}
	}
	if this.DesiredVersionDirtyOnly != that.DesiredVersionDirtyOnly {
		return false
	}
	if this.RequireApprovalBeforeApply != that.RequireApprovalBeforeApply {
		return false
	}
	if this.RawConfig != that.RawConfig {
		return false
	}
	if this.GenerateName != that.GenerateName {
		return false
	}
	if this.ManagementStatus != that.ManagementStatus {
		return false
	}
	if !(*durationpb1.Duration)(this.SteadyStateInterval).EqualVT((*durationpb1.Duration)(that.SteadyStateInterval)) {
		return false
	}
	if !this.LastCompletedTaskRun.EqualVT(that.LastCompletedTaskRun) {
		return false
	}
	if len(this.ExternalLinks) != len(that.ExternalLinks) {
		return false
	}
	for i, vx := range this.ExternalLinks {
		vy := that.ExternalLinks[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &common_config.ExternalLink{}
			}
			if q == nil {
				q = &common_config.ExternalLink{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if !this.FetchVersion.EqualVT(that.FetchVersion) {
		return false
	}
	if len(this.ExternalObjects) != len(that.ExternalObjects) {
		return false
	}
	for i, vx := range this.ExternalObjects {
		vy := that.ExternalObjects[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &extensions.ExternalObject{}
			}
			if q == nil {
				q = &extensions.ExternalObject{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if len(this.DebugEvents) != len(that.DebugEvents) {
		return false
	}
	for i, vx := range this.DebugEvents {
		vy := that.DebugEvents[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &runtimes.DebugEvent{}
			}
			if q == nil {
				q = &runtimes.DebugEvent{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if this.Rollback != that.Rollback {
		return false
	}
	if this.NeedsApply != that.NeedsApply {
		return false
	}
	if this.ApplyId != that.ApplyId {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RuntimeObject) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RuntimeObject)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ConditionState) StableEqualVT(that *ConditionState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Status != that.Status {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ConditionState) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ConditionState)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ConditionState) EqualVT(that *ConditionState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Status != that.Status {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ConditionState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ConditionState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ApplyError) StableEqualVT(that *ApplyError) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Message != that.Message {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ApplyError) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ApplyError)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ApplyError) EqualVT(that *ApplyError) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Message != that.Message {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ApplyError) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ApplyError)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *NotificationInfo) StableEqualVT(that *NotificationInfo) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.FailureCount != that.FailureCount {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.MostRecentFailure).StableEqualVT((*timestamppb1.Timestamp)(that.MostRecentFailure)) {
		return false
	}
	if !this.RuntimeFetchInvokeError.StableEqualVT(that.RuntimeFetchInvokeError) {
		return false
	}
	if !this.RuntimeApplyInvokeError.StableEqualVT(that.RuntimeApplyInvokeError) {
		return false
	}
	if len(this.ConcurrencyLimitExceededErrors) != len(that.ConcurrencyLimitExceededErrors) {
		return false
	}
	for i, vx := range this.ConcurrencyLimitExceededErrors {
		vy := that.ConcurrencyLimitExceededErrors[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &ConcurrencyLimitExceeded{}
			}
			if q == nil {
				q = &ConcurrencyLimitExceeded{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *NotificationInfo) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*NotificationInfo)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *NotificationInfo) EqualVT(that *NotificationInfo) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.FailureCount != that.FailureCount {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.MostRecentFailure).EqualVT((*timestamppb1.Timestamp)(that.MostRecentFailure)) {
		return false
	}
	if !this.RuntimeFetchInvokeError.EqualVT(that.RuntimeFetchInvokeError) {
		return false
	}
	if !this.RuntimeApplyInvokeError.EqualVT(that.RuntimeApplyInvokeError) {
		return false
	}
	if len(this.ConcurrencyLimitExceededErrors) != len(that.ConcurrencyLimitExceededErrors) {
		return false
	}
	for i, vx := range this.ConcurrencyLimitExceededErrors {
		vy := that.ConcurrencyLimitExceededErrors[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &ConcurrencyLimitExceeded{}
			}
			if q == nil {
				q = &ConcurrencyLimitExceeded{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *NotificationInfo) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*NotificationInfo)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *KeyDeliveryDecision_EntitySnapshot) StableEqualVT(that *KeyDeliveryDecision_EntitySnapshot) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Id.StableEqualVT(that.Id) {
		return false
	}
	if this.Status != that.Status {
		return false
	}
	if !this.Current.StableEqualVT(that.Current) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *KeyDeliveryDecision_EntitySnapshot) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*KeyDeliveryDecision_EntitySnapshot)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *KeyDeliveryDecision) StableEqualVT(that *KeyDeliveryDecision) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Decision != that.Decision {
		return false
	}
	if this.Explanation != that.Explanation {
		return false
	}
	if this.Status != that.Status {
		return false
	}
	if len(this.StatusExplanations) != len(that.StatusExplanations) {
		return false
	}
	for i, vx := range this.StatusExplanations {
		vy := that.StatusExplanations[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &StatusExplanation{}
			}
			if q == nil {
				q = &StatusExplanation{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if len(this.StatusExplanationEntities) != len(that.StatusExplanationEntities) {
		return false
	}
	for i, vx := range this.StatusExplanationEntities {
		vy := that.StatusExplanationEntities[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &KeyDeliveryDecision_EntitySnapshot{}
			}
			if q == nil {
				q = &KeyDeliveryDecision_EntitySnapshot{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if !this.Current.StableEqualVT(that.Current) {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.Timestamp).StableEqualVT((*timestamppb1.Timestamp)(that.Timestamp)) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *KeyDeliveryDecision) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*KeyDeliveryDecision)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *KeyDeliveryDecision_EntitySnapshot) EqualVT(that *KeyDeliveryDecision_EntitySnapshot) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Id.EqualVT(that.Id) {
		return false
	}
	if this.Status != that.Status {
		return false
	}
	if !this.Current.EqualVT(that.Current) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *KeyDeliveryDecision_EntitySnapshot) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*KeyDeliveryDecision_EntitySnapshot)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *KeyDeliveryDecision) EqualVT(that *KeyDeliveryDecision) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Decision != that.Decision {
		return false
	}
	if this.Explanation != that.Explanation {
		return false
	}
	if this.Status != that.Status {
		return false
	}
	if len(this.StatusExplanations) != len(that.StatusExplanations) {
		return false
	}
	for i, vx := range this.StatusExplanations {
		vy := that.StatusExplanations[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &StatusExplanation{}
			}
			if q == nil {
				q = &StatusExplanation{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if len(this.StatusExplanationEntities) != len(that.StatusExplanationEntities) {
		return false
	}
	for i, vx := range this.StatusExplanationEntities {
		vy := that.StatusExplanationEntities[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &KeyDeliveryDecision_EntitySnapshot{}
			}
			if q == nil {
				q = &KeyDeliveryDecision_EntitySnapshot{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if !this.Current.EqualVT(that.Current) {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.Timestamp).EqualVT((*timestamppb1.Timestamp)(that.Timestamp)) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *KeyDeliveryDecision) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*KeyDeliveryDecision)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ControlState) StableEqualVT(that *ControlState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Rollback != that.Rollback {
		return false
	}
	if len(this.PreconditionStates) != len(that.PreconditionStates) {
		return false
	}
	for i, vx := range this.PreconditionStates {
		vy := that.PreconditionStates[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &ConditionState{}
			}
			if q == nil {
				q = &ConditionState{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if len(this.InvariantStates) != len(that.InvariantStates) {
		return false
	}
	for i, vx := range this.InvariantStates {
		vy := that.InvariantStates[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &ConditionState{}
			}
			if q == nil {
				q = &ConditionState{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if this.Paused != that.Paused {
		return false
	}
	if len(this.StatusExplanations) != len(that.StatusExplanations) {
		return false
	}
	for i, vx := range this.StatusExplanations {
		vy := that.StatusExplanations[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &StatusExplanation{}
			}
			if q == nil {
				q = &StatusExplanation{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if !this.ActionExplanation.StableEqualVT(that.ActionExplanation) {
		return false
	}
	if !this.MissingApproval.StableEqualVT(that.MissingApproval) {
		return false
	}
	if this.ObserverMode != that.ObserverMode {
		return false
	}
	if !this.ApplyError.StableEqualVT(that.ApplyError) {
		return false
	}
	if !this.NotificationInfo.StableEqualVT(that.NotificationInfo) {
		return false
	}
	if !this.KeyDeliveryDecision.StableEqualVT(that.KeyDeliveryDecision) {
		return false
	}
	if !this.RollbackKeyDeliveryDecision.StableEqualVT(that.RollbackKeyDeliveryDecision) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ControlState) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ControlState)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ControlState) EqualVT(that *ControlState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Rollback != that.Rollback {
		return false
	}
	if len(this.PreconditionStates) != len(that.PreconditionStates) {
		return false
	}
	for i, vx := range this.PreconditionStates {
		vy := that.PreconditionStates[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &ConditionState{}
			}
			if q == nil {
				q = &ConditionState{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if len(this.InvariantStates) != len(that.InvariantStates) {
		return false
	}
	for i, vx := range this.InvariantStates {
		vy := that.InvariantStates[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &ConditionState{}
			}
			if q == nil {
				q = &ConditionState{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if this.Paused != that.Paused {
		return false
	}
	if len(this.StatusExplanations) != len(that.StatusExplanations) {
		return false
	}
	for i, vx := range this.StatusExplanations {
		vy := that.StatusExplanations[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &StatusExplanation{}
			}
			if q == nil {
				q = &StatusExplanation{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if !this.ActionExplanation.EqualVT(that.ActionExplanation) {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.LastFetchedTimestamp).EqualVT((*timestamppb1.Timestamp)(that.LastFetchedTimestamp)) {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.LastAppliedTimestamp).EqualVT((*timestamppb1.Timestamp)(that.LastAppliedTimestamp)) {
		return false
	}
	if !this.MissingApproval.EqualVT(that.MissingApproval) {
		return false
	}
	if this.ObserverMode != that.ObserverMode {
		return false
	}
	if !this.ApplyError.EqualVT(that.ApplyError) {
		return false
	}
	if !this.NotificationInfo.EqualVT(that.NotificationInfo) {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.ExpectedNextApplyTimestamp).EqualVT((*timestamppb1.Timestamp)(that.ExpectedNextApplyTimestamp)) {
		return false
	}
	if !this.KeyDeliveryDecision.EqualVT(that.KeyDeliveryDecision) {
		return false
	}
	if !this.RollbackKeyDeliveryDecision.EqualVT(that.RollbackKeyDeliveryDecision) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ControlState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ControlState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ManualApprovalState_Approver) StableEqualVT(that *ManualApprovalState_Approver) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Source != that.Source {
		return false
	}
	if !this.SourceMetadata.StableEqualVT(that.SourceMetadata) {
		return false
	}
	if this.Status != that.Status {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.Timestamp).StableEqualVT((*timestamppb1.Timestamp)(that.Timestamp)) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ManualApprovalState_Approver) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ManualApprovalState_Approver)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ManualApprovalState) StableEqualVT(that *ManualApprovalState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Status != that.Status {
		return false
	}
	if this.Topic != that.Topic {
		return false
	}
	if this.Description != that.Description {
		return false
	}
	if this.MinApprovers != that.MinApprovers {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ManualApprovalState) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ManualApprovalState)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ManualApprovalState_Approver) EqualVT(that *ManualApprovalState_Approver) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Source != that.Source {
		return false
	}
	if !this.SourceMetadata.EqualVT(that.SourceMetadata) {
		return false
	}
	if this.Status != that.Status {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.Timestamp).EqualVT((*timestamppb1.Timestamp)(that.Timestamp)) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ManualApprovalState_Approver) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ManualApprovalState_Approver)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ManualApprovalState) EqualVT(that *ManualApprovalState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Meta.EqualVT(that.Meta) {
		return false
	}
	if this.Status != that.Status {
		return false
	}
	if this.Topic != that.Topic {
		return false
	}
	if this.Description != that.Description {
		return false
	}
	if len(this.Approvers) != len(that.Approvers) {
		return false
	}
	for i, vx := range this.Approvers {
		vy := that.Approvers[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &ManualApprovalState_Approver{}
			}
			if q == nil {
				q = &ManualApprovalState_Approver{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if this.MinApprovers != that.MinApprovers {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ManualApprovalState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ManualApprovalState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *State) StableEqualVT(that *State) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.StateOneof == nil && that.StateOneof != nil {
		return false
	} else if this.StateOneof != nil {
		if that.StateOneof == nil {
			return false
		}
		if !this.StateOneof.(interface{ StableEqualVT(isState_StateOneof) bool }).StableEqualVT(that.StateOneof) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *State) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*State)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *State_Service) StableEqualVT(thatIface isState_StateOneof) bool {
	that, ok := thatIface.(*State_Service)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Service, that.Service; p != q {
		if p == nil {
			p = &ServiceState{}
		}
		if q == nil {
			q = &ServiceState{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *State_ServiceInstance) StableEqualVT(thatIface isState_StateOneof) bool {
	that, ok := thatIface.(*State_ServiceInstance)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ServiceInstance, that.ServiceInstance; p != q {
		if p == nil {
			p = &ServiceInstanceState{}
		}
		if q == nil {
			q = &ServiceInstanceState{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *State_ServiceGroup) StableEqualVT(thatIface isState_StateOneof) bool {
	that, ok := thatIface.(*State_ServiceGroup)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ServiceGroup, that.ServiceGroup; p != q {
		if p == nil {
			p = &ServiceGroupState{}
		}
		if q == nil {
			q = &ServiceGroupState{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *State_RuntimeObject) StableEqualVT(thatIface isState_StateOneof) bool {
	that, ok := thatIface.(*State_RuntimeObject)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.RuntimeObject, that.RuntimeObject; p != q {
		if p == nil {
			p = &RuntimeObject{}
		}
		if q == nil {
			q = &RuntimeObject{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *State_ManualApproval) StableEqualVT(thatIface isState_StateOneof) bool {
	that, ok := thatIface.(*State_ManualApproval)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ManualApproval, that.ManualApproval; p != q {
		if p == nil {
			p = &ManualApprovalState{}
		}
		if q == nil {
			q = &ManualApprovalState{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *State_CustomTask) StableEqualVT(thatIface isState_StateOneof) bool {
	that, ok := thatIface.(*State_CustomTask)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.CustomTask, that.CustomTask; p != q {
		if p == nil {
			p = &CustomTaskState{}
		}
		if q == nil {
			q = &CustomTaskState{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *State_ProtectionAttachment) StableEqualVT(thatIface isState_StateOneof) bool {
	that, ok := thatIface.(*State_ProtectionAttachment)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ProtectionAttachment, that.ProtectionAttachment; p != q {
		if p == nil {
			p = &ProtectionAttachment{}
		}
		if q == nil {
			q = &ProtectionAttachment{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *State_ProtectionLink) StableEqualVT(thatIface isState_StateOneof) bool {
	that, ok := thatIface.(*State_ProtectionLink)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ProtectionLink, that.ProtectionLink; p != q {
		if p == nil {
			p = &ProtectionLinkState{}
		}
		if q == nil {
			q = &ProtectionLinkState{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *State_DeliveryExtension) StableEqualVT(thatIface isState_StateOneof) bool {
	that, ok := thatIface.(*State_DeliveryExtension)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.DeliveryExtension, that.DeliveryExtension; p != q {
		if p == nil {
			p = &DeliveryExtensionState{}
		}
		if q == nil {
			q = &DeliveryExtensionState{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *State) EqualVT(that *State) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.StateOneof == nil && that.StateOneof != nil {
		return false
	} else if this.StateOneof != nil {
		if that.StateOneof == nil {
			return false
		}
		if !this.StateOneof.(interface{ EqualVT(isState_StateOneof) bool }).EqualVT(that.StateOneof) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *State) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*State)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *State_Service) EqualVT(thatIface isState_StateOneof) bool {
	that, ok := thatIface.(*State_Service)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Service, that.Service; p != q {
		if p == nil {
			p = &ServiceState{}
		}
		if q == nil {
			q = &ServiceState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *State_ServiceInstance) EqualVT(thatIface isState_StateOneof) bool {
	that, ok := thatIface.(*State_ServiceInstance)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ServiceInstance, that.ServiceInstance; p != q {
		if p == nil {
			p = &ServiceInstanceState{}
		}
		if q == nil {
			q = &ServiceInstanceState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *State_ServiceGroup) EqualVT(thatIface isState_StateOneof) bool {
	that, ok := thatIface.(*State_ServiceGroup)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ServiceGroup, that.ServiceGroup; p != q {
		if p == nil {
			p = &ServiceGroupState{}
		}
		if q == nil {
			q = &ServiceGroupState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *State_RuntimeObject) EqualVT(thatIface isState_StateOneof) bool {
	that, ok := thatIface.(*State_RuntimeObject)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.RuntimeObject, that.RuntimeObject; p != q {
		if p == nil {
			p = &RuntimeObject{}
		}
		if q == nil {
			q = &RuntimeObject{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *State_ManualApproval) EqualVT(thatIface isState_StateOneof) bool {
	that, ok := thatIface.(*State_ManualApproval)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ManualApproval, that.ManualApproval; p != q {
		if p == nil {
			p = &ManualApprovalState{}
		}
		if q == nil {
			q = &ManualApprovalState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *State_CustomTask) EqualVT(thatIface isState_StateOneof) bool {
	that, ok := thatIface.(*State_CustomTask)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.CustomTask, that.CustomTask; p != q {
		if p == nil {
			p = &CustomTaskState{}
		}
		if q == nil {
			q = &CustomTaskState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *State_ProtectionAttachment) EqualVT(thatIface isState_StateOneof) bool {
	that, ok := thatIface.(*State_ProtectionAttachment)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ProtectionAttachment, that.ProtectionAttachment; p != q {
		if p == nil {
			p = &ProtectionAttachment{}
		}
		if q == nil {
			q = &ProtectionAttachment{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *State_ProtectionLink) EqualVT(thatIface isState_StateOneof) bool {
	that, ok := thatIface.(*State_ProtectionLink)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ProtectionLink, that.ProtectionLink; p != q {
		if p == nil {
			p = &ProtectionLinkState{}
		}
		if q == nil {
			q = &ProtectionLinkState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *State_DeliveryExtension) EqualVT(thatIface isState_StateOneof) bool {
	that, ok := thatIface.(*State_DeliveryExtension)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.DeliveryExtension, that.DeliveryExtension; p != q {
		if p == nil {
			p = &DeliveryExtensionState{}
		}
		if q == nil {
			q = &DeliveryExtensionState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Annotations_Annotation) StableEqualVT(that *Annotations_Annotation) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Key != that.Key {
		return false
	}
	if this.Value != that.Value {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Annotations_Annotation) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Annotations_Annotation)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *Annotations) StableEqualVT(that *Annotations) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Annotations) != len(that.Annotations) {
		return false
	}
	for i, vx := range this.Annotations {
		vy := that.Annotations[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Annotations_Annotation{}
			}
			if q == nil {
				q = &Annotations_Annotation{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Annotations) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Annotations)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *Annotations_Annotation) EqualVT(that *Annotations_Annotation) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Key != that.Key {
		return false
	}
	if this.Value != that.Value {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Annotations_Annotation) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Annotations_Annotation)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Annotations) EqualVT(that *Annotations) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Annotations) != len(that.Annotations) {
		return false
	}
	for i, vx := range this.Annotations {
		vy := that.Annotations[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Annotations_Annotation{}
			}
			if q == nil {
				q = &Annotations_Annotation{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Annotations) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Annotations)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CustomTaskExecutionState) StableEqualVT(that *CustomTaskExecutionState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Status != that.Status {
		return false
	}
	if this.Attempts != that.Attempts {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.LatestAttemptEndTimestamp).StableEqualVT((*timestamppb1.Timestamp)(that.LatestAttemptEndTimestamp)) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CustomTaskExecutionState) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CustomTaskExecutionState)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *CustomTaskExecutionState) EqualVT(that *CustomTaskExecutionState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Status != that.Status {
		return false
	}
	if this.Attempts != that.Attempts {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.LatestAttemptEndTimestamp).EqualVT((*timestamppb1.Timestamp)(that.LatestAttemptEndTimestamp)) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CustomTaskExecutionState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CustomTaskExecutionState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CustomTaskState) StableEqualVT(that *CustomTaskState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	if this.Description != that.Description {
		return false
	}
	if this.Application != that.Application {
		return false
	}
	if this.ApplicationId != that.ApplicationId {
		return false
	}
	if this.ReleaseChannel != that.ReleaseChannel {
		return false
	}
	if this.ReleaseChannelId != that.ReleaseChannelId {
		return false
	}
	if !this.Program.StableEqualVT(that.Program) {
		return false
	}
	if !this.TaskState.StableEqualVT(that.TaskState) {
		return false
	}
	if !this.RetryConfig.StableEqualVT(that.RetryConfig) {
		return false
	}
	if len(this.ServiceIds) != len(that.ServiceIds) {
		return false
	}
	for i, vx := range this.ServiceIds {
		vy := that.ServiceIds[i]
		if vx != vy {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CustomTaskState) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CustomTaskState)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *CustomTaskState) EqualVT(that *CustomTaskState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Meta.EqualVT(that.Meta) {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	if this.Description != that.Description {
		return false
	}
	if this.Application != that.Application {
		return false
	}
	if this.ApplicationId != that.ApplicationId {
		return false
	}
	if this.ReleaseChannel != that.ReleaseChannel {
		return false
	}
	if this.ReleaseChannelId != that.ReleaseChannelId {
		return false
	}
	if !this.Program.EqualVT(that.Program) {
		return false
	}
	if !this.TaskState.EqualVT(that.TaskState) {
		return false
	}
	if !this.RetryConfig.EqualVT(that.RetryConfig) {
		return false
	}
	if len(this.ServiceIds) != len(that.ServiceIds) {
		return false
	}
	for i, vx := range this.ServiceIds {
		vy := that.ServiceIds[i]
		if vx != vy {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CustomTaskState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CustomTaskState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ProtectionLinkState) StableEqualVT(that *ProtectionLinkState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Status != that.Status {
		return false
	}
	if !this.Link.StableEqualVT(that.Link) {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.StartedTimestamp).StableEqualVT((*timestamppb1.Timestamp)(that.StartedTimestamp)) {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.StoppedTimestamp).StableEqualVT((*timestamppb1.Timestamp)(that.StoppedTimestamp)) {
		return false
	}
	if this.StoppedReason != that.StoppedReason {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.FirstSuccessTimestamp).StableEqualVT((*timestamppb1.Timestamp)(that.FirstSuccessTimestamp)) {
		return false
	}
	if this.AttachmentName != that.AttachmentName {
		return false
	}
	if this.LastSeenAttachmentStatus != that.LastSeenAttachmentStatus {
		return false
	}
	if !this.LastSeenAttachmentResult.StableEqualVT(that.LastSeenAttachmentResult) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ProtectionLinkState) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ProtectionLinkState)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ProtectionLinkState) EqualVT(that *ProtectionLinkState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Meta.EqualVT(that.Meta) {
		return false
	}
	if this.Status != that.Status {
		return false
	}
	if !this.Link.EqualVT(that.Link) {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.StartedTimestamp).EqualVT((*timestamppb1.Timestamp)(that.StartedTimestamp)) {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.StoppedTimestamp).EqualVT((*timestamppb1.Timestamp)(that.StoppedTimestamp)) {
		return false
	}
	if this.StoppedReason != that.StoppedReason {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.FirstSuccessTimestamp).EqualVT((*timestamppb1.Timestamp)(that.FirstSuccessTimestamp)) {
		return false
	}
	if this.AttachmentName != that.AttachmentName {
		return false
	}
	if this.LastSeenAttachmentStatus != that.LastSeenAttachmentStatus {
		return false
	}
	if !this.LastSeenAttachmentResult.EqualVT(that.LastSeenAttachmentResult) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ProtectionLinkState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ProtectionLinkState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ProtectionAttachmentResult) StableEqualVT(that *ProtectionAttachmentResult) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Status != that.Status {
		return false
	}
	if this.Message != that.Message {
		return false
	}
	if this.SystemDebugMessage != that.SystemDebugMessage {
		return false
	}
	if this.Version != that.Version {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.ExecutionTimestamp).StableEqualVT((*timestamppb1.Timestamp)(that.ExecutionTimestamp)) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ProtectionAttachmentResult) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ProtectionAttachmentResult)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ProtectionAttachmentResult) EqualVT(that *ProtectionAttachmentResult) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Status != that.Status {
		return false
	}
	if this.Message != that.Message {
		return false
	}
	if this.SystemDebugMessage != that.SystemDebugMessage {
		return false
	}
	if this.Version != that.Version {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.ExecutionTimestamp).EqualVT((*timestamppb1.Timestamp)(that.ExecutionTimestamp)) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ProtectionAttachmentResult) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ProtectionAttachmentResult)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ProtectionAttachment) StableEqualVT(that *ProtectionAttachment) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Versions) != len(that.Versions) {
		return false
	}
	for i, vx := range this.Versions {
		vy := that.Versions[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Version{}
			}
			if q == nil {
				q = &Version{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if this.ProtectionId != that.ProtectionId {
		return false
	}
	if this.AttachmentId != that.AttachmentId {
		return false
	}
	if len(this.LastCompletedVersions) != len(that.LastCompletedVersions) {
		return false
	}
	for i, vx := range this.LastCompletedVersions {
		vy := that.LastCompletedVersions[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Version{}
			}
			if q == nil {
				q = &Version{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if !(*timestamppb1.Timestamp)(this.LastCompletedTimestamp).StableEqualVT((*timestamppb1.Timestamp)(that.LastCompletedTimestamp)) {
		return false
	}
	if this.LastCompletedStatus != that.LastCompletedStatus {
		return false
	}
	if len(this.LastCompletedStatusExplanations) != len(that.LastCompletedStatusExplanations) {
		return false
	}
	for i, vx := range this.LastCompletedStatusExplanations {
		vy := that.LastCompletedStatusExplanations[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &StatusExplanation{}
			}
			if q == nil {
				q = &StatusExplanation{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if this.LastCompletedAppliedVersion != that.LastCompletedAppliedVersion {
		return false
	}
	if !this.Result.StableEqualVT(that.Result) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ProtectionAttachment) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ProtectionAttachment)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ProtectionAttachment) EqualVT(that *ProtectionAttachment) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Meta.EqualVT(that.Meta) {
		return false
	}
	if len(this.Versions) != len(that.Versions) {
		return false
	}
	for i, vx := range this.Versions {
		vy := that.Versions[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Version{}
			}
			if q == nil {
				q = &Version{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if this.ProtectionId != that.ProtectionId {
		return false
	}
	if this.AttachmentId != that.AttachmentId {
		return false
	}
	if len(this.LastCompletedVersions) != len(that.LastCompletedVersions) {
		return false
	}
	for i, vx := range this.LastCompletedVersions {
		vy := that.LastCompletedVersions[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Version{}
			}
			if q == nil {
				q = &Version{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if !(*timestamppb1.Timestamp)(this.LastCompletedTimestamp).EqualVT((*timestamppb1.Timestamp)(that.LastCompletedTimestamp)) {
		return false
	}
	if this.LastCompletedStatus != that.LastCompletedStatus {
		return false
	}
	if len(this.LastCompletedStatusExplanations) != len(that.LastCompletedStatusExplanations) {
		return false
	}
	for i, vx := range this.LastCompletedStatusExplanations {
		vy := that.LastCompletedStatusExplanations[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &StatusExplanation{}
			}
			if q == nil {
				q = &StatusExplanation{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if this.LastCompletedAppliedVersion != that.LastCompletedAppliedVersion {
		return false
	}
	if !this.Result.EqualVT(that.Result) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ProtectionAttachment) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ProtectionAttachment)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *DeliveryExtensionState) StableEqualVT(that *DeliveryExtensionState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Versions) != len(that.Versions) {
		return false
	}
	for i, vx := range this.Versions {
		vy := that.Versions[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Version{}
			}
			if q == nil {
				q = &Version{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if this.ExtensionId != that.ExtensionId {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.LastCompletedTimestamp).StableEqualVT((*timestamppb1.Timestamp)(that.LastCompletedTimestamp)) {
		return false
	}
	if this.LastCompletedStatus != that.LastCompletedStatus {
		return false
	}
	if len(this.LastCompletedStatusExplanations) != len(that.LastCompletedStatusExplanations) {
		return false
	}
	for i, vx := range this.LastCompletedStatusExplanations {
		vy := that.LastCompletedStatusExplanations[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &StatusExplanation{}
			}
			if q == nil {
				q = &StatusExplanation{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if this.LastCompletedAppliedVersion != that.LastCompletedAppliedVersion {
		return false
	}
	if this.ExtensionInstanceId != that.ExtensionInstanceId {
		return false
	}
	if this.Lifecycle != that.Lifecycle {
		return false
	}
	if len(this.References) != len(that.References) {
		return false
	}
	for i, vx := range this.References {
		vy := that.References[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Identifier{}
			}
			if q == nil {
				q = &Identifier{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if this.Attempts != that.Attempts {
		return false
	}
	if len(this.LastRuns) != len(that.LastRuns) {
		return false
	}
	for i, vx := range this.LastRuns {
		vy := that.LastRuns[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &TaskRun{}
			}
			if q == nil {
				q = &TaskRun{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if !this.OngoingRun.StableEqualVT(that.OngoingRun) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *DeliveryExtensionState) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*DeliveryExtensionState)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *DeliveryExtensionState) EqualVT(that *DeliveryExtensionState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Meta.EqualVT(that.Meta) {
		return false
	}
	if len(this.Versions) != len(that.Versions) {
		return false
	}
	for i, vx := range this.Versions {
		vy := that.Versions[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Version{}
			}
			if q == nil {
				q = &Version{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if this.ExtensionId != that.ExtensionId {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.LastCompletedTimestamp).EqualVT((*timestamppb1.Timestamp)(that.LastCompletedTimestamp)) {
		return false
	}
	if this.LastCompletedStatus != that.LastCompletedStatus {
		return false
	}
	if len(this.LastCompletedStatusExplanations) != len(that.LastCompletedStatusExplanations) {
		return false
	}
	for i, vx := range this.LastCompletedStatusExplanations {
		vy := that.LastCompletedStatusExplanations[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &StatusExplanation{}
			}
			if q == nil {
				q = &StatusExplanation{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if this.LastCompletedAppliedVersion != that.LastCompletedAppliedVersion {
		return false
	}
	if this.ExtensionInstanceId != that.ExtensionInstanceId {
		return false
	}
	if this.Lifecycle != that.Lifecycle {
		return false
	}
	if len(this.References) != len(that.References) {
		return false
	}
	for i, vx := range this.References {
		vy := that.References[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Identifier{}
			}
			if q == nil {
				q = &Identifier{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if this.Attempts != that.Attempts {
		return false
	}
	if len(this.LastRuns) != len(that.LastRuns) {
		return false
	}
	for i, vx := range this.LastRuns {
		vy := that.LastRuns[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &TaskRun{}
			}
			if q == nil {
				q = &TaskRun{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if !this.OngoingRun.EqualVT(that.OngoingRun) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *DeliveryExtensionState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*DeliveryExtensionState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Signal_DeliveryPromotionConfig) StableEqualVT(that *Signal_DeliveryPromotionConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Stage != that.Stage {
		return false
	}
	if this.Full != that.Full {
		return false
	}
	if this.Reject != that.Reject {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Signal_DeliveryPromotionConfig) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Signal_DeliveryPromotionConfig)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *Signal_ProtectionBypass) StableEqualVT(that *Signal_ProtectionBypass) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Signal_ProtectionBypass) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Signal_ProtectionBypass)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *Signal_RuntimeExtensionApproval) StableEqualVT(that *Signal_RuntimeExtensionApproval) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.Timestamp).StableEqualVT((*timestamppb1.Timestamp)(that.Timestamp)) {
		return false
	}
	if this.Reject != that.Reject {
		return false
	}
	if this.PlanBlobId != that.PlanBlobId {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Signal_RuntimeExtensionApproval) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Signal_RuntimeExtensionApproval)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *Signal_ReleaseChannelBypass) StableEqualVT(that *Signal_ReleaseChannelBypass) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.EntityIds) != len(that.EntityIds) {
		return false
	}
	for i, vx := range this.EntityIds {
		vy := that.EntityIds[i]
		if vx != vy {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Signal_ReleaseChannelBypass) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Signal_ReleaseChannelBypass)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *Signal_ConcurrencyLimitBypass) StableEqualVT(that *Signal_ConcurrencyLimitBypass) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Signal_ConcurrencyLimitBypass) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Signal_ConcurrencyLimitBypass)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *Signal) StableEqualVT(that *Signal) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Config == nil && that.Config != nil {
		return false
	} else if this.Config != nil {
		if that.Config == nil {
			return false
		}
		if !this.Config.(interface{ StableEqualVT(isSignal_Config) bool }).StableEqualVT(that.Config) {
			return false
		}
	}
	if this.Type != that.Type {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Signal) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Signal)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *Signal_DeliveryPromotion) StableEqualVT(thatIface isSignal_Config) bool {
	that, ok := thatIface.(*Signal_DeliveryPromotion)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.DeliveryPromotion, that.DeliveryPromotion; p != q {
		if p == nil {
			p = &Signal_DeliveryPromotionConfig{}
		}
		if q == nil {
			q = &Signal_DeliveryPromotionConfig{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Signal_ProtectionBypass_) StableEqualVT(thatIface isSignal_Config) bool {
	that, ok := thatIface.(*Signal_ProtectionBypass_)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ProtectionBypass, that.ProtectionBypass; p != q {
		if p == nil {
			p = &Signal_ProtectionBypass{}
		}
		if q == nil {
			q = &Signal_ProtectionBypass{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Signal_RuntimeExtensionApproval_) StableEqualVT(thatIface isSignal_Config) bool {
	that, ok := thatIface.(*Signal_RuntimeExtensionApproval_)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.RuntimeExtensionApproval, that.RuntimeExtensionApproval; p != q {
		if p == nil {
			p = &Signal_RuntimeExtensionApproval{}
		}
		if q == nil {
			q = &Signal_RuntimeExtensionApproval{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Signal_ReleaseChannelBypass_) StableEqualVT(thatIface isSignal_Config) bool {
	that, ok := thatIface.(*Signal_ReleaseChannelBypass_)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ReleaseChannelBypass, that.ReleaseChannelBypass; p != q {
		if p == nil {
			p = &Signal_ReleaseChannelBypass{}
		}
		if q == nil {
			q = &Signal_ReleaseChannelBypass{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Signal_ConcurrencyLimitBypass_) StableEqualVT(thatIface isSignal_Config) bool {
	that, ok := thatIface.(*Signal_ConcurrencyLimitBypass_)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ConcurrencyLimitBypass, that.ConcurrencyLimitBypass; p != q {
		if p == nil {
			p = &Signal_ConcurrencyLimitBypass{}
		}
		if q == nil {
			q = &Signal_ConcurrencyLimitBypass{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Signal_DeliveryPromotionConfig) EqualVT(that *Signal_DeliveryPromotionConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Stage != that.Stage {
		return false
	}
	if this.Full != that.Full {
		return false
	}
	if this.Reject != that.Reject {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Signal_DeliveryPromotionConfig) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Signal_DeliveryPromotionConfig)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Signal_ProtectionBypass) EqualVT(that *Signal_ProtectionBypass) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Signal_ProtectionBypass) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Signal_ProtectionBypass)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Signal_RuntimeExtensionApproval) EqualVT(that *Signal_RuntimeExtensionApproval) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.Timestamp).EqualVT((*timestamppb1.Timestamp)(that.Timestamp)) {
		return false
	}
	if this.Reject != that.Reject {
		return false
	}
	if this.PlanBlobId != that.PlanBlobId {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Signal_RuntimeExtensionApproval) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Signal_RuntimeExtensionApproval)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Signal_ReleaseChannelBypass) EqualVT(that *Signal_ReleaseChannelBypass) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.EntityIds) != len(that.EntityIds) {
		return false
	}
	for i, vx := range this.EntityIds {
		vy := that.EntityIds[i]
		if vx != vy {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Signal_ReleaseChannelBypass) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Signal_ReleaseChannelBypass)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Signal_ConcurrencyLimitBypass) EqualVT(that *Signal_ConcurrencyLimitBypass) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Signal_ConcurrencyLimitBypass) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Signal_ConcurrencyLimitBypass)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Signal) EqualVT(that *Signal) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Config == nil && that.Config != nil {
		return false
	} else if this.Config != nil {
		if that.Config == nil {
			return false
		}
		if !this.Config.(interface{ EqualVT(isSignal_Config) bool }).EqualVT(that.Config) {
			return false
		}
	}
	if this.Type != that.Type {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Signal) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Signal)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Signal_DeliveryPromotion) EqualVT(thatIface isSignal_Config) bool {
	that, ok := thatIface.(*Signal_DeliveryPromotion)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.DeliveryPromotion, that.DeliveryPromotion; p != q {
		if p == nil {
			p = &Signal_DeliveryPromotionConfig{}
		}
		if q == nil {
			q = &Signal_DeliveryPromotionConfig{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Signal_ProtectionBypass_) EqualVT(thatIface isSignal_Config) bool {
	that, ok := thatIface.(*Signal_ProtectionBypass_)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ProtectionBypass, that.ProtectionBypass; p != q {
		if p == nil {
			p = &Signal_ProtectionBypass{}
		}
		if q == nil {
			q = &Signal_ProtectionBypass{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Signal_RuntimeExtensionApproval_) EqualVT(thatIface isSignal_Config) bool {
	that, ok := thatIface.(*Signal_RuntimeExtensionApproval_)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.RuntimeExtensionApproval, that.RuntimeExtensionApproval; p != q {
		if p == nil {
			p = &Signal_RuntimeExtensionApproval{}
		}
		if q == nil {
			q = &Signal_RuntimeExtensionApproval{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Signal_ReleaseChannelBypass_) EqualVT(thatIface isSignal_Config) bool {
	that, ok := thatIface.(*Signal_ReleaseChannelBypass_)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ReleaseChannelBypass, that.ReleaseChannelBypass; p != q {
		if p == nil {
			p = &Signal_ReleaseChannelBypass{}
		}
		if q == nil {
			q = &Signal_ReleaseChannelBypass{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Signal_ConcurrencyLimitBypass_) EqualVT(thatIface isSignal_Config) bool {
	that, ok := thatIface.(*Signal_ConcurrencyLimitBypass_)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ConcurrencyLimitBypass, that.ConcurrencyLimitBypass; p != q {
		if p == nil {
			p = &Signal_ConcurrencyLimitBypass{}
		}
		if q == nil {
			q = &Signal_ConcurrencyLimitBypass{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *DebugLog) StableEqualVT(that *DebugLog) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.Ts).StableEqualVT((*timestamppb1.Timestamp)(that.Ts)) {
		return false
	}
	if this.Log != that.Log {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *DebugLog) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*DebugLog)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *DebugLog) EqualVT(that *DebugLog) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.Ts).EqualVT((*timestamppb1.Timestamp)(that.Ts)) {
		return false
	}
	if this.Log != that.Log {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *DebugLog) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*DebugLog)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RuntimeExtensionMetadata) StableEqualVT(that *RuntimeExtensionMetadata) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Output.StableEqualVT(that.Output) {
		return false
	}
	if this.ApplyDesiredStateId != that.ApplyDesiredStateId {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RuntimeExtensionMetadata) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RuntimeExtensionMetadata)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *RuntimeExtensionMetadata) EqualVT(that *RuntimeExtensionMetadata) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Output.EqualVT(that.Output) {
		return false
	}
	if this.ApplyDesiredStateId != that.ApplyDesiredStateId {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RuntimeExtensionMetadata) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RuntimeExtensionMetadata)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ManualApprovalConfig) StableEqualVT(that *ManualApprovalConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Config == nil && that.Config != nil {
		return false
	} else if this.Config != nil {
		if that.Config == nil {
			return false
		}
		if !this.Config.(interface {
			StableEqualVT(isManualApprovalConfig_Config) bool
		}).StableEqualVT(that.Config) {
			return false
		}
	}
	if this.MinApprovers != that.MinApprovers {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ManualApprovalConfig) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ManualApprovalConfig)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ManualApprovalConfig_RuntimeExtension) StableEqualVT(thatIface isManualApprovalConfig_Config) bool {
	that, ok := thatIface.(*ManualApprovalConfig_RuntimeExtension)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.RuntimeExtension, that.RuntimeExtension; p != q {
		if p == nil {
			p = &RuntimeExtensionMetadata{}
		}
		if q == nil {
			q = &RuntimeExtensionMetadata{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ManualApprovalConfig) EqualVT(that *ManualApprovalConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Config == nil && that.Config != nil {
		return false
	} else if this.Config != nil {
		if that.Config == nil {
			return false
		}
		if !this.Config.(interface {
			EqualVT(isManualApprovalConfig_Config) bool
		}).EqualVT(that.Config) {
			return false
		}
	}
	if this.MinApprovers != that.MinApprovers {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ManualApprovalConfig) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ManualApprovalConfig)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ManualApprovalConfig_RuntimeExtension) EqualVT(thatIface isManualApprovalConfig_Config) bool {
	that, ok := thatIface.(*ManualApprovalConfig_RuntimeExtension)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.RuntimeExtension, that.RuntimeExtension; p != q {
		if p == nil {
			p = &RuntimeExtensionMetadata{}
		}
		if q == nil {
			q = &RuntimeExtensionMetadata{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MissingApproval) StableEqualVT(that *MissingApproval) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.DesiredStateId != that.DesiredStateId {
		return false
	}
	if this.SignalType != that.SignalType {
		return false
	}
	if this.Topic != that.Topic {
		return false
	}
	if !this.RuntimeExtension.StableEqualVT(that.RuntimeExtension) {
		return false
	}
	if this.Current != that.Current {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *MissingApproval) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*MissingApproval)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *MissingApproval) EqualVT(that *MissingApproval) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.DesiredStateId != that.DesiredStateId {
		return false
	}
	if this.SignalType != that.SignalType {
		return false
	}
	if this.Topic != that.Topic {
		return false
	}
	if !this.RuntimeExtension.EqualVT(that.RuntimeExtension) {
		return false
	}
	if this.Current != that.Current {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *MissingApproval) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*MissingApproval)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ConcurrencyLimitExceeded_Blocker) StableEqualVT(that *ConcurrencyLimitExceeded_Blocker) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.EntityId.StableEqualVT(that.EntityId) {
		return false
	}
	if this.DesiredStateId != that.DesiredStateId {
		return false
	}
	if this.RootDesiredStateId != that.RootDesiredStateId {
		return false
	}
	if this.ReleaseId != that.ReleaseId {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.HeldSinceTimestamp).StableEqualVT((*timestamppb1.Timestamp)(that.HeldSinceTimestamp)) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ConcurrencyLimitExceeded_Blocker) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ConcurrencyLimitExceeded_Blocker)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ConcurrencyLimitExceeded) StableEqualVT(that *ConcurrencyLimitExceeded) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.EntityId.StableEqualVT(that.EntityId) {
		return false
	}
	if this.LimitDescription != that.LimitDescription {
		return false
	}
	if len(this.Blockers) != len(that.Blockers) {
		return false
	}
	for i, vx := range this.Blockers {
		vy := that.Blockers[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &ConcurrencyLimitExceeded_Blocker{}
			}
			if q == nil {
				q = &ConcurrencyLimitExceeded_Blocker{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if this.DesiredStateId != that.DesiredStateId {
		return false
	}
	if this.ReleaseId != that.ReleaseId {
		return false
	}
	if this.LimitId != that.LimitId {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ConcurrencyLimitExceeded) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ConcurrencyLimitExceeded)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ConcurrencyLimitExceeded_Blocker) EqualVT(that *ConcurrencyLimitExceeded_Blocker) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.EntityId.EqualVT(that.EntityId) {
		return false
	}
	if this.DesiredStateId != that.DesiredStateId {
		return false
	}
	if this.RootDesiredStateId != that.RootDesiredStateId {
		return false
	}
	if this.ReleaseId != that.ReleaseId {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.HeldSinceTimestamp).EqualVT((*timestamppb1.Timestamp)(that.HeldSinceTimestamp)) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ConcurrencyLimitExceeded_Blocker) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ConcurrencyLimitExceeded_Blocker)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ConcurrencyLimitExceeded) EqualVT(that *ConcurrencyLimitExceeded) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.EntityId.EqualVT(that.EntityId) {
		return false
	}
	if this.LimitDescription != that.LimitDescription {
		return false
	}
	if len(this.Blockers) != len(that.Blockers) {
		return false
	}
	for i, vx := range this.Blockers {
		vy := that.Blockers[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &ConcurrencyLimitExceeded_Blocker{}
			}
			if q == nil {
				q = &ConcurrencyLimitExceeded_Blocker{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if this.DesiredStateId != that.DesiredStateId {
		return false
	}
	if this.ReleaseId != that.ReleaseId {
		return false
	}
	if this.LimitId != that.LimitId {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ConcurrencyLimitExceeded) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ConcurrencyLimitExceeded)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ApplyConditionUnsatisfied_InternalMissingApproval) StableEqualVT(that *ApplyConditionUnsatisfied_InternalMissingApproval) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.DesiredStateId != that.DesiredStateId {
		return false
	}
	if this.SignalType != that.SignalType {
		return false
	}
	if this.Topic != that.Topic {
		return false
	}
	if !this.RuntimeExtension.StableEqualVT(that.RuntimeExtension) {
		return false
	}
	if len(this.GeneratorDesiredStateIds) != len(that.GeneratorDesiredStateIds) {
		return false
	}
	for i, vx := range this.GeneratorDesiredStateIds {
		vy := that.GeneratorDesiredStateIds[i]
		if vx != vy {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ApplyConditionUnsatisfied_InternalMissingApproval) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ApplyConditionUnsatisfied_InternalMissingApproval)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ApplyConditionUnsatisfied) StableEqualVT(that *ApplyConditionUnsatisfied) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Reason == nil && that.Reason != nil {
		return false
	} else if this.Reason != nil {
		if that.Reason == nil {
			return false
		}
		if !this.Reason.(interface {
			StableEqualVT(isApplyConditionUnsatisfied_Reason) bool
		}).StableEqualVT(that.Reason) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ApplyConditionUnsatisfied) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ApplyConditionUnsatisfied)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ApplyConditionUnsatisfied_MissingApproval) StableEqualVT(thatIface isApplyConditionUnsatisfied_Reason) bool {
	that, ok := thatIface.(*ApplyConditionUnsatisfied_MissingApproval)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.MissingApproval, that.MissingApproval; p != q {
		if p == nil {
			p = &ApplyConditionUnsatisfied_InternalMissingApproval{}
		}
		if q == nil {
			q = &ApplyConditionUnsatisfied_InternalMissingApproval{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ApplyConditionUnsatisfied_ConcurrencyLimitExceeded) StableEqualVT(thatIface isApplyConditionUnsatisfied_Reason) bool {
	that, ok := thatIface.(*ApplyConditionUnsatisfied_ConcurrencyLimitExceeded)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ConcurrencyLimitExceeded, that.ConcurrencyLimitExceeded; p != q {
		if p == nil {
			p = &ConcurrencyLimitExceeded{}
		}
		if q == nil {
			q = &ConcurrencyLimitExceeded{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ApplyConditionUnsatisfied_InternalMissingApproval) EqualVT(that *ApplyConditionUnsatisfied_InternalMissingApproval) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.DesiredStateId != that.DesiredStateId {
		return false
	}
	if this.SignalType != that.SignalType {
		return false
	}
	if this.Topic != that.Topic {
		return false
	}
	if !this.RuntimeExtension.EqualVT(that.RuntimeExtension) {
		return false
	}
	if len(this.GeneratorDesiredStateIds) != len(that.GeneratorDesiredStateIds) {
		return false
	}
	for i, vx := range this.GeneratorDesiredStateIds {
		vy := that.GeneratorDesiredStateIds[i]
		if vx != vy {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ApplyConditionUnsatisfied_InternalMissingApproval) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ApplyConditionUnsatisfied_InternalMissingApproval)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ApplyConditionUnsatisfied) EqualVT(that *ApplyConditionUnsatisfied) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Reason == nil && that.Reason != nil {
		return false
	} else if this.Reason != nil {
		if that.Reason == nil {
			return false
		}
		if !this.Reason.(interface {
			EqualVT(isApplyConditionUnsatisfied_Reason) bool
		}).EqualVT(that.Reason) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ApplyConditionUnsatisfied) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ApplyConditionUnsatisfied)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ApplyConditionUnsatisfied_MissingApproval) EqualVT(thatIface isApplyConditionUnsatisfied_Reason) bool {
	that, ok := thatIface.(*ApplyConditionUnsatisfied_MissingApproval)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.MissingApproval, that.MissingApproval; p != q {
		if p == nil {
			p = &ApplyConditionUnsatisfied_InternalMissingApproval{}
		}
		if q == nil {
			q = &ApplyConditionUnsatisfied_InternalMissingApproval{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ApplyConditionUnsatisfied_ConcurrencyLimitExceeded) EqualVT(thatIface isApplyConditionUnsatisfied_Reason) bool {
	that, ok := thatIface.(*ApplyConditionUnsatisfied_ConcurrencyLimitExceeded)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ConcurrencyLimitExceeded, that.ConcurrencyLimitExceeded; p != q {
		if p == nil {
			p = &ConcurrencyLimitExceeded{}
		}
		if q == nil {
			q = &ConcurrencyLimitExceeded{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *FetchTaskStartDetails) StableEqualVT(that *FetchTaskStartDetails) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.FetchMode != that.FetchMode {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *FetchTaskStartDetails) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*FetchTaskStartDetails)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *FetchTaskStartDetails) EqualVT(that *FetchTaskStartDetails) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.FetchMode != that.FetchMode {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *FetchTaskStartDetails) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*FetchTaskStartDetails)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ConcurrencyLease) StableEqualVT(that *ConcurrencyLease) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.LimitId != that.LimitId {
		return false
	}
	if this.LeaseId != that.LeaseId {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ConcurrencyLease) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ConcurrencyLease)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ConcurrencyLease) EqualVT(that *ConcurrencyLease) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.LimitId != that.LimitId {
		return false
	}
	if this.LeaseId != that.LeaseId {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ConcurrencyLease) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ConcurrencyLease)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *TaskRun_RuntimeObjectMetadata) StableEqualVT(that *TaskRun_RuntimeObjectMetadata) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Id.StableEqualVT(that.Id) {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	if this.ObjectType != that.ObjectType {
		return false
	}
	if this.Namespace != that.Namespace {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *TaskRun_RuntimeObjectMetadata) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*TaskRun_RuntimeObjectMetadata)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *TaskRun) StableEqualVT(that *TaskRun) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Status != that.Status {
		return false
	}
	if len(this.StatusExplanations) != len(that.StatusExplanations) {
		return false
	}
	for i, vx := range this.StatusExplanations {
		vy := that.StatusExplanations[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &StatusExplanation{}
			}
			if q == nil {
				q = &StatusExplanation{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if this.Version != that.Version {
		return false
	}
	if len(this.SeenVersions) != len(that.SeenVersions) {
		return false
	}
	for i, vx := range this.SeenVersions {
		vy := that.SeenVersions[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Version{}
			}
			if q == nil {
				q = &Version{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if !(*timestamppb1.Timestamp)(this.CreatedTimestamp).StableEqualVT((*timestamppb1.Timestamp)(that.CreatedTimestamp)) {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.CompletedTimestamp).StableEqualVT((*timestamppb1.Timestamp)(that.CompletedTimestamp)) {
		return false
	}
	if len(this.OutputBlobIds) != len(that.OutputBlobIds) {
		return false
	}
	for i, vx := range this.OutputBlobIds {
		vy := that.OutputBlobIds[i]
		if vx != vy {
			return false
		}
	}
	if len(this.ExitCodes) != len(that.ExitCodes) {
		return false
	}
	for i, vx := range this.ExitCodes {
		vy := that.ExitCodes[i]
		if vx != vy {
			return false
		}
	}
	if len(this.TaskEntities) != len(that.TaskEntities) {
		return false
	}
	for i, vx := range this.TaskEntities {
		vy := that.TaskEntities[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Identifier{}
			}
			if q == nil {
				q = &Identifier{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if !this.FetchDetails.StableEqualVT(that.FetchDetails) {
		return false
	}
	if len(this.RetryableExitCodes) != len(that.RetryableExitCodes) {
		return false
	}
	for i, vx := range this.RetryableExitCodes {
		vy := that.RetryableExitCodes[i]
		if vx != vy {
			return false
		}
	}
	if this.Retryable != that.Retryable {
		return false
	}
	if this.Phase != that.Phase {
		return false
	}
	if !this.FetchTaskStartDetails.StableEqualVT(that.FetchTaskStartDetails) {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.StartedTimestamp).StableEqualVT((*timestamppb1.Timestamp)(that.StartedTimestamp)) {
		return false
	}
	if this.StartedByProcessId != that.StartedByProcessId {
		return false
	}
	if len(this.ConcurrencyLeases) != len(that.ConcurrencyLeases) {
		return false
	}
	for i, vx := range this.ConcurrencyLeases {
		vy := that.ConcurrencyLeases[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &ConcurrencyLease{}
			}
			if q == nil {
				q = &ConcurrencyLease{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if this.DesiredStateId != that.DesiredStateId {
		return false
	}
	if this.ReleaseId != that.ReleaseId {
		return false
	}
	if this.HasWorkReason != that.HasWorkReason {
		return false
	}
	if !this.PvnWrapperOutput.StableEqualVT(that.PvnWrapperOutput) {
		return false
	}
	if len(this.RuntimeObjectMetadatas) != len(that.RuntimeObjectMetadatas) {
		return false
	}
	for i, vx := range this.RuntimeObjectMetadatas {
		vy := that.RuntimeObjectMetadatas[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &TaskRun_RuntimeObjectMetadata{}
			}
			if q == nil {
				q = &TaskRun_RuntimeObjectMetadata{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if this.ApplyId != that.ApplyId {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *TaskRun) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*TaskRun)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *TaskRun_RuntimeObjectMetadata) EqualVT(that *TaskRun_RuntimeObjectMetadata) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Id.EqualVT(that.Id) {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	if this.ObjectType != that.ObjectType {
		return false
	}
	if this.Namespace != that.Namespace {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *TaskRun_RuntimeObjectMetadata) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*TaskRun_RuntimeObjectMetadata)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *TaskRun) EqualVT(that *TaskRun) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Status != that.Status {
		return false
	}
	if len(this.StatusExplanations) != len(that.StatusExplanations) {
		return false
	}
	for i, vx := range this.StatusExplanations {
		vy := that.StatusExplanations[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &StatusExplanation{}
			}
			if q == nil {
				q = &StatusExplanation{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if this.Version != that.Version {
		return false
	}
	if len(this.SeenVersions) != len(that.SeenVersions) {
		return false
	}
	for i, vx := range this.SeenVersions {
		vy := that.SeenVersions[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Version{}
			}
			if q == nil {
				q = &Version{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if !(*timestamppb1.Timestamp)(this.CreatedTimestamp).EqualVT((*timestamppb1.Timestamp)(that.CreatedTimestamp)) {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.CompletedTimestamp).EqualVT((*timestamppb1.Timestamp)(that.CompletedTimestamp)) {
		return false
	}
	if len(this.OutputBlobIds) != len(that.OutputBlobIds) {
		return false
	}
	for i, vx := range this.OutputBlobIds {
		vy := that.OutputBlobIds[i]
		if vx != vy {
			return false
		}
	}
	if len(this.ExitCodes) != len(that.ExitCodes) {
		return false
	}
	for i, vx := range this.ExitCodes {
		vy := that.ExitCodes[i]
		if vx != vy {
			return false
		}
	}
	if len(this.TaskEntities) != len(that.TaskEntities) {
		return false
	}
	for i, vx := range this.TaskEntities {
		vy := that.TaskEntities[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Identifier{}
			}
			if q == nil {
				q = &Identifier{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if !this.FetchDetails.EqualVT(that.FetchDetails) {
		return false
	}
	if len(this.RetryableExitCodes) != len(that.RetryableExitCodes) {
		return false
	}
	for i, vx := range this.RetryableExitCodes {
		vy := that.RetryableExitCodes[i]
		if vx != vy {
			return false
		}
	}
	if this.Retryable != that.Retryable {
		return false
	}
	if this.Phase != that.Phase {
		return false
	}
	if !this.FetchTaskStartDetails.EqualVT(that.FetchTaskStartDetails) {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.StartedTimestamp).EqualVT((*timestamppb1.Timestamp)(that.StartedTimestamp)) {
		return false
	}
	if this.StartedByProcessId != that.StartedByProcessId {
		return false
	}
	if len(this.ConcurrencyLeases) != len(that.ConcurrencyLeases) {
		return false
	}
	for i, vx := range this.ConcurrencyLeases {
		vy := that.ConcurrencyLeases[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &ConcurrencyLease{}
			}
			if q == nil {
				q = &ConcurrencyLease{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if this.DesiredStateId != that.DesiredStateId {
		return false
	}
	if this.ReleaseId != that.ReleaseId {
		return false
	}
	if this.HasWorkReason != that.HasWorkReason {
		return false
	}
	if !this.PvnWrapperOutput.EqualVT(that.PvnWrapperOutput) {
		return false
	}
	if len(this.RuntimeObjectMetadatas) != len(that.RuntimeObjectMetadatas) {
		return false
	}
	for i, vx := range this.RuntimeObjectMetadatas {
		vy := that.RuntimeObjectMetadatas[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &TaskRun_RuntimeObjectMetadata{}
			}
			if q == nil {
				q = &TaskRun_RuntimeObjectMetadata{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if this.ApplyId != that.ApplyId {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *TaskRun) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*TaskRun)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *TaskEntityContext_ApplyIdWithVersion) StableEqualVT(that *TaskEntityContext_ApplyIdWithVersion) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.ApplyId != that.ApplyId {
		return false
	}
	if this.Version != that.Version {
		return false
	}
	if this.Active != that.Active {
		return false
	}
	if this.Successful != that.Successful {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *TaskEntityContext_ApplyIdWithVersion) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*TaskEntityContext_ApplyIdWithVersion)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *TaskEntityContext) StableEqualVT(that *TaskEntityContext) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.LastCompletedRun.StableEqualVT(that.LastCompletedRun) {
		return false
	}
	if !this.LastRun.StableEqualVT(that.LastRun) {
		return false
	}
	if this.LastSuccessfulApplyId != that.LastSuccessfulApplyId {
		return false
	}
	if !this.ApplyIdVersionOverride.StableEqualVT(that.ApplyIdVersionOverride) {
		return false
	}
	if len(this.ApplyIdWithVersions) != len(that.ApplyIdWithVersions) {
		return false
	}
	for i, vx := range this.ApplyIdWithVersions {
		vy := that.ApplyIdWithVersions[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &TaskEntityContext_ApplyIdWithVersion{}
			}
			if q == nil {
				q = &TaskEntityContext_ApplyIdWithVersion{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *TaskEntityContext) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*TaskEntityContext)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *TaskEntityContext_ApplyIdWithVersion) EqualVT(that *TaskEntityContext_ApplyIdWithVersion) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.ApplyId != that.ApplyId {
		return false
	}
	if this.Version != that.Version {
		return false
	}
	if this.Active != that.Active {
		return false
	}
	if this.Successful != that.Successful {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *TaskEntityContext_ApplyIdWithVersion) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*TaskEntityContext_ApplyIdWithVersion)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *TaskEntityContext) EqualVT(that *TaskEntityContext) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.LastCompletedRun.EqualVT(that.LastCompletedRun) {
		return false
	}
	if !this.LastRun.EqualVT(that.LastRun) {
		return false
	}
	if this.LastSuccessfulApplyId != that.LastSuccessfulApplyId {
		return false
	}
	if !this.ApplyIdVersionOverride.EqualVT(that.ApplyIdVersionOverride) {
		return false
	}
	if len(this.ApplyIdWithVersions) != len(that.ApplyIdWithVersions) {
		return false
	}
	for i, vx := range this.ApplyIdWithVersions {
		vy := that.ApplyIdWithVersions[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &TaskEntityContext_ApplyIdWithVersion{}
			}
			if q == nil {
				q = &TaskEntityContext_ApplyIdWithVersion{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *TaskEntityContext) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*TaskEntityContext)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *SetDesiredStateMetadata) StableEqualVT(that *SetDesiredStateMetadata) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Rollback != that.Rollback {
		return false
	}
	if this.BypassPreconditionsAndProtections != that.BypassPreconditionsAndProtections {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *SetDesiredStateMetadata) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*SetDesiredStateMetadata)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *SetDesiredStateMetadata) EqualVT(that *SetDesiredStateMetadata) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Rollback != that.Rollback {
		return false
	}
	if this.BypassPreconditionsAndProtections != that.BypassPreconditionsAndProtections {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *SetDesiredStateMetadata) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*SetDesiredStateMetadata)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
