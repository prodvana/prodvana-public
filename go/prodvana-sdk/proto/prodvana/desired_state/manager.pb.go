// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.1
// 	protoc        v3.21.10
// source: prodvana/desired_state/manager.proto

package desired_state

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	async_task "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/async_task"
	debug "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/desired_state/debug"
	maestro "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/desired_state/maestro"
	model "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/desired_state/model"
	service "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/service"
	version "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/version"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SetDesiredStateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DesiredState *model.State `protobuf:"bytes,1,opt,name=desired_state,json=desiredState,proto3" json:"desired_state,omitempty"`
	// set if this is a rollback, purely for metadata purposes.
	Rollback bool `protobuf:"varint,2,opt,name=rollback,proto3" json:"rollback,omitempty"`
	// generate a desired state with faster preconditions
	BypassPreconditionsAndProtections bool                    `protobuf:"varint,6,opt,name=bypass_preconditions_and_protections,json=bypassPreconditionsAndProtections,proto3" json:"bypass_preconditions_and_protections,omitempty"`
	Source                            version.Source          `protobuf:"varint,3,opt,name=source,proto3,enum=prodvana.version.Source" json:"source,omitempty"`
	SourceMetadata                    *version.SourceMetadata `protobuf:"bytes,4,opt,name=source_metadata,json=sourceMetadata,proto3" json:"source_metadata,omitempty"`
	// internal use only
	ForceAsyncSetDesiredState bool `protobuf:"varint,5,opt,name=force_async_set_desired_state,json=forceAsyncSetDesiredState,proto3" json:"force_async_set_desired_state,omitempty"`
	// optionally override maestro config for this service
	MaestroConfigOverride *maestro.MaestroConfig `protobuf:"bytes,7,opt,name=maestro_config_override,json=maestroConfigOverride,proto3" json:"maestro_config_override,omitempty"`
}

func (x *SetDesiredStateReq) Reset() {
	*x = SetDesiredStateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDesiredStateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDesiredStateReq) ProtoMessage() {}

func (x *SetDesiredStateReq) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDesiredStateReq.ProtoReflect.Descriptor instead.
func (*SetDesiredStateReq) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{0}
}

func (x *SetDesiredStateReq) GetDesiredState() *model.State {
	if x != nil {
		return x.DesiredState
	}
	return nil
}

func (x *SetDesiredStateReq) GetRollback() bool {
	if x != nil {
		return x.Rollback
	}
	return false
}

func (x *SetDesiredStateReq) GetBypassPreconditionsAndProtections() bool {
	if x != nil {
		return x.BypassPreconditionsAndProtections
	}
	return false
}

func (x *SetDesiredStateReq) GetSource() version.Source {
	if x != nil {
		return x.Source
	}
	return version.Source(0)
}

func (x *SetDesiredStateReq) GetSourceMetadata() *version.SourceMetadata {
	if x != nil {
		return x.SourceMetadata
	}
	return nil
}

func (x *SetDesiredStateReq) GetForceAsyncSetDesiredState() bool {
	if x != nil {
		return x.ForceAsyncSetDesiredState
	}
	return false
}

func (x *SetDesiredStateReq) GetMaestroConfigOverride() *maestro.MaestroConfig {
	if x != nil {
		return x.MaestroConfigOverride
	}
	return nil
}

type ValidateDesiredStateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DesiredState *model.State `protobuf:"bytes,1,opt,name=desired_state,json=desiredState,proto3" json:"desired_state,omitempty"`
	// set if this is a rollback, purely for metadata purposes
	Rollback bool `protobuf:"varint,2,opt,name=rollback,proto3" json:"rollback,omitempty"`
	// generate a desired state with faster preconditions
	BypassPreconditionsAndProtections bool `protobuf:"varint,6,opt,name=bypass_preconditions_and_protections,json=bypassPreconditionsAndProtections,proto3" json:"bypass_preconditions_and_protections,omitempty"`
	// optional, if set, use these service configs instead of fetching from db. can be useful when doing a ValidateApplyParameters followed by a ValidateDesiredState
	ServiceInstanceConfigs []*service.CompiledServiceInstanceConfig `protobuf:"bytes,3,rep,name=service_instance_configs,json=serviceInstanceConfigs,proto3" json:"service_instance_configs,omitempty"`
	// only do label expansion instead of the full compilation, can be useful for speedup if the only desired outcome is to look at the materialized release channels
	LabelExpansionOnly bool `protobuf:"varint,4,opt,name=label_expansion_only,json=labelExpansionOnly,proto3" json:"label_expansion_only,omitempty"`
	// assume service versions in the request are invalid and do not try to fetch them.
	DisregardServiceVersions bool `protobuf:"varint,5,opt,name=disregard_service_versions,json=disregardServiceVersions,proto3" json:"disregard_service_versions,omitempty"`
}

func (x *ValidateDesiredStateReq) Reset() {
	*x = ValidateDesiredStateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateDesiredStateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateDesiredStateReq) ProtoMessage() {}

func (x *ValidateDesiredStateReq) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateDesiredStateReq.ProtoReflect.Descriptor instead.
func (*ValidateDesiredStateReq) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{1}
}

func (x *ValidateDesiredStateReq) GetDesiredState() *model.State {
	if x != nil {
		return x.DesiredState
	}
	return nil
}

func (x *ValidateDesiredStateReq) GetRollback() bool {
	if x != nil {
		return x.Rollback
	}
	return false
}

func (x *ValidateDesiredStateReq) GetBypassPreconditionsAndProtections() bool {
	if x != nil {
		return x.BypassPreconditionsAndProtections
	}
	return false
}

func (x *ValidateDesiredStateReq) GetServiceInstanceConfigs() []*service.CompiledServiceInstanceConfig {
	if x != nil {
		return x.ServiceInstanceConfigs
	}
	return nil
}

func (x *ValidateDesiredStateReq) GetLabelExpansionOnly() bool {
	if x != nil {
		return x.LabelExpansionOnly
	}
	return false
}

func (x *ValidateDesiredStateReq) GetDisregardServiceVersions() bool {
	if x != nil {
		return x.DisregardServiceVersions
	}
	return false
}

type SetDesiredStateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to IdOneof:
	//
	//	*SetDesiredStateResp_DesiredStateId
	//	*SetDesiredStateResp_ReleaseId
	IdOneof isSetDesiredStateResp_IdOneof `protobuf_oneof:"id_oneof"`
}

func (x *SetDesiredStateResp) Reset() {
	*x = SetDesiredStateResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDesiredStateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDesiredStateResp) ProtoMessage() {}

func (x *SetDesiredStateResp) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDesiredStateResp.ProtoReflect.Descriptor instead.
func (*SetDesiredStateResp) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{2}
}

func (m *SetDesiredStateResp) GetIdOneof() isSetDesiredStateResp_IdOneof {
	if m != nil {
		return m.IdOneof
	}
	return nil
}

func (x *SetDesiredStateResp) GetDesiredStateId() string {
	if x, ok := x.GetIdOneof().(*SetDesiredStateResp_DesiredStateId); ok {
		return x.DesiredStateId
	}
	return ""
}

func (x *SetDesiredStateResp) GetReleaseId() string {
	if x, ok := x.GetIdOneof().(*SetDesiredStateResp_ReleaseId); ok {
		return x.ReleaseId
	}
	return ""
}

type isSetDesiredStateResp_IdOneof interface {
	isSetDesiredStateResp_IdOneof()
}

type SetDesiredStateResp_DesiredStateId struct {
	DesiredStateId string `protobuf:"bytes,1,opt,name=desired_state_id,json=desiredStateId,proto3,oneof"` // unique identifier for the desired state that was just set, unless maestro is used
}

type SetDesiredStateResp_ReleaseId struct {
	ReleaseId string `protobuf:"bytes,2,opt,name=release_id,json=releaseId,proto3,oneof"` // release ID for maestro. If this is set, desired_state_id will not be set
}

func (*SetDesiredStateResp_DesiredStateId) isSetDesiredStateResp_IdOneof() {}

func (*SetDesiredStateResp_ReleaseId) isSetDesiredStateResp_IdOneof() {}

type PreviewEntityGraphResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityGraph    *model.EntityGraph `protobuf:"bytes,1,opt,name=entity_graph,json=entityGraph,proto3" json:"entity_graph,omitempty"`
	DesiredStateId string             `protobuf:"bytes,2,opt,name=desired_state_id,json=desiredStateId,proto3" json:"desired_state_id,omitempty"` // unique identifier the preview entity graph that was just created. This same ID can be used across any endpoints that inspect desired states, e.g. GetDesiredState
}

func (x *PreviewEntityGraphResp) Reset() {
	*x = PreviewEntityGraphResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviewEntityGraphResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewEntityGraphResp) ProtoMessage() {}

func (x *PreviewEntityGraphResp) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewEntityGraphResp.ProtoReflect.Descriptor instead.
func (*PreviewEntityGraphResp) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{3}
}

func (x *PreviewEntityGraphResp) GetEntityGraph() *model.EntityGraph {
	if x != nil {
		return x.EntityGraph
	}
	return nil
}

func (x *PreviewEntityGraphResp) GetDesiredStateId() string {
	if x != nil {
		return x.DesiredStateId
	}
	return ""
}

type GetServiceDesiredStateConvergenceSummaryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Application            string `protobuf:"bytes,1,opt,name=application,proto3" json:"application,omitempty"`
	Service                string `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
	FastNoDeprecatedFields bool   `protobuf:"varint,3,opt,name=fast_no_deprecated_fields,json=fastNoDeprecatedFields,proto3" json:"fast_no_deprecated_fields,omitempty"` // unused
}

func (x *GetServiceDesiredStateConvergenceSummaryReq) Reset() {
	*x = GetServiceDesiredStateConvergenceSummaryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceDesiredStateConvergenceSummaryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceDesiredStateConvergenceSummaryReq) ProtoMessage() {}

func (x *GetServiceDesiredStateConvergenceSummaryReq) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceDesiredStateConvergenceSummaryReq.ProtoReflect.Descriptor instead.
func (*GetServiceDesiredStateConvergenceSummaryReq) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{4}
}

func (x *GetServiceDesiredStateConvergenceSummaryReq) GetApplication() string {
	if x != nil {
		return x.Application
	}
	return ""
}

func (x *GetServiceDesiredStateConvergenceSummaryReq) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *GetServiceDesiredStateConvergenceSummaryReq) GetFastNoDeprecatedFields() bool {
	if x != nil {
		return x.FastNoDeprecatedFields
	}
	return false
}

type StatusExplanations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusExplanations []*model.StatusExplanation `protobuf:"bytes,1,rep,name=status_explanations,json=statusExplanations,proto3" json:"status_explanations,omitempty"`
}

func (x *StatusExplanations) Reset() {
	*x = StatusExplanations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusExplanations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusExplanations) ProtoMessage() {}

func (x *StatusExplanations) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusExplanations.ProtoReflect.Descriptor instead.
func (*StatusExplanations) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{5}
}

func (x *StatusExplanations) GetStatusExplanations() []*model.StatusExplanation {
	if x != nil {
		return x.StatusExplanations
	}
	return nil
}

type DebugLogs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DebugLogs []*model.DebugLog `protobuf:"bytes,1,rep,name=debug_logs,json=debugLogs,proto3" json:"debug_logs,omitempty"`
}

func (x *DebugLogs) Reset() {
	*x = DebugLogs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugLogs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugLogs) ProtoMessage() {}

func (x *DebugLogs) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugLogs.ProtoReflect.Descriptor instead.
func (*DebugLogs) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{6}
}

func (x *DebugLogs) GetDebugLogs() []*model.DebugLog {
	if x != nil {
		return x.DebugLogs
	}
	return nil
}

type PendingSetDesiredState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DesiredStateId       string       `protobuf:"bytes,4,opt,name=desired_state_id,json=desiredStateId,proto3" json:"desired_state_id,omitempty"`
	CompiledDesiredState *model.State `protobuf:"bytes,1,opt,name=compiled_desired_state,json=compiledDesiredState,proto3" json:"compiled_desired_state,omitempty"`
	// will never contain SUCCESS, by definition, but may contain FAILED
	TaskStatus async_task.TaskStatus `protobuf:"varint,2,opt,name=task_status,json=taskStatus,proto3,enum=prodvana.async_task.TaskStatus" json:"task_status,omitempty"`
	// will only be set for FAILED
	TaskResult *async_task.TaskResult `protobuf:"bytes,3,opt,name=task_result,json=taskResult,proto3" json:"task_result,omitempty"` // next tag: 5
}

func (x *PendingSetDesiredState) Reset() {
	*x = PendingSetDesiredState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PendingSetDesiredState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendingSetDesiredState) ProtoMessage() {}

func (x *PendingSetDesiredState) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendingSetDesiredState.ProtoReflect.Descriptor instead.
func (*PendingSetDesiredState) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{7}
}

func (x *PendingSetDesiredState) GetDesiredStateId() string {
	if x != nil {
		return x.DesiredStateId
	}
	return ""
}

func (x *PendingSetDesiredState) GetCompiledDesiredState() *model.State {
	if x != nil {
		return x.CompiledDesiredState
	}
	return nil
}

func (x *PendingSetDesiredState) GetTaskStatus() async_task.TaskStatus {
	if x != nil {
		return x.TaskStatus
	}
	return async_task.TaskStatus(0)
}

func (x *PendingSetDesiredState) GetTaskResult() *async_task.TaskResult {
	if x != nil {
		return x.TaskResult
	}
	return nil
}

type DesiredStateSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityGraph         *model.EntityGraph     `protobuf:"bytes,15,opt,name=entity_graph,json=entityGraph,proto3" json:"entity_graph,omitempty"`
	CreationTimestamp   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=creation_timestamp,json=creationTimestamp,proto3" json:"creation_timestamp,omitempty"`
	LastUpdateTimestamp *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=last_update_timestamp,json=lastUpdateTimestamp,proto3" json:"last_update_timestamp,omitempty"`
	// will only be set if desired state has been replaced
	ReplacedTimestamp *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=replaced_timestamp,json=replacedTimestamp,proto3" json:"replaced_timestamp,omitempty"`
	// uncompiled desired state originally passed as input to SetDesiredState
	InputDesiredState *model.State `protobuf:"bytes,16,opt,name=input_desired_state,json=inputDesiredState,proto3" json:"input_desired_state,omitempty"`
	// compiled desired state
	DesiredState  *model.State `protobuf:"bytes,3,opt,name=desired_state,json=desiredState,proto3" json:"desired_state,omitempty"`
	StartingState *model.State `protobuf:"bytes,1,opt,name=starting_state,json=startingState,proto3" json:"starting_state,omitempty"`
	LastSeenState *model.State `protobuf:"bytes,2,opt,name=last_seen_state,json=lastSeenState,proto3" json:"last_seen_state,omitempty"`
	Status        model.Status `protobuf:"varint,19,opt,name=status,proto3,enum=prodvana.desired_state.model.Status" json:"status,omitempty"`
	// who set the desired state
	Source         version.Source          `protobuf:"varint,17,opt,name=source,proto3,enum=prodvana.version.Source" json:"source,omitempty"`
	SourceMetadata *version.SourceMetadata `protobuf:"bytes,18,opt,name=source_metadata,json=sourceMetadata,proto3" json:"source_metadata,omitempty"`
	// the latest pending or failed set desired state request
	PendingSetDesiredState  *PendingSetDesiredState        `protobuf:"bytes,20,opt,name=pending_set_desired_state,json=pendingSetDesiredState,proto3" json:"pending_set_desired_state,omitempty"`
	SetDesiredStateMetadata *model.SetDesiredStateMetadata `protobuf:"bytes,21,opt,name=set_desired_state_metadata,json=setDesiredStateMetadata,proto3" json:"set_desired_state_metadata,omitempty"`
	// fields below are deprecated
	// status of the desired state, all its descendents, and the root desired state.
	Statuses map[string]model.Status `protobuf:"bytes,4,rep,name=statuses,proto3" json:"statuses,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=prodvana.desired_state.model.Status"`
	// State of all preconditions involved in the desired state.
	// Key format - "{desired_state_id}-{index}", e.g., "des-0752d6c76a6943abbfcf0515634584ba-0".
	PreconditionStatuses map[string]*model.ConditionState    `protobuf:"bytes,8,rep,name=precondition_statuses,json=preconditionStatuses,proto3" json:"precondition_statuses,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StatusExplanations   map[string]*StatusExplanations      `protobuf:"bytes,9,rep,name=status_explanations,json=statusExplanations,proto3" json:"status_explanations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DebugLogs            map[string]*DebugLogs               `protobuf:"bytes,10,rep,name=debug_logs,json=debugLogs,proto3" json:"debug_logs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ActionExplanations   map[string]*model.ActionExplanation `protobuf:"bytes,11,rep,name=action_explanations,json=actionExplanations,proto3" json:"action_explanations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// last_update_timestamp, last_fetched_timestamp, and last_applied_timestamp are only returned for the latest desired state
	LastUpdateTimestamps  map[string]*timestamppb.Timestamp `protobuf:"bytes,12,rep,name=last_update_timestamps,json=lastUpdateTimestamps,proto3" json:"last_update_timestamps,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	LastFetchedTimestamps map[string]*timestamppb.Timestamp `protobuf:"bytes,13,rep,name=last_fetched_timestamps,json=lastFetchedTimestamps,proto3" json:"last_fetched_timestamps,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	LastAppliedTimestamps map[string]*timestamppb.Timestamp `protobuf:"bytes,14,rep,name=last_applied_timestamps,json=lastAppliedTimestamps,proto3" json:"last_applied_timestamps,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DesiredStateSummary) Reset() {
	*x = DesiredStateSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DesiredStateSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DesiredStateSummary) ProtoMessage() {}

func (x *DesiredStateSummary) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DesiredStateSummary.ProtoReflect.Descriptor instead.
func (*DesiredStateSummary) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{8}
}

func (x *DesiredStateSummary) GetEntityGraph() *model.EntityGraph {
	if x != nil {
		return x.EntityGraph
	}
	return nil
}

func (x *DesiredStateSummary) GetCreationTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTimestamp
	}
	return nil
}

func (x *DesiredStateSummary) GetLastUpdateTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdateTimestamp
	}
	return nil
}

func (x *DesiredStateSummary) GetReplacedTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.ReplacedTimestamp
	}
	return nil
}

func (x *DesiredStateSummary) GetInputDesiredState() *model.State {
	if x != nil {
		return x.InputDesiredState
	}
	return nil
}

func (x *DesiredStateSummary) GetDesiredState() *model.State {
	if x != nil {
		return x.DesiredState
	}
	return nil
}

func (x *DesiredStateSummary) GetStartingState() *model.State {
	if x != nil {
		return x.StartingState
	}
	return nil
}

func (x *DesiredStateSummary) GetLastSeenState() *model.State {
	if x != nil {
		return x.LastSeenState
	}
	return nil
}

func (x *DesiredStateSummary) GetStatus() model.Status {
	if x != nil {
		return x.Status
	}
	return model.Status(0)
}

func (x *DesiredStateSummary) GetSource() version.Source {
	if x != nil {
		return x.Source
	}
	return version.Source(0)
}

func (x *DesiredStateSummary) GetSourceMetadata() *version.SourceMetadata {
	if x != nil {
		return x.SourceMetadata
	}
	return nil
}

func (x *DesiredStateSummary) GetPendingSetDesiredState() *PendingSetDesiredState {
	if x != nil {
		return x.PendingSetDesiredState
	}
	return nil
}

func (x *DesiredStateSummary) GetSetDesiredStateMetadata() *model.SetDesiredStateMetadata {
	if x != nil {
		return x.SetDesiredStateMetadata
	}
	return nil
}

func (x *DesiredStateSummary) GetStatuses() map[string]model.Status {
	if x != nil {
		return x.Statuses
	}
	return nil
}

func (x *DesiredStateSummary) GetPreconditionStatuses() map[string]*model.ConditionState {
	if x != nil {
		return x.PreconditionStatuses
	}
	return nil
}

func (x *DesiredStateSummary) GetStatusExplanations() map[string]*StatusExplanations {
	if x != nil {
		return x.StatusExplanations
	}
	return nil
}

func (x *DesiredStateSummary) GetDebugLogs() map[string]*DebugLogs {
	if x != nil {
		return x.DebugLogs
	}
	return nil
}

func (x *DesiredStateSummary) GetActionExplanations() map[string]*model.ActionExplanation {
	if x != nil {
		return x.ActionExplanations
	}
	return nil
}

func (x *DesiredStateSummary) GetLastUpdateTimestamps() map[string]*timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdateTimestamps
	}
	return nil
}

func (x *DesiredStateSummary) GetLastFetchedTimestamps() map[string]*timestamppb.Timestamp {
	if x != nil {
		return x.LastFetchedTimestamps
	}
	return nil
}

func (x *DesiredStateSummary) GetLastAppliedTimestamps() map[string]*timestamppb.Timestamp {
	if x != nil {
		return x.LastAppliedTimestamps
	}
	return nil
}

type GetDesiredStateConvergenceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DesiredStateId         string `protobuf:"bytes,1,opt,name=desired_state_id,json=desiredStateId,proto3" json:"desired_state_id,omitempty"`
	FastNoDeprecatedFields bool   `protobuf:"varint,2,opt,name=fast_no_deprecated_fields,json=fastNoDeprecatedFields,proto3" json:"fast_no_deprecated_fields,omitempty"` // unused
}

func (x *GetDesiredStateConvergenceReq) Reset() {
	*x = GetDesiredStateConvergenceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDesiredStateConvergenceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDesiredStateConvergenceReq) ProtoMessage() {}

func (x *GetDesiredStateConvergenceReq) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDesiredStateConvergenceReq.ProtoReflect.Descriptor instead.
func (*GetDesiredStateConvergenceReq) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{9}
}

func (x *GetDesiredStateConvergenceReq) GetDesiredStateId() string {
	if x != nil {
		return x.DesiredStateId
	}
	return ""
}

func (x *GetDesiredStateConvergenceReq) GetFastNoDeprecatedFields() bool {
	if x != nil {
		return x.FastNoDeprecatedFields
	}
	return false
}

type GetDesiredStateConvergenceSummaryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Summary *DesiredStateSummary `protobuf:"bytes,1,opt,name=summary,proto3" json:"summary,omitempty"`
}

func (x *GetDesiredStateConvergenceSummaryResp) Reset() {
	*x = GetDesiredStateConvergenceSummaryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDesiredStateConvergenceSummaryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDesiredStateConvergenceSummaryResp) ProtoMessage() {}

func (x *GetDesiredStateConvergenceSummaryResp) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDesiredStateConvergenceSummaryResp.ProtoReflect.Descriptor instead.
func (*GetDesiredStateConvergenceSummaryResp) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{10}
}

func (x *GetDesiredStateConvergenceSummaryResp) GetSummary() *DesiredStateSummary {
	if x != nil {
		return x.Summary
	}
	return nil
}

type GetServiceDesiredStateConvergenceSummaryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Summary *DesiredStateSummary `protobuf:"bytes,1,opt,name=summary,proto3" json:"summary,omitempty"`
}

func (x *GetServiceDesiredStateConvergenceSummaryResp) Reset() {
	*x = GetServiceDesiredStateConvergenceSummaryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceDesiredStateConvergenceSummaryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceDesiredStateConvergenceSummaryResp) ProtoMessage() {}

func (x *GetServiceDesiredStateConvergenceSummaryResp) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceDesiredStateConvergenceSummaryResp.ProtoReflect.Descriptor instead.
func (*GetServiceDesiredStateConvergenceSummaryResp) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{11}
}

func (x *GetServiceDesiredStateConvergenceSummaryResp) GetSummary() *DesiredStateSummary {
	if x != nil {
		return x.Summary
	}
	return nil
}

type GetServiceLastConvergedStateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Application string `protobuf:"bytes,1,opt,name=application,proto3" json:"application,omitempty"`
	Service     string `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
}

func (x *GetServiceLastConvergedStateReq) Reset() {
	*x = GetServiceLastConvergedStateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceLastConvergedStateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceLastConvergedStateReq) ProtoMessage() {}

func (x *GetServiceLastConvergedStateReq) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceLastConvergedStateReq.ProtoReflect.Descriptor instead.
func (*GetServiceLastConvergedStateReq) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{12}
}

func (x *GetServiceLastConvergedStateReq) GetApplication() string {
	if x != nil {
		return x.Application
	}
	return ""
}

func (x *GetServiceLastConvergedStateReq) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

type GetServiceLastConvergedStateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceInstanceStates []*model.ServiceInstanceState `protobuf:"bytes,1,rep,name=service_instance_states,json=serviceInstanceStates,proto3" json:"service_instance_states,omitempty"`
}

func (x *GetServiceLastConvergedStateResp) Reset() {
	*x = GetServiceLastConvergedStateResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceLastConvergedStateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceLastConvergedStateResp) ProtoMessage() {}

func (x *GetServiceLastConvergedStateResp) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceLastConvergedStateResp.ProtoReflect.Descriptor instead.
func (*GetServiceLastConvergedStateResp) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{13}
}

func (x *GetServiceLastConvergedStateResp) GetServiceInstanceStates() []*model.ServiceInstanceState {
	if x != nil {
		return x.ServiceInstanceStates
	}
	return nil
}

type GetServiceDesiredStateHistoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Application            string `protobuf:"bytes,1,opt,name=application,proto3" json:"application,omitempty"`
	Service                string `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
	PageToken              string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	PageSize               int32  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	FastNoDeprecatedFields bool   `protobuf:"varint,5,opt,name=fast_no_deprecated_fields,json=fastNoDeprecatedFields,proto3" json:"fast_no_deprecated_fields,omitempty"` // unused
}

func (x *GetServiceDesiredStateHistoryReq) Reset() {
	*x = GetServiceDesiredStateHistoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceDesiredStateHistoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceDesiredStateHistoryReq) ProtoMessage() {}

func (x *GetServiceDesiredStateHistoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceDesiredStateHistoryReq.ProtoReflect.Descriptor instead.
func (*GetServiceDesiredStateHistoryReq) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{14}
}

func (x *GetServiceDesiredStateHistoryReq) GetApplication() string {
	if x != nil {
		return x.Application
	}
	return ""
}

func (x *GetServiceDesiredStateHistoryReq) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *GetServiceDesiredStateHistoryReq) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *GetServiceDesiredStateHistoryReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetServiceDesiredStateHistoryReq) GetFastNoDeprecatedFields() bool {
	if x != nil {
		return x.FastNoDeprecatedFields
	}
	return false
}

type GetServiceDesiredStateHistoryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DesiredStates []*DesiredStateSummary `protobuf:"bytes,1,rep,name=desired_states,json=desiredStates,proto3" json:"desired_states,omitempty"`
	NextPageToken string                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *GetServiceDesiredStateHistoryResp) Reset() {
	*x = GetServiceDesiredStateHistoryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceDesiredStateHistoryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceDesiredStateHistoryResp) ProtoMessage() {}

func (x *GetServiceDesiredStateHistoryResp) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceDesiredStateHistoryResp.ProtoReflect.Descriptor instead.
func (*GetServiceDesiredStateHistoryResp) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{15}
}

func (x *GetServiceDesiredStateHistoryResp) GetDesiredStates() []*DesiredStateSummary {
	if x != nil {
		return x.DesiredStates
	}
	return nil
}

func (x *GetServiceDesiredStateHistoryResp) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GetDesiredStateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DesiredStateId string `protobuf:"bytes,1,opt,name=desired_state_id,json=desiredStateId,proto3" json:"desired_state_id,omitempty"`
}

func (x *GetDesiredStateReq) Reset() {
	*x = GetDesiredStateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDesiredStateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDesiredStateReq) ProtoMessage() {}

func (x *GetDesiredStateReq) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDesiredStateReq.ProtoReflect.Descriptor instead.
func (*GetDesiredStateReq) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{16}
}

func (x *GetDesiredStateReq) GetDesiredStateId() string {
	if x != nil {
		return x.DesiredStateId
	}
	return ""
}

type GetDesiredStateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DesiredState            *model.State                   `protobuf:"bytes,1,opt,name=desired_state,json=desiredState,proto3" json:"desired_state,omitempty"`
	CompiledDesiredState    *model.State                   `protobuf:"bytes,2,opt,name=compiled_desired_state,json=compiledDesiredState,proto3" json:"compiled_desired_state,omitempty"`
	SetDesiredStateMetadata *model.SetDesiredStateMetadata `protobuf:"bytes,3,opt,name=set_desired_state_metadata,json=setDesiredStateMetadata,proto3" json:"set_desired_state_metadata,omitempty"`
	CreationTimestamp       *timestamppb.Timestamp         `protobuf:"bytes,4,opt,name=creation_timestamp,json=creationTimestamp,proto3" json:"creation_timestamp,omitempty"`
	// who set the desired state
	Source         version.Source          `protobuf:"varint,5,opt,name=source,proto3,enum=prodvana.version.Source" json:"source,omitempty"`
	SourceMetadata *version.SourceMetadata `protobuf:"bytes,6,opt,name=source_metadata,json=sourceMetadata,proto3" json:"source_metadata,omitempty"`
}

func (x *GetDesiredStateResp) Reset() {
	*x = GetDesiredStateResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDesiredStateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDesiredStateResp) ProtoMessage() {}

func (x *GetDesiredStateResp) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDesiredStateResp.ProtoReflect.Descriptor instead.
func (*GetDesiredStateResp) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{17}
}

func (x *GetDesiredStateResp) GetDesiredState() *model.State {
	if x != nil {
		return x.DesiredState
	}
	return nil
}

func (x *GetDesiredStateResp) GetCompiledDesiredState() *model.State {
	if x != nil {
		return x.CompiledDesiredState
	}
	return nil
}

func (x *GetDesiredStateResp) GetSetDesiredStateMetadata() *model.SetDesiredStateMetadata {
	if x != nil {
		return x.SetDesiredStateMetadata
	}
	return nil
}

func (x *GetDesiredStateResp) GetCreationTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTimestamp
	}
	return nil
}

func (x *GetDesiredStateResp) GetSource() version.Source {
	if x != nil {
		return x.Source
	}
	return version.Source(0)
}

func (x *GetDesiredStateResp) GetSourceMetadata() *version.SourceMetadata {
	if x != nil {
		return x.SourceMetadata
	}
	return nil
}

type GetDesiredStateGraphReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Root desired state id to get the graph for.
	//
	// Types that are assignable to Query:
	//
	//	*GetDesiredStateGraphReq_DesiredStateId
	//	*GetDesiredStateGraphReq_QueryByService_
	Query isGetDesiredStateGraphReq_Query `protobuf_oneof:"query"`
	// Which type of entities to find. Empty list to find all entities.
	Types []model.Type `protobuf:"varint,7,rep,packed,name=types,proto3,enum=prodvana.desired_state.model.Type" json:"types,omitempty"`
	// Which annotations are required for an entity to be considered interesting.
	RequiredAnnotations *model.Annotations `protobuf:"bytes,3,opt,name=required_annotations,json=requiredAnnotations,proto3" json:"required_annotations,omitempty"`
	RequiredEntityNames []string           `protobuf:"bytes,9,rep,name=required_entity_names,json=requiredEntityNames,proto3" json:"required_entity_names,omitempty"`
	// For all interesting entities, also include all children up to the given depth. 0 means no children.
	Depth                         int32                                            `protobuf:"varint,4,opt,name=depth,proto3" json:"depth,omitempty"`
	DepthOverridesByStatus        []*GetDesiredStateGraphReq_DepthOverrideByStatus `protobuf:"bytes,8,rep,name=depth_overrides_by_status,json=depthOverridesByStatus,proto3" json:"depth_overrides_by_status,omitempty"`
	IncludeDesiredStateTimestamps bool                                             `protobuf:"varint,5,opt,name=include_desired_state_timestamps,json=includeDesiredStateTimestamps,proto3" json:"include_desired_state_timestamps,omitempty"`
	IncludeDesiredStateMetadata   bool                                             `protobuf:"varint,13,opt,name=include_desired_state_metadata,json=includeDesiredStateMetadata,proto3" json:"include_desired_state_metadata,omitempty"`
	IncludeParents                bool                                             `protobuf:"varint,10,opt,name=include_parents,json=includeParents,proto3" json:"include_parents,omitempty"`
	ExcludeDependencyType         []model.DependencyType                           `protobuf:"varint,11,rep,packed,name=exclude_dependency_type,json=excludeDependencyType,proto3,enum=prodvana.desired_state.model.DependencyType" json:"exclude_dependency_type,omitempty"`
	LiteEntitiesFilter            *GetDesiredStateGraphReq_LiteEntitiesFilter      `protobuf:"bytes,12,opt,name=lite_entities_filter,json=liteEntitiesFilter,proto3" json:"lite_entities_filter,omitempty"`
}

func (x *GetDesiredStateGraphReq) Reset() {
	*x = GetDesiredStateGraphReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDesiredStateGraphReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDesiredStateGraphReq) ProtoMessage() {}

func (x *GetDesiredStateGraphReq) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDesiredStateGraphReq.ProtoReflect.Descriptor instead.
func (*GetDesiredStateGraphReq) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{18}
}

func (m *GetDesiredStateGraphReq) GetQuery() isGetDesiredStateGraphReq_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (x *GetDesiredStateGraphReq) GetDesiredStateId() string {
	if x, ok := x.GetQuery().(*GetDesiredStateGraphReq_DesiredStateId); ok {
		return x.DesiredStateId
	}
	return ""
}

func (x *GetDesiredStateGraphReq) GetQueryByService() *GetDesiredStateGraphReq_QueryByService {
	if x, ok := x.GetQuery().(*GetDesiredStateGraphReq_QueryByService_); ok {
		return x.QueryByService
	}
	return nil
}

func (x *GetDesiredStateGraphReq) GetTypes() []model.Type {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *GetDesiredStateGraphReq) GetRequiredAnnotations() *model.Annotations {
	if x != nil {
		return x.RequiredAnnotations
	}
	return nil
}

func (x *GetDesiredStateGraphReq) GetRequiredEntityNames() []string {
	if x != nil {
		return x.RequiredEntityNames
	}
	return nil
}

func (x *GetDesiredStateGraphReq) GetDepth() int32 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *GetDesiredStateGraphReq) GetDepthOverridesByStatus() []*GetDesiredStateGraphReq_DepthOverrideByStatus {
	if x != nil {
		return x.DepthOverridesByStatus
	}
	return nil
}

func (x *GetDesiredStateGraphReq) GetIncludeDesiredStateTimestamps() bool {
	if x != nil {
		return x.IncludeDesiredStateTimestamps
	}
	return false
}

func (x *GetDesiredStateGraphReq) GetIncludeDesiredStateMetadata() bool {
	if x != nil {
		return x.IncludeDesiredStateMetadata
	}
	return false
}

func (x *GetDesiredStateGraphReq) GetIncludeParents() bool {
	if x != nil {
		return x.IncludeParents
	}
	return false
}

func (x *GetDesiredStateGraphReq) GetExcludeDependencyType() []model.DependencyType {
	if x != nil {
		return x.ExcludeDependencyType
	}
	return nil
}

func (x *GetDesiredStateGraphReq) GetLiteEntitiesFilter() *GetDesiredStateGraphReq_LiteEntitiesFilter {
	if x != nil {
		return x.LiteEntitiesFilter
	}
	return nil
}

type isGetDesiredStateGraphReq_Query interface {
	isGetDesiredStateGraphReq_Query()
}

type GetDesiredStateGraphReq_DesiredStateId struct {
	DesiredStateId string `protobuf:"bytes,1,opt,name=desired_state_id,json=desiredStateId,proto3,oneof"`
}

type GetDesiredStateGraphReq_QueryByService_ struct {
	QueryByService *GetDesiredStateGraphReq_QueryByService `protobuf:"bytes,6,opt,name=query_by_service,json=queryByService,proto3,oneof"`
}

func (*GetDesiredStateGraphReq_DesiredStateId) isGetDesiredStateGraphReq_Query() {}

func (*GetDesiredStateGraphReq_QueryByService_) isGetDesiredStateGraphReq_Query() {}

type DesiredStateTimestamps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreationTimestamp   *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=creation_timestamp,json=creationTimestamp,proto3" json:"creation_timestamp,omitempty"`
	LastUpdateTimestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=last_update_timestamp,json=lastUpdateTimestamp,proto3" json:"last_update_timestamp,omitempty"`
	// will only be set if desired state has been replaced
	ReplacedTimestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=replaced_timestamp,json=replacedTimestamp,proto3" json:"replaced_timestamp,omitempty"`
}

func (x *DesiredStateTimestamps) Reset() {
	*x = DesiredStateTimestamps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DesiredStateTimestamps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DesiredStateTimestamps) ProtoMessage() {}

func (x *DesiredStateTimestamps) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DesiredStateTimestamps.ProtoReflect.Descriptor instead.
func (*DesiredStateTimestamps) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{19}
}

func (x *DesiredStateTimestamps) GetCreationTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTimestamp
	}
	return nil
}

func (x *DesiredStateTimestamps) GetLastUpdateTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdateTimestamp
	}
	return nil
}

func (x *DesiredStateTimestamps) GetReplacedTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.ReplacedTimestamp
	}
	return nil
}

type GetDesiredStateGraphResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityGraph *model.EntityGraph `protobuf:"bytes,1,opt,name=entity_graph,json=entityGraph,proto3" json:"entity_graph,omitempty"`
	// will only be set if DS was queried by service and there is a pending set desired state
	PendingSetDesiredState *PendingSetDesiredState `protobuf:"bytes,2,opt,name=pending_set_desired_state,json=pendingSetDesiredState,proto3" json:"pending_set_desired_state,omitempty"`
	// only set if requested
	Timestamps              *DesiredStateTimestamps        `protobuf:"bytes,3,opt,name=timestamps,proto3" json:"timestamps,omitempty"`
	SetDesiredStateMetadata *model.SetDesiredStateMetadata `protobuf:"bytes,4,opt,name=set_desired_state_metadata,json=setDesiredStateMetadata,proto3" json:"set_desired_state_metadata,omitempty"`
}

func (x *GetDesiredStateGraphResp) Reset() {
	*x = GetDesiredStateGraphResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDesiredStateGraphResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDesiredStateGraphResp) ProtoMessage() {}

func (x *GetDesiredStateGraphResp) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDesiredStateGraphResp.ProtoReflect.Descriptor instead.
func (*GetDesiredStateGraphResp) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{20}
}

func (x *GetDesiredStateGraphResp) GetEntityGraph() *model.EntityGraph {
	if x != nil {
		return x.EntityGraph
	}
	return nil
}

func (x *GetDesiredStateGraphResp) GetPendingSetDesiredState() *PendingSetDesiredState {
	if x != nil {
		return x.PendingSetDesiredState
	}
	return nil
}

func (x *GetDesiredStateGraphResp) GetTimestamps() *DesiredStateTimestamps {
	if x != nil {
		return x.Timestamps
	}
	return nil
}

func (x *GetDesiredStateGraphResp) GetSetDesiredStateMetadata() *model.SetDesiredStateMetadata {
	if x != nil {
		return x.SetDesiredStateMetadata
	}
	return nil
}

type GetServiceLatestDesiredStateIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Application string `protobuf:"bytes,1,opt,name=application,proto3" json:"application,omitempty"`
	Service     string `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
}

func (x *GetServiceLatestDesiredStateIdReq) Reset() {
	*x = GetServiceLatestDesiredStateIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceLatestDesiredStateIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceLatestDesiredStateIdReq) ProtoMessage() {}

func (x *GetServiceLatestDesiredStateIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceLatestDesiredStateIdReq.ProtoReflect.Descriptor instead.
func (*GetServiceLatestDesiredStateIdReq) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{21}
}

func (x *GetServiceLatestDesiredStateIdReq) GetApplication() string {
	if x != nil {
		return x.Application
	}
	return ""
}

func (x *GetServiceLatestDesiredStateIdReq) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

type GetServiceLatestDesiredStateIdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DesiredStateId         string                  `protobuf:"bytes,1,opt,name=desired_state_id,json=desiredStateId,proto3" json:"desired_state_id,omitempty"`
	PendingSetDesiredState *PendingSetDesiredState `protobuf:"bytes,2,opt,name=pending_set_desired_state,json=pendingSetDesiredState,proto3" json:"pending_set_desired_state,omitempty"`
}

func (x *GetServiceLatestDesiredStateIdResp) Reset() {
	*x = GetServiceLatestDesiredStateIdResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceLatestDesiredStateIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceLatestDesiredStateIdResp) ProtoMessage() {}

func (x *GetServiceLatestDesiredStateIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceLatestDesiredStateIdResp.ProtoReflect.Descriptor instead.
func (*GetServiceLatestDesiredStateIdResp) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{22}
}

func (x *GetServiceLatestDesiredStateIdResp) GetDesiredStateId() string {
	if x != nil {
		return x.DesiredStateId
	}
	return ""
}

func (x *GetServiceLatestDesiredStateIdResp) GetPendingSetDesiredState() *PendingSetDesiredState {
	if x != nil {
		return x.PendingSetDesiredState
	}
	return nil
}

type GetServiceDesiredStateIdHistoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Application string `protobuf:"bytes,1,opt,name=application,proto3" json:"application,omitempty"`
	Service     string `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
	PageToken   string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	PageSize    int32  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *GetServiceDesiredStateIdHistoryReq) Reset() {
	*x = GetServiceDesiredStateIdHistoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceDesiredStateIdHistoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceDesiredStateIdHistoryReq) ProtoMessage() {}

func (x *GetServiceDesiredStateIdHistoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceDesiredStateIdHistoryReq.ProtoReflect.Descriptor instead.
func (*GetServiceDesiredStateIdHistoryReq) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{23}
}

func (x *GetServiceDesiredStateIdHistoryReq) GetApplication() string {
	if x != nil {
		return x.Application
	}
	return ""
}

func (x *GetServiceDesiredStateIdHistoryReq) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *GetServiceDesiredStateIdHistoryReq) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *GetServiceDesiredStateIdHistoryReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type GetServiceDesiredStateIdHistoryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DesiredStateIds []string `protobuf:"bytes,1,rep,name=desired_state_ids,json=desiredStateIds,proto3" json:"desired_state_ids,omitempty"`
	NextPageToken   string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *GetServiceDesiredStateIdHistoryResp) Reset() {
	*x = GetServiceDesiredStateIdHistoryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceDesiredStateIdHistoryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceDesiredStateIdHistoryResp) ProtoMessage() {}

func (x *GetServiceDesiredStateIdHistoryResp) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceDesiredStateIdHistoryResp.ProtoReflect.Descriptor instead.
func (*GetServiceDesiredStateIdHistoryResp) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{24}
}

func (x *GetServiceDesiredStateIdHistoryResp) GetDesiredStateIds() []string {
	if x != nil {
		return x.DesiredStateIds
	}
	return nil
}

func (x *GetServiceDesiredStateIdHistoryResp) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type ValidateDesiredStateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DesiredState         *model.State `protobuf:"bytes,1,opt,name=desired_state,json=desiredState,proto3" json:"desired_state,omitempty"`
	CompiledDesiredState *model.State `protobuf:"bytes,2,opt,name=compiled_desired_state,json=compiledDesiredState,proto3" json:"compiled_desired_state,omitempty"`
}

func (x *ValidateDesiredStateResp) Reset() {
	*x = ValidateDesiredStateResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateDesiredStateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateDesiredStateResp) ProtoMessage() {}

func (x *ValidateDesiredStateResp) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateDesiredStateResp.ProtoReflect.Descriptor instead.
func (*ValidateDesiredStateResp) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{25}
}

func (x *ValidateDesiredStateResp) GetDesiredState() *model.State {
	if x != nil {
		return x.DesiredState
	}
	return nil
}

func (x *ValidateDesiredStateResp) GetCompiledDesiredState() *model.State {
	if x != nil {
		return x.CompiledDesiredState
	}
	return nil
}

type SetManualApprovalReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DesiredStateId string `protobuf:"bytes,1,opt,name=desired_state_id,json=desiredStateId,proto3" json:"desired_state_id,omitempty"`
	// string application = 2 [(validate.rules).string.min_len = 1];
	// string service = 3 [(validate.rules).string.min_len = 1];
	// string release_channel = 4 [(validate.rules).string.min_len = 1];
	Topic          string                  `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	Reject         bool                    `protobuf:"varint,3,opt,name=reject,proto3" json:"reject,omitempty"`
	SignalType     string                  `protobuf:"bytes,5,opt,name=signal_type,json=signalType,proto3" json:"signal_type,omitempty"`
	Source         version.Source          `protobuf:"varint,6,opt,name=source,proto3,enum=prodvana.version.Source" json:"source,omitempty"`
	SourceMetadata *version.SourceMetadata `protobuf:"bytes,7,opt,name=source_metadata,json=sourceMetadata,proto3" json:"source_metadata,omitempty"`
}

func (x *SetManualApprovalReq) Reset() {
	*x = SetManualApprovalReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetManualApprovalReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetManualApprovalReq) ProtoMessage() {}

func (x *SetManualApprovalReq) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetManualApprovalReq.ProtoReflect.Descriptor instead.
func (*SetManualApprovalReq) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{26}
}

func (x *SetManualApprovalReq) GetDesiredStateId() string {
	if x != nil {
		return x.DesiredStateId
	}
	return ""
}

func (x *SetManualApprovalReq) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *SetManualApprovalReq) GetReject() bool {
	if x != nil {
		return x.Reject
	}
	return false
}

func (x *SetManualApprovalReq) GetSignalType() string {
	if x != nil {
		return x.SignalType
	}
	return ""
}

func (x *SetManualApprovalReq) GetSource() version.Source {
	if x != nil {
		return x.Source
	}
	return version.Source(0)
}

func (x *SetManualApprovalReq) GetSourceMetadata() *version.SourceMetadata {
	if x != nil {
		return x.SourceMetadata
	}
	return nil
}

type SetManualApprovalResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetManualApprovalResp) Reset() {
	*x = SetManualApprovalResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetManualApprovalResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetManualApprovalResp) ProtoMessage() {}

func (x *SetManualApprovalResp) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetManualApprovalResp.ProtoReflect.Descriptor instead.
func (*SetManualApprovalResp) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{27}
}

type PromoteDeliveryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DesiredStateId string                  `protobuf:"bytes,1,opt,name=desired_state_id,json=desiredStateId,proto3" json:"desired_state_id,omitempty"`
	Stage          int64                   `protobuf:"varint,2,opt,name=stage,proto3" json:"stage,omitempty"`
	Full           bool                    `protobuf:"varint,3,opt,name=full,proto3" json:"full,omitempty"`
	Reject         bool                    `protobuf:"varint,5,opt,name=reject,proto3" json:"reject,omitempty"`
	Source         string                  `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	CallSource     version.Source          `protobuf:"varint,6,opt,name=call_source,json=callSource,proto3,enum=prodvana.version.Source" json:"call_source,omitempty"`
	SourceMetadata *version.SourceMetadata `protobuf:"bytes,7,opt,name=source_metadata,json=sourceMetadata,proto3" json:"source_metadata,omitempty"`
}

func (x *PromoteDeliveryReq) Reset() {
	*x = PromoteDeliveryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PromoteDeliveryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromoteDeliveryReq) ProtoMessage() {}

func (x *PromoteDeliveryReq) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromoteDeliveryReq.ProtoReflect.Descriptor instead.
func (*PromoteDeliveryReq) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{28}
}

func (x *PromoteDeliveryReq) GetDesiredStateId() string {
	if x != nil {
		return x.DesiredStateId
	}
	return ""
}

func (x *PromoteDeliveryReq) GetStage() int64 {
	if x != nil {
		return x.Stage
	}
	return 0
}

func (x *PromoteDeliveryReq) GetFull() bool {
	if x != nil {
		return x.Full
	}
	return false
}

func (x *PromoteDeliveryReq) GetReject() bool {
	if x != nil {
		return x.Reject
	}
	return false
}

func (x *PromoteDeliveryReq) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *PromoteDeliveryReq) GetCallSource() version.Source {
	if x != nil {
		return x.CallSource
	}
	return version.Source(0)
}

func (x *PromoteDeliveryReq) GetSourceMetadata() *version.SourceMetadata {
	if x != nil {
		return x.SourceMetadata
	}
	return nil
}

type PromoteDeliveryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PromoteDeliveryResp) Reset() {
	*x = PromoteDeliveryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PromoteDeliveryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromoteDeliveryResp) ProtoMessage() {}

func (x *PromoteDeliveryResp) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromoteDeliveryResp.ProtoReflect.Descriptor instead.
func (*PromoteDeliveryResp) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{29}
}

type BypassProtectionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DesiredStateId string                  `protobuf:"bytes,1,opt,name=desired_state_id,json=desiredStateId,proto3" json:"desired_state_id,omitempty"`
	Source         string                  `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	CallSource     version.Source          `protobuf:"varint,3,opt,name=call_source,json=callSource,proto3,enum=prodvana.version.Source" json:"call_source,omitempty"`
	SourceMetadata *version.SourceMetadata `protobuf:"bytes,4,opt,name=source_metadata,json=sourceMetadata,proto3" json:"source_metadata,omitempty"`
}

func (x *BypassProtectionReq) Reset() {
	*x = BypassProtectionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BypassProtectionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BypassProtectionReq) ProtoMessage() {}

func (x *BypassProtectionReq) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BypassProtectionReq.ProtoReflect.Descriptor instead.
func (*BypassProtectionReq) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{30}
}

func (x *BypassProtectionReq) GetDesiredStateId() string {
	if x != nil {
		return x.DesiredStateId
	}
	return ""
}

func (x *BypassProtectionReq) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *BypassProtectionReq) GetCallSource() version.Source {
	if x != nil {
		return x.CallSource
	}
	return version.Source(0)
}

func (x *BypassProtectionReq) GetSourceMetadata() *version.SourceMetadata {
	if x != nil {
		return x.SourceMetadata
	}
	return nil
}

type BypassProtectionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BypassProtectionResp) Reset() {
	*x = BypassProtectionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BypassProtectionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BypassProtectionResp) ProtoMessage() {}

func (x *BypassProtectionResp) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BypassProtectionResp.ProtoReflect.Descriptor instead.
func (*BypassProtectionResp) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{31}
}

type BypassDependenciesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DesiredStateId string                  `protobuf:"bytes,1,opt,name=desired_state_id,json=desiredStateId,proto3" json:"desired_state_id,omitempty"`
	Source         string                  `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	CallSource     version.Source          `protobuf:"varint,3,opt,name=call_source,json=callSource,proto3,enum=prodvana.version.Source" json:"call_source,omitempty"`
	SourceMetadata *version.SourceMetadata `protobuf:"bytes,4,opt,name=source_metadata,json=sourceMetadata,proto3" json:"source_metadata,omitempty"`
}

func (x *BypassDependenciesReq) Reset() {
	*x = BypassDependenciesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BypassDependenciesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BypassDependenciesReq) ProtoMessage() {}

func (x *BypassDependenciesReq) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BypassDependenciesReq.ProtoReflect.Descriptor instead.
func (*BypassDependenciesReq) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{32}
}

func (x *BypassDependenciesReq) GetDesiredStateId() string {
	if x != nil {
		return x.DesiredStateId
	}
	return ""
}

func (x *BypassDependenciesReq) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *BypassDependenciesReq) GetCallSource() version.Source {
	if x != nil {
		return x.CallSource
	}
	return version.Source(0)
}

func (x *BypassDependenciesReq) GetSourceMetadata() *version.SourceMetadata {
	if x != nil {
		return x.SourceMetadata
	}
	return nil
}

type BypassDependenciesResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BypassDependenciesResp) Reset() {
	*x = BypassDependenciesResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BypassDependenciesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BypassDependenciesResp) ProtoMessage() {}

func (x *BypassDependenciesResp) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BypassDependenciesResp.ProtoReflect.Descriptor instead.
func (*BypassDependenciesResp) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{33}
}

type BypassConcurrencyLimitReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DesiredStateId string                  `protobuf:"bytes,1,opt,name=desired_state_id,json=desiredStateId,proto3" json:"desired_state_id,omitempty"`
	Source         string                  `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	CallSource     version.Source          `protobuf:"varint,3,opt,name=call_source,json=callSource,proto3,enum=prodvana.version.Source" json:"call_source,omitempty"`
	SourceMetadata *version.SourceMetadata `protobuf:"bytes,4,opt,name=source_metadata,json=sourceMetadata,proto3" json:"source_metadata,omitempty"`
}

func (x *BypassConcurrencyLimitReq) Reset() {
	*x = BypassConcurrencyLimitReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BypassConcurrencyLimitReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BypassConcurrencyLimitReq) ProtoMessage() {}

func (x *BypassConcurrencyLimitReq) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BypassConcurrencyLimitReq.ProtoReflect.Descriptor instead.
func (*BypassConcurrencyLimitReq) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{34}
}

func (x *BypassConcurrencyLimitReq) GetDesiredStateId() string {
	if x != nil {
		return x.DesiredStateId
	}
	return ""
}

func (x *BypassConcurrencyLimitReq) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *BypassConcurrencyLimitReq) GetCallSource() version.Source {
	if x != nil {
		return x.CallSource
	}
	return version.Source(0)
}

func (x *BypassConcurrencyLimitReq) GetSourceMetadata() *version.SourceMetadata {
	if x != nil {
		return x.SourceMetadata
	}
	return nil
}

type BypassConcurrencyLimitResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BypassConcurrencyLimitResp) Reset() {
	*x = BypassConcurrencyLimitResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BypassConcurrencyLimitResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BypassConcurrencyLimitResp) ProtoMessage() {}

func (x *BypassConcurrencyLimitResp) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BypassConcurrencyLimitResp.ProtoReflect.Descriptor instead.
func (*BypassConcurrencyLimitResp) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{35}
}

type ListMaestroReleasesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityId   *model.Identifier `protobuf:"bytes,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	Descending bool              `protobuf:"varint,5,opt,name=descending,proto3" json:"descending,omitempty"`
	// optional, if not set:
	// - with descending=false, return releases starting from the oldest unfinished release.
	// - with descending=true, return releases starting from the newest release.
	StartingReleaseId string `protobuf:"bytes,2,opt,name=starting_release_id,json=startingReleaseId,proto3" json:"starting_release_id,omitempty"` // inclusive
	PageToken         string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	PageSize          int32  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *ListMaestroReleasesReq) Reset() {
	*x = ListMaestroReleasesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMaestroReleasesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMaestroReleasesReq) ProtoMessage() {}

func (x *ListMaestroReleasesReq) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMaestroReleasesReq.ProtoReflect.Descriptor instead.
func (*ListMaestroReleasesReq) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{36}
}

func (x *ListMaestroReleasesReq) GetEntityId() *model.Identifier {
	if x != nil {
		return x.EntityId
	}
	return nil
}

func (x *ListMaestroReleasesReq) GetDescending() bool {
	if x != nil {
		return x.Descending
	}
	return false
}

func (x *ListMaestroReleasesReq) GetStartingReleaseId() string {
	if x != nil {
		return x.StartingReleaseId
	}
	return ""
}

func (x *ListMaestroReleasesReq) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListMaestroReleasesReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ListMaestroReleasesResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaestroReleases []*maestro.MaestroRelease `protobuf:"bytes,1,rep,name=maestro_releases,json=maestroReleases,proto3" json:"maestro_releases,omitempty"`
	NextPageToken   string                    `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListMaestroReleasesResp) Reset() {
	*x = ListMaestroReleasesResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMaestroReleasesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMaestroReleasesResp) ProtoMessage() {}

func (x *ListMaestroReleasesResp) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMaestroReleasesResp.ProtoReflect.Descriptor instead.
func (*ListMaestroReleasesResp) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{37}
}

func (x *ListMaestroReleasesResp) GetMaestroReleases() []*maestro.MaestroRelease {
	if x != nil {
		return x.MaestroReleases
	}
	return nil
}

func (x *ListMaestroReleasesResp) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GetMaestroReleaseReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReleaseId string `protobuf:"bytes,1,opt,name=release_id,json=releaseId,proto3" json:"release_id,omitempty"`
}

func (x *GetMaestroReleaseReq) Reset() {
	*x = GetMaestroReleaseReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMaestroReleaseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMaestroReleaseReq) ProtoMessage() {}

func (x *GetMaestroReleaseReq) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMaestroReleaseReq.ProtoReflect.Descriptor instead.
func (*GetMaestroReleaseReq) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{38}
}

func (x *GetMaestroReleaseReq) GetReleaseId() string {
	if x != nil {
		return x.ReleaseId
	}
	return ""
}

type GetMaestroReleaseResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaestroRelease *maestro.MaestroRelease `protobuf:"bytes,1,opt,name=maestro_release,json=maestroRelease,proto3" json:"maestro_release,omitempty"`
}

func (x *GetMaestroReleaseResp) Reset() {
	*x = GetMaestroReleaseResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMaestroReleaseResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMaestroReleaseResp) ProtoMessage() {}

func (x *GetMaestroReleaseResp) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMaestroReleaseResp.ProtoReflect.Descriptor instead.
func (*GetMaestroReleaseResp) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{39}
}

func (x *GetMaestroReleaseResp) GetMaestroRelease() *maestro.MaestroRelease {
	if x != nil {
		return x.MaestroRelease
	}
	return nil
}

type ListCombinedReleasesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityId   *model.Identifier `protobuf:"bytes,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	Descending bool              `protobuf:"varint,4,opt,name=descending,proto3" json:"descending,omitempty"`
	PageToken  string            `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	PageSize   int32             `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *ListCombinedReleasesReq) Reset() {
	*x = ListCombinedReleasesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCombinedReleasesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCombinedReleasesReq) ProtoMessage() {}

func (x *ListCombinedReleasesReq) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCombinedReleasesReq.ProtoReflect.Descriptor instead.
func (*ListCombinedReleasesReq) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{40}
}

func (x *ListCombinedReleasesReq) GetEntityId() *model.Identifier {
	if x != nil {
		return x.EntityId
	}
	return nil
}

func (x *ListCombinedReleasesReq) GetDescending() bool {
	if x != nil {
		return x.Descending
	}
	return false
}

func (x *ListCombinedReleasesReq) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListCombinedReleasesReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ListServiceCombinedReleasesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Application string `protobuf:"bytes,1,opt,name=application,proto3" json:"application,omitempty"`
	Service     string `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
	Descending  bool   `protobuf:"varint,3,opt,name=descending,proto3" json:"descending,omitempty"`
	PageToken   string `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	PageSize    int32  `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *ListServiceCombinedReleasesReq) Reset() {
	*x = ListServiceCombinedReleasesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListServiceCombinedReleasesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListServiceCombinedReleasesReq) ProtoMessage() {}

func (x *ListServiceCombinedReleasesReq) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListServiceCombinedReleasesReq.ProtoReflect.Descriptor instead.
func (*ListServiceCombinedReleasesReq) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{41}
}

func (x *ListServiceCombinedReleasesReq) GetApplication() string {
	if x != nil {
		return x.Application
	}
	return ""
}

func (x *ListServiceCombinedReleasesReq) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *ListServiceCombinedReleasesReq) GetDescending() bool {
	if x != nil {
		return x.Descending
	}
	return false
}

func (x *ListServiceCombinedReleasesReq) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListServiceCombinedReleasesReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ListCombinedReleasesResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Releases      []*ListCombinedReleasesResp_Release `protobuf:"bytes,1,rep,name=releases,proto3" json:"releases,omitempty"`
	NextPageToken string                              `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListCombinedReleasesResp) Reset() {
	*x = ListCombinedReleasesResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCombinedReleasesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCombinedReleasesResp) ProtoMessage() {}

func (x *ListCombinedReleasesResp) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCombinedReleasesResp.ProtoReflect.Descriptor instead.
func (*ListCombinedReleasesResp) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{42}
}

func (x *ListCombinedReleasesResp) GetReleases() []*ListCombinedReleasesResp_Release {
	if x != nil {
		return x.Releases
	}
	return nil
}

func (x *ListCombinedReleasesResp) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GetLatestCombinedReleaseDesiredStateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityId *model.Identifier `protobuf:"bytes,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
}

func (x *GetLatestCombinedReleaseDesiredStateReq) Reset() {
	*x = GetLatestCombinedReleaseDesiredStateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestCombinedReleaseDesiredStateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestCombinedReleaseDesiredStateReq) ProtoMessage() {}

func (x *GetLatestCombinedReleaseDesiredStateReq) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestCombinedReleaseDesiredStateReq.ProtoReflect.Descriptor instead.
func (*GetLatestCombinedReleaseDesiredStateReq) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{43}
}

func (x *GetLatestCombinedReleaseDesiredStateReq) GetEntityId() *model.Identifier {
	if x != nil {
		return x.EntityId
	}
	return nil
}

type GetServiceLatestCombinedReleaseDesiredStateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Application string `protobuf:"bytes,1,opt,name=application,proto3" json:"application,omitempty"`
	Service     string `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
}

func (x *GetServiceLatestCombinedReleaseDesiredStateReq) Reset() {
	*x = GetServiceLatestCombinedReleaseDesiredStateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceLatestCombinedReleaseDesiredStateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceLatestCombinedReleaseDesiredStateReq) ProtoMessage() {}

func (x *GetServiceLatestCombinedReleaseDesiredStateReq) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceLatestCombinedReleaseDesiredStateReq.ProtoReflect.Descriptor instead.
func (*GetServiceLatestCombinedReleaseDesiredStateReq) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{44}
}

func (x *GetServiceLatestCombinedReleaseDesiredStateReq) GetApplication() string {
	if x != nil {
		return x.Application
	}
	return ""
}

func (x *GetServiceLatestCombinedReleaseDesiredStateReq) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

type GetLatestCombinedReleaseDesiredStateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputDesiredState       *model.State                   `protobuf:"bytes,1,opt,name=input_desired_state,json=inputDesiredState,proto3" json:"input_desired_state,omitempty"`
	CompiledDesiredState    *model.State                   `protobuf:"bytes,2,opt,name=compiled_desired_state,json=compiledDesiredState,proto3" json:"compiled_desired_state,omitempty"`
	SetDesiredStateMetadata *model.SetDesiredStateMetadata `protobuf:"bytes,3,opt,name=set_desired_state_metadata,json=setDesiredStateMetadata,proto3" json:"set_desired_state_metadata,omitempty"`
	CreationTimestamp       *timestamppb.Timestamp         `protobuf:"bytes,4,opt,name=creation_timestamp,json=creationTimestamp,proto3" json:"creation_timestamp,omitempty"`
	// who set the desired state
	Source         version.Source          `protobuf:"varint,5,opt,name=source,proto3,enum=prodvana.version.Source" json:"source,omitempty"`
	SourceMetadata *version.SourceMetadata `protobuf:"bytes,6,opt,name=source_metadata,json=sourceMetadata,proto3" json:"source_metadata,omitempty"`
}

func (x *GetLatestCombinedReleaseDesiredStateResp) Reset() {
	*x = GetLatestCombinedReleaseDesiredStateResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestCombinedReleaseDesiredStateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestCombinedReleaseDesiredStateResp) ProtoMessage() {}

func (x *GetLatestCombinedReleaseDesiredStateResp) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestCombinedReleaseDesiredStateResp.ProtoReflect.Descriptor instead.
func (*GetLatestCombinedReleaseDesiredStateResp) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{45}
}

func (x *GetLatestCombinedReleaseDesiredStateResp) GetInputDesiredState() *model.State {
	if x != nil {
		return x.InputDesiredState
	}
	return nil
}

func (x *GetLatestCombinedReleaseDesiredStateResp) GetCompiledDesiredState() *model.State {
	if x != nil {
		return x.CompiledDesiredState
	}
	return nil
}

func (x *GetLatestCombinedReleaseDesiredStateResp) GetSetDesiredStateMetadata() *model.SetDesiredStateMetadata {
	if x != nil {
		return x.SetDesiredStateMetadata
	}
	return nil
}

func (x *GetLatestCombinedReleaseDesiredStateResp) GetCreationTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTimestamp
	}
	return nil
}

func (x *GetLatestCombinedReleaseDesiredStateResp) GetSource() version.Source {
	if x != nil {
		return x.Source
	}
	return version.Source(0)
}

func (x *GetLatestCombinedReleaseDesiredStateResp) GetSourceMetadata() *version.SourceMetadata {
	if x != nil {
		return x.SourceMetadata
	}
	return nil
}

type GetHistoricalEntityStatsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityId *model.Identifier `protobuf:"bytes,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
}

func (x *GetHistoricalEntityStatsReq) Reset() {
	*x = GetHistoricalEntityStatsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHistoricalEntityStatsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHistoricalEntityStatsReq) ProtoMessage() {}

func (x *GetHistoricalEntityStatsReq) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHistoricalEntityStatsReq.ProtoReflect.Descriptor instead.
func (*GetHistoricalEntityStatsReq) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{46}
}

func (x *GetHistoricalEntityStatsReq) GetEntityId() *model.Identifier {
	if x != nil {
		return x.EntityId
	}
	return nil
}

type HistoricalEntityStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unknown = unset
	AvgDeploymentDuration *durationpb.Duration `protobuf:"bytes,1,opt,name=avg_deployment_duration,json=avgDeploymentDuration,proto3" json:"avg_deployment_duration,omitempty"`
	P95DeploymentDuration *durationpb.Duration `protobuf:"bytes,2,opt,name=p95_deployment_duration,json=p95DeploymentDuration,proto3" json:"p95_deployment_duration,omitempty"`
}

func (x *HistoricalEntityStats) Reset() {
	*x = HistoricalEntityStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoricalEntityStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoricalEntityStats) ProtoMessage() {}

func (x *HistoricalEntityStats) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoricalEntityStats.ProtoReflect.Descriptor instead.
func (*HistoricalEntityStats) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{47}
}

func (x *HistoricalEntityStats) GetAvgDeploymentDuration() *durationpb.Duration {
	if x != nil {
		return x.AvgDeploymentDuration
	}
	return nil
}

func (x *HistoricalEntityStats) GetP95DeploymentDuration() *durationpb.Duration {
	if x != nil {
		return x.P95DeploymentDuration
	}
	return nil
}

type GetHistoricalEntityStatsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stats *HistoricalEntityStats `protobuf:"bytes,1,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *GetHistoricalEntityStatsResp) Reset() {
	*x = GetHistoricalEntityStatsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHistoricalEntityStatsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHistoricalEntityStatsResp) ProtoMessage() {}

func (x *GetHistoricalEntityStatsResp) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHistoricalEntityStatsResp.ProtoReflect.Descriptor instead.
func (*GetHistoricalEntityStatsResp) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{48}
}

func (x *GetHistoricalEntityStatsResp) GetStats() *HistoricalEntityStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

type GetDesiredStateGraphReq_LiteEntitiesFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// anything that matches this filter will not have desired, target, or current states returned, nor will it have precondition statuses.
	// this is useful for reducing the size of the response when the caller is not interested in the detailed states of certain entities.
	Types []model.Type `protobuf:"varint,1,rep,packed,name=types,proto3,enum=prodvana.desired_state.model.Type" json:"types,omitempty"`
}

func (x *GetDesiredStateGraphReq_LiteEntitiesFilter) Reset() {
	*x = GetDesiredStateGraphReq_LiteEntitiesFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDesiredStateGraphReq_LiteEntitiesFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDesiredStateGraphReq_LiteEntitiesFilter) ProtoMessage() {}

func (x *GetDesiredStateGraphReq_LiteEntitiesFilter) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDesiredStateGraphReq_LiteEntitiesFilter.ProtoReflect.Descriptor instead.
func (*GetDesiredStateGraphReq_LiteEntitiesFilter) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{18, 0}
}

func (x *GetDesiredStateGraphReq_LiteEntitiesFilter) GetTypes() []model.Type {
	if x != nil {
		return x.Types
	}
	return nil
}

type GetDesiredStateGraphReq_QueryByService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Application string `protobuf:"bytes,1,opt,name=application,proto3" json:"application,omitempty"`
	Service     string `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
}

func (x *GetDesiredStateGraphReq_QueryByService) Reset() {
	*x = GetDesiredStateGraphReq_QueryByService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDesiredStateGraphReq_QueryByService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDesiredStateGraphReq_QueryByService) ProtoMessage() {}

func (x *GetDesiredStateGraphReq_QueryByService) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDesiredStateGraphReq_QueryByService.ProtoReflect.Descriptor instead.
func (*GetDesiredStateGraphReq_QueryByService) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{18, 1}
}

func (x *GetDesiredStateGraphReq_QueryByService) GetApplication() string {
	if x != nil {
		return x.Application
	}
	return ""
}

func (x *GetDesiredStateGraphReq_QueryByService) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

type GetDesiredStateGraphReq_DepthOverrideByStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status model.Status `protobuf:"varint,1,opt,name=status,proto3,enum=prodvana.desired_state.model.Status" json:"status,omitempty"`
	Depth  int32        `protobuf:"varint,2,opt,name=depth,proto3" json:"depth,omitempty"`
}

func (x *GetDesiredStateGraphReq_DepthOverrideByStatus) Reset() {
	*x = GetDesiredStateGraphReq_DepthOverrideByStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDesiredStateGraphReq_DepthOverrideByStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDesiredStateGraphReq_DepthOverrideByStatus) ProtoMessage() {}

func (x *GetDesiredStateGraphReq_DepthOverrideByStatus) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDesiredStateGraphReq_DepthOverrideByStatus.ProtoReflect.Descriptor instead.
func (*GetDesiredStateGraphReq_DepthOverrideByStatus) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{18, 2}
}

func (x *GetDesiredStateGraphReq_DepthOverrideByStatus) GetStatus() model.Status {
	if x != nil {
		return x.Status
	}
	return model.Status(0)
}

func (x *GetDesiredStateGraphReq_DepthOverrideByStatus) GetDepth() int32 {
	if x != nil {
		return x.Depth
	}
	return 0
}

type ListCombinedReleasesResp_Release struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ReleaseOneof:
	//
	//	*ListCombinedReleasesResp_Release_DesiredStateId
	//	*ListCombinedReleasesResp_Release_ReleaseId
	ReleaseOneof      isListCombinedReleasesResp_Release_ReleaseOneof `protobuf_oneof:"release_oneof"`
	CreationTimestamp *timestamppb.Timestamp                          `protobuf:"bytes,3,opt,name=creation_timestamp,json=creationTimestamp,proto3" json:"creation_timestamp,omitempty"`
}

func (x *ListCombinedReleasesResp_Release) Reset() {
	*x = ListCombinedReleasesResp_Release{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCombinedReleasesResp_Release) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCombinedReleasesResp_Release) ProtoMessage() {}

func (x *ListCombinedReleasesResp_Release) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCombinedReleasesResp_Release.ProtoReflect.Descriptor instead.
func (*ListCombinedReleasesResp_Release) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{42, 0}
}

func (m *ListCombinedReleasesResp_Release) GetReleaseOneof() isListCombinedReleasesResp_Release_ReleaseOneof {
	if m != nil {
		return m.ReleaseOneof
	}
	return nil
}

func (x *ListCombinedReleasesResp_Release) GetDesiredStateId() string {
	if x, ok := x.GetReleaseOneof().(*ListCombinedReleasesResp_Release_DesiredStateId); ok {
		return x.DesiredStateId
	}
	return ""
}

func (x *ListCombinedReleasesResp_Release) GetReleaseId() string {
	if x, ok := x.GetReleaseOneof().(*ListCombinedReleasesResp_Release_ReleaseId); ok {
		return x.ReleaseId
	}
	return ""
}

func (x *ListCombinedReleasesResp_Release) GetCreationTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTimestamp
	}
	return nil
}

type isListCombinedReleasesResp_Release_ReleaseOneof interface {
	isListCombinedReleasesResp_Release_ReleaseOneof()
}

type ListCombinedReleasesResp_Release_DesiredStateId struct {
	DesiredStateId string `protobuf:"bytes,1,opt,name=desired_state_id,json=desiredStateId,proto3,oneof"`
}

type ListCombinedReleasesResp_Release_ReleaseId struct {
	ReleaseId string `protobuf:"bytes,2,opt,name=release_id,json=releaseId,proto3,oneof"`
}

func (*ListCombinedReleasesResp_Release_DesiredStateId) isListCombinedReleasesResp_Release_ReleaseOneof() {
}

func (*ListCombinedReleasesResp_Release_ReleaseId) isListCombinedReleasesResp_Release_ReleaseOneof() {
}

var File_prodvana_desired_state_manager_proto protoreflect.FileDescriptor

var file_prodvana_desired_state_manager_proto_rawDesc = []byte{
	0x0a, 0x24, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x64, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61,
	0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x70,
	0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x74, 0x61,
	0x73, 0x6b, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61,
	0x2f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x2f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x64, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x65, 0x73, 0x74, 0x72, 0x6f,
	0x2f, 0x6d, 0x61, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30,
	0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x64, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x29, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x64, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x70, 0x72, 0x6f,
	0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x26, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xfb, 0x03, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x52, 0x0a, 0x0d, 0x64, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x0c, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x4f, 0x0a, 0x24, 0x62, 0x79,
	0x70, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x21, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73,
	0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x64,
	0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x49, 0x0a,
	0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e,
	0x61, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x1d, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x5f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x19, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x74, 0x44, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x65, 0x0a, 0x17, 0x6d, 0x61,
	0x65, 0x73, 0x74, 0x72, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x61, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x2e, 0x4d, 0x61, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x15, 0x6d, 0x61, 0x65, 0x73,
	0x74, 0x72, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x22, 0xb5, 0x03, 0x0a, 0x17, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x52, 0x0a,
	0x0d, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x4f, 0x0a,
	0x24, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x21, 0x62, 0x79, 0x70,
	0x61, 0x73, 0x73, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x41, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x69,
	0x0a, 0x18, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x6e, 0x6c,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x45, 0x78,
	0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x3c, 0x0a, 0x1a, 0x64,
	0x69, 0x73, 0x72, 0x65, 0x67, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x18, 0x64, 0x69, 0x73, 0x72, 0x65, 0x67, 0x61, 0x72, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x6e, 0x0a, 0x13, 0x53, 0x65, 0x74,
	0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x2a, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0a,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x42, 0x0a, 0x0a,
	0x08, 0x69, 0x64, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x22, 0x90, 0x01, 0x0a, 0x16, 0x50, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x47, 0x72, 0x61, 0x70, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x4c, 0x0a, 0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x22, 0xb6, 0x01, 0x0a,
	0x2b, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x6e,
	0x63, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x0b,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x66, 0x61,
	0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x66,
	0x61, 0x73, 0x74, 0x4e, 0x6f, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x76, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45,
	0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x60, 0x0a, 0x13, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x78,
	0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x52, 0x0a,
	0x09, 0x44, 0x65, 0x62, 0x75, 0x67, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x45, 0x0a, 0x0a, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x4c, 0x6f, 0x67, 0x52, 0x09, 0x64, 0x65, 0x62, 0x75, 0x67, 0x4c, 0x6f, 0x67,
	0x73, 0x22, 0xa1, 0x02, 0x0a, 0x16, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74,
	0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x59, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c,
	0x65, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e,
	0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x14, 0x63, 0x6f, 0x6d,
	0x70, 0x69, 0x6c, 0x65, 0x64, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x40, 0x0a, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e,
	0x61, 0x2e, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x40, 0x0a, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2e, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x89, 0x16, 0x0a, 0x13, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x4c, 0x0a,
	0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x0b,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x47, 0x72, 0x61, 0x70, 0x68, 0x12, 0x49, 0x0a, 0x12, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x4e, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x49, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11,
	0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x53, 0x0a, 0x13, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x11, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x48, 0x0a, 0x0d, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x4a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4b, 0x0a, 0x0f,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61,
	0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74,
	0x53, 0x65, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61,
	0x6e, 0x61, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x0f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x69, 0x0a, 0x19, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61,
	0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x16, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x53, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x72, 0x0a, 0x1a, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x17, 0x73, 0x65, 0x74, 0x44,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x55, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61,
	0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x44,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x7a, 0x0a, 0x15, 0x70, 0x72,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x14, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x74, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x59, 0x0a, 0x0a,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x4c, 0x6f, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x74, 0x0a, 0x13, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x7b, 0x0a,
	0x16, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x12, 0x7e, 0x0a, 0x17, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x65, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x12, 0x7e, 0x0a, 0x17, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x1a, 0x61, 0x0a, 0x0d, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3a, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x75, 0x0a,
	0x19, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x42, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x71, 0x0a, 0x17, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x78,
	0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5f, 0x0a, 0x0e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x4c, 0x6f, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x76, 0x0a, 0x17, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x45, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x63, 0x0a, 0x19, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x64, 0x0a, 0x1a, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x64, 0x0a, 0x1a, 0x4c,
	0x61, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x8d, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x6e,
	0x6f, 0x5f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x66, 0x61, 0x73, 0x74, 0x4e,
	0x6f, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x22, 0x6e, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x45, 0x0a, 0x07, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x22, 0x75, 0x0a, 0x2c, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x45, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52,
	0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x6f, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x67, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x0b, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x20, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x67, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6a,
	0x0a, 0x17, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x15, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x22, 0xe7, 0x01, 0x0a, 0x20, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12,
	0x29, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x07, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x66, 0x61, 0x73,
	0x74, 0x5f, 0x6e, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x66, 0x61,
	0x73, 0x74, 0x4e, 0x6f, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x22, 0x9f, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x52, 0x0a, 0x0e, 0x64, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52,
	0x0d, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x26,
	0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x47, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x10,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x0e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x22,
	0xf6, 0x03, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x48, 0x0a, 0x0d, 0x64, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x59, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x14, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64,
	0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x72, 0x0a, 0x1a,
	0x73, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x53, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x17, 0x73, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x49, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x30, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x49, 0x0a,
	0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e,
	0x61, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe4, 0x09, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x47, 0x72, 0x61, 0x70,
	0x68, 0x52, 0x65, 0x71, 0x12, 0x33, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x6a, 0x0a, 0x10, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x47, 0x72, 0x61, 0x70,
	0x68, 0x52, 0x65, 0x71, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x5c, 0x0a, 0x14, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x13, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x0a,
	0x15, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x12, 0x80, 0x01, 0x0a, 0x19, 0x64, 0x65, 0x70, 0x74,
	0x68, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x71, 0x2e, 0x44, 0x65, 0x70,
	0x74, 0x68, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x42, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x16, 0x64, 0x65, 0x70, 0x74, 0x68, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x73, 0x42, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x47, 0x0a, 0x20, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x44, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x73, 0x12, 0x43, 0x0a, 0x1e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x64,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x64, 0x0a, 0x17, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x15, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x74, 0x0a, 0x14, 0x6c, 0x69, 0x74, 0x65, 0x5f,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61,
	0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x47, 0x72,
	0x61, 0x70, 0x68, 0x52, 0x65, 0x71, 0x2e, 0x4c, 0x69, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x12, 0x6c, 0x69, 0x74, 0x65, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x4e, 0x0a,
	0x12, 0x4c, 0x69, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x1a, 0x5e, 0x0a,
	0x0e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x29, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x07, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x6b, 0x0a,
	0x15, 0x44, 0x65, 0x70, 0x74, 0x68, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x42, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e,
	0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x42, 0x07, 0x0a, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0xfe, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x12, 0x49, 0x0a, 0x12, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x4e, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x49, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x72,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x22, 0x97, 0x03, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4c, 0x0a,
	0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x0b,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x47, 0x72, 0x61, 0x70, 0x68, 0x12, 0x69, 0x0a, 0x19, 0x70,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53,
	0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x16,
	0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4e, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x12, 0x72, 0x0a, 0x1a, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x17, 0x73, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x71, 0x0a, 0x21, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x44, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12,
	0x29, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x07, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0xb9, 0x01,
	0x0a, 0x22, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x69,
	0x0a, 0x19, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x53, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x16, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x44, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xae, 0x01, 0x0a, 0x22, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x12, 0x29, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x79, 0x0a, 0x23, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xbf, 0x01, 0x0a, 0x18, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x48, 0x0a, 0x0d, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x59, 0x0a, 0x16,
	0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x14, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x44, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xa4, 0x02, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x4d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71,
	0x12, 0x31, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x05, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x49, 0x0a,
	0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e,
	0x61, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x22, 0x17,
	0x0a, 0x15, 0x53, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0xb0, 0x02, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x31,
	0x0a, 0x10, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x75, 0x6c, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x66, 0x75, 0x6c, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x1f, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x76, 0x61, 0x6e, 0x61, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x49, 0x0a, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x15, 0x0a, 0x13, 0x50, 0x72,
	0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x22, 0xef, 0x01, 0x0a, 0x13, 0x42, 0x79, 0x70, 0x61, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x10, 0x64, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x64, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x39, 0x0a,
	0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0a, 0x63, 0x61,
	0x6c, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x0f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x16, 0x0a, 0x14, 0x42, 0x79, 0x70, 0x61, 0x73, 0x73, 0x50, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0xf1, 0x01, 0x0a, 0x15,
	0x42, 0x79, 0x70, 0x61, 0x73, 0x73, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x63, 0x61, 0x6c,
	0x6c, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x18, 0x0a, 0x16, 0x42, 0x79, 0x70, 0x61, 0x73, 0x73, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0xf5, 0x01, 0x0a, 0x19, 0x42, 0x79,
	0x70, 0x61, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x63,
	0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0a, 0x63, 0x61, 0x6c, 0x6c,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x1c, 0x0a, 0x1a, 0x42, 0x79, 0x70, 0x61, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22,
	0xf5, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x4f, 0x0a, 0x09, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64,
	0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x13, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x61, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x59, 0x0a, 0x10, 0x6d, 0x61, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x5f, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x61, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x2e, 0x4d,
	0x61, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x0f, 0x6d,
	0x61, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0x26,
	0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x3e, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x12, 0x26,
	0x0a, 0x0a, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x22, 0x70, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x57, 0x0a, 0x0f, 0x6d, 0x61, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x6d, 0x61, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x2e, 0x4d, 0x61, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x0e, 0x6d, 0x61, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x22, 0xc6, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x4f, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61,
	0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x65, 0x73, 0x63, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x22, 0xca, 0x01, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x21, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xcd,
	0x02, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x54, 0x0a, 0x08, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x62, 0x69,
	0x6e, 0x65, 0x64, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x2e,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0xb2, 0x01, 0x0a, 0x07, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0a, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x49, 0x64, 0x12, 0x49, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0f, 0x0a,
	0x0d, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x22, 0x7a,
	0x0a, 0x27, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x62, 0x69,
	0x6e, 0x65, 0x64, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x4f, 0x0a, 0x09, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x7e, 0x0a, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6f,
	0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x0b,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x96, 0x04, 0x0a, 0x28, 0x47,
	0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x53, 0x0a, 0x13, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x5f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x11, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x59, 0x0a, 0x16,
	0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x14, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x44, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x72, 0x0a, 0x1a, 0x73, 0x65, 0x74, 0x5f, 0x64,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x17, 0x73, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x49, 0x0a, 0x12, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e,
	0x61, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x0f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x6e, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x69, 0x63, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x12, 0x4f, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61,
	0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x22, 0xbd, 0x01, 0x0a, 0x15, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63,
	0x61, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x51, 0x0a,
	0x17, 0x61, 0x76, 0x67, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x61, 0x76, 0x67, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x51, 0x0a, 0x17, 0x70, 0x39, 0x35, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x70, 0x39,
	0x35, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x63, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x69, 0x63, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x43, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x32, 0xad, 0x24, 0x0a, 0x13, 0x44, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x12, 0x89, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x65,
	0x74, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x1d, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x17, 0x3a, 0x01, 0x2a, 0x22, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x97, 0x01, 0x0a,
	0x12, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x47, 0x72,
	0x61, 0x70, 0x68, 0x12, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x65, 0x74,
	0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x3a, 0x01, 0x2a, 0x22, 0x1a, 0x2f, 0x76, 0x31, 0x2f,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x89, 0x02, 0x0a, 0x28, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x12, 0x43, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x44, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65,
	0x6e, 0x63, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x22, 0x52,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4c, 0x12, 0x4a, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3d, 0x2a, 0x7d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x3d, 0x2a, 0x7d, 0x2f, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0xee, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x39, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61,
	0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x44,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x1a, 0x3a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x55, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x4f, 0x12, 0x4d, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x3d, 0x2a, 0x7d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f,
	0x7b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x3d, 0x2a, 0x7d, 0x2f, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x69, 0x64, 0x12, 0xf2, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x3a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61,
	0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x1a, 0x3b, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x49, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x56, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x50, 0x12, 0x4e, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3d, 0x2a, 0x7d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x3d, 0x2a, 0x7d, 0x2f,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64,
	0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0xe0, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x67, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x37, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x61,
	0x73, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x38, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x67, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x4c, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x46, 0x12, 0x44, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x3d, 0x2a, 0x7d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x3d, 0x2a, 0x7d, 0x2f, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x64, 0x12, 0xe2, 0x01, 0x0a, 0x1d,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x38, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x39, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61,
	0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x4c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x46, 0x12, 0x44, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3d, 0x2a, 0x7d, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x3d, 0x2a,
	0x7d, 0x2f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x12, 0x9b, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x2f, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x29, 0x12, 0x27, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x7b, 0x64, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x12, 0x9e,
	0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x12, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61,
	0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x73, 0x70, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1d, 0x3a, 0x01, 0x2a, 0x22, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x12,
	0xd2, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61,
	0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x3d, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x65,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x22, 0x37, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x31, 0x12, 0x2f, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x7b, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x2f, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0xa1, 0x01, 0x0a, 0x14, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x30,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a, 0x22, 0x1b, 0x2f, 0x76, 0x31,
	0x2f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0xa8, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x74,
	0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x2c,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x36, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x30, 0x3a, 0x01, 0x2a, 0x22, 0x2b, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x9a, 0x01, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x12, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61,
	0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x6f,
	0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x22, 0x23, 0x2f, 0x76, 0x31,
	0x2f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x2f,
	0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x12, 0x9e, 0x01, 0x0a, 0x10, 0x42, 0x79, 0x70, 0x61, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61,
	0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x42,
	0x79, 0x70, 0x61, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x42, 0x79, 0x70, 0x61,
	0x73, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x01, 0x2a, 0x22, 0x24, 0x2f, 0x76, 0x31,
	0x2f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x2f,
	0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0xb7, 0x01, 0x0a, 0x16, 0x42, 0x79, 0x70, 0x61, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x31, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x42, 0x79, 0x70, 0x61, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x42, 0x79, 0x70, 0x61, 0x73, 0x73, 0x43,
	0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x01, 0x2a, 0x22, 0x2b,
	0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x2f, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0xa6, 0x01, 0x0a, 0x12,
	0x42, 0x79, 0x70, 0x61, 0x73, 0x73, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x12, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x42, 0x79, 0x70, 0x61,
	0x73, 0x73, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x42, 0x79, 0x70, 0x61, 0x73,
	0x73, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f, 0x76,
	0x31, 0x2f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x2f, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e,
	0x63, 0x69, 0x65, 0x73, 0x12, 0xa3, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0x2e, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2f, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x2b, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x6d, 0x61, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0xac, 0x01, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x4d, 0x61, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x12, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x2d,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x65, 0x73, 0x74,
	0x72, 0x6f, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x3a, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x34, 0x12, 0x32, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x6d, 0x61, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x12, 0xa7, 0x01, 0x0a, 0x14, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x73, 0x12, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f,
	0x76, 0x31, 0x2f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x73, 0x12, 0xd8, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x73, 0x12, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x30, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65,
	0x64, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x4f, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x49, 0x12, 0x47, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x3d, 0x2a, 0x7d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x3d, 0x2a, 0x7d, 0x2f, 0x63, 0x6f, 0x6d,
	0x62, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0xec,
	0x01, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x62,
	0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61,
	0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e,
	0x65, 0x64, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x40, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x62, 0x69,
	0x6e, 0x65, 0x64, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x41, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x3b, 0x12, 0x39, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x5f,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x9d, 0x02,
	0x0a, 0x2b, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x46, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x40, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61,
	0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5e, 0x12,
	0x5c, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x7b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3d, 0x2a,
	0x7d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x3d, 0x2a, 0x7d, 0x2f, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x5f,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x9b, 0x01,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x44, 0x65, 0x62, 0x75, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2e, 0x44, 0x75, 0x6d, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x12, 0x2d, 0x2f, 0x76,
	0x31, 0x2f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x2f, 0x7b, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x2f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0xaa, 0x01, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x34, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x69, 0x63, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x76, 0x31,
	0x2f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x42, 0x52, 0x5a, 0x50, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f,
	0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f,
	0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2d, 0x73, 0x64, 0x6b, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x64,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_prodvana_desired_state_manager_proto_rawDescOnce sync.Once
	file_prodvana_desired_state_manager_proto_rawDescData = file_prodvana_desired_state_manager_proto_rawDesc
)

func file_prodvana_desired_state_manager_proto_rawDescGZIP() []byte {
	file_prodvana_desired_state_manager_proto_rawDescOnce.Do(func() {
		file_prodvana_desired_state_manager_proto_rawDescData = protoimpl.X.CompressGZIP(file_prodvana_desired_state_manager_proto_rawDescData)
	})
	return file_prodvana_desired_state_manager_proto_rawDescData
}

var file_prodvana_desired_state_manager_proto_msgTypes = make([]protoimpl.MessageInfo, 61)
var file_prodvana_desired_state_manager_proto_goTypes = []interface{}{
	(*SetDesiredStateReq)(nil),                             // 0: prodvana.desired_state.SetDesiredStateReq
	(*ValidateDesiredStateReq)(nil),                        // 1: prodvana.desired_state.ValidateDesiredStateReq
	(*SetDesiredStateResp)(nil),                            // 2: prodvana.desired_state.SetDesiredStateResp
	(*PreviewEntityGraphResp)(nil),                         // 3: prodvana.desired_state.PreviewEntityGraphResp
	(*GetServiceDesiredStateConvergenceSummaryReq)(nil),    // 4: prodvana.desired_state.GetServiceDesiredStateConvergenceSummaryReq
	(*StatusExplanations)(nil),                             // 5: prodvana.desired_state.StatusExplanations
	(*DebugLogs)(nil),                                      // 6: prodvana.desired_state.DebugLogs
	(*PendingSetDesiredState)(nil),                         // 7: prodvana.desired_state.PendingSetDesiredState
	(*DesiredStateSummary)(nil),                            // 8: prodvana.desired_state.DesiredStateSummary
	(*GetDesiredStateConvergenceReq)(nil),                  // 9: prodvana.desired_state.GetDesiredStateConvergenceReq
	(*GetDesiredStateConvergenceSummaryResp)(nil),          // 10: prodvana.desired_state.GetDesiredStateConvergenceSummaryResp
	(*GetServiceDesiredStateConvergenceSummaryResp)(nil),   // 11: prodvana.desired_state.GetServiceDesiredStateConvergenceSummaryResp
	(*GetServiceLastConvergedStateReq)(nil),                // 12: prodvana.desired_state.GetServiceLastConvergedStateReq
	(*GetServiceLastConvergedStateResp)(nil),               // 13: prodvana.desired_state.GetServiceLastConvergedStateResp
	(*GetServiceDesiredStateHistoryReq)(nil),               // 14: prodvana.desired_state.GetServiceDesiredStateHistoryReq
	(*GetServiceDesiredStateHistoryResp)(nil),              // 15: prodvana.desired_state.GetServiceDesiredStateHistoryResp
	(*GetDesiredStateReq)(nil),                             // 16: prodvana.desired_state.GetDesiredStateReq
	(*GetDesiredStateResp)(nil),                            // 17: prodvana.desired_state.GetDesiredStateResp
	(*GetDesiredStateGraphReq)(nil),                        // 18: prodvana.desired_state.GetDesiredStateGraphReq
	(*DesiredStateTimestamps)(nil),                         // 19: prodvana.desired_state.DesiredStateTimestamps
	(*GetDesiredStateGraphResp)(nil),                       // 20: prodvana.desired_state.GetDesiredStateGraphResp
	(*GetServiceLatestDesiredStateIdReq)(nil),              // 21: prodvana.desired_state.GetServiceLatestDesiredStateIdReq
	(*GetServiceLatestDesiredStateIdResp)(nil),             // 22: prodvana.desired_state.GetServiceLatestDesiredStateIdResp
	(*GetServiceDesiredStateIdHistoryReq)(nil),             // 23: prodvana.desired_state.GetServiceDesiredStateIdHistoryReq
	(*GetServiceDesiredStateIdHistoryResp)(nil),            // 24: prodvana.desired_state.GetServiceDesiredStateIdHistoryResp
	(*ValidateDesiredStateResp)(nil),                       // 25: prodvana.desired_state.ValidateDesiredStateResp
	(*SetManualApprovalReq)(nil),                           // 26: prodvana.desired_state.SetManualApprovalReq
	(*SetManualApprovalResp)(nil),                          // 27: prodvana.desired_state.SetManualApprovalResp
	(*PromoteDeliveryReq)(nil),                             // 28: prodvana.desired_state.PromoteDeliveryReq
	(*PromoteDeliveryResp)(nil),                            // 29: prodvana.desired_state.PromoteDeliveryResp
	(*BypassProtectionReq)(nil),                            // 30: prodvana.desired_state.BypassProtectionReq
	(*BypassProtectionResp)(nil),                           // 31: prodvana.desired_state.BypassProtectionResp
	(*BypassDependenciesReq)(nil),                          // 32: prodvana.desired_state.BypassDependenciesReq
	(*BypassDependenciesResp)(nil),                         // 33: prodvana.desired_state.BypassDependenciesResp
	(*BypassConcurrencyLimitReq)(nil),                      // 34: prodvana.desired_state.BypassConcurrencyLimitReq
	(*BypassConcurrencyLimitResp)(nil),                     // 35: prodvana.desired_state.BypassConcurrencyLimitResp
	(*ListMaestroReleasesReq)(nil),                         // 36: prodvana.desired_state.ListMaestroReleasesReq
	(*ListMaestroReleasesResp)(nil),                        // 37: prodvana.desired_state.ListMaestroReleasesResp
	(*GetMaestroReleaseReq)(nil),                           // 38: prodvana.desired_state.GetMaestroReleaseReq
	(*GetMaestroReleaseResp)(nil),                          // 39: prodvana.desired_state.GetMaestroReleaseResp
	(*ListCombinedReleasesReq)(nil),                        // 40: prodvana.desired_state.ListCombinedReleasesReq
	(*ListServiceCombinedReleasesReq)(nil),                 // 41: prodvana.desired_state.ListServiceCombinedReleasesReq
	(*ListCombinedReleasesResp)(nil),                       // 42: prodvana.desired_state.ListCombinedReleasesResp
	(*GetLatestCombinedReleaseDesiredStateReq)(nil),        // 43: prodvana.desired_state.GetLatestCombinedReleaseDesiredStateReq
	(*GetServiceLatestCombinedReleaseDesiredStateReq)(nil), // 44: prodvana.desired_state.GetServiceLatestCombinedReleaseDesiredStateReq
	(*GetLatestCombinedReleaseDesiredStateResp)(nil),       // 45: prodvana.desired_state.GetLatestCombinedReleaseDesiredStateResp
	(*GetHistoricalEntityStatsReq)(nil),                    // 46: prodvana.desired_state.GetHistoricalEntityStatsReq
	(*HistoricalEntityStats)(nil),                          // 47: prodvana.desired_state.HistoricalEntityStats
	(*GetHistoricalEntityStatsResp)(nil),                   // 48: prodvana.desired_state.GetHistoricalEntityStatsResp
	nil,                                                    // 49: prodvana.desired_state.DesiredStateSummary.StatusesEntry
	nil,                                                    // 50: prodvana.desired_state.DesiredStateSummary.PreconditionStatusesEntry
	nil,                                                    // 51: prodvana.desired_state.DesiredStateSummary.StatusExplanationsEntry
	nil,                                                    // 52: prodvana.desired_state.DesiredStateSummary.DebugLogsEntry
	nil,                                                    // 53: prodvana.desired_state.DesiredStateSummary.ActionExplanationsEntry
	nil,                                                    // 54: prodvana.desired_state.DesiredStateSummary.LastUpdateTimestampsEntry
	nil,                                                    // 55: prodvana.desired_state.DesiredStateSummary.LastFetchedTimestampsEntry
	nil,                                                    // 56: prodvana.desired_state.DesiredStateSummary.LastAppliedTimestampsEntry
	(*GetDesiredStateGraphReq_LiteEntitiesFilter)(nil),     // 57: prodvana.desired_state.GetDesiredStateGraphReq.LiteEntitiesFilter
	(*GetDesiredStateGraphReq_QueryByService)(nil),         // 58: prodvana.desired_state.GetDesiredStateGraphReq.QueryByService
	(*GetDesiredStateGraphReq_DepthOverrideByStatus)(nil),  // 59: prodvana.desired_state.GetDesiredStateGraphReq.DepthOverrideByStatus
	(*ListCombinedReleasesResp_Release)(nil),               // 60: prodvana.desired_state.ListCombinedReleasesResp.Release
	(*model.State)(nil),                                    // 61: prodvana.desired_state.model.State
	(version.Source)(0),                                    // 62: prodvana.version.Source
	(*version.SourceMetadata)(nil),                         // 63: prodvana.version.SourceMetadata
	(*maestro.MaestroConfig)(nil),                          // 64: prodvana.desired_state.maestro.MaestroConfig
	(*service.CompiledServiceInstanceConfig)(nil),          // 65: prodvana.service.CompiledServiceInstanceConfig
	(*model.EntityGraph)(nil),                              // 66: prodvana.desired_state.model.EntityGraph
	(*model.StatusExplanation)(nil),                        // 67: prodvana.desired_state.model.StatusExplanation
	(*model.DebugLog)(nil),                                 // 68: prodvana.desired_state.model.DebugLog
	(async_task.TaskStatus)(0),                             // 69: prodvana.async_task.TaskStatus
	(*async_task.TaskResult)(nil),                          // 70: prodvana.async_task.TaskResult
	(*timestamppb.Timestamp)(nil),                          // 71: google.protobuf.Timestamp
	(model.Status)(0),                                      // 72: prodvana.desired_state.model.Status
	(*model.SetDesiredStateMetadata)(nil),                  // 73: prodvana.desired_state.model.SetDesiredStateMetadata
	(*model.ServiceInstanceState)(nil),                     // 74: prodvana.desired_state.model.ServiceInstanceState
	(model.Type)(0),                                        // 75: prodvana.desired_state.model.Type
	(*model.Annotations)(nil),                              // 76: prodvana.desired_state.model.Annotations
	(model.DependencyType)(0),                              // 77: prodvana.desired_state.model.DependencyType
	(*model.Identifier)(nil),                               // 78: prodvana.desired_state.model.Identifier
	(*maestro.MaestroRelease)(nil),                         // 79: prodvana.desired_state.maestro.MaestroRelease
	(*durationpb.Duration)(nil),                            // 80: google.protobuf.Duration
	(*model.ConditionState)(nil),                           // 81: prodvana.desired_state.model.ConditionState
	(*model.ActionExplanation)(nil),                        // 82: prodvana.desired_state.model.ActionExplanation
	(*debug.DumpState)(nil),                                // 83: prodvana.desired_state.debug.DumpState
}
var file_prodvana_desired_state_manager_proto_depIdxs = []int32{
	61,  // 0: prodvana.desired_state.SetDesiredStateReq.desired_state:type_name -> prodvana.desired_state.model.State
	62,  // 1: prodvana.desired_state.SetDesiredStateReq.source:type_name -> prodvana.version.Source
	63,  // 2: prodvana.desired_state.SetDesiredStateReq.source_metadata:type_name -> prodvana.version.SourceMetadata
	64,  // 3: prodvana.desired_state.SetDesiredStateReq.maestro_config_override:type_name -> prodvana.desired_state.maestro.MaestroConfig
	61,  // 4: prodvana.desired_state.ValidateDesiredStateReq.desired_state:type_name -> prodvana.desired_state.model.State
	65,  // 5: prodvana.desired_state.ValidateDesiredStateReq.service_instance_configs:type_name -> prodvana.service.CompiledServiceInstanceConfig
	66,  // 6: prodvana.desired_state.PreviewEntityGraphResp.entity_graph:type_name -> prodvana.desired_state.model.EntityGraph
	67,  // 7: prodvana.desired_state.StatusExplanations.status_explanations:type_name -> prodvana.desired_state.model.StatusExplanation
	68,  // 8: prodvana.desired_state.DebugLogs.debug_logs:type_name -> prodvana.desired_state.model.DebugLog
	61,  // 9: prodvana.desired_state.PendingSetDesiredState.compiled_desired_state:type_name -> prodvana.desired_state.model.State
	69,  // 10: prodvana.desired_state.PendingSetDesiredState.task_status:type_name -> prodvana.async_task.TaskStatus
	70,  // 11: prodvana.desired_state.PendingSetDesiredState.task_result:type_name -> prodvana.async_task.TaskResult
	66,  // 12: prodvana.desired_state.DesiredStateSummary.entity_graph:type_name -> prodvana.desired_state.model.EntityGraph
	71,  // 13: prodvana.desired_state.DesiredStateSummary.creation_timestamp:type_name -> google.protobuf.Timestamp
	71,  // 14: prodvana.desired_state.DesiredStateSummary.last_update_timestamp:type_name -> google.protobuf.Timestamp
	71,  // 15: prodvana.desired_state.DesiredStateSummary.replaced_timestamp:type_name -> google.protobuf.Timestamp
	61,  // 16: prodvana.desired_state.DesiredStateSummary.input_desired_state:type_name -> prodvana.desired_state.model.State
	61,  // 17: prodvana.desired_state.DesiredStateSummary.desired_state:type_name -> prodvana.desired_state.model.State
	61,  // 18: prodvana.desired_state.DesiredStateSummary.starting_state:type_name -> prodvana.desired_state.model.State
	61,  // 19: prodvana.desired_state.DesiredStateSummary.last_seen_state:type_name -> prodvana.desired_state.model.State
	72,  // 20: prodvana.desired_state.DesiredStateSummary.status:type_name -> prodvana.desired_state.model.Status
	62,  // 21: prodvana.desired_state.DesiredStateSummary.source:type_name -> prodvana.version.Source
	63,  // 22: prodvana.desired_state.DesiredStateSummary.source_metadata:type_name -> prodvana.version.SourceMetadata
	7,   // 23: prodvana.desired_state.DesiredStateSummary.pending_set_desired_state:type_name -> prodvana.desired_state.PendingSetDesiredState
	73,  // 24: prodvana.desired_state.DesiredStateSummary.set_desired_state_metadata:type_name -> prodvana.desired_state.model.SetDesiredStateMetadata
	49,  // 25: prodvana.desired_state.DesiredStateSummary.statuses:type_name -> prodvana.desired_state.DesiredStateSummary.StatusesEntry
	50,  // 26: prodvana.desired_state.DesiredStateSummary.precondition_statuses:type_name -> prodvana.desired_state.DesiredStateSummary.PreconditionStatusesEntry
	51,  // 27: prodvana.desired_state.DesiredStateSummary.status_explanations:type_name -> prodvana.desired_state.DesiredStateSummary.StatusExplanationsEntry
	52,  // 28: prodvana.desired_state.DesiredStateSummary.debug_logs:type_name -> prodvana.desired_state.DesiredStateSummary.DebugLogsEntry
	53,  // 29: prodvana.desired_state.DesiredStateSummary.action_explanations:type_name -> prodvana.desired_state.DesiredStateSummary.ActionExplanationsEntry
	54,  // 30: prodvana.desired_state.DesiredStateSummary.last_update_timestamps:type_name -> prodvana.desired_state.DesiredStateSummary.LastUpdateTimestampsEntry
	55,  // 31: prodvana.desired_state.DesiredStateSummary.last_fetched_timestamps:type_name -> prodvana.desired_state.DesiredStateSummary.LastFetchedTimestampsEntry
	56,  // 32: prodvana.desired_state.DesiredStateSummary.last_applied_timestamps:type_name -> prodvana.desired_state.DesiredStateSummary.LastAppliedTimestampsEntry
	8,   // 33: prodvana.desired_state.GetDesiredStateConvergenceSummaryResp.summary:type_name -> prodvana.desired_state.DesiredStateSummary
	8,   // 34: prodvana.desired_state.GetServiceDesiredStateConvergenceSummaryResp.summary:type_name -> prodvana.desired_state.DesiredStateSummary
	74,  // 35: prodvana.desired_state.GetServiceLastConvergedStateResp.service_instance_states:type_name -> prodvana.desired_state.model.ServiceInstanceState
	8,   // 36: prodvana.desired_state.GetServiceDesiredStateHistoryResp.desired_states:type_name -> prodvana.desired_state.DesiredStateSummary
	61,  // 37: prodvana.desired_state.GetDesiredStateResp.desired_state:type_name -> prodvana.desired_state.model.State
	61,  // 38: prodvana.desired_state.GetDesiredStateResp.compiled_desired_state:type_name -> prodvana.desired_state.model.State
	73,  // 39: prodvana.desired_state.GetDesiredStateResp.set_desired_state_metadata:type_name -> prodvana.desired_state.model.SetDesiredStateMetadata
	71,  // 40: prodvana.desired_state.GetDesiredStateResp.creation_timestamp:type_name -> google.protobuf.Timestamp
	62,  // 41: prodvana.desired_state.GetDesiredStateResp.source:type_name -> prodvana.version.Source
	63,  // 42: prodvana.desired_state.GetDesiredStateResp.source_metadata:type_name -> prodvana.version.SourceMetadata
	58,  // 43: prodvana.desired_state.GetDesiredStateGraphReq.query_by_service:type_name -> prodvana.desired_state.GetDesiredStateGraphReq.QueryByService
	75,  // 44: prodvana.desired_state.GetDesiredStateGraphReq.types:type_name -> prodvana.desired_state.model.Type
	76,  // 45: prodvana.desired_state.GetDesiredStateGraphReq.required_annotations:type_name -> prodvana.desired_state.model.Annotations
	59,  // 46: prodvana.desired_state.GetDesiredStateGraphReq.depth_overrides_by_status:type_name -> prodvana.desired_state.GetDesiredStateGraphReq.DepthOverrideByStatus
	77,  // 47: prodvana.desired_state.GetDesiredStateGraphReq.exclude_dependency_type:type_name -> prodvana.desired_state.model.DependencyType
	57,  // 48: prodvana.desired_state.GetDesiredStateGraphReq.lite_entities_filter:type_name -> prodvana.desired_state.GetDesiredStateGraphReq.LiteEntitiesFilter
	71,  // 49: prodvana.desired_state.DesiredStateTimestamps.creation_timestamp:type_name -> google.protobuf.Timestamp
	71,  // 50: prodvana.desired_state.DesiredStateTimestamps.last_update_timestamp:type_name -> google.protobuf.Timestamp
	71,  // 51: prodvana.desired_state.DesiredStateTimestamps.replaced_timestamp:type_name -> google.protobuf.Timestamp
	66,  // 52: prodvana.desired_state.GetDesiredStateGraphResp.entity_graph:type_name -> prodvana.desired_state.model.EntityGraph
	7,   // 53: prodvana.desired_state.GetDesiredStateGraphResp.pending_set_desired_state:type_name -> prodvana.desired_state.PendingSetDesiredState
	19,  // 54: prodvana.desired_state.GetDesiredStateGraphResp.timestamps:type_name -> prodvana.desired_state.DesiredStateTimestamps
	73,  // 55: prodvana.desired_state.GetDesiredStateGraphResp.set_desired_state_metadata:type_name -> prodvana.desired_state.model.SetDesiredStateMetadata
	7,   // 56: prodvana.desired_state.GetServiceLatestDesiredStateIdResp.pending_set_desired_state:type_name -> prodvana.desired_state.PendingSetDesiredState
	61,  // 57: prodvana.desired_state.ValidateDesiredStateResp.desired_state:type_name -> prodvana.desired_state.model.State
	61,  // 58: prodvana.desired_state.ValidateDesiredStateResp.compiled_desired_state:type_name -> prodvana.desired_state.model.State
	62,  // 59: prodvana.desired_state.SetManualApprovalReq.source:type_name -> prodvana.version.Source
	63,  // 60: prodvana.desired_state.SetManualApprovalReq.source_metadata:type_name -> prodvana.version.SourceMetadata
	62,  // 61: prodvana.desired_state.PromoteDeliveryReq.call_source:type_name -> prodvana.version.Source
	63,  // 62: prodvana.desired_state.PromoteDeliveryReq.source_metadata:type_name -> prodvana.version.SourceMetadata
	62,  // 63: prodvana.desired_state.BypassProtectionReq.call_source:type_name -> prodvana.version.Source
	63,  // 64: prodvana.desired_state.BypassProtectionReq.source_metadata:type_name -> prodvana.version.SourceMetadata
	62,  // 65: prodvana.desired_state.BypassDependenciesReq.call_source:type_name -> prodvana.version.Source
	63,  // 66: prodvana.desired_state.BypassDependenciesReq.source_metadata:type_name -> prodvana.version.SourceMetadata
	62,  // 67: prodvana.desired_state.BypassConcurrencyLimitReq.call_source:type_name -> prodvana.version.Source
	63,  // 68: prodvana.desired_state.BypassConcurrencyLimitReq.source_metadata:type_name -> prodvana.version.SourceMetadata
	78,  // 69: prodvana.desired_state.ListMaestroReleasesReq.entity_id:type_name -> prodvana.desired_state.model.Identifier
	79,  // 70: prodvana.desired_state.ListMaestroReleasesResp.maestro_releases:type_name -> prodvana.desired_state.maestro.MaestroRelease
	79,  // 71: prodvana.desired_state.GetMaestroReleaseResp.maestro_release:type_name -> prodvana.desired_state.maestro.MaestroRelease
	78,  // 72: prodvana.desired_state.ListCombinedReleasesReq.entity_id:type_name -> prodvana.desired_state.model.Identifier
	60,  // 73: prodvana.desired_state.ListCombinedReleasesResp.releases:type_name -> prodvana.desired_state.ListCombinedReleasesResp.Release
	78,  // 74: prodvana.desired_state.GetLatestCombinedReleaseDesiredStateReq.entity_id:type_name -> prodvana.desired_state.model.Identifier
	61,  // 75: prodvana.desired_state.GetLatestCombinedReleaseDesiredStateResp.input_desired_state:type_name -> prodvana.desired_state.model.State
	61,  // 76: prodvana.desired_state.GetLatestCombinedReleaseDesiredStateResp.compiled_desired_state:type_name -> prodvana.desired_state.model.State
	73,  // 77: prodvana.desired_state.GetLatestCombinedReleaseDesiredStateResp.set_desired_state_metadata:type_name -> prodvana.desired_state.model.SetDesiredStateMetadata
	71,  // 78: prodvana.desired_state.GetLatestCombinedReleaseDesiredStateResp.creation_timestamp:type_name -> google.protobuf.Timestamp
	62,  // 79: prodvana.desired_state.GetLatestCombinedReleaseDesiredStateResp.source:type_name -> prodvana.version.Source
	63,  // 80: prodvana.desired_state.GetLatestCombinedReleaseDesiredStateResp.source_metadata:type_name -> prodvana.version.SourceMetadata
	78,  // 81: prodvana.desired_state.GetHistoricalEntityStatsReq.entity_id:type_name -> prodvana.desired_state.model.Identifier
	80,  // 82: prodvana.desired_state.HistoricalEntityStats.avg_deployment_duration:type_name -> google.protobuf.Duration
	80,  // 83: prodvana.desired_state.HistoricalEntityStats.p95_deployment_duration:type_name -> google.protobuf.Duration
	47,  // 84: prodvana.desired_state.GetHistoricalEntityStatsResp.stats:type_name -> prodvana.desired_state.HistoricalEntityStats
	72,  // 85: prodvana.desired_state.DesiredStateSummary.StatusesEntry.value:type_name -> prodvana.desired_state.model.Status
	81,  // 86: prodvana.desired_state.DesiredStateSummary.PreconditionStatusesEntry.value:type_name -> prodvana.desired_state.model.ConditionState
	5,   // 87: prodvana.desired_state.DesiredStateSummary.StatusExplanationsEntry.value:type_name -> prodvana.desired_state.StatusExplanations
	6,   // 88: prodvana.desired_state.DesiredStateSummary.DebugLogsEntry.value:type_name -> prodvana.desired_state.DebugLogs
	82,  // 89: prodvana.desired_state.DesiredStateSummary.ActionExplanationsEntry.value:type_name -> prodvana.desired_state.model.ActionExplanation
	71,  // 90: prodvana.desired_state.DesiredStateSummary.LastUpdateTimestampsEntry.value:type_name -> google.protobuf.Timestamp
	71,  // 91: prodvana.desired_state.DesiredStateSummary.LastFetchedTimestampsEntry.value:type_name -> google.protobuf.Timestamp
	71,  // 92: prodvana.desired_state.DesiredStateSummary.LastAppliedTimestampsEntry.value:type_name -> google.protobuf.Timestamp
	75,  // 93: prodvana.desired_state.GetDesiredStateGraphReq.LiteEntitiesFilter.types:type_name -> prodvana.desired_state.model.Type
	72,  // 94: prodvana.desired_state.GetDesiredStateGraphReq.DepthOverrideByStatus.status:type_name -> prodvana.desired_state.model.Status
	71,  // 95: prodvana.desired_state.ListCombinedReleasesResp.Release.creation_timestamp:type_name -> google.protobuf.Timestamp
	0,   // 96: prodvana.desired_state.DesiredStateManager.SetDesiredState:input_type -> prodvana.desired_state.SetDesiredStateReq
	0,   // 97: prodvana.desired_state.DesiredStateManager.PreviewEntityGraph:input_type -> prodvana.desired_state.SetDesiredStateReq
	4,   // 98: prodvana.desired_state.DesiredStateManager.GetServiceDesiredStateConvergenceSummary:input_type -> prodvana.desired_state.GetServiceDesiredStateConvergenceSummaryReq
	21,  // 99: prodvana.desired_state.DesiredStateManager.GetServiceLatestDesiredStateId:input_type -> prodvana.desired_state.GetServiceLatestDesiredStateIdReq
	23,  // 100: prodvana.desired_state.DesiredStateManager.GetServiceDesiredStateIdHistory:input_type -> prodvana.desired_state.GetServiceDesiredStateIdHistoryReq
	12,  // 101: prodvana.desired_state.DesiredStateManager.GetServiceLastConvergedStates:input_type -> prodvana.desired_state.GetServiceLastConvergedStateReq
	14,  // 102: prodvana.desired_state.DesiredStateManager.GetServiceDesiredStateHistory:input_type -> prodvana.desired_state.GetServiceDesiredStateHistoryReq
	16,  // 103: prodvana.desired_state.DesiredStateManager.GetDesiredState:input_type -> prodvana.desired_state.GetDesiredStateReq
	18,  // 104: prodvana.desired_state.DesiredStateManager.GetDesiredStateGraph:input_type -> prodvana.desired_state.GetDesiredStateGraphReq
	9,   // 105: prodvana.desired_state.DesiredStateManager.GetDesiredStateConvergenceSummary:input_type -> prodvana.desired_state.GetDesiredStateConvergenceReq
	1,   // 106: prodvana.desired_state.DesiredStateManager.ValidateDesiredState:input_type -> prodvana.desired_state.ValidateDesiredStateReq
	26,  // 107: prodvana.desired_state.DesiredStateManager.SetManualApproval:input_type -> prodvana.desired_state.SetManualApprovalReq
	28,  // 108: prodvana.desired_state.DesiredStateManager.PromoteDelivery:input_type -> prodvana.desired_state.PromoteDeliveryReq
	30,  // 109: prodvana.desired_state.DesiredStateManager.BypassProtection:input_type -> prodvana.desired_state.BypassProtectionReq
	34,  // 110: prodvana.desired_state.DesiredStateManager.BypassConcurrencyLimit:input_type -> prodvana.desired_state.BypassConcurrencyLimitReq
	32,  // 111: prodvana.desired_state.DesiredStateManager.BypassDependencies:input_type -> prodvana.desired_state.BypassDependenciesReq
	36,  // 112: prodvana.desired_state.DesiredStateManager.ListMaestroReleases:input_type -> prodvana.desired_state.ListMaestroReleasesReq
	38,  // 113: prodvana.desired_state.DesiredStateManager.GetMaestroRelease:input_type -> prodvana.desired_state.GetMaestroReleaseReq
	40,  // 114: prodvana.desired_state.DesiredStateManager.ListCombinedReleases:input_type -> prodvana.desired_state.ListCombinedReleasesReq
	41,  // 115: prodvana.desired_state.DesiredStateManager.ListServiceCombinedReleases:input_type -> prodvana.desired_state.ListServiceCombinedReleasesReq
	43,  // 116: prodvana.desired_state.DesiredStateManager.GetLatestCombinedReleaseDesiredState:input_type -> prodvana.desired_state.GetLatestCombinedReleaseDesiredStateReq
	44,  // 117: prodvana.desired_state.DesiredStateManager.GetServiceLatestCombinedReleaseDesiredState:input_type -> prodvana.desired_state.GetServiceLatestCombinedReleaseDesiredStateReq
	16,  // 118: prodvana.desired_state.DesiredStateManager.GetDebugState:input_type -> prodvana.desired_state.GetDesiredStateReq
	46,  // 119: prodvana.desired_state.DesiredStateManager.GetHistoricalEntityStats:input_type -> prodvana.desired_state.GetHistoricalEntityStatsReq
	2,   // 120: prodvana.desired_state.DesiredStateManager.SetDesiredState:output_type -> prodvana.desired_state.SetDesiredStateResp
	3,   // 121: prodvana.desired_state.DesiredStateManager.PreviewEntityGraph:output_type -> prodvana.desired_state.PreviewEntityGraphResp
	11,  // 122: prodvana.desired_state.DesiredStateManager.GetServiceDesiredStateConvergenceSummary:output_type -> prodvana.desired_state.GetServiceDesiredStateConvergenceSummaryResp
	22,  // 123: prodvana.desired_state.DesiredStateManager.GetServiceLatestDesiredStateId:output_type -> prodvana.desired_state.GetServiceLatestDesiredStateIdResp
	24,  // 124: prodvana.desired_state.DesiredStateManager.GetServiceDesiredStateIdHistory:output_type -> prodvana.desired_state.GetServiceDesiredStateIdHistoryResp
	13,  // 125: prodvana.desired_state.DesiredStateManager.GetServiceLastConvergedStates:output_type -> prodvana.desired_state.GetServiceLastConvergedStateResp
	15,  // 126: prodvana.desired_state.DesiredStateManager.GetServiceDesiredStateHistory:output_type -> prodvana.desired_state.GetServiceDesiredStateHistoryResp
	17,  // 127: prodvana.desired_state.DesiredStateManager.GetDesiredState:output_type -> prodvana.desired_state.GetDesiredStateResp
	20,  // 128: prodvana.desired_state.DesiredStateManager.GetDesiredStateGraph:output_type -> prodvana.desired_state.GetDesiredStateGraphResp
	10,  // 129: prodvana.desired_state.DesiredStateManager.GetDesiredStateConvergenceSummary:output_type -> prodvana.desired_state.GetDesiredStateConvergenceSummaryResp
	25,  // 130: prodvana.desired_state.DesiredStateManager.ValidateDesiredState:output_type -> prodvana.desired_state.ValidateDesiredStateResp
	27,  // 131: prodvana.desired_state.DesiredStateManager.SetManualApproval:output_type -> prodvana.desired_state.SetManualApprovalResp
	29,  // 132: prodvana.desired_state.DesiredStateManager.PromoteDelivery:output_type -> prodvana.desired_state.PromoteDeliveryResp
	31,  // 133: prodvana.desired_state.DesiredStateManager.BypassProtection:output_type -> prodvana.desired_state.BypassProtectionResp
	35,  // 134: prodvana.desired_state.DesiredStateManager.BypassConcurrencyLimit:output_type -> prodvana.desired_state.BypassConcurrencyLimitResp
	33,  // 135: prodvana.desired_state.DesiredStateManager.BypassDependencies:output_type -> prodvana.desired_state.BypassDependenciesResp
	37,  // 136: prodvana.desired_state.DesiredStateManager.ListMaestroReleases:output_type -> prodvana.desired_state.ListMaestroReleasesResp
	39,  // 137: prodvana.desired_state.DesiredStateManager.GetMaestroRelease:output_type -> prodvana.desired_state.GetMaestroReleaseResp
	42,  // 138: prodvana.desired_state.DesiredStateManager.ListCombinedReleases:output_type -> prodvana.desired_state.ListCombinedReleasesResp
	42,  // 139: prodvana.desired_state.DesiredStateManager.ListServiceCombinedReleases:output_type -> prodvana.desired_state.ListCombinedReleasesResp
	45,  // 140: prodvana.desired_state.DesiredStateManager.GetLatestCombinedReleaseDesiredState:output_type -> prodvana.desired_state.GetLatestCombinedReleaseDesiredStateResp
	45,  // 141: prodvana.desired_state.DesiredStateManager.GetServiceLatestCombinedReleaseDesiredState:output_type -> prodvana.desired_state.GetLatestCombinedReleaseDesiredStateResp
	83,  // 142: prodvana.desired_state.DesiredStateManager.GetDebugState:output_type -> prodvana.desired_state.debug.DumpState
	48,  // 143: prodvana.desired_state.DesiredStateManager.GetHistoricalEntityStats:output_type -> prodvana.desired_state.GetHistoricalEntityStatsResp
	120, // [120:144] is the sub-list for method output_type
	96,  // [96:120] is the sub-list for method input_type
	96,  // [96:96] is the sub-list for extension type_name
	96,  // [96:96] is the sub-list for extension extendee
	0,   // [0:96] is the sub-list for field type_name
}

func init() { file_prodvana_desired_state_manager_proto_init() }
func file_prodvana_desired_state_manager_proto_init() {
	if File_prodvana_desired_state_manager_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_prodvana_desired_state_manager_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDesiredStateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateDesiredStateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDesiredStateResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreviewEntityGraphResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceDesiredStateConvergenceSummaryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusExplanations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebugLogs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PendingSetDesiredState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DesiredStateSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDesiredStateConvergenceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDesiredStateConvergenceSummaryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceDesiredStateConvergenceSummaryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceLastConvergedStateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceLastConvergedStateResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceDesiredStateHistoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceDesiredStateHistoryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDesiredStateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDesiredStateResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDesiredStateGraphReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DesiredStateTimestamps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDesiredStateGraphResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceLatestDesiredStateIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceLatestDesiredStateIdResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceDesiredStateIdHistoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceDesiredStateIdHistoryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateDesiredStateResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetManualApprovalReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetManualApprovalResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PromoteDeliveryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PromoteDeliveryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BypassProtectionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BypassProtectionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BypassDependenciesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BypassDependenciesResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BypassConcurrencyLimitReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BypassConcurrencyLimitResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMaestroReleasesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMaestroReleasesResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMaestroReleaseReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMaestroReleaseResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCombinedReleasesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListServiceCombinedReleasesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCombinedReleasesResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestCombinedReleaseDesiredStateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceLatestCombinedReleaseDesiredStateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestCombinedReleaseDesiredStateResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHistoricalEntityStatsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoricalEntityStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHistoricalEntityStatsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDesiredStateGraphReq_LiteEntitiesFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDesiredStateGraphReq_QueryByService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDesiredStateGraphReq_DepthOverrideByStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCombinedReleasesResp_Release); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_prodvana_desired_state_manager_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*SetDesiredStateResp_DesiredStateId)(nil),
		(*SetDesiredStateResp_ReleaseId)(nil),
	}
	file_prodvana_desired_state_manager_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*GetDesiredStateGraphReq_DesiredStateId)(nil),
		(*GetDesiredStateGraphReq_QueryByService_)(nil),
	}
	file_prodvana_desired_state_manager_proto_msgTypes[60].OneofWrappers = []interface{}{
		(*ListCombinedReleasesResp_Release_DesiredStateId)(nil),
		(*ListCombinedReleasesResp_Release_ReleaseId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_prodvana_desired_state_manager_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   61,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_prodvana_desired_state_manager_proto_goTypes,
		DependencyIndexes: file_prodvana_desired_state_manager_proto_depIdxs,
		MessageInfos:      file_prodvana_desired_state_manager_proto_msgTypes,
	}.Build()
	File_prodvana_desired_state_manager_proto = out.File
	file_prodvana_desired_state_manager_proto_rawDesc = nil
	file_prodvana_desired_state_manager_proto_goTypes = nil
	file_prodvana_desired_state_manager_proto_depIdxs = nil
}
