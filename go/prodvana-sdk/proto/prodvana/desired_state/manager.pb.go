// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.1
// 	protoc        v3.21.10
// source: prodvana/desired_state/manager.proto

package desired_state

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	async_task "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/async_task"
	model "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/desired_state/model"
	service "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/service"
	version "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/version"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SetDesiredStateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DesiredState *model.State `protobuf:"bytes,1,opt,name=desired_state,json=desiredState,proto3" json:"desired_state,omitempty"`
	// set if this is a rollback, which will generate a desired state with faster preconditions
	Rollback       bool                    `protobuf:"varint,2,opt,name=rollback,proto3" json:"rollback,omitempty"`
	Source         version.Source          `protobuf:"varint,3,opt,name=source,proto3,enum=prodvana.version.Source" json:"source,omitempty"`
	SourceMetadata *version.SourceMetadata `protobuf:"bytes,4,opt,name=source_metadata,json=sourceMetadata,proto3" json:"source_metadata,omitempty"`
	// internal use only
	ForceAsyncSetDesiredState bool `protobuf:"varint,5,opt,name=force_async_set_desired_state,json=forceAsyncSetDesiredState,proto3" json:"force_async_set_desired_state,omitempty"`
}

func (x *SetDesiredStateReq) Reset() {
	*x = SetDesiredStateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDesiredStateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDesiredStateReq) ProtoMessage() {}

func (x *SetDesiredStateReq) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDesiredStateReq.ProtoReflect.Descriptor instead.
func (*SetDesiredStateReq) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{0}
}

func (x *SetDesiredStateReq) GetDesiredState() *model.State {
	if x != nil {
		return x.DesiredState
	}
	return nil
}

func (x *SetDesiredStateReq) GetRollback() bool {
	if x != nil {
		return x.Rollback
	}
	return false
}

func (x *SetDesiredStateReq) GetSource() version.Source {
	if x != nil {
		return x.Source
	}
	return version.Source(0)
}

func (x *SetDesiredStateReq) GetSourceMetadata() *version.SourceMetadata {
	if x != nil {
		return x.SourceMetadata
	}
	return nil
}

func (x *SetDesiredStateReq) GetForceAsyncSetDesiredState() bool {
	if x != nil {
		return x.ForceAsyncSetDesiredState
	}
	return false
}

type ValidateDesiredStateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DesiredState *model.State `protobuf:"bytes,1,opt,name=desired_state,json=desiredState,proto3" json:"desired_state,omitempty"`
	// set if this is a rollback, which will generate a desired state with faster preconditions
	Rollback bool `protobuf:"varint,2,opt,name=rollback,proto3" json:"rollback,omitempty"`
	// optional, if set, use these service configs instead of fetching from db. can be useful when doing a ValidateApplyParameters followed by a ValidateDesiredState
	ServiceInstanceConfigs []*service.CompiledServiceInstanceConfig `protobuf:"bytes,3,rep,name=service_instance_configs,json=serviceInstanceConfigs,proto3" json:"service_instance_configs,omitempty"`
	// only do label expansion instead of the full compilation, can be useful for speedup if the only desired outcome is to look at the materialized release channels
	LabelExpansionOnly bool `protobuf:"varint,4,opt,name=label_expansion_only,json=labelExpansionOnly,proto3" json:"label_expansion_only,omitempty"`
	// assume service versions in the request are invalid and do not try to fetch them.
	DisregardServiceVersions bool `protobuf:"varint,5,opt,name=disregard_service_versions,json=disregardServiceVersions,proto3" json:"disregard_service_versions,omitempty"`
}

func (x *ValidateDesiredStateReq) Reset() {
	*x = ValidateDesiredStateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateDesiredStateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateDesiredStateReq) ProtoMessage() {}

func (x *ValidateDesiredStateReq) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateDesiredStateReq.ProtoReflect.Descriptor instead.
func (*ValidateDesiredStateReq) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{1}
}

func (x *ValidateDesiredStateReq) GetDesiredState() *model.State {
	if x != nil {
		return x.DesiredState
	}
	return nil
}

func (x *ValidateDesiredStateReq) GetRollback() bool {
	if x != nil {
		return x.Rollback
	}
	return false
}

func (x *ValidateDesiredStateReq) GetServiceInstanceConfigs() []*service.CompiledServiceInstanceConfig {
	if x != nil {
		return x.ServiceInstanceConfigs
	}
	return nil
}

func (x *ValidateDesiredStateReq) GetLabelExpansionOnly() bool {
	if x != nil {
		return x.LabelExpansionOnly
	}
	return false
}

func (x *ValidateDesiredStateReq) GetDisregardServiceVersions() bool {
	if x != nil {
		return x.DisregardServiceVersions
	}
	return false
}

type SetDesiredStateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DesiredStateId string `protobuf:"bytes,1,opt,name=desired_state_id,json=desiredStateId,proto3" json:"desired_state_id,omitempty"` // unique identifier for the desired state that was just set
}

func (x *SetDesiredStateResp) Reset() {
	*x = SetDesiredStateResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDesiredStateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDesiredStateResp) ProtoMessage() {}

func (x *SetDesiredStateResp) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDesiredStateResp.ProtoReflect.Descriptor instead.
func (*SetDesiredStateResp) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{2}
}

func (x *SetDesiredStateResp) GetDesiredStateId() string {
	if x != nil {
		return x.DesiredStateId
	}
	return ""
}

type PreviewEntityGraphResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityGraph    *model.EntityGraph `protobuf:"bytes,1,opt,name=entity_graph,json=entityGraph,proto3" json:"entity_graph,omitempty"`
	DesiredStateId string             `protobuf:"bytes,2,opt,name=desired_state_id,json=desiredStateId,proto3" json:"desired_state_id,omitempty"` // unique identifier the preview entity graph that was just created. This same ID can be used across any endpoints that inspect desired states, e.g. GetDesiredState
}

func (x *PreviewEntityGraphResp) Reset() {
	*x = PreviewEntityGraphResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviewEntityGraphResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewEntityGraphResp) ProtoMessage() {}

func (x *PreviewEntityGraphResp) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewEntityGraphResp.ProtoReflect.Descriptor instead.
func (*PreviewEntityGraphResp) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{3}
}

func (x *PreviewEntityGraphResp) GetEntityGraph() *model.EntityGraph {
	if x != nil {
		return x.EntityGraph
	}
	return nil
}

func (x *PreviewEntityGraphResp) GetDesiredStateId() string {
	if x != nil {
		return x.DesiredStateId
	}
	return ""
}

type GetServiceDesiredStateConvergenceSummaryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Application            string `protobuf:"bytes,1,opt,name=application,proto3" json:"application,omitempty"`
	Service                string `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
	FastNoDeprecatedFields bool   `protobuf:"varint,3,opt,name=fast_no_deprecated_fields,json=fastNoDeprecatedFields,proto3" json:"fast_no_deprecated_fields,omitempty"` // unused
}

func (x *GetServiceDesiredStateConvergenceSummaryReq) Reset() {
	*x = GetServiceDesiredStateConvergenceSummaryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceDesiredStateConvergenceSummaryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceDesiredStateConvergenceSummaryReq) ProtoMessage() {}

func (x *GetServiceDesiredStateConvergenceSummaryReq) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceDesiredStateConvergenceSummaryReq.ProtoReflect.Descriptor instead.
func (*GetServiceDesiredStateConvergenceSummaryReq) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{4}
}

func (x *GetServiceDesiredStateConvergenceSummaryReq) GetApplication() string {
	if x != nil {
		return x.Application
	}
	return ""
}

func (x *GetServiceDesiredStateConvergenceSummaryReq) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *GetServiceDesiredStateConvergenceSummaryReq) GetFastNoDeprecatedFields() bool {
	if x != nil {
		return x.FastNoDeprecatedFields
	}
	return false
}

type StatusExplanations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusExplanations []*model.StatusExplanation `protobuf:"bytes,1,rep,name=status_explanations,json=statusExplanations,proto3" json:"status_explanations,omitempty"`
}

func (x *StatusExplanations) Reset() {
	*x = StatusExplanations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusExplanations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusExplanations) ProtoMessage() {}

func (x *StatusExplanations) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusExplanations.ProtoReflect.Descriptor instead.
func (*StatusExplanations) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{5}
}

func (x *StatusExplanations) GetStatusExplanations() []*model.StatusExplanation {
	if x != nil {
		return x.StatusExplanations
	}
	return nil
}

type DebugLogs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DebugLogs []*model.DebugLog `protobuf:"bytes,1,rep,name=debug_logs,json=debugLogs,proto3" json:"debug_logs,omitempty"`
}

func (x *DebugLogs) Reset() {
	*x = DebugLogs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugLogs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugLogs) ProtoMessage() {}

func (x *DebugLogs) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugLogs.ProtoReflect.Descriptor instead.
func (*DebugLogs) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{6}
}

func (x *DebugLogs) GetDebugLogs() []*model.DebugLog {
	if x != nil {
		return x.DebugLogs
	}
	return nil
}

type PendingSetDesiredState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DesiredStateId       string       `protobuf:"bytes,4,opt,name=desired_state_id,json=desiredStateId,proto3" json:"desired_state_id,omitempty"`
	CompiledDesiredState *model.State `protobuf:"bytes,1,opt,name=compiled_desired_state,json=compiledDesiredState,proto3" json:"compiled_desired_state,omitempty"`
	// will never contain SUCCESS, by definition, but may contain FAILED
	TaskStatus async_task.TaskStatus `protobuf:"varint,2,opt,name=task_status,json=taskStatus,proto3,enum=prodvana.async_task.TaskStatus" json:"task_status,omitempty"`
	// will only be set for FAILED
	TaskResult *async_task.TaskResult `protobuf:"bytes,3,opt,name=task_result,json=taskResult,proto3" json:"task_result,omitempty"` // next tag: 5
}

func (x *PendingSetDesiredState) Reset() {
	*x = PendingSetDesiredState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PendingSetDesiredState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendingSetDesiredState) ProtoMessage() {}

func (x *PendingSetDesiredState) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendingSetDesiredState.ProtoReflect.Descriptor instead.
func (*PendingSetDesiredState) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{7}
}

func (x *PendingSetDesiredState) GetDesiredStateId() string {
	if x != nil {
		return x.DesiredStateId
	}
	return ""
}

func (x *PendingSetDesiredState) GetCompiledDesiredState() *model.State {
	if x != nil {
		return x.CompiledDesiredState
	}
	return nil
}

func (x *PendingSetDesiredState) GetTaskStatus() async_task.TaskStatus {
	if x != nil {
		return x.TaskStatus
	}
	return async_task.TaskStatus(0)
}

func (x *PendingSetDesiredState) GetTaskResult() *async_task.TaskResult {
	if x != nil {
		return x.TaskResult
	}
	return nil
}

type DesiredStateSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityGraph         *model.EntityGraph     `protobuf:"bytes,15,opt,name=entity_graph,json=entityGraph,proto3" json:"entity_graph,omitempty"`
	CreationTimestamp   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=creation_timestamp,json=creationTimestamp,proto3" json:"creation_timestamp,omitempty"`
	LastUpdateTimestamp *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=last_update_timestamp,json=lastUpdateTimestamp,proto3" json:"last_update_timestamp,omitempty"`
	// will only be set if desired state has been replaced
	ReplacedTimestamp *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=replaced_timestamp,json=replacedTimestamp,proto3" json:"replaced_timestamp,omitempty"`
	// uncompiled desired state originally passed as input to SetDesiredState
	InputDesiredState *model.State `protobuf:"bytes,16,opt,name=input_desired_state,json=inputDesiredState,proto3" json:"input_desired_state,omitempty"`
	// compiled desired state
	DesiredState  *model.State `protobuf:"bytes,3,opt,name=desired_state,json=desiredState,proto3" json:"desired_state,omitempty"`
	StartingState *model.State `protobuf:"bytes,1,opt,name=starting_state,json=startingState,proto3" json:"starting_state,omitempty"`
	LastSeenState *model.State `protobuf:"bytes,2,opt,name=last_seen_state,json=lastSeenState,proto3" json:"last_seen_state,omitempty"`
	Status        model.Status `protobuf:"varint,19,opt,name=status,proto3,enum=prodvana.desired_state.model.Status" json:"status,omitempty"`
	// who set the desired state
	Source         version.Source          `protobuf:"varint,17,opt,name=source,proto3,enum=prodvana.version.Source" json:"source,omitempty"`
	SourceMetadata *version.SourceMetadata `protobuf:"bytes,18,opt,name=source_metadata,json=sourceMetadata,proto3" json:"source_metadata,omitempty"`
	// the latest pending or failed set desired state request
	PendingSetDesiredState *PendingSetDesiredState `protobuf:"bytes,20,opt,name=pending_set_desired_state,json=pendingSetDesiredState,proto3" json:"pending_set_desired_state,omitempty"`
	// fields below are deprecated
	// status of the desired state, all its descendents, and the root desired state.
	Statuses map[string]model.Status `protobuf:"bytes,4,rep,name=statuses,proto3" json:"statuses,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=prodvana.desired_state.model.Status"`
	// State of all preconditions involved in the desired state.
	// Key format - "{desired_state_id}-{index}", e.g., "des-0752d6c76a6943abbfcf0515634584ba-0".
	PreconditionStatuses map[string]*model.ConditionState    `protobuf:"bytes,8,rep,name=precondition_statuses,json=preconditionStatuses,proto3" json:"precondition_statuses,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StatusExplanations   map[string]*StatusExplanations      `protobuf:"bytes,9,rep,name=status_explanations,json=statusExplanations,proto3" json:"status_explanations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DebugLogs            map[string]*DebugLogs               `protobuf:"bytes,10,rep,name=debug_logs,json=debugLogs,proto3" json:"debug_logs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ActionExplanations   map[string]*model.ActionExplanation `protobuf:"bytes,11,rep,name=action_explanations,json=actionExplanations,proto3" json:"action_explanations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// last_update_timestamp, last_fetched_timestamp, and last_applied_timestamp are only returned for the latest desired state
	LastUpdateTimestamps  map[string]*timestamppb.Timestamp `protobuf:"bytes,12,rep,name=last_update_timestamps,json=lastUpdateTimestamps,proto3" json:"last_update_timestamps,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	LastFetchedTimestamps map[string]*timestamppb.Timestamp `protobuf:"bytes,13,rep,name=last_fetched_timestamps,json=lastFetchedTimestamps,proto3" json:"last_fetched_timestamps,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	LastAppliedTimestamps map[string]*timestamppb.Timestamp `protobuf:"bytes,14,rep,name=last_applied_timestamps,json=lastAppliedTimestamps,proto3" json:"last_applied_timestamps,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DesiredStateSummary) Reset() {
	*x = DesiredStateSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DesiredStateSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DesiredStateSummary) ProtoMessage() {}

func (x *DesiredStateSummary) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DesiredStateSummary.ProtoReflect.Descriptor instead.
func (*DesiredStateSummary) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{8}
}

func (x *DesiredStateSummary) GetEntityGraph() *model.EntityGraph {
	if x != nil {
		return x.EntityGraph
	}
	return nil
}

func (x *DesiredStateSummary) GetCreationTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTimestamp
	}
	return nil
}

func (x *DesiredStateSummary) GetLastUpdateTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdateTimestamp
	}
	return nil
}

func (x *DesiredStateSummary) GetReplacedTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.ReplacedTimestamp
	}
	return nil
}

func (x *DesiredStateSummary) GetInputDesiredState() *model.State {
	if x != nil {
		return x.InputDesiredState
	}
	return nil
}

func (x *DesiredStateSummary) GetDesiredState() *model.State {
	if x != nil {
		return x.DesiredState
	}
	return nil
}

func (x *DesiredStateSummary) GetStartingState() *model.State {
	if x != nil {
		return x.StartingState
	}
	return nil
}

func (x *DesiredStateSummary) GetLastSeenState() *model.State {
	if x != nil {
		return x.LastSeenState
	}
	return nil
}

func (x *DesiredStateSummary) GetStatus() model.Status {
	if x != nil {
		return x.Status
	}
	return model.Status(0)
}

func (x *DesiredStateSummary) GetSource() version.Source {
	if x != nil {
		return x.Source
	}
	return version.Source(0)
}

func (x *DesiredStateSummary) GetSourceMetadata() *version.SourceMetadata {
	if x != nil {
		return x.SourceMetadata
	}
	return nil
}

func (x *DesiredStateSummary) GetPendingSetDesiredState() *PendingSetDesiredState {
	if x != nil {
		return x.PendingSetDesiredState
	}
	return nil
}

func (x *DesiredStateSummary) GetStatuses() map[string]model.Status {
	if x != nil {
		return x.Statuses
	}
	return nil
}

func (x *DesiredStateSummary) GetPreconditionStatuses() map[string]*model.ConditionState {
	if x != nil {
		return x.PreconditionStatuses
	}
	return nil
}

func (x *DesiredStateSummary) GetStatusExplanations() map[string]*StatusExplanations {
	if x != nil {
		return x.StatusExplanations
	}
	return nil
}

func (x *DesiredStateSummary) GetDebugLogs() map[string]*DebugLogs {
	if x != nil {
		return x.DebugLogs
	}
	return nil
}

func (x *DesiredStateSummary) GetActionExplanations() map[string]*model.ActionExplanation {
	if x != nil {
		return x.ActionExplanations
	}
	return nil
}

func (x *DesiredStateSummary) GetLastUpdateTimestamps() map[string]*timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdateTimestamps
	}
	return nil
}

func (x *DesiredStateSummary) GetLastFetchedTimestamps() map[string]*timestamppb.Timestamp {
	if x != nil {
		return x.LastFetchedTimestamps
	}
	return nil
}

func (x *DesiredStateSummary) GetLastAppliedTimestamps() map[string]*timestamppb.Timestamp {
	if x != nil {
		return x.LastAppliedTimestamps
	}
	return nil
}

type GetDesiredStateConvergenceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DesiredStateId         string `protobuf:"bytes,1,opt,name=desired_state_id,json=desiredStateId,proto3" json:"desired_state_id,omitempty"`
	FastNoDeprecatedFields bool   `protobuf:"varint,2,opt,name=fast_no_deprecated_fields,json=fastNoDeprecatedFields,proto3" json:"fast_no_deprecated_fields,omitempty"` // unused
}

func (x *GetDesiredStateConvergenceReq) Reset() {
	*x = GetDesiredStateConvergenceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDesiredStateConvergenceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDesiredStateConvergenceReq) ProtoMessage() {}

func (x *GetDesiredStateConvergenceReq) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDesiredStateConvergenceReq.ProtoReflect.Descriptor instead.
func (*GetDesiredStateConvergenceReq) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{9}
}

func (x *GetDesiredStateConvergenceReq) GetDesiredStateId() string {
	if x != nil {
		return x.DesiredStateId
	}
	return ""
}

func (x *GetDesiredStateConvergenceReq) GetFastNoDeprecatedFields() bool {
	if x != nil {
		return x.FastNoDeprecatedFields
	}
	return false
}

type GetDesiredStateConvergenceSummaryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Summary *DesiredStateSummary `protobuf:"bytes,1,opt,name=summary,proto3" json:"summary,omitempty"`
}

func (x *GetDesiredStateConvergenceSummaryResp) Reset() {
	*x = GetDesiredStateConvergenceSummaryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDesiredStateConvergenceSummaryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDesiredStateConvergenceSummaryResp) ProtoMessage() {}

func (x *GetDesiredStateConvergenceSummaryResp) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDesiredStateConvergenceSummaryResp.ProtoReflect.Descriptor instead.
func (*GetDesiredStateConvergenceSummaryResp) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{10}
}

func (x *GetDesiredStateConvergenceSummaryResp) GetSummary() *DesiredStateSummary {
	if x != nil {
		return x.Summary
	}
	return nil
}

type GetServiceDesiredStateConvergenceSummaryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Summary *DesiredStateSummary `protobuf:"bytes,1,opt,name=summary,proto3" json:"summary,omitempty"`
}

func (x *GetServiceDesiredStateConvergenceSummaryResp) Reset() {
	*x = GetServiceDesiredStateConvergenceSummaryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceDesiredStateConvergenceSummaryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceDesiredStateConvergenceSummaryResp) ProtoMessage() {}

func (x *GetServiceDesiredStateConvergenceSummaryResp) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceDesiredStateConvergenceSummaryResp.ProtoReflect.Descriptor instead.
func (*GetServiceDesiredStateConvergenceSummaryResp) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{11}
}

func (x *GetServiceDesiredStateConvergenceSummaryResp) GetSummary() *DesiredStateSummary {
	if x != nil {
		return x.Summary
	}
	return nil
}

type GetServiceLastConvergedStateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Application string `protobuf:"bytes,1,opt,name=application,proto3" json:"application,omitempty"`
	Service     string `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
}

func (x *GetServiceLastConvergedStateReq) Reset() {
	*x = GetServiceLastConvergedStateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceLastConvergedStateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceLastConvergedStateReq) ProtoMessage() {}

func (x *GetServiceLastConvergedStateReq) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceLastConvergedStateReq.ProtoReflect.Descriptor instead.
func (*GetServiceLastConvergedStateReq) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{12}
}

func (x *GetServiceLastConvergedStateReq) GetApplication() string {
	if x != nil {
		return x.Application
	}
	return ""
}

func (x *GetServiceLastConvergedStateReq) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

type GetServiceLastConvergedStateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceInstanceStates []*model.ServiceInstanceState `protobuf:"bytes,1,rep,name=service_instance_states,json=serviceInstanceStates,proto3" json:"service_instance_states,omitempty"`
}

func (x *GetServiceLastConvergedStateResp) Reset() {
	*x = GetServiceLastConvergedStateResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceLastConvergedStateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceLastConvergedStateResp) ProtoMessage() {}

func (x *GetServiceLastConvergedStateResp) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceLastConvergedStateResp.ProtoReflect.Descriptor instead.
func (*GetServiceLastConvergedStateResp) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{13}
}

func (x *GetServiceLastConvergedStateResp) GetServiceInstanceStates() []*model.ServiceInstanceState {
	if x != nil {
		return x.ServiceInstanceStates
	}
	return nil
}

type GetServiceDesiredStateHistoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Application            string `protobuf:"bytes,1,opt,name=application,proto3" json:"application,omitempty"`
	Service                string `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
	PageToken              string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	PageSize               int32  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	FastNoDeprecatedFields bool   `protobuf:"varint,5,opt,name=fast_no_deprecated_fields,json=fastNoDeprecatedFields,proto3" json:"fast_no_deprecated_fields,omitempty"` // unused
}

func (x *GetServiceDesiredStateHistoryReq) Reset() {
	*x = GetServiceDesiredStateHistoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceDesiredStateHistoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceDesiredStateHistoryReq) ProtoMessage() {}

func (x *GetServiceDesiredStateHistoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceDesiredStateHistoryReq.ProtoReflect.Descriptor instead.
func (*GetServiceDesiredStateHistoryReq) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{14}
}

func (x *GetServiceDesiredStateHistoryReq) GetApplication() string {
	if x != nil {
		return x.Application
	}
	return ""
}

func (x *GetServiceDesiredStateHistoryReq) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *GetServiceDesiredStateHistoryReq) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *GetServiceDesiredStateHistoryReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetServiceDesiredStateHistoryReq) GetFastNoDeprecatedFields() bool {
	if x != nil {
		return x.FastNoDeprecatedFields
	}
	return false
}

type GetServiceDesiredStateHistoryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DesiredStates []*DesiredStateSummary `protobuf:"bytes,1,rep,name=desired_states,json=desiredStates,proto3" json:"desired_states,omitempty"`
	NextPageToken string                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *GetServiceDesiredStateHistoryResp) Reset() {
	*x = GetServiceDesiredStateHistoryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceDesiredStateHistoryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceDesiredStateHistoryResp) ProtoMessage() {}

func (x *GetServiceDesiredStateHistoryResp) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceDesiredStateHistoryResp.ProtoReflect.Descriptor instead.
func (*GetServiceDesiredStateHistoryResp) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{15}
}

func (x *GetServiceDesiredStateHistoryResp) GetDesiredStates() []*DesiredStateSummary {
	if x != nil {
		return x.DesiredStates
	}
	return nil
}

func (x *GetServiceDesiredStateHistoryResp) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GetDesiredStateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DesiredStateId string `protobuf:"bytes,1,opt,name=desired_state_id,json=desiredStateId,proto3" json:"desired_state_id,omitempty"`
}

func (x *GetDesiredStateReq) Reset() {
	*x = GetDesiredStateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDesiredStateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDesiredStateReq) ProtoMessage() {}

func (x *GetDesiredStateReq) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDesiredStateReq.ProtoReflect.Descriptor instead.
func (*GetDesiredStateReq) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{16}
}

func (x *GetDesiredStateReq) GetDesiredStateId() string {
	if x != nil {
		return x.DesiredStateId
	}
	return ""
}

type GetDesiredStateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DesiredState         *model.State `protobuf:"bytes,1,opt,name=desired_state,json=desiredState,proto3" json:"desired_state,omitempty"`
	CompiledDesiredState *model.State `protobuf:"bytes,2,opt,name=compiled_desired_state,json=compiledDesiredState,proto3" json:"compiled_desired_state,omitempty"`
}

func (x *GetDesiredStateResp) Reset() {
	*x = GetDesiredStateResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDesiredStateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDesiredStateResp) ProtoMessage() {}

func (x *GetDesiredStateResp) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDesiredStateResp.ProtoReflect.Descriptor instead.
func (*GetDesiredStateResp) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{17}
}

func (x *GetDesiredStateResp) GetDesiredState() *model.State {
	if x != nil {
		return x.DesiredState
	}
	return nil
}

func (x *GetDesiredStateResp) GetCompiledDesiredState() *model.State {
	if x != nil {
		return x.CompiledDesiredState
	}
	return nil
}

type GetDesiredStateGraphReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Root desired state id to get the graph for.
	//
	// Types that are assignable to Query:
	//
	//	*GetDesiredStateGraphReq_DesiredStateId
	//	*GetDesiredStateGraphReq_QueryByService_
	Query isGetDesiredStateGraphReq_Query `protobuf_oneof:"query"`
	// Which type of entities to find. Empty list to find all entities.
	Types []model.Type `protobuf:"varint,7,rep,packed,name=types,proto3,enum=prodvana.desired_state.model.Type" json:"types,omitempty"`
	// Which annotations are required for an entity to be considered interesting.
	RequiredAnnotations *model.Annotations `protobuf:"bytes,3,opt,name=required_annotations,json=requiredAnnotations,proto3" json:"required_annotations,omitempty"`
	// For all interesting entities, also include all children up to the given depth. 0 means no children.
	Depth                         int32 `protobuf:"varint,4,opt,name=depth,proto3" json:"depth,omitempty"`
	IncludeDesiredStateTimestamps bool  `protobuf:"varint,5,opt,name=include_desired_state_timestamps,json=includeDesiredStateTimestamps,proto3" json:"include_desired_state_timestamps,omitempty"`
}

func (x *GetDesiredStateGraphReq) Reset() {
	*x = GetDesiredStateGraphReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDesiredStateGraphReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDesiredStateGraphReq) ProtoMessage() {}

func (x *GetDesiredStateGraphReq) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDesiredStateGraphReq.ProtoReflect.Descriptor instead.
func (*GetDesiredStateGraphReq) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{18}
}

func (m *GetDesiredStateGraphReq) GetQuery() isGetDesiredStateGraphReq_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (x *GetDesiredStateGraphReq) GetDesiredStateId() string {
	if x, ok := x.GetQuery().(*GetDesiredStateGraphReq_DesiredStateId); ok {
		return x.DesiredStateId
	}
	return ""
}

func (x *GetDesiredStateGraphReq) GetQueryByService() *GetDesiredStateGraphReq_QueryByService {
	if x, ok := x.GetQuery().(*GetDesiredStateGraphReq_QueryByService_); ok {
		return x.QueryByService
	}
	return nil
}

func (x *GetDesiredStateGraphReq) GetTypes() []model.Type {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *GetDesiredStateGraphReq) GetRequiredAnnotations() *model.Annotations {
	if x != nil {
		return x.RequiredAnnotations
	}
	return nil
}

func (x *GetDesiredStateGraphReq) GetDepth() int32 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *GetDesiredStateGraphReq) GetIncludeDesiredStateTimestamps() bool {
	if x != nil {
		return x.IncludeDesiredStateTimestamps
	}
	return false
}

type isGetDesiredStateGraphReq_Query interface {
	isGetDesiredStateGraphReq_Query()
}

type GetDesiredStateGraphReq_DesiredStateId struct {
	DesiredStateId string `protobuf:"bytes,1,opt,name=desired_state_id,json=desiredStateId,proto3,oneof"`
}

type GetDesiredStateGraphReq_QueryByService_ struct {
	QueryByService *GetDesiredStateGraphReq_QueryByService `protobuf:"bytes,6,opt,name=query_by_service,json=queryByService,proto3,oneof"`
}

func (*GetDesiredStateGraphReq_DesiredStateId) isGetDesiredStateGraphReq_Query() {}

func (*GetDesiredStateGraphReq_QueryByService_) isGetDesiredStateGraphReq_Query() {}

type DesiredStateTimestamps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreationTimestamp   *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=creation_timestamp,json=creationTimestamp,proto3" json:"creation_timestamp,omitempty"`
	LastUpdateTimestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=last_update_timestamp,json=lastUpdateTimestamp,proto3" json:"last_update_timestamp,omitempty"`
	// will only be set if desired state has been replaced
	ReplacedTimestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=replaced_timestamp,json=replacedTimestamp,proto3" json:"replaced_timestamp,omitempty"`
}

func (x *DesiredStateTimestamps) Reset() {
	*x = DesiredStateTimestamps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DesiredStateTimestamps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DesiredStateTimestamps) ProtoMessage() {}

func (x *DesiredStateTimestamps) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DesiredStateTimestamps.ProtoReflect.Descriptor instead.
func (*DesiredStateTimestamps) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{19}
}

func (x *DesiredStateTimestamps) GetCreationTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTimestamp
	}
	return nil
}

func (x *DesiredStateTimestamps) GetLastUpdateTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdateTimestamp
	}
	return nil
}

func (x *DesiredStateTimestamps) GetReplacedTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.ReplacedTimestamp
	}
	return nil
}

type GetDesiredStateGraphResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Resp:
	//
	//	*GetDesiredStateGraphResp_EntityGraph
	//	*GetDesiredStateGraphResp_PendingSetDesiredState
	Resp       isGetDesiredStateGraphResp_Resp `protobuf_oneof:"resp"`
	Timestamps *DesiredStateTimestamps         `protobuf:"bytes,3,opt,name=timestamps,proto3" json:"timestamps,omitempty"`
}

func (x *GetDesiredStateGraphResp) Reset() {
	*x = GetDesiredStateGraphResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDesiredStateGraphResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDesiredStateGraphResp) ProtoMessage() {}

func (x *GetDesiredStateGraphResp) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDesiredStateGraphResp.ProtoReflect.Descriptor instead.
func (*GetDesiredStateGraphResp) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{20}
}

func (m *GetDesiredStateGraphResp) GetResp() isGetDesiredStateGraphResp_Resp {
	if m != nil {
		return m.Resp
	}
	return nil
}

func (x *GetDesiredStateGraphResp) GetEntityGraph() *model.EntityGraph {
	if x, ok := x.GetResp().(*GetDesiredStateGraphResp_EntityGraph); ok {
		return x.EntityGraph
	}
	return nil
}

func (x *GetDesiredStateGraphResp) GetPendingSetDesiredState() *PendingSetDesiredState {
	if x, ok := x.GetResp().(*GetDesiredStateGraphResp_PendingSetDesiredState); ok {
		return x.PendingSetDesiredState
	}
	return nil
}

func (x *GetDesiredStateGraphResp) GetTimestamps() *DesiredStateTimestamps {
	if x != nil {
		return x.Timestamps
	}
	return nil
}

type isGetDesiredStateGraphResp_Resp interface {
	isGetDesiredStateGraphResp_Resp()
}

type GetDesiredStateGraphResp_EntityGraph struct {
	EntityGraph *model.EntityGraph `protobuf:"bytes,1,opt,name=entity_graph,json=entityGraph,proto3,oneof"`
}

type GetDesiredStateGraphResp_PendingSetDesiredState struct {
	PendingSetDesiredState *PendingSetDesiredState `protobuf:"bytes,2,opt,name=pending_set_desired_state,json=pendingSetDesiredState,proto3,oneof"`
}

func (*GetDesiredStateGraphResp_EntityGraph) isGetDesiredStateGraphResp_Resp() {}

func (*GetDesiredStateGraphResp_PendingSetDesiredState) isGetDesiredStateGraphResp_Resp() {}

type GetServiceLatestDesiredStateIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Application string `protobuf:"bytes,1,opt,name=application,proto3" json:"application,omitempty"`
	Service     string `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
}

func (x *GetServiceLatestDesiredStateIdReq) Reset() {
	*x = GetServiceLatestDesiredStateIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceLatestDesiredStateIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceLatestDesiredStateIdReq) ProtoMessage() {}

func (x *GetServiceLatestDesiredStateIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceLatestDesiredStateIdReq.ProtoReflect.Descriptor instead.
func (*GetServiceLatestDesiredStateIdReq) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{21}
}

func (x *GetServiceLatestDesiredStateIdReq) GetApplication() string {
	if x != nil {
		return x.Application
	}
	return ""
}

func (x *GetServiceLatestDesiredStateIdReq) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

type GetServiceLatestDesiredStateIdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Resp:
	//
	//	*GetServiceLatestDesiredStateIdResp_DesiredStateId
	//	*GetServiceLatestDesiredStateIdResp_PendingSetDesiredState
	Resp isGetServiceLatestDesiredStateIdResp_Resp `protobuf_oneof:"resp"`
}

func (x *GetServiceLatestDesiredStateIdResp) Reset() {
	*x = GetServiceLatestDesiredStateIdResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceLatestDesiredStateIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceLatestDesiredStateIdResp) ProtoMessage() {}

func (x *GetServiceLatestDesiredStateIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceLatestDesiredStateIdResp.ProtoReflect.Descriptor instead.
func (*GetServiceLatestDesiredStateIdResp) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{22}
}

func (m *GetServiceLatestDesiredStateIdResp) GetResp() isGetServiceLatestDesiredStateIdResp_Resp {
	if m != nil {
		return m.Resp
	}
	return nil
}

func (x *GetServiceLatestDesiredStateIdResp) GetDesiredStateId() string {
	if x, ok := x.GetResp().(*GetServiceLatestDesiredStateIdResp_DesiredStateId); ok {
		return x.DesiredStateId
	}
	return ""
}

func (x *GetServiceLatestDesiredStateIdResp) GetPendingSetDesiredState() *PendingSetDesiredState {
	if x, ok := x.GetResp().(*GetServiceLatestDesiredStateIdResp_PendingSetDesiredState); ok {
		return x.PendingSetDesiredState
	}
	return nil
}

type isGetServiceLatestDesiredStateIdResp_Resp interface {
	isGetServiceLatestDesiredStateIdResp_Resp()
}

type GetServiceLatestDesiredStateIdResp_DesiredStateId struct {
	DesiredStateId string `protobuf:"bytes,1,opt,name=desired_state_id,json=desiredStateId,proto3,oneof"`
}

type GetServiceLatestDesiredStateIdResp_PendingSetDesiredState struct {
	PendingSetDesiredState *PendingSetDesiredState `protobuf:"bytes,2,opt,name=pending_set_desired_state,json=pendingSetDesiredState,proto3,oneof"`
}

func (*GetServiceLatestDesiredStateIdResp_DesiredStateId) isGetServiceLatestDesiredStateIdResp_Resp() {
}

func (*GetServiceLatestDesiredStateIdResp_PendingSetDesiredState) isGetServiceLatestDesiredStateIdResp_Resp() {
}

type ValidateDesiredStateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DesiredState         *model.State `protobuf:"bytes,1,opt,name=desired_state,json=desiredState,proto3" json:"desired_state,omitempty"`
	CompiledDesiredState *model.State `protobuf:"bytes,2,opt,name=compiled_desired_state,json=compiledDesiredState,proto3" json:"compiled_desired_state,omitempty"`
}

func (x *ValidateDesiredStateResp) Reset() {
	*x = ValidateDesiredStateResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateDesiredStateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateDesiredStateResp) ProtoMessage() {}

func (x *ValidateDesiredStateResp) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateDesiredStateResp.ProtoReflect.Descriptor instead.
func (*ValidateDesiredStateResp) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{23}
}

func (x *ValidateDesiredStateResp) GetDesiredState() *model.State {
	if x != nil {
		return x.DesiredState
	}
	return nil
}

func (x *ValidateDesiredStateResp) GetCompiledDesiredState() *model.State {
	if x != nil {
		return x.CompiledDesiredState
	}
	return nil
}

type SetManualApprovalReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DesiredStateId string `protobuf:"bytes,1,opt,name=desired_state_id,json=desiredStateId,proto3" json:"desired_state_id,omitempty"`
	// string application = 2 [(validate.rules).string.min_len = 1];
	// string service = 3 [(validate.rules).string.min_len = 1];
	// string release_channel = 4 [(validate.rules).string.min_len = 1];
	Topic      string `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	Reject     bool   `protobuf:"varint,3,opt,name=reject,proto3" json:"reject,omitempty"`
	SignalType string `protobuf:"bytes,5,opt,name=signal_type,json=signalType,proto3" json:"signal_type,omitempty"`
}

func (x *SetManualApprovalReq) Reset() {
	*x = SetManualApprovalReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetManualApprovalReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetManualApprovalReq) ProtoMessage() {}

func (x *SetManualApprovalReq) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetManualApprovalReq.ProtoReflect.Descriptor instead.
func (*SetManualApprovalReq) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{24}
}

func (x *SetManualApprovalReq) GetDesiredStateId() string {
	if x != nil {
		return x.DesiredStateId
	}
	return ""
}

func (x *SetManualApprovalReq) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *SetManualApprovalReq) GetReject() bool {
	if x != nil {
		return x.Reject
	}
	return false
}

func (x *SetManualApprovalReq) GetSignalType() string {
	if x != nil {
		return x.SignalType
	}
	return ""
}

type SetManualApprovalResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetManualApprovalResp) Reset() {
	*x = SetManualApprovalResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetManualApprovalResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetManualApprovalResp) ProtoMessage() {}

func (x *SetManualApprovalResp) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetManualApprovalResp.ProtoReflect.Descriptor instead.
func (*SetManualApprovalResp) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{25}
}

type PromoteDeliveryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DesiredStateId string `protobuf:"bytes,1,opt,name=desired_state_id,json=desiredStateId,proto3" json:"desired_state_id,omitempty"`
	Stage          int64  `protobuf:"varint,2,opt,name=stage,proto3" json:"stage,omitempty"`
	Full           bool   `protobuf:"varint,3,opt,name=full,proto3" json:"full,omitempty"`
	Source         string `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *PromoteDeliveryReq) Reset() {
	*x = PromoteDeliveryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PromoteDeliveryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromoteDeliveryReq) ProtoMessage() {}

func (x *PromoteDeliveryReq) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromoteDeliveryReq.ProtoReflect.Descriptor instead.
func (*PromoteDeliveryReq) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{26}
}

func (x *PromoteDeliveryReq) GetDesiredStateId() string {
	if x != nil {
		return x.DesiredStateId
	}
	return ""
}

func (x *PromoteDeliveryReq) GetStage() int64 {
	if x != nil {
		return x.Stage
	}
	return 0
}

func (x *PromoteDeliveryReq) GetFull() bool {
	if x != nil {
		return x.Full
	}
	return false
}

func (x *PromoteDeliveryReq) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

type PromoteDeliveryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PromoteDeliveryResp) Reset() {
	*x = PromoteDeliveryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PromoteDeliveryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromoteDeliveryResp) ProtoMessage() {}

func (x *PromoteDeliveryResp) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromoteDeliveryResp.ProtoReflect.Descriptor instead.
func (*PromoteDeliveryResp) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{27}
}

type BypassProtectionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DesiredStateId string `protobuf:"bytes,1,opt,name=desired_state_id,json=desiredStateId,proto3" json:"desired_state_id,omitempty"`
	Source         string `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *BypassProtectionReq) Reset() {
	*x = BypassProtectionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BypassProtectionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BypassProtectionReq) ProtoMessage() {}

func (x *BypassProtectionReq) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BypassProtectionReq.ProtoReflect.Descriptor instead.
func (*BypassProtectionReq) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{28}
}

func (x *BypassProtectionReq) GetDesiredStateId() string {
	if x != nil {
		return x.DesiredStateId
	}
	return ""
}

func (x *BypassProtectionReq) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

type BypassProtectionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BypassProtectionResp) Reset() {
	*x = BypassProtectionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BypassProtectionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BypassProtectionResp) ProtoMessage() {}

func (x *BypassProtectionResp) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BypassProtectionResp.ProtoReflect.Descriptor instead.
func (*BypassProtectionResp) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{29}
}

type GetDesiredStateGraphReq_QueryByService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Application string `protobuf:"bytes,1,opt,name=application,proto3" json:"application,omitempty"`
	Service     string `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
}

func (x *GetDesiredStateGraphReq_QueryByService) Reset() {
	*x = GetDesiredStateGraphReq_QueryByService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_desired_state_manager_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDesiredStateGraphReq_QueryByService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDesiredStateGraphReq_QueryByService) ProtoMessage() {}

func (x *GetDesiredStateGraphReq_QueryByService) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_desired_state_manager_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDesiredStateGraphReq_QueryByService.ProtoReflect.Descriptor instead.
func (*GetDesiredStateGraphReq_QueryByService) Descriptor() ([]byte, []int) {
	return file_prodvana_desired_state_manager_proto_rawDescGZIP(), []int{18, 0}
}

func (x *GetDesiredStateGraphReq_QueryByService) GetApplication() string {
	if x != nil {
		return x.Application
	}
	return ""
}

func (x *GetDesiredStateGraphReq_QueryByService) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

var File_prodvana_desired_state_manager_proto protoreflect.FileDescriptor

var file_prodvana_desired_state_manager_proto_rawDesc = []byte{
	0x0a, 0x24, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x64, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61,
	0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x70,
	0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x74, 0x61,
	0x73, 0x6b, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61,
	0x2f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61,
	0x6e, 0x61, 0x2f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x70, 0x72, 0x6f, 0x64,
	0x76, 0x61, 0x6e, 0x61, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc3, 0x02, 0x0a, 0x12,
	0x53, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x52, 0x0a, 0x0d, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x40, 0x0a, 0x1d, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x73,
	0x65, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x41, 0x73, 0x79,
	0x6e, 0x63, 0x53, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x22, 0xe4, 0x02, 0x0a, 0x17, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x52, 0x0a,
	0x0d, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x69, 0x0a,
	0x18, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x5f, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x6e, 0x6c, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x45, 0x78, 0x70,
	0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x3c, 0x0a, 0x1a, 0x64, 0x69,
	0x73, 0x72, 0x65, 0x67, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18,
	0x64, 0x69, 0x73, 0x72, 0x65, 0x67, 0x61, 0x72, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x3f, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x44,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x28, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x22, 0x90, 0x01, 0x0a, 0x16, 0x50, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x47, 0x72, 0x61, 0x70, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x4c, 0x0a, 0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x22, 0xb6, 0x01, 0x0a,
	0x2b, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x6e,
	0x63, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x0b,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x66, 0x61,
	0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x66,
	0x61, 0x73, 0x74, 0x4e, 0x6f, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x76, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45,
	0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x60, 0x0a, 0x13, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x78,
	0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x52, 0x0a,
	0x09, 0x44, 0x65, 0x62, 0x75, 0x67, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x45, 0x0a, 0x0a, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x4c, 0x6f, 0x67, 0x52, 0x09, 0x64, 0x65, 0x62, 0x75, 0x67, 0x4c, 0x6f, 0x67,
	0x73, 0x22, 0xa1, 0x02, 0x0a, 0x16, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74,
	0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x59, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c,
	0x65, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e,
	0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x14, 0x63, 0x6f, 0x6d,
	0x70, 0x69, 0x6c, 0x65, 0x64, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x40, 0x0a, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e,
	0x61, 0x2e, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x40, 0x0a, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2e, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x95, 0x15, 0x0a, 0x13, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x4c, 0x0a,
	0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x0b,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x47, 0x72, 0x61, 0x70, 0x68, 0x12, 0x49, 0x0a, 0x12, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x4e, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x49, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11,
	0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x53, 0x0a, 0x13, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x11, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x48, 0x0a, 0x0d, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x4a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4b, 0x0a, 0x0f,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61,
	0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74,
	0x53, 0x65, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61,
	0x6e, 0x61, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x0f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x69, 0x0a, 0x19, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61,
	0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x16, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x53, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x55, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x7a, 0x0a, 0x15, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61,
	0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x44,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x2e, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x70, 0x72,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x65, 0x73, 0x12, 0x74, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x65, 0x78, 0x70,
	0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x43, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x78, 0x70, 0x6c,
	0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x59, 0x0a, 0x0a, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x4c,
	0x6f, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x64, 0x65, 0x62, 0x75, 0x67, 0x4c,
	0x6f, 0x67, 0x73, 0x12, 0x74, 0x0a, 0x13, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x78,
	0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x43, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70,
	0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x7b, 0x0a, 0x16, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x12, 0x7e, 0x0a, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66,
	0x65, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61,
	0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x65, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x15, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x65, 0x74, 0x63, 0x68, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x12, 0x7e, 0x0a, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61,
	0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x15, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x1a, 0x61, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x75, 0x0a, 0x19, 0x50, 0x72, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x42, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61,
	0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x71, 0x0a, 0x17, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x40, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x78, 0x70, 0x6c,
	0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x5f, 0x0a, 0x0e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x4c, 0x6f, 0x67, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e,
	0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x76, 0x0a, 0x17, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78,
	0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x45, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x63, 0x0a, 0x19,
	0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x64, 0x0a, 0x1a, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x65, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x64, 0x0a, 0x1a, 0x4c, 0x61, 0x73, 0x74, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8d, 0x01,
	0x0a, 0x1d, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x31, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x49, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x5f, 0x64, 0x65,
	0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x66, 0x61, 0x73, 0x74, 0x4e, 0x6f, 0x44, 0x65, 0x70,
	0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x6e, 0x0a,
	0x25, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x45, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61,
	0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x75, 0x0a,
	0x2c, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x6e,
	0x63, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x45, 0x0a,
	0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x07, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x22, 0x6f, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6a, 0x0a, 0x17, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x15, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x22, 0xe7, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x0b, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x6f,
	0x5f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x66, 0x61, 0x73, 0x74, 0x4e, 0x6f,
	0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x22, 0x9f, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x52, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0d, 0x64, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0x47, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x64, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x22, 0xba, 0x01, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x48, 0x0a, 0x0d, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x0c, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x59, 0x0a,
	0x16, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x14, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x44, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xa6, 0x04, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x47, 0x72, 0x61, 0x70,
	0x68, 0x52, 0x65, 0x71, 0x12, 0x33, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x6a, 0x0a, 0x10, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x47, 0x72, 0x61, 0x70,
	0x68, 0x52, 0x65, 0x71, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x5c, 0x0a, 0x14, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x13, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x64, 0x65,
	0x70, 0x74, 0x68, 0x12, 0x47, 0x0a, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x64,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x1a, 0x5e, 0x0a, 0x0e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x29,
	0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x07, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x07, 0x0a, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x22, 0xfe, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x12, 0x49, 0x0a, 0x12,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x4e, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x49, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x11, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x22, 0xaf, 0x02, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x4e, 0x0a, 0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61,
	0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x47, 0x72, 0x61, 0x70, 0x68,
	0x48, 0x00, 0x52, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x47, 0x72, 0x61, 0x70, 0x68, 0x12,
	0x6b, 0x0a, 0x19, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x64,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x48, 0x00, 0x52, 0x16, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74,
	0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4e, 0x0a, 0x0a,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73,
	0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x42, 0x06, 0x0a, 0x04,
	0x72, 0x65, 0x73, 0x70, 0x22, 0x71, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x0b, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0xc5, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x44, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2a,
	0x0a, 0x10, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x6b, 0x0a, 0x19, 0x70, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x74, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x16, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x72, 0x65, 0x73, 0x70, 0x22,
	0xbf, 0x01, 0x0a, 0x18, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x48, 0x0a, 0x0d,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x59, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c,
	0x65, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e,
	0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x14, 0x63, 0x6f, 0x6d,
	0x70, 0x69, 0x6c, 0x65, 0x64, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x22, 0xa7, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x10, 0x64, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x64,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x22, 0x17, 0x0a, 0x15, 0x53,
	0x65, 0x74, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x92, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x10, 0x64,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x66, 0x75, 0x6c, 0x6c, 0x12, 0x1f, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x15, 0x0a, 0x13, 0x50, 0x72, 0x6f,
	0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x69, 0x0a, 0x13, 0x42, 0x79, 0x70, 0x61, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x16, 0x0a, 0x14, 0x42,
	0x79, 0x70, 0x61, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x32, 0xb3, 0x13, 0x0a, 0x13, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x89, 0x01, 0x0a, 0x0f,
	0x53, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17,
	0x3a, 0x01, 0x2a, 0x22, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x97, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x47, 0x72, 0x61, 0x70, 0x68, 0x12, 0x2a,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x73, 0x70, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1f, 0x3a, 0x01, 0x2a, 0x22, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x12, 0x89, 0x02, 0x0a, 0x28, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x43,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x1a, 0x44, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x22, 0x52, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x4c, 0x12, 0x4a, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x3d, 0x2a, 0x7d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x3d, 0x2a, 0x7d, 0x2f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0xee, 0x01,
	0x0a, 0x1e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64,
	0x12, 0x39, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x3a, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x55, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4f, 0x12,
	0x4d, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x7b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3d, 0x2a,
	0x7d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x3d, 0x2a, 0x7d, 0x2f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x12, 0xe0,
	0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x61, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x12, 0x37, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x38, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x61, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x4c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x46, 0x12, 0x44, 0x2f, 0x76, 0x31,
	0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3d, 0x2a, 0x7d, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x3d,
	0x2a, 0x7d, 0x2f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65,
	0x64, 0x12, 0xe2, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x38, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x39, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x22, 0x4c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x46,
	0x12, 0x44, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x7b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3d,
	0x2a, 0x7d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x3d, 0x2a, 0x7d, 0x2f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x9b, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e,
	0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x12, 0x27, 0x2f, 0x76, 0x31,
	0x2f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x2f,
	0x7b, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69,
	0x64, 0x3d, 0x2a, 0x7d, 0x12, 0xb0, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x12, 0x2f, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x30,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x12, 0x2d, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x7b, 0x64, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x3d, 0x2a,
	0x7d, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x12, 0xd2, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x44,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x35, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x3d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x12, 0x2f, 0x2f, 0x76, 0x31,
	0x2f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x2f,
	0x7b, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69,
	0x64, 0x3d, 0x2a, 0x7d, 0x2f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0xa1, 0x01, 0x0a,
	0x14, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61,
	0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e,
	0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20,
	0x3a, 0x01, 0x2a, 0x22, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x12, 0xa8, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e,
	0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x53, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x65,
	0x74, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x01, 0x2a, 0x22, 0x2b,
	0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x2f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x9a, 0x01, 0x0a, 0x0f,
	0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x12,
	0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28,
	0x3a, 0x01, 0x2a, 0x22, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x12, 0x9e, 0x01, 0x0a, 0x10, 0x42, 0x79, 0x70,
	0x61, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x42, 0x79, 0x70, 0x61, 0x73, 0x73, 0x50, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x42, 0x79, 0x70, 0x61, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29,
	0x3a, 0x01, 0x2a, 0x22, 0x24, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x52, 0x5a, 0x50, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61,
	0x2f, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2d, 0x73, 0x64, 0x6b,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_prodvana_desired_state_manager_proto_rawDescOnce sync.Once
	file_prodvana_desired_state_manager_proto_rawDescData = file_prodvana_desired_state_manager_proto_rawDesc
)

func file_prodvana_desired_state_manager_proto_rawDescGZIP() []byte {
	file_prodvana_desired_state_manager_proto_rawDescOnce.Do(func() {
		file_prodvana_desired_state_manager_proto_rawDescData = protoimpl.X.CompressGZIP(file_prodvana_desired_state_manager_proto_rawDescData)
	})
	return file_prodvana_desired_state_manager_proto_rawDescData
}

var file_prodvana_desired_state_manager_proto_msgTypes = make([]protoimpl.MessageInfo, 39)
var file_prodvana_desired_state_manager_proto_goTypes = []interface{}{
	(*SetDesiredStateReq)(nil),                           // 0: prodvana.desired_state.SetDesiredStateReq
	(*ValidateDesiredStateReq)(nil),                      // 1: prodvana.desired_state.ValidateDesiredStateReq
	(*SetDesiredStateResp)(nil),                          // 2: prodvana.desired_state.SetDesiredStateResp
	(*PreviewEntityGraphResp)(nil),                       // 3: prodvana.desired_state.PreviewEntityGraphResp
	(*GetServiceDesiredStateConvergenceSummaryReq)(nil),  // 4: prodvana.desired_state.GetServiceDesiredStateConvergenceSummaryReq
	(*StatusExplanations)(nil),                           // 5: prodvana.desired_state.StatusExplanations
	(*DebugLogs)(nil),                                    // 6: prodvana.desired_state.DebugLogs
	(*PendingSetDesiredState)(nil),                       // 7: prodvana.desired_state.PendingSetDesiredState
	(*DesiredStateSummary)(nil),                          // 8: prodvana.desired_state.DesiredStateSummary
	(*GetDesiredStateConvergenceReq)(nil),                // 9: prodvana.desired_state.GetDesiredStateConvergenceReq
	(*GetDesiredStateConvergenceSummaryResp)(nil),        // 10: prodvana.desired_state.GetDesiredStateConvergenceSummaryResp
	(*GetServiceDesiredStateConvergenceSummaryResp)(nil), // 11: prodvana.desired_state.GetServiceDesiredStateConvergenceSummaryResp
	(*GetServiceLastConvergedStateReq)(nil),              // 12: prodvana.desired_state.GetServiceLastConvergedStateReq
	(*GetServiceLastConvergedStateResp)(nil),             // 13: prodvana.desired_state.GetServiceLastConvergedStateResp
	(*GetServiceDesiredStateHistoryReq)(nil),             // 14: prodvana.desired_state.GetServiceDesiredStateHistoryReq
	(*GetServiceDesiredStateHistoryResp)(nil),            // 15: prodvana.desired_state.GetServiceDesiredStateHistoryResp
	(*GetDesiredStateReq)(nil),                           // 16: prodvana.desired_state.GetDesiredStateReq
	(*GetDesiredStateResp)(nil),                          // 17: prodvana.desired_state.GetDesiredStateResp
	(*GetDesiredStateGraphReq)(nil),                      // 18: prodvana.desired_state.GetDesiredStateGraphReq
	(*DesiredStateTimestamps)(nil),                       // 19: prodvana.desired_state.DesiredStateTimestamps
	(*GetDesiredStateGraphResp)(nil),                     // 20: prodvana.desired_state.GetDesiredStateGraphResp
	(*GetServiceLatestDesiredStateIdReq)(nil),            // 21: prodvana.desired_state.GetServiceLatestDesiredStateIdReq
	(*GetServiceLatestDesiredStateIdResp)(nil),           // 22: prodvana.desired_state.GetServiceLatestDesiredStateIdResp
	(*ValidateDesiredStateResp)(nil),                     // 23: prodvana.desired_state.ValidateDesiredStateResp
	(*SetManualApprovalReq)(nil),                         // 24: prodvana.desired_state.SetManualApprovalReq
	(*SetManualApprovalResp)(nil),                        // 25: prodvana.desired_state.SetManualApprovalResp
	(*PromoteDeliveryReq)(nil),                           // 26: prodvana.desired_state.PromoteDeliveryReq
	(*PromoteDeliveryResp)(nil),                          // 27: prodvana.desired_state.PromoteDeliveryResp
	(*BypassProtectionReq)(nil),                          // 28: prodvana.desired_state.BypassProtectionReq
	(*BypassProtectionResp)(nil),                         // 29: prodvana.desired_state.BypassProtectionResp
	nil,                                                  // 30: prodvana.desired_state.DesiredStateSummary.StatusesEntry
	nil,                                                  // 31: prodvana.desired_state.DesiredStateSummary.PreconditionStatusesEntry
	nil,                                                  // 32: prodvana.desired_state.DesiredStateSummary.StatusExplanationsEntry
	nil,                                                  // 33: prodvana.desired_state.DesiredStateSummary.DebugLogsEntry
	nil,                                                  // 34: prodvana.desired_state.DesiredStateSummary.ActionExplanationsEntry
	nil,                                                  // 35: prodvana.desired_state.DesiredStateSummary.LastUpdateTimestampsEntry
	nil,                                                  // 36: prodvana.desired_state.DesiredStateSummary.LastFetchedTimestampsEntry
	nil,                                                  // 37: prodvana.desired_state.DesiredStateSummary.LastAppliedTimestampsEntry
	(*GetDesiredStateGraphReq_QueryByService)(nil),       // 38: prodvana.desired_state.GetDesiredStateGraphReq.QueryByService
	(*model.State)(nil),                                  // 39: prodvana.desired_state.model.State
	(version.Source)(0),                                  // 40: prodvana.version.Source
	(*version.SourceMetadata)(nil),                       // 41: prodvana.version.SourceMetadata
	(*service.CompiledServiceInstanceConfig)(nil),        // 42: prodvana.service.CompiledServiceInstanceConfig
	(*model.EntityGraph)(nil),                            // 43: prodvana.desired_state.model.EntityGraph
	(*model.StatusExplanation)(nil),                      // 44: prodvana.desired_state.model.StatusExplanation
	(*model.DebugLog)(nil),                               // 45: prodvana.desired_state.model.DebugLog
	(async_task.TaskStatus)(0),                           // 46: prodvana.async_task.TaskStatus
	(*async_task.TaskResult)(nil),                        // 47: prodvana.async_task.TaskResult
	(*timestamppb.Timestamp)(nil),                        // 48: google.protobuf.Timestamp
	(model.Status)(0),                                    // 49: prodvana.desired_state.model.Status
	(*model.ServiceInstanceState)(nil),                   // 50: prodvana.desired_state.model.ServiceInstanceState
	(model.Type)(0),                                      // 51: prodvana.desired_state.model.Type
	(*model.Annotations)(nil),                            // 52: prodvana.desired_state.model.Annotations
	(*model.ConditionState)(nil),                         // 53: prodvana.desired_state.model.ConditionState
	(*model.ActionExplanation)(nil),                      // 54: prodvana.desired_state.model.ActionExplanation
}
var file_prodvana_desired_state_manager_proto_depIdxs = []int32{
	39, // 0: prodvana.desired_state.SetDesiredStateReq.desired_state:type_name -> prodvana.desired_state.model.State
	40, // 1: prodvana.desired_state.SetDesiredStateReq.source:type_name -> prodvana.version.Source
	41, // 2: prodvana.desired_state.SetDesiredStateReq.source_metadata:type_name -> prodvana.version.SourceMetadata
	39, // 3: prodvana.desired_state.ValidateDesiredStateReq.desired_state:type_name -> prodvana.desired_state.model.State
	42, // 4: prodvana.desired_state.ValidateDesiredStateReq.service_instance_configs:type_name -> prodvana.service.CompiledServiceInstanceConfig
	43, // 5: prodvana.desired_state.PreviewEntityGraphResp.entity_graph:type_name -> prodvana.desired_state.model.EntityGraph
	44, // 6: prodvana.desired_state.StatusExplanations.status_explanations:type_name -> prodvana.desired_state.model.StatusExplanation
	45, // 7: prodvana.desired_state.DebugLogs.debug_logs:type_name -> prodvana.desired_state.model.DebugLog
	39, // 8: prodvana.desired_state.PendingSetDesiredState.compiled_desired_state:type_name -> prodvana.desired_state.model.State
	46, // 9: prodvana.desired_state.PendingSetDesiredState.task_status:type_name -> prodvana.async_task.TaskStatus
	47, // 10: prodvana.desired_state.PendingSetDesiredState.task_result:type_name -> prodvana.async_task.TaskResult
	43, // 11: prodvana.desired_state.DesiredStateSummary.entity_graph:type_name -> prodvana.desired_state.model.EntityGraph
	48, // 12: prodvana.desired_state.DesiredStateSummary.creation_timestamp:type_name -> google.protobuf.Timestamp
	48, // 13: prodvana.desired_state.DesiredStateSummary.last_update_timestamp:type_name -> google.protobuf.Timestamp
	48, // 14: prodvana.desired_state.DesiredStateSummary.replaced_timestamp:type_name -> google.protobuf.Timestamp
	39, // 15: prodvana.desired_state.DesiredStateSummary.input_desired_state:type_name -> prodvana.desired_state.model.State
	39, // 16: prodvana.desired_state.DesiredStateSummary.desired_state:type_name -> prodvana.desired_state.model.State
	39, // 17: prodvana.desired_state.DesiredStateSummary.starting_state:type_name -> prodvana.desired_state.model.State
	39, // 18: prodvana.desired_state.DesiredStateSummary.last_seen_state:type_name -> prodvana.desired_state.model.State
	49, // 19: prodvana.desired_state.DesiredStateSummary.status:type_name -> prodvana.desired_state.model.Status
	40, // 20: prodvana.desired_state.DesiredStateSummary.source:type_name -> prodvana.version.Source
	41, // 21: prodvana.desired_state.DesiredStateSummary.source_metadata:type_name -> prodvana.version.SourceMetadata
	7,  // 22: prodvana.desired_state.DesiredStateSummary.pending_set_desired_state:type_name -> prodvana.desired_state.PendingSetDesiredState
	30, // 23: prodvana.desired_state.DesiredStateSummary.statuses:type_name -> prodvana.desired_state.DesiredStateSummary.StatusesEntry
	31, // 24: prodvana.desired_state.DesiredStateSummary.precondition_statuses:type_name -> prodvana.desired_state.DesiredStateSummary.PreconditionStatusesEntry
	32, // 25: prodvana.desired_state.DesiredStateSummary.status_explanations:type_name -> prodvana.desired_state.DesiredStateSummary.StatusExplanationsEntry
	33, // 26: prodvana.desired_state.DesiredStateSummary.debug_logs:type_name -> prodvana.desired_state.DesiredStateSummary.DebugLogsEntry
	34, // 27: prodvana.desired_state.DesiredStateSummary.action_explanations:type_name -> prodvana.desired_state.DesiredStateSummary.ActionExplanationsEntry
	35, // 28: prodvana.desired_state.DesiredStateSummary.last_update_timestamps:type_name -> prodvana.desired_state.DesiredStateSummary.LastUpdateTimestampsEntry
	36, // 29: prodvana.desired_state.DesiredStateSummary.last_fetched_timestamps:type_name -> prodvana.desired_state.DesiredStateSummary.LastFetchedTimestampsEntry
	37, // 30: prodvana.desired_state.DesiredStateSummary.last_applied_timestamps:type_name -> prodvana.desired_state.DesiredStateSummary.LastAppliedTimestampsEntry
	8,  // 31: prodvana.desired_state.GetDesiredStateConvergenceSummaryResp.summary:type_name -> prodvana.desired_state.DesiredStateSummary
	8,  // 32: prodvana.desired_state.GetServiceDesiredStateConvergenceSummaryResp.summary:type_name -> prodvana.desired_state.DesiredStateSummary
	50, // 33: prodvana.desired_state.GetServiceLastConvergedStateResp.service_instance_states:type_name -> prodvana.desired_state.model.ServiceInstanceState
	8,  // 34: prodvana.desired_state.GetServiceDesiredStateHistoryResp.desired_states:type_name -> prodvana.desired_state.DesiredStateSummary
	39, // 35: prodvana.desired_state.GetDesiredStateResp.desired_state:type_name -> prodvana.desired_state.model.State
	39, // 36: prodvana.desired_state.GetDesiredStateResp.compiled_desired_state:type_name -> prodvana.desired_state.model.State
	38, // 37: prodvana.desired_state.GetDesiredStateGraphReq.query_by_service:type_name -> prodvana.desired_state.GetDesiredStateGraphReq.QueryByService
	51, // 38: prodvana.desired_state.GetDesiredStateGraphReq.types:type_name -> prodvana.desired_state.model.Type
	52, // 39: prodvana.desired_state.GetDesiredStateGraphReq.required_annotations:type_name -> prodvana.desired_state.model.Annotations
	48, // 40: prodvana.desired_state.DesiredStateTimestamps.creation_timestamp:type_name -> google.protobuf.Timestamp
	48, // 41: prodvana.desired_state.DesiredStateTimestamps.last_update_timestamp:type_name -> google.protobuf.Timestamp
	48, // 42: prodvana.desired_state.DesiredStateTimestamps.replaced_timestamp:type_name -> google.protobuf.Timestamp
	43, // 43: prodvana.desired_state.GetDesiredStateGraphResp.entity_graph:type_name -> prodvana.desired_state.model.EntityGraph
	7,  // 44: prodvana.desired_state.GetDesiredStateGraphResp.pending_set_desired_state:type_name -> prodvana.desired_state.PendingSetDesiredState
	19, // 45: prodvana.desired_state.GetDesiredStateGraphResp.timestamps:type_name -> prodvana.desired_state.DesiredStateTimestamps
	7,  // 46: prodvana.desired_state.GetServiceLatestDesiredStateIdResp.pending_set_desired_state:type_name -> prodvana.desired_state.PendingSetDesiredState
	39, // 47: prodvana.desired_state.ValidateDesiredStateResp.desired_state:type_name -> prodvana.desired_state.model.State
	39, // 48: prodvana.desired_state.ValidateDesiredStateResp.compiled_desired_state:type_name -> prodvana.desired_state.model.State
	49, // 49: prodvana.desired_state.DesiredStateSummary.StatusesEntry.value:type_name -> prodvana.desired_state.model.Status
	53, // 50: prodvana.desired_state.DesiredStateSummary.PreconditionStatusesEntry.value:type_name -> prodvana.desired_state.model.ConditionState
	5,  // 51: prodvana.desired_state.DesiredStateSummary.StatusExplanationsEntry.value:type_name -> prodvana.desired_state.StatusExplanations
	6,  // 52: prodvana.desired_state.DesiredStateSummary.DebugLogsEntry.value:type_name -> prodvana.desired_state.DebugLogs
	54, // 53: prodvana.desired_state.DesiredStateSummary.ActionExplanationsEntry.value:type_name -> prodvana.desired_state.model.ActionExplanation
	48, // 54: prodvana.desired_state.DesiredStateSummary.LastUpdateTimestampsEntry.value:type_name -> google.protobuf.Timestamp
	48, // 55: prodvana.desired_state.DesiredStateSummary.LastFetchedTimestampsEntry.value:type_name -> google.protobuf.Timestamp
	48, // 56: prodvana.desired_state.DesiredStateSummary.LastAppliedTimestampsEntry.value:type_name -> google.protobuf.Timestamp
	0,  // 57: prodvana.desired_state.DesiredStateManager.SetDesiredState:input_type -> prodvana.desired_state.SetDesiredStateReq
	0,  // 58: prodvana.desired_state.DesiredStateManager.PreviewEntityGraph:input_type -> prodvana.desired_state.SetDesiredStateReq
	4,  // 59: prodvana.desired_state.DesiredStateManager.GetServiceDesiredStateConvergenceSummary:input_type -> prodvana.desired_state.GetServiceDesiredStateConvergenceSummaryReq
	21, // 60: prodvana.desired_state.DesiredStateManager.GetServiceLatestDesiredStateId:input_type -> prodvana.desired_state.GetServiceLatestDesiredStateIdReq
	12, // 61: prodvana.desired_state.DesiredStateManager.GetServiceLastConvergedStates:input_type -> prodvana.desired_state.GetServiceLastConvergedStateReq
	14, // 62: prodvana.desired_state.DesiredStateManager.GetServiceDesiredStateHistory:input_type -> prodvana.desired_state.GetServiceDesiredStateHistoryReq
	16, // 63: prodvana.desired_state.DesiredStateManager.GetDesiredState:input_type -> prodvana.desired_state.GetDesiredStateReq
	18, // 64: prodvana.desired_state.DesiredStateManager.GetDesiredStateGraph:input_type -> prodvana.desired_state.GetDesiredStateGraphReq
	9,  // 65: prodvana.desired_state.DesiredStateManager.GetDesiredStateConvergenceSummary:input_type -> prodvana.desired_state.GetDesiredStateConvergenceReq
	1,  // 66: prodvana.desired_state.DesiredStateManager.ValidateDesiredState:input_type -> prodvana.desired_state.ValidateDesiredStateReq
	24, // 67: prodvana.desired_state.DesiredStateManager.SetManualApproval:input_type -> prodvana.desired_state.SetManualApprovalReq
	26, // 68: prodvana.desired_state.DesiredStateManager.PromoteDelivery:input_type -> prodvana.desired_state.PromoteDeliveryReq
	28, // 69: prodvana.desired_state.DesiredStateManager.BypassProtection:input_type -> prodvana.desired_state.BypassProtectionReq
	2,  // 70: prodvana.desired_state.DesiredStateManager.SetDesiredState:output_type -> prodvana.desired_state.SetDesiredStateResp
	3,  // 71: prodvana.desired_state.DesiredStateManager.PreviewEntityGraph:output_type -> prodvana.desired_state.PreviewEntityGraphResp
	11, // 72: prodvana.desired_state.DesiredStateManager.GetServiceDesiredStateConvergenceSummary:output_type -> prodvana.desired_state.GetServiceDesiredStateConvergenceSummaryResp
	22, // 73: prodvana.desired_state.DesiredStateManager.GetServiceLatestDesiredStateId:output_type -> prodvana.desired_state.GetServiceLatestDesiredStateIdResp
	13, // 74: prodvana.desired_state.DesiredStateManager.GetServiceLastConvergedStates:output_type -> prodvana.desired_state.GetServiceLastConvergedStateResp
	15, // 75: prodvana.desired_state.DesiredStateManager.GetServiceDesiredStateHistory:output_type -> prodvana.desired_state.GetServiceDesiredStateHistoryResp
	17, // 76: prodvana.desired_state.DesiredStateManager.GetDesiredState:output_type -> prodvana.desired_state.GetDesiredStateResp
	20, // 77: prodvana.desired_state.DesiredStateManager.GetDesiredStateGraph:output_type -> prodvana.desired_state.GetDesiredStateGraphResp
	10, // 78: prodvana.desired_state.DesiredStateManager.GetDesiredStateConvergenceSummary:output_type -> prodvana.desired_state.GetDesiredStateConvergenceSummaryResp
	23, // 79: prodvana.desired_state.DesiredStateManager.ValidateDesiredState:output_type -> prodvana.desired_state.ValidateDesiredStateResp
	25, // 80: prodvana.desired_state.DesiredStateManager.SetManualApproval:output_type -> prodvana.desired_state.SetManualApprovalResp
	27, // 81: prodvana.desired_state.DesiredStateManager.PromoteDelivery:output_type -> prodvana.desired_state.PromoteDeliveryResp
	29, // 82: prodvana.desired_state.DesiredStateManager.BypassProtection:output_type -> prodvana.desired_state.BypassProtectionResp
	70, // [70:83] is the sub-list for method output_type
	57, // [57:70] is the sub-list for method input_type
	57, // [57:57] is the sub-list for extension type_name
	57, // [57:57] is the sub-list for extension extendee
	0,  // [0:57] is the sub-list for field type_name
}

func init() { file_prodvana_desired_state_manager_proto_init() }
func file_prodvana_desired_state_manager_proto_init() {
	if File_prodvana_desired_state_manager_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_prodvana_desired_state_manager_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDesiredStateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateDesiredStateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDesiredStateResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreviewEntityGraphResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceDesiredStateConvergenceSummaryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusExplanations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebugLogs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PendingSetDesiredState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DesiredStateSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDesiredStateConvergenceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDesiredStateConvergenceSummaryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceDesiredStateConvergenceSummaryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceLastConvergedStateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceLastConvergedStateResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceDesiredStateHistoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceDesiredStateHistoryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDesiredStateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDesiredStateResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDesiredStateGraphReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DesiredStateTimestamps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDesiredStateGraphResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceLatestDesiredStateIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceLatestDesiredStateIdResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateDesiredStateResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetManualApprovalReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetManualApprovalResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PromoteDeliveryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PromoteDeliveryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BypassProtectionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BypassProtectionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_desired_state_manager_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDesiredStateGraphReq_QueryByService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_prodvana_desired_state_manager_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*GetDesiredStateGraphReq_DesiredStateId)(nil),
		(*GetDesiredStateGraphReq_QueryByService_)(nil),
	}
	file_prodvana_desired_state_manager_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*GetDesiredStateGraphResp_EntityGraph)(nil),
		(*GetDesiredStateGraphResp_PendingSetDesiredState)(nil),
	}
	file_prodvana_desired_state_manager_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*GetServiceLatestDesiredStateIdResp_DesiredStateId)(nil),
		(*GetServiceLatestDesiredStateIdResp_PendingSetDesiredState)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_prodvana_desired_state_manager_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   39,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_prodvana_desired_state_manager_proto_goTypes,
		DependencyIndexes: file_prodvana_desired_state_manager_proto_depIdxs,
		MessageInfos:      file_prodvana_desired_state_manager_proto_msgTypes,
	}.Build()
	File_prodvana_desired_state_manager_proto = out.File
	file_prodvana_desired_state_manager_proto_rawDesc = nil
	file_prodvana_desired_state_manager_proto_goTypes = nil
	file_prodvana_desired_state_manager_proto_depIdxs = nil
}
