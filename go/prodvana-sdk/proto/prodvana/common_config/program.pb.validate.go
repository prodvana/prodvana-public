// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: prodvana/common_config/program.proto

package common_config

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PortConfig with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PortConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PortConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PortConfigMultiError, or
// nil if none found.
func (m *PortConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *PortConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetPort(); val < 0 || val > 65535 {
		err := PortConfigValidationError{
			field:  "Port",
			reason: "value must be inside range [0, 65535]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetTargetPort(); val < 0 || val > 65535 {
		err := PortConfigValidationError{
			field:  "TargetPort",
			reason: "value must be inside range [0, 65535]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for External

	// no validation rules for Protocol

	// no validation rules for Tls

	if len(errors) > 0 {
		return PortConfigMultiError(errors)
	}

	return nil
}

// PortConfigMultiError is an error wrapping multiple validation errors
// returned by PortConfig.ValidateAll() if the designated constraints aren't met.
type PortConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PortConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PortConfigMultiError) AllErrors() []error { return m }

// PortConfigValidationError is the validation error returned by
// PortConfig.Validate if the designated constraints aren't met.
type PortConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PortConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PortConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PortConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PortConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PortConfigValidationError) ErrorName() string { return "PortConfigValidationError" }

// Error satisfies the builtin error interface
func (e PortConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPortConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PortConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PortConfigValidationError{}

// Validate checks the field values on ResourceList with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ResourceList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceList with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResourceListMultiError, or
// nil if none found.
func (m *ResourceList) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Memory

	// no validation rules for Cpu

	if len(errors) > 0 {
		return ResourceListMultiError(errors)
	}

	return nil
}

// ResourceListMultiError is an error wrapping multiple validation errors
// returned by ResourceList.ValidateAll() if the designated constraints aren't met.
type ResourceListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceListMultiError) AllErrors() []error { return m }

// ResourceListValidationError is the validation error returned by
// ResourceList.Validate if the designated constraints aren't met.
type ResourceListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceListValidationError) ErrorName() string { return "ResourceListValidationError" }

// Error satisfies the builtin error interface
func (e ResourceListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceListValidationError{}

// Validate checks the field values on ResourceRequirements with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResourceRequirements) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceRequirements with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourceRequirementsMultiError, or nil if none found.
func (m *ResourceRequirements) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceRequirements) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRequests()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResourceRequirementsValidationError{
					field:  "Requests",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResourceRequirementsValidationError{
					field:  "Requests",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequests()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResourceRequirementsValidationError{
				field:  "Requests",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ResourceRequirementsMultiError(errors)
	}

	return nil
}

// ResourceRequirementsMultiError is an error wrapping multiple validation
// errors returned by ResourceRequirements.ValidateAll() if the designated
// constraints aren't met.
type ResourceRequirementsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceRequirementsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceRequirementsMultiError) AllErrors() []error { return m }

// ResourceRequirementsValidationError is the validation error returned by
// ResourceRequirements.Validate if the designated constraints aren't met.
type ResourceRequirementsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceRequirementsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceRequirementsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceRequirementsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceRequirementsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceRequirementsValidationError) ErrorName() string {
	return "ResourceRequirementsValidationError"
}

// Error satisfies the builtin error interface
func (e ResourceRequirementsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceRequirements.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceRequirementsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceRequirementsValidationError{}

// Validate checks the field values on HttpProbe with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HttpProbe) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HttpProbe with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HttpProbeMultiError, or nil
// if none found.
func (m *HttpProbe) ValidateAll() error {
	return m.validate(true)
}

func (m *HttpProbe) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Path

	if val := m.GetPort(); val <= 0 || val > 65535 {
		err := HttpProbeValidationError{
			field:  "Port",
			reason: "value must be inside range (0, 65535]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Tls

	if len(errors) > 0 {
		return HttpProbeMultiError(errors)
	}

	return nil
}

// HttpProbeMultiError is an error wrapping multiple validation errors returned
// by HttpProbe.ValidateAll() if the designated constraints aren't met.
type HttpProbeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HttpProbeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HttpProbeMultiError) AllErrors() []error { return m }

// HttpProbeValidationError is the validation error returned by
// HttpProbe.Validate if the designated constraints aren't met.
type HttpProbeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HttpProbeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HttpProbeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HttpProbeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HttpProbeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HttpProbeValidationError) ErrorName() string { return "HttpProbeValidationError" }

// Error satisfies the builtin error interface
func (e HttpProbeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHttpProbe.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HttpProbeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HttpProbeValidationError{}

// Validate checks the field values on CmdProbe with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CmdProbe) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CmdProbe with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CmdProbeMultiError, or nil
// if none found.
func (m *CmdProbe) ValidateAll() error {
	return m.validate(true)
}

func (m *CmdProbe) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CmdProbeMultiError(errors)
	}

	return nil
}

// CmdProbeMultiError is an error wrapping multiple validation errors returned
// by CmdProbe.ValidateAll() if the designated constraints aren't met.
type CmdProbeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CmdProbeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CmdProbeMultiError) AllErrors() []error { return m }

// CmdProbeValidationError is the validation error returned by
// CmdProbe.Validate if the designated constraints aren't met.
type CmdProbeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CmdProbeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CmdProbeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CmdProbeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CmdProbeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CmdProbeValidationError) ErrorName() string { return "CmdProbeValidationError" }

// Error satisfies the builtin error interface
func (e CmdProbeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCmdProbe.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CmdProbeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CmdProbeValidationError{}

// Validate checks the field values on TcpProbe with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TcpProbe) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TcpProbe with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TcpProbeMultiError, or nil
// if none found.
func (m *TcpProbe) ValidateAll() error {
	return m.validate(true)
}

func (m *TcpProbe) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetPort(); val <= 0 || val > 65535 {
		err := TcpProbeValidationError{
			field:  "Port",
			reason: "value must be inside range (0, 65535]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Host

	if len(errors) > 0 {
		return TcpProbeMultiError(errors)
	}

	return nil
}

// TcpProbeMultiError is an error wrapping multiple validation errors returned
// by TcpProbe.ValidateAll() if the designated constraints aren't met.
type TcpProbeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TcpProbeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TcpProbeMultiError) AllErrors() []error { return m }

// TcpProbeValidationError is the validation error returned by
// TcpProbe.Validate if the designated constraints aren't met.
type TcpProbeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TcpProbeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TcpProbeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TcpProbeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TcpProbeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TcpProbeValidationError) ErrorName() string { return "TcpProbeValidationError" }

// Error satisfies the builtin error interface
func (e TcpProbeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTcpProbe.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TcpProbeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TcpProbeValidationError{}

// Validate checks the field values on HealthCheck with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HealthCheck) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HealthCheck with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HealthCheckMultiError, or
// nil if none found.
func (m *HealthCheck) ValidateAll() error {
	return m.validate(true)
}

func (m *HealthCheck) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDelay()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HealthCheckValidationError{
					field:  "Delay",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HealthCheckValidationError{
					field:  "Delay",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDelay()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HealthCheckValidationError{
				field:  "Delay",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPeriod()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HealthCheckValidationError{
					field:  "Period",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HealthCheckValidationError{
					field:  "Period",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPeriod()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HealthCheckValidationError{
				field:  "Period",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	oneofProbeConfigPresent := false
	switch v := m.ProbeConfig.(type) {
	case *HealthCheck_Http:
		if v == nil {
			err := HealthCheckValidationError{
				field:  "ProbeConfig",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofProbeConfigPresent = true

		if all {
			switch v := interface{}(m.GetHttp()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HealthCheckValidationError{
						field:  "Http",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HealthCheckValidationError{
						field:  "Http",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetHttp()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HealthCheckValidationError{
					field:  "Http",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *HealthCheck_Cmd:
		if v == nil {
			err := HealthCheckValidationError{
				field:  "ProbeConfig",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofProbeConfigPresent = true

		if all {
			switch v := interface{}(m.GetCmd()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HealthCheckValidationError{
						field:  "Cmd",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HealthCheckValidationError{
						field:  "Cmd",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCmd()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HealthCheckValidationError{
					field:  "Cmd",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *HealthCheck_Tcp:
		if v == nil {
			err := HealthCheckValidationError{
				field:  "ProbeConfig",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofProbeConfigPresent = true

		if all {
			switch v := interface{}(m.GetTcp()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HealthCheckValidationError{
						field:  "Tcp",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HealthCheckValidationError{
						field:  "Tcp",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTcp()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HealthCheckValidationError{
					field:  "Tcp",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofProbeConfigPresent {
		err := HealthCheckValidationError{
			field:  "ProbeConfig",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return HealthCheckMultiError(errors)
	}

	return nil
}

// HealthCheckMultiError is an error wrapping multiple validation errors
// returned by HealthCheck.ValidateAll() if the designated constraints aren't met.
type HealthCheckMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HealthCheckMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HealthCheckMultiError) AllErrors() []error { return m }

// HealthCheckValidationError is the validation error returned by
// HealthCheck.Validate if the designated constraints aren't met.
type HealthCheckValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HealthCheckValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HealthCheckValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HealthCheckValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HealthCheckValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HealthCheckValidationError) ErrorName() string { return "HealthCheckValidationError" }

// Error satisfies the builtin error interface
func (e HealthCheckValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHealthCheck.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HealthCheckValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HealthCheckValidationError{}

// Validate checks the field values on ImageRegistryInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ImageRegistryInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImageRegistryInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImageRegistryInfoMultiError, or nil if none found.
func (m *ImageRegistryInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ImageRegistryInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ContainerRegistryId

	// no validation rules for ContainerRegistry

	if utf8.RuneCountInString(m.GetImageRepository()) < 1 {
		err := ImageRegistryInfoValidationError{
			field:  "ImageRepository",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ImageRegistryInfoMultiError(errors)
	}

	return nil
}

// ImageRegistryInfoMultiError is an error wrapping multiple validation errors
// returned by ImageRegistryInfo.ValidateAll() if the designated constraints
// aren't met.
type ImageRegistryInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImageRegistryInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImageRegistryInfoMultiError) AllErrors() []error { return m }

// ImageRegistryInfoValidationError is the validation error returned by
// ImageRegistryInfo.Validate if the designated constraints aren't met.
type ImageRegistryInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImageRegistryInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImageRegistryInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImageRegistryInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImageRegistryInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImageRegistryInfoValidationError) ErrorName() string {
	return "ImageRegistryInfoValidationError"
}

// Error satisfies the builtin error interface
func (e ImageRegistryInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImageRegistryInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImageRegistryInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImageRegistryInfoValidationError{}

// Validate checks the field values on ProgramConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProgramConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProgramConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProgramConfigMultiError, or
// nil if none found.
func (m *ProgramConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *ProgramConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 0 || l > 63 {
		err := ProgramConfigValidationError{
			field:  "Name",
			reason: "value length must be between 0 and 63 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ProgramConfig_Name_Pattern.MatchString(m.GetName()) {
		err := ProgramConfigValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[a-z]?([a-z0-9-]*[a-z0-9]){0,1}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Image

	if all {
		switch v := interface{}(m.GetImageRegistryInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProgramConfigValidationError{
					field:  "ImageRegistryInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProgramConfigValidationError{
					field:  "ImageRegistryInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetImageRegistryInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProgramConfigValidationError{
				field:  "ImageRegistryInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	{
		sorted_keys := make([]string, len(m.GetEnv()))
		i := 0
		for key := range m.GetEnv() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetEnv()[key]
			_ = val

			if val == nil {
				err := ProgramConfigValidationError{
					field:  fmt.Sprintf("Env[%v]", key),
					reason: "value cannot be sparse, all pairs must be non-nil",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			if !_ProgramConfig_Env_Pattern.MatchString(key) {
				err := ProgramConfigValidationError{
					field:  fmt.Sprintf("Env[%v]", key),
					reason: "value does not match regex pattern \"^[a-zA-Z_]+[a-zA-Z0-9_]*$\"",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ProgramConfigValidationError{
							field:  fmt.Sprintf("Env[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ProgramConfigValidationError{
							field:  fmt.Sprintf("Env[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ProgramConfigValidationError{
						field:  fmt.Sprintf("Env[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if all {
		switch v := interface{}(m.GetResources()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProgramConfigValidationError{
					field:  "Resources",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProgramConfigValidationError{
					field:  "Resources",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResources()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProgramConfigValidationError{
				field:  "Resources",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetHealthCheck()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProgramConfigValidationError{
					field:  "HealthCheck",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProgramConfigValidationError{
					field:  "HealthCheck",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHealthCheck()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProgramConfigValidationError{
				field:  "HealthCheck",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetPorts() {
		_, _ = idx, item

		if item == nil {
			err := ProgramConfigValidationError{
				field:  fmt.Sprintf("Ports[%v]", idx),
				reason: "value is required",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProgramConfigValidationError{
						field:  fmt.Sprintf("Ports[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProgramConfigValidationError{
						field:  fmt.Sprintf("Ports[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProgramConfigValidationError{
					field:  fmt.Sprintf("Ports[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TemplateComplete

	if all {
		switch v := interface{}(m.GetCommit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProgramConfigValidationError{
					field:  "Commit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProgramConfigValidationError{
					field:  "Commit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProgramConfigValidationError{
				field:  "Commit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProgramConfigMultiError(errors)
	}

	return nil
}

// ProgramConfigMultiError is an error wrapping multiple validation errors
// returned by ProgramConfig.ValidateAll() if the designated constraints
// aren't met.
type ProgramConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProgramConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProgramConfigMultiError) AllErrors() []error { return m }

// ProgramConfigValidationError is the validation error returned by
// ProgramConfig.Validate if the designated constraints aren't met.
type ProgramConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProgramConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProgramConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProgramConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProgramConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProgramConfigValidationError) ErrorName() string { return "ProgramConfigValidationError" }

// Error satisfies the builtin error interface
func (e ProgramConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProgramConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProgramConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProgramConfigValidationError{}

var _ProgramConfig_Name_Pattern = regexp.MustCompile("^[a-z]?([a-z0-9-]*[a-z0-9]){0,1}$")

var _ProgramConfig_Env_Pattern = regexp.MustCompile("^[a-zA-Z_]+[a-zA-Z0-9_]*$")

// Validate checks the field values on PerReleaseChannelProgramConfig with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PerReleaseChannelProgramConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PerReleaseChannelProgramConfig with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PerReleaseChannelProgramConfigMultiError, or nil if none found.
func (m *PerReleaseChannelProgramConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *PerReleaseChannelProgramConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 63 {
		err := PerReleaseChannelProgramConfigValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 63 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_PerReleaseChannelProgramConfig_Name_Pattern.MatchString(m.GetName()) {
		err := PerReleaseChannelProgramConfigValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[a-z]([a-z0-9-]*[a-z0-9]){0,1}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	{
		sorted_keys := make([]string, len(m.GetEnv()))
		i := 0
		for key := range m.GetEnv() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetEnv()[key]
			_ = val

			if val == nil {
				err := PerReleaseChannelProgramConfigValidationError{
					field:  fmt.Sprintf("Env[%v]", key),
					reason: "value cannot be sparse, all pairs must be non-nil",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			if !_PerReleaseChannelProgramConfig_Env_Pattern.MatchString(key) {
				err := PerReleaseChannelProgramConfigValidationError{
					field:  fmt.Sprintf("Env[%v]", key),
					reason: "value does not match regex pattern \"^[a-zA-Z_]+[a-zA-Z0-9_]*$\"",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, PerReleaseChannelProgramConfigValidationError{
							field:  fmt.Sprintf("Env[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, PerReleaseChannelProgramConfigValidationError{
							field:  fmt.Sprintf("Env[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return PerReleaseChannelProgramConfigValidationError{
						field:  fmt.Sprintf("Env[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for Image

	if all {
		switch v := interface{}(m.GetImageRegistryInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PerReleaseChannelProgramConfigValidationError{
					field:  "ImageRegistryInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PerReleaseChannelProgramConfigValidationError{
					field:  "ImageRegistryInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetImageRegistryInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PerReleaseChannelProgramConfigValidationError{
				field:  "ImageRegistryInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PerReleaseChannelProgramConfigMultiError(errors)
	}

	return nil
}

// PerReleaseChannelProgramConfigMultiError is an error wrapping multiple
// validation errors returned by PerReleaseChannelProgramConfig.ValidateAll()
// if the designated constraints aren't met.
type PerReleaseChannelProgramConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PerReleaseChannelProgramConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PerReleaseChannelProgramConfigMultiError) AllErrors() []error { return m }

// PerReleaseChannelProgramConfigValidationError is the validation error
// returned by PerReleaseChannelProgramConfig.Validate if the designated
// constraints aren't met.
type PerReleaseChannelProgramConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PerReleaseChannelProgramConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PerReleaseChannelProgramConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PerReleaseChannelProgramConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PerReleaseChannelProgramConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PerReleaseChannelProgramConfigValidationError) ErrorName() string {
	return "PerReleaseChannelProgramConfigValidationError"
}

// Error satisfies the builtin error interface
func (e PerReleaseChannelProgramConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPerReleaseChannelProgramConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PerReleaseChannelProgramConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PerReleaseChannelProgramConfigValidationError{}

var _PerReleaseChannelProgramConfig_Name_Pattern = regexp.MustCompile("^[a-z]([a-z0-9-]*[a-z0-9]){0,1}$")

var _PerReleaseChannelProgramConfig_Env_Pattern = regexp.MustCompile("^[a-zA-Z_]+[a-zA-Z0-9_]*$")
