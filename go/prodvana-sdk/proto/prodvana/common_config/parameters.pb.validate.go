// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: prodvana/common_config/parameters.proto

package common_config

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ProgramChange with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProgramChange) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProgramChange with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProgramChangeMultiError, or
// nil if none found.
func (m *ProgramChange) ValidateAll() error {
	return m.validate(true)
}

func (m *ProgramChange) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := ProgramChangeValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ProgramChangeMultiError(errors)
	}

	return nil
}

// ProgramChangeMultiError is an error wrapping multiple validation errors
// returned by ProgramChange.ValidateAll() if the designated constraints
// aren't met.
type ProgramChangeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProgramChangeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProgramChangeMultiError) AllErrors() []error { return m }

// ProgramChangeValidationError is the validation error returned by
// ProgramChange.Validate if the designated constraints aren't met.
type ProgramChangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProgramChangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProgramChangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProgramChangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProgramChangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProgramChangeValidationError) ErrorName() string { return "ProgramChangeValidationError" }

// Error satisfies the builtin error interface
func (e ProgramChangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProgramChange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProgramChangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProgramChangeValidationError{}

// Validate checks the field values on StringParameterDefinition with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StringParameterDefinition) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StringParameterDefinition with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StringParameterDefinitionMultiError, or nil if none found.
func (m *StringParameterDefinition) ValidateAll() error {
	return m.validate(true)
}

func (m *StringParameterDefinition) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DefaultValue

	if len(errors) > 0 {
		return StringParameterDefinitionMultiError(errors)
	}

	return nil
}

// StringParameterDefinitionMultiError is an error wrapping multiple validation
// errors returned by StringParameterDefinition.ValidateAll() if the
// designated constraints aren't met.
type StringParameterDefinitionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StringParameterDefinitionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StringParameterDefinitionMultiError) AllErrors() []error { return m }

// StringParameterDefinitionValidationError is the validation error returned by
// StringParameterDefinition.Validate if the designated constraints aren't met.
type StringParameterDefinitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StringParameterDefinitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StringParameterDefinitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StringParameterDefinitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StringParameterDefinitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StringParameterDefinitionValidationError) ErrorName() string {
	return "StringParameterDefinitionValidationError"
}

// Error satisfies the builtin error interface
func (e StringParameterDefinitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStringParameterDefinition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StringParameterDefinitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StringParameterDefinitionValidationError{}

// Validate checks the field values on DockerImageParameterDefinition with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DockerImageParameterDefinition) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DockerImageParameterDefinition with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DockerImageParameterDefinitionMultiError, or nil if none found.
func (m *DockerImageParameterDefinition) ValidateAll() error {
	return m.validate(true)
}

func (m *DockerImageParameterDefinition) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DefaultTag

	if m.GetImageRegistryInfo() == nil {
		err := DockerImageParameterDefinitionValidationError{
			field:  "ImageRegistryInfo",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetImageRegistryInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DockerImageParameterDefinitionValidationError{
					field:  "ImageRegistryInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DockerImageParameterDefinitionValidationError{
					field:  "ImageRegistryInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetImageRegistryInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DockerImageParameterDefinitionValidationError{
				field:  "ImageRegistryInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetChanges() {
		_, _ = idx, item

		if item == nil {
			err := DockerImageParameterDefinitionValidationError{
				field:  fmt.Sprintf("Changes[%v]", idx),
				reason: "value is required",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DockerImageParameterDefinitionValidationError{
						field:  fmt.Sprintf("Changes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DockerImageParameterDefinitionValidationError{
						field:  fmt.Sprintf("Changes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DockerImageParameterDefinitionValidationError{
					field:  fmt.Sprintf("Changes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DockerImageParameterDefinitionMultiError(errors)
	}

	return nil
}

// DockerImageParameterDefinitionMultiError is an error wrapping multiple
// validation errors returned by DockerImageParameterDefinition.ValidateAll()
// if the designated constraints aren't met.
type DockerImageParameterDefinitionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DockerImageParameterDefinitionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DockerImageParameterDefinitionMultiError) AllErrors() []error { return m }

// DockerImageParameterDefinitionValidationError is the validation error
// returned by DockerImageParameterDefinition.Validate if the designated
// constraints aren't met.
type DockerImageParameterDefinitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DockerImageParameterDefinitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DockerImageParameterDefinitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DockerImageParameterDefinitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DockerImageParameterDefinitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DockerImageParameterDefinitionValidationError) ErrorName() string {
	return "DockerImageParameterDefinitionValidationError"
}

// Error satisfies the builtin error interface
func (e DockerImageParameterDefinitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDockerImageParameterDefinition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DockerImageParameterDefinitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DockerImageParameterDefinitionValidationError{}

// Validate checks the field values on FixedReplicaChange with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FixedReplicaChange) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FixedReplicaChange with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FixedReplicaChangeMultiError, or nil if none found.
func (m *FixedReplicaChange) ValidateAll() error {
	return m.validate(true)
}

func (m *FixedReplicaChange) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return FixedReplicaChangeMultiError(errors)
	}

	return nil
}

// FixedReplicaChangeMultiError is an error wrapping multiple validation errors
// returned by FixedReplicaChange.ValidateAll() if the designated constraints
// aren't met.
type FixedReplicaChangeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FixedReplicaChangeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FixedReplicaChangeMultiError) AllErrors() []error { return m }

// FixedReplicaChangeValidationError is the validation error returned by
// FixedReplicaChange.Validate if the designated constraints aren't met.
type FixedReplicaChangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FixedReplicaChangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FixedReplicaChangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FixedReplicaChangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FixedReplicaChangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FixedReplicaChangeValidationError) ErrorName() string {
	return "FixedReplicaChangeValidationError"
}

// Error satisfies the builtin error interface
func (e FixedReplicaChangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFixedReplicaChange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FixedReplicaChangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FixedReplicaChangeValidationError{}

// Validate checks the field values on IntParameterDefinition with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IntParameterDefinition) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IntParameterDefinition with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IntParameterDefinitionMultiError, or nil if none found.
func (m *IntParameterDefinition) ValidateAll() error {
	return m.validate(true)
}

func (m *IntParameterDefinition) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DefaultValue

	for idx, item := range m.GetChanges() {
		_, _ = idx, item

		if item == nil {
			err := IntParameterDefinitionValidationError{
				field:  fmt.Sprintf("Changes[%v]", idx),
				reason: "value is required",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IntParameterDefinitionValidationError{
						field:  fmt.Sprintf("Changes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IntParameterDefinitionValidationError{
						field:  fmt.Sprintf("Changes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IntParameterDefinitionValidationError{
					field:  fmt.Sprintf("Changes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return IntParameterDefinitionMultiError(errors)
	}

	return nil
}

// IntParameterDefinitionMultiError is an error wrapping multiple validation
// errors returned by IntParameterDefinition.ValidateAll() if the designated
// constraints aren't met.
type IntParameterDefinitionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntParameterDefinitionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntParameterDefinitionMultiError) AllErrors() []error { return m }

// IntParameterDefinitionValidationError is the validation error returned by
// IntParameterDefinition.Validate if the designated constraints aren't met.
type IntParameterDefinitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntParameterDefinitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntParameterDefinitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntParameterDefinitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntParameterDefinitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntParameterDefinitionValidationError) ErrorName() string {
	return "IntParameterDefinitionValidationError"
}

// Error satisfies the builtin error interface
func (e IntParameterDefinitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntParameterDefinition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntParameterDefinitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntParameterDefinitionValidationError{}

// Validate checks the field values on SecretParameterDefinition with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SecretParameterDefinition) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SecretParameterDefinition with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SecretParameterDefinitionMultiError, or nil if none found.
func (m *SecretParameterDefinition) ValidateAll() error {
	return m.validate(true)
}

func (m *SecretParameterDefinition) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SecretParameterDefinitionMultiError(errors)
	}

	return nil
}

// SecretParameterDefinitionMultiError is an error wrapping multiple validation
// errors returned by SecretParameterDefinition.ValidateAll() if the
// designated constraints aren't met.
type SecretParameterDefinitionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SecretParameterDefinitionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SecretParameterDefinitionMultiError) AllErrors() []error { return m }

// SecretParameterDefinitionValidationError is the validation error returned by
// SecretParameterDefinition.Validate if the designated constraints aren't met.
type SecretParameterDefinitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SecretParameterDefinitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SecretParameterDefinitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SecretParameterDefinitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SecretParameterDefinitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SecretParameterDefinitionValidationError) ErrorName() string {
	return "SecretParameterDefinitionValidationError"
}

// Error satisfies the builtin error interface
func (e SecretParameterDefinitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecretParameterDefinition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SecretParameterDefinitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SecretParameterDefinitionValidationError{}

// Validate checks the field values on CommitParameterDefinition with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CommitParameterDefinition) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommitParameterDefinition with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CommitParameterDefinitionMultiError, or nil if none found.
func (m *CommitParameterDefinition) ValidateAll() error {
	return m.validate(true)
}

func (m *CommitParameterDefinition) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetRepository()) < 1 {
		err := CommitParameterDefinitionValidationError{
			field:  "Repository",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Branch

	if len(errors) > 0 {
		return CommitParameterDefinitionMultiError(errors)
	}

	return nil
}

// CommitParameterDefinitionMultiError is an error wrapping multiple validation
// errors returned by CommitParameterDefinition.ValidateAll() if the
// designated constraints aren't met.
type CommitParameterDefinitionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommitParameterDefinitionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommitParameterDefinitionMultiError) AllErrors() []error { return m }

// CommitParameterDefinitionValidationError is the validation error returned by
// CommitParameterDefinition.Validate if the designated constraints aren't met.
type CommitParameterDefinitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommitParameterDefinitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommitParameterDefinitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommitParameterDefinitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommitParameterDefinitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommitParameterDefinitionValidationError) ErrorName() string {
	return "CommitParameterDefinitionValidationError"
}

// Error satisfies the builtin error interface
func (e CommitParameterDefinitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommitParameterDefinition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommitParameterDefinitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommitParameterDefinitionValidationError{}

// Validate checks the field values on BlobParameterDefinition with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BlobParameterDefinition) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BlobParameterDefinition with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BlobParameterDefinitionMultiError, or nil if none found.
func (m *BlobParameterDefinition) ValidateAll() error {
	return m.validate(true)
}

func (m *BlobParameterDefinition) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BlobParameterDefinitionMultiError(errors)
	}

	return nil
}

// BlobParameterDefinitionMultiError is an error wrapping multiple validation
// errors returned by BlobParameterDefinition.ValidateAll() if the designated
// constraints aren't met.
type BlobParameterDefinitionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BlobParameterDefinitionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BlobParameterDefinitionMultiError) AllErrors() []error { return m }

// BlobParameterDefinitionValidationError is the validation error returned by
// BlobParameterDefinition.Validate if the designated constraints aren't met.
type BlobParameterDefinitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlobParameterDefinitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlobParameterDefinitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlobParameterDefinitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlobParameterDefinitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlobParameterDefinitionValidationError) ErrorName() string {
	return "BlobParameterDefinitionValidationError"
}

// Error satisfies the builtin error interface
func (e BlobParameterDefinitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlobParameterDefinition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlobParameterDefinitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlobParameterDefinitionValidationError{}

// Validate checks the field values on ParameterDefinition with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ParameterDefinition) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ParameterDefinition with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ParameterDefinitionMultiError, or nil if none found.
func (m *ParameterDefinition) ValidateAll() error {
	return m.validate(true)
}

func (m *ParameterDefinition) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := ParameterDefinitionValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Description

	// no validation rules for Required

	oneofConfigOneofPresent := false
	switch v := m.ConfigOneof.(type) {
	case *ParameterDefinition_String_:
		if v == nil {
			err := ParameterDefinitionValidationError{
				field:  "ConfigOneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofConfigOneofPresent = true

		if all {
			switch v := interface{}(m.GetString_()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ParameterDefinitionValidationError{
						field:  "String_",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ParameterDefinitionValidationError{
						field:  "String_",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetString_()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ParameterDefinitionValidationError{
					field:  "String_",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ParameterDefinition_DockerImage:
		if v == nil {
			err := ParameterDefinitionValidationError{
				field:  "ConfigOneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofConfigOneofPresent = true

		if all {
			switch v := interface{}(m.GetDockerImage()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ParameterDefinitionValidationError{
						field:  "DockerImage",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ParameterDefinitionValidationError{
						field:  "DockerImage",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDockerImage()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ParameterDefinitionValidationError{
					field:  "DockerImage",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ParameterDefinition_Int:
		if v == nil {
			err := ParameterDefinitionValidationError{
				field:  "ConfigOneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofConfigOneofPresent = true

		if all {
			switch v := interface{}(m.GetInt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ParameterDefinitionValidationError{
						field:  "Int",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ParameterDefinitionValidationError{
						field:  "Int",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetInt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ParameterDefinitionValidationError{
					field:  "Int",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ParameterDefinition_Secret:
		if v == nil {
			err := ParameterDefinitionValidationError{
				field:  "ConfigOneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofConfigOneofPresent = true

		if all {
			switch v := interface{}(m.GetSecret()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ParameterDefinitionValidationError{
						field:  "Secret",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ParameterDefinitionValidationError{
						field:  "Secret",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSecret()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ParameterDefinitionValidationError{
					field:  "Secret",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ParameterDefinition_Commit:
		if v == nil {
			err := ParameterDefinitionValidationError{
				field:  "ConfigOneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofConfigOneofPresent = true

		if all {
			switch v := interface{}(m.GetCommit()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ParameterDefinitionValidationError{
						field:  "Commit",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ParameterDefinitionValidationError{
						field:  "Commit",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCommit()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ParameterDefinitionValidationError{
					field:  "Commit",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ParameterDefinition_Blob:
		if v == nil {
			err := ParameterDefinitionValidationError{
				field:  "ConfigOneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofConfigOneofPresent = true

		if all {
			switch v := interface{}(m.GetBlob()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ParameterDefinitionValidationError{
						field:  "Blob",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ParameterDefinitionValidationError{
						field:  "Blob",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBlob()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ParameterDefinitionValidationError{
					field:  "Blob",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofConfigOneofPresent {
		err := ParameterDefinitionValidationError{
			field:  "ConfigOneof",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ParameterDefinitionMultiError(errors)
	}

	return nil
}

// ParameterDefinitionMultiError is an error wrapping multiple validation
// errors returned by ParameterDefinition.ValidateAll() if the designated
// constraints aren't met.
type ParameterDefinitionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ParameterDefinitionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ParameterDefinitionMultiError) AllErrors() []error { return m }

// ParameterDefinitionValidationError is the validation error returned by
// ParameterDefinition.Validate if the designated constraints aren't met.
type ParameterDefinitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParameterDefinitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParameterDefinitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParameterDefinitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParameterDefinitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParameterDefinitionValidationError) ErrorName() string {
	return "ParameterDefinitionValidationError"
}

// Error satisfies the builtin error interface
func (e ParameterDefinitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParameterDefinition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParameterDefinitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParameterDefinitionValidationError{}

// Validate checks the field values on SecretParameterValue with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SecretParameterValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SecretParameterValue with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SecretParameterValueMultiError, or nil if none found.
func (m *SecretParameterValue) ValidateAll() error {
	return m.validate(true)
}

func (m *SecretParameterValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	oneofSecretOneofPresent := false
	switch v := m.SecretOneof.(type) {
	case *SecretParameterValue_RawSecret:
		if v == nil {
			err := SecretParameterValueValidationError{
				field:  "SecretOneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofSecretOneofPresent = true
		// no validation rules for RawSecret
	case *SecretParameterValue_SecretRef:
		if v == nil {
			err := SecretParameterValueValidationError{
				field:  "SecretOneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofSecretOneofPresent = true

		if all {
			switch v := interface{}(m.GetSecretRef()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SecretParameterValueValidationError{
						field:  "SecretRef",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SecretParameterValueValidationError{
						field:  "SecretRef",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSecretRef()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SecretParameterValueValidationError{
					field:  "SecretRef",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofSecretOneofPresent {
		err := SecretParameterValueValidationError{
			field:  "SecretOneof",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SecretParameterValueMultiError(errors)
	}

	return nil
}

// SecretParameterValueMultiError is an error wrapping multiple validation
// errors returned by SecretParameterValue.ValidateAll() if the designated
// constraints aren't met.
type SecretParameterValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SecretParameterValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SecretParameterValueMultiError) AllErrors() []error { return m }

// SecretParameterValueValidationError is the validation error returned by
// SecretParameterValue.Validate if the designated constraints aren't met.
type SecretParameterValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SecretParameterValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SecretParameterValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SecretParameterValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SecretParameterValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SecretParameterValueValidationError) ErrorName() string {
	return "SecretParameterValueValidationError"
}

// Error satisfies the builtin error interface
func (e SecretParameterValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecretParameterValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SecretParameterValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SecretParameterValueValidationError{}

// Validate checks the field values on BlobParameterValue with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BlobParameterValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BlobParameterValue with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BlobParameterValueMultiError, or nil if none found.
func (m *BlobParameterValue) ValidateAll() error {
	return m.validate(true)
}

func (m *BlobParameterValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	oneofBlobOneofPresent := false
	switch v := m.BlobOneof.(type) {
	case *BlobParameterValue_Inlined:
		if v == nil {
			err := BlobParameterValueValidationError{
				field:  "BlobOneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofBlobOneofPresent = true
		// no validation rules for Inlined
	default:
		_ = v // ensures v is used
	}
	if !oneofBlobOneofPresent {
		err := BlobParameterValueValidationError{
			field:  "BlobOneof",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return BlobParameterValueMultiError(errors)
	}

	return nil
}

// BlobParameterValueMultiError is an error wrapping multiple validation errors
// returned by BlobParameterValue.ValidateAll() if the designated constraints
// aren't met.
type BlobParameterValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BlobParameterValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BlobParameterValueMultiError) AllErrors() []error { return m }

// BlobParameterValueValidationError is the validation error returned by
// BlobParameterValue.Validate if the designated constraints aren't met.
type BlobParameterValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlobParameterValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlobParameterValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlobParameterValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlobParameterValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlobParameterValueValidationError) ErrorName() string {
	return "BlobParameterValueValidationError"
}

// Error satisfies the builtin error interface
func (e BlobParameterValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlobParameterValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlobParameterValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlobParameterValueValidationError{}

// Validate checks the field values on ParameterValue with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ParameterValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ParameterValue with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ParameterValueMultiError,
// or nil if none found.
func (m *ParameterValue) ValidateAll() error {
	return m.validate(true)
}

func (m *ParameterValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := ParameterValueValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	oneofValueOneofPresent := false
	switch v := m.ValueOneof.(type) {
	case *ParameterValue_String_:
		if v == nil {
			err := ParameterValueValidationError{
				field:  "ValueOneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofValueOneofPresent = true
		// no validation rules for String_
	case *ParameterValue_Int:
		if v == nil {
			err := ParameterValueValidationError{
				field:  "ValueOneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofValueOneofPresent = true
		// no validation rules for Int
	case *ParameterValue_DockerImageTag:
		if v == nil {
			err := ParameterValueValidationError{
				field:  "ValueOneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofValueOneofPresent = true

		if !_ParameterValue_DockerImageTag_Pattern.MatchString(m.GetDockerImageTag()) {
			err := ParameterValueValidationError{
				field:  "DockerImageTag",
				reason: "value does not match regex pattern \"^[A-Za-z0-9_][0-9A-Za-z_.-]*$|^sha256:[0-9a-f]{64}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *ParameterValue_Secret:
		if v == nil {
			err := ParameterValueValidationError{
				field:  "ValueOneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofValueOneofPresent = true

		if all {
			switch v := interface{}(m.GetSecret()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ParameterValueValidationError{
						field:  "Secret",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ParameterValueValidationError{
						field:  "Secret",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSecret()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ParameterValueValidationError{
					field:  "Secret",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ParameterValue_Commit:
		if v == nil {
			err := ParameterValueValidationError{
				field:  "ValueOneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofValueOneofPresent = true
		// no validation rules for Commit
	case *ParameterValue_Blob:
		if v == nil {
			err := ParameterValueValidationError{
				field:  "ValueOneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofValueOneofPresent = true

		if all {
			switch v := interface{}(m.GetBlob()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ParameterValueValidationError{
						field:  "Blob",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ParameterValueValidationError{
						field:  "Blob",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBlob()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ParameterValueValidationError{
					field:  "Blob",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofValueOneofPresent {
		err := ParameterValueValidationError{
			field:  "ValueOneof",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ParameterValueMultiError(errors)
	}

	return nil
}

// ParameterValueMultiError is an error wrapping multiple validation errors
// returned by ParameterValue.ValidateAll() if the designated constraints
// aren't met.
type ParameterValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ParameterValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ParameterValueMultiError) AllErrors() []error { return m }

// ParameterValueValidationError is the validation error returned by
// ParameterValue.Validate if the designated constraints aren't met.
type ParameterValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParameterValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParameterValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParameterValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParameterValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParameterValueValidationError) ErrorName() string { return "ParameterValueValidationError" }

// Error satisfies the builtin error interface
func (e ParameterValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParameterValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParameterValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParameterValueValidationError{}

var _ParameterValue_DockerImageTag_Pattern = regexp.MustCompile("^[A-Za-z0-9_][0-9A-Za-z_.-]*$|^sha256:[0-9a-f]{64}$")

// Validate checks the field values on ParametersConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ParametersConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ParametersConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ParametersConfigMultiError, or nil if none found.
func (m *ParametersConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *ParametersConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetParameters() {
		_, _ = idx, item

		if item == nil {
			err := ParametersConfigValidationError{
				field:  fmt.Sprintf("Parameters[%v]", idx),
				reason: "value is required",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ParametersConfigValidationError{
						field:  fmt.Sprintf("Parameters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ParametersConfigValidationError{
						field:  fmt.Sprintf("Parameters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ParametersConfigValidationError{
					field:  fmt.Sprintf("Parameters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ParametersConfigMultiError(errors)
	}

	return nil
}

// ParametersConfigMultiError is an error wrapping multiple validation errors
// returned by ParametersConfig.ValidateAll() if the designated constraints
// aren't met.
type ParametersConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ParametersConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ParametersConfigMultiError) AllErrors() []error { return m }

// ParametersConfigValidationError is the validation error returned by
// ParametersConfig.Validate if the designated constraints aren't met.
type ParametersConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParametersConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParametersConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParametersConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParametersConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParametersConfigValidationError) ErrorName() string { return "ParametersConfigValidationError" }

// Error satisfies the builtin error interface
func (e ParametersConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParametersConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParametersConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParametersConfigValidationError{}

// Validate checks the field values on DockerImageParameterDefinition_Changes
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DockerImageParameterDefinition_Changes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DockerImageParameterDefinition_Changes with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// DockerImageParameterDefinition_ChangesMultiError, or nil if none found.
func (m *DockerImageParameterDefinition_Changes) ValidateAll() error {
	return m.validate(true)
}

func (m *DockerImageParameterDefinition_Changes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	oneofOneofPresent := false
	switch v := m.Oneof.(type) {
	case *DockerImageParameterDefinition_Changes_Program:
		if v == nil {
			err := DockerImageParameterDefinition_ChangesValidationError{
				field:  "Oneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofOneofPresent = true

		if all {
			switch v := interface{}(m.GetProgram()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DockerImageParameterDefinition_ChangesValidationError{
						field:  "Program",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DockerImageParameterDefinition_ChangesValidationError{
						field:  "Program",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetProgram()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DockerImageParameterDefinition_ChangesValidationError{
					field:  "Program",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofOneofPresent {
		err := DockerImageParameterDefinition_ChangesValidationError{
			field:  "Oneof",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DockerImageParameterDefinition_ChangesMultiError(errors)
	}

	return nil
}

// DockerImageParameterDefinition_ChangesMultiError is an error wrapping
// multiple validation errors returned by
// DockerImageParameterDefinition_Changes.ValidateAll() if the designated
// constraints aren't met.
type DockerImageParameterDefinition_ChangesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DockerImageParameterDefinition_ChangesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DockerImageParameterDefinition_ChangesMultiError) AllErrors() []error { return m }

// DockerImageParameterDefinition_ChangesValidationError is the validation
// error returned by DockerImageParameterDefinition_Changes.Validate if the
// designated constraints aren't met.
type DockerImageParameterDefinition_ChangesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DockerImageParameterDefinition_ChangesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DockerImageParameterDefinition_ChangesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DockerImageParameterDefinition_ChangesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DockerImageParameterDefinition_ChangesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DockerImageParameterDefinition_ChangesValidationError) ErrorName() string {
	return "DockerImageParameterDefinition_ChangesValidationError"
}

// Error satisfies the builtin error interface
func (e DockerImageParameterDefinition_ChangesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDockerImageParameterDefinition_Changes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DockerImageParameterDefinition_ChangesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DockerImageParameterDefinition_ChangesValidationError{}

// Validate checks the field values on IntParameterDefinition_Changes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IntParameterDefinition_Changes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IntParameterDefinition_Changes with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IntParameterDefinition_ChangesMultiError, or nil if none found.
func (m *IntParameterDefinition_Changes) ValidateAll() error {
	return m.validate(true)
}

func (m *IntParameterDefinition_Changes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	oneofOneofPresent := false
	switch v := m.Oneof.(type) {
	case *IntParameterDefinition_Changes_FixedReplica:
		if v == nil {
			err := IntParameterDefinition_ChangesValidationError{
				field:  "Oneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofOneofPresent = true

		if all {
			switch v := interface{}(m.GetFixedReplica()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IntParameterDefinition_ChangesValidationError{
						field:  "FixedReplica",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IntParameterDefinition_ChangesValidationError{
						field:  "FixedReplica",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFixedReplica()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IntParameterDefinition_ChangesValidationError{
					field:  "FixedReplica",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofOneofPresent {
		err := IntParameterDefinition_ChangesValidationError{
			field:  "Oneof",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IntParameterDefinition_ChangesMultiError(errors)
	}

	return nil
}

// IntParameterDefinition_ChangesMultiError is an error wrapping multiple
// validation errors returned by IntParameterDefinition_Changes.ValidateAll()
// if the designated constraints aren't met.
type IntParameterDefinition_ChangesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntParameterDefinition_ChangesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntParameterDefinition_ChangesMultiError) AllErrors() []error { return m }

// IntParameterDefinition_ChangesValidationError is the validation error
// returned by IntParameterDefinition_Changes.Validate if the designated
// constraints aren't met.
type IntParameterDefinition_ChangesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntParameterDefinition_ChangesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntParameterDefinition_ChangesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntParameterDefinition_ChangesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntParameterDefinition_ChangesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntParameterDefinition_ChangesValidationError) ErrorName() string {
	return "IntParameterDefinition_ChangesValidationError"
}

// Error satisfies the builtin error interface
func (e IntParameterDefinition_ChangesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntParameterDefinition_Changes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntParameterDefinition_ChangesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntParameterDefinition_ChangesValidationError{}
