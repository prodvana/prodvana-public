// Code generated by protoc-gen-go-vtproto. DO NOT EDIT.
// protoc-gen-go-vtproto version: v0.6.0
// source: prodvana/common_config/retry.proto

package common_config

import (
	durationpb1 "github.com/planetscale/vtprotobuf/types/known/durationpb"
	proto "google.golang.org/protobuf/proto"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

func (m *Notification) CloneVT() *Notification {
	if m == nil {
		return (*Notification)(nil)
	}
	r := new(Notification)
	r.ConfigOverride = m.ConfigOverride.CloneVT()
	r.Message = m.Message
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Notification) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RetryConfig) CloneVT() *RetryConfig {
	if m == nil {
		return (*RetryConfig)(nil)
	}
	r := new(RetryConfig)
	r.FirstFailureNotification = m.FirstFailureNotification.CloneVT()
	if m.Limit != nil {
		r.Limit = m.Limit.(interface{ CloneVT() isRetryConfig_Limit }).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RetryConfig) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RetryConfig_MaxRetryDuration) CloneVT() isRetryConfig_Limit {
	if m == nil {
		return (*RetryConfig_MaxRetryDuration)(nil)
	}
	r := new(RetryConfig_MaxRetryDuration)
	r.MaxRetryDuration = (*durationpb.Duration)((*durationpb1.Duration)(m.MaxRetryDuration).CloneVT())
	return r
}

func (m *RetryConfig_RetryForever) CloneVT() isRetryConfig_Limit {
	if m == nil {
		return (*RetryConfig_RetryForever)(nil)
	}
	r := new(RetryConfig_RetryForever)
	r.RetryForever = m.RetryForever
	return r
}

func (this *Notification) EqualVT(that *Notification) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.ConfigOverride.EqualVT(that.ConfigOverride) {
		return false
	}
	if this.Message != that.Message {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Notification) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Notification)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RetryConfig) EqualVT(that *RetryConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Limit == nil && that.Limit != nil {
		return false
	} else if this.Limit != nil {
		if that.Limit == nil {
			return false
		}
		if !this.Limit.(interface {
			EqualVT(isRetryConfig_Limit) bool
		}).EqualVT(that.Limit) {
			return false
		}
	}
	if !this.FirstFailureNotification.EqualVT(that.FirstFailureNotification) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RetryConfig) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RetryConfig)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RetryConfig_MaxRetryDuration) EqualVT(thatIface isRetryConfig_Limit) bool {
	that, ok := thatIface.(*RetryConfig_MaxRetryDuration)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.MaxRetryDuration, that.MaxRetryDuration; p != q {
		if p == nil {
			p = &durationpb.Duration{}
		}
		if q == nil {
			q = &durationpb.Duration{}
		}
		if !(*durationpb1.Duration)(p).EqualVT((*durationpb1.Duration)(q)) {
			return false
		}
	}
	return true
}

func (this *RetryConfig_RetryForever) EqualVT(thatIface isRetryConfig_Limit) bool {
	that, ok := thatIface.(*RetryConfig_RetryForever)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.RetryForever != that.RetryForever {
		return false
	}
	return true
}
