// Code generated by protoc-gen-go-vtproto. DO NOT EDIT.
// protoc-gen-go-vtproto version: v0.6.0
// source: prodvana/common_config/program.proto

package common_config

import (
	durationpb1 "github.com/planetscale/vtprotobuf/types/known/durationpb"
	proto "google.golang.org/protobuf/proto"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

func (m *PortConfig) CloneVT() *PortConfig {
	if m == nil {
		return (*PortConfig)(nil)
	}
	r := new(PortConfig)
	r.Port = m.Port
	r.TargetPort = m.TargetPort
	r.External = m.External
	r.Protocol = m.Protocol
	r.Tls = m.Tls
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *PortConfig) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ResourceList) CloneVT() *ResourceList {
	if m == nil {
		return (*ResourceList)(nil)
	}
	r := new(ResourceList)
	r.Memory = m.Memory
	r.Cpu = m.Cpu
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ResourceList) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ResourceRequirements) CloneVT() *ResourceRequirements {
	if m == nil {
		return (*ResourceRequirements)(nil)
	}
	r := new(ResourceRequirements)
	r.Requests = m.Requests.CloneVT()
	r.Limits = m.Limits.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ResourceRequirements) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *HttpProbe) CloneVT() *HttpProbe {
	if m == nil {
		return (*HttpProbe)(nil)
	}
	r := new(HttpProbe)
	r.Path = m.Path
	r.Port = m.Port
	r.Tls = m.Tls
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *HttpProbe) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CmdProbe) CloneVT() *CmdProbe {
	if m == nil {
		return (*CmdProbe)(nil)
	}
	r := new(CmdProbe)
	if rhs := m.Command; rhs != nil {
		tmpContainer := make([]string, len(rhs))
		copy(tmpContainer, rhs)
		r.Command = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CmdProbe) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *TcpProbe) CloneVT() *TcpProbe {
	if m == nil {
		return (*TcpProbe)(nil)
	}
	r := new(TcpProbe)
	r.Port = m.Port
	r.Host = m.Host
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *TcpProbe) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *HealthCheck) CloneVT() *HealthCheck {
	if m == nil {
		return (*HealthCheck)(nil)
	}
	r := new(HealthCheck)
	r.Delay = (*durationpb.Duration)((*durationpb1.Duration)(m.Delay).CloneVT())
	r.Period = (*durationpb.Duration)((*durationpb1.Duration)(m.Period).CloneVT())
	if m.ProbeConfig != nil {
		r.ProbeConfig = m.ProbeConfig.(interface {
			CloneVT() isHealthCheck_ProbeConfig
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *HealthCheck) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *HealthCheck_Http) CloneVT() isHealthCheck_ProbeConfig {
	if m == nil {
		return (*HealthCheck_Http)(nil)
	}
	r := new(HealthCheck_Http)
	r.Http = m.Http.CloneVT()
	return r
}

func (m *HealthCheck_Cmd) CloneVT() isHealthCheck_ProbeConfig {
	if m == nil {
		return (*HealthCheck_Cmd)(nil)
	}
	r := new(HealthCheck_Cmd)
	r.Cmd = m.Cmd.CloneVT()
	return r
}

func (m *HealthCheck_Tcp) CloneVT() isHealthCheck_ProbeConfig {
	if m == nil {
		return (*HealthCheck_Tcp)(nil)
	}
	r := new(HealthCheck_Tcp)
	r.Tcp = m.Tcp.CloneVT()
	return r
}

func (m *ImageRegistryInfo) CloneVT() *ImageRegistryInfo {
	if m == nil {
		return (*ImageRegistryInfo)(nil)
	}
	r := new(ImageRegistryInfo)
	r.ContainerRegistryId = m.ContainerRegistryId
	r.ContainerRegistry = m.ContainerRegistry
	r.ImageRepository = m.ImageRepository
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ImageRegistryInfo) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ImageDetails) CloneVT() *ImageDetails {
	if m == nil {
		return (*ImageDetails)(nil)
	}
	r := new(ImageDetails)
	r.RegistryInfo = m.RegistryInfo.CloneVT()
	r.Identifier = m.Identifier
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ImageDetails) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ProgramConfig) CloneVT() *ProgramConfig {
	if m == nil {
		return (*ProgramConfig)(nil)
	}
	r := new(ProgramConfig)
	r.Name = m.Name
	r.Image = m.Image
	r.ImageTag = m.ImageTag
	r.ImageRegistryInfo = m.ImageRegistryInfo.CloneVT()
	r.Resources = m.Resources.CloneVT()
	r.HealthCheck = m.HealthCheck.CloneVT()
	r.TemplateComplete = m.TemplateComplete
	r.WorkingDirectory = m.WorkingDirectory
	if rhs := m.Cmd; rhs != nil {
		tmpContainer := make([]string, len(rhs))
		copy(tmpContainer, rhs)
		r.Cmd = tmpContainer
	}
	if rhs := m.Entrypoint; rhs != nil {
		tmpContainer := make([]string, len(rhs))
		copy(tmpContainer, rhs)
		r.Entrypoint = tmpContainer
	}
	if rhs := m.Env; rhs != nil {
		tmpContainer := make(map[string]*EnvValue, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Env = tmpContainer
	}
	if rhs := m.Ports; rhs != nil {
		tmpContainer := make([]*PortConfig, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Ports = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ProgramConfig) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *PerReleaseChannelProgramConfig) CloneVT() *PerReleaseChannelProgramConfig {
	if m == nil {
		return (*PerReleaseChannelProgramConfig)(nil)
	}
	r := new(PerReleaseChannelProgramConfig)
	r.Name = m.Name
	r.Image = m.Image
	r.ImageRegistryInfo = m.ImageRegistryInfo.CloneVT()
	r.ImageTag = m.ImageTag
	if rhs := m.Env; rhs != nil {
		tmpContainer := make(map[string]*EnvValue, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Env = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *PerReleaseChannelProgramConfig) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (this *PortConfig) StableEqualVT(that *PortConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Port != that.Port {
		return false
	}
	if this.TargetPort != that.TargetPort {
		return false
	}
	if this.External != that.External {
		return false
	}
	if this.Protocol != that.Protocol {
		return false
	}
	if this.Tls != that.Tls {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *PortConfig) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*PortConfig)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *PortConfig) EqualVT(that *PortConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Port != that.Port {
		return false
	}
	if this.TargetPort != that.TargetPort {
		return false
	}
	if this.External != that.External {
		return false
	}
	if this.Protocol != that.Protocol {
		return false
	}
	if this.Tls != that.Tls {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *PortConfig) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*PortConfig)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ResourceList) StableEqualVT(that *ResourceList) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Memory != that.Memory {
		return false
	}
	if this.Cpu != that.Cpu {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ResourceList) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ResourceList)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ResourceList) EqualVT(that *ResourceList) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Memory != that.Memory {
		return false
	}
	if this.Cpu != that.Cpu {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ResourceList) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ResourceList)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ResourceRequirements) StableEqualVT(that *ResourceRequirements) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Requests.StableEqualVT(that.Requests) {
		return false
	}
	if !this.Limits.StableEqualVT(that.Limits) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ResourceRequirements) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ResourceRequirements)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ResourceRequirements) EqualVT(that *ResourceRequirements) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Requests.EqualVT(that.Requests) {
		return false
	}
	if !this.Limits.EqualVT(that.Limits) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ResourceRequirements) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ResourceRequirements)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *HttpProbe) StableEqualVT(that *HttpProbe) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Path != that.Path {
		return false
	}
	if this.Port != that.Port {
		return false
	}
	if this.Tls != that.Tls {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *HttpProbe) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*HttpProbe)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *HttpProbe) EqualVT(that *HttpProbe) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Path != that.Path {
		return false
	}
	if this.Port != that.Port {
		return false
	}
	if this.Tls != that.Tls {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *HttpProbe) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*HttpProbe)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CmdProbe) StableEqualVT(that *CmdProbe) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Command) != len(that.Command) {
		return false
	}
	for i, vx := range this.Command {
		vy := that.Command[i]
		if vx != vy {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CmdProbe) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CmdProbe)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *CmdProbe) EqualVT(that *CmdProbe) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Command) != len(that.Command) {
		return false
	}
	for i, vx := range this.Command {
		vy := that.Command[i]
		if vx != vy {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CmdProbe) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CmdProbe)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *TcpProbe) StableEqualVT(that *TcpProbe) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Port != that.Port {
		return false
	}
	if this.Host != that.Host {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *TcpProbe) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*TcpProbe)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *TcpProbe) EqualVT(that *TcpProbe) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Port != that.Port {
		return false
	}
	if this.Host != that.Host {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *TcpProbe) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*TcpProbe)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *HealthCheck) StableEqualVT(that *HealthCheck) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.ProbeConfig == nil && that.ProbeConfig != nil {
		return false
	} else if this.ProbeConfig != nil {
		if that.ProbeConfig == nil {
			return false
		}
		if !this.ProbeConfig.(interface {
			StableEqualVT(isHealthCheck_ProbeConfig) bool
		}).StableEqualVT(that.ProbeConfig) {
			return false
		}
	}
	if !(*durationpb1.Duration)(this.Delay).StableEqualVT((*durationpb1.Duration)(that.Delay)) {
		return false
	}
	if !(*durationpb1.Duration)(this.Period).StableEqualVT((*durationpb1.Duration)(that.Period)) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *HealthCheck) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*HealthCheck)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *HealthCheck_Http) StableEqualVT(thatIface isHealthCheck_ProbeConfig) bool {
	that, ok := thatIface.(*HealthCheck_Http)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Http, that.Http; p != q {
		if p == nil {
			p = &HttpProbe{}
		}
		if q == nil {
			q = &HttpProbe{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *HealthCheck_Cmd) StableEqualVT(thatIface isHealthCheck_ProbeConfig) bool {
	that, ok := thatIface.(*HealthCheck_Cmd)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Cmd, that.Cmd; p != q {
		if p == nil {
			p = &CmdProbe{}
		}
		if q == nil {
			q = &CmdProbe{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *HealthCheck_Tcp) StableEqualVT(thatIface isHealthCheck_ProbeConfig) bool {
	that, ok := thatIface.(*HealthCheck_Tcp)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Tcp, that.Tcp; p != q {
		if p == nil {
			p = &TcpProbe{}
		}
		if q == nil {
			q = &TcpProbe{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *HealthCheck) EqualVT(that *HealthCheck) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.ProbeConfig == nil && that.ProbeConfig != nil {
		return false
	} else if this.ProbeConfig != nil {
		if that.ProbeConfig == nil {
			return false
		}
		if !this.ProbeConfig.(interface {
			EqualVT(isHealthCheck_ProbeConfig) bool
		}).EqualVT(that.ProbeConfig) {
			return false
		}
	}
	if !(*durationpb1.Duration)(this.Delay).EqualVT((*durationpb1.Duration)(that.Delay)) {
		return false
	}
	if !(*durationpb1.Duration)(this.Period).EqualVT((*durationpb1.Duration)(that.Period)) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *HealthCheck) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*HealthCheck)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *HealthCheck_Http) EqualVT(thatIface isHealthCheck_ProbeConfig) bool {
	that, ok := thatIface.(*HealthCheck_Http)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Http, that.Http; p != q {
		if p == nil {
			p = &HttpProbe{}
		}
		if q == nil {
			q = &HttpProbe{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *HealthCheck_Cmd) EqualVT(thatIface isHealthCheck_ProbeConfig) bool {
	that, ok := thatIface.(*HealthCheck_Cmd)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Cmd, that.Cmd; p != q {
		if p == nil {
			p = &CmdProbe{}
		}
		if q == nil {
			q = &CmdProbe{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *HealthCheck_Tcp) EqualVT(thatIface isHealthCheck_ProbeConfig) bool {
	that, ok := thatIface.(*HealthCheck_Tcp)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Tcp, that.Tcp; p != q {
		if p == nil {
			p = &TcpProbe{}
		}
		if q == nil {
			q = &TcpProbe{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ImageRegistryInfo) StableEqualVT(that *ImageRegistryInfo) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.ContainerRegistryId != that.ContainerRegistryId {
		return false
	}
	if this.ContainerRegistry != that.ContainerRegistry {
		return false
	}
	if this.ImageRepository != that.ImageRepository {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ImageRegistryInfo) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ImageRegistryInfo)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ImageRegistryInfo) EqualVT(that *ImageRegistryInfo) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.ContainerRegistryId != that.ContainerRegistryId {
		return false
	}
	if this.ContainerRegistry != that.ContainerRegistry {
		return false
	}
	if this.ImageRepository != that.ImageRepository {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ImageRegistryInfo) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ImageRegistryInfo)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ImageDetails) StableEqualVT(that *ImageDetails) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.RegistryInfo.StableEqualVT(that.RegistryInfo) {
		return false
	}
	if this.Identifier != that.Identifier {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ImageDetails) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ImageDetails)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ImageDetails) EqualVT(that *ImageDetails) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.RegistryInfo.EqualVT(that.RegistryInfo) {
		return false
	}
	if this.Identifier != that.Identifier {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ImageDetails) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ImageDetails)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ProgramConfig) StableEqualVT(that *ProgramConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	if this.Image != that.Image {
		return false
	}
	if len(this.Cmd) != len(that.Cmd) {
		return false
	}
	for i, vx := range this.Cmd {
		vy := that.Cmd[i]
		if vx != vy {
			return false
		}
	}
	if len(this.Entrypoint) != len(that.Entrypoint) {
		return false
	}
	for i, vx := range this.Entrypoint {
		vy := that.Entrypoint[i]
		if vx != vy {
			return false
		}
	}
	if len(this.Env) != len(that.Env) {
		return false
	}
	for i, vx := range this.Env {
		vy, ok := that.Env[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &EnvValue{}
			}
			if q == nil {
				q = &EnvValue{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if !this.Resources.StableEqualVT(that.Resources) {
		return false
	}
	if !this.HealthCheck.StableEqualVT(that.HealthCheck) {
		return false
	}
	if len(this.Ports) != len(that.Ports) {
		return false
	}
	for i, vx := range this.Ports {
		vy := that.Ports[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &PortConfig{}
			}
			if q == nil {
				q = &PortConfig{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if !this.ImageRegistryInfo.StableEqualVT(that.ImageRegistryInfo) {
		return false
	}
	if this.TemplateComplete != that.TemplateComplete {
		return false
	}
	if this.ImageTag != that.ImageTag {
		return false
	}
	if this.WorkingDirectory != that.WorkingDirectory {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ProgramConfig) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ProgramConfig)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ProgramConfig) EqualVT(that *ProgramConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	if this.Image != that.Image {
		return false
	}
	if len(this.Cmd) != len(that.Cmd) {
		return false
	}
	for i, vx := range this.Cmd {
		vy := that.Cmd[i]
		if vx != vy {
			return false
		}
	}
	if len(this.Entrypoint) != len(that.Entrypoint) {
		return false
	}
	for i, vx := range this.Entrypoint {
		vy := that.Entrypoint[i]
		if vx != vy {
			return false
		}
	}
	if len(this.Env) != len(that.Env) {
		return false
	}
	for i, vx := range this.Env {
		vy, ok := that.Env[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &EnvValue{}
			}
			if q == nil {
				q = &EnvValue{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if !this.Resources.EqualVT(that.Resources) {
		return false
	}
	if !this.HealthCheck.EqualVT(that.HealthCheck) {
		return false
	}
	if len(this.Ports) != len(that.Ports) {
		return false
	}
	for i, vx := range this.Ports {
		vy := that.Ports[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &PortConfig{}
			}
			if q == nil {
				q = &PortConfig{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if !this.ImageRegistryInfo.EqualVT(that.ImageRegistryInfo) {
		return false
	}
	if this.TemplateComplete != that.TemplateComplete {
		return false
	}
	if this.ImageTag != that.ImageTag {
		return false
	}
	if this.WorkingDirectory != that.WorkingDirectory {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ProgramConfig) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ProgramConfig)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *PerReleaseChannelProgramConfig) StableEqualVT(that *PerReleaseChannelProgramConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	if len(this.Env) != len(that.Env) {
		return false
	}
	for i, vx := range this.Env {
		vy, ok := that.Env[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &EnvValue{}
			}
			if q == nil {
				q = &EnvValue{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if this.Image != that.Image {
		return false
	}
	if !this.ImageRegistryInfo.StableEqualVT(that.ImageRegistryInfo) {
		return false
	}
	if this.ImageTag != that.ImageTag {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *PerReleaseChannelProgramConfig) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*PerReleaseChannelProgramConfig)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *PerReleaseChannelProgramConfig) EqualVT(that *PerReleaseChannelProgramConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	if len(this.Env) != len(that.Env) {
		return false
	}
	for i, vx := range this.Env {
		vy, ok := that.Env[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &EnvValue{}
			}
			if q == nil {
				q = &EnvValue{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if this.Image != that.Image {
		return false
	}
	if !this.ImageRegistryInfo.EqualVT(that.ImageRegistryInfo) {
		return false
	}
	if this.ImageTag != that.ImageTag {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *PerReleaseChannelProgramConfig) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*PerReleaseChannelProgramConfig)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
