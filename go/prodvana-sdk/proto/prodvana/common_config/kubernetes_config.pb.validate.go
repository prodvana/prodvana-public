// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: prodvana/common_config/kubernetes_config.proto

package common_config

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on LocalConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LocalConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LocalConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LocalConfigMultiError, or
// nil if none found.
func (m *LocalConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *LocalConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SubPath

	switch v := m.PathOneof.(type) {
	case *LocalConfig_Path:
		if v == nil {
			err := LocalConfigValidationError{
				field:  "PathOneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Path
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return LocalConfigMultiError(errors)
	}

	return nil
}

// LocalConfigMultiError is an error wrapping multiple validation errors
// returned by LocalConfig.ValidateAll() if the designated constraints aren't met.
type LocalConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LocalConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LocalConfigMultiError) AllErrors() []error { return m }

// LocalConfigValidationError is the validation error returned by
// LocalConfig.Validate if the designated constraints aren't met.
type LocalConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LocalConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LocalConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LocalConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LocalConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LocalConfigValidationError) ErrorName() string { return "LocalConfigValidationError" }

// Error satisfies the builtin error interface
func (e LocalConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLocalConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LocalConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LocalConfigValidationError{}

// Validate checks the field values on RemoteConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RemoteConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoteConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RemoteConfigMultiError, or
// nil if none found.
func (m *RemoteConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoteConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SubPath

	switch v := m.RemoteOneof.(type) {
	case *RemoteConfig_TarballBlobId:
		if v == nil {
			err := RemoteConfigValidationError{
				field:  "RemoteOneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for TarballBlobId
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return RemoteConfigMultiError(errors)
	}

	return nil
}

// RemoteConfigMultiError is an error wrapping multiple validation errors
// returned by RemoteConfig.ValidateAll() if the designated constraints aren't met.
type RemoteConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoteConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoteConfigMultiError) AllErrors() []error { return m }

// RemoteConfigValidationError is the validation error returned by
// RemoteConfig.Validate if the designated constraints aren't met.
type RemoteConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoteConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoteConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoteConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoteConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoteConfigValidationError) ErrorName() string { return "RemoteConfigValidationError" }

// Error satisfies the builtin error interface
func (e RemoteConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoteConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoteConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoteConfigValidationError{}

// Validate checks the field values on KubernetesConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *KubernetesConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on KubernetesConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// KubernetesConfigMultiError, or nil if none found.
func (m *KubernetesConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *KubernetesConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _KubernetesConfig_Type_NotInLookup[m.GetType()]; ok {
		err := KubernetesConfigValidationError{
			field:  "Type",
			reason: "value must not be in list [UNKNOWN]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for EnvInjectionMode

	for idx, item := range m.GetPatches() {
		_, _ = idx, item

		if item == nil {
			err := KubernetesConfigValidationError{
				field:  fmt.Sprintf("Patches[%v]", idx),
				reason: "value is required",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, KubernetesConfigValidationError{
						field:  fmt.Sprintf("Patches[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, KubernetesConfigValidationError{
						field:  fmt.Sprintf("Patches[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return KubernetesConfigValidationError{
					field:  fmt.Sprintf("Patches[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	oneofSourceOneofPresent := false
	switch v := m.SourceOneof.(type) {
	case *KubernetesConfig_Inlined:
		if v == nil {
			err := KubernetesConfigValidationError{
				field:  "SourceOneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofSourceOneofPresent = true

		if utf8.RuneCountInString(m.GetInlined()) < 1 {
			err := KubernetesConfigValidationError{
				field:  "Inlined",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *KubernetesConfig_Local:
		if v == nil {
			err := KubernetesConfigValidationError{
				field:  "SourceOneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofSourceOneofPresent = true

		if all {
			switch v := interface{}(m.GetLocal()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, KubernetesConfigValidationError{
						field:  "Local",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, KubernetesConfigValidationError{
						field:  "Local",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLocal()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return KubernetesConfigValidationError{
					field:  "Local",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *KubernetesConfig_Remote:
		if v == nil {
			err := KubernetesConfigValidationError{
				field:  "SourceOneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofSourceOneofPresent = true

		if all {
			switch v := interface{}(m.GetRemote()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, KubernetesConfigValidationError{
						field:  "Remote",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, KubernetesConfigValidationError{
						field:  "Remote",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRemote()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return KubernetesConfigValidationError{
					field:  "Remote",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofSourceOneofPresent {
		err := KubernetesConfigValidationError{
			field:  "SourceOneof",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return KubernetesConfigMultiError(errors)
	}

	return nil
}

// KubernetesConfigMultiError is an error wrapping multiple validation errors
// returned by KubernetesConfig.ValidateAll() if the designated constraints
// aren't met.
type KubernetesConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KubernetesConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KubernetesConfigMultiError) AllErrors() []error { return m }

// KubernetesConfigValidationError is the validation error returned by
// KubernetesConfig.Validate if the designated constraints aren't met.
type KubernetesConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KubernetesConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KubernetesConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KubernetesConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KubernetesConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KubernetesConfigValidationError) ErrorName() string { return "KubernetesConfigValidationError" }

// Error satisfies the builtin error interface
func (e KubernetesConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKubernetesConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KubernetesConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KubernetesConfigValidationError{}

var _KubernetesConfig_Type_NotInLookup = map[KubernetesConfig_Type]struct{}{
	0: {},
}

// Validate checks the field values on KubernetesPatch with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *KubernetesPatch) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on KubernetesPatch with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// KubernetesPatchMultiError, or nil if none found.
func (m *KubernetesPatch) ValidateAll() error {
	return m.validate(true)
}

func (m *KubernetesPatch) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTarget()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, KubernetesPatchValidationError{
					field:  "Target",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, KubernetesPatchValidationError{
					field:  "Target",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTarget()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return KubernetesPatchValidationError{
				field:  "Target",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	oneofPatchOneofPresent := false
	switch v := m.PatchOneof.(type) {
	case *KubernetesPatch_Replace_:
		if v == nil {
			err := KubernetesPatchValidationError{
				field:  "PatchOneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofPatchOneofPresent = true

		if m.GetReplace() == nil {
			err := KubernetesPatchValidationError{
				field:  "Replace",
				reason: "value is required",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetReplace()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, KubernetesPatchValidationError{
						field:  "Replace",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, KubernetesPatchValidationError{
						field:  "Replace",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetReplace()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return KubernetesPatchValidationError{
					field:  "Replace",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofPatchOneofPresent {
		err := KubernetesPatchValidationError{
			field:  "PatchOneof",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return KubernetesPatchMultiError(errors)
	}

	return nil
}

// KubernetesPatchMultiError is an error wrapping multiple validation errors
// returned by KubernetesPatch.ValidateAll() if the designated constraints
// aren't met.
type KubernetesPatchMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KubernetesPatchMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KubernetesPatchMultiError) AllErrors() []error { return m }

// KubernetesPatchValidationError is the validation error returned by
// KubernetesPatch.Validate if the designated constraints aren't met.
type KubernetesPatchValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KubernetesPatchValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KubernetesPatchValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KubernetesPatchValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KubernetesPatchValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KubernetesPatchValidationError) ErrorName() string { return "KubernetesPatchValidationError" }

// Error satisfies the builtin error interface
func (e KubernetesPatchValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKubernetesPatch.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KubernetesPatchValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KubernetesPatchValidationError{}

// Validate checks the field values on KubernetesPatch_Target with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *KubernetesPatch_Target) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on KubernetesPatch_Target with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// KubernetesPatch_TargetMultiError, or nil if none found.
func (m *KubernetesPatch_Target) ValidateAll() error {
	return m.validate(true)
}

func (m *KubernetesPatch_Target) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Group

	// no validation rules for Version

	// no validation rules for Kind

	// no validation rules for Name

	// no validation rules for Namespace

	if len(errors) > 0 {
		return KubernetesPatch_TargetMultiError(errors)
	}

	return nil
}

// KubernetesPatch_TargetMultiError is an error wrapping multiple validation
// errors returned by KubernetesPatch_Target.ValidateAll() if the designated
// constraints aren't met.
type KubernetesPatch_TargetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KubernetesPatch_TargetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KubernetesPatch_TargetMultiError) AllErrors() []error { return m }

// KubernetesPatch_TargetValidationError is the validation error returned by
// KubernetesPatch_Target.Validate if the designated constraints aren't met.
type KubernetesPatch_TargetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KubernetesPatch_TargetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KubernetesPatch_TargetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KubernetesPatch_TargetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KubernetesPatch_TargetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KubernetesPatch_TargetValidationError) ErrorName() string {
	return "KubernetesPatch_TargetValidationError"
}

// Error satisfies the builtin error interface
func (e KubernetesPatch_TargetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKubernetesPatch_Target.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KubernetesPatch_TargetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KubernetesPatch_TargetValidationError{}

// Validate checks the field values on KubernetesPatch_Replace with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *KubernetesPatch_Replace) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on KubernetesPatch_Replace with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// KubernetesPatch_ReplaceMultiError, or nil if none found.
func (m *KubernetesPatch_Replace) ValidateAll() error {
	return m.validate(true)
}

func (m *KubernetesPatch_Replace) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Path

	oneofValueOneofPresent := false
	switch v := m.ValueOneof.(type) {
	case *KubernetesPatch_Replace_String_:
		if v == nil {
			err := KubernetesPatch_ReplaceValidationError{
				field:  "ValueOneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofValueOneofPresent = true
		// no validation rules for String_
	case *KubernetesPatch_Replace_IntAsString:
		if v == nil {
			err := KubernetesPatch_ReplaceValidationError{
				field:  "ValueOneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofValueOneofPresent = true
		// no validation rules for IntAsString
	default:
		_ = v // ensures v is used
	}
	if !oneofValueOneofPresent {
		err := KubernetesPatch_ReplaceValidationError{
			field:  "ValueOneof",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return KubernetesPatch_ReplaceMultiError(errors)
	}

	return nil
}

// KubernetesPatch_ReplaceMultiError is an error wrapping multiple validation
// errors returned by KubernetesPatch_Replace.ValidateAll() if the designated
// constraints aren't met.
type KubernetesPatch_ReplaceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KubernetesPatch_ReplaceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KubernetesPatch_ReplaceMultiError) AllErrors() []error { return m }

// KubernetesPatch_ReplaceValidationError is the validation error returned by
// KubernetesPatch_Replace.Validate if the designated constraints aren't met.
type KubernetesPatch_ReplaceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KubernetesPatch_ReplaceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KubernetesPatch_ReplaceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KubernetesPatch_ReplaceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KubernetesPatch_ReplaceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KubernetesPatch_ReplaceValidationError) ErrorName() string {
	return "KubernetesPatch_ReplaceValidationError"
}

// Error satisfies the builtin error interface
func (e KubernetesPatch_ReplaceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKubernetesPatch_Replace.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KubernetesPatch_ReplaceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KubernetesPatch_ReplaceValidationError{}
