// Code generated by protoc-gen-go-vtproto. DO NOT EDIT.
// protoc-gen-go-vtproto version: v0.6.0
// source: prodvana/common_config/task.proto

package common_config

import (
	durationpb1 "github.com/planetscale/vtprotobuf/types/known/durationpb"
	volumes "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/volumes"
	proto "google.golang.org/protobuf/proto"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

func (m *TaskConfig_KubernetesConfig) CloneVT() *TaskConfig_KubernetesConfig {
	if m == nil {
		return (*TaskConfig_KubernetesConfig)(nil)
	}
	r := new(TaskConfig_KubernetesConfig)
	r.ServiceAccount = m.ServiceAccount
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *TaskConfig_KubernetesConfig) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *TaskConfig) CloneVT() *TaskConfig {
	if m == nil {
		return (*TaskConfig)(nil)
	}
	r := new(TaskConfig)
	r.Program = m.Program.CloneVT()
	r.Ttl = (*durationpb.Duration)((*durationpb1.Duration)(m.Ttl).CloneVT())
	r.RetryConfig = m.RetryConfig.CloneVT()
	if rhs := m.Volumes; rhs != nil {
		tmpContainer := make([]*volumes.Volume, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Volumes = tmpContainer
	}
	if m.RuntimeSpecific != nil {
		r.RuntimeSpecific = m.RuntimeSpecific.(interface {
			CloneVT() isTaskConfig_RuntimeSpecific
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *TaskConfig) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *TaskConfig_K8S) CloneVT() isTaskConfig_RuntimeSpecific {
	if m == nil {
		return (*TaskConfig_K8S)(nil)
	}
	r := new(TaskConfig_K8S)
	r.K8S = m.K8S.CloneVT()
	return r
}

func (this *TaskConfig_KubernetesConfig) StableEqualVT(that *TaskConfig_KubernetesConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.ServiceAccount != that.ServiceAccount {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *TaskConfig_KubernetesConfig) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*TaskConfig_KubernetesConfig)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *TaskConfig) StableEqualVT(that *TaskConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.RuntimeSpecific == nil && that.RuntimeSpecific != nil {
		return false
	} else if this.RuntimeSpecific != nil {
		if that.RuntimeSpecific == nil {
			return false
		}
		if !this.RuntimeSpecific.(interface {
			StableEqualVT(isTaskConfig_RuntimeSpecific) bool
		}).StableEqualVT(that.RuntimeSpecific) {
			return false
		}
	}
	if !this.Program.StableEqualVT(that.Program) {
		return false
	}
	if !this.RetryConfig.StableEqualVT(that.RetryConfig) {
		return false
	}
	if len(this.Volumes) != len(that.Volumes) {
		return false
	}
	for i, vx := range this.Volumes {
		vy := that.Volumes[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &volumes.Volume{}
			}
			if q == nil {
				q = &volumes.Volume{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if !(*durationpb1.Duration)(this.Ttl).StableEqualVT((*durationpb1.Duration)(that.Ttl)) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *TaskConfig) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*TaskConfig)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *TaskConfig_K8S) StableEqualVT(thatIface isTaskConfig_RuntimeSpecific) bool {
	that, ok := thatIface.(*TaskConfig_K8S)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.K8S, that.K8S; p != q {
		if p == nil {
			p = &TaskConfig_KubernetesConfig{}
		}
		if q == nil {
			q = &TaskConfig_KubernetesConfig{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *TaskConfig_KubernetesConfig) EqualVT(that *TaskConfig_KubernetesConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.ServiceAccount != that.ServiceAccount {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *TaskConfig_KubernetesConfig) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*TaskConfig_KubernetesConfig)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *TaskConfig) EqualVT(that *TaskConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.RuntimeSpecific == nil && that.RuntimeSpecific != nil {
		return false
	} else if this.RuntimeSpecific != nil {
		if that.RuntimeSpecific == nil {
			return false
		}
		if !this.RuntimeSpecific.(interface {
			EqualVT(isTaskConfig_RuntimeSpecific) bool
		}).EqualVT(that.RuntimeSpecific) {
			return false
		}
	}
	if !this.Program.EqualVT(that.Program) {
		return false
	}
	if !this.RetryConfig.EqualVT(that.RetryConfig) {
		return false
	}
	if len(this.Volumes) != len(that.Volumes) {
		return false
	}
	for i, vx := range this.Volumes {
		vy := that.Volumes[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &volumes.Volume{}
			}
			if q == nil {
				q = &volumes.Volume{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if !(*durationpb1.Duration)(this.Ttl).EqualVT((*durationpb1.Duration)(that.Ttl)) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *TaskConfig) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*TaskConfig)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *TaskConfig_K8S) EqualVT(thatIface isTaskConfig_RuntimeSpecific) bool {
	that, ok := thatIface.(*TaskConfig_K8S)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.K8S, that.K8S; p != q {
		if p == nil {
			p = &TaskConfig_KubernetesConfig{}
		}
		if q == nil {
			q = &TaskConfig_KubernetesConfig{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}
