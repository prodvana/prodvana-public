// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.1
// 	protoc        v3.21.10
// source: prodvana/common_config/program.proto

package common_config

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PortConfig_Protocol int32

const (
	PortConfig_UNKNOWN PortConfig_Protocol = 0
	PortConfig_HTTP    PortConfig_Protocol = 1
	PortConfig_HTTP2   PortConfig_Protocol = 2
	PortConfig_GRPC    PortConfig_Protocol = 3
	PortConfig_TCP     PortConfig_Protocol = 4
)

// Enum value maps for PortConfig_Protocol.
var (
	PortConfig_Protocol_name = map[int32]string{
		0: "UNKNOWN",
		1: "HTTP",
		2: "HTTP2",
		3: "GRPC",
		4: "TCP",
	}
	PortConfig_Protocol_value = map[string]int32{
		"UNKNOWN": 0,
		"HTTP":    1,
		"HTTP2":   2,
		"GRPC":    3,
		"TCP":     4,
	}
)

func (x PortConfig_Protocol) Enum() *PortConfig_Protocol {
	p := new(PortConfig_Protocol)
	*p = x
	return p
}

func (x PortConfig_Protocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortConfig_Protocol) Descriptor() protoreflect.EnumDescriptor {
	return file_prodvana_common_config_program_proto_enumTypes[0].Descriptor()
}

func (PortConfig_Protocol) Type() protoreflect.EnumType {
	return &file_prodvana_common_config_program_proto_enumTypes[0]
}

func (x PortConfig_Protocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortConfig_Protocol.Descriptor instead.
func (PortConfig_Protocol) EnumDescriptor() ([]byte, []int) {
	return file_prodvana_common_config_program_proto_rawDescGZIP(), []int{0, 0}
}

type PortConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port int32 `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	// optional, default to the same value as `port`
	TargetPort int32 `protobuf:"varint,2,opt,name=target_port,json=targetPort,proto3" json:"target_port,omitempty"`
	// if this port should be exposed to the public internet
	External bool                `protobuf:"varint,3,opt,name=external,proto3" json:"external,omitempty"`
	Protocol PortConfig_Protocol `protobuf:"varint,4,opt,name=protocol,proto3,enum=prodvana.common_config.PortConfig_Protocol" json:"protocol,omitempty"`
	// if the connection should use TLS
	Tls bool `protobuf:"varint,5,opt,name=tls,proto3" json:"tls,omitempty"`
}

func (x *PortConfig) Reset() {
	*x = PortConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_common_config_program_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortConfig) ProtoMessage() {}

func (x *PortConfig) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_common_config_program_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortConfig.ProtoReflect.Descriptor instead.
func (*PortConfig) Descriptor() ([]byte, []int) {
	return file_prodvana_common_config_program_proto_rawDescGZIP(), []int{0}
}

func (x *PortConfig) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *PortConfig) GetTargetPort() int32 {
	if x != nil {
		return x.TargetPort
	}
	return 0
}

func (x *PortConfig) GetExternal() bool {
	if x != nil {
		return x.External
	}
	return false
}

func (x *PortConfig) GetProtocol() PortConfig_Protocol {
	if x != nil {
		return x.Protocol
	}
	return PortConfig_UNKNOWN
}

func (x *PortConfig) GetTls() bool {
	if x != nil {
		return x.Tls
	}
	return false
}

type ResourceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Memory string `protobuf:"bytes,1,opt,name=memory,proto3" json:"memory,omitempty"`
	Cpu    string `protobuf:"bytes,2,opt,name=cpu,proto3" json:"cpu,omitempty"`
}

func (x *ResourceList) Reset() {
	*x = ResourceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_common_config_program_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceList) ProtoMessage() {}

func (x *ResourceList) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_common_config_program_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceList.ProtoReflect.Descriptor instead.
func (*ResourceList) Descriptor() ([]byte, []int) {
	return file_prodvana_common_config_program_proto_rawDescGZIP(), []int{1}
}

func (x *ResourceList) GetMemory() string {
	if x != nil {
		return x.Memory
	}
	return ""
}

func (x *ResourceList) GetCpu() string {
	if x != nil {
		return x.Cpu
	}
	return ""
}

type ResourceRequirements struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests *ResourceList `protobuf:"bytes,1,opt,name=requests,proto3" json:"requests,omitempty"`
}

func (x *ResourceRequirements) Reset() {
	*x = ResourceRequirements{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_common_config_program_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceRequirements) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceRequirements) ProtoMessage() {}

func (x *ResourceRequirements) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_common_config_program_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceRequirements.ProtoReflect.Descriptor instead.
func (*ResourceRequirements) Descriptor() ([]byte, []int) {
	return file_prodvana_common_config_program_proto_rawDescGZIP(), []int{2}
}

func (x *ResourceRequirements) GetRequests() *ResourceList {
	if x != nil {
		return x.Requests
	}
	return nil
}

type HttpProbe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Port int32  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Tls  bool   `protobuf:"varint,3,opt,name=tls,proto3" json:"tls,omitempty"`
}

func (x *HttpProbe) Reset() {
	*x = HttpProbe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_common_config_program_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpProbe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpProbe) ProtoMessage() {}

func (x *HttpProbe) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_common_config_program_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpProbe.ProtoReflect.Descriptor instead.
func (*HttpProbe) Descriptor() ([]byte, []int) {
	return file_prodvana_common_config_program_proto_rawDescGZIP(), []int{3}
}

func (x *HttpProbe) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *HttpProbe) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *HttpProbe) GetTls() bool {
	if x != nil {
		return x.Tls
	}
	return false
}

type CmdProbe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command []string `protobuf:"bytes,1,rep,name=command,proto3" json:"command,omitempty"`
}

func (x *CmdProbe) Reset() {
	*x = CmdProbe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_common_config_program_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdProbe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdProbe) ProtoMessage() {}

func (x *CmdProbe) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_common_config_program_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdProbe.ProtoReflect.Descriptor instead.
func (*CmdProbe) Descriptor() ([]byte, []int) {
	return file_prodvana_common_config_program_proto_rawDescGZIP(), []int{4}
}

func (x *CmdProbe) GetCommand() []string {
	if x != nil {
		return x.Command
	}
	return nil
}

type TcpProbe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port int32  `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	Host string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
}

func (x *TcpProbe) Reset() {
	*x = TcpProbe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_common_config_program_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TcpProbe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcpProbe) ProtoMessage() {}

func (x *TcpProbe) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_common_config_program_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcpProbe.ProtoReflect.Descriptor instead.
func (*TcpProbe) Descriptor() ([]byte, []int) {
	return file_prodvana_common_config_program_proto_rawDescGZIP(), []int{5}
}

func (x *TcpProbe) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *TcpProbe) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

type HealthCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ProbeConfig:
	//
	//	*HealthCheck_Http
	//	*HealthCheck_Cmd
	//	*HealthCheck_Tcp
	ProbeConfig isHealthCheck_ProbeConfig `protobuf_oneof:"probe_config"`
	Delay       *durationpb.Duration      `protobuf:"bytes,4,opt,name=delay,proto3" json:"delay,omitempty"`
	Period      *durationpb.Duration      `protobuf:"bytes,5,opt,name=period,proto3" json:"period,omitempty"`
}

func (x *HealthCheck) Reset() {
	*x = HealthCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_common_config_program_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheck) ProtoMessage() {}

func (x *HealthCheck) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_common_config_program_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheck.ProtoReflect.Descriptor instead.
func (*HealthCheck) Descriptor() ([]byte, []int) {
	return file_prodvana_common_config_program_proto_rawDescGZIP(), []int{6}
}

func (m *HealthCheck) GetProbeConfig() isHealthCheck_ProbeConfig {
	if m != nil {
		return m.ProbeConfig
	}
	return nil
}

func (x *HealthCheck) GetHttp() *HttpProbe {
	if x, ok := x.GetProbeConfig().(*HealthCheck_Http); ok {
		return x.Http
	}
	return nil
}

func (x *HealthCheck) GetCmd() *CmdProbe {
	if x, ok := x.GetProbeConfig().(*HealthCheck_Cmd); ok {
		return x.Cmd
	}
	return nil
}

func (x *HealthCheck) GetTcp() *TcpProbe {
	if x, ok := x.GetProbeConfig().(*HealthCheck_Tcp); ok {
		return x.Tcp
	}
	return nil
}

func (x *HealthCheck) GetDelay() *durationpb.Duration {
	if x != nil {
		return x.Delay
	}
	return nil
}

func (x *HealthCheck) GetPeriod() *durationpb.Duration {
	if x != nil {
		return x.Period
	}
	return nil
}

type isHealthCheck_ProbeConfig interface {
	isHealthCheck_ProbeConfig()
}

type HealthCheck_Http struct {
	Http *HttpProbe `protobuf:"bytes,1,opt,name=http,proto3,oneof"`
}

type HealthCheck_Cmd struct {
	Cmd *CmdProbe `protobuf:"bytes,2,opt,name=cmd,proto3,oneof"`
}

type HealthCheck_Tcp struct {
	Tcp *TcpProbe `protobuf:"bytes,3,opt,name=tcp,proto3,oneof"`
}

func (*HealthCheck_Http) isHealthCheck_ProbeConfig() {}

func (*HealthCheck_Cmd) isHealthCheck_ProbeConfig() {}

func (*HealthCheck_Tcp) isHealthCheck_ProbeConfig() {}

type ImageRegistryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// both container_registry_id and container_registry are supported, but only set one not both
	ContainerRegistryId string `protobuf:"bytes,1,opt,name=container_registry_id,json=containerRegistryId,proto3" json:"container_registry_id,omitempty"`
	ContainerRegistry   string `protobuf:"bytes,2,opt,name=container_registry,json=containerRegistry,proto3" json:"container_registry,omitempty"`
	// Not the URL, everything after: username/reponame
	// leaving it as once field because the spec considers it 1 field
	// in theory you can have no username, or nest the repo names
	ImageRepository string `protobuf:"bytes,7,opt,name=image_repository,json=imageRepository,proto3" json:"image_repository,omitempty"`
}

func (x *ImageRegistryInfo) Reset() {
	*x = ImageRegistryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_common_config_program_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageRegistryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageRegistryInfo) ProtoMessage() {}

func (x *ImageRegistryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_common_config_program_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageRegistryInfo.ProtoReflect.Descriptor instead.
func (*ImageRegistryInfo) Descriptor() ([]byte, []int) {
	return file_prodvana_common_config_program_proto_rawDescGZIP(), []int{7}
}

func (x *ImageRegistryInfo) GetContainerRegistryId() string {
	if x != nil {
		return x.ContainerRegistryId
	}
	return ""
}

func (x *ImageRegistryInfo) GetContainerRegistry() string {
	if x != nil {
		return x.ContainerRegistry
	}
	return ""
}

func (x *ImageRegistryInfo) GetImageRepository() string {
	if x != nil {
		return x.ImageRepository
	}
	return ""
}

type ImageDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegistryInfo *ImageRegistryInfo `protobuf:"bytes,1,opt,name=registry_info,json=registryInfo,proto3" json:"registry_info,omitempty"`
	// image tag or digest
	Identifier string `protobuf:"bytes,2,opt,name=identifier,proto3" json:"identifier,omitempty"`
}

func (x *ImageDetails) Reset() {
	*x = ImageDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_common_config_program_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageDetails) ProtoMessage() {}

func (x *ImageDetails) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_common_config_program_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageDetails.ProtoReflect.Descriptor instead.
func (*ImageDetails) Descriptor() ([]byte, []int) {
	return file_prodvana_common_config_program_proto_rawDescGZIP(), []int{8}
}

func (x *ImageDetails) GetRegistryInfo() *ImageRegistryInfo {
	if x != nil {
		return x.RegistryInfo
	}
	return nil
}

func (x *ImageDetails) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

// This ProgramConfig is used in multiple places, including service configuration and custom pipeline tasks.
// The validations expressed here represent the lowest common denominator of the use cases.
type ProgramConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Image             string                `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	ImageTag          string                `protobuf:"bytes,14,opt,name=image_tag,json=imageTag,proto3" json:"image_tag,omitempty"`
	ImageRegistryInfo *ImageRegistryInfo    `protobuf:"bytes,9,opt,name=image_registry_info,json=imageRegistryInfo,proto3" json:"image_registry_info,omitempty"` // optional, not guaranteed to be compatible with `image` (e.g. if user decides to paste in a public image string)
	Cmd               []string              `protobuf:"bytes,3,rep,name=cmd,proto3" json:"cmd,omitempty"`
	Entrypoint        []string              `protobuf:"bytes,4,rep,name=entrypoint,proto3" json:"entrypoint,omitempty"`
	Env               map[string]*EnvValue  `protobuf:"bytes,5,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Resources         *ResourceRequirements `protobuf:"bytes,6,opt,name=resources,proto3" json:"resources,omitempty"`
	HealthCheck       *HealthCheck          `protobuf:"bytes,7,opt,name=health_check,json=healthCheck,proto3" json:"health_check,omitempty"`
	// empty list is ok, default from docker image will be used
	Ports []*PortConfig `protobuf:"bytes,8,rep,name=ports,proto3" json:"ports,omitempty"`
	// Only set when this ServiceConfig represents a ServiceTemplate
	// When set, this program will be added in whole to the target service's
	// programs in full, and will not partially apply to a program with the
	// same name in the target service's config.
	TemplateComplete bool `protobuf:"varint,10,opt,name=template_complete,json=templateComplete,proto3" json:"template_complete,omitempty"`
}

func (x *ProgramConfig) Reset() {
	*x = ProgramConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_common_config_program_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProgramConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProgramConfig) ProtoMessage() {}

func (x *ProgramConfig) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_common_config_program_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProgramConfig.ProtoReflect.Descriptor instead.
func (*ProgramConfig) Descriptor() ([]byte, []int) {
	return file_prodvana_common_config_program_proto_rawDescGZIP(), []int{9}
}

func (x *ProgramConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProgramConfig) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *ProgramConfig) GetImageTag() string {
	if x != nil {
		return x.ImageTag
	}
	return ""
}

func (x *ProgramConfig) GetImageRegistryInfo() *ImageRegistryInfo {
	if x != nil {
		return x.ImageRegistryInfo
	}
	return nil
}

func (x *ProgramConfig) GetCmd() []string {
	if x != nil {
		return x.Cmd
	}
	return nil
}

func (x *ProgramConfig) GetEntrypoint() []string {
	if x != nil {
		return x.Entrypoint
	}
	return nil
}

func (x *ProgramConfig) GetEnv() map[string]*EnvValue {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *ProgramConfig) GetResources() *ResourceRequirements {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *ProgramConfig) GetHealthCheck() *HealthCheck {
	if x != nil {
		return x.HealthCheck
	}
	return nil
}

func (x *ProgramConfig) GetPorts() []*PortConfig {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *ProgramConfig) GetTemplateComplete() bool {
	if x != nil {
		return x.TemplateComplete
	}
	return false
}

type PerReleaseChannelProgramConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // must match a program in top-level program config
	Env  map[string]*EnvValue `protobuf:"bytes,2,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// If present, overrides main program config.
	// TODO: If users need to enforce that different RCs require different images, add requires_separate_images option to ProgramConfig.
	// This will prevent accidentally undoing separate images via the UI or autopush.
	Image             string             `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	ImageRegistryInfo *ImageRegistryInfo `protobuf:"bytes,4,opt,name=image_registry_info,json=imageRegistryInfo,proto3" json:"image_registry_info,omitempty"` // optional, not guaranteed to be compatible with `image` (e.g. if user decides to paste in a public image string)
	ImageTag          string             `protobuf:"bytes,5,opt,name=image_tag,json=imageTag,proto3" json:"image_tag,omitempty"`
}

func (x *PerReleaseChannelProgramConfig) Reset() {
	*x = PerReleaseChannelProgramConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_common_config_program_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerReleaseChannelProgramConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerReleaseChannelProgramConfig) ProtoMessage() {}

func (x *PerReleaseChannelProgramConfig) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_common_config_program_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerReleaseChannelProgramConfig.ProtoReflect.Descriptor instead.
func (*PerReleaseChannelProgramConfig) Descriptor() ([]byte, []int) {
	return file_prodvana_common_config_program_proto_rawDescGZIP(), []int{10}
}

func (x *PerReleaseChannelProgramConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PerReleaseChannelProgramConfig) GetEnv() map[string]*EnvValue {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *PerReleaseChannelProgramConfig) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *PerReleaseChannelProgramConfig) GetImageRegistryInfo() *ImageRegistryInfo {
	if x != nil {
		return x.ImageRegistryInfo
	}
	return nil
}

func (x *PerReleaseChannelProgramConfig) GetImageTag() string {
	if x != nil {
		return x.ImageTag
	}
	return ""
}

var File_prodvana_common_config_program_proto protoreflect.FileDescriptor

var file_prodvana_common_config_program_proto_rawDesc = []byte{
	0x0a, 0x24, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x20,
	0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e, 0x76, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa0, 0x02, 0x0a, 0x0a, 0x50, 0x6f,
	0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x1a, 0x06, 0x18, 0xff, 0xff,
	0x03, 0x28, 0x00, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x0b, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0b,
	0xfa, 0x42, 0x08, 0x1a, 0x06, 0x18, 0xff, 0xff, 0x03, 0x28, 0x00, 0x52, 0x0a, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x12, 0x47, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x10, 0x0a, 0x03,
	0x74, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x74, 0x6c, 0x73, 0x22, 0x4c,
	0x0a, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x54, 0x54, 0x50, 0x10,
	0x01, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x54, 0x54, 0x50, 0x32, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04,
	0x47, 0x52, 0x50, 0x43, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x43, 0x50, 0x10, 0x04, 0x22,
	0x04, 0x08, 0x05, 0x10, 0x05, 0x2a, 0x05, 0x48, 0x54, 0x54, 0x50, 0x53, 0x22, 0x38, 0x0a, 0x0c,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x63, 0x70, 0x75, 0x22, 0x58, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x40,
	0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x22, 0x52, 0x0a, 0x09, 0x48, 0x74, 0x74, 0x70, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x12, 0x1f, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x0b, 0xfa, 0x42, 0x08, 0x1a, 0x06, 0x18, 0xff, 0xff, 0x03, 0x20, 0x00, 0x52, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x03, 0x74, 0x6c, 0x73, 0x22, 0x24, 0x0a, 0x08, 0x43, 0x6d, 0x64, 0x50, 0x72, 0x6f, 0x62, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0x3f, 0x0a, 0x08, 0x54, 0x63,
	0x70, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x1a, 0x06, 0x18, 0xff, 0xff, 0x03, 0x20,
	0x00, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x22, 0xab, 0x02, 0x0a, 0x0b,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x37, 0x0a, 0x04, 0x68,
	0x74, 0x74, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x76, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x48, 0x00, 0x52, 0x04,
	0x68, 0x74, 0x74, 0x70, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6d, 0x64, 0x50, 0x72,
	0x6f, 0x62, 0x65, 0x48, 0x00, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x74, 0x63,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61,
	0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x54, 0x63, 0x70, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x48, 0x00, 0x52, 0x03, 0x74, 0x63, 0x70,
	0x12, 0x2f, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x61,
	0x79, 0x12, 0x31, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x42, 0x13, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0xaa, 0x01, 0x0a, 0x11, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x12, 0x32, 0x0a, 0x10, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x91, 0x01, 0x0a, 0x0c, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x58, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x27, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0xee, 0x05, 0x0a, 0x0d, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x40, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0xfa, 0x42, 0x29, 0x72,
	0x27, 0x10, 0x00, 0x18, 0x3f, 0x32, 0x21, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x3f, 0x28, 0x5b,
	0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39,
	0x5d, 0x29, 0x7b, 0x30, 0x2c, 0x31, 0x7d, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x61,
	0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61,
	0x67, 0x12, 0x59, 0x0a, 0x13, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x69,
	0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x27, 0xfa, 0x42, 0x24,
	0x9a, 0x01, 0x21, 0x18, 0x01, 0x22, 0x1d, 0x72, 0x1b, 0x32, 0x19, 0x5e, 0x5b, 0x61, 0x2d, 0x7a,
	0x41, 0x2d, 0x5a, 0x5f, 0x5d, 0x2b, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39,
	0x5f, 0x5d, 0x2a, 0x24, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x4a, 0x0a, 0x09, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0c, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x52, 0x0b, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x47, 0x0a,
	0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x92, 0x01, 0x07, 0x22, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x1a, 0x58, 0x0a, 0x08, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08,
	0x0b, 0x10, 0x0c, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x22, 0xc5, 0x03, 0x0a, 0x1e,
	0x50, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3f,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xfa, 0x42,
	0x28, 0x72, 0x26, 0x10, 0x01, 0x18, 0x3f, 0x32, 0x20, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x28,
	0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d,
	0x39, 0x5d, 0x29, 0x7b, 0x30, 0x2c, 0x31, 0x7d, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x7a, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x27, 0xfa,
	0x42, 0x24, 0x9a, 0x01, 0x21, 0x18, 0x01, 0x22, 0x1d, 0x72, 0x1b, 0x32, 0x19, 0x5e, 0x5b, 0x61,
	0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5f, 0x5d, 0x2b, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30,
	0x2d, 0x39, 0x5f, 0x5d, 0x2a, 0x24, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x59, 0x0a, 0x13, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x67, 0x1a, 0x58, 0x0a, 0x08, 0x45, 0x6e, 0x76,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e,
	0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x45, 0x6e, 0x76, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x42, 0x52, 0x5a, 0x50, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_prodvana_common_config_program_proto_rawDescOnce sync.Once
	file_prodvana_common_config_program_proto_rawDescData = file_prodvana_common_config_program_proto_rawDesc
)

func file_prodvana_common_config_program_proto_rawDescGZIP() []byte {
	file_prodvana_common_config_program_proto_rawDescOnce.Do(func() {
		file_prodvana_common_config_program_proto_rawDescData = protoimpl.X.CompressGZIP(file_prodvana_common_config_program_proto_rawDescData)
	})
	return file_prodvana_common_config_program_proto_rawDescData
}

var file_prodvana_common_config_program_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_prodvana_common_config_program_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_prodvana_common_config_program_proto_goTypes = []interface{}{
	(PortConfig_Protocol)(0),               // 0: prodvana.common_config.PortConfig.Protocol
	(*PortConfig)(nil),                     // 1: prodvana.common_config.PortConfig
	(*ResourceList)(nil),                   // 2: prodvana.common_config.ResourceList
	(*ResourceRequirements)(nil),           // 3: prodvana.common_config.ResourceRequirements
	(*HttpProbe)(nil),                      // 4: prodvana.common_config.HttpProbe
	(*CmdProbe)(nil),                       // 5: prodvana.common_config.CmdProbe
	(*TcpProbe)(nil),                       // 6: prodvana.common_config.TcpProbe
	(*HealthCheck)(nil),                    // 7: prodvana.common_config.HealthCheck
	(*ImageRegistryInfo)(nil),              // 8: prodvana.common_config.ImageRegistryInfo
	(*ImageDetails)(nil),                   // 9: prodvana.common_config.ImageDetails
	(*ProgramConfig)(nil),                  // 10: prodvana.common_config.ProgramConfig
	(*PerReleaseChannelProgramConfig)(nil), // 11: prodvana.common_config.PerReleaseChannelProgramConfig
	nil,                                    // 12: prodvana.common_config.ProgramConfig.EnvEntry
	nil,                                    // 13: prodvana.common_config.PerReleaseChannelProgramConfig.EnvEntry
	(*durationpb.Duration)(nil),            // 14: google.protobuf.Duration
	(*EnvValue)(nil),                       // 15: prodvana.common_config.EnvValue
}
var file_prodvana_common_config_program_proto_depIdxs = []int32{
	0,  // 0: prodvana.common_config.PortConfig.protocol:type_name -> prodvana.common_config.PortConfig.Protocol
	2,  // 1: prodvana.common_config.ResourceRequirements.requests:type_name -> prodvana.common_config.ResourceList
	4,  // 2: prodvana.common_config.HealthCheck.http:type_name -> prodvana.common_config.HttpProbe
	5,  // 3: prodvana.common_config.HealthCheck.cmd:type_name -> prodvana.common_config.CmdProbe
	6,  // 4: prodvana.common_config.HealthCheck.tcp:type_name -> prodvana.common_config.TcpProbe
	14, // 5: prodvana.common_config.HealthCheck.delay:type_name -> google.protobuf.Duration
	14, // 6: prodvana.common_config.HealthCheck.period:type_name -> google.protobuf.Duration
	8,  // 7: prodvana.common_config.ImageDetails.registry_info:type_name -> prodvana.common_config.ImageRegistryInfo
	8,  // 8: prodvana.common_config.ProgramConfig.image_registry_info:type_name -> prodvana.common_config.ImageRegistryInfo
	12, // 9: prodvana.common_config.ProgramConfig.env:type_name -> prodvana.common_config.ProgramConfig.EnvEntry
	3,  // 10: prodvana.common_config.ProgramConfig.resources:type_name -> prodvana.common_config.ResourceRequirements
	7,  // 11: prodvana.common_config.ProgramConfig.health_check:type_name -> prodvana.common_config.HealthCheck
	1,  // 12: prodvana.common_config.ProgramConfig.ports:type_name -> prodvana.common_config.PortConfig
	13, // 13: prodvana.common_config.PerReleaseChannelProgramConfig.env:type_name -> prodvana.common_config.PerReleaseChannelProgramConfig.EnvEntry
	8,  // 14: prodvana.common_config.PerReleaseChannelProgramConfig.image_registry_info:type_name -> prodvana.common_config.ImageRegistryInfo
	15, // 15: prodvana.common_config.ProgramConfig.EnvEntry.value:type_name -> prodvana.common_config.EnvValue
	15, // 16: prodvana.common_config.PerReleaseChannelProgramConfig.EnvEntry.value:type_name -> prodvana.common_config.EnvValue
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_prodvana_common_config_program_proto_init() }
func file_prodvana_common_config_program_proto_init() {
	if File_prodvana_common_config_program_proto != nil {
		return
	}
	file_prodvana_common_config_env_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_prodvana_common_config_program_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_common_config_program_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_common_config_program_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceRequirements); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_common_config_program_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpProbe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_common_config_program_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CmdProbe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_common_config_program_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TcpProbe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_common_config_program_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_common_config_program_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageRegistryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_common_config_program_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_common_config_program_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProgramConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_common_config_program_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerReleaseChannelProgramConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_prodvana_common_config_program_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*HealthCheck_Http)(nil),
		(*HealthCheck_Cmd)(nil),
		(*HealthCheck_Tcp)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_prodvana_common_config_program_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_prodvana_common_config_program_proto_goTypes,
		DependencyIndexes: file_prodvana_common_config_program_proto_depIdxs,
		EnumInfos:         file_prodvana_common_config_program_proto_enumTypes,
		MessageInfos:      file_prodvana_common_config_program_proto_msgTypes,
	}.Build()
	File_prodvana_common_config_program_proto = out.File
	file_prodvana_common_config_program_proto_rawDesc = nil
	file_prodvana_common_config_program_proto_goTypes = nil
	file_prodvana_common_config_program_proto_depIdxs = nil
}
