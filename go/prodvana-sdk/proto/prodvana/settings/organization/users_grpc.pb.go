// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.10
// source: prodvana/settings/organization/users.proto

package organization

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UsersSettingsManager_GetUser_FullMethodName     = "/prodvana.settings.organization.UsersSettingsManager/GetUser"
	UsersSettingsManager_ListUsers_FullMethodName   = "/prodvana.settings.organization.UsersSettingsManager/ListUsers"
	UsersSettingsManager_ListRoles_FullMethodName   = "/prodvana.settings.organization.UsersSettingsManager/ListRoles"
	UsersSettingsManager_SetRoles_FullMethodName    = "/prodvana.settings.organization.UsersSettingsManager/SetRoles"
	UsersSettingsManager_InviteUsers_FullMethodName = "/prodvana.settings.organization.UsersSettingsManager/InviteUsers"
)

// UsersSettingsManagerClient is the client API for UsersSettingsManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsersSettingsManagerClient interface {
	GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*GetUserResp, error)
	ListUsers(ctx context.Context, in *ListUsersReq, opts ...grpc.CallOption) (*ListUsersResp, error)
	ListRoles(ctx context.Context, in *ListRolesReq, opts ...grpc.CallOption) (*ListRolesResp, error)
	SetRoles(ctx context.Context, in *SetRolesReq, opts ...grpc.CallOption) (*SetRolesResp, error)
	InviteUsers(ctx context.Context, in *InviteUsersReq, opts ...grpc.CallOption) (*InviteUsersResp, error)
}

type usersSettingsManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewUsersSettingsManagerClient(cc grpc.ClientConnInterface) UsersSettingsManagerClient {
	return &usersSettingsManagerClient{cc}
}

func (c *usersSettingsManagerClient) GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*GetUserResp, error) {
	out := new(GetUserResp)
	err := c.cc.Invoke(ctx, UsersSettingsManager_GetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersSettingsManagerClient) ListUsers(ctx context.Context, in *ListUsersReq, opts ...grpc.CallOption) (*ListUsersResp, error) {
	out := new(ListUsersResp)
	err := c.cc.Invoke(ctx, UsersSettingsManager_ListUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersSettingsManagerClient) ListRoles(ctx context.Context, in *ListRolesReq, opts ...grpc.CallOption) (*ListRolesResp, error) {
	out := new(ListRolesResp)
	err := c.cc.Invoke(ctx, UsersSettingsManager_ListRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersSettingsManagerClient) SetRoles(ctx context.Context, in *SetRolesReq, opts ...grpc.CallOption) (*SetRolesResp, error) {
	out := new(SetRolesResp)
	err := c.cc.Invoke(ctx, UsersSettingsManager_SetRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersSettingsManagerClient) InviteUsers(ctx context.Context, in *InviteUsersReq, opts ...grpc.CallOption) (*InviteUsersResp, error) {
	out := new(InviteUsersResp)
	err := c.cc.Invoke(ctx, UsersSettingsManager_InviteUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersSettingsManagerServer is the server API for UsersSettingsManager service.
// All implementations must embed UnimplementedUsersSettingsManagerServer
// for forward compatibility
type UsersSettingsManagerServer interface {
	GetUser(context.Context, *GetUserReq) (*GetUserResp, error)
	ListUsers(context.Context, *ListUsersReq) (*ListUsersResp, error)
	ListRoles(context.Context, *ListRolesReq) (*ListRolesResp, error)
	SetRoles(context.Context, *SetRolesReq) (*SetRolesResp, error)
	InviteUsers(context.Context, *InviteUsersReq) (*InviteUsersResp, error)
	mustEmbedUnimplementedUsersSettingsManagerServer()
}

// UnimplementedUsersSettingsManagerServer must be embedded to have forward compatible implementations.
type UnimplementedUsersSettingsManagerServer struct {
}

func (UnimplementedUsersSettingsManagerServer) GetUser(context.Context, *GetUserReq) (*GetUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUsersSettingsManagerServer) ListUsers(context.Context, *ListUsersReq) (*ListUsersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedUsersSettingsManagerServer) ListRoles(context.Context, *ListRolesReq) (*ListRolesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoles not implemented")
}
func (UnimplementedUsersSettingsManagerServer) SetRoles(context.Context, *SetRolesReq) (*SetRolesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRoles not implemented")
}
func (UnimplementedUsersSettingsManagerServer) InviteUsers(context.Context, *InviteUsersReq) (*InviteUsersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteUsers not implemented")
}
func (UnimplementedUsersSettingsManagerServer) mustEmbedUnimplementedUsersSettingsManagerServer() {}

// UnsafeUsersSettingsManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsersSettingsManagerServer will
// result in compilation errors.
type UnsafeUsersSettingsManagerServer interface {
	mustEmbedUnimplementedUsersSettingsManagerServer()
}

func RegisterUsersSettingsManagerServer(s grpc.ServiceRegistrar, srv UsersSettingsManagerServer) {
	s.RegisterService(&UsersSettingsManager_ServiceDesc, srv)
}

func _UsersSettingsManager_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersSettingsManagerServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersSettingsManager_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersSettingsManagerServer).GetUser(ctx, req.(*GetUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersSettingsManager_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersSettingsManagerServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersSettingsManager_ListUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersSettingsManagerServer).ListUsers(ctx, req.(*ListUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersSettingsManager_ListRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRolesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersSettingsManagerServer).ListRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersSettingsManager_ListRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersSettingsManagerServer).ListRoles(ctx, req.(*ListRolesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersSettingsManager_SetRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRolesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersSettingsManagerServer).SetRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersSettingsManager_SetRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersSettingsManagerServer).SetRoles(ctx, req.(*SetRolesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersSettingsManager_InviteUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersSettingsManagerServer).InviteUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersSettingsManager_InviteUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersSettingsManagerServer).InviteUsers(ctx, req.(*InviteUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UsersSettingsManager_ServiceDesc is the grpc.ServiceDesc for UsersSettingsManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UsersSettingsManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "prodvana.settings.organization.UsersSettingsManager",
	HandlerType: (*UsersSettingsManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _UsersSettingsManager_GetUser_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _UsersSettingsManager_ListUsers_Handler,
		},
		{
			MethodName: "ListRoles",
			Handler:    _UsersSettingsManager_ListRoles_Handler,
		},
		{
			MethodName: "SetRoles",
			Handler:    _UsersSettingsManager_SetRoles_Handler,
		},
		{
			MethodName: "InviteUsers",
			Handler:    _UsersSettingsManager_InviteUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "prodvana/settings/organization/users.proto",
}
