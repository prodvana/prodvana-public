// Code generated by protoc-gen-go-vtproto. DO NOT EDIT.
// protoc-gen-go-vtproto version: v0.6.0
// source: prodvana/settings/organization/users.proto

package organization

import (
	proto "google.golang.org/protobuf/proto"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

func (m *SettingsUser) CloneVT() *SettingsUser {
	if m == nil {
		return (*SettingsUser)(nil)
	}
	r := new(SettingsUser)
	r.User = m.User.CloneVT()
	if rhs := m.Roles; rhs != nil {
		tmpContainer := make([]string, len(rhs))
		copy(tmpContainer, rhs)
		r.Roles = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *SettingsUser) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *GetUserReq) CloneVT() *GetUserReq {
	if m == nil {
		return (*GetUserReq)(nil)
	}
	r := new(GetUserReq)
	r.UserId = m.UserId
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *GetUserReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *GetUserResp) CloneVT() *GetUserResp {
	if m == nil {
		return (*GetUserResp)(nil)
	}
	r := new(GetUserResp)
	r.User = m.User.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *GetUserResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ListRolesReq) CloneVT() *ListRolesReq {
	if m == nil {
		return (*ListRolesReq)(nil)
	}
	r := new(ListRolesReq)
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ListRolesReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RoleDefinition) CloneVT() *RoleDefinition {
	if m == nil {
		return (*RoleDefinition)(nil)
	}
	r := new(RoleDefinition)
	r.Name = m.Name
	r.Description = m.Description
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RoleDefinition) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ListRolesResp) CloneVT() *ListRolesResp {
	if m == nil {
		return (*ListRolesResp)(nil)
	}
	r := new(ListRolesResp)
	if rhs := m.Roles; rhs != nil {
		tmpContainer := make([]*RoleDefinition, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Roles = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ListRolesResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ListUsersReq) CloneVT() *ListUsersReq {
	if m == nil {
		return (*ListUsersReq)(nil)
	}
	r := new(ListUsersReq)
	r.PageToken = m.PageToken
	r.PageSize = m.PageSize
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ListUsersReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ListUsersResp) CloneVT() *ListUsersResp {
	if m == nil {
		return (*ListUsersResp)(nil)
	}
	r := new(ListUsersResp)
	r.NextPageToken = m.NextPageToken
	if rhs := m.Users; rhs != nil {
		tmpContainer := make([]*SettingsUser, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Users = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ListUsersResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *SetRolesReq) CloneVT() *SetRolesReq {
	if m == nil {
		return (*SetRolesReq)(nil)
	}
	r := new(SetRolesReq)
	r.UserId = m.UserId
	if rhs := m.Roles; rhs != nil {
		tmpContainer := make([]string, len(rhs))
		copy(tmpContainer, rhs)
		r.Roles = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *SetRolesReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *SetRolesResp) CloneVT() *SetRolesResp {
	if m == nil {
		return (*SetRolesResp)(nil)
	}
	r := new(SetRolesResp)
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *SetRolesResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *UserInvite) CloneVT() *UserInvite {
	if m == nil {
		return (*UserInvite)(nil)
	}
	r := new(UserInvite)
	r.Email = m.Email
	if rhs := m.Roles; rhs != nil {
		tmpContainer := make([]string, len(rhs))
		copy(tmpContainer, rhs)
		r.Roles = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *UserInvite) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *InviteUsersReq) CloneVT() *InviteUsersReq {
	if m == nil {
		return (*InviteUsersReq)(nil)
	}
	r := new(InviteUsersReq)
	if rhs := m.Users; rhs != nil {
		tmpContainer := make([]*UserInvite, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Users = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *InviteUsersReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *InviteUsersResp) CloneVT() *InviteUsersResp {
	if m == nil {
		return (*InviteUsersResp)(nil)
	}
	r := new(InviteUsersResp)
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *InviteUsersResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *OrganizationSupportsInvitesReq) CloneVT() *OrganizationSupportsInvitesReq {
	if m == nil {
		return (*OrganizationSupportsInvitesReq)(nil)
	}
	r := new(OrganizationSupportsInvitesReq)
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *OrganizationSupportsInvitesReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *OrganizationSupportsInvitesResp) CloneVT() *OrganizationSupportsInvitesResp {
	if m == nil {
		return (*OrganizationSupportsInvitesResp)(nil)
	}
	r := new(OrganizationSupportsInvitesResp)
	r.SupportsInvites = m.SupportsInvites
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *OrganizationSupportsInvitesResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RemoveUserReq) CloneVT() *RemoveUserReq {
	if m == nil {
		return (*RemoveUserReq)(nil)
	}
	r := new(RemoveUserReq)
	r.UserId = m.UserId
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RemoveUserReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RemoveUserResp) CloneVT() *RemoveUserResp {
	if m == nil {
		return (*RemoveUserResp)(nil)
	}
	r := new(RemoveUserResp)
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RemoveUserResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (this *SettingsUser) EqualVT(that *SettingsUser) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.User.EqualVT(that.User) {
		return false
	}
	if len(this.Roles) != len(that.Roles) {
		return false
	}
	for i, vx := range this.Roles {
		vy := that.Roles[i]
		if vx != vy {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *SettingsUser) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*SettingsUser)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *GetUserReq) EqualVT(that *GetUserReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.UserId != that.UserId {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetUserReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetUserReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *GetUserResp) EqualVT(that *GetUserResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.User.EqualVT(that.User) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetUserResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetUserResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ListRolesReq) EqualVT(that *ListRolesReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ListRolesReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ListRolesReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RoleDefinition) EqualVT(that *RoleDefinition) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	if this.Description != that.Description {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RoleDefinition) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RoleDefinition)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ListRolesResp) EqualVT(that *ListRolesResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Roles) != len(that.Roles) {
		return false
	}
	for i, vx := range this.Roles {
		vy := that.Roles[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &RoleDefinition{}
			}
			if q == nil {
				q = &RoleDefinition{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ListRolesResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ListRolesResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ListUsersReq) EqualVT(that *ListUsersReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.PageToken != that.PageToken {
		return false
	}
	if this.PageSize != that.PageSize {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ListUsersReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ListUsersReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ListUsersResp) EqualVT(that *ListUsersResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Users) != len(that.Users) {
		return false
	}
	for i, vx := range this.Users {
		vy := that.Users[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &SettingsUser{}
			}
			if q == nil {
				q = &SettingsUser{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if this.NextPageToken != that.NextPageToken {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ListUsersResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ListUsersResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *SetRolesReq) EqualVT(that *SetRolesReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.UserId != that.UserId {
		return false
	}
	if len(this.Roles) != len(that.Roles) {
		return false
	}
	for i, vx := range this.Roles {
		vy := that.Roles[i]
		if vx != vy {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *SetRolesReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*SetRolesReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *SetRolesResp) EqualVT(that *SetRolesResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *SetRolesResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*SetRolesResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *UserInvite) EqualVT(that *UserInvite) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Email != that.Email {
		return false
	}
	if len(this.Roles) != len(that.Roles) {
		return false
	}
	for i, vx := range this.Roles {
		vy := that.Roles[i]
		if vx != vy {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *UserInvite) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*UserInvite)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *InviteUsersReq) EqualVT(that *InviteUsersReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Users) != len(that.Users) {
		return false
	}
	for i, vx := range this.Users {
		vy := that.Users[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &UserInvite{}
			}
			if q == nil {
				q = &UserInvite{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *InviteUsersReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*InviteUsersReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *InviteUsersResp) EqualVT(that *InviteUsersResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *InviteUsersResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*InviteUsersResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *OrganizationSupportsInvitesReq) EqualVT(that *OrganizationSupportsInvitesReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *OrganizationSupportsInvitesReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*OrganizationSupportsInvitesReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *OrganizationSupportsInvitesResp) EqualVT(that *OrganizationSupportsInvitesResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.SupportsInvites != that.SupportsInvites {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *OrganizationSupportsInvitesResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*OrganizationSupportsInvitesResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RemoveUserReq) EqualVT(that *RemoveUserReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.UserId != that.UserId {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RemoveUserReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RemoveUserReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RemoveUserResp) EqualVT(that *RemoveUserResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RemoveUserResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RemoveUserResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
