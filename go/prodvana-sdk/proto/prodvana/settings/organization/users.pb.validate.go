// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: prodvana/settings/organization/users.proto

package organization

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SettingsUser with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SettingsUser) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SettingsUser with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SettingsUserMultiError, or
// nil if none found.
func (m *SettingsUser) ValidateAll() error {
	return m.validate(true)
}

func (m *SettingsUser) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SettingsUserValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SettingsUserValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SettingsUserValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SettingsUserMultiError(errors)
	}

	return nil
}

// SettingsUserMultiError is an error wrapping multiple validation errors
// returned by SettingsUser.ValidateAll() if the designated constraints aren't met.
type SettingsUserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SettingsUserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SettingsUserMultiError) AllErrors() []error { return m }

// SettingsUserValidationError is the validation error returned by
// SettingsUser.Validate if the designated constraints aren't met.
type SettingsUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SettingsUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SettingsUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SettingsUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SettingsUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SettingsUserValidationError) ErrorName() string { return "SettingsUserValidationError" }

// Error satisfies the builtin error interface
func (e SettingsUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSettingsUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SettingsUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SettingsUserValidationError{}

// Validate checks the field values on GetUserReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserReqMultiError, or
// nil if none found.
func (m *GetUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetUserReqMultiError(errors)
	}

	return nil
}

// GetUserReqMultiError is an error wrapping multiple validation errors
// returned by GetUserReq.ValidateAll() if the designated constraints aren't met.
type GetUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserReqMultiError) AllErrors() []error { return m }

// GetUserReqValidationError is the validation error returned by
// GetUserReq.Validate if the designated constraints aren't met.
type GetUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserReqValidationError) ErrorName() string { return "GetUserReqValidationError" }

// Error satisfies the builtin error interface
func (e GetUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserReqValidationError{}

// Validate checks the field values on GetUserResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserRespMultiError, or
// nil if none found.
func (m *GetUserResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserRespValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserRespValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserRespValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserRespMultiError(errors)
	}

	return nil
}

// GetUserRespMultiError is an error wrapping multiple validation errors
// returned by GetUserResp.ValidateAll() if the designated constraints aren't met.
type GetUserRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserRespMultiError) AllErrors() []error { return m }

// GetUserRespValidationError is the validation error returned by
// GetUserResp.Validate if the designated constraints aren't met.
type GetUserRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRespValidationError) ErrorName() string { return "GetUserRespValidationError" }

// Error satisfies the builtin error interface
func (e GetUserRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRespValidationError{}

// Validate checks the field values on ListRolesReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListRolesReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRolesReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListRolesReqMultiError, or
// nil if none found.
func (m *ListRolesReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRolesReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListRolesReqMultiError(errors)
	}

	return nil
}

// ListRolesReqMultiError is an error wrapping multiple validation errors
// returned by ListRolesReq.ValidateAll() if the designated constraints aren't met.
type ListRolesReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRolesReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRolesReqMultiError) AllErrors() []error { return m }

// ListRolesReqValidationError is the validation error returned by
// ListRolesReq.Validate if the designated constraints aren't met.
type ListRolesReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRolesReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRolesReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRolesReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRolesReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRolesReqValidationError) ErrorName() string { return "ListRolesReqValidationError" }

// Error satisfies the builtin error interface
func (e ListRolesReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRolesReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRolesReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRolesReqValidationError{}

// Validate checks the field values on RoleDefinition with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoleDefinition) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleDefinition with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoleDefinitionMultiError,
// or nil if none found.
func (m *RoleDefinition) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleDefinition) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Description

	if len(errors) > 0 {
		return RoleDefinitionMultiError(errors)
	}

	return nil
}

// RoleDefinitionMultiError is an error wrapping multiple validation errors
// returned by RoleDefinition.ValidateAll() if the designated constraints
// aren't met.
type RoleDefinitionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleDefinitionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleDefinitionMultiError) AllErrors() []error { return m }

// RoleDefinitionValidationError is the validation error returned by
// RoleDefinition.Validate if the designated constraints aren't met.
type RoleDefinitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleDefinitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleDefinitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleDefinitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleDefinitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleDefinitionValidationError) ErrorName() string { return "RoleDefinitionValidationError" }

// Error satisfies the builtin error interface
func (e RoleDefinitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleDefinition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleDefinitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleDefinitionValidationError{}

// Validate checks the field values on ListRolesResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListRolesResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRolesResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListRolesRespMultiError, or
// nil if none found.
func (m *ListRolesResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRolesResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRolesRespValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRolesRespValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRolesRespValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListRolesRespMultiError(errors)
	}

	return nil
}

// ListRolesRespMultiError is an error wrapping multiple validation errors
// returned by ListRolesResp.ValidateAll() if the designated constraints
// aren't met.
type ListRolesRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRolesRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRolesRespMultiError) AllErrors() []error { return m }

// ListRolesRespValidationError is the validation error returned by
// ListRolesResp.Validate if the designated constraints aren't met.
type ListRolesRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRolesRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRolesRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRolesRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRolesRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRolesRespValidationError) ErrorName() string { return "ListRolesRespValidationError" }

// Error satisfies the builtin error interface
func (e ListRolesRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRolesResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRolesRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRolesRespValidationError{}

// Validate checks the field values on ListUsersReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListUsersReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUsersReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListUsersReqMultiError, or
// nil if none found.
func (m *ListUsersReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUsersReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListUsersReqMultiError(errors)
	}

	return nil
}

// ListUsersReqMultiError is an error wrapping multiple validation errors
// returned by ListUsersReq.ValidateAll() if the designated constraints aren't met.
type ListUsersReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUsersReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUsersReqMultiError) AllErrors() []error { return m }

// ListUsersReqValidationError is the validation error returned by
// ListUsersReq.Validate if the designated constraints aren't met.
type ListUsersReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUsersReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUsersReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUsersReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUsersReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUsersReqValidationError) ErrorName() string { return "ListUsersReqValidationError" }

// Error satisfies the builtin error interface
func (e ListUsersReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUsersReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUsersReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUsersReqValidationError{}

// Validate checks the field values on ListUsersResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListUsersResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUsersResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListUsersRespMultiError, or
// nil if none found.
func (m *ListUsersResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUsersResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUsersRespValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUsersRespValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUsersRespValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListUsersRespMultiError(errors)
	}

	return nil
}

// ListUsersRespMultiError is an error wrapping multiple validation errors
// returned by ListUsersResp.ValidateAll() if the designated constraints
// aren't met.
type ListUsersRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUsersRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUsersRespMultiError) AllErrors() []error { return m }

// ListUsersRespValidationError is the validation error returned by
// ListUsersResp.Validate if the designated constraints aren't met.
type ListUsersRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUsersRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUsersRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUsersRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUsersRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUsersRespValidationError) ErrorName() string { return "ListUsersRespValidationError" }

// Error satisfies the builtin error interface
func (e ListUsersRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUsersResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUsersRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUsersRespValidationError{}

// Validate checks the field values on SetRolesReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SetRolesReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetRolesReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SetRolesReqMultiError, or
// nil if none found.
func (m *SetRolesReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetRolesReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return SetRolesReqMultiError(errors)
	}

	return nil
}

// SetRolesReqMultiError is an error wrapping multiple validation errors
// returned by SetRolesReq.ValidateAll() if the designated constraints aren't met.
type SetRolesReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetRolesReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetRolesReqMultiError) AllErrors() []error { return m }

// SetRolesReqValidationError is the validation error returned by
// SetRolesReq.Validate if the designated constraints aren't met.
type SetRolesReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetRolesReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetRolesReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetRolesReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetRolesReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetRolesReqValidationError) ErrorName() string { return "SetRolesReqValidationError" }

// Error satisfies the builtin error interface
func (e SetRolesReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetRolesReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetRolesReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetRolesReqValidationError{}

// Validate checks the field values on SetRolesResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SetRolesResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetRolesResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SetRolesRespMultiError, or
// nil if none found.
func (m *SetRolesResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SetRolesResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetRolesRespMultiError(errors)
	}

	return nil
}

// SetRolesRespMultiError is an error wrapping multiple validation errors
// returned by SetRolesResp.ValidateAll() if the designated constraints aren't met.
type SetRolesRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetRolesRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetRolesRespMultiError) AllErrors() []error { return m }

// SetRolesRespValidationError is the validation error returned by
// SetRolesResp.Validate if the designated constraints aren't met.
type SetRolesRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetRolesRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetRolesRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetRolesRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetRolesRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetRolesRespValidationError) ErrorName() string { return "SetRolesRespValidationError" }

// Error satisfies the builtin error interface
func (e SetRolesRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetRolesResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetRolesRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetRolesRespValidationError{}

// Validate checks the field values on UserInvite with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserInvite) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserInvite with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserInviteMultiError, or
// nil if none found.
func (m *UserInvite) ValidateAll() error {
	return m.validate(true)
}

func (m *UserInvite) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	if len(errors) > 0 {
		return UserInviteMultiError(errors)
	}

	return nil
}

// UserInviteMultiError is an error wrapping multiple validation errors
// returned by UserInvite.ValidateAll() if the designated constraints aren't met.
type UserInviteMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserInviteMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserInviteMultiError) AllErrors() []error { return m }

// UserInviteValidationError is the validation error returned by
// UserInvite.Validate if the designated constraints aren't met.
type UserInviteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInviteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInviteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInviteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInviteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInviteValidationError) ErrorName() string { return "UserInviteValidationError" }

// Error satisfies the builtin error interface
func (e UserInviteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInvite.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInviteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInviteValidationError{}

// Validate checks the field values on InviteUsersReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InviteUsersReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InviteUsersReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InviteUsersReqMultiError,
// or nil if none found.
func (m *InviteUsersReq) ValidateAll() error {
	return m.validate(true)
}

func (m *InviteUsersReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InviteUsersReqValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InviteUsersReqValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InviteUsersReqValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return InviteUsersReqMultiError(errors)
	}

	return nil
}

// InviteUsersReqMultiError is an error wrapping multiple validation errors
// returned by InviteUsersReq.ValidateAll() if the designated constraints
// aren't met.
type InviteUsersReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InviteUsersReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InviteUsersReqMultiError) AllErrors() []error { return m }

// InviteUsersReqValidationError is the validation error returned by
// InviteUsersReq.Validate if the designated constraints aren't met.
type InviteUsersReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InviteUsersReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InviteUsersReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InviteUsersReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InviteUsersReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InviteUsersReqValidationError) ErrorName() string { return "InviteUsersReqValidationError" }

// Error satisfies the builtin error interface
func (e InviteUsersReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInviteUsersReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InviteUsersReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InviteUsersReqValidationError{}

// Validate checks the field values on InviteUsersResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *InviteUsersResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InviteUsersResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InviteUsersRespMultiError, or nil if none found.
func (m *InviteUsersResp) ValidateAll() error {
	return m.validate(true)
}

func (m *InviteUsersResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return InviteUsersRespMultiError(errors)
	}

	return nil
}

// InviteUsersRespMultiError is an error wrapping multiple validation errors
// returned by InviteUsersResp.ValidateAll() if the designated constraints
// aren't met.
type InviteUsersRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InviteUsersRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InviteUsersRespMultiError) AllErrors() []error { return m }

// InviteUsersRespValidationError is the validation error returned by
// InviteUsersResp.Validate if the designated constraints aren't met.
type InviteUsersRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InviteUsersRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InviteUsersRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InviteUsersRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InviteUsersRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InviteUsersRespValidationError) ErrorName() string { return "InviteUsersRespValidationError" }

// Error satisfies the builtin error interface
func (e InviteUsersRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInviteUsersResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InviteUsersRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InviteUsersRespValidationError{}

// Validate checks the field values on OrganizationSupportsInvitesReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrganizationSupportsInvitesReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrganizationSupportsInvitesReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// OrganizationSupportsInvitesReqMultiError, or nil if none found.
func (m *OrganizationSupportsInvitesReq) ValidateAll() error {
	return m.validate(true)
}

func (m *OrganizationSupportsInvitesReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return OrganizationSupportsInvitesReqMultiError(errors)
	}

	return nil
}

// OrganizationSupportsInvitesReqMultiError is an error wrapping multiple
// validation errors returned by OrganizationSupportsInvitesReq.ValidateAll()
// if the designated constraints aren't met.
type OrganizationSupportsInvitesReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrganizationSupportsInvitesReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrganizationSupportsInvitesReqMultiError) AllErrors() []error { return m }

// OrganizationSupportsInvitesReqValidationError is the validation error
// returned by OrganizationSupportsInvitesReq.Validate if the designated
// constraints aren't met.
type OrganizationSupportsInvitesReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrganizationSupportsInvitesReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrganizationSupportsInvitesReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrganizationSupportsInvitesReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrganizationSupportsInvitesReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrganizationSupportsInvitesReqValidationError) ErrorName() string {
	return "OrganizationSupportsInvitesReqValidationError"
}

// Error satisfies the builtin error interface
func (e OrganizationSupportsInvitesReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrganizationSupportsInvitesReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrganizationSupportsInvitesReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrganizationSupportsInvitesReqValidationError{}

// Validate checks the field values on OrganizationSupportsInvitesResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrganizationSupportsInvitesResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrganizationSupportsInvitesResp with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// OrganizationSupportsInvitesRespMultiError, or nil if none found.
func (m *OrganizationSupportsInvitesResp) ValidateAll() error {
	return m.validate(true)
}

func (m *OrganizationSupportsInvitesResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SupportsInvites

	if len(errors) > 0 {
		return OrganizationSupportsInvitesRespMultiError(errors)
	}

	return nil
}

// OrganizationSupportsInvitesRespMultiError is an error wrapping multiple
// validation errors returned by OrganizationSupportsInvitesResp.ValidateAll()
// if the designated constraints aren't met.
type OrganizationSupportsInvitesRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrganizationSupportsInvitesRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrganizationSupportsInvitesRespMultiError) AllErrors() []error { return m }

// OrganizationSupportsInvitesRespValidationError is the validation error
// returned by OrganizationSupportsInvitesResp.Validate if the designated
// constraints aren't met.
type OrganizationSupportsInvitesRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrganizationSupportsInvitesRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrganizationSupportsInvitesRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrganizationSupportsInvitesRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrganizationSupportsInvitesRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrganizationSupportsInvitesRespValidationError) ErrorName() string {
	return "OrganizationSupportsInvitesRespValidationError"
}

// Error satisfies the builtin error interface
func (e OrganizationSupportsInvitesRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrganizationSupportsInvitesResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrganizationSupportsInvitesRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrganizationSupportsInvitesRespValidationError{}
