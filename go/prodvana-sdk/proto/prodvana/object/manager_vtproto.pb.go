// Code generated by protoc-gen-go-vtproto. DO NOT EDIT.
// protoc-gen-go-vtproto version: v0.6.0
// source: prodvana/object/manager.proto

package object

import (
	labels "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/labels"
	proto "google.golang.org/protobuf/proto"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

func (m *QueryObjectReq) CloneVT() *QueryObjectReq {
	if m == nil {
		return (*QueryObjectReq)(nil)
	}
	r := new(QueryObjectReq)
	r.Query = m.Query
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *QueryObjectReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *QueryObjectResp) CloneVT() *QueryObjectResp {
	if m == nil {
		return (*QueryObjectResp)(nil)
	}
	r := new(QueryObjectResp)
	if rhs := m.Objects; rhs != nil {
		tmpContainer := make([]*ObjectMeta, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Objects = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *QueryObjectResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *GetLabelsReq) CloneVT() *GetLabelsReq {
	if m == nil {
		return (*GetLabelsReq)(nil)
	}
	r := new(GetLabelsReq)
	r.Type = m.Type
	r.Id = m.Id
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *GetLabelsReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *GetLabelsResp) CloneVT() *GetLabelsResp {
	if m == nil {
		return (*GetLabelsResp)(nil)
	}
	r := new(GetLabelsResp)
	if rhs := m.Labels; rhs != nil {
		tmpContainer := make([]*labels.LabelDefinition, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Labels = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *GetLabelsResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (this *QueryObjectReq) EqualVT(that *QueryObjectReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Query != that.Query {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *QueryObjectReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*QueryObjectReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *QueryObjectResp) EqualVT(that *QueryObjectResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Objects) != len(that.Objects) {
		return false
	}
	for i, vx := range this.Objects {
		vy := that.Objects[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &ObjectMeta{}
			}
			if q == nil {
				q = &ObjectMeta{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *QueryObjectResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*QueryObjectResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *GetLabelsReq) EqualVT(that *GetLabelsReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Type != that.Type {
		return false
	}
	if this.Id != that.Id {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetLabelsReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetLabelsReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *GetLabelsResp) EqualVT(that *GetLabelsResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Labels) != len(that.Labels) {
		return false
	}
	for i, vx := range this.Labels {
		vy := that.Labels[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &labels.LabelDefinition{}
			}
			if q == nil {
				q = &labels.LabelDefinition{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetLabelsResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetLabelsResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
