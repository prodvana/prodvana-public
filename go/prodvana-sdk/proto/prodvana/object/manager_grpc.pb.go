// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.10
// source: prodvana/object/manager.proto

package object

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ObjectManager_QueryObjects_FullMethodName = "/prodvana.object.ObjectManager/QueryObjects"
	ObjectManager_GetLabels_FullMethodName    = "/prodvana.object.ObjectManager/GetLabels"
)

// ObjectManagerClient is the client API for ObjectManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ObjectManagerClient interface {
	QueryObjects(ctx context.Context, in *QueryObjectReq, opts ...grpc.CallOption) (*QueryObjectResp, error)
	GetLabels(ctx context.Context, in *GetLabelsReq, opts ...grpc.CallOption) (*GetLabelsResp, error)
}

type objectManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewObjectManagerClient(cc grpc.ClientConnInterface) ObjectManagerClient {
	return &objectManagerClient{cc}
}

func (c *objectManagerClient) QueryObjects(ctx context.Context, in *QueryObjectReq, opts ...grpc.CallOption) (*QueryObjectResp, error) {
	out := new(QueryObjectResp)
	err := c.cc.Invoke(ctx, ObjectManager_QueryObjects_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectManagerClient) GetLabels(ctx context.Context, in *GetLabelsReq, opts ...grpc.CallOption) (*GetLabelsResp, error) {
	out := new(GetLabelsResp)
	err := c.cc.Invoke(ctx, ObjectManager_GetLabels_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ObjectManagerServer is the server API for ObjectManager service.
// All implementations must embed UnimplementedObjectManagerServer
// for forward compatibility
type ObjectManagerServer interface {
	QueryObjects(context.Context, *QueryObjectReq) (*QueryObjectResp, error)
	GetLabels(context.Context, *GetLabelsReq) (*GetLabelsResp, error)
	mustEmbedUnimplementedObjectManagerServer()
}

// UnimplementedObjectManagerServer must be embedded to have forward compatible implementations.
type UnimplementedObjectManagerServer struct {
}

func (UnimplementedObjectManagerServer) QueryObjects(context.Context, *QueryObjectReq) (*QueryObjectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryObjects not implemented")
}
func (UnimplementedObjectManagerServer) GetLabels(context.Context, *GetLabelsReq) (*GetLabelsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLabels not implemented")
}
func (UnimplementedObjectManagerServer) mustEmbedUnimplementedObjectManagerServer() {}

// UnsafeObjectManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ObjectManagerServer will
// result in compilation errors.
type UnsafeObjectManagerServer interface {
	mustEmbedUnimplementedObjectManagerServer()
}

func RegisterObjectManagerServer(s grpc.ServiceRegistrar, srv ObjectManagerServer) {
	s.RegisterService(&ObjectManager_ServiceDesc, srv)
}

func _ObjectManager_QueryObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryObjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectManagerServer).QueryObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObjectManager_QueryObjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectManagerServer).QueryObjects(ctx, req.(*QueryObjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectManager_GetLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLabelsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectManagerServer).GetLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObjectManager_GetLabels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectManagerServer).GetLabels(ctx, req.(*GetLabelsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ObjectManager_ServiceDesc is the grpc.ServiceDesc for ObjectManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ObjectManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "prodvana.object.ObjectManager",
	HandlerType: (*ObjectManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryObjects",
			Handler:    _ObjectManager_QueryObjects_Handler,
		},
		{
			MethodName: "GetLabels",
			Handler:    _ObjectManager_GetLabels_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "prodvana/object/manager.proto",
}
