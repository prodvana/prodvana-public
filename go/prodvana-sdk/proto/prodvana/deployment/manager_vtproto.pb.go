// Code generated by protoc-gen-go-vtproto. DO NOT EDIT.
// protoc-gen-go-vtproto version: v0.6.0
// source: prodvana/deployment/manager.proto

package deployment

import (
	model "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/deployment/model"
	proto "google.golang.org/protobuf/proto"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

func (m *RecordDeploymentReq) CloneVT() *RecordDeploymentReq {
	if m == nil {
		return (*RecordDeploymentReq)(nil)
	}
	r := new(RecordDeploymentReq)
	r.Config = m.Config.CloneVT()
	r.Pending = m.Pending
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RecordDeploymentReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RecordDeploymentResp) CloneVT() *RecordDeploymentResp {
	if m == nil {
		return (*RecordDeploymentResp)(nil)
	}
	r := new(RecordDeploymentResp)
	r.Meta = m.Meta.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RecordDeploymentResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *UpdateDeploymentStatusReq) CloneVT() *UpdateDeploymentStatusReq {
	if m == nil {
		return (*UpdateDeploymentStatusReq)(nil)
	}
	r := new(UpdateDeploymentStatusReq)
	r.DeploymentId = m.DeploymentId
	r.Status = m.Status
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *UpdateDeploymentStatusReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *UpdateDeploymentStatusResp) CloneVT() *UpdateDeploymentStatusResp {
	if m == nil {
		return (*UpdateDeploymentStatusResp)(nil)
	}
	r := new(UpdateDeploymentStatusResp)
	r.Status = m.Status
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *UpdateDeploymentStatusResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *DeploymentFilter) CloneVT() *DeploymentFilter {
	if m == nil {
		return (*DeploymentFilter)(nil)
	}
	r := new(DeploymentFilter)
	r.Application = m.Application
	r.DesiredStateId = m.DesiredStateId
	r.ReleaseId = m.ReleaseId
	if rhs := m.Services; rhs != nil {
		tmpContainer := make([]string, len(rhs))
		copy(tmpContainer, rhs)
		r.Services = tmpContainer
	}
	if rhs := m.ReleaseChannels; rhs != nil {
		tmpContainer := make([]string, len(rhs))
		copy(tmpContainer, rhs)
		r.ReleaseChannels = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *DeploymentFilter) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ListDeploymentsReq) CloneVT() *ListDeploymentsReq {
	if m == nil {
		return (*ListDeploymentsReq)(nil)
	}
	r := new(ListDeploymentsReq)
	r.Filter = m.Filter.CloneVT()
	r.StartingDeploymentId = m.StartingDeploymentId
	r.EndingDeploymentId = m.EndingDeploymentId
	r.PageToken = m.PageToken
	r.PageSize = m.PageSize
	if rhs := m.Filters; rhs != nil {
		tmpContainer := make([]*DeploymentFilter, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Filters = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ListDeploymentsReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ListDeploymentsResp) CloneVT() *ListDeploymentsResp {
	if m == nil {
		return (*ListDeploymentsResp)(nil)
	}
	r := new(ListDeploymentsResp)
	r.NextPageToken = m.NextPageToken
	if rhs := m.Deployments; rhs != nil {
		tmpContainer := make([]*model.Deployment, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Deployments = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ListDeploymentsResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *DeploymentRef_ServiceInstanceConfig) CloneVT() *DeploymentRef_ServiceInstanceConfig {
	if m == nil {
		return (*DeploymentRef_ServiceInstanceConfig)(nil)
	}
	r := new(DeploymentRef_ServiceInstanceConfig)
	r.CompiledConfig = m.CompiledConfig.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *DeploymentRef_ServiceInstanceConfig) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *DeploymentRef) CloneVT() *DeploymentRef {
	if m == nil {
		return (*DeploymentRef)(nil)
	}
	r := new(DeploymentRef)
	if m.Ref != nil {
		r.Ref = m.Ref.(interface{ CloneVT() isDeploymentRef_Ref }).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *DeploymentRef) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *DeploymentRef_DeploymentId) CloneVT() isDeploymentRef_Ref {
	if m == nil {
		return (*DeploymentRef_DeploymentId)(nil)
	}
	r := new(DeploymentRef_DeploymentId)
	r.DeploymentId = m.DeploymentId
	return r
}

func (m *DeploymentRef_Config) CloneVT() isDeploymentRef_Ref {
	if m == nil {
		return (*DeploymentRef_Config)(nil)
	}
	r := new(DeploymentRef_Config)
	r.Config = m.Config.CloneVT()
	return r
}

func (m *DeploymentRef_ServiceInstanceConfig_) CloneVT() isDeploymentRef_Ref {
	if m == nil {
		return (*DeploymentRef_ServiceInstanceConfig_)(nil)
	}
	r := new(DeploymentRef_ServiceInstanceConfig_)
	r.ServiceInstanceConfig = m.ServiceInstanceConfig.CloneVT()
	return r
}

func (m *CompareDeploymentReq) CloneVT() *CompareDeploymentReq {
	if m == nil {
		return (*CompareDeploymentReq)(nil)
	}
	r := new(CompareDeploymentReq)
	r.NewDeployment = m.NewDeployment.CloneVT()
	r.PrevDeployment = m.PrevDeployment.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CompareDeploymentReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CompareDeploymentResp) CloneVT() *CompareDeploymentResp {
	if m == nil {
		return (*CompareDeploymentResp)(nil)
	}
	r := new(CompareDeploymentResp)
	r.Comparison = m.Comparison.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CompareDeploymentResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *PreviewDeploymentReq) CloneVT() *PreviewDeploymentReq {
	if m == nil {
		return (*PreviewDeploymentReq)(nil)
	}
	r := new(PreviewDeploymentReq)
	r.Config = m.Config.CloneVT()
	r.PrevDeployment = m.PrevDeployment.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *PreviewDeploymentReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *PreviewDeploymentResp) CloneVT() *PreviewDeploymentResp {
	if m == nil {
		return (*PreviewDeploymentResp)(nil)
	}
	r := new(PreviewDeploymentResp)
	r.Deployment = m.Deployment.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *PreviewDeploymentResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *GetLatestDeploymentsReq) CloneVT() *GetLatestDeploymentsReq {
	if m == nil {
		return (*GetLatestDeploymentsReq)(nil)
	}
	r := new(GetLatestDeploymentsReq)
	r.Filter = m.Filter.CloneVT()
	r.Status = m.Status
	r.PageToken = m.PageToken
	r.PageSize = m.PageSize
	if rhs := m.Filters; rhs != nil {
		tmpContainer := make([]*DeploymentFilter, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Filters = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *GetLatestDeploymentsReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *GetLatestDeploymentsResp) CloneVT() *GetLatestDeploymentsResp {
	if m == nil {
		return (*GetLatestDeploymentsResp)(nil)
	}
	r := new(GetLatestDeploymentsResp)
	r.NextPageToken = m.NextPageToken
	if rhs := m.Deployments; rhs != nil {
		tmpContainer := make([]*model.Deployment, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Deployments = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *GetLatestDeploymentsResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *DeploymentServiceInstance) CloneVT() *DeploymentServiceInstance {
	if m == nil {
		return (*DeploymentServiceInstance)(nil)
	}
	r := new(DeploymentServiceInstance)
	r.Application = m.Application
	r.Service = m.Service
	r.ReleaseChannel = m.ReleaseChannel
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *DeploymentServiceInstance) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CheckCommitInDeploymentReq) CloneVT() *CheckCommitInDeploymentReq {
	if m == nil {
		return (*CheckCommitInDeploymentReq)(nil)
	}
	r := new(CheckCommitInDeploymentReq)
	r.Repository = m.Repository
	r.Commit = m.Commit
	if m.DeploymentOneof != nil {
		r.DeploymentOneof = m.DeploymentOneof.(interface {
			CloneVT() isCheckCommitInDeploymentReq_DeploymentOneof
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CheckCommitInDeploymentReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CheckCommitInDeploymentReq_DeploymentId) CloneVT() isCheckCommitInDeploymentReq_DeploymentOneof {
	if m == nil {
		return (*CheckCommitInDeploymentReq_DeploymentId)(nil)
	}
	r := new(CheckCommitInDeploymentReq_DeploymentId)
	r.DeploymentId = m.DeploymentId
	return r
}

func (m *CheckCommitInDeploymentReq_DeploymentServiceInstance) CloneVT() isCheckCommitInDeploymentReq_DeploymentOneof {
	if m == nil {
		return (*CheckCommitInDeploymentReq_DeploymentServiceInstance)(nil)
	}
	r := new(CheckCommitInDeploymentReq_DeploymentServiceInstance)
	r.DeploymentServiceInstance = m.DeploymentServiceInstance.CloneVT()
	return r
}

func (m *CheckCommitInDeploymentResp) CloneVT() *CheckCommitInDeploymentResp {
	if m == nil {
		return (*CheckCommitInDeploymentResp)(nil)
	}
	r := new(CheckCommitInDeploymentResp)
	r.Result = m.Result
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CheckCommitInDeploymentResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (this *RecordDeploymentReq) EqualVT(that *RecordDeploymentReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Config.EqualVT(that.Config) {
		return false
	}
	if this.Pending != that.Pending {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RecordDeploymentReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RecordDeploymentReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RecordDeploymentResp) EqualVT(that *RecordDeploymentResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Meta.EqualVT(that.Meta) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RecordDeploymentResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RecordDeploymentResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *UpdateDeploymentStatusReq) EqualVT(that *UpdateDeploymentStatusReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.DeploymentId != that.DeploymentId {
		return false
	}
	if this.Status != that.Status {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *UpdateDeploymentStatusReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*UpdateDeploymentStatusReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *UpdateDeploymentStatusResp) EqualVT(that *UpdateDeploymentStatusResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Status != that.Status {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *UpdateDeploymentStatusResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*UpdateDeploymentStatusResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *DeploymentFilter) EqualVT(that *DeploymentFilter) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Services) != len(that.Services) {
		return false
	}
	for i, vx := range this.Services {
		vy := that.Services[i]
		if vx != vy {
			return false
		}
	}
	if len(this.ReleaseChannels) != len(that.ReleaseChannels) {
		return false
	}
	for i, vx := range this.ReleaseChannels {
		vy := that.ReleaseChannels[i]
		if vx != vy {
			return false
		}
	}
	if this.Application != that.Application {
		return false
	}
	if this.DesiredStateId != that.DesiredStateId {
		return false
	}
	if this.ReleaseId != that.ReleaseId {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *DeploymentFilter) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*DeploymentFilter)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ListDeploymentsReq) EqualVT(that *ListDeploymentsReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Filters) != len(that.Filters) {
		return false
	}
	for i, vx := range this.Filters {
		vy := that.Filters[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &DeploymentFilter{}
			}
			if q == nil {
				q = &DeploymentFilter{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if !this.Filter.EqualVT(that.Filter) {
		return false
	}
	if this.StartingDeploymentId != that.StartingDeploymentId {
		return false
	}
	if this.EndingDeploymentId != that.EndingDeploymentId {
		return false
	}
	if this.PageToken != that.PageToken {
		return false
	}
	if this.PageSize != that.PageSize {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ListDeploymentsReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ListDeploymentsReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ListDeploymentsResp) EqualVT(that *ListDeploymentsResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Deployments) != len(that.Deployments) {
		return false
	}
	for i, vx := range this.Deployments {
		vy := that.Deployments[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &model.Deployment{}
			}
			if q == nil {
				q = &model.Deployment{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if this.NextPageToken != that.NextPageToken {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ListDeploymentsResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ListDeploymentsResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *DeploymentRef_ServiceInstanceConfig) EqualVT(that *DeploymentRef_ServiceInstanceConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.CompiledConfig.EqualVT(that.CompiledConfig) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *DeploymentRef_ServiceInstanceConfig) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*DeploymentRef_ServiceInstanceConfig)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *DeploymentRef) EqualVT(that *DeploymentRef) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Ref == nil && that.Ref != nil {
		return false
	} else if this.Ref != nil {
		if that.Ref == nil {
			return false
		}
		if !this.Ref.(interface {
			EqualVT(isDeploymentRef_Ref) bool
		}).EqualVT(that.Ref) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *DeploymentRef) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*DeploymentRef)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *DeploymentRef_DeploymentId) EqualVT(thatIface isDeploymentRef_Ref) bool {
	that, ok := thatIface.(*DeploymentRef_DeploymentId)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.DeploymentId != that.DeploymentId {
		return false
	}
	return true
}

func (this *DeploymentRef_Config) EqualVT(thatIface isDeploymentRef_Ref) bool {
	that, ok := thatIface.(*DeploymentRef_Config)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Config, that.Config; p != q {
		if p == nil {
			p = &model.DeploymentConfig{}
		}
		if q == nil {
			q = &model.DeploymentConfig{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *DeploymentRef_ServiceInstanceConfig_) EqualVT(thatIface isDeploymentRef_Ref) bool {
	that, ok := thatIface.(*DeploymentRef_ServiceInstanceConfig_)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ServiceInstanceConfig, that.ServiceInstanceConfig; p != q {
		if p == nil {
			p = &DeploymentRef_ServiceInstanceConfig{}
		}
		if q == nil {
			q = &DeploymentRef_ServiceInstanceConfig{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CompareDeploymentReq) EqualVT(that *CompareDeploymentReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.NewDeployment.EqualVT(that.NewDeployment) {
		return false
	}
	if !this.PrevDeployment.EqualVT(that.PrevDeployment) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CompareDeploymentReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CompareDeploymentReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CompareDeploymentResp) EqualVT(that *CompareDeploymentResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Comparison.EqualVT(that.Comparison) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CompareDeploymentResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CompareDeploymentResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *PreviewDeploymentReq) EqualVT(that *PreviewDeploymentReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Config.EqualVT(that.Config) {
		return false
	}
	if !this.PrevDeployment.EqualVT(that.PrevDeployment) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *PreviewDeploymentReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*PreviewDeploymentReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *PreviewDeploymentResp) EqualVT(that *PreviewDeploymentResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Deployment.EqualVT(that.Deployment) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *PreviewDeploymentResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*PreviewDeploymentResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *GetLatestDeploymentsReq) EqualVT(that *GetLatestDeploymentsReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Filters) != len(that.Filters) {
		return false
	}
	for i, vx := range this.Filters {
		vy := that.Filters[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &DeploymentFilter{}
			}
			if q == nil {
				q = &DeploymentFilter{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if !this.Filter.EqualVT(that.Filter) {
		return false
	}
	if this.Status != that.Status {
		return false
	}
	if this.PageToken != that.PageToken {
		return false
	}
	if this.PageSize != that.PageSize {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetLatestDeploymentsReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetLatestDeploymentsReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *GetLatestDeploymentsResp) EqualVT(that *GetLatestDeploymentsResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Deployments) != len(that.Deployments) {
		return false
	}
	for i, vx := range this.Deployments {
		vy := that.Deployments[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &model.Deployment{}
			}
			if q == nil {
				q = &model.Deployment{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if this.NextPageToken != that.NextPageToken {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetLatestDeploymentsResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetLatestDeploymentsResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *DeploymentServiceInstance) EqualVT(that *DeploymentServiceInstance) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Application != that.Application {
		return false
	}
	if this.Service != that.Service {
		return false
	}
	if this.ReleaseChannel != that.ReleaseChannel {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *DeploymentServiceInstance) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*DeploymentServiceInstance)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CheckCommitInDeploymentReq) EqualVT(that *CheckCommitInDeploymentReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.DeploymentOneof == nil && that.DeploymentOneof != nil {
		return false
	} else if this.DeploymentOneof != nil {
		if that.DeploymentOneof == nil {
			return false
		}
		if !this.DeploymentOneof.(interface {
			EqualVT(isCheckCommitInDeploymentReq_DeploymentOneof) bool
		}).EqualVT(that.DeploymentOneof) {
			return false
		}
	}
	if this.Repository != that.Repository {
		return false
	}
	if this.Commit != that.Commit {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CheckCommitInDeploymentReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CheckCommitInDeploymentReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CheckCommitInDeploymentReq_DeploymentId) EqualVT(thatIface isCheckCommitInDeploymentReq_DeploymentOneof) bool {
	that, ok := thatIface.(*CheckCommitInDeploymentReq_DeploymentId)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.DeploymentId != that.DeploymentId {
		return false
	}
	return true
}

func (this *CheckCommitInDeploymentReq_DeploymentServiceInstance) EqualVT(thatIface isCheckCommitInDeploymentReq_DeploymentOneof) bool {
	that, ok := thatIface.(*CheckCommitInDeploymentReq_DeploymentServiceInstance)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.DeploymentServiceInstance, that.DeploymentServiceInstance; p != q {
		if p == nil {
			p = &DeploymentServiceInstance{}
		}
		if q == nil {
			q = &DeploymentServiceInstance{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CheckCommitInDeploymentResp) EqualVT(that *CheckCommitInDeploymentResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Result != that.Result {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CheckCommitInDeploymentResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CheckCommitInDeploymentResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
