// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.1
// 	protoc        v3.21.10
// source: prodvana/deployment/manager.proto

package deployment

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	object "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/object"
	service "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/service"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CheckCommitInDeploymentResp_Result int32

const (
	CheckCommitInDeploymentResp_UNKNOWN      CheckCommitInDeploymentResp_Result = 0
	CheckCommitInDeploymentResp_INCLUDED     CheckCommitInDeploymentResp_Result = 1
	CheckCommitInDeploymentResp_NO_RELATION  CheckCommitInDeploymentResp_Result = 2
	CheckCommitInDeploymentResp_NOT_INCLUDED CheckCommitInDeploymentResp_Result = 3
)

// Enum value maps for CheckCommitInDeploymentResp_Result.
var (
	CheckCommitInDeploymentResp_Result_name = map[int32]string{
		0: "UNKNOWN",
		1: "INCLUDED",
		2: "NO_RELATION",
		3: "NOT_INCLUDED",
	}
	CheckCommitInDeploymentResp_Result_value = map[string]int32{
		"UNKNOWN":      0,
		"INCLUDED":     1,
		"NO_RELATION":  2,
		"NOT_INCLUDED": 3,
	}
)

func (x CheckCommitInDeploymentResp_Result) Enum() *CheckCommitInDeploymentResp_Result {
	p := new(CheckCommitInDeploymentResp_Result)
	*p = x
	return p
}

func (x CheckCommitInDeploymentResp_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CheckCommitInDeploymentResp_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_prodvana_deployment_manager_proto_enumTypes[0].Descriptor()
}

func (CheckCommitInDeploymentResp_Result) Type() protoreflect.EnumType {
	return &file_prodvana_deployment_manager_proto_enumTypes[0]
}

func (x CheckCommitInDeploymentResp_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CheckCommitInDeploymentResp_Result.Descriptor instead.
func (CheckCommitInDeploymentResp_Result) EnumDescriptor() ([]byte, []int) {
	return file_prodvana_deployment_manager_proto_rawDescGZIP(), []int{16, 0}
}

type RecordDeploymentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *DeploymentConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// If true, create deployment with pending status that is meant to be updated later to either success or failure.
	// By default, deployments are created with status SUCCEEDED.
	Pending bool `protobuf:"varint,2,opt,name=pending,proto3" json:"pending,omitempty"`
}

func (x *RecordDeploymentReq) Reset() {
	*x = RecordDeploymentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_deployment_manager_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordDeploymentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordDeploymentReq) ProtoMessage() {}

func (x *RecordDeploymentReq) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_deployment_manager_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordDeploymentReq.ProtoReflect.Descriptor instead.
func (*RecordDeploymentReq) Descriptor() ([]byte, []int) {
	return file_prodvana_deployment_manager_proto_rawDescGZIP(), []int{0}
}

func (x *RecordDeploymentReq) GetConfig() *DeploymentConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *RecordDeploymentReq) GetPending() bool {
	if x != nil {
		return x.Pending
	}
	return false
}

type RecordDeploymentResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta *object.ObjectMeta `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *RecordDeploymentResp) Reset() {
	*x = RecordDeploymentResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_deployment_manager_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordDeploymentResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordDeploymentResp) ProtoMessage() {}

func (x *RecordDeploymentResp) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_deployment_manager_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordDeploymentResp.ProtoReflect.Descriptor instead.
func (*RecordDeploymentResp) Descriptor() ([]byte, []int) {
	return file_prodvana_deployment_manager_proto_rawDescGZIP(), []int{1}
}

func (x *RecordDeploymentResp) GetMeta() *object.ObjectMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

type UpdateDeploymentStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeploymentId string           `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	Status       DeploymentStatus `protobuf:"varint,2,opt,name=status,proto3,enum=prodvana.deployment.DeploymentStatus" json:"status,omitempty"`
}

func (x *UpdateDeploymentStatusReq) Reset() {
	*x = UpdateDeploymentStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_deployment_manager_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDeploymentStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeploymentStatusReq) ProtoMessage() {}

func (x *UpdateDeploymentStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_deployment_manager_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeploymentStatusReq.ProtoReflect.Descriptor instead.
func (*UpdateDeploymentStatusReq) Descriptor() ([]byte, []int) {
	return file_prodvana_deployment_manager_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateDeploymentStatusReq) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *UpdateDeploymentStatusReq) GetStatus() DeploymentStatus {
	if x != nil {
		return x.Status
	}
	return DeploymentStatus_UNKNOWN_STATUS
}

type UpdateDeploymentStatusResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status DeploymentStatus `protobuf:"varint,1,opt,name=status,proto3,enum=prodvana.deployment.DeploymentStatus" json:"status,omitempty"`
}

func (x *UpdateDeploymentStatusResp) Reset() {
	*x = UpdateDeploymentStatusResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_deployment_manager_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDeploymentStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeploymentStatusResp) ProtoMessage() {}

func (x *UpdateDeploymentStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_deployment_manager_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeploymentStatusResp.ProtoReflect.Descriptor instead.
func (*UpdateDeploymentStatusResp) Descriptor() ([]byte, []int) {
	return file_prodvana_deployment_manager_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateDeploymentStatusResp) GetStatus() DeploymentStatus {
	if x != nil {
		return x.Status
	}
	return DeploymentStatus_UNKNOWN_STATUS
}

type DeploymentFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// filters to deployments for join(join(services, OR), join(release_channels, OR), AND)
	Services        []string `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty"`
	ReleaseChannels []string `protobuf:"bytes,2,rep,name=release_channels,json=releaseChannels,proto3" json:"release_channels,omitempty"`
	// if set, the filters on services and deployment channels above will be limited to this app.
	// Otherwise, there is no app filter (so e.g. release_channels=['staging'] will select
	// staging deployment channels across all apps.)
	Application    string `protobuf:"bytes,3,opt,name=application,proto3" json:"application,omitempty"`
	DesiredStateId string `protobuf:"bytes,4,opt,name=desired_state_id,json=desiredStateId,proto3" json:"desired_state_id,omitempty"` // desired_state_id filter is AND'ed with everything else in the same filter object
	ReleaseId      string `protobuf:"bytes,5,opt,name=release_id,json=releaseId,proto3" json:"release_id,omitempty"`                  // release_id filter is AND'ed with everything else in the same filter object
}

func (x *DeploymentFilter) Reset() {
	*x = DeploymentFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_deployment_manager_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentFilter) ProtoMessage() {}

func (x *DeploymentFilter) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_deployment_manager_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentFilter.ProtoReflect.Descriptor instead.
func (*DeploymentFilter) Descriptor() ([]byte, []int) {
	return file_prodvana_deployment_manager_proto_rawDescGZIP(), []int{4}
}

func (x *DeploymentFilter) GetServices() []string {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *DeploymentFilter) GetReleaseChannels() []string {
	if x != nil {
		return x.ReleaseChannels
	}
	return nil
}

func (x *DeploymentFilter) GetApplication() string {
	if x != nil {
		return x.Application
	}
	return ""
}

func (x *DeploymentFilter) GetDesiredStateId() string {
	if x != nil {
		return x.DesiredStateId
	}
	return ""
}

func (x *DeploymentFilter) GetReleaseId() string {
	if x != nil {
		return x.ReleaseId
	}
	return ""
}

type ListDeploymentsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// filters for listing deployments. Multiple filters are OR'ed together.
	Filters              []*DeploymentFilter `protobuf:"bytes,1,rep,name=filters,proto3" json:"filters,omitempty"`
	Filter               *DeploymentFilter   `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`                                                           // escape hatch to support openAPI, which cannot handle repeated list of messages on GET requests. This is joined to the filters list with an OR.
	StartingDeploymentId string              `protobuf:"bytes,3,opt,name=starting_deployment_id,json=startingDeploymentId,proto3" json:"starting_deployment_id,omitempty"` // newer deployment, inclusive
	EndingDeploymentId   string              `protobuf:"bytes,4,opt,name=ending_deployment_id,json=endingDeploymentId,proto3" json:"ending_deployment_id,omitempty"`       // older deployment, exclusive
	PageToken            string              `protobuf:"bytes,5,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	PageSize             int32               `protobuf:"varint,6,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *ListDeploymentsReq) Reset() {
	*x = ListDeploymentsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_deployment_manager_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDeploymentsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDeploymentsReq) ProtoMessage() {}

func (x *ListDeploymentsReq) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_deployment_manager_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDeploymentsReq.ProtoReflect.Descriptor instead.
func (*ListDeploymentsReq) Descriptor() ([]byte, []int) {
	return file_prodvana_deployment_manager_proto_rawDescGZIP(), []int{5}
}

func (x *ListDeploymentsReq) GetFilters() []*DeploymentFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *ListDeploymentsReq) GetFilter() *DeploymentFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ListDeploymentsReq) GetStartingDeploymentId() string {
	if x != nil {
		return x.StartingDeploymentId
	}
	return ""
}

func (x *ListDeploymentsReq) GetEndingDeploymentId() string {
	if x != nil {
		return x.EndingDeploymentId
	}
	return ""
}

func (x *ListDeploymentsReq) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListDeploymentsReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ListDeploymentsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deployments   []*Deployment `protobuf:"bytes,1,rep,name=deployments,proto3" json:"deployments,omitempty"`
	NextPageToken string        `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListDeploymentsResp) Reset() {
	*x = ListDeploymentsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_deployment_manager_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDeploymentsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDeploymentsResp) ProtoMessage() {}

func (x *ListDeploymentsResp) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_deployment_manager_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDeploymentsResp.ProtoReflect.Descriptor instead.
func (*ListDeploymentsResp) Descriptor() ([]byte, []int) {
	return file_prodvana_deployment_manager_proto_rawDescGZIP(), []int{6}
}

func (x *ListDeploymentsResp) GetDeployments() []*Deployment {
	if x != nil {
		return x.Deployments
	}
	return nil
}

func (x *ListDeploymentsResp) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type DeploymentRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// a deployment reference is either an existing deployment id or the deployment config of a hypothetical, not yet recorded deployment.
	//
	// Types that are assignable to Ref:
	//
	//	*DeploymentRef_DeploymentId
	//	*DeploymentRef_Config
	//	*DeploymentRef_ServiceInstanceConfig_
	Ref isDeploymentRef_Ref `protobuf_oneof:"ref"`
}

func (x *DeploymentRef) Reset() {
	*x = DeploymentRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_deployment_manager_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentRef) ProtoMessage() {}

func (x *DeploymentRef) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_deployment_manager_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentRef.ProtoReflect.Descriptor instead.
func (*DeploymentRef) Descriptor() ([]byte, []int) {
	return file_prodvana_deployment_manager_proto_rawDescGZIP(), []int{7}
}

func (m *DeploymentRef) GetRef() isDeploymentRef_Ref {
	if m != nil {
		return m.Ref
	}
	return nil
}

func (x *DeploymentRef) GetDeploymentId() string {
	if x, ok := x.GetRef().(*DeploymentRef_DeploymentId); ok {
		return x.DeploymentId
	}
	return ""
}

func (x *DeploymentRef) GetConfig() *DeploymentConfig {
	if x, ok := x.GetRef().(*DeploymentRef_Config); ok {
		return x.Config
	}
	return nil
}

func (x *DeploymentRef) GetServiceInstanceConfig() *DeploymentRef_ServiceInstanceConfig {
	if x, ok := x.GetRef().(*DeploymentRef_ServiceInstanceConfig_); ok {
		return x.ServiceInstanceConfig
	}
	return nil
}

type isDeploymentRef_Ref interface {
	isDeploymentRef_Ref()
}

type DeploymentRef_DeploymentId struct {
	DeploymentId string `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3,oneof"`
}

type DeploymentRef_Config struct {
	Config *DeploymentConfig `protobuf:"bytes,2,opt,name=config,proto3,oneof"`
}

type DeploymentRef_ServiceInstanceConfig_ struct {
	ServiceInstanceConfig *DeploymentRef_ServiceInstanceConfig `protobuf:"bytes,3,opt,name=service_instance_config,json=serviceInstanceConfig,proto3,oneof"`
}

func (*DeploymentRef_DeploymentId) isDeploymentRef_Ref() {}

func (*DeploymentRef_Config) isDeploymentRef_Ref() {}

func (*DeploymentRef_ServiceInstanceConfig_) isDeploymentRef_Ref() {}

type CompareDeploymentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewDeployment  *DeploymentRef `protobuf:"bytes,1,opt,name=new_deployment,json=newDeployment,proto3" json:"new_deployment,omitempty"`
	PrevDeployment *DeploymentRef `protobuf:"bytes,2,opt,name=prev_deployment,json=prevDeployment,proto3" json:"prev_deployment,omitempty"`
}

func (x *CompareDeploymentReq) Reset() {
	*x = CompareDeploymentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_deployment_manager_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompareDeploymentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompareDeploymentReq) ProtoMessage() {}

func (x *CompareDeploymentReq) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_deployment_manager_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompareDeploymentReq.ProtoReflect.Descriptor instead.
func (*CompareDeploymentReq) Descriptor() ([]byte, []int) {
	return file_prodvana_deployment_manager_proto_rawDescGZIP(), []int{8}
}

func (x *CompareDeploymentReq) GetNewDeployment() *DeploymentRef {
	if x != nil {
		return x.NewDeployment
	}
	return nil
}

func (x *CompareDeploymentReq) GetPrevDeployment() *DeploymentRef {
	if x != nil {
		return x.PrevDeployment
	}
	return nil
}

type CompareDeploymentResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comparison *DeploymentComparison `protobuf:"bytes,1,opt,name=comparison,proto3" json:"comparison,omitempty"`
}

func (x *CompareDeploymentResp) Reset() {
	*x = CompareDeploymentResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_deployment_manager_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompareDeploymentResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompareDeploymentResp) ProtoMessage() {}

func (x *CompareDeploymentResp) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_deployment_manager_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompareDeploymentResp.ProtoReflect.Descriptor instead.
func (*CompareDeploymentResp) Descriptor() ([]byte, []int) {
	return file_prodvana_deployment_manager_proto_rawDescGZIP(), []int{9}
}

func (x *CompareDeploymentResp) GetComparison() *DeploymentComparison {
	if x != nil {
		return x.Comparison
	}
	return nil
}

type PreviewDeploymentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config         *DeploymentConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	PrevDeployment *DeploymentRef    `protobuf:"bytes,2,opt,name=prev_deployment,json=prevDeployment,proto3" json:"prev_deployment,omitempty"` // omit to use latest deployment from the same app/service/deployment channel
}

func (x *PreviewDeploymentReq) Reset() {
	*x = PreviewDeploymentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_deployment_manager_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviewDeploymentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewDeploymentReq) ProtoMessage() {}

func (x *PreviewDeploymentReq) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_deployment_manager_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewDeploymentReq.ProtoReflect.Descriptor instead.
func (*PreviewDeploymentReq) Descriptor() ([]byte, []int) {
	return file_prodvana_deployment_manager_proto_rawDescGZIP(), []int{10}
}

func (x *PreviewDeploymentReq) GetConfig() *DeploymentConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *PreviewDeploymentReq) GetPrevDeployment() *DeploymentRef {
	if x != nil {
		return x.PrevDeployment
	}
	return nil
}

type PreviewDeploymentResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deployment *Deployment `protobuf:"bytes,1,opt,name=deployment,proto3" json:"deployment,omitempty"`
}

func (x *PreviewDeploymentResp) Reset() {
	*x = PreviewDeploymentResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_deployment_manager_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviewDeploymentResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewDeploymentResp) ProtoMessage() {}

func (x *PreviewDeploymentResp) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_deployment_manager_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewDeploymentResp.ProtoReflect.Descriptor instead.
func (*PreviewDeploymentResp) Descriptor() ([]byte, []int) {
	return file_prodvana_deployment_manager_proto_rawDescGZIP(), []int{11}
}

func (x *PreviewDeploymentResp) GetDeployment() *Deployment {
	if x != nil {
		return x.Deployment
	}
	return nil
}

type GetLatestDeploymentsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// filters for listing deployments. Multiple filters are OR'ed together.
	Filters   []*DeploymentFilter `protobuf:"bytes,1,rep,name=filters,proto3" json:"filters,omitempty"`
	Filter    *DeploymentFilter   `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`                                            // escape hatch to support openAPI, which cannot handle repeated list of messages on GET requests. This is joined to the filters list with an OR.
	Status    DeploymentStatus    `protobuf:"varint,3,opt,name=status,proto3,enum=prodvana.deployment.DeploymentStatus" json:"status,omitempty"` // if set, only return deployments with this status
	PageToken string              `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	PageSize  int32               `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *GetLatestDeploymentsReq) Reset() {
	*x = GetLatestDeploymentsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_deployment_manager_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestDeploymentsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestDeploymentsReq) ProtoMessage() {}

func (x *GetLatestDeploymentsReq) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_deployment_manager_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestDeploymentsReq.ProtoReflect.Descriptor instead.
func (*GetLatestDeploymentsReq) Descriptor() ([]byte, []int) {
	return file_prodvana_deployment_manager_proto_rawDescGZIP(), []int{12}
}

func (x *GetLatestDeploymentsReq) GetFilters() []*DeploymentFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *GetLatestDeploymentsReq) GetFilter() *DeploymentFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetLatestDeploymentsReq) GetStatus() DeploymentStatus {
	if x != nil {
		return x.Status
	}
	return DeploymentStatus_UNKNOWN_STATUS
}

func (x *GetLatestDeploymentsReq) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *GetLatestDeploymentsReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type GetLatestDeploymentsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deployments   []*Deployment `protobuf:"bytes,1,rep,name=deployments,proto3" json:"deployments,omitempty"`
	NextPageToken string        `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *GetLatestDeploymentsResp) Reset() {
	*x = GetLatestDeploymentsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_deployment_manager_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestDeploymentsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestDeploymentsResp) ProtoMessage() {}

func (x *GetLatestDeploymentsResp) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_deployment_manager_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestDeploymentsResp.ProtoReflect.Descriptor instead.
func (*GetLatestDeploymentsResp) Descriptor() ([]byte, []int) {
	return file_prodvana_deployment_manager_proto_rawDescGZIP(), []int{13}
}

func (x *GetLatestDeploymentsResp) GetDeployments() []*Deployment {
	if x != nil {
		return x.Deployments
	}
	return nil
}

func (x *GetLatestDeploymentsResp) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type DeploymentServiceInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Application    string `protobuf:"bytes,1,opt,name=application,proto3" json:"application,omitempty"`
	Service        string `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
	ReleaseChannel string `protobuf:"bytes,3,opt,name=release_channel,json=releaseChannel,proto3" json:"release_channel,omitempty"`
}

func (x *DeploymentServiceInstance) Reset() {
	*x = DeploymentServiceInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_deployment_manager_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentServiceInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentServiceInstance) ProtoMessage() {}

func (x *DeploymentServiceInstance) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_deployment_manager_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentServiceInstance.ProtoReflect.Descriptor instead.
func (*DeploymentServiceInstance) Descriptor() ([]byte, []int) {
	return file_prodvana_deployment_manager_proto_rawDescGZIP(), []int{14}
}

func (x *DeploymentServiceInstance) GetApplication() string {
	if x != nil {
		return x.Application
	}
	return ""
}

func (x *DeploymentServiceInstance) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *DeploymentServiceInstance) GetReleaseChannel() string {
	if x != nil {
		return x.ReleaseChannel
	}
	return ""
}

type CheckCommitInDeploymentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to DeploymentOneof:
	//
	//	*CheckCommitInDeploymentReq_DeploymentId
	//	*CheckCommitInDeploymentReq_DeploymentServiceInstance
	DeploymentOneof isCheckCommitInDeploymentReq_DeploymentOneof `protobuf_oneof:"deployment_oneof"`
	Repository      string                                       `protobuf:"bytes,3,opt,name=repository,proto3" json:"repository,omitempty"`
	Commit          string                                       `protobuf:"bytes,4,opt,name=commit,proto3" json:"commit,omitempty"`
}

func (x *CheckCommitInDeploymentReq) Reset() {
	*x = CheckCommitInDeploymentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_deployment_manager_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckCommitInDeploymentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckCommitInDeploymentReq) ProtoMessage() {}

func (x *CheckCommitInDeploymentReq) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_deployment_manager_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckCommitInDeploymentReq.ProtoReflect.Descriptor instead.
func (*CheckCommitInDeploymentReq) Descriptor() ([]byte, []int) {
	return file_prodvana_deployment_manager_proto_rawDescGZIP(), []int{15}
}

func (m *CheckCommitInDeploymentReq) GetDeploymentOneof() isCheckCommitInDeploymentReq_DeploymentOneof {
	if m != nil {
		return m.DeploymentOneof
	}
	return nil
}

func (x *CheckCommitInDeploymentReq) GetDeploymentId() string {
	if x, ok := x.GetDeploymentOneof().(*CheckCommitInDeploymentReq_DeploymentId); ok {
		return x.DeploymentId
	}
	return ""
}

func (x *CheckCommitInDeploymentReq) GetDeploymentServiceInstance() *DeploymentServiceInstance {
	if x, ok := x.GetDeploymentOneof().(*CheckCommitInDeploymentReq_DeploymentServiceInstance); ok {
		return x.DeploymentServiceInstance
	}
	return nil
}

func (x *CheckCommitInDeploymentReq) GetRepository() string {
	if x != nil {
		return x.Repository
	}
	return ""
}

func (x *CheckCommitInDeploymentReq) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

type isCheckCommitInDeploymentReq_DeploymentOneof interface {
	isCheckCommitInDeploymentReq_DeploymentOneof()
}

type CheckCommitInDeploymentReq_DeploymentId struct {
	DeploymentId string `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3,oneof"`
}

type CheckCommitInDeploymentReq_DeploymentServiceInstance struct {
	DeploymentServiceInstance *DeploymentServiceInstance `protobuf:"bytes,2,opt,name=deployment_service_instance,json=deploymentServiceInstance,proto3,oneof"` // will pick latest deployment
}

func (*CheckCommitInDeploymentReq_DeploymentId) isCheckCommitInDeploymentReq_DeploymentOneof() {}

func (*CheckCommitInDeploymentReq_DeploymentServiceInstance) isCheckCommitInDeploymentReq_DeploymentOneof() {
}

type CheckCommitInDeploymentResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result CheckCommitInDeploymentResp_Result `protobuf:"varint,1,opt,name=result,proto3,enum=prodvana.deployment.CheckCommitInDeploymentResp_Result" json:"result,omitempty"`
}

func (x *CheckCommitInDeploymentResp) Reset() {
	*x = CheckCommitInDeploymentResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_deployment_manager_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckCommitInDeploymentResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckCommitInDeploymentResp) ProtoMessage() {}

func (x *CheckCommitInDeploymentResp) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_deployment_manager_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckCommitInDeploymentResp.ProtoReflect.Descriptor instead.
func (*CheckCommitInDeploymentResp) Descriptor() ([]byte, []int) {
	return file_prodvana_deployment_manager_proto_rawDescGZIP(), []int{16}
}

func (x *CheckCommitInDeploymentResp) GetResult() CheckCommitInDeploymentResp_Result {
	if x != nil {
		return x.Result
	}
	return CheckCommitInDeploymentResp_UNKNOWN
}

type DeploymentRef_ServiceInstanceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompiledConfig *service.CompiledServiceInstanceConfig `protobuf:"bytes,1,opt,name=compiled_config,json=compiledConfig,proto3" json:"compiled_config,omitempty"`
}

func (x *DeploymentRef_ServiceInstanceConfig) Reset() {
	*x = DeploymentRef_ServiceInstanceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_deployment_manager_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentRef_ServiceInstanceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentRef_ServiceInstanceConfig) ProtoMessage() {}

func (x *DeploymentRef_ServiceInstanceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_deployment_manager_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentRef_ServiceInstanceConfig.ProtoReflect.Descriptor instead.
func (*DeploymentRef_ServiceInstanceConfig) Descriptor() ([]byte, []int) {
	return file_prodvana_deployment_manager_proto_rawDescGZIP(), []int{7, 0}
}

func (x *DeploymentRef_ServiceInstanceConfig) GetCompiledConfig() *service.CompiledServiceInstanceConfig {
	if x != nil {
		return x.CompiledConfig
	}
	return nil
}

var File_prodvana_deployment_manager_proto protoreflect.FileDescriptor

var file_prodvana_deployment_manager_proto_rawDesc = []byte{
	0x0a, 0x21, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61,
	0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x20, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x78, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x47, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x47,
	0x0a, 0x14, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2f, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x22, 0x7f, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x5b, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e,
	0x61, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xc4, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x22, 0xb8, 0x02, 0x0a,
	0x12, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x12, 0x3f, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x3d, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x41, 0x0a, 0x0b, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xf4, 0x02, 0x0a, 0x0d, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x12, 0x25, 0x0a, 0x0d,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x72, 0x0a, 0x17, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61,
	0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48,
	0x00, 0x52, 0x15, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x7b, 0x0a, 0x15, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x62, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x0a, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x12, 0x03, 0xf8, 0x42,
	0x01, 0x22, 0xb8, 0x01, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x53, 0x0a, 0x0e, 0x6e, 0x65,
	0x77, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x0d, 0x6e, 0x65, 0x77, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x4b, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x52, 0x0e, 0x70, 0x72,
	0x65, 0x76, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x62, 0x0a, 0x15,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x49, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69,
	0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x69, 0x73, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e,
	0x22, 0xac, 0x01, 0x0a, 0x14, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x47, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x4b, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x52,
	0x0e, 0x70, 0x72, 0x65, 0x76, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0x58, 0x0a, 0x15, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3f, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x94, 0x02, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x3f, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e,
	0x61, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3d, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e,
	0x61, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61,
	0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x22, 0x85, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x41, 0x0a,
	0x0b, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x0b, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x9b, 0x01, 0x0a, 0x19, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x21, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x0f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0xab, 0x02, 0x0a, 0x1a, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x2e, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x7a, 0x0a, 0x1b, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a,
	0x01, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x19, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x27, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x06, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x42, 0x17, 0x0a, 0x10, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x12,
	0x03, 0xf8, 0x42, 0x01, 0x22, 0xb6, 0x01, 0x0a, 0x1b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x4f, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x46, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x49, 0x4e, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f,
	0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x4e,
	0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x44, 0x10, 0x03, 0x32, 0x96, 0x09,
	0x0a, 0x11, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x12, 0x83, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x1a, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x14, 0x3a, 0x01, 0x2a, 0x22, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0xae, 0x01, 0x0a, 0x16, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a,
	0x22, 0x28, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x7b, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x3d, 0x2a, 0x7d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x7d, 0x0a, 0x0f, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e,
	0x61, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x6e, 0x0a, 0x15, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x12, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x30, 0x01, 0x12, 0x8e, 0x01, 0x0a, 0x11, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x29, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x01,
	0x2a, 0x22, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x12, 0x8e, 0x01, 0x0a, 0x11, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a,
	0x01, 0x2a, 0x22, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x93, 0x01, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x12, 0xa2, 0x01, 0x0a, 0x17, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x49, 0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49,
	0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x30,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x49, 0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x42, 0x4f, 0x5a, 0x4d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x67, 0x6f,
	0x2f, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_prodvana_deployment_manager_proto_rawDescOnce sync.Once
	file_prodvana_deployment_manager_proto_rawDescData = file_prodvana_deployment_manager_proto_rawDesc
)

func file_prodvana_deployment_manager_proto_rawDescGZIP() []byte {
	file_prodvana_deployment_manager_proto_rawDescOnce.Do(func() {
		file_prodvana_deployment_manager_proto_rawDescData = protoimpl.X.CompressGZIP(file_prodvana_deployment_manager_proto_rawDescData)
	})
	return file_prodvana_deployment_manager_proto_rawDescData
}

var file_prodvana_deployment_manager_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_prodvana_deployment_manager_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_prodvana_deployment_manager_proto_goTypes = []interface{}{
	(CheckCommitInDeploymentResp_Result)(0),       // 0: prodvana.deployment.CheckCommitInDeploymentResp.Result
	(*RecordDeploymentReq)(nil),                   // 1: prodvana.deployment.RecordDeploymentReq
	(*RecordDeploymentResp)(nil),                  // 2: prodvana.deployment.RecordDeploymentResp
	(*UpdateDeploymentStatusReq)(nil),             // 3: prodvana.deployment.UpdateDeploymentStatusReq
	(*UpdateDeploymentStatusResp)(nil),            // 4: prodvana.deployment.UpdateDeploymentStatusResp
	(*DeploymentFilter)(nil),                      // 5: prodvana.deployment.DeploymentFilter
	(*ListDeploymentsReq)(nil),                    // 6: prodvana.deployment.ListDeploymentsReq
	(*ListDeploymentsResp)(nil),                   // 7: prodvana.deployment.ListDeploymentsResp
	(*DeploymentRef)(nil),                         // 8: prodvana.deployment.DeploymentRef
	(*CompareDeploymentReq)(nil),                  // 9: prodvana.deployment.CompareDeploymentReq
	(*CompareDeploymentResp)(nil),                 // 10: prodvana.deployment.CompareDeploymentResp
	(*PreviewDeploymentReq)(nil),                  // 11: prodvana.deployment.PreviewDeploymentReq
	(*PreviewDeploymentResp)(nil),                 // 12: prodvana.deployment.PreviewDeploymentResp
	(*GetLatestDeploymentsReq)(nil),               // 13: prodvana.deployment.GetLatestDeploymentsReq
	(*GetLatestDeploymentsResp)(nil),              // 14: prodvana.deployment.GetLatestDeploymentsResp
	(*DeploymentServiceInstance)(nil),             // 15: prodvana.deployment.DeploymentServiceInstance
	(*CheckCommitInDeploymentReq)(nil),            // 16: prodvana.deployment.CheckCommitInDeploymentReq
	(*CheckCommitInDeploymentResp)(nil),           // 17: prodvana.deployment.CheckCommitInDeploymentResp
	(*DeploymentRef_ServiceInstanceConfig)(nil),   // 18: prodvana.deployment.DeploymentRef.ServiceInstanceConfig
	(*DeploymentConfig)(nil),                      // 19: prodvana.deployment.DeploymentConfig
	(*object.ObjectMeta)(nil),                     // 20: prodvana.object.ObjectMeta
	(DeploymentStatus)(0),                         // 21: prodvana.deployment.DeploymentStatus
	(*Deployment)(nil),                            // 22: prodvana.deployment.Deployment
	(*DeploymentComparison)(nil),                  // 23: prodvana.deployment.DeploymentComparison
	(*service.CompiledServiceInstanceConfig)(nil), // 24: prodvana.service.CompiledServiceInstanceConfig
}
var file_prodvana_deployment_manager_proto_depIdxs = []int32{
	19, // 0: prodvana.deployment.RecordDeploymentReq.config:type_name -> prodvana.deployment.DeploymentConfig
	20, // 1: prodvana.deployment.RecordDeploymentResp.meta:type_name -> prodvana.object.ObjectMeta
	21, // 2: prodvana.deployment.UpdateDeploymentStatusReq.status:type_name -> prodvana.deployment.DeploymentStatus
	21, // 3: prodvana.deployment.UpdateDeploymentStatusResp.status:type_name -> prodvana.deployment.DeploymentStatus
	5,  // 4: prodvana.deployment.ListDeploymentsReq.filters:type_name -> prodvana.deployment.DeploymentFilter
	5,  // 5: prodvana.deployment.ListDeploymentsReq.filter:type_name -> prodvana.deployment.DeploymentFilter
	22, // 6: prodvana.deployment.ListDeploymentsResp.deployments:type_name -> prodvana.deployment.Deployment
	19, // 7: prodvana.deployment.DeploymentRef.config:type_name -> prodvana.deployment.DeploymentConfig
	18, // 8: prodvana.deployment.DeploymentRef.service_instance_config:type_name -> prodvana.deployment.DeploymentRef.ServiceInstanceConfig
	8,  // 9: prodvana.deployment.CompareDeploymentReq.new_deployment:type_name -> prodvana.deployment.DeploymentRef
	8,  // 10: prodvana.deployment.CompareDeploymentReq.prev_deployment:type_name -> prodvana.deployment.DeploymentRef
	23, // 11: prodvana.deployment.CompareDeploymentResp.comparison:type_name -> prodvana.deployment.DeploymentComparison
	19, // 12: prodvana.deployment.PreviewDeploymentReq.config:type_name -> prodvana.deployment.DeploymentConfig
	8,  // 13: prodvana.deployment.PreviewDeploymentReq.prev_deployment:type_name -> prodvana.deployment.DeploymentRef
	22, // 14: prodvana.deployment.PreviewDeploymentResp.deployment:type_name -> prodvana.deployment.Deployment
	5,  // 15: prodvana.deployment.GetLatestDeploymentsReq.filters:type_name -> prodvana.deployment.DeploymentFilter
	5,  // 16: prodvana.deployment.GetLatestDeploymentsReq.filter:type_name -> prodvana.deployment.DeploymentFilter
	21, // 17: prodvana.deployment.GetLatestDeploymentsReq.status:type_name -> prodvana.deployment.DeploymentStatus
	22, // 18: prodvana.deployment.GetLatestDeploymentsResp.deployments:type_name -> prodvana.deployment.Deployment
	15, // 19: prodvana.deployment.CheckCommitInDeploymentReq.deployment_service_instance:type_name -> prodvana.deployment.DeploymentServiceInstance
	0,  // 20: prodvana.deployment.CheckCommitInDeploymentResp.result:type_name -> prodvana.deployment.CheckCommitInDeploymentResp.Result
	24, // 21: prodvana.deployment.DeploymentRef.ServiceInstanceConfig.compiled_config:type_name -> prodvana.service.CompiledServiceInstanceConfig
	1,  // 22: prodvana.deployment.DeploymentManager.RecordDeployment:input_type -> prodvana.deployment.RecordDeploymentReq
	3,  // 23: prodvana.deployment.DeploymentManager.UpdateDeploymentStatus:input_type -> prodvana.deployment.UpdateDeploymentStatusReq
	6,  // 24: prodvana.deployment.DeploymentManager.ListDeployments:input_type -> prodvana.deployment.ListDeploymentsReq
	6,  // 25: prodvana.deployment.DeploymentManager.ListDeploymentsStream:input_type -> prodvana.deployment.ListDeploymentsReq
	9,  // 26: prodvana.deployment.DeploymentManager.CompareDeployment:input_type -> prodvana.deployment.CompareDeploymentReq
	11, // 27: prodvana.deployment.DeploymentManager.PreviewDeployment:input_type -> prodvana.deployment.PreviewDeploymentReq
	13, // 28: prodvana.deployment.DeploymentManager.GetLatestDeployments:input_type -> prodvana.deployment.GetLatestDeploymentsReq
	16, // 29: prodvana.deployment.DeploymentManager.CheckCommitInDeployment:input_type -> prodvana.deployment.CheckCommitInDeploymentReq
	2,  // 30: prodvana.deployment.DeploymentManager.RecordDeployment:output_type -> prodvana.deployment.RecordDeploymentResp
	4,  // 31: prodvana.deployment.DeploymentManager.UpdateDeploymentStatus:output_type -> prodvana.deployment.UpdateDeploymentStatusResp
	7,  // 32: prodvana.deployment.DeploymentManager.ListDeployments:output_type -> prodvana.deployment.ListDeploymentsResp
	7,  // 33: prodvana.deployment.DeploymentManager.ListDeploymentsStream:output_type -> prodvana.deployment.ListDeploymentsResp
	10, // 34: prodvana.deployment.DeploymentManager.CompareDeployment:output_type -> prodvana.deployment.CompareDeploymentResp
	12, // 35: prodvana.deployment.DeploymentManager.PreviewDeployment:output_type -> prodvana.deployment.PreviewDeploymentResp
	14, // 36: prodvana.deployment.DeploymentManager.GetLatestDeployments:output_type -> prodvana.deployment.GetLatestDeploymentsResp
	17, // 37: prodvana.deployment.DeploymentManager.CheckCommitInDeployment:output_type -> prodvana.deployment.CheckCommitInDeploymentResp
	30, // [30:38] is the sub-list for method output_type
	22, // [22:30] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_prodvana_deployment_manager_proto_init() }
func file_prodvana_deployment_manager_proto_init() {
	if File_prodvana_deployment_manager_proto != nil {
		return
	}
	file_prodvana_deployment_object_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_prodvana_deployment_manager_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordDeploymentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_deployment_manager_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordDeploymentResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_deployment_manager_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDeploymentStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_deployment_manager_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDeploymentStatusResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_deployment_manager_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_deployment_manager_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDeploymentsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_deployment_manager_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDeploymentsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_deployment_manager_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_deployment_manager_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompareDeploymentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_deployment_manager_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompareDeploymentResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_deployment_manager_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreviewDeploymentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_deployment_manager_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreviewDeploymentResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_deployment_manager_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestDeploymentsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_deployment_manager_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestDeploymentsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_deployment_manager_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentServiceInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_deployment_manager_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckCommitInDeploymentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_deployment_manager_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckCommitInDeploymentResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_deployment_manager_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentRef_ServiceInstanceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_prodvana_deployment_manager_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*DeploymentRef_DeploymentId)(nil),
		(*DeploymentRef_Config)(nil),
		(*DeploymentRef_ServiceInstanceConfig_)(nil),
	}
	file_prodvana_deployment_manager_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*CheckCommitInDeploymentReq_DeploymentId)(nil),
		(*CheckCommitInDeploymentReq_DeploymentServiceInstance)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_prodvana_deployment_manager_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_prodvana_deployment_manager_proto_goTypes,
		DependencyIndexes: file_prodvana_deployment_manager_proto_depIdxs,
		EnumInfos:         file_prodvana_deployment_manager_proto_enumTypes,
		MessageInfos:      file_prodvana_deployment_manager_proto_msgTypes,
	}.Build()
	File_prodvana_deployment_manager_proto = out.File
	file_prodvana_deployment_manager_proto_rawDesc = nil
	file_prodvana_deployment_manager_proto_goTypes = nil
	file_prodvana_deployment_manager_proto_depIdxs = nil
}
