// Code generated by protoc-gen-go-vtproto. DO NOT EDIT.
// protoc-gen-go-vtproto version: v0.6.0
// source: prodvana/deployment/model/object.proto

package model

import (
	timestamppb1 "github.com/planetscale/vtprotobuf/types/known/timestamppb"
	repo "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/repo"
	proto "google.golang.org/protobuf/proto"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

func (m *DeploymentConfig) CloneVT() *DeploymentConfig {
	if m == nil {
		return (*DeploymentConfig)(nil)
	}
	r := new(DeploymentConfig)
	r.CreationTimestamp = (*timestamppb.Timestamp)((*timestamppb1.Timestamp)(m.CreationTimestamp).CloneVT())
	r.DeploymentSystem = m.DeploymentSystem
	r.Service = m.Service
	r.ReleaseChannel = m.ReleaseChannel
	r.Application = m.Application
	r.Repository = m.Repository
	r.CommitId = m.CommitId
	r.User = m.User
	r.ApplicationId = m.ApplicationId
	r.ServiceId = m.ServiceId
	r.ReleaseChannelId = m.ReleaseChannelId
	r.ServiceVersion = m.ServiceVersion
	r.DesiredStateId = m.DesiredStateId
	r.ReleaseId = m.ReleaseId
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *DeploymentConfig) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *DeploymentState) CloneVT() *DeploymentState {
	if m == nil {
		return (*DeploymentState)(nil)
	}
	r := new(DeploymentState)
	r.Status = m.Status
	r.LastUpdateTimestamp = (*timestamppb.Timestamp)((*timestamppb1.Timestamp)(m.LastUpdateTimestamp).CloneVT())
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *DeploymentState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CommitAnalysis) CloneVT() *CommitAnalysis {
	if m == nil {
		return (*CommitAnalysis)(nil)
	}
	r := new(CommitAnalysis)
	r.CommitsAdded = m.CommitsAdded
	r.CommitsRemoved = m.CommitsRemoved
	r.ImpactAnalysis = m.ImpactAnalysis.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CommitAnalysis) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ImpactAnalysisComparison) CloneVT() *ImpactAnalysisComparison {
	if m == nil {
		return (*ImpactAnalysisComparison)(nil)
	}
	r := new(ImpactAnalysisComparison)
	r.UnanalyzedCommits = m.UnanalyzedCommits
	if rhs := m.RelevantAddedCommits; rhs != nil {
		tmpContainer := make([]*repo.Commit, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.RelevantAddedCommits = tmpContainer
	}
	if rhs := m.RelevantRemovedCommits; rhs != nil {
		tmpContainer := make([]*repo.Commit, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.RelevantRemovedCommits = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ImpactAnalysisComparison) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *DeploymentComparison) CloneVT() *DeploymentComparison {
	if m == nil {
		return (*DeploymentComparison)(nil)
	}
	r := new(DeploymentComparison)
	r.Prev = m.Prev.CloneVT()
	r.PrevRepository = m.PrevRepository
	r.NewRepository = m.NewRepository
	r.PrevCommitId = m.PrevCommitId
	r.NewCommitId = m.NewCommitId
	r.CommitAnalysis = m.CommitAnalysis.CloneVT()
	r.PrevServiceId = m.PrevServiceId
	r.PrevReleaseChannelId = m.PrevReleaseChannelId
	r.PrevServiceVersion = m.PrevServiceVersion
	r.NewServiceId = m.NewServiceId
	r.NewReleaseChannelId = m.NewReleaseChannelId
	r.NewServiceVersion = m.NewServiceVersion
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *DeploymentComparison) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *Deployment) CloneVT() *Deployment {
	if m == nil {
		return (*Deployment)(nil)
	}
	r := new(Deployment)
	r.Meta = m.Meta.CloneVT()
	r.Config = m.Config.CloneVT()
	r.Comparison = m.Comparison.CloneVT()
	r.State = m.State.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Deployment) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (this *DeploymentConfig) EqualVT(that *DeploymentConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.CreationTimestamp).EqualVT((*timestamppb1.Timestamp)(that.CreationTimestamp)) {
		return false
	}
	if this.DeploymentSystem != that.DeploymentSystem {
		return false
	}
	if this.Service != that.Service {
		return false
	}
	if this.ReleaseChannel != that.ReleaseChannel {
		return false
	}
	if this.Repository != that.Repository {
		return false
	}
	if this.CommitId != that.CommitId {
		return false
	}
	if this.User != that.User {
		return false
	}
	if this.Application != that.Application {
		return false
	}
	if this.ApplicationId != that.ApplicationId {
		return false
	}
	if this.ServiceId != that.ServiceId {
		return false
	}
	if this.ReleaseChannelId != that.ReleaseChannelId {
		return false
	}
	if this.ServiceVersion != that.ServiceVersion {
		return false
	}
	if this.DesiredStateId != that.DesiredStateId {
		return false
	}
	if this.ReleaseId != that.ReleaseId {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *DeploymentConfig) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*DeploymentConfig)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *DeploymentState) EqualVT(that *DeploymentState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Status != that.Status {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.LastUpdateTimestamp).EqualVT((*timestamppb1.Timestamp)(that.LastUpdateTimestamp)) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *DeploymentState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*DeploymentState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CommitAnalysis) EqualVT(that *CommitAnalysis) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.CommitsAdded != that.CommitsAdded {
		return false
	}
	if this.CommitsRemoved != that.CommitsRemoved {
		return false
	}
	if !this.ImpactAnalysis.EqualVT(that.ImpactAnalysis) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CommitAnalysis) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CommitAnalysis)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ImpactAnalysisComparison) EqualVT(that *ImpactAnalysisComparison) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.RelevantAddedCommits) != len(that.RelevantAddedCommits) {
		return false
	}
	for i, vx := range this.RelevantAddedCommits {
		vy := that.RelevantAddedCommits[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &repo.Commit{}
			}
			if q == nil {
				q = &repo.Commit{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if this.UnanalyzedCommits != that.UnanalyzedCommits {
		return false
	}
	if len(this.RelevantRemovedCommits) != len(that.RelevantRemovedCommits) {
		return false
	}
	for i, vx := range this.RelevantRemovedCommits {
		vy := that.RelevantRemovedCommits[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &repo.Commit{}
			}
			if q == nil {
				q = &repo.Commit{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ImpactAnalysisComparison) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ImpactAnalysisComparison)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *DeploymentComparison) EqualVT(that *DeploymentComparison) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Prev.EqualVT(that.Prev) {
		return false
	}
	if this.PrevRepository != that.PrevRepository {
		return false
	}
	if this.NewRepository != that.NewRepository {
		return false
	}
	if this.PrevCommitId != that.PrevCommitId {
		return false
	}
	if this.NewCommitId != that.NewCommitId {
		return false
	}
	if this.PrevServiceId != that.PrevServiceId {
		return false
	}
	if this.PrevReleaseChannelId != that.PrevReleaseChannelId {
		return false
	}
	if this.PrevServiceVersion != that.PrevServiceVersion {
		return false
	}
	if this.NewServiceId != that.NewServiceId {
		return false
	}
	if this.NewReleaseChannelId != that.NewReleaseChannelId {
		return false
	}
	if this.NewServiceVersion != that.NewServiceVersion {
		return false
	}
	if !this.CommitAnalysis.EqualVT(that.CommitAnalysis) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *DeploymentComparison) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*DeploymentComparison)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Deployment) EqualVT(that *Deployment) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Meta.EqualVT(that.Meta) {
		return false
	}
	if !this.Config.EqualVT(that.Config) {
		return false
	}
	if !this.Comparison.EqualVT(that.Comparison) {
		return false
	}
	if !this.State.EqualVT(that.State) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Deployment) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Deployment)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
