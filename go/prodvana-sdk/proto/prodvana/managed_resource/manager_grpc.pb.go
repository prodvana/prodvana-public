// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.10
// source: prodvana/managed_resource/manager.proto

package managed_resource

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ResourceManager_ConfigureK8SCluster_FullMethodName   = "/prodvana.managed_resource.ResourceManager/ConfigureK8sCluster"
	ResourceManager_GetManagedResource_FullMethodName    = "/prodvana.managed_resource.ResourceManager/GetManagedResource"
	ResourceManager_ListManagedResources_FullMethodName  = "/prodvana.managed_resource.ResourceManager/ListManagedResources"
	ResourceManager_GetArchive_FullMethodName            = "/prodvana.managed_resource.ResourceManager/GetArchive"
	ResourceManager_DeleteManagedResource_FullMethodName = "/prodvana.managed_resource.ResourceManager/DeleteManagedResource"
	ResourceManager_MarkRunDone_FullMethodName           = "/prodvana.managed_resource.ResourceManager/MarkRunDone"
)

// ResourceManagerClient is the client API for ResourceManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourceManagerClient interface {
	ConfigureK8SCluster(ctx context.Context, in *ConfigureK8SClusterReq, opts ...grpc.CallOption) (*ConfigureK8SClusterResp, error)
	GetManagedResource(ctx context.Context, in *GetManagedResourceReq, opts ...grpc.CallOption) (*GetManagedResourceResp, error)
	ListManagedResources(ctx context.Context, in *ListManagedResourcesReq, opts ...grpc.CallOption) (*ListManagedResourcesResp, error)
	GetArchive(ctx context.Context, in *GetArchiveReq, opts ...grpc.CallOption) (ResourceManager_GetArchiveClient, error)
	DeleteManagedResource(ctx context.Context, in *DeleteManagedResourceReq, opts ...grpc.CallOption) (*DeleteManagedResourceResp, error)
	// TODO(naphat) delete this endpoint once we automate pulumi runs
	MarkRunDone(ctx context.Context, in *MarkRunDoneReq, opts ...grpc.CallOption) (*MarkRunDoneResp, error)
}

type resourceManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceManagerClient(cc grpc.ClientConnInterface) ResourceManagerClient {
	return &resourceManagerClient{cc}
}

func (c *resourceManagerClient) ConfigureK8SCluster(ctx context.Context, in *ConfigureK8SClusterReq, opts ...grpc.CallOption) (*ConfigureK8SClusterResp, error) {
	out := new(ConfigureK8SClusterResp)
	err := c.cc.Invoke(ctx, ResourceManager_ConfigureK8SCluster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) GetManagedResource(ctx context.Context, in *GetManagedResourceReq, opts ...grpc.CallOption) (*GetManagedResourceResp, error) {
	out := new(GetManagedResourceResp)
	err := c.cc.Invoke(ctx, ResourceManager_GetManagedResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) ListManagedResources(ctx context.Context, in *ListManagedResourcesReq, opts ...grpc.CallOption) (*ListManagedResourcesResp, error) {
	out := new(ListManagedResourcesResp)
	err := c.cc.Invoke(ctx, ResourceManager_ListManagedResources_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) GetArchive(ctx context.Context, in *GetArchiveReq, opts ...grpc.CallOption) (ResourceManager_GetArchiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &ResourceManager_ServiceDesc.Streams[0], ResourceManager_GetArchive_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &resourceManagerGetArchiveClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ResourceManager_GetArchiveClient interface {
	Recv() (*GetArchiveResp, error)
	grpc.ClientStream
}

type resourceManagerGetArchiveClient struct {
	grpc.ClientStream
}

func (x *resourceManagerGetArchiveClient) Recv() (*GetArchiveResp, error) {
	m := new(GetArchiveResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *resourceManagerClient) DeleteManagedResource(ctx context.Context, in *DeleteManagedResourceReq, opts ...grpc.CallOption) (*DeleteManagedResourceResp, error) {
	out := new(DeleteManagedResourceResp)
	err := c.cc.Invoke(ctx, ResourceManager_DeleteManagedResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) MarkRunDone(ctx context.Context, in *MarkRunDoneReq, opts ...grpc.CallOption) (*MarkRunDoneResp, error) {
	out := new(MarkRunDoneResp)
	err := c.cc.Invoke(ctx, ResourceManager_MarkRunDone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceManagerServer is the server API for ResourceManager service.
// All implementations must embed UnimplementedResourceManagerServer
// for forward compatibility
type ResourceManagerServer interface {
	ConfigureK8SCluster(context.Context, *ConfigureK8SClusterReq) (*ConfigureK8SClusterResp, error)
	GetManagedResource(context.Context, *GetManagedResourceReq) (*GetManagedResourceResp, error)
	ListManagedResources(context.Context, *ListManagedResourcesReq) (*ListManagedResourcesResp, error)
	GetArchive(*GetArchiveReq, ResourceManager_GetArchiveServer) error
	DeleteManagedResource(context.Context, *DeleteManagedResourceReq) (*DeleteManagedResourceResp, error)
	// TODO(naphat) delete this endpoint once we automate pulumi runs
	MarkRunDone(context.Context, *MarkRunDoneReq) (*MarkRunDoneResp, error)
	mustEmbedUnimplementedResourceManagerServer()
}

// UnimplementedResourceManagerServer must be embedded to have forward compatible implementations.
type UnimplementedResourceManagerServer struct {
}

func (UnimplementedResourceManagerServer) ConfigureK8SCluster(context.Context, *ConfigureK8SClusterReq) (*ConfigureK8SClusterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureK8SCluster not implemented")
}
func (UnimplementedResourceManagerServer) GetManagedResource(context.Context, *GetManagedResourceReq) (*GetManagedResourceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetManagedResource not implemented")
}
func (UnimplementedResourceManagerServer) ListManagedResources(context.Context, *ListManagedResourcesReq) (*ListManagedResourcesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListManagedResources not implemented")
}
func (UnimplementedResourceManagerServer) GetArchive(*GetArchiveReq, ResourceManager_GetArchiveServer) error {
	return status.Errorf(codes.Unimplemented, "method GetArchive not implemented")
}
func (UnimplementedResourceManagerServer) DeleteManagedResource(context.Context, *DeleteManagedResourceReq) (*DeleteManagedResourceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteManagedResource not implemented")
}
func (UnimplementedResourceManagerServer) MarkRunDone(context.Context, *MarkRunDoneReq) (*MarkRunDoneResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkRunDone not implemented")
}
func (UnimplementedResourceManagerServer) mustEmbedUnimplementedResourceManagerServer() {}

// UnsafeResourceManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourceManagerServer will
// result in compilation errors.
type UnsafeResourceManagerServer interface {
	mustEmbedUnimplementedResourceManagerServer()
}

func RegisterResourceManagerServer(s grpc.ServiceRegistrar, srv ResourceManagerServer) {
	s.RegisterService(&ResourceManager_ServiceDesc, srv)
}

func _ResourceManager_ConfigureK8SCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureK8SClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).ConfigureK8SCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceManager_ConfigureK8SCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).ConfigureK8SCluster(ctx, req.(*ConfigureK8SClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_GetManagedResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetManagedResourceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).GetManagedResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceManager_GetManagedResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).GetManagedResource(ctx, req.(*GetManagedResourceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_ListManagedResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListManagedResourcesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).ListManagedResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceManager_ListManagedResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).ListManagedResources(ctx, req.(*ListManagedResourcesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_GetArchive_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetArchiveReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ResourceManagerServer).GetArchive(m, &resourceManagerGetArchiveServer{stream})
}

type ResourceManager_GetArchiveServer interface {
	Send(*GetArchiveResp) error
	grpc.ServerStream
}

type resourceManagerGetArchiveServer struct {
	grpc.ServerStream
}

func (x *resourceManagerGetArchiveServer) Send(m *GetArchiveResp) error {
	return x.ServerStream.SendMsg(m)
}

func _ResourceManager_DeleteManagedResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteManagedResourceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).DeleteManagedResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceManager_DeleteManagedResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).DeleteManagedResource(ctx, req.(*DeleteManagedResourceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_MarkRunDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkRunDoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).MarkRunDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceManager_MarkRunDone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).MarkRunDone(ctx, req.(*MarkRunDoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ResourceManager_ServiceDesc is the grpc.ServiceDesc for ResourceManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResourceManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "prodvana.managed_resource.ResourceManager",
	HandlerType: (*ResourceManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConfigureK8sCluster",
			Handler:    _ResourceManager_ConfigureK8SCluster_Handler,
		},
		{
			MethodName: "GetManagedResource",
			Handler:    _ResourceManager_GetManagedResource_Handler,
		},
		{
			MethodName: "ListManagedResources",
			Handler:    _ResourceManager_ListManagedResources_Handler,
		},
		{
			MethodName: "DeleteManagedResource",
			Handler:    _ResourceManager_DeleteManagedResource_Handler,
		},
		{
			MethodName: "MarkRunDone",
			Handler:    _ResourceManager_MarkRunDone_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetArchive",
			Handler:       _ResourceManager_GetArchive_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "prodvana/managed_resource/manager.proto",
}
