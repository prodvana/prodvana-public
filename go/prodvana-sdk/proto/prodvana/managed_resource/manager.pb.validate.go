// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: prodvana/managed_resource/manager.proto

package managed_resource

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ConfigureK8SClusterReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfigureK8SClusterReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigureK8SClusterReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfigureK8SClusterReqMultiError, or nil if none found.
func (m *ConfigureK8SClusterReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigureK8SClusterReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for InstanceType

	// no validation rules for NodeCountPerZone

	// no validation rules for Region

	switch v := m.CloudProviderOneof.(type) {
	case *ConfigureK8SClusterReq_GcpOptions_:
		if v == nil {
			err := ConfigureK8SClusterReqValidationError{
				field:  "CloudProviderOneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetGcpOptions()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConfigureK8SClusterReqValidationError{
						field:  "GcpOptions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConfigureK8SClusterReqValidationError{
						field:  "GcpOptions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGcpOptions()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConfigureK8SClusterReqValidationError{
					field:  "GcpOptions",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ConfigureK8SClusterReq_EksOptions:
		if v == nil {
			err := ConfigureK8SClusterReqValidationError{
				field:  "CloudProviderOneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetEksOptions()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConfigureK8SClusterReqValidationError{
						field:  "EksOptions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConfigureK8SClusterReqValidationError{
						field:  "EksOptions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEksOptions()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConfigureK8SClusterReqValidationError{
					field:  "EksOptions",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ConfigureK8SClusterReqMultiError(errors)
	}

	return nil
}

// ConfigureK8SClusterReqMultiError is an error wrapping multiple validation
// errors returned by ConfigureK8SClusterReq.ValidateAll() if the designated
// constraints aren't met.
type ConfigureK8SClusterReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigureK8SClusterReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigureK8SClusterReqMultiError) AllErrors() []error { return m }

// ConfigureK8SClusterReqValidationError is the validation error returned by
// ConfigureK8SClusterReq.Validate if the designated constraints aren't met.
type ConfigureK8SClusterReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigureK8SClusterReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigureK8SClusterReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigureK8SClusterReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigureK8SClusterReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigureK8SClusterReqValidationError) ErrorName() string {
	return "ConfigureK8SClusterReqValidationError"
}

// Error satisfies the builtin error interface
func (e ConfigureK8SClusterReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigureK8SClusterReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigureK8SClusterReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigureK8SClusterReqValidationError{}

// Validate checks the field values on ConfigureK8SClusterResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfigureK8SClusterResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigureK8SClusterResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfigureK8SClusterRespMultiError, or nil if none found.
func (m *ConfigureK8SClusterResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigureK8SClusterResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetRunId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfigureK8SClusterRespValidationError{
					field:  "RunId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfigureK8SClusterRespValidationError{
					field:  "RunId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRunId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfigureK8SClusterRespValidationError{
				field:  "RunId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Version

	// no validation rules for ArchiveUrl

	if len(errors) > 0 {
		return ConfigureK8SClusterRespMultiError(errors)
	}

	return nil
}

// ConfigureK8SClusterRespMultiError is an error wrapping multiple validation
// errors returned by ConfigureK8SClusterResp.ValidateAll() if the designated
// constraints aren't met.
type ConfigureK8SClusterRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigureK8SClusterRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigureK8SClusterRespMultiError) AllErrors() []error { return m }

// ConfigureK8SClusterRespValidationError is the validation error returned by
// ConfigureK8SClusterResp.Validate if the designated constraints aren't met.
type ConfigureK8SClusterRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigureK8SClusterRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigureK8SClusterRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigureK8SClusterRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigureK8SClusterRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigureK8SClusterRespValidationError) ErrorName() string {
	return "ConfigureK8SClusterRespValidationError"
}

// Error satisfies the builtin error interface
func (e ConfigureK8SClusterRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigureK8SClusterResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigureK8SClusterRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigureK8SClusterRespValidationError{}

// Validate checks the field values on ManagedResource with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ManagedResource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ManagedResource with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ManagedResourceMultiError, or nil if none found.
func (m *ManagedResource) ValidateAll() error {
	return m.validate(true)
}

func (m *ManagedResource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetLatestRun()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ManagedResourceValidationError{
					field:  "LatestRun",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ManagedResourceValidationError{
					field:  "LatestRun",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLatestRun()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ManagedResourceValidationError{
				field:  "LatestRun",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ManagedResourceMultiError(errors)
	}

	return nil
}

// ManagedResourceMultiError is an error wrapping multiple validation errors
// returned by ManagedResource.ValidateAll() if the designated constraints
// aren't met.
type ManagedResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ManagedResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ManagedResourceMultiError) AllErrors() []error { return m }

// ManagedResourceValidationError is the validation error returned by
// ManagedResource.Validate if the designated constraints aren't met.
type ManagedResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ManagedResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ManagedResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ManagedResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ManagedResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ManagedResourceValidationError) ErrorName() string { return "ManagedResourceValidationError" }

// Error satisfies the builtin error interface
func (e ManagedResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sManagedResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ManagedResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ManagedResourceValidationError{}

// Validate checks the field values on GetManagedResourceReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetManagedResourceReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetManagedResourceReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetManagedResourceReqMultiError, or nil if none found.
func (m *GetManagedResourceReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetManagedResourceReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ManagedResource

	if len(errors) > 0 {
		return GetManagedResourceReqMultiError(errors)
	}

	return nil
}

// GetManagedResourceReqMultiError is an error wrapping multiple validation
// errors returned by GetManagedResourceReq.ValidateAll() if the designated
// constraints aren't met.
type GetManagedResourceReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetManagedResourceReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetManagedResourceReqMultiError) AllErrors() []error { return m }

// GetManagedResourceReqValidationError is the validation error returned by
// GetManagedResourceReq.Validate if the designated constraints aren't met.
type GetManagedResourceReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetManagedResourceReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetManagedResourceReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetManagedResourceReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetManagedResourceReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetManagedResourceReqValidationError) ErrorName() string {
	return "GetManagedResourceReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetManagedResourceReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetManagedResourceReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetManagedResourceReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetManagedResourceReqValidationError{}

// Validate checks the field values on GetManagedResourceResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetManagedResourceResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetManagedResourceResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetManagedResourceRespMultiError, or nil if none found.
func (m *GetManagedResourceResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetManagedResourceResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetManagedResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetManagedResourceRespValidationError{
					field:  "ManagedResource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetManagedResourceRespValidationError{
					field:  "ManagedResource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetManagedResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetManagedResourceRespValidationError{
				field:  "ManagedResource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetManagedResourceRespMultiError(errors)
	}

	return nil
}

// GetManagedResourceRespMultiError is an error wrapping multiple validation
// errors returned by GetManagedResourceResp.ValidateAll() if the designated
// constraints aren't met.
type GetManagedResourceRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetManagedResourceRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetManagedResourceRespMultiError) AllErrors() []error { return m }

// GetManagedResourceRespValidationError is the validation error returned by
// GetManagedResourceResp.Validate if the designated constraints aren't met.
type GetManagedResourceRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetManagedResourceRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetManagedResourceRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetManagedResourceRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetManagedResourceRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetManagedResourceRespValidationError) ErrorName() string {
	return "GetManagedResourceRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetManagedResourceRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetManagedResourceResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetManagedResourceRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetManagedResourceRespValidationError{}

// Validate checks the field values on ListManagedResourcesReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListManagedResourcesReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListManagedResourcesReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListManagedResourcesReqMultiError, or nil if none found.
func (m *ListManagedResourcesReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListManagedResourcesReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListManagedResourcesReqMultiError(errors)
	}

	return nil
}

// ListManagedResourcesReqMultiError is an error wrapping multiple validation
// errors returned by ListManagedResourcesReq.ValidateAll() if the designated
// constraints aren't met.
type ListManagedResourcesReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListManagedResourcesReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListManagedResourcesReqMultiError) AllErrors() []error { return m }

// ListManagedResourcesReqValidationError is the validation error returned by
// ListManagedResourcesReq.Validate if the designated constraints aren't met.
type ListManagedResourcesReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListManagedResourcesReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListManagedResourcesReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListManagedResourcesReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListManagedResourcesReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListManagedResourcesReqValidationError) ErrorName() string {
	return "ListManagedResourcesReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListManagedResourcesReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListManagedResourcesReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListManagedResourcesReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListManagedResourcesReqValidationError{}

// Validate checks the field values on ListManagedResourcesResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListManagedResourcesResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListManagedResourcesResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListManagedResourcesRespMultiError, or nil if none found.
func (m *ListManagedResourcesResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListManagedResourcesResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetManagedResources() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListManagedResourcesRespValidationError{
						field:  fmt.Sprintf("ManagedResources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListManagedResourcesRespValidationError{
						field:  fmt.Sprintf("ManagedResources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListManagedResourcesRespValidationError{
					field:  fmt.Sprintf("ManagedResources[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListManagedResourcesRespMultiError(errors)
	}

	return nil
}

// ListManagedResourcesRespMultiError is an error wrapping multiple validation
// errors returned by ListManagedResourcesResp.ValidateAll() if the designated
// constraints aren't met.
type ListManagedResourcesRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListManagedResourcesRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListManagedResourcesRespMultiError) AllErrors() []error { return m }

// ListManagedResourcesRespValidationError is the validation error returned by
// ListManagedResourcesResp.Validate if the designated constraints aren't met.
type ListManagedResourcesRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListManagedResourcesRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListManagedResourcesRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListManagedResourcesRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListManagedResourcesRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListManagedResourcesRespValidationError) ErrorName() string {
	return "ListManagedResourcesRespValidationError"
}

// Error satisfies the builtin error interface
func (e ListManagedResourcesRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListManagedResourcesResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListManagedResourcesRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListManagedResourcesRespValidationError{}

// Validate checks the field values on GetArchiveReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetArchiveReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArchiveReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetArchiveReqMultiError, or
// nil if none found.
func (m *GetArchiveReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArchiveReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ManagedResource

	// no validation rules for Version

	if len(errors) > 0 {
		return GetArchiveReqMultiError(errors)
	}

	return nil
}

// GetArchiveReqMultiError is an error wrapping multiple validation errors
// returned by GetArchiveReq.ValidateAll() if the designated constraints
// aren't met.
type GetArchiveReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArchiveReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArchiveReqMultiError) AllErrors() []error { return m }

// GetArchiveReqValidationError is the validation error returned by
// GetArchiveReq.Validate if the designated constraints aren't met.
type GetArchiveReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArchiveReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArchiveReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArchiveReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArchiveReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArchiveReqValidationError) ErrorName() string { return "GetArchiveReqValidationError" }

// Error satisfies the builtin error interface
func (e GetArchiveReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArchiveReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArchiveReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArchiveReqValidationError{}

// Validate checks the field values on GetArchiveResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetArchiveResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArchiveResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetArchiveRespMultiError,
// or nil if none found.
func (m *GetArchiveResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArchiveResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Bytes

	if len(errors) > 0 {
		return GetArchiveRespMultiError(errors)
	}

	return nil
}

// GetArchiveRespMultiError is an error wrapping multiple validation errors
// returned by GetArchiveResp.ValidateAll() if the designated constraints
// aren't met.
type GetArchiveRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArchiveRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArchiveRespMultiError) AllErrors() []error { return m }

// GetArchiveRespValidationError is the validation error returned by
// GetArchiveResp.Validate if the designated constraints aren't met.
type GetArchiveRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArchiveRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArchiveRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArchiveRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArchiveRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArchiveRespValidationError) ErrorName() string { return "GetArchiveRespValidationError" }

// Error satisfies the builtin error interface
func (e GetArchiveRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArchiveResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArchiveRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArchiveRespValidationError{}

// Validate checks the field values on MarkRunDoneReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MarkRunDoneReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MarkRunDoneReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MarkRunDoneReqMultiError,
// or nil if none found.
func (m *MarkRunDoneReq) ValidateAll() error {
	return m.validate(true)
}

func (m *MarkRunDoneReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ManagedResource

	if all {
		switch v := interface{}(m.GetRunId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MarkRunDoneReqValidationError{
					field:  "RunId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MarkRunDoneReqValidationError{
					field:  "RunId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRunId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MarkRunDoneReqValidationError{
				field:  "RunId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Succeeded

	// no validation rules for Msg

	if len(errors) > 0 {
		return MarkRunDoneReqMultiError(errors)
	}

	return nil
}

// MarkRunDoneReqMultiError is an error wrapping multiple validation errors
// returned by MarkRunDoneReq.ValidateAll() if the designated constraints
// aren't met.
type MarkRunDoneReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MarkRunDoneReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MarkRunDoneReqMultiError) AllErrors() []error { return m }

// MarkRunDoneReqValidationError is the validation error returned by
// MarkRunDoneReq.Validate if the designated constraints aren't met.
type MarkRunDoneReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MarkRunDoneReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MarkRunDoneReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MarkRunDoneReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MarkRunDoneReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MarkRunDoneReqValidationError) ErrorName() string { return "MarkRunDoneReqValidationError" }

// Error satisfies the builtin error interface
func (e MarkRunDoneReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMarkRunDoneReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MarkRunDoneReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MarkRunDoneReqValidationError{}

// Validate checks the field values on MarkRunDoneResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MarkRunDoneResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MarkRunDoneResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MarkRunDoneRespMultiError, or nil if none found.
func (m *MarkRunDoneResp) ValidateAll() error {
	return m.validate(true)
}

func (m *MarkRunDoneResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MarkRunDoneRespMultiError(errors)
	}

	return nil
}

// MarkRunDoneRespMultiError is an error wrapping multiple validation errors
// returned by MarkRunDoneResp.ValidateAll() if the designated constraints
// aren't met.
type MarkRunDoneRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MarkRunDoneRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MarkRunDoneRespMultiError) AllErrors() []error { return m }

// MarkRunDoneRespValidationError is the validation error returned by
// MarkRunDoneResp.Validate if the designated constraints aren't met.
type MarkRunDoneRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MarkRunDoneRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MarkRunDoneRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MarkRunDoneRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MarkRunDoneRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MarkRunDoneRespValidationError) ErrorName() string { return "MarkRunDoneRespValidationError" }

// Error satisfies the builtin error interface
func (e MarkRunDoneRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMarkRunDoneResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MarkRunDoneRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MarkRunDoneRespValidationError{}

// Validate checks the field values on DeleteManagedResourceReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteManagedResourceReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteManagedResourceReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteManagedResourceReqMultiError, or nil if none found.
func (m *DeleteManagedResourceReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteManagedResourceReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ManagedResource

	if len(errors) > 0 {
		return DeleteManagedResourceReqMultiError(errors)
	}

	return nil
}

// DeleteManagedResourceReqMultiError is an error wrapping multiple validation
// errors returned by DeleteManagedResourceReq.ValidateAll() if the designated
// constraints aren't met.
type DeleteManagedResourceReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteManagedResourceReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteManagedResourceReqMultiError) AllErrors() []error { return m }

// DeleteManagedResourceReqValidationError is the validation error returned by
// DeleteManagedResourceReq.Validate if the designated constraints aren't met.
type DeleteManagedResourceReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteManagedResourceReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteManagedResourceReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteManagedResourceReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteManagedResourceReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteManagedResourceReqValidationError) ErrorName() string {
	return "DeleteManagedResourceReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteManagedResourceReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteManagedResourceReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteManagedResourceReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteManagedResourceReqValidationError{}

// Validate checks the field values on DeleteManagedResourceResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteManagedResourceResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteManagedResourceResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteManagedResourceRespMultiError, or nil if none found.
func (m *DeleteManagedResourceResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteManagedResourceResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetRunId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteManagedResourceRespValidationError{
					field:  "RunId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteManagedResourceRespValidationError{
					field:  "RunId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRunId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteManagedResourceRespValidationError{
				field:  "RunId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteManagedResourceRespMultiError(errors)
	}

	return nil
}

// DeleteManagedResourceRespMultiError is an error wrapping multiple validation
// errors returned by DeleteManagedResourceResp.ValidateAll() if the
// designated constraints aren't met.
type DeleteManagedResourceRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteManagedResourceRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteManagedResourceRespMultiError) AllErrors() []error { return m }

// DeleteManagedResourceRespValidationError is the validation error returned by
// DeleteManagedResourceResp.Validate if the designated constraints aren't met.
type DeleteManagedResourceRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteManagedResourceRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteManagedResourceRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteManagedResourceRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteManagedResourceRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteManagedResourceRespValidationError) ErrorName() string {
	return "DeleteManagedResourceRespValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteManagedResourceRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteManagedResourceResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteManagedResourceRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteManagedResourceRespValidationError{}

// Validate checks the field values on ConfigureK8SClusterReq_GcpOptions with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ConfigureK8SClusterReq_GcpOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigureK8SClusterReq_GcpOptions
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ConfigureK8SClusterReq_GcpOptionsMultiError, or nil if none found.
func (m *ConfigureK8SClusterReq_GcpOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigureK8SClusterReq_GcpOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Project

	// no validation rules for Credentials

	if len(errors) > 0 {
		return ConfigureK8SClusterReq_GcpOptionsMultiError(errors)
	}

	return nil
}

// ConfigureK8SClusterReq_GcpOptionsMultiError is an error wrapping multiple
// validation errors returned by
// ConfigureK8SClusterReq_GcpOptions.ValidateAll() if the designated
// constraints aren't met.
type ConfigureK8SClusterReq_GcpOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigureK8SClusterReq_GcpOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigureK8SClusterReq_GcpOptionsMultiError) AllErrors() []error { return m }

// ConfigureK8SClusterReq_GcpOptionsValidationError is the validation error
// returned by ConfigureK8SClusterReq_GcpOptions.Validate if the designated
// constraints aren't met.
type ConfigureK8SClusterReq_GcpOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigureK8SClusterReq_GcpOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigureK8SClusterReq_GcpOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigureK8SClusterReq_GcpOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigureK8SClusterReq_GcpOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigureK8SClusterReq_GcpOptionsValidationError) ErrorName() string {
	return "ConfigureK8SClusterReq_GcpOptionsValidationError"
}

// Error satisfies the builtin error interface
func (e ConfigureK8SClusterReq_GcpOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigureK8SClusterReq_GcpOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigureK8SClusterReq_GcpOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigureK8SClusterReq_GcpOptionsValidationError{}

// Validate checks the field values on ConfigureK8SClusterReq_EKSOptions with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ConfigureK8SClusterReq_EKSOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigureK8SClusterReq_EKSOptions
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ConfigureK8SClusterReq_EKSOptionsMultiError, or nil if none found.
func (m *ConfigureK8SClusterReq_EKSOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigureK8SClusterReq_EKSOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessKey

	// no validation rules for SecretKey

	// no validation rules for AccountId

	// no validation rules for RoleArn

	if len(errors) > 0 {
		return ConfigureK8SClusterReq_EKSOptionsMultiError(errors)
	}

	return nil
}

// ConfigureK8SClusterReq_EKSOptionsMultiError is an error wrapping multiple
// validation errors returned by
// ConfigureK8SClusterReq_EKSOptions.ValidateAll() if the designated
// constraints aren't met.
type ConfigureK8SClusterReq_EKSOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigureK8SClusterReq_EKSOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigureK8SClusterReq_EKSOptionsMultiError) AllErrors() []error { return m }

// ConfigureK8SClusterReq_EKSOptionsValidationError is the validation error
// returned by ConfigureK8SClusterReq_EKSOptions.Validate if the designated
// constraints aren't met.
type ConfigureK8SClusterReq_EKSOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigureK8SClusterReq_EKSOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigureK8SClusterReq_EKSOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigureK8SClusterReq_EKSOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigureK8SClusterReq_EKSOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigureK8SClusterReq_EKSOptionsValidationError) ErrorName() string {
	return "ConfigureK8SClusterReq_EKSOptionsValidationError"
}

// Error satisfies the builtin error interface
func (e ConfigureK8SClusterReq_EKSOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigureK8SClusterReq_EKSOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigureK8SClusterReq_EKSOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigureK8SClusterReq_EKSOptionsValidationError{}

// Validate checks the field values on ManagedResource_Run with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ManagedResource_Run) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ManagedResource_Run with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ManagedResource_RunMultiError, or nil if none found.
func (m *ManagedResource_Run) ValidateAll() error {
	return m.validate(true)
}

func (m *ManagedResource_Run) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	// no validation rules for State

	// no validation rules for Terminal

	if all {
		switch v := interface{}(m.GetCreationTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ManagedResource_RunValidationError{
					field:  "CreationTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ManagedResource_RunValidationError{
					field:  "CreationTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreationTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ManagedResource_RunValidationError{
				field:  "CreationTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLastUpdateTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ManagedResource_RunValidationError{
					field:  "LastUpdateTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ManagedResource_RunValidationError{
					field:  "LastUpdateTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastUpdateTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ManagedResource_RunValidationError{
				field:  "LastUpdateTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Message

	if len(errors) > 0 {
		return ManagedResource_RunMultiError(errors)
	}

	return nil
}

// ManagedResource_RunMultiError is an error wrapping multiple validation
// errors returned by ManagedResource_Run.ValidateAll() if the designated
// constraints aren't met.
type ManagedResource_RunMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ManagedResource_RunMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ManagedResource_RunMultiError) AllErrors() []error { return m }

// ManagedResource_RunValidationError is the validation error returned by
// ManagedResource_Run.Validate if the designated constraints aren't met.
type ManagedResource_RunValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ManagedResource_RunValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ManagedResource_RunValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ManagedResource_RunValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ManagedResource_RunValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ManagedResource_RunValidationError) ErrorName() string {
	return "ManagedResource_RunValidationError"
}

// Error satisfies the builtin error interface
func (e ManagedResource_RunValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sManagedResource_Run.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ManagedResource_RunValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ManagedResource_RunValidationError{}
