// Code generated by protoc-gen-go-vtproto. DO NOT EDIT.
// protoc-gen-go-vtproto version: v0.6.0
// source: prodvana/managed_resource/manager.proto

package managed_resource

import (
	timestamppb1 "github.com/planetscale/vtprotobuf/types/known/timestamppb"
	proto "google.golang.org/protobuf/proto"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

func (m *ConfigureK8SClusterReq_GcpOptions) CloneVT() *ConfigureK8SClusterReq_GcpOptions {
	if m == nil {
		return (*ConfigureK8SClusterReq_GcpOptions)(nil)
	}
	r := new(ConfigureK8SClusterReq_GcpOptions)
	r.Project = m.Project
	r.Credentials = m.Credentials
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ConfigureK8SClusterReq_GcpOptions) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ConfigureK8SClusterReq_EKSOptions) CloneVT() *ConfigureK8SClusterReq_EKSOptions {
	if m == nil {
		return (*ConfigureK8SClusterReq_EKSOptions)(nil)
	}
	r := new(ConfigureK8SClusterReq_EKSOptions)
	r.AccessKey = m.AccessKey
	r.SecretKey = m.SecretKey
	r.AccountId = m.AccountId
	r.RoleArn = m.RoleArn
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ConfigureK8SClusterReq_EKSOptions) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ConfigureK8SClusterReq) CloneVT() *ConfigureK8SClusterReq {
	if m == nil {
		return (*ConfigureK8SClusterReq)(nil)
	}
	r := new(ConfigureK8SClusterReq)
	r.Name = m.Name
	r.InstanceType = m.InstanceType
	r.NodeCountPerZone = m.NodeCountPerZone
	r.Region = m.Region
	if m.CloudProviderOneof != nil {
		r.CloudProviderOneof = m.CloudProviderOneof.(interface {
			CloneVT() isConfigureK8SClusterReq_CloudProviderOneof
		}).CloneVT()
	}
	if rhs := m.NodepoolZones; rhs != nil {
		tmpContainer := make([]string, len(rhs))
		copy(tmpContainer, rhs)
		r.NodepoolZones = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ConfigureK8SClusterReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ConfigureK8SClusterReq_GcpOptions_) CloneVT() isConfigureK8SClusterReq_CloudProviderOneof {
	if m == nil {
		return (*ConfigureK8SClusterReq_GcpOptions_)(nil)
	}
	r := new(ConfigureK8SClusterReq_GcpOptions_)
	r.GcpOptions = m.GcpOptions.CloneVT()
	return r
}

func (m *ConfigureK8SClusterReq_EksOptions) CloneVT() isConfigureK8SClusterReq_CloudProviderOneof {
	if m == nil {
		return (*ConfigureK8SClusterReq_EksOptions)(nil)
	}
	r := new(ConfigureK8SClusterReq_EksOptions)
	r.EksOptions = m.EksOptions.CloneVT()
	return r
}

func (m *ConfigureK8SClusterResp) CloneVT() *ConfigureK8SClusterResp {
	if m == nil {
		return (*ConfigureK8SClusterResp)(nil)
	}
	r := new(ConfigureK8SClusterResp)
	r.Id = m.Id
	r.RunId = (*timestamppb.Timestamp)((*timestamppb1.Timestamp)(m.RunId).CloneVT())
	r.Version = m.Version
	r.ArchiveUrl = m.ArchiveUrl
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ConfigureK8SClusterResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ManagedResource_Run) CloneVT() *ManagedResource_Run {
	if m == nil {
		return (*ManagedResource_Run)(nil)
	}
	r := new(ManagedResource_Run)
	r.Version = m.Version
	r.State = m.State
	r.Terminal = m.Terminal
	r.CreationTimestamp = (*timestamppb.Timestamp)((*timestamppb1.Timestamp)(m.CreationTimestamp).CloneVT())
	r.LastUpdateTimestamp = (*timestamppb.Timestamp)((*timestamppb1.Timestamp)(m.LastUpdateTimestamp).CloneVT())
	r.Message = m.Message
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ManagedResource_Run) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ManagedResource) CloneVT() *ManagedResource {
	if m == nil {
		return (*ManagedResource)(nil)
	}
	r := new(ManagedResource)
	r.Id = m.Id
	r.Name = m.Name
	r.Type = m.Type
	r.LatestRun = m.LatestRun.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ManagedResource) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *GetManagedResourceReq) CloneVT() *GetManagedResourceReq {
	if m == nil {
		return (*GetManagedResourceReq)(nil)
	}
	r := new(GetManagedResourceReq)
	r.ManagedResource = m.ManagedResource
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *GetManagedResourceReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *GetManagedResourceResp) CloneVT() *GetManagedResourceResp {
	if m == nil {
		return (*GetManagedResourceResp)(nil)
	}
	r := new(GetManagedResourceResp)
	r.ManagedResource = m.ManagedResource.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *GetManagedResourceResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ListManagedResourcesReq) CloneVT() *ListManagedResourcesReq {
	if m == nil {
		return (*ListManagedResourcesReq)(nil)
	}
	r := new(ListManagedResourcesReq)
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ListManagedResourcesReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ListManagedResourcesResp) CloneVT() *ListManagedResourcesResp {
	if m == nil {
		return (*ListManagedResourcesResp)(nil)
	}
	r := new(ListManagedResourcesResp)
	if rhs := m.ManagedResources; rhs != nil {
		tmpContainer := make([]*ManagedResource, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.ManagedResources = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ListManagedResourcesResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *GetArchiveReq) CloneVT() *GetArchiveReq {
	if m == nil {
		return (*GetArchiveReq)(nil)
	}
	r := new(GetArchiveReq)
	r.ManagedResource = m.ManagedResource
	r.Version = m.Version
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *GetArchiveReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *GetArchiveResp) CloneVT() *GetArchiveResp {
	if m == nil {
		return (*GetArchiveResp)(nil)
	}
	r := new(GetArchiveResp)
	if rhs := m.Bytes; rhs != nil {
		tmpBytes := make([]byte, len(rhs))
		copy(tmpBytes, rhs)
		r.Bytes = tmpBytes
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *GetArchiveResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *MarkRunDoneReq) CloneVT() *MarkRunDoneReq {
	if m == nil {
		return (*MarkRunDoneReq)(nil)
	}
	r := new(MarkRunDoneReq)
	r.ManagedResource = m.ManagedResource
	r.RunId = (*timestamppb.Timestamp)((*timestamppb1.Timestamp)(m.RunId).CloneVT())
	r.Succeeded = m.Succeeded
	r.Msg = m.Msg
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *MarkRunDoneReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *MarkRunDoneResp) CloneVT() *MarkRunDoneResp {
	if m == nil {
		return (*MarkRunDoneResp)(nil)
	}
	r := new(MarkRunDoneResp)
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *MarkRunDoneResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *DeleteManagedResourceReq) CloneVT() *DeleteManagedResourceReq {
	if m == nil {
		return (*DeleteManagedResourceReq)(nil)
	}
	r := new(DeleteManagedResourceReq)
	r.ManagedResource = m.ManagedResource
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *DeleteManagedResourceReq) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *DeleteManagedResourceResp) CloneVT() *DeleteManagedResourceResp {
	if m == nil {
		return (*DeleteManagedResourceResp)(nil)
	}
	r := new(DeleteManagedResourceResp)
	r.Id = m.Id
	r.RunId = (*timestamppb.Timestamp)((*timestamppb1.Timestamp)(m.RunId).CloneVT())
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *DeleteManagedResourceResp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (this *ConfigureK8SClusterReq_GcpOptions) EqualVT(that *ConfigureK8SClusterReq_GcpOptions) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Project != that.Project {
		return false
	}
	if this.Credentials != that.Credentials {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ConfigureK8SClusterReq_GcpOptions) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ConfigureK8SClusterReq_GcpOptions)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ConfigureK8SClusterReq_EKSOptions) EqualVT(that *ConfigureK8SClusterReq_EKSOptions) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.AccessKey != that.AccessKey {
		return false
	}
	if this.SecretKey != that.SecretKey {
		return false
	}
	if this.AccountId != that.AccountId {
		return false
	}
	if this.RoleArn != that.RoleArn {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ConfigureK8SClusterReq_EKSOptions) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ConfigureK8SClusterReq_EKSOptions)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ConfigureK8SClusterReq) EqualVT(that *ConfigureK8SClusterReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.CloudProviderOneof == nil && that.CloudProviderOneof != nil {
		return false
	} else if this.CloudProviderOneof != nil {
		if that.CloudProviderOneof == nil {
			return false
		}
		if !this.CloudProviderOneof.(interface {
			EqualVT(isConfigureK8SClusterReq_CloudProviderOneof) bool
		}).EqualVT(that.CloudProviderOneof) {
			return false
		}
	}
	if this.Name != that.Name {
		return false
	}
	if this.InstanceType != that.InstanceType {
		return false
	}
	if len(this.NodepoolZones) != len(that.NodepoolZones) {
		return false
	}
	for i, vx := range this.NodepoolZones {
		vy := that.NodepoolZones[i]
		if vx != vy {
			return false
		}
	}
	if this.NodeCountPerZone != that.NodeCountPerZone {
		return false
	}
	if this.Region != that.Region {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ConfigureK8SClusterReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ConfigureK8SClusterReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ConfigureK8SClusterReq_GcpOptions_) EqualVT(thatIface isConfigureK8SClusterReq_CloudProviderOneof) bool {
	that, ok := thatIface.(*ConfigureK8SClusterReq_GcpOptions_)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.GcpOptions, that.GcpOptions; p != q {
		if p == nil {
			p = &ConfigureK8SClusterReq_GcpOptions{}
		}
		if q == nil {
			q = &ConfigureK8SClusterReq_GcpOptions{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ConfigureK8SClusterReq_EksOptions) EqualVT(thatIface isConfigureK8SClusterReq_CloudProviderOneof) bool {
	that, ok := thatIface.(*ConfigureK8SClusterReq_EksOptions)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.EksOptions, that.EksOptions; p != q {
		if p == nil {
			p = &ConfigureK8SClusterReq_EKSOptions{}
		}
		if q == nil {
			q = &ConfigureK8SClusterReq_EKSOptions{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ConfigureK8SClusterResp) EqualVT(that *ConfigureK8SClusterResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.RunId).EqualVT((*timestamppb1.Timestamp)(that.RunId)) {
		return false
	}
	if this.Version != that.Version {
		return false
	}
	if this.ArchiveUrl != that.ArchiveUrl {
		return false
	}
	if this.Id != that.Id {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ConfigureK8SClusterResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ConfigureK8SClusterResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ManagedResource_Run) EqualVT(that *ManagedResource_Run) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Version != that.Version {
		return false
	}
	if this.State != that.State {
		return false
	}
	if this.Terminal != that.Terminal {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.CreationTimestamp).EqualVT((*timestamppb1.Timestamp)(that.CreationTimestamp)) {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.LastUpdateTimestamp).EqualVT((*timestamppb1.Timestamp)(that.LastUpdateTimestamp)) {
		return false
	}
	if this.Message != that.Message {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ManagedResource_Run) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ManagedResource_Run)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ManagedResource) EqualVT(that *ManagedResource) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Id != that.Id {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	if this.Type != that.Type {
		return false
	}
	if !this.LatestRun.EqualVT(that.LatestRun) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ManagedResource) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ManagedResource)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *GetManagedResourceReq) EqualVT(that *GetManagedResourceReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.ManagedResource != that.ManagedResource {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetManagedResourceReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetManagedResourceReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *GetManagedResourceResp) EqualVT(that *GetManagedResourceResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.ManagedResource.EqualVT(that.ManagedResource) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetManagedResourceResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetManagedResourceResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ListManagedResourcesReq) EqualVT(that *ListManagedResourcesReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ListManagedResourcesReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ListManagedResourcesReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ListManagedResourcesResp) EqualVT(that *ListManagedResourcesResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.ManagedResources) != len(that.ManagedResources) {
		return false
	}
	for i, vx := range this.ManagedResources {
		vy := that.ManagedResources[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &ManagedResource{}
			}
			if q == nil {
				q = &ManagedResource{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ListManagedResourcesResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ListManagedResourcesResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *GetArchiveReq) EqualVT(that *GetArchiveReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.ManagedResource != that.ManagedResource {
		return false
	}
	if this.Version != that.Version {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetArchiveReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetArchiveReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *GetArchiveResp) EqualVT(that *GetArchiveResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if string(this.Bytes) != string(that.Bytes) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetArchiveResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*GetArchiveResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *MarkRunDoneReq) EqualVT(that *MarkRunDoneReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.ManagedResource != that.ManagedResource {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.RunId).EqualVT((*timestamppb1.Timestamp)(that.RunId)) {
		return false
	}
	if this.Succeeded != that.Succeeded {
		return false
	}
	if this.Msg != that.Msg {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *MarkRunDoneReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*MarkRunDoneReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *MarkRunDoneResp) EqualVT(that *MarkRunDoneResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *MarkRunDoneResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*MarkRunDoneResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *DeleteManagedResourceReq) EqualVT(that *DeleteManagedResourceReq) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.ManagedResource != that.ManagedResource {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *DeleteManagedResourceReq) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*DeleteManagedResourceReq)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *DeleteManagedResourceResp) EqualVT(that *DeleteManagedResourceResp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Id != that.Id {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.RunId).EqualVT((*timestamppb1.Timestamp)(that.RunId)) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *DeleteManagedResourceResp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*DeleteManagedResourceResp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
