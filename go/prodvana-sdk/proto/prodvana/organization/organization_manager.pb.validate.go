// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: prodvana/organization/organization_manager.proto

package organization

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	insights "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/insights"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = insights.Class(0)
)

// Validate checks the field values on OrganizationInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OrganizationInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrganizationInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrganizationInfoMultiError, or nil if none found.
func (m *OrganizationInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *OrganizationInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for DisplayName

	if all {
		switch v := interface{}(m.GetWritebackConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrganizationInfoValidationError{
					field:  "WritebackConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrganizationInfoValidationError{
					field:  "WritebackConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWritebackConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrganizationInfoValidationError{
				field:  "WritebackConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Slug

	if all {
		switch v := interface{}(m.GetUserMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrganizationInfoValidationError{
					field:  "UserMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrganizationInfoValidationError{
					field:  "UserMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrganizationInfoValidationError{
				field:  "UserMetadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OrganizationInfoMultiError(errors)
	}

	return nil
}

// OrganizationInfoMultiError is an error wrapping multiple validation errors
// returned by OrganizationInfo.ValidateAll() if the designated constraints
// aren't met.
type OrganizationInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrganizationInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrganizationInfoMultiError) AllErrors() []error { return m }

// OrganizationInfoValidationError is the validation error returned by
// OrganizationInfo.Validate if the designated constraints aren't met.
type OrganizationInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrganizationInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrganizationInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrganizationInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrganizationInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrganizationInfoValidationError) ErrorName() string { return "OrganizationInfoValidationError" }

// Error satisfies the builtin error interface
func (e OrganizationInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrganizationInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrganizationInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrganizationInfoValidationError{}

// Validate checks the field values on GetOrganizationReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrganizationReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrganizationReqMultiError, or nil if none found.
func (m *GetOrganizationReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetOrganizationReqMultiError(errors)
	}

	return nil
}

// GetOrganizationReqMultiError is an error wrapping multiple validation errors
// returned by GetOrganizationReq.ValidateAll() if the designated constraints
// aren't met.
type GetOrganizationReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationReqMultiError) AllErrors() []error { return m }

// GetOrganizationReqValidationError is the validation error returned by
// GetOrganizationReq.Validate if the designated constraints aren't met.
type GetOrganizationReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationReqValidationError) ErrorName() string {
	return "GetOrganizationReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationReqValidationError{}

// Validate checks the field values on GetOrganizationResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrganizationResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrganizationRespMultiError, or nil if none found.
func (m *GetOrganizationResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrganization()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrganizationRespValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrganizationRespValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrganization()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrganizationRespValidationError{
				field:  "Organization",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrganizationRespMultiError(errors)
	}

	return nil
}

// GetOrganizationRespMultiError is an error wrapping multiple validation
// errors returned by GetOrganizationResp.ValidateAll() if the designated
// constraints aren't met.
type GetOrganizationRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationRespMultiError) AllErrors() []error { return m }

// GetOrganizationRespValidationError is the validation error returned by
// GetOrganizationResp.Validate if the designated constraints aren't met.
type GetOrganizationRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationRespValidationError) ErrorName() string {
	return "GetOrganizationRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationRespValidationError{}

// Validate checks the field values on GetOrganizationMetricsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrganizationMetricsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationMetricsReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrganizationMetricsReqMultiError, or nil if none found.
func (m *GetOrganizationMetricsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationMetricsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStartTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrganizationMetricsReqValidationError{
					field:  "StartTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrganizationMetricsReqValidationError{
					field:  "StartTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrganizationMetricsReqValidationError{
				field:  "StartTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrganizationMetricsReqValidationError{
					field:  "EndTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrganizationMetricsReqValidationError{
					field:  "EndTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrganizationMetricsReqValidationError{
				field:  "EndTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrganizationMetricsReqMultiError(errors)
	}

	return nil
}

// GetOrganizationMetricsReqMultiError is an error wrapping multiple validation
// errors returned by GetOrganizationMetricsReq.ValidateAll() if the
// designated constraints aren't met.
type GetOrganizationMetricsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationMetricsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationMetricsReqMultiError) AllErrors() []error { return m }

// GetOrganizationMetricsReqValidationError is the validation error returned by
// GetOrganizationMetricsReq.Validate if the designated constraints aren't met.
type GetOrganizationMetricsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationMetricsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationMetricsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationMetricsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationMetricsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationMetricsReqValidationError) ErrorName() string {
	return "GetOrganizationMetricsReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationMetricsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationMetricsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationMetricsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationMetricsReqValidationError{}

// Validate checks the field values on GetOrganizationMetricsResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrganizationMetricsResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationMetricsResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrganizationMetricsRespMultiError, or nil if none found.
func (m *GetOrganizationMetricsResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationMetricsResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDeploymentMetrics()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrganizationMetricsRespValidationError{
					field:  "DeploymentMetrics",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrganizationMetricsRespValidationError{
					field:  "DeploymentMetrics",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeploymentMetrics()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrganizationMetricsRespValidationError{
				field:  "DeploymentMetrics",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrganizationMetricsRespMultiError(errors)
	}

	return nil
}

// GetOrganizationMetricsRespMultiError is an error wrapping multiple
// validation errors returned by GetOrganizationMetricsResp.ValidateAll() if
// the designated constraints aren't met.
type GetOrganizationMetricsRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationMetricsRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationMetricsRespMultiError) AllErrors() []error { return m }

// GetOrganizationMetricsRespValidationError is the validation error returned
// by GetOrganizationMetricsResp.Validate if the designated constraints aren't met.
type GetOrganizationMetricsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationMetricsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationMetricsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationMetricsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationMetricsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationMetricsRespValidationError) ErrorName() string {
	return "GetOrganizationMetricsRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationMetricsRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationMetricsResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationMetricsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationMetricsRespValidationError{}

// Validate checks the field values on GetOrganizationInsightsReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrganizationInsightsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationInsightsReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrganizationInsightsReqMultiError, or nil if none found.
func (m *GetOrganizationInsightsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationInsightsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetOrganizationInsightsReqMultiError(errors)
	}

	return nil
}

// GetOrganizationInsightsReqMultiError is an error wrapping multiple
// validation errors returned by GetOrganizationInsightsReq.ValidateAll() if
// the designated constraints aren't met.
type GetOrganizationInsightsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationInsightsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationInsightsReqMultiError) AllErrors() []error { return m }

// GetOrganizationInsightsReqValidationError is the validation error returned
// by GetOrganizationInsightsReq.Validate if the designated constraints aren't met.
type GetOrganizationInsightsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationInsightsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationInsightsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationInsightsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationInsightsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationInsightsReqValidationError) ErrorName() string {
	return "GetOrganizationInsightsReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationInsightsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationInsightsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationInsightsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationInsightsReqValidationError{}

// Validate checks the field values on GetOrganizationInsightsResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrganizationInsightsResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationInsightsResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrganizationInsightsRespMultiError, or nil if none found.
func (m *GetOrganizationInsightsResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationInsightsResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetInsights() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetOrganizationInsightsRespValidationError{
						field:  fmt.Sprintf("Insights[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetOrganizationInsightsRespValidationError{
						field:  fmt.Sprintf("Insights[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetOrganizationInsightsRespValidationError{
					field:  fmt.Sprintf("Insights[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetOrganizationInsightsRespMultiError(errors)
	}

	return nil
}

// GetOrganizationInsightsRespMultiError is an error wrapping multiple
// validation errors returned by GetOrganizationInsightsResp.ValidateAll() if
// the designated constraints aren't met.
type GetOrganizationInsightsRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationInsightsRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationInsightsRespMultiError) AllErrors() []error { return m }

// GetOrganizationInsightsRespValidationError is the validation error returned
// by GetOrganizationInsightsResp.Validate if the designated constraints
// aren't met.
type GetOrganizationInsightsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationInsightsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationInsightsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationInsightsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationInsightsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationInsightsRespValidationError) ErrorName() string {
	return "GetOrganizationInsightsRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationInsightsRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationInsightsResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationInsightsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationInsightsRespValidationError{}

// Validate checks the field values on SnoozeOrganizationInsightReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SnoozeOrganizationInsightReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SnoozeOrganizationInsightReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SnoozeOrganizationInsightReqMultiError, or nil if none found.
func (m *SnoozeOrganizationInsightReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SnoozeOrganizationInsightReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := insights.Class_name[int32(m.GetClass())]; !ok {
		err := SnoozeOrganizationInsightReqValidationError{
			field:  "Class",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetDuration() == nil {
		err := SnoozeOrganizationInsightReqValidationError{
			field:  "Duration",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if d := m.GetDuration(); d != nil {
		dur, err := d.AsDuration(), d.CheckValid()
		if err != nil {
			err = SnoozeOrganizationInsightReqValidationError{
				field:  "Duration",
				reason: "value is not a valid duration",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {

			gt := time.Duration(0*time.Second + 0*time.Nanosecond)

			if dur <= gt {
				err := SnoozeOrganizationInsightReqValidationError{
					field:  "Duration",
					reason: "value must be greater than 0s",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if len(errors) > 0 {
		return SnoozeOrganizationInsightReqMultiError(errors)
	}

	return nil
}

// SnoozeOrganizationInsightReqMultiError is an error wrapping multiple
// validation errors returned by SnoozeOrganizationInsightReq.ValidateAll() if
// the designated constraints aren't met.
type SnoozeOrganizationInsightReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SnoozeOrganizationInsightReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SnoozeOrganizationInsightReqMultiError) AllErrors() []error { return m }

// SnoozeOrganizationInsightReqValidationError is the validation error returned
// by SnoozeOrganizationInsightReq.Validate if the designated constraints
// aren't met.
type SnoozeOrganizationInsightReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SnoozeOrganizationInsightReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SnoozeOrganizationInsightReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SnoozeOrganizationInsightReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SnoozeOrganizationInsightReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SnoozeOrganizationInsightReqValidationError) ErrorName() string {
	return "SnoozeOrganizationInsightReqValidationError"
}

// Error satisfies the builtin error interface
func (e SnoozeOrganizationInsightReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSnoozeOrganizationInsightReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SnoozeOrganizationInsightReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SnoozeOrganizationInsightReqValidationError{}

// Validate checks the field values on SnoozeOrganizationInsightResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SnoozeOrganizationInsightResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SnoozeOrganizationInsightResp with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SnoozeOrganizationInsightRespMultiError, or nil if none found.
func (m *SnoozeOrganizationInsightResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SnoozeOrganizationInsightResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SnoozeOrganizationInsightRespMultiError(errors)
	}

	return nil
}

// SnoozeOrganizationInsightRespMultiError is an error wrapping multiple
// validation errors returned by SnoozeOrganizationInsightResp.ValidateAll()
// if the designated constraints aren't met.
type SnoozeOrganizationInsightRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SnoozeOrganizationInsightRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SnoozeOrganizationInsightRespMultiError) AllErrors() []error { return m }

// SnoozeOrganizationInsightRespValidationError is the validation error
// returned by SnoozeOrganizationInsightResp.Validate if the designated
// constraints aren't met.
type SnoozeOrganizationInsightRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SnoozeOrganizationInsightRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SnoozeOrganizationInsightRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SnoozeOrganizationInsightRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SnoozeOrganizationInsightRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SnoozeOrganizationInsightRespValidationError) ErrorName() string {
	return "SnoozeOrganizationInsightRespValidationError"
}

// Error satisfies the builtin error interface
func (e SnoozeOrganizationInsightRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSnoozeOrganizationInsightResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SnoozeOrganizationInsightRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SnoozeOrganizationInsightRespValidationError{}

// Validate checks the field values on GetOrganizationMetadataReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrganizationMetadataReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationMetadataReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrganizationMetadataReqMultiError, or nil if none found.
func (m *GetOrganizationMetadataReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationMetadataReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetOrganizationMetadataReqMultiError(errors)
	}

	return nil
}

// GetOrganizationMetadataReqMultiError is an error wrapping multiple
// validation errors returned by GetOrganizationMetadataReq.ValidateAll() if
// the designated constraints aren't met.
type GetOrganizationMetadataReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationMetadataReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationMetadataReqMultiError) AllErrors() []error { return m }

// GetOrganizationMetadataReqValidationError is the validation error returned
// by GetOrganizationMetadataReq.Validate if the designated constraints aren't met.
type GetOrganizationMetadataReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationMetadataReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationMetadataReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationMetadataReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationMetadataReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationMetadataReqValidationError) ErrorName() string {
	return "GetOrganizationMetadataReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationMetadataReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationMetadataReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationMetadataReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationMetadataReqValidationError{}

// Validate checks the field values on GetOrganizationMetadataResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrganizationMetadataResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationMetadataResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrganizationMetadataRespMultiError, or nil if none found.
func (m *GetOrganizationMetadataResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationMetadataResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrganizationMetadataRespValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrganizationMetadataRespValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrganizationMetadataRespValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrganizationMetadataRespMultiError(errors)
	}

	return nil
}

// GetOrganizationMetadataRespMultiError is an error wrapping multiple
// validation errors returned by GetOrganizationMetadataResp.ValidateAll() if
// the designated constraints aren't met.
type GetOrganizationMetadataRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationMetadataRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationMetadataRespMultiError) AllErrors() []error { return m }

// GetOrganizationMetadataRespValidationError is the validation error returned
// by GetOrganizationMetadataResp.Validate if the designated constraints
// aren't met.
type GetOrganizationMetadataRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationMetadataRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationMetadataRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationMetadataRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationMetadataRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationMetadataRespValidationError) ErrorName() string {
	return "GetOrganizationMetadataRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationMetadataRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationMetadataResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationMetadataRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationMetadataRespValidationError{}

// Validate checks the field values on SetOrganizationMetadataReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetOrganizationMetadataReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetOrganizationMetadataReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetOrganizationMetadataReqMultiError, or nil if none found.
func (m *SetOrganizationMetadataReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetOrganizationMetadataReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetMetadata() == nil {
		err := SetOrganizationMetadataReqValidationError{
			field:  "Metadata",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetOrganizationMetadataReqValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetOrganizationMetadataReqValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetOrganizationMetadataReqValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetOrganizationMetadataReqMultiError(errors)
	}

	return nil
}

// SetOrganizationMetadataReqMultiError is an error wrapping multiple
// validation errors returned by SetOrganizationMetadataReq.ValidateAll() if
// the designated constraints aren't met.
type SetOrganizationMetadataReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetOrganizationMetadataReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetOrganizationMetadataReqMultiError) AllErrors() []error { return m }

// SetOrganizationMetadataReqValidationError is the validation error returned
// by SetOrganizationMetadataReq.Validate if the designated constraints aren't met.
type SetOrganizationMetadataReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetOrganizationMetadataReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetOrganizationMetadataReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetOrganizationMetadataReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetOrganizationMetadataReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetOrganizationMetadataReqValidationError) ErrorName() string {
	return "SetOrganizationMetadataReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetOrganizationMetadataReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetOrganizationMetadataReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetOrganizationMetadataReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetOrganizationMetadataReqValidationError{}

// Validate checks the field values on SetOrganizationMetadataResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetOrganizationMetadataResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetOrganizationMetadataResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetOrganizationMetadataRespMultiError, or nil if none found.
func (m *SetOrganizationMetadataResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SetOrganizationMetadataResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetOrganizationMetadataRespMultiError(errors)
	}

	return nil
}

// SetOrganizationMetadataRespMultiError is an error wrapping multiple
// validation errors returned by SetOrganizationMetadataResp.ValidateAll() if
// the designated constraints aren't met.
type SetOrganizationMetadataRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetOrganizationMetadataRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetOrganizationMetadataRespMultiError) AllErrors() []error { return m }

// SetOrganizationMetadataRespValidationError is the validation error returned
// by SetOrganizationMetadataResp.Validate if the designated constraints
// aren't met.
type SetOrganizationMetadataRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetOrganizationMetadataRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetOrganizationMetadataRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetOrganizationMetadataRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetOrganizationMetadataRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetOrganizationMetadataRespValidationError) ErrorName() string {
	return "SetOrganizationMetadataRespValidationError"
}

// Error satisfies the builtin error interface
func (e SetOrganizationMetadataRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetOrganizationMetadataResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetOrganizationMetadataRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetOrganizationMetadataRespValidationError{}

// Validate checks the field values on GetUserReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserReqMultiError, or
// nil if none found.
func (m *GetUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := GetUserReqValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetUserReqMultiError(errors)
	}

	return nil
}

// GetUserReqMultiError is an error wrapping multiple validation errors
// returned by GetUserReq.ValidateAll() if the designated constraints aren't met.
type GetUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserReqMultiError) AllErrors() []error { return m }

// GetUserReqValidationError is the validation error returned by
// GetUserReq.Validate if the designated constraints aren't met.
type GetUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserReqValidationError) ErrorName() string { return "GetUserReqValidationError" }

// Error satisfies the builtin error interface
func (e GetUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserReqValidationError{}

// Validate checks the field values on GetUserResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserRespMultiError, or
// nil if none found.
func (m *GetUserResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserRespValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserRespValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserRespValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserRespMultiError(errors)
	}

	return nil
}

// GetUserRespMultiError is an error wrapping multiple validation errors
// returned by GetUserResp.ValidateAll() if the designated constraints aren't met.
type GetUserRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserRespMultiError) AllErrors() []error { return m }

// GetUserRespValidationError is the validation error returned by
// GetUserResp.Validate if the designated constraints aren't met.
type GetUserRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRespValidationError) ErrorName() string { return "GetUserRespValidationError" }

// Error satisfies the builtin error interface
func (e GetUserRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRespValidationError{}
