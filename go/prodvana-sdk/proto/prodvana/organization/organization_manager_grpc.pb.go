// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.10
// source: prodvana/organization/organization_manager.proto

package organization

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OrganizationManager_GetOrganization_FullMethodName                   = "/prodvana.organization.OrganizationManager/GetOrganization"
	OrganizationManager_GetOrganizationMetrics_FullMethodName            = "/prodvana.organization.OrganizationManager/GetOrganizationMetrics"
	OrganizationManager_GetOrganizationInsights_FullMethodName           = "/prodvana.organization.OrganizationManager/GetOrganizationInsights"
	OrganizationManager_SnoozeOrganizationInsight_FullMethodName         = "/prodvana.organization.OrganizationManager/SnoozeOrganizationInsight"
	OrganizationManager_GetOrganizationMetadata_FullMethodName           = "/prodvana.organization.OrganizationManager/GetOrganizationMetadata"
	OrganizationManager_SetOrganizationMetadata_FullMethodName           = "/prodvana.organization.OrganizationManager/SetOrganizationMetadata"
	OrganizationManager_GetUser_FullMethodName                           = "/prodvana.organization.OrganizationManager/GetUser"
	OrganizationManager_GetOrganizationSubscriptionStatus_FullMethodName = "/prodvana.organization.OrganizationManager/GetOrganizationSubscriptionStatus"
)

// OrganizationManagerClient is the client API for OrganizationManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationManagerClient interface {
	GetOrganization(ctx context.Context, in *GetOrganizationReq, opts ...grpc.CallOption) (*GetOrganizationResp, error)
	GetOrganizationMetrics(ctx context.Context, in *GetOrganizationMetricsReq, opts ...grpc.CallOption) (*GetOrganizationMetricsResp, error)
	GetOrganizationInsights(ctx context.Context, in *GetOrganizationInsightsReq, opts ...grpc.CallOption) (*GetOrganizationInsightsResp, error)
	SnoozeOrganizationInsight(ctx context.Context, in *SnoozeOrganizationInsightReq, opts ...grpc.CallOption) (*SnoozeOrganizationInsightResp, error)
	// Get org metadata, useful for constructing edit workflows for metadata
	GetOrganizationMetadata(ctx context.Context, in *GetOrganizationMetadataReq, opts ...grpc.CallOption) (*GetOrganizationMetadataResp, error)
	SetOrganizationMetadata(ctx context.Context, in *SetOrganizationMetadataReq, opts ...grpc.CallOption) (*SetOrganizationMetadataResp, error)
	// Get a user in an organization, will return NOT_FOUND if the user is eitehr missing or not in an organization
	GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*GetUserResp, error)
	GetOrganizationSubscriptionStatus(ctx context.Context, in *GetOrganizationSubscriptionStatusReq, opts ...grpc.CallOption) (*GetOrganizationSubscriptionStatusResp, error)
}

type organizationManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationManagerClient(cc grpc.ClientConnInterface) OrganizationManagerClient {
	return &organizationManagerClient{cc}
}

func (c *organizationManagerClient) GetOrganization(ctx context.Context, in *GetOrganizationReq, opts ...grpc.CallOption) (*GetOrganizationResp, error) {
	out := new(GetOrganizationResp)
	err := c.cc.Invoke(ctx, OrganizationManager_GetOrganization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationManagerClient) GetOrganizationMetrics(ctx context.Context, in *GetOrganizationMetricsReq, opts ...grpc.CallOption) (*GetOrganizationMetricsResp, error) {
	out := new(GetOrganizationMetricsResp)
	err := c.cc.Invoke(ctx, OrganizationManager_GetOrganizationMetrics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationManagerClient) GetOrganizationInsights(ctx context.Context, in *GetOrganizationInsightsReq, opts ...grpc.CallOption) (*GetOrganizationInsightsResp, error) {
	out := new(GetOrganizationInsightsResp)
	err := c.cc.Invoke(ctx, OrganizationManager_GetOrganizationInsights_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationManagerClient) SnoozeOrganizationInsight(ctx context.Context, in *SnoozeOrganizationInsightReq, opts ...grpc.CallOption) (*SnoozeOrganizationInsightResp, error) {
	out := new(SnoozeOrganizationInsightResp)
	err := c.cc.Invoke(ctx, OrganizationManager_SnoozeOrganizationInsight_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationManagerClient) GetOrganizationMetadata(ctx context.Context, in *GetOrganizationMetadataReq, opts ...grpc.CallOption) (*GetOrganizationMetadataResp, error) {
	out := new(GetOrganizationMetadataResp)
	err := c.cc.Invoke(ctx, OrganizationManager_GetOrganizationMetadata_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationManagerClient) SetOrganizationMetadata(ctx context.Context, in *SetOrganizationMetadataReq, opts ...grpc.CallOption) (*SetOrganizationMetadataResp, error) {
	out := new(SetOrganizationMetadataResp)
	err := c.cc.Invoke(ctx, OrganizationManager_SetOrganizationMetadata_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationManagerClient) GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*GetUserResp, error) {
	out := new(GetUserResp)
	err := c.cc.Invoke(ctx, OrganizationManager_GetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationManagerClient) GetOrganizationSubscriptionStatus(ctx context.Context, in *GetOrganizationSubscriptionStatusReq, opts ...grpc.CallOption) (*GetOrganizationSubscriptionStatusResp, error) {
	out := new(GetOrganizationSubscriptionStatusResp)
	err := c.cc.Invoke(ctx, OrganizationManager_GetOrganizationSubscriptionStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationManagerServer is the server API for OrganizationManager service.
// All implementations must embed UnimplementedOrganizationManagerServer
// for forward compatibility
type OrganizationManagerServer interface {
	GetOrganization(context.Context, *GetOrganizationReq) (*GetOrganizationResp, error)
	GetOrganizationMetrics(context.Context, *GetOrganizationMetricsReq) (*GetOrganizationMetricsResp, error)
	GetOrganizationInsights(context.Context, *GetOrganizationInsightsReq) (*GetOrganizationInsightsResp, error)
	SnoozeOrganizationInsight(context.Context, *SnoozeOrganizationInsightReq) (*SnoozeOrganizationInsightResp, error)
	// Get org metadata, useful for constructing edit workflows for metadata
	GetOrganizationMetadata(context.Context, *GetOrganizationMetadataReq) (*GetOrganizationMetadataResp, error)
	SetOrganizationMetadata(context.Context, *SetOrganizationMetadataReq) (*SetOrganizationMetadataResp, error)
	// Get a user in an organization, will return NOT_FOUND if the user is eitehr missing or not in an organization
	GetUser(context.Context, *GetUserReq) (*GetUserResp, error)
	GetOrganizationSubscriptionStatus(context.Context, *GetOrganizationSubscriptionStatusReq) (*GetOrganizationSubscriptionStatusResp, error)
	mustEmbedUnimplementedOrganizationManagerServer()
}

// UnimplementedOrganizationManagerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationManagerServer struct {
}

func (UnimplementedOrganizationManagerServer) GetOrganization(context.Context, *GetOrganizationReq) (*GetOrganizationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganization not implemented")
}
func (UnimplementedOrganizationManagerServer) GetOrganizationMetrics(context.Context, *GetOrganizationMetricsReq) (*GetOrganizationMetricsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationMetrics not implemented")
}
func (UnimplementedOrganizationManagerServer) GetOrganizationInsights(context.Context, *GetOrganizationInsightsReq) (*GetOrganizationInsightsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationInsights not implemented")
}
func (UnimplementedOrganizationManagerServer) SnoozeOrganizationInsight(context.Context, *SnoozeOrganizationInsightReq) (*SnoozeOrganizationInsightResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SnoozeOrganizationInsight not implemented")
}
func (UnimplementedOrganizationManagerServer) GetOrganizationMetadata(context.Context, *GetOrganizationMetadataReq) (*GetOrganizationMetadataResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationMetadata not implemented")
}
func (UnimplementedOrganizationManagerServer) SetOrganizationMetadata(context.Context, *SetOrganizationMetadataReq) (*SetOrganizationMetadataResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOrganizationMetadata not implemented")
}
func (UnimplementedOrganizationManagerServer) GetUser(context.Context, *GetUserReq) (*GetUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedOrganizationManagerServer) GetOrganizationSubscriptionStatus(context.Context, *GetOrganizationSubscriptionStatusReq) (*GetOrganizationSubscriptionStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationSubscriptionStatus not implemented")
}
func (UnimplementedOrganizationManagerServer) mustEmbedUnimplementedOrganizationManagerServer() {}

// UnsafeOrganizationManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationManagerServer will
// result in compilation errors.
type UnsafeOrganizationManagerServer interface {
	mustEmbedUnimplementedOrganizationManagerServer()
}

func RegisterOrganizationManagerServer(s grpc.ServiceRegistrar, srv OrganizationManagerServer) {
	s.RegisterService(&OrganizationManager_ServiceDesc, srv)
}

func _OrganizationManager_GetOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationManagerServer).GetOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationManager_GetOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationManagerServer).GetOrganization(ctx, req.(*GetOrganizationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationManager_GetOrganizationMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationMetricsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationManagerServer).GetOrganizationMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationManager_GetOrganizationMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationManagerServer).GetOrganizationMetrics(ctx, req.(*GetOrganizationMetricsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationManager_GetOrganizationInsights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationInsightsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationManagerServer).GetOrganizationInsights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationManager_GetOrganizationInsights_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationManagerServer).GetOrganizationInsights(ctx, req.(*GetOrganizationInsightsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationManager_SnoozeOrganizationInsight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnoozeOrganizationInsightReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationManagerServer).SnoozeOrganizationInsight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationManager_SnoozeOrganizationInsight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationManagerServer).SnoozeOrganizationInsight(ctx, req.(*SnoozeOrganizationInsightReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationManager_GetOrganizationMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationMetadataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationManagerServer).GetOrganizationMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationManager_GetOrganizationMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationManagerServer).GetOrganizationMetadata(ctx, req.(*GetOrganizationMetadataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationManager_SetOrganizationMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOrganizationMetadataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationManagerServer).SetOrganizationMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationManager_SetOrganizationMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationManagerServer).SetOrganizationMetadata(ctx, req.(*SetOrganizationMetadataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationManager_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationManagerServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationManager_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationManagerServer).GetUser(ctx, req.(*GetUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationManager_GetOrganizationSubscriptionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationSubscriptionStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationManagerServer).GetOrganizationSubscriptionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationManager_GetOrganizationSubscriptionStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationManagerServer).GetOrganizationSubscriptionStatus(ctx, req.(*GetOrganizationSubscriptionStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationManager_ServiceDesc is the grpc.ServiceDesc for OrganizationManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "prodvana.organization.OrganizationManager",
	HandlerType: (*OrganizationManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOrganization",
			Handler:    _OrganizationManager_GetOrganization_Handler,
		},
		{
			MethodName: "GetOrganizationMetrics",
			Handler:    _OrganizationManager_GetOrganizationMetrics_Handler,
		},
		{
			MethodName: "GetOrganizationInsights",
			Handler:    _OrganizationManager_GetOrganizationInsights_Handler,
		},
		{
			MethodName: "SnoozeOrganizationInsight",
			Handler:    _OrganizationManager_SnoozeOrganizationInsight_Handler,
		},
		{
			MethodName: "GetOrganizationMetadata",
			Handler:    _OrganizationManager_GetOrganizationMetadata_Handler,
		},
		{
			MethodName: "SetOrganizationMetadata",
			Handler:    _OrganizationManager_SetOrganizationMetadata_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _OrganizationManager_GetUser_Handler,
		},
		{
			MethodName: "GetOrganizationSubscriptionStatus",
			Handler:    _OrganizationManager_GetOrganizationSubscriptionStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "prodvana/organization/organization_manager.proto",
}
