// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: prodvana/release/object.proto

package release

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ReleaseConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReleaseConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReleaseConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReleaseConfigMultiError, or
// nil if none found.
func (m *ReleaseConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *ReleaseConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCreationTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReleaseConfigValidationError{
					field:  "CreationTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReleaseConfigValidationError{
					field:  "CreationTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreationTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReleaseConfigValidationError{
				field:  "CreationTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetDeploymentSystem()) < 1 {
		err := ReleaseConfigValidationError{
			field:  "DeploymentSystem",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetService()) < 1 {
		err := ReleaseConfigValidationError{
			field:  "Service",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetReleaseChannel()) < 1 {
		err := ReleaseConfigValidationError{
			field:  "ReleaseChannel",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Repository

	// no validation rules for CommitId

	// no validation rules for User

	if len(errors) > 0 {
		return ReleaseConfigMultiError(errors)
	}

	return nil
}

// ReleaseConfigMultiError is an error wrapping multiple validation errors
// returned by ReleaseConfig.ValidateAll() if the designated constraints
// aren't met.
type ReleaseConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReleaseConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReleaseConfigMultiError) AllErrors() []error { return m }

// ReleaseConfigValidationError is the validation error returned by
// ReleaseConfig.Validate if the designated constraints aren't met.
type ReleaseConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleaseConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleaseConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleaseConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleaseConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleaseConfigValidationError) ErrorName() string { return "ReleaseConfigValidationError" }

// Error satisfies the builtin error interface
func (e ReleaseConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleaseConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleaseConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleaseConfigValidationError{}

// Validate checks the field values on ReleaseState with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReleaseState) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReleaseState with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReleaseStateMultiError, or
// nil if none found.
func (m *ReleaseState) ValidateAll() error {
	return m.validate(true)
}

func (m *ReleaseState) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetLastUpdateTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReleaseStateValidationError{
					field:  "LastUpdateTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReleaseStateValidationError{
					field:  "LastUpdateTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastUpdateTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReleaseStateValidationError{
				field:  "LastUpdateTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReleaseStateMultiError(errors)
	}

	return nil
}

// ReleaseStateMultiError is an error wrapping multiple validation errors
// returned by ReleaseState.ValidateAll() if the designated constraints aren't met.
type ReleaseStateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReleaseStateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReleaseStateMultiError) AllErrors() []error { return m }

// ReleaseStateValidationError is the validation error returned by
// ReleaseState.Validate if the designated constraints aren't met.
type ReleaseStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleaseStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleaseStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleaseStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleaseStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleaseStateValidationError) ErrorName() string { return "ReleaseStateValidationError" }

// Error satisfies the builtin error interface
func (e ReleaseStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleaseState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleaseStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleaseStateValidationError{}

// Validate checks the field values on ImpactAnalysisComparison with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ImpactAnalysisComparison) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImpactAnalysisComparison with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImpactAnalysisComparisonMultiError, or nil if none found.
func (m *ImpactAnalysisComparison) ValidateAll() error {
	return m.validate(true)
}

func (m *ImpactAnalysisComparison) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRelevantCommits() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ImpactAnalysisComparisonValidationError{
						field:  fmt.Sprintf("RelevantCommits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ImpactAnalysisComparisonValidationError{
						field:  fmt.Sprintf("RelevantCommits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImpactAnalysisComparisonValidationError{
					field:  fmt.Sprintf("RelevantCommits[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for UnanalyzedCommits

	if len(errors) > 0 {
		return ImpactAnalysisComparisonMultiError(errors)
	}

	return nil
}

// ImpactAnalysisComparisonMultiError is an error wrapping multiple validation
// errors returned by ImpactAnalysisComparison.ValidateAll() if the designated
// constraints aren't met.
type ImpactAnalysisComparisonMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImpactAnalysisComparisonMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImpactAnalysisComparisonMultiError) AllErrors() []error { return m }

// ImpactAnalysisComparisonValidationError is the validation error returned by
// ImpactAnalysisComparison.Validate if the designated constraints aren't met.
type ImpactAnalysisComparisonValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImpactAnalysisComparisonValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImpactAnalysisComparisonValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImpactAnalysisComparisonValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImpactAnalysisComparisonValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImpactAnalysisComparisonValidationError) ErrorName() string {
	return "ImpactAnalysisComparisonValidationError"
}

// Error satisfies the builtin error interface
func (e ImpactAnalysisComparisonValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImpactAnalysisComparison.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImpactAnalysisComparisonValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImpactAnalysisComparisonValidationError{}

// Validate checks the field values on ReleaseComparison with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ReleaseComparison) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReleaseComparison with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReleaseComparisonMultiError, or nil if none found.
func (m *ReleaseComparison) ValidateAll() error {
	return m.validate(true)
}

func (m *ReleaseComparison) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPrev()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReleaseComparisonValidationError{
					field:  "Prev",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReleaseComparisonValidationError{
					field:  "Prev",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPrev()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReleaseComparisonValidationError{
				field:  "Prev",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PrevRepository

	// no validation rules for NewRepository

	// no validation rules for PrevCommitId

	// no validation rules for NewCommitId

	if all {
		switch v := interface{}(m.GetImpactAnalysis()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReleaseComparisonValidationError{
					field:  "ImpactAnalysis",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReleaseComparisonValidationError{
					field:  "ImpactAnalysis",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetImpactAnalysis()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReleaseComparisonValidationError{
				field:  "ImpactAnalysis",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTotalCommits()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReleaseComparisonValidationError{
					field:  "TotalCommits",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReleaseComparisonValidationError{
					field:  "TotalCommits",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTotalCommits()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReleaseComparisonValidationError{
				field:  "TotalCommits",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReleaseComparisonMultiError(errors)
	}

	return nil
}

// ReleaseComparisonMultiError is an error wrapping multiple validation errors
// returned by ReleaseComparison.ValidateAll() if the designated constraints
// aren't met.
type ReleaseComparisonMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReleaseComparisonMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReleaseComparisonMultiError) AllErrors() []error { return m }

// ReleaseComparisonValidationError is the validation error returned by
// ReleaseComparison.Validate if the designated constraints aren't met.
type ReleaseComparisonValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleaseComparisonValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleaseComparisonValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleaseComparisonValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleaseComparisonValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleaseComparisonValidationError) ErrorName() string {
	return "ReleaseComparisonValidationError"
}

// Error satisfies the builtin error interface
func (e ReleaseComparisonValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleaseComparison.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleaseComparisonValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleaseComparisonValidationError{}

// Validate checks the field values on Release with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Release) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Release with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ReleaseMultiError, or nil if none found.
func (m *Release) ValidateAll() error {
	return m.validate(true)
}

func (m *Release) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMeta()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReleaseValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReleaseValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReleaseValidationError{
				field:  "Meta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReleaseValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReleaseValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReleaseValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetComparison()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReleaseValidationError{
					field:  "Comparison",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReleaseValidationError{
					field:  "Comparison",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComparison()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReleaseValidationError{
				field:  "Comparison",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetState()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReleaseValidationError{
					field:  "State",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReleaseValidationError{
					field:  "State",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReleaseValidationError{
				field:  "State",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReleaseMultiError(errors)
	}

	return nil
}

// ReleaseMultiError is an error wrapping multiple validation errors returned
// by Release.ValidateAll() if the designated constraints aren't met.
type ReleaseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReleaseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReleaseMultiError) AllErrors() []error { return m }

// ReleaseValidationError is the validation error returned by Release.Validate
// if the designated constraints aren't met.
type ReleaseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleaseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleaseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleaseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleaseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleaseValidationError) ErrorName() string { return "ReleaseValidationError" }

// Error satisfies the builtin error interface
func (e ReleaseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelease.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleaseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleaseValidationError{}
