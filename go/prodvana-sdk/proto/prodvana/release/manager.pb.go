// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.1
// 	protoc        v3.21.10
// source: prodvana/release/manager.proto

package release

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	object "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/object"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RecordReleaseReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *ReleaseConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// If true, create release with pending status that is meant to be updated later to either success or failure.
	// By default, releases are created with status SUCCEEDED.
	Pending bool `protobuf:"varint,2,opt,name=pending,proto3" json:"pending,omitempty"`
}

func (x *RecordReleaseReq) Reset() {
	*x = RecordReleaseReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_release_manager_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordReleaseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordReleaseReq) ProtoMessage() {}

func (x *RecordReleaseReq) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_release_manager_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordReleaseReq.ProtoReflect.Descriptor instead.
func (*RecordReleaseReq) Descriptor() ([]byte, []int) {
	return file_prodvana_release_manager_proto_rawDescGZIP(), []int{0}
}

func (x *RecordReleaseReq) GetConfig() *ReleaseConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *RecordReleaseReq) GetPending() bool {
	if x != nil {
		return x.Pending
	}
	return false
}

type RecordReleaseResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta *object.ObjectMeta `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *RecordReleaseResp) Reset() {
	*x = RecordReleaseResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_release_manager_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordReleaseResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordReleaseResp) ProtoMessage() {}

func (x *RecordReleaseResp) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_release_manager_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordReleaseResp.ProtoReflect.Descriptor instead.
func (*RecordReleaseResp) Descriptor() ([]byte, []int) {
	return file_prodvana_release_manager_proto_rawDescGZIP(), []int{1}
}

func (x *RecordReleaseResp) GetMeta() *object.ObjectMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

type UpdateReleaseStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReleaseId string        `protobuf:"bytes,1,opt,name=release_id,json=releaseId,proto3" json:"release_id,omitempty"`
	Status    ReleaseStatus `protobuf:"varint,2,opt,name=status,proto3,enum=prodvana.release.ReleaseStatus" json:"status,omitempty"`
}

func (x *UpdateReleaseStatusReq) Reset() {
	*x = UpdateReleaseStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_release_manager_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateReleaseStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateReleaseStatusReq) ProtoMessage() {}

func (x *UpdateReleaseStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_release_manager_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateReleaseStatusReq.ProtoReflect.Descriptor instead.
func (*UpdateReleaseStatusReq) Descriptor() ([]byte, []int) {
	return file_prodvana_release_manager_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateReleaseStatusReq) GetReleaseId() string {
	if x != nil {
		return x.ReleaseId
	}
	return ""
}

func (x *UpdateReleaseStatusReq) GetStatus() ReleaseStatus {
	if x != nil {
		return x.Status
	}
	return ReleaseStatus_UNKNOWN_STATUS
}

type UpdateReleaseStatusResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status ReleaseStatus `protobuf:"varint,1,opt,name=status,proto3,enum=prodvana.release.ReleaseStatus" json:"status,omitempty"`
}

func (x *UpdateReleaseStatusResp) Reset() {
	*x = UpdateReleaseStatusResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_release_manager_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateReleaseStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateReleaseStatusResp) ProtoMessage() {}

func (x *UpdateReleaseStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_release_manager_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateReleaseStatusResp.ProtoReflect.Descriptor instead.
func (*UpdateReleaseStatusResp) Descriptor() ([]byte, []int) {
	return file_prodvana_release_manager_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateReleaseStatusResp) GetStatus() ReleaseStatus {
	if x != nil {
		return x.Status
	}
	return ReleaseStatus_UNKNOWN_STATUS
}

type ReleaseFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// filters to releases for join(join(services, OR), join(release_channels, OR), AND)
	Services        []string `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty"`
	ReleaseChannels []string `protobuf:"bytes,2,rep,name=release_channels,json=releaseChannels,proto3" json:"release_channels,omitempty"`
	// if set, the filters on services and release channels above will be limited to this app.
	// Otherwise, there is no app filter (so e.g. release_channels=['staging'] will select
	// staging release channels across all apps.)
	Application    string `protobuf:"bytes,3,opt,name=application,proto3" json:"application,omitempty"`
	DesiredStateId string `protobuf:"bytes,4,opt,name=desired_state_id,json=desiredStateId,proto3" json:"desired_state_id,omitempty"` // desired_state_id filter is AND'ed with everything else in the same filter object
}

func (x *ReleaseFilter) Reset() {
	*x = ReleaseFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_release_manager_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseFilter) ProtoMessage() {}

func (x *ReleaseFilter) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_release_manager_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseFilter.ProtoReflect.Descriptor instead.
func (*ReleaseFilter) Descriptor() ([]byte, []int) {
	return file_prodvana_release_manager_proto_rawDescGZIP(), []int{4}
}

func (x *ReleaseFilter) GetServices() []string {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *ReleaseFilter) GetReleaseChannels() []string {
	if x != nil {
		return x.ReleaseChannels
	}
	return nil
}

func (x *ReleaseFilter) GetApplication() string {
	if x != nil {
		return x.Application
	}
	return ""
}

func (x *ReleaseFilter) GetDesiredStateId() string {
	if x != nil {
		return x.DesiredStateId
	}
	return ""
}

type ListReleasesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// filters for listing releases. Multiple filters are OR'ed together.
	Filters           []*ReleaseFilter `protobuf:"bytes,1,rep,name=filters,proto3" json:"filters,omitempty"`
	Filter            *ReleaseFilter   `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`                                                  // escape hatch to support openAPI, which cannot handle repeated list of messages on GET requests. This is joined to the filters list with an OR.
	StartingReleaseId string           `protobuf:"bytes,3,opt,name=starting_release_id,json=startingReleaseId,proto3" json:"starting_release_id,omitempty"` // newer release, inclusive
	EndingReleaseId   string           `protobuf:"bytes,4,opt,name=ending_release_id,json=endingReleaseId,proto3" json:"ending_release_id,omitempty"`       // older release, exclusive
	PageToken         string           `protobuf:"bytes,5,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	PageSize          int32            `protobuf:"varint,6,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *ListReleasesReq) Reset() {
	*x = ListReleasesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_release_manager_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListReleasesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReleasesReq) ProtoMessage() {}

func (x *ListReleasesReq) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_release_manager_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReleasesReq.ProtoReflect.Descriptor instead.
func (*ListReleasesReq) Descriptor() ([]byte, []int) {
	return file_prodvana_release_manager_proto_rawDescGZIP(), []int{5}
}

func (x *ListReleasesReq) GetFilters() []*ReleaseFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *ListReleasesReq) GetFilter() *ReleaseFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ListReleasesReq) GetStartingReleaseId() string {
	if x != nil {
		return x.StartingReleaseId
	}
	return ""
}

func (x *ListReleasesReq) GetEndingReleaseId() string {
	if x != nil {
		return x.EndingReleaseId
	}
	return ""
}

func (x *ListReleasesReq) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListReleasesReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ListReleasesResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Releases      []*Release `protobuf:"bytes,1,rep,name=releases,proto3" json:"releases,omitempty"`
	NextPageToken string     `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListReleasesResp) Reset() {
	*x = ListReleasesResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_release_manager_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListReleasesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReleasesResp) ProtoMessage() {}

func (x *ListReleasesResp) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_release_manager_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReleasesResp.ProtoReflect.Descriptor instead.
func (*ListReleasesResp) Descriptor() ([]byte, []int) {
	return file_prodvana_release_manager_proto_rawDescGZIP(), []int{6}
}

func (x *ListReleasesResp) GetReleases() []*Release {
	if x != nil {
		return x.Releases
	}
	return nil
}

func (x *ListReleasesResp) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type ReleaseRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// a release reference is either an existing release id or the release config of a hypothetical, not yet recorded release.
	//
	// Types that are assignable to Ref:
	//
	//	*ReleaseRef_ReleaseId
	//	*ReleaseRef_Config
	Ref isReleaseRef_Ref `protobuf_oneof:"ref"`
}

func (x *ReleaseRef) Reset() {
	*x = ReleaseRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_release_manager_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseRef) ProtoMessage() {}

func (x *ReleaseRef) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_release_manager_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseRef.ProtoReflect.Descriptor instead.
func (*ReleaseRef) Descriptor() ([]byte, []int) {
	return file_prodvana_release_manager_proto_rawDescGZIP(), []int{7}
}

func (m *ReleaseRef) GetRef() isReleaseRef_Ref {
	if m != nil {
		return m.Ref
	}
	return nil
}

func (x *ReleaseRef) GetReleaseId() string {
	if x, ok := x.GetRef().(*ReleaseRef_ReleaseId); ok {
		return x.ReleaseId
	}
	return ""
}

func (x *ReleaseRef) GetConfig() *ReleaseConfig {
	if x, ok := x.GetRef().(*ReleaseRef_Config); ok {
		return x.Config
	}
	return nil
}

type isReleaseRef_Ref interface {
	isReleaseRef_Ref()
}

type ReleaseRef_ReleaseId struct {
	ReleaseId string `protobuf:"bytes,1,opt,name=release_id,json=releaseId,proto3,oneof"`
}

type ReleaseRef_Config struct {
	Config *ReleaseConfig `protobuf:"bytes,2,opt,name=config,proto3,oneof"`
}

func (*ReleaseRef_ReleaseId) isReleaseRef_Ref() {}

func (*ReleaseRef_Config) isReleaseRef_Ref() {}

type CompareReleaseReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewRelease  *ReleaseRef `protobuf:"bytes,1,opt,name=new_release,json=newRelease,proto3" json:"new_release,omitempty"`
	PrevRelease *ReleaseRef `protobuf:"bytes,2,opt,name=prev_release,json=prevRelease,proto3" json:"prev_release,omitempty"`
}

func (x *CompareReleaseReq) Reset() {
	*x = CompareReleaseReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_release_manager_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompareReleaseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompareReleaseReq) ProtoMessage() {}

func (x *CompareReleaseReq) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_release_manager_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompareReleaseReq.ProtoReflect.Descriptor instead.
func (*CompareReleaseReq) Descriptor() ([]byte, []int) {
	return file_prodvana_release_manager_proto_rawDescGZIP(), []int{8}
}

func (x *CompareReleaseReq) GetNewRelease() *ReleaseRef {
	if x != nil {
		return x.NewRelease
	}
	return nil
}

func (x *CompareReleaseReq) GetPrevRelease() *ReleaseRef {
	if x != nil {
		return x.PrevRelease
	}
	return nil
}

type CompareReleaseResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comparison *ReleaseComparison `protobuf:"bytes,1,opt,name=comparison,proto3" json:"comparison,omitempty"`
}

func (x *CompareReleaseResp) Reset() {
	*x = CompareReleaseResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_release_manager_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompareReleaseResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompareReleaseResp) ProtoMessage() {}

func (x *CompareReleaseResp) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_release_manager_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompareReleaseResp.ProtoReflect.Descriptor instead.
func (*CompareReleaseResp) Descriptor() ([]byte, []int) {
	return file_prodvana_release_manager_proto_rawDescGZIP(), []int{9}
}

func (x *CompareReleaseResp) GetComparison() *ReleaseComparison {
	if x != nil {
		return x.Comparison
	}
	return nil
}

type PreviewReleaseReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config      *ReleaseConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	PrevRelease *ReleaseRef    `protobuf:"bytes,2,opt,name=prev_release,json=prevRelease,proto3" json:"prev_release,omitempty"` // omit to use latest release from the same app/service/release channel
}

func (x *PreviewReleaseReq) Reset() {
	*x = PreviewReleaseReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_release_manager_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviewReleaseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewReleaseReq) ProtoMessage() {}

func (x *PreviewReleaseReq) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_release_manager_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewReleaseReq.ProtoReflect.Descriptor instead.
func (*PreviewReleaseReq) Descriptor() ([]byte, []int) {
	return file_prodvana_release_manager_proto_rawDescGZIP(), []int{10}
}

func (x *PreviewReleaseReq) GetConfig() *ReleaseConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *PreviewReleaseReq) GetPrevRelease() *ReleaseRef {
	if x != nil {
		return x.PrevRelease
	}
	return nil
}

type PreviewReleaseResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Release *Release `protobuf:"bytes,1,opt,name=release,proto3" json:"release,omitempty"`
}

func (x *PreviewReleaseResp) Reset() {
	*x = PreviewReleaseResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_release_manager_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviewReleaseResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewReleaseResp) ProtoMessage() {}

func (x *PreviewReleaseResp) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_release_manager_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewReleaseResp.ProtoReflect.Descriptor instead.
func (*PreviewReleaseResp) Descriptor() ([]byte, []int) {
	return file_prodvana_release_manager_proto_rawDescGZIP(), []int{11}
}

func (x *PreviewReleaseResp) GetRelease() *Release {
	if x != nil {
		return x.Release
	}
	return nil
}

type GetLatestReleasesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// filters for listing releases. Multiple filters are OR'ed together.
	Filters   []*ReleaseFilter `protobuf:"bytes,1,rep,name=filters,proto3" json:"filters,omitempty"`
	Filter    *ReleaseFilter   `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`                                      // escape hatch to support openAPI, which cannot handle repeated list of messages on GET requests. This is joined to the filters list with an OR.
	Status    ReleaseStatus    `protobuf:"varint,3,opt,name=status,proto3,enum=prodvana.release.ReleaseStatus" json:"status,omitempty"` // if set, only return releases with this status
	PageToken string           `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	PageSize  int32            `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *GetLatestReleasesReq) Reset() {
	*x = GetLatestReleasesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_release_manager_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestReleasesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestReleasesReq) ProtoMessage() {}

func (x *GetLatestReleasesReq) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_release_manager_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestReleasesReq.ProtoReflect.Descriptor instead.
func (*GetLatestReleasesReq) Descriptor() ([]byte, []int) {
	return file_prodvana_release_manager_proto_rawDescGZIP(), []int{12}
}

func (x *GetLatestReleasesReq) GetFilters() []*ReleaseFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *GetLatestReleasesReq) GetFilter() *ReleaseFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetLatestReleasesReq) GetStatus() ReleaseStatus {
	if x != nil {
		return x.Status
	}
	return ReleaseStatus_UNKNOWN_STATUS
}

func (x *GetLatestReleasesReq) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *GetLatestReleasesReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type GetLatestReleasesResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Releases      []*Release `protobuf:"bytes,1,rep,name=releases,proto3" json:"releases,omitempty"`
	NextPageToken string     `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *GetLatestReleasesResp) Reset() {
	*x = GetLatestReleasesResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prodvana_release_manager_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestReleasesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestReleasesResp) ProtoMessage() {}

func (x *GetLatestReleasesResp) ProtoReflect() protoreflect.Message {
	mi := &file_prodvana_release_manager_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestReleasesResp.ProtoReflect.Descriptor instead.
func (*GetLatestReleasesResp) Descriptor() ([]byte, []int) {
	return file_prodvana_release_manager_proto_rawDescGZIP(), []int{13}
}

func (x *GetLatestReleasesResp) GetReleases() []*Release {
	if x != nil {
		return x.Releases
	}
	return nil
}

func (x *GetLatestReleasesResp) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

var File_prodvana_release_manager_proto protoreflect.FileDescriptor

var file_prodvana_release_manager_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1a, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2f, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6f, 0x0a, 0x10, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x12, 0x41, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x44, 0x0a, 0x11, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2f, 0x0a, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x22, 0x70, 0x0a, 0x16, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x52, 0x0a,
	0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0xa2, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12,
	0x29, 0x0a, 0x10, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x22, 0x9d, 0x02, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x39, 0x0a, 0x07, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x37, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61,
	0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2e,
	0x0a, 0x13, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x11, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x71, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x35, 0x0a, 0x08, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x74, 0x0a, 0x0a, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x66, 0x12, 0x1f, 0x0a, 0x0a, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x0a, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22,
	0xa7, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x12, 0x47, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x66, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x49,
	0x0a, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x66, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72,
	0x65, 0x76, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x22, 0x59, 0x0a, 0x12, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x43, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x69, 0x73, 0x6f, 0x6e, 0x22, 0x97, 0x01, 0x0a, 0x11, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x12, 0x41, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3f, 0x0a,
	0x0c, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x66, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x22, 0x49,
	0x0a, 0x12, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61,
	0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x52, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x22, 0xff, 0x01, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x12, 0x39, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x37, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e,
	0x61, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x76, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x35, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e,
	0x61, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x32, 0xed, 0x06, 0x0a, 0x0e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x71, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61,
	0x6e, 0x61, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x3a, 0x01, 0x2a, 0x22, 0x0c, 0x2f, 0x76, 0x31,
	0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0x99, 0x01, 0x0a, 0x13, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01,
	0x2a, 0x22, 0x22, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x2f,
	0x7b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x6b, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61,
	0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x14, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x0e, 0x12, 0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x73, 0x12, 0x5f, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x00, 0x30, 0x01, 0x12, 0x7c, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61,
	0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a, 0x22, 0x14, 0x2f, 0x76, 0x31,
	0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x65, 0x12, 0x7c, 0x0a, 0x0e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x12, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x1f,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a, 0x22, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12,
	0x81, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61,
	0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13,
	0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x42, 0x4c, 0x5a, 0x4a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x76,
	0x61, 0x6e, 0x61, 0x2d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72,
	0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x70, 0x72, 0x6f, 0x64, 0x76, 0x61, 0x6e, 0x61, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_prodvana_release_manager_proto_rawDescOnce sync.Once
	file_prodvana_release_manager_proto_rawDescData = file_prodvana_release_manager_proto_rawDesc
)

func file_prodvana_release_manager_proto_rawDescGZIP() []byte {
	file_prodvana_release_manager_proto_rawDescOnce.Do(func() {
		file_prodvana_release_manager_proto_rawDescData = protoimpl.X.CompressGZIP(file_prodvana_release_manager_proto_rawDescData)
	})
	return file_prodvana_release_manager_proto_rawDescData
}

var file_prodvana_release_manager_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_prodvana_release_manager_proto_goTypes = []interface{}{
	(*RecordReleaseReq)(nil),        // 0: prodvana.release.RecordReleaseReq
	(*RecordReleaseResp)(nil),       // 1: prodvana.release.RecordReleaseResp
	(*UpdateReleaseStatusReq)(nil),  // 2: prodvana.release.UpdateReleaseStatusReq
	(*UpdateReleaseStatusResp)(nil), // 3: prodvana.release.UpdateReleaseStatusResp
	(*ReleaseFilter)(nil),           // 4: prodvana.release.ReleaseFilter
	(*ListReleasesReq)(nil),         // 5: prodvana.release.ListReleasesReq
	(*ListReleasesResp)(nil),        // 6: prodvana.release.ListReleasesResp
	(*ReleaseRef)(nil),              // 7: prodvana.release.ReleaseRef
	(*CompareReleaseReq)(nil),       // 8: prodvana.release.CompareReleaseReq
	(*CompareReleaseResp)(nil),      // 9: prodvana.release.CompareReleaseResp
	(*PreviewReleaseReq)(nil),       // 10: prodvana.release.PreviewReleaseReq
	(*PreviewReleaseResp)(nil),      // 11: prodvana.release.PreviewReleaseResp
	(*GetLatestReleasesReq)(nil),    // 12: prodvana.release.GetLatestReleasesReq
	(*GetLatestReleasesResp)(nil),   // 13: prodvana.release.GetLatestReleasesResp
	(*ReleaseConfig)(nil),           // 14: prodvana.release.ReleaseConfig
	(*object.ObjectMeta)(nil),       // 15: prodvana.object.ObjectMeta
	(ReleaseStatus)(0),              // 16: prodvana.release.ReleaseStatus
	(*Release)(nil),                 // 17: prodvana.release.Release
	(*ReleaseComparison)(nil),       // 18: prodvana.release.ReleaseComparison
}
var file_prodvana_release_manager_proto_depIdxs = []int32{
	14, // 0: prodvana.release.RecordReleaseReq.config:type_name -> prodvana.release.ReleaseConfig
	15, // 1: prodvana.release.RecordReleaseResp.meta:type_name -> prodvana.object.ObjectMeta
	16, // 2: prodvana.release.UpdateReleaseStatusReq.status:type_name -> prodvana.release.ReleaseStatus
	16, // 3: prodvana.release.UpdateReleaseStatusResp.status:type_name -> prodvana.release.ReleaseStatus
	4,  // 4: prodvana.release.ListReleasesReq.filters:type_name -> prodvana.release.ReleaseFilter
	4,  // 5: prodvana.release.ListReleasesReq.filter:type_name -> prodvana.release.ReleaseFilter
	17, // 6: prodvana.release.ListReleasesResp.releases:type_name -> prodvana.release.Release
	14, // 7: prodvana.release.ReleaseRef.config:type_name -> prodvana.release.ReleaseConfig
	7,  // 8: prodvana.release.CompareReleaseReq.new_release:type_name -> prodvana.release.ReleaseRef
	7,  // 9: prodvana.release.CompareReleaseReq.prev_release:type_name -> prodvana.release.ReleaseRef
	18, // 10: prodvana.release.CompareReleaseResp.comparison:type_name -> prodvana.release.ReleaseComparison
	14, // 11: prodvana.release.PreviewReleaseReq.config:type_name -> prodvana.release.ReleaseConfig
	7,  // 12: prodvana.release.PreviewReleaseReq.prev_release:type_name -> prodvana.release.ReleaseRef
	17, // 13: prodvana.release.PreviewReleaseResp.release:type_name -> prodvana.release.Release
	4,  // 14: prodvana.release.GetLatestReleasesReq.filters:type_name -> prodvana.release.ReleaseFilter
	4,  // 15: prodvana.release.GetLatestReleasesReq.filter:type_name -> prodvana.release.ReleaseFilter
	16, // 16: prodvana.release.GetLatestReleasesReq.status:type_name -> prodvana.release.ReleaseStatus
	17, // 17: prodvana.release.GetLatestReleasesResp.releases:type_name -> prodvana.release.Release
	0,  // 18: prodvana.release.ReleaseManager.RecordRelease:input_type -> prodvana.release.RecordReleaseReq
	2,  // 19: prodvana.release.ReleaseManager.UpdateReleaseStatus:input_type -> prodvana.release.UpdateReleaseStatusReq
	5,  // 20: prodvana.release.ReleaseManager.ListReleases:input_type -> prodvana.release.ListReleasesReq
	5,  // 21: prodvana.release.ReleaseManager.ListReleasesStream:input_type -> prodvana.release.ListReleasesReq
	8,  // 22: prodvana.release.ReleaseManager.CompareRelease:input_type -> prodvana.release.CompareReleaseReq
	10, // 23: prodvana.release.ReleaseManager.PreviewRelease:input_type -> prodvana.release.PreviewReleaseReq
	12, // 24: prodvana.release.ReleaseManager.GetLatestReleases:input_type -> prodvana.release.GetLatestReleasesReq
	1,  // 25: prodvana.release.ReleaseManager.RecordRelease:output_type -> prodvana.release.RecordReleaseResp
	3,  // 26: prodvana.release.ReleaseManager.UpdateReleaseStatus:output_type -> prodvana.release.UpdateReleaseStatusResp
	6,  // 27: prodvana.release.ReleaseManager.ListReleases:output_type -> prodvana.release.ListReleasesResp
	6,  // 28: prodvana.release.ReleaseManager.ListReleasesStream:output_type -> prodvana.release.ListReleasesResp
	9,  // 29: prodvana.release.ReleaseManager.CompareRelease:output_type -> prodvana.release.CompareReleaseResp
	11, // 30: prodvana.release.ReleaseManager.PreviewRelease:output_type -> prodvana.release.PreviewReleaseResp
	13, // 31: prodvana.release.ReleaseManager.GetLatestReleases:output_type -> prodvana.release.GetLatestReleasesResp
	25, // [25:32] is the sub-list for method output_type
	18, // [18:25] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_prodvana_release_manager_proto_init() }
func file_prodvana_release_manager_proto_init() {
	if File_prodvana_release_manager_proto != nil {
		return
	}
	file_prodvana_release_object_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_prodvana_release_manager_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordReleaseReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_release_manager_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordReleaseResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_release_manager_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateReleaseStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_release_manager_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateReleaseStatusResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_release_manager_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_release_manager_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListReleasesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_release_manager_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListReleasesResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_release_manager_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_release_manager_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompareReleaseReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_release_manager_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompareReleaseResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_release_manager_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreviewReleaseReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_release_manager_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreviewReleaseResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_release_manager_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestReleasesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prodvana_release_manager_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestReleasesResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_prodvana_release_manager_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*ReleaseRef_ReleaseId)(nil),
		(*ReleaseRef_Config)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_prodvana_release_manager_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_prodvana_release_manager_proto_goTypes,
		DependencyIndexes: file_prodvana_release_manager_proto_depIdxs,
		MessageInfos:      file_prodvana_release_manager_proto_msgTypes,
	}.Build()
	File_prodvana_release_manager_proto = out.File
	file_prodvana_release_manager_proto_rawDesc = nil
	file_prodvana_release_manager_proto_goTypes = nil
	file_prodvana_release_manager_proto_depIdxs = nil
}
