// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.10
// source: prodvana/release/manager.proto

package release

import (
	context "context"
	deployment "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/deployment"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ReleaseManager_RecordRelease_FullMethodName        = "/prodvana.release.ReleaseManager/RecordRelease"
	ReleaseManager_UpdateReleaseStatus_FullMethodName  = "/prodvana.release.ReleaseManager/UpdateReleaseStatus"
	ReleaseManager_ListReleases_FullMethodName         = "/prodvana.release.ReleaseManager/ListReleases"
	ReleaseManager_ListReleasesStream_FullMethodName   = "/prodvana.release.ReleaseManager/ListReleasesStream"
	ReleaseManager_CompareRelease_FullMethodName       = "/prodvana.release.ReleaseManager/CompareRelease"
	ReleaseManager_PreviewRelease_FullMethodName       = "/prodvana.release.ReleaseManager/PreviewRelease"
	ReleaseManager_GetLatestReleases_FullMethodName    = "/prodvana.release.ReleaseManager/GetLatestReleases"
	ReleaseManager_CheckCommitInRelease_FullMethodName = "/prodvana.release.ReleaseManager/CheckCommitInRelease"
)

// ReleaseManagerClient is the client API for ReleaseManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReleaseManagerClient interface {
	RecordRelease(ctx context.Context, in *deployment.RecordDeploymentReq, opts ...grpc.CallOption) (*deployment.RecordDeploymentResp, error)
	UpdateReleaseStatus(ctx context.Context, in *deployment.UpdateDeploymentStatusReq, opts ...grpc.CallOption) (*deployment.UpdateDeploymentStatusResp, error)
	ListReleases(ctx context.Context, in *deployment.ListDeploymentsReq, opts ...grpc.CallOption) (*deployment.ListDeploymentsResp, error)
	// page tokens arguments are ignored here
	ListReleasesStream(ctx context.Context, in *deployment.ListDeploymentsReq, opts ...grpc.CallOption) (ReleaseManager_ListReleasesStreamClient, error)
	CompareRelease(ctx context.Context, in *deployment.CompareDeploymentReq, opts ...grpc.CallOption) (*deployment.CompareDeploymentResp, error)
	PreviewRelease(ctx context.Context, in *deployment.PreviewDeploymentReq, opts ...grpc.CallOption) (*deployment.PreviewDeploymentResp, error)
	// returns the latest releases for each (application, service, release channel) tuple.
	GetLatestReleases(ctx context.Context, in *deployment.GetLatestDeploymentsReq, opts ...grpc.CallOption) (*deployment.GetLatestDeploymentsResp, error)
	CheckCommitInRelease(ctx context.Context, in *deployment.CheckCommitInDeploymentReq, opts ...grpc.CallOption) (*deployment.CheckCommitInDeploymentResp, error)
}

type releaseManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewReleaseManagerClient(cc grpc.ClientConnInterface) ReleaseManagerClient {
	return &releaseManagerClient{cc}
}

func (c *releaseManagerClient) RecordRelease(ctx context.Context, in *deployment.RecordDeploymentReq, opts ...grpc.CallOption) (*deployment.RecordDeploymentResp, error) {
	out := new(deployment.RecordDeploymentResp)
	err := c.cc.Invoke(ctx, ReleaseManager_RecordRelease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseManagerClient) UpdateReleaseStatus(ctx context.Context, in *deployment.UpdateDeploymentStatusReq, opts ...grpc.CallOption) (*deployment.UpdateDeploymentStatusResp, error) {
	out := new(deployment.UpdateDeploymentStatusResp)
	err := c.cc.Invoke(ctx, ReleaseManager_UpdateReleaseStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseManagerClient) ListReleases(ctx context.Context, in *deployment.ListDeploymentsReq, opts ...grpc.CallOption) (*deployment.ListDeploymentsResp, error) {
	out := new(deployment.ListDeploymentsResp)
	err := c.cc.Invoke(ctx, ReleaseManager_ListReleases_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseManagerClient) ListReleasesStream(ctx context.Context, in *deployment.ListDeploymentsReq, opts ...grpc.CallOption) (ReleaseManager_ListReleasesStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ReleaseManager_ServiceDesc.Streams[0], ReleaseManager_ListReleasesStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &releaseManagerListReleasesStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ReleaseManager_ListReleasesStreamClient interface {
	Recv() (*deployment.ListDeploymentsResp, error)
	grpc.ClientStream
}

type releaseManagerListReleasesStreamClient struct {
	grpc.ClientStream
}

func (x *releaseManagerListReleasesStreamClient) Recv() (*deployment.ListDeploymentsResp, error) {
	m := new(deployment.ListDeploymentsResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *releaseManagerClient) CompareRelease(ctx context.Context, in *deployment.CompareDeploymentReq, opts ...grpc.CallOption) (*deployment.CompareDeploymentResp, error) {
	out := new(deployment.CompareDeploymentResp)
	err := c.cc.Invoke(ctx, ReleaseManager_CompareRelease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseManagerClient) PreviewRelease(ctx context.Context, in *deployment.PreviewDeploymentReq, opts ...grpc.CallOption) (*deployment.PreviewDeploymentResp, error) {
	out := new(deployment.PreviewDeploymentResp)
	err := c.cc.Invoke(ctx, ReleaseManager_PreviewRelease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseManagerClient) GetLatestReleases(ctx context.Context, in *deployment.GetLatestDeploymentsReq, opts ...grpc.CallOption) (*deployment.GetLatestDeploymentsResp, error) {
	out := new(deployment.GetLatestDeploymentsResp)
	err := c.cc.Invoke(ctx, ReleaseManager_GetLatestReleases_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseManagerClient) CheckCommitInRelease(ctx context.Context, in *deployment.CheckCommitInDeploymentReq, opts ...grpc.CallOption) (*deployment.CheckCommitInDeploymentResp, error) {
	out := new(deployment.CheckCommitInDeploymentResp)
	err := c.cc.Invoke(ctx, ReleaseManager_CheckCommitInRelease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReleaseManagerServer is the server API for ReleaseManager service.
// All implementations must embed UnimplementedReleaseManagerServer
// for forward compatibility
type ReleaseManagerServer interface {
	RecordRelease(context.Context, *deployment.RecordDeploymentReq) (*deployment.RecordDeploymentResp, error)
	UpdateReleaseStatus(context.Context, *deployment.UpdateDeploymentStatusReq) (*deployment.UpdateDeploymentStatusResp, error)
	ListReleases(context.Context, *deployment.ListDeploymentsReq) (*deployment.ListDeploymentsResp, error)
	// page tokens arguments are ignored here
	ListReleasesStream(*deployment.ListDeploymentsReq, ReleaseManager_ListReleasesStreamServer) error
	CompareRelease(context.Context, *deployment.CompareDeploymentReq) (*deployment.CompareDeploymentResp, error)
	PreviewRelease(context.Context, *deployment.PreviewDeploymentReq) (*deployment.PreviewDeploymentResp, error)
	// returns the latest releases for each (application, service, release channel) tuple.
	GetLatestReleases(context.Context, *deployment.GetLatestDeploymentsReq) (*deployment.GetLatestDeploymentsResp, error)
	CheckCommitInRelease(context.Context, *deployment.CheckCommitInDeploymentReq) (*deployment.CheckCommitInDeploymentResp, error)
	mustEmbedUnimplementedReleaseManagerServer()
}

// UnimplementedReleaseManagerServer must be embedded to have forward compatible implementations.
type UnimplementedReleaseManagerServer struct {
}

func (UnimplementedReleaseManagerServer) RecordRelease(context.Context, *deployment.RecordDeploymentReq) (*deployment.RecordDeploymentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordRelease not implemented")
}
func (UnimplementedReleaseManagerServer) UpdateReleaseStatus(context.Context, *deployment.UpdateDeploymentStatusReq) (*deployment.UpdateDeploymentStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReleaseStatus not implemented")
}
func (UnimplementedReleaseManagerServer) ListReleases(context.Context, *deployment.ListDeploymentsReq) (*deployment.ListDeploymentsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReleases not implemented")
}
func (UnimplementedReleaseManagerServer) ListReleasesStream(*deployment.ListDeploymentsReq, ReleaseManager_ListReleasesStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ListReleasesStream not implemented")
}
func (UnimplementedReleaseManagerServer) CompareRelease(context.Context, *deployment.CompareDeploymentReq) (*deployment.CompareDeploymentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompareRelease not implemented")
}
func (UnimplementedReleaseManagerServer) PreviewRelease(context.Context, *deployment.PreviewDeploymentReq) (*deployment.PreviewDeploymentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewRelease not implemented")
}
func (UnimplementedReleaseManagerServer) GetLatestReleases(context.Context, *deployment.GetLatestDeploymentsReq) (*deployment.GetLatestDeploymentsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestReleases not implemented")
}
func (UnimplementedReleaseManagerServer) CheckCommitInRelease(context.Context, *deployment.CheckCommitInDeploymentReq) (*deployment.CheckCommitInDeploymentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckCommitInRelease not implemented")
}
func (UnimplementedReleaseManagerServer) mustEmbedUnimplementedReleaseManagerServer() {}

// UnsafeReleaseManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReleaseManagerServer will
// result in compilation errors.
type UnsafeReleaseManagerServer interface {
	mustEmbedUnimplementedReleaseManagerServer()
}

func RegisterReleaseManagerServer(s grpc.ServiceRegistrar, srv ReleaseManagerServer) {
	s.RegisterService(&ReleaseManager_ServiceDesc, srv)
}

func _ReleaseManager_RecordRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(deployment.RecordDeploymentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseManagerServer).RecordRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReleaseManager_RecordRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseManagerServer).RecordRelease(ctx, req.(*deployment.RecordDeploymentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReleaseManager_UpdateReleaseStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(deployment.UpdateDeploymentStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseManagerServer).UpdateReleaseStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReleaseManager_UpdateReleaseStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseManagerServer).UpdateReleaseStatus(ctx, req.(*deployment.UpdateDeploymentStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReleaseManager_ListReleases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(deployment.ListDeploymentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseManagerServer).ListReleases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReleaseManager_ListReleases_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseManagerServer).ListReleases(ctx, req.(*deployment.ListDeploymentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReleaseManager_ListReleasesStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(deployment.ListDeploymentsReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReleaseManagerServer).ListReleasesStream(m, &releaseManagerListReleasesStreamServer{stream})
}

type ReleaseManager_ListReleasesStreamServer interface {
	Send(*deployment.ListDeploymentsResp) error
	grpc.ServerStream
}

type releaseManagerListReleasesStreamServer struct {
	grpc.ServerStream
}

func (x *releaseManagerListReleasesStreamServer) Send(m *deployment.ListDeploymentsResp) error {
	return x.ServerStream.SendMsg(m)
}

func _ReleaseManager_CompareRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(deployment.CompareDeploymentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseManagerServer).CompareRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReleaseManager_CompareRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseManagerServer).CompareRelease(ctx, req.(*deployment.CompareDeploymentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReleaseManager_PreviewRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(deployment.PreviewDeploymentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseManagerServer).PreviewRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReleaseManager_PreviewRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseManagerServer).PreviewRelease(ctx, req.(*deployment.PreviewDeploymentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReleaseManager_GetLatestReleases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(deployment.GetLatestDeploymentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseManagerServer).GetLatestReleases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReleaseManager_GetLatestReleases_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseManagerServer).GetLatestReleases(ctx, req.(*deployment.GetLatestDeploymentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReleaseManager_CheckCommitInRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(deployment.CheckCommitInDeploymentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseManagerServer).CheckCommitInRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReleaseManager_CheckCommitInRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseManagerServer).CheckCommitInRelease(ctx, req.(*deployment.CheckCommitInDeploymentReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ReleaseManager_ServiceDesc is the grpc.ServiceDesc for ReleaseManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReleaseManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "prodvana.release.ReleaseManager",
	HandlerType: (*ReleaseManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RecordRelease",
			Handler:    _ReleaseManager_RecordRelease_Handler,
		},
		{
			MethodName: "UpdateReleaseStatus",
			Handler:    _ReleaseManager_UpdateReleaseStatus_Handler,
		},
		{
			MethodName: "ListReleases",
			Handler:    _ReleaseManager_ListReleases_Handler,
		},
		{
			MethodName: "CompareRelease",
			Handler:    _ReleaseManager_CompareRelease_Handler,
		},
		{
			MethodName: "PreviewRelease",
			Handler:    _ReleaseManager_PreviewRelease_Handler,
		},
		{
			MethodName: "GetLatestReleases",
			Handler:    _ReleaseManager_GetLatestReleases_Handler,
		},
		{
			MethodName: "CheckCommitInRelease",
			Handler:    _ReleaseManager_CheckCommitInRelease_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListReleasesStream",
			Handler:       _ReleaseManager_ListReleasesStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "prodvana/release/manager.proto",
}
