// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: prodvana/release/manager.proto

package release

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on RecordReleaseReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RecordReleaseReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecordReleaseReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RecordReleaseReqMultiError, or nil if none found.
func (m *RecordReleaseReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RecordReleaseReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetConfig() == nil {
		err := RecordReleaseReqValidationError{
			field:  "Config",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RecordReleaseReqValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RecordReleaseReqValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RecordReleaseReqValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Pending

	if len(errors) > 0 {
		return RecordReleaseReqMultiError(errors)
	}

	return nil
}

// RecordReleaseReqMultiError is an error wrapping multiple validation errors
// returned by RecordReleaseReq.ValidateAll() if the designated constraints
// aren't met.
type RecordReleaseReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecordReleaseReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecordReleaseReqMultiError) AllErrors() []error { return m }

// RecordReleaseReqValidationError is the validation error returned by
// RecordReleaseReq.Validate if the designated constraints aren't met.
type RecordReleaseReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecordReleaseReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecordReleaseReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecordReleaseReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecordReleaseReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecordReleaseReqValidationError) ErrorName() string { return "RecordReleaseReqValidationError" }

// Error satisfies the builtin error interface
func (e RecordReleaseReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecordReleaseReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecordReleaseReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecordReleaseReqValidationError{}

// Validate checks the field values on RecordReleaseResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RecordReleaseResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecordReleaseResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RecordReleaseRespMultiError, or nil if none found.
func (m *RecordReleaseResp) ValidateAll() error {
	return m.validate(true)
}

func (m *RecordReleaseResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMeta()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RecordReleaseRespValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RecordReleaseRespValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RecordReleaseRespValidationError{
				field:  "Meta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RecordReleaseRespMultiError(errors)
	}

	return nil
}

// RecordReleaseRespMultiError is an error wrapping multiple validation errors
// returned by RecordReleaseResp.ValidateAll() if the designated constraints
// aren't met.
type RecordReleaseRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecordReleaseRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecordReleaseRespMultiError) AllErrors() []error { return m }

// RecordReleaseRespValidationError is the validation error returned by
// RecordReleaseResp.Validate if the designated constraints aren't met.
type RecordReleaseRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecordReleaseRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecordReleaseRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecordReleaseRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecordReleaseRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecordReleaseRespValidationError) ErrorName() string {
	return "RecordReleaseRespValidationError"
}

// Error satisfies the builtin error interface
func (e RecordReleaseRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecordReleaseResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecordReleaseRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecordReleaseRespValidationError{}

// Validate checks the field values on UpdateReleaseStatusReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateReleaseStatusReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateReleaseStatusReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateReleaseStatusReqMultiError, or nil if none found.
func (m *UpdateReleaseStatusReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateReleaseStatusReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReleaseId

	// no validation rules for Status

	if len(errors) > 0 {
		return UpdateReleaseStatusReqMultiError(errors)
	}

	return nil
}

// UpdateReleaseStatusReqMultiError is an error wrapping multiple validation
// errors returned by UpdateReleaseStatusReq.ValidateAll() if the designated
// constraints aren't met.
type UpdateReleaseStatusReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateReleaseStatusReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateReleaseStatusReqMultiError) AllErrors() []error { return m }

// UpdateReleaseStatusReqValidationError is the validation error returned by
// UpdateReleaseStatusReq.Validate if the designated constraints aren't met.
type UpdateReleaseStatusReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateReleaseStatusReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateReleaseStatusReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateReleaseStatusReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateReleaseStatusReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateReleaseStatusReqValidationError) ErrorName() string {
	return "UpdateReleaseStatusReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateReleaseStatusReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateReleaseStatusReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateReleaseStatusReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateReleaseStatusReqValidationError{}

// Validate checks the field values on UpdateReleaseStatusResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateReleaseStatusResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateReleaseStatusResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateReleaseStatusRespMultiError, or nil if none found.
func (m *UpdateReleaseStatusResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateReleaseStatusResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return UpdateReleaseStatusRespMultiError(errors)
	}

	return nil
}

// UpdateReleaseStatusRespMultiError is an error wrapping multiple validation
// errors returned by UpdateReleaseStatusResp.ValidateAll() if the designated
// constraints aren't met.
type UpdateReleaseStatusRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateReleaseStatusRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateReleaseStatusRespMultiError) AllErrors() []error { return m }

// UpdateReleaseStatusRespValidationError is the validation error returned by
// UpdateReleaseStatusResp.Validate if the designated constraints aren't met.
type UpdateReleaseStatusRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateReleaseStatusRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateReleaseStatusRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateReleaseStatusRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateReleaseStatusRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateReleaseStatusRespValidationError) ErrorName() string {
	return "UpdateReleaseStatusRespValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateReleaseStatusRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateReleaseStatusResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateReleaseStatusRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateReleaseStatusRespValidationError{}

// Validate checks the field values on ReleaseFilter with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReleaseFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReleaseFilter with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReleaseFilterMultiError, or
// nil if none found.
func (m *ReleaseFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *ReleaseFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Application

	// no validation rules for DesiredStateId

	if len(errors) > 0 {
		return ReleaseFilterMultiError(errors)
	}

	return nil
}

// ReleaseFilterMultiError is an error wrapping multiple validation errors
// returned by ReleaseFilter.ValidateAll() if the designated constraints
// aren't met.
type ReleaseFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReleaseFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReleaseFilterMultiError) AllErrors() []error { return m }

// ReleaseFilterValidationError is the validation error returned by
// ReleaseFilter.Validate if the designated constraints aren't met.
type ReleaseFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleaseFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleaseFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleaseFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleaseFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleaseFilterValidationError) ErrorName() string { return "ReleaseFilterValidationError" }

// Error satisfies the builtin error interface
func (e ReleaseFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleaseFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleaseFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleaseFilterValidationError{}

// Validate checks the field values on ListReleasesReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListReleasesReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListReleasesReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListReleasesReqMultiError, or nil if none found.
func (m *ListReleasesReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListReleasesReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFilters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListReleasesReqValidationError{
						field:  fmt.Sprintf("Filters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListReleasesReqValidationError{
						field:  fmt.Sprintf("Filters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListReleasesReqValidationError{
					field:  fmt.Sprintf("Filters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListReleasesReqValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListReleasesReqValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListReleasesReqValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for StartingReleaseId

	// no validation rules for EndingReleaseId

	// no validation rules for PageToken

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListReleasesReqMultiError(errors)
	}

	return nil
}

// ListReleasesReqMultiError is an error wrapping multiple validation errors
// returned by ListReleasesReq.ValidateAll() if the designated constraints
// aren't met.
type ListReleasesReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListReleasesReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListReleasesReqMultiError) AllErrors() []error { return m }

// ListReleasesReqValidationError is the validation error returned by
// ListReleasesReq.Validate if the designated constraints aren't met.
type ListReleasesReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListReleasesReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListReleasesReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListReleasesReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListReleasesReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListReleasesReqValidationError) ErrorName() string { return "ListReleasesReqValidationError" }

// Error satisfies the builtin error interface
func (e ListReleasesReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListReleasesReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListReleasesReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListReleasesReqValidationError{}

// Validate checks the field values on ListReleasesResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListReleasesResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListReleasesResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListReleasesRespMultiError, or nil if none found.
func (m *ListReleasesResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListReleasesResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetReleases() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListReleasesRespValidationError{
						field:  fmt.Sprintf("Releases[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListReleasesRespValidationError{
						field:  fmt.Sprintf("Releases[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListReleasesRespValidationError{
					field:  fmt.Sprintf("Releases[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListReleasesRespMultiError(errors)
	}

	return nil
}

// ListReleasesRespMultiError is an error wrapping multiple validation errors
// returned by ListReleasesResp.ValidateAll() if the designated constraints
// aren't met.
type ListReleasesRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListReleasesRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListReleasesRespMultiError) AllErrors() []error { return m }

// ListReleasesRespValidationError is the validation error returned by
// ListReleasesResp.Validate if the designated constraints aren't met.
type ListReleasesRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListReleasesRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListReleasesRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListReleasesRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListReleasesRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListReleasesRespValidationError) ErrorName() string { return "ListReleasesRespValidationError" }

// Error satisfies the builtin error interface
func (e ListReleasesRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListReleasesResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListReleasesRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListReleasesRespValidationError{}

// Validate checks the field values on ReleaseRef with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReleaseRef) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReleaseRef with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReleaseRefMultiError, or
// nil if none found.
func (m *ReleaseRef) ValidateAll() error {
	return m.validate(true)
}

func (m *ReleaseRef) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	oneofRefPresent := false
	switch v := m.Ref.(type) {
	case *ReleaseRef_ReleaseId:
		if v == nil {
			err := ReleaseRefValidationError{
				field:  "Ref",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofRefPresent = true
		// no validation rules for ReleaseId
	case *ReleaseRef_Config:
		if v == nil {
			err := ReleaseRefValidationError{
				field:  "Ref",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofRefPresent = true

		if all {
			switch v := interface{}(m.GetConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReleaseRefValidationError{
						field:  "Config",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReleaseRefValidationError{
						field:  "Config",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReleaseRefValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofRefPresent {
		err := ReleaseRefValidationError{
			field:  "Ref",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReleaseRefMultiError(errors)
	}

	return nil
}

// ReleaseRefMultiError is an error wrapping multiple validation errors
// returned by ReleaseRef.ValidateAll() if the designated constraints aren't met.
type ReleaseRefMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReleaseRefMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReleaseRefMultiError) AllErrors() []error { return m }

// ReleaseRefValidationError is the validation error returned by
// ReleaseRef.Validate if the designated constraints aren't met.
type ReleaseRefValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleaseRefValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleaseRefValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleaseRefValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleaseRefValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleaseRefValidationError) ErrorName() string { return "ReleaseRefValidationError" }

// Error satisfies the builtin error interface
func (e ReleaseRefValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleaseRef.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleaseRefValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleaseRefValidationError{}

// Validate checks the field values on CompareReleaseReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CompareReleaseReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompareReleaseReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompareReleaseReqMultiError, or nil if none found.
func (m *CompareReleaseReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CompareReleaseReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetNewRelease() == nil {
		err := CompareReleaseReqValidationError{
			field:  "NewRelease",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetNewRelease()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CompareReleaseReqValidationError{
					field:  "NewRelease",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CompareReleaseReqValidationError{
					field:  "NewRelease",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNewRelease()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompareReleaseReqValidationError{
				field:  "NewRelease",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPrevRelease()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CompareReleaseReqValidationError{
					field:  "PrevRelease",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CompareReleaseReqValidationError{
					field:  "PrevRelease",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPrevRelease()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompareReleaseReqValidationError{
				field:  "PrevRelease",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CompareReleaseReqMultiError(errors)
	}

	return nil
}

// CompareReleaseReqMultiError is an error wrapping multiple validation errors
// returned by CompareReleaseReq.ValidateAll() if the designated constraints
// aren't met.
type CompareReleaseReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompareReleaseReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompareReleaseReqMultiError) AllErrors() []error { return m }

// CompareReleaseReqValidationError is the validation error returned by
// CompareReleaseReq.Validate if the designated constraints aren't met.
type CompareReleaseReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompareReleaseReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompareReleaseReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompareReleaseReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompareReleaseReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompareReleaseReqValidationError) ErrorName() string {
	return "CompareReleaseReqValidationError"
}

// Error satisfies the builtin error interface
func (e CompareReleaseReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompareReleaseReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompareReleaseReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompareReleaseReqValidationError{}

// Validate checks the field values on CompareReleaseResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompareReleaseResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompareReleaseResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompareReleaseRespMultiError, or nil if none found.
func (m *CompareReleaseResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CompareReleaseResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetComparison()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CompareReleaseRespValidationError{
					field:  "Comparison",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CompareReleaseRespValidationError{
					field:  "Comparison",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComparison()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompareReleaseRespValidationError{
				field:  "Comparison",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CompareReleaseRespMultiError(errors)
	}

	return nil
}

// CompareReleaseRespMultiError is an error wrapping multiple validation errors
// returned by CompareReleaseResp.ValidateAll() if the designated constraints
// aren't met.
type CompareReleaseRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompareReleaseRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompareReleaseRespMultiError) AllErrors() []error { return m }

// CompareReleaseRespValidationError is the validation error returned by
// CompareReleaseResp.Validate if the designated constraints aren't met.
type CompareReleaseRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompareReleaseRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompareReleaseRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompareReleaseRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompareReleaseRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompareReleaseRespValidationError) ErrorName() string {
	return "CompareReleaseRespValidationError"
}

// Error satisfies the builtin error interface
func (e CompareReleaseRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompareReleaseResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompareReleaseRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompareReleaseRespValidationError{}

// Validate checks the field values on PreviewReleaseReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PreviewReleaseReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PreviewReleaseReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PreviewReleaseReqMultiError, or nil if none found.
func (m *PreviewReleaseReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PreviewReleaseReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetConfig() == nil {
		err := PreviewReleaseReqValidationError{
			field:  "Config",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PreviewReleaseReqValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PreviewReleaseReqValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PreviewReleaseReqValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPrevRelease()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PreviewReleaseReqValidationError{
					field:  "PrevRelease",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PreviewReleaseReqValidationError{
					field:  "PrevRelease",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPrevRelease()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PreviewReleaseReqValidationError{
				field:  "PrevRelease",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PreviewReleaseReqMultiError(errors)
	}

	return nil
}

// PreviewReleaseReqMultiError is an error wrapping multiple validation errors
// returned by PreviewReleaseReq.ValidateAll() if the designated constraints
// aren't met.
type PreviewReleaseReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PreviewReleaseReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PreviewReleaseReqMultiError) AllErrors() []error { return m }

// PreviewReleaseReqValidationError is the validation error returned by
// PreviewReleaseReq.Validate if the designated constraints aren't met.
type PreviewReleaseReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PreviewReleaseReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PreviewReleaseReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PreviewReleaseReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PreviewReleaseReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PreviewReleaseReqValidationError) ErrorName() string {
	return "PreviewReleaseReqValidationError"
}

// Error satisfies the builtin error interface
func (e PreviewReleaseReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPreviewReleaseReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PreviewReleaseReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PreviewReleaseReqValidationError{}

// Validate checks the field values on PreviewReleaseResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PreviewReleaseResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PreviewReleaseResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PreviewReleaseRespMultiError, or nil if none found.
func (m *PreviewReleaseResp) ValidateAll() error {
	return m.validate(true)
}

func (m *PreviewReleaseResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRelease()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PreviewReleaseRespValidationError{
					field:  "Release",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PreviewReleaseRespValidationError{
					field:  "Release",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRelease()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PreviewReleaseRespValidationError{
				field:  "Release",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PreviewReleaseRespMultiError(errors)
	}

	return nil
}

// PreviewReleaseRespMultiError is an error wrapping multiple validation errors
// returned by PreviewReleaseResp.ValidateAll() if the designated constraints
// aren't met.
type PreviewReleaseRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PreviewReleaseRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PreviewReleaseRespMultiError) AllErrors() []error { return m }

// PreviewReleaseRespValidationError is the validation error returned by
// PreviewReleaseResp.Validate if the designated constraints aren't met.
type PreviewReleaseRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PreviewReleaseRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PreviewReleaseRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PreviewReleaseRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PreviewReleaseRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PreviewReleaseRespValidationError) ErrorName() string {
	return "PreviewReleaseRespValidationError"
}

// Error satisfies the builtin error interface
func (e PreviewReleaseRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPreviewReleaseResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PreviewReleaseRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PreviewReleaseRespValidationError{}

// Validate checks the field values on GetLatestReleasesReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLatestReleasesReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLatestReleasesReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLatestReleasesReqMultiError, or nil if none found.
func (m *GetLatestReleasesReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLatestReleasesReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFilters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetLatestReleasesReqValidationError{
						field:  fmt.Sprintf("Filters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetLatestReleasesReqValidationError{
						field:  fmt.Sprintf("Filters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetLatestReleasesReqValidationError{
					field:  fmt.Sprintf("Filters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetLatestReleasesReqValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetLatestReleasesReqValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetLatestReleasesReqValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	// no validation rules for PageToken

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetLatestReleasesReqMultiError(errors)
	}

	return nil
}

// GetLatestReleasesReqMultiError is an error wrapping multiple validation
// errors returned by GetLatestReleasesReq.ValidateAll() if the designated
// constraints aren't met.
type GetLatestReleasesReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLatestReleasesReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLatestReleasesReqMultiError) AllErrors() []error { return m }

// GetLatestReleasesReqValidationError is the validation error returned by
// GetLatestReleasesReq.Validate if the designated constraints aren't met.
type GetLatestReleasesReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLatestReleasesReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLatestReleasesReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLatestReleasesReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLatestReleasesReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLatestReleasesReqValidationError) ErrorName() string {
	return "GetLatestReleasesReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetLatestReleasesReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLatestReleasesReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLatestReleasesReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLatestReleasesReqValidationError{}

// Validate checks the field values on GetLatestReleasesResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLatestReleasesResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLatestReleasesResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLatestReleasesRespMultiError, or nil if none found.
func (m *GetLatestReleasesResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLatestReleasesResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetReleases() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetLatestReleasesRespValidationError{
						field:  fmt.Sprintf("Releases[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetLatestReleasesRespValidationError{
						field:  fmt.Sprintf("Releases[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetLatestReleasesRespValidationError{
					field:  fmt.Sprintf("Releases[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return GetLatestReleasesRespMultiError(errors)
	}

	return nil
}

// GetLatestReleasesRespMultiError is an error wrapping multiple validation
// errors returned by GetLatestReleasesResp.ValidateAll() if the designated
// constraints aren't met.
type GetLatestReleasesRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLatestReleasesRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLatestReleasesRespMultiError) AllErrors() []error { return m }

// GetLatestReleasesRespValidationError is the validation error returned by
// GetLatestReleasesResp.Validate if the designated constraints aren't met.
type GetLatestReleasesRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLatestReleasesRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLatestReleasesRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLatestReleasesRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLatestReleasesRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLatestReleasesRespValidationError) ErrorName() string {
	return "GetLatestReleasesRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetLatestReleasesRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLatestReleasesResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLatestReleasesRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLatestReleasesRespValidationError{}

// Validate checks the field values on ReleaseServiceInstance with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReleaseServiceInstance) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReleaseServiceInstance with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReleaseServiceInstanceMultiError, or nil if none found.
func (m *ReleaseServiceInstance) ValidateAll() error {
	return m.validate(true)
}

func (m *ReleaseServiceInstance) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetApplication()) < 1 {
		err := ReleaseServiceInstanceValidationError{
			field:  "Application",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetService()) < 1 {
		err := ReleaseServiceInstanceValidationError{
			field:  "Service",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetReleaseChannel()) < 1 {
		err := ReleaseServiceInstanceValidationError{
			field:  "ReleaseChannel",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReleaseServiceInstanceMultiError(errors)
	}

	return nil
}

// ReleaseServiceInstanceMultiError is an error wrapping multiple validation
// errors returned by ReleaseServiceInstance.ValidateAll() if the designated
// constraints aren't met.
type ReleaseServiceInstanceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReleaseServiceInstanceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReleaseServiceInstanceMultiError) AllErrors() []error { return m }

// ReleaseServiceInstanceValidationError is the validation error returned by
// ReleaseServiceInstance.Validate if the designated constraints aren't met.
type ReleaseServiceInstanceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleaseServiceInstanceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleaseServiceInstanceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleaseServiceInstanceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleaseServiceInstanceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleaseServiceInstanceValidationError) ErrorName() string {
	return "ReleaseServiceInstanceValidationError"
}

// Error satisfies the builtin error interface
func (e ReleaseServiceInstanceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleaseServiceInstance.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleaseServiceInstanceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleaseServiceInstanceValidationError{}

// Validate checks the field values on CheckCommitInReleaseReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckCommitInReleaseReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckCommitInReleaseReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckCommitInReleaseReqMultiError, or nil if none found.
func (m *CheckCommitInReleaseReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckCommitInReleaseReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetRepository()) < 1 {
		err := CheckCommitInReleaseReqValidationError{
			field:  "Repository",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCommit()) < 1 {
		err := CheckCommitInReleaseReqValidationError{
			field:  "Commit",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	oneofReleaseOneofPresent := false
	switch v := m.ReleaseOneof.(type) {
	case *CheckCommitInReleaseReq_ReleaseId:
		if v == nil {
			err := CheckCommitInReleaseReqValidationError{
				field:  "ReleaseOneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofReleaseOneofPresent = true

		if utf8.RuneCountInString(m.GetReleaseId()) < 1 {
			err := CheckCommitInReleaseReqValidationError{
				field:  "ReleaseId",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *CheckCommitInReleaseReq_ReleaseServiceInstance:
		if v == nil {
			err := CheckCommitInReleaseReqValidationError{
				field:  "ReleaseOneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofReleaseOneofPresent = true

		if m.GetReleaseServiceInstance() == nil {
			err := CheckCommitInReleaseReqValidationError{
				field:  "ReleaseServiceInstance",
				reason: "value is required",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetReleaseServiceInstance()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CheckCommitInReleaseReqValidationError{
						field:  "ReleaseServiceInstance",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CheckCommitInReleaseReqValidationError{
						field:  "ReleaseServiceInstance",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetReleaseServiceInstance()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CheckCommitInReleaseReqValidationError{
					field:  "ReleaseServiceInstance",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofReleaseOneofPresent {
		err := CheckCommitInReleaseReqValidationError{
			field:  "ReleaseOneof",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CheckCommitInReleaseReqMultiError(errors)
	}

	return nil
}

// CheckCommitInReleaseReqMultiError is an error wrapping multiple validation
// errors returned by CheckCommitInReleaseReq.ValidateAll() if the designated
// constraints aren't met.
type CheckCommitInReleaseReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckCommitInReleaseReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckCommitInReleaseReqMultiError) AllErrors() []error { return m }

// CheckCommitInReleaseReqValidationError is the validation error returned by
// CheckCommitInReleaseReq.Validate if the designated constraints aren't met.
type CheckCommitInReleaseReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckCommitInReleaseReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckCommitInReleaseReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckCommitInReleaseReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckCommitInReleaseReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckCommitInReleaseReqValidationError) ErrorName() string {
	return "CheckCommitInReleaseReqValidationError"
}

// Error satisfies the builtin error interface
func (e CheckCommitInReleaseReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckCommitInReleaseReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckCommitInReleaseReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckCommitInReleaseReqValidationError{}

// Validate checks the field values on CheckCommitInReleaseResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckCommitInReleaseResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckCommitInReleaseResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckCommitInReleaseRespMultiError, or nil if none found.
func (m *CheckCommitInReleaseResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckCommitInReleaseResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return CheckCommitInReleaseRespMultiError(errors)
	}

	return nil
}

// CheckCommitInReleaseRespMultiError is an error wrapping multiple validation
// errors returned by CheckCommitInReleaseResp.ValidateAll() if the designated
// constraints aren't met.
type CheckCommitInReleaseRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckCommitInReleaseRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckCommitInReleaseRespMultiError) AllErrors() []error { return m }

// CheckCommitInReleaseRespValidationError is the validation error returned by
// CheckCommitInReleaseResp.Validate if the designated constraints aren't met.
type CheckCommitInReleaseRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckCommitInReleaseRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckCommitInReleaseRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckCommitInReleaseRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckCommitInReleaseRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckCommitInReleaseRespValidationError) ErrorName() string {
	return "CheckCommitInReleaseRespValidationError"
}

// Error satisfies the builtin error interface
func (e CheckCommitInReleaseRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckCommitInReleaseResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckCommitInReleaseRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckCommitInReleaseRespValidationError{}
