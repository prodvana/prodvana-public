// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: prodvana/protection/protection_config.proto

package protection

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ProtectionConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ProtectionConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProtectionConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProtectionConfigMultiError, or nil if none found.
func (m *ProtectionConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *ProtectionConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 63 {
		err := ProtectionConfigValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 63 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ProtectionConfig_Name_Pattern.MatchString(m.GetName()) {
		err := ProtectionConfigValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[a-z]([a-z0-9-]*[a-z0-9]){0,1}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	oneofExecConfigPresent := false
	switch v := m.ExecConfig.(type) {
	case *ProtectionConfig_TaskConfig:
		if v == nil {
			err := ProtectionConfigValidationError{
				field:  "ExecConfig",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofExecConfigPresent = true

		if all {
			switch v := interface{}(m.GetTaskConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProtectionConfigValidationError{
						field:  "TaskConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProtectionConfigValidationError{
						field:  "TaskConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTaskConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProtectionConfigValidationError{
					field:  "TaskConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofExecConfigPresent {
		err := ProtectionConfigValidationError{
			field:  "ExecConfig",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ProtectionConfigMultiError(errors)
	}

	return nil
}

// ProtectionConfigMultiError is an error wrapping multiple validation errors
// returned by ProtectionConfig.ValidateAll() if the designated constraints
// aren't met.
type ProtectionConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProtectionConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProtectionConfigMultiError) AllErrors() []error { return m }

// ProtectionConfigValidationError is the validation error returned by
// ProtectionConfig.Validate if the designated constraints aren't met.
type ProtectionConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProtectionConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProtectionConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProtectionConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProtectionConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProtectionConfigValidationError) ErrorName() string { return "ProtectionConfigValidationError" }

// Error satisfies the builtin error interface
func (e ProtectionConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProtectionConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProtectionConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProtectionConfigValidationError{}

var _ProtectionConfig_Name_Pattern = regexp.MustCompile("^[a-z]([a-z0-9-]*[a-z0-9]){0,1}$")

// Validate checks the field values on ProtectionInstanceConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProtectionInstanceConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProtectionInstanceConfig with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProtectionInstanceConfigMultiError, or nil if none found.
func (m *ProtectionInstanceConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *ProtectionInstanceConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProtectionInstanceConfigValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProtectionInstanceConfigValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProtectionInstanceConfigValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProtectionInstanceConfigMultiError(errors)
	}

	return nil
}

// ProtectionInstanceConfigMultiError is an error wrapping multiple validation
// errors returned by ProtectionInstanceConfig.ValidateAll() if the designated
// constraints aren't met.
type ProtectionInstanceConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProtectionInstanceConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProtectionInstanceConfigMultiError) AllErrors() []error { return m }

// ProtectionInstanceConfigValidationError is the validation error returned by
// ProtectionInstanceConfig.Validate if the designated constraints aren't met.
type ProtectionInstanceConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProtectionInstanceConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProtectionInstanceConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProtectionInstanceConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProtectionInstanceConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProtectionInstanceConfigValidationError) ErrorName() string {
	return "ProtectionInstanceConfigValidationError"
}

// Error satisfies the builtin error interface
func (e ProtectionInstanceConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProtectionInstanceConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProtectionInstanceConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProtectionInstanceConfigValidationError{}
