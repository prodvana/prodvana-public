// Code generated by protoc-gen-go-vtproto. DO NOT EDIT.
// protoc-gen-go-vtproto version: v0.6.0
// source: prodvana/protection/builtins.proto

package protection

import (
	proto "google.golang.org/protobuf/proto"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

func (m *CommitDenylistProtectionConfig_CommitDefinition_Range) CloneVT() *CommitDenylistProtectionConfig_CommitDefinition_Range {
	if m == nil {
		return (*CommitDenylistProtectionConfig_CommitDefinition_Range)(nil)
	}
	r := new(CommitDenylistProtectionConfig_CommitDefinition_Range)
	r.StartCommit = m.StartCommit
	r.EndCommit = m.EndCommit
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CommitDenylistProtectionConfig_CommitDefinition_Range) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CommitDenylistProtectionConfig_CommitDefinition) CloneVT() *CommitDenylistProtectionConfig_CommitDefinition {
	if m == nil {
		return (*CommitDenylistProtectionConfig_CommitDefinition)(nil)
	}
	r := new(CommitDenylistProtectionConfig_CommitDefinition)
	if m.CommitOneof != nil {
		r.CommitOneof = m.CommitOneof.(interface {
			CloneVT() isCommitDenylistProtectionConfig_CommitDefinition_CommitOneof
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CommitDenylistProtectionConfig_CommitDefinition) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CommitDenylistProtectionConfig_CommitDefinition_Commit) CloneVT() isCommitDenylistProtectionConfig_CommitDefinition_CommitOneof {
	if m == nil {
		return (*CommitDenylistProtectionConfig_CommitDefinition_Commit)(nil)
	}
	r := new(CommitDenylistProtectionConfig_CommitDefinition_Commit)
	r.Commit = m.Commit
	return r
}

func (m *CommitDenylistProtectionConfig_CommitDefinition_Range_) CloneVT() isCommitDenylistProtectionConfig_CommitDefinition_CommitOneof {
	if m == nil {
		return (*CommitDenylistProtectionConfig_CommitDefinition_Range_)(nil)
	}
	r := new(CommitDenylistProtectionConfig_CommitDefinition_Range_)
	r.Range = m.Range.CloneVT()
	return r
}

func (m *CommitDenylistProtectionConfig) CloneVT() *CommitDenylistProtectionConfig {
	if m == nil {
		return (*CommitDenylistProtectionConfig)(nil)
	}
	r := new(CommitDenylistProtectionConfig)
	r.Repository = m.Repository
	if rhs := m.Commits; rhs != nil {
		tmpContainer := make([]*CommitDenylistProtectionConfig_CommitDefinition, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Commits = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CommitDenylistProtectionConfig) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *TimeWindow) CloneVT() *TimeWindow {
	if m == nil {
		return (*TimeWindow)(nil)
	}
	r := new(TimeWindow)
	r.Days = m.Days
	r.Hours = m.Hours
	r.Tz = m.Tz
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *TimeWindow) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *AllowedTimesProtectionConfig) CloneVT() *AllowedTimesProtectionConfig {
	if m == nil {
		return (*AllowedTimesProtectionConfig)(nil)
	}
	r := new(AllowedTimesProtectionConfig)
	if rhs := m.Windows; rhs != nil {
		tmpContainer := make([]*TimeWindow, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Windows = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *AllowedTimesProtectionConfig) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (this *CommitDenylistProtectionConfig_CommitDefinition_Range) StableEqualVT(that *CommitDenylistProtectionConfig_CommitDefinition_Range) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.StartCommit != that.StartCommit {
		return false
	}
	if this.EndCommit != that.EndCommit {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CommitDenylistProtectionConfig_CommitDefinition_Range) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CommitDenylistProtectionConfig_CommitDefinition_Range)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *CommitDenylistProtectionConfig_CommitDefinition) StableEqualVT(that *CommitDenylistProtectionConfig_CommitDefinition) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.CommitOneof == nil && that.CommitOneof != nil {
		return false
	} else if this.CommitOneof != nil {
		if that.CommitOneof == nil {
			return false
		}
		if !this.CommitOneof.(interface {
			StableEqualVT(isCommitDenylistProtectionConfig_CommitDefinition_CommitOneof) bool
		}).StableEqualVT(that.CommitOneof) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CommitDenylistProtectionConfig_CommitDefinition) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CommitDenylistProtectionConfig_CommitDefinition)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *CommitDenylistProtectionConfig_CommitDefinition_Commit) StableEqualVT(thatIface isCommitDenylistProtectionConfig_CommitDefinition_CommitOneof) bool {
	that, ok := thatIface.(*CommitDenylistProtectionConfig_CommitDefinition_Commit)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.Commit != that.Commit {
		return false
	}
	return true
}

func (this *CommitDenylistProtectionConfig_CommitDefinition_Range_) StableEqualVT(thatIface isCommitDenylistProtectionConfig_CommitDefinition_CommitOneof) bool {
	that, ok := thatIface.(*CommitDenylistProtectionConfig_CommitDefinition_Range_)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Range, that.Range; p != q {
		if p == nil {
			p = &CommitDenylistProtectionConfig_CommitDefinition_Range{}
		}
		if q == nil {
			q = &CommitDenylistProtectionConfig_CommitDefinition_Range{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CommitDenylistProtectionConfig) StableEqualVT(that *CommitDenylistProtectionConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Repository != that.Repository {
		return false
	}
	if len(this.Commits) != len(that.Commits) {
		return false
	}
	for i, vx := range this.Commits {
		vy := that.Commits[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &CommitDenylistProtectionConfig_CommitDefinition{}
			}
			if q == nil {
				q = &CommitDenylistProtectionConfig_CommitDefinition{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CommitDenylistProtectionConfig) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CommitDenylistProtectionConfig)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *CommitDenylistProtectionConfig_CommitDefinition_Range) EqualVT(that *CommitDenylistProtectionConfig_CommitDefinition_Range) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.StartCommit != that.StartCommit {
		return false
	}
	if this.EndCommit != that.EndCommit {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CommitDenylistProtectionConfig_CommitDefinition_Range) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CommitDenylistProtectionConfig_CommitDefinition_Range)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CommitDenylistProtectionConfig_CommitDefinition) EqualVT(that *CommitDenylistProtectionConfig_CommitDefinition) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.CommitOneof == nil && that.CommitOneof != nil {
		return false
	} else if this.CommitOneof != nil {
		if that.CommitOneof == nil {
			return false
		}
		if !this.CommitOneof.(interface {
			EqualVT(isCommitDenylistProtectionConfig_CommitDefinition_CommitOneof) bool
		}).EqualVT(that.CommitOneof) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CommitDenylistProtectionConfig_CommitDefinition) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CommitDenylistProtectionConfig_CommitDefinition)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CommitDenylistProtectionConfig_CommitDefinition_Commit) EqualVT(thatIface isCommitDenylistProtectionConfig_CommitDefinition_CommitOneof) bool {
	that, ok := thatIface.(*CommitDenylistProtectionConfig_CommitDefinition_Commit)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.Commit != that.Commit {
		return false
	}
	return true
}

func (this *CommitDenylistProtectionConfig_CommitDefinition_Range_) EqualVT(thatIface isCommitDenylistProtectionConfig_CommitDefinition_CommitOneof) bool {
	that, ok := thatIface.(*CommitDenylistProtectionConfig_CommitDefinition_Range_)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Range, that.Range; p != q {
		if p == nil {
			p = &CommitDenylistProtectionConfig_CommitDefinition_Range{}
		}
		if q == nil {
			q = &CommitDenylistProtectionConfig_CommitDefinition_Range{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CommitDenylistProtectionConfig) EqualVT(that *CommitDenylistProtectionConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Repository != that.Repository {
		return false
	}
	if len(this.Commits) != len(that.Commits) {
		return false
	}
	for i, vx := range this.Commits {
		vy := that.Commits[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &CommitDenylistProtectionConfig_CommitDefinition{}
			}
			if q == nil {
				q = &CommitDenylistProtectionConfig_CommitDefinition{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CommitDenylistProtectionConfig) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CommitDenylistProtectionConfig)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *TimeWindow) StableEqualVT(that *TimeWindow) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Days != that.Days {
		return false
	}
	if this.Hours != that.Hours {
		return false
	}
	if this.Tz != that.Tz {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *TimeWindow) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*TimeWindow)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *TimeWindow) EqualVT(that *TimeWindow) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Days != that.Days {
		return false
	}
	if this.Hours != that.Hours {
		return false
	}
	if this.Tz != that.Tz {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *TimeWindow) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*TimeWindow)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *AllowedTimesProtectionConfig) StableEqualVT(that *AllowedTimesProtectionConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Windows) != len(that.Windows) {
		return false
	}
	for i, vx := range this.Windows {
		vy := that.Windows[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &TimeWindow{}
			}
			if q == nil {
				q = &TimeWindow{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *AllowedTimesProtectionConfig) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*AllowedTimesProtectionConfig)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *AllowedTimesProtectionConfig) EqualVT(that *AllowedTimesProtectionConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Windows) != len(that.Windows) {
		return false
	}
	for i, vx := range this.Windows {
		vy := that.Windows[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &TimeWindow{}
			}
			if q == nil {
				q = &TimeWindow{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *AllowedTimesProtectionConfig) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*AllowedTimesProtectionConfig)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
