// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: prodvana/protection/protection_manager.proto

package protection

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	version "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/version"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = version.Source(0)
)

// Validate checks the field values on ConfigureProtectionReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfigureProtectionReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigureProtectionReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfigureProtectionReqMultiError, or nil if none found.
func (m *ConfigureProtectionReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigureProtectionReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetProtectionConfig() == nil {
		err := ConfigureProtectionReqValidationError{
			field:  "ProtectionConfig",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetProtectionConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfigureProtectionReqValidationError{
					field:  "ProtectionConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfigureProtectionReqValidationError{
					field:  "ProtectionConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProtectionConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfigureProtectionReqValidationError{
				field:  "ProtectionConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Source

	if all {
		switch v := interface{}(m.GetSourceMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfigureProtectionReqValidationError{
					field:  "SourceMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfigureProtectionReqValidationError{
					field:  "SourceMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSourceMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfigureProtectionReqValidationError{
				field:  "SourceMetadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ConfigureProtectionReqMultiError(errors)
	}

	return nil
}

// ConfigureProtectionReqMultiError is an error wrapping multiple validation
// errors returned by ConfigureProtectionReq.ValidateAll() if the designated
// constraints aren't met.
type ConfigureProtectionReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigureProtectionReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigureProtectionReqMultiError) AllErrors() []error { return m }

// ConfigureProtectionReqValidationError is the validation error returned by
// ConfigureProtectionReq.Validate if the designated constraints aren't met.
type ConfigureProtectionReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigureProtectionReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigureProtectionReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigureProtectionReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigureProtectionReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigureProtectionReqValidationError) ErrorName() string {
	return "ConfigureProtectionReqValidationError"
}

// Error satisfies the builtin error interface
func (e ConfigureProtectionReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigureProtectionReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigureProtectionReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigureProtectionReqValidationError{}

// Validate checks the field values on ConfigureProtectionResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfigureProtectionResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigureProtectionResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfigureProtectionRespMultiError, or nil if none found.
func (m *ConfigureProtectionResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigureProtectionResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProtectionId

	// no validation rules for Version

	if len(errors) > 0 {
		return ConfigureProtectionRespMultiError(errors)
	}

	return nil
}

// ConfigureProtectionRespMultiError is an error wrapping multiple validation
// errors returned by ConfigureProtectionResp.ValidateAll() if the designated
// constraints aren't met.
type ConfigureProtectionRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigureProtectionRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigureProtectionRespMultiError) AllErrors() []error { return m }

// ConfigureProtectionRespValidationError is the validation error returned by
// ConfigureProtectionResp.Validate if the designated constraints aren't met.
type ConfigureProtectionRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigureProtectionRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigureProtectionRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigureProtectionRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigureProtectionRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigureProtectionRespValidationError) ErrorName() string {
	return "ConfigureProtectionRespValidationError"
}

// Error satisfies the builtin error interface
func (e ConfigureProtectionRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigureProtectionResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigureProtectionRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigureProtectionRespValidationError{}

// Validate checks the field values on ValidateConfigureProtectionResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ValidateConfigureProtectionResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidateConfigureProtectionResp with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ValidateConfigureProtectionRespMultiError, or nil if none found.
func (m *ValidateConfigureProtectionResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidateConfigureProtectionResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInputConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ValidateConfigureProtectionRespValidationError{
					field:  "InputConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ValidateConfigureProtectionRespValidationError{
					field:  "InputConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInputConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ValidateConfigureProtectionRespValidationError{
				field:  "InputConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCompiledConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ValidateConfigureProtectionRespValidationError{
					field:  "CompiledConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ValidateConfigureProtectionRespValidationError{
					field:  "CompiledConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCompiledConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ValidateConfigureProtectionRespValidationError{
				field:  "CompiledConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ValidateConfigureProtectionRespMultiError(errors)
	}

	return nil
}

// ValidateConfigureProtectionRespMultiError is an error wrapping multiple
// validation errors returned by ValidateConfigureProtectionResp.ValidateAll()
// if the designated constraints aren't met.
type ValidateConfigureProtectionRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidateConfigureProtectionRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidateConfigureProtectionRespMultiError) AllErrors() []error { return m }

// ValidateConfigureProtectionRespValidationError is the validation error
// returned by ValidateConfigureProtectionResp.Validate if the designated
// constraints aren't met.
type ValidateConfigureProtectionRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateConfigureProtectionRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateConfigureProtectionRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateConfigureProtectionRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateConfigureProtectionRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateConfigureProtectionRespValidationError) ErrorName() string {
	return "ValidateConfigureProtectionRespValidationError"
}

// Error satisfies the builtin error interface
func (e ValidateConfigureProtectionRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateConfigureProtectionResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateConfigureProtectionRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateConfigureProtectionRespValidationError{}

// Validate checks the field values on ListProtectionsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProtectionsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProtectionsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProtectionsReqMultiError, or nil if none found.
func (m *ListProtectionsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProtectionsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListProtectionsReqMultiError(errors)
	}

	return nil
}

// ListProtectionsReqMultiError is an error wrapping multiple validation errors
// returned by ListProtectionsReq.ValidateAll() if the designated constraints
// aren't met.
type ListProtectionsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProtectionsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProtectionsReqMultiError) AllErrors() []error { return m }

// ListProtectionsReqValidationError is the validation error returned by
// ListProtectionsReq.Validate if the designated constraints aren't met.
type ListProtectionsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProtectionsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProtectionsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProtectionsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProtectionsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProtectionsReqValidationError) ErrorName() string {
	return "ListProtectionsReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListProtectionsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProtectionsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProtectionsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProtectionsReqValidationError{}

// Validate checks the field values on ListProtectionsResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProtectionsResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProtectionsResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProtectionsRespMultiError, or nil if none found.
func (m *ListProtectionsResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProtectionsResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProtections() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProtectionsRespValidationError{
						field:  fmt.Sprintf("Protections[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProtectionsRespValidationError{
						field:  fmt.Sprintf("Protections[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProtectionsRespValidationError{
					field:  fmt.Sprintf("Protections[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListProtectionsRespMultiError(errors)
	}

	return nil
}

// ListProtectionsRespMultiError is an error wrapping multiple validation
// errors returned by ListProtectionsResp.ValidateAll() if the designated
// constraints aren't met.
type ListProtectionsRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProtectionsRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProtectionsRespMultiError) AllErrors() []error { return m }

// ListProtectionsRespValidationError is the validation error returned by
// ListProtectionsResp.Validate if the designated constraints aren't met.
type ListProtectionsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProtectionsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProtectionsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProtectionsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProtectionsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProtectionsRespValidationError) ErrorName() string {
	return "ListProtectionsRespValidationError"
}

// Error satisfies the builtin error interface
func (e ListProtectionsRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProtectionsResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProtectionsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProtectionsRespValidationError{}

// Validate checks the field values on GetProtectionReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetProtectionReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProtectionReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProtectionReqMultiError, or nil if none found.
func (m *GetProtectionReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProtectionReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetProtection()) < 1 {
		err := GetProtectionReqValidationError{
			field:  "Protection",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetProtectionReqMultiError(errors)
	}

	return nil
}

// GetProtectionReqMultiError is an error wrapping multiple validation errors
// returned by GetProtectionReq.ValidateAll() if the designated constraints
// aren't met.
type GetProtectionReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProtectionReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProtectionReqMultiError) AllErrors() []error { return m }

// GetProtectionReqValidationError is the validation error returned by
// GetProtectionReq.Validate if the designated constraints aren't met.
type GetProtectionReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProtectionReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProtectionReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProtectionReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProtectionReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProtectionReqValidationError) ErrorName() string { return "GetProtectionReqValidationError" }

// Error satisfies the builtin error interface
func (e GetProtectionReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProtectionReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProtectionReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProtectionReqValidationError{}

// Validate checks the field values on GetProtectionResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetProtectionResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProtectionResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProtectionRespMultiError, or nil if none found.
func (m *GetProtectionResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProtectionResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProtection()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProtectionRespValidationError{
					field:  "Protection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProtectionRespValidationError{
					field:  "Protection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProtection()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProtectionRespValidationError{
				field:  "Protection",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetProtectionRespMultiError(errors)
	}

	return nil
}

// GetProtectionRespMultiError is an error wrapping multiple validation errors
// returned by GetProtectionResp.ValidateAll() if the designated constraints
// aren't met.
type GetProtectionRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProtectionRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProtectionRespMultiError) AllErrors() []error { return m }

// GetProtectionRespValidationError is the validation error returned by
// GetProtectionResp.Validate if the designated constraints aren't met.
type GetProtectionRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProtectionRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProtectionRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProtectionRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProtectionRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProtectionRespValidationError) ErrorName() string {
	return "GetProtectionRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetProtectionRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProtectionResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProtectionRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProtectionRespValidationError{}

// Validate checks the field values on GetProtectionConfigReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProtectionConfigReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProtectionConfigReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProtectionConfigReqMultiError, or nil if none found.
func (m *GetProtectionConfigReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProtectionConfigReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetProtection()) < 1 {
		err := GetProtectionConfigReqValidationError{
			field:  "Protection",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Version

	if len(errors) > 0 {
		return GetProtectionConfigReqMultiError(errors)
	}

	return nil
}

// GetProtectionConfigReqMultiError is an error wrapping multiple validation
// errors returned by GetProtectionConfigReq.ValidateAll() if the designated
// constraints aren't met.
type GetProtectionConfigReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProtectionConfigReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProtectionConfigReqMultiError) AllErrors() []error { return m }

// GetProtectionConfigReqValidationError is the validation error returned by
// GetProtectionConfigReq.Validate if the designated constraints aren't met.
type GetProtectionConfigReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProtectionConfigReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProtectionConfigReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProtectionConfigReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProtectionConfigReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProtectionConfigReqValidationError) ErrorName() string {
	return "GetProtectionConfigReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetProtectionConfigReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProtectionConfigReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProtectionConfigReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProtectionConfigReqValidationError{}

// Validate checks the field values on GetProtectionConfigResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProtectionConfigResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProtectionConfigResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProtectionConfigRespMultiError, or nil if none found.
func (m *GetProtectionConfigResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProtectionConfigResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInputConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProtectionConfigRespValidationError{
					field:  "InputConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProtectionConfigRespValidationError{
					field:  "InputConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInputConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProtectionConfigRespValidationError{
				field:  "InputConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCompiledConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProtectionConfigRespValidationError{
					field:  "CompiledConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProtectionConfigRespValidationError{
					field:  "CompiledConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCompiledConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProtectionConfigRespValidationError{
				field:  "CompiledConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Version

	if len(errors) > 0 {
		return GetProtectionConfigRespMultiError(errors)
	}

	return nil
}

// GetProtectionConfigRespMultiError is an error wrapping multiple validation
// errors returned by GetProtectionConfigResp.ValidateAll() if the designated
// constraints aren't met.
type GetProtectionConfigRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProtectionConfigRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProtectionConfigRespMultiError) AllErrors() []error { return m }

// GetProtectionConfigRespValidationError is the validation error returned by
// GetProtectionConfigResp.Validate if the designated constraints aren't met.
type GetProtectionConfigRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProtectionConfigRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProtectionConfigRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProtectionConfigRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProtectionConfigRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProtectionConfigRespValidationError) ErrorName() string {
	return "GetProtectionConfigRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetProtectionConfigRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProtectionConfigResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProtectionConfigRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProtectionConfigRespValidationError{}

// Validate checks the field values on GetProtectionAttachmentConfigReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetProtectionAttachmentConfigReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProtectionAttachmentConfigReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetProtectionAttachmentConfigReqMultiError, or nil if none found.
func (m *GetProtectionAttachmentConfigReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProtectionAttachmentConfigReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAttachmentId()) < 1 {
		err := GetProtectionAttachmentConfigReqValidationError{
			field:  "AttachmentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Version

	if len(errors) > 0 {
		return GetProtectionAttachmentConfigReqMultiError(errors)
	}

	return nil
}

// GetProtectionAttachmentConfigReqMultiError is an error wrapping multiple
// validation errors returned by
// GetProtectionAttachmentConfigReq.ValidateAll() if the designated
// constraints aren't met.
type GetProtectionAttachmentConfigReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProtectionAttachmentConfigReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProtectionAttachmentConfigReqMultiError) AllErrors() []error { return m }

// GetProtectionAttachmentConfigReqValidationError is the validation error
// returned by GetProtectionAttachmentConfigReq.Validate if the designated
// constraints aren't met.
type GetProtectionAttachmentConfigReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProtectionAttachmentConfigReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProtectionAttachmentConfigReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProtectionAttachmentConfigReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProtectionAttachmentConfigReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProtectionAttachmentConfigReqValidationError) ErrorName() string {
	return "GetProtectionAttachmentConfigReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetProtectionAttachmentConfigReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProtectionAttachmentConfigReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProtectionAttachmentConfigReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProtectionAttachmentConfigReqValidationError{}

// Validate checks the field values on GetProtectionAttachmentConfigResp with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetProtectionAttachmentConfigResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProtectionAttachmentConfigResp
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetProtectionAttachmentConfigRespMultiError, or nil if none found.
func (m *GetProtectionAttachmentConfigResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProtectionAttachmentConfigResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProtectionAttachmentConfigRespValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProtectionAttachmentConfigRespValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProtectionAttachmentConfigRespValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Version

	if len(errors) > 0 {
		return GetProtectionAttachmentConfigRespMultiError(errors)
	}

	return nil
}

// GetProtectionAttachmentConfigRespMultiError is an error wrapping multiple
// validation errors returned by
// GetProtectionAttachmentConfigResp.ValidateAll() if the designated
// constraints aren't met.
type GetProtectionAttachmentConfigRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProtectionAttachmentConfigRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProtectionAttachmentConfigRespMultiError) AllErrors() []error { return m }

// GetProtectionAttachmentConfigRespValidationError is the validation error
// returned by GetProtectionAttachmentConfigResp.Validate if the designated
// constraints aren't met.
type GetProtectionAttachmentConfigRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProtectionAttachmentConfigRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProtectionAttachmentConfigRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProtectionAttachmentConfigRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProtectionAttachmentConfigRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProtectionAttachmentConfigRespValidationError) ErrorName() string {
	return "GetProtectionAttachmentConfigRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetProtectionAttachmentConfigRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProtectionAttachmentConfigResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProtectionAttachmentConfigRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProtectionAttachmentConfigRespValidationError{}
