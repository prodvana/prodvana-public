// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: prodvana/volumes/volumes.proto

package volumes

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on VolumeSource with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VolumeSource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VolumeSource with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VolumeSourceMultiError, or
// nil if none found.
func (m *VolumeSource) ValidateAll() error {
	return m.validate(true)
}

func (m *VolumeSource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Source.(type) {
	case *VolumeSource_Secret:
		if v == nil {
			err := VolumeSourceValidationError{
				field:  "Source",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSecret()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, VolumeSourceValidationError{
						field:  "Secret",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, VolumeSourceValidationError{
						field:  "Secret",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSecret()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return VolumeSourceValidationError{
					field:  "Secret",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return VolumeSourceMultiError(errors)
	}

	return nil
}

// VolumeSourceMultiError is an error wrapping multiple validation errors
// returned by VolumeSource.ValidateAll() if the designated constraints aren't met.
type VolumeSourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VolumeSourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VolumeSourceMultiError) AllErrors() []error { return m }

// VolumeSourceValidationError is the validation error returned by
// VolumeSource.Validate if the designated constraints aren't met.
type VolumeSourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VolumeSourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VolumeSourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VolumeSourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VolumeSourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VolumeSourceValidationError) ErrorName() string { return "VolumeSourceValidationError" }

// Error satisfies the builtin error interface
func (e VolumeSourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVolumeSource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VolumeSourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VolumeSourceValidationError{}

// Validate checks the field values on VolumeMount with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VolumeMount) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VolumeMount with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VolumeMountMultiError, or
// nil if none found.
func (m *VolumeMount) ValidateAll() error {
	return m.validate(true)
}

func (m *VolumeMount) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MountPath

	// no validation rules for ReadOnly

	if len(errors) > 0 {
		return VolumeMountMultiError(errors)
	}

	return nil
}

// VolumeMountMultiError is an error wrapping multiple validation errors
// returned by VolumeMount.ValidateAll() if the designated constraints aren't met.
type VolumeMountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VolumeMountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VolumeMountMultiError) AllErrors() []error { return m }

// VolumeMountValidationError is the validation error returned by
// VolumeMount.Validate if the designated constraints aren't met.
type VolumeMountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VolumeMountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VolumeMountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VolumeMountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VolumeMountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VolumeMountValidationError) ErrorName() string { return "VolumeMountValidationError" }

// Error satisfies the builtin error interface
func (e VolumeMountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVolumeMount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VolumeMountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VolumeMountValidationError{}

// Validate checks the field values on Volume with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Volume) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Volume with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in VolumeMultiError, or nil if none found.
func (m *Volume) ValidateAll() error {
	return m.validate(true)
}

func (m *Volume) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := VolumeValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VolumeValidationError{
					field:  "Source",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VolumeValidationError{
					field:  "Source",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VolumeValidationError{
				field:  "Source",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VolumeValidationError{
					field:  "Mount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VolumeValidationError{
					field:  "Mount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VolumeValidationError{
				field:  "Mount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return VolumeMultiError(errors)
	}

	return nil
}

// VolumeMultiError is an error wrapping multiple validation errors returned by
// Volume.ValidateAll() if the designated constraints aren't met.
type VolumeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VolumeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VolumeMultiError) AllErrors() []error { return m }

// VolumeValidationError is the validation error returned by Volume.Validate if
// the designated constraints aren't met.
type VolumeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VolumeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VolumeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VolumeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VolumeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VolumeValidationError) ErrorName() string { return "VolumeValidationError" }

// Error satisfies the builtin error interface
func (e VolumeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVolume.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VolumeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VolumeValidationError{}

// Validate checks the field values on VolumeSource_SecretSource with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VolumeSource_SecretSource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VolumeSource_SecretSource with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VolumeSource_SecretSourceMultiError, or nil if none found.
func (m *VolumeSource_SecretSource) ValidateAll() error {
	return m.validate(true)
}

func (m *VolumeSource_SecretSource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetSecretName()) < 1 {
		err := VolumeSource_SecretSourceValidationError{
			field:  "SecretName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return VolumeSource_SecretSourceMultiError(errors)
	}

	return nil
}

// VolumeSource_SecretSourceMultiError is an error wrapping multiple validation
// errors returned by VolumeSource_SecretSource.ValidateAll() if the
// designated constraints aren't met.
type VolumeSource_SecretSourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VolumeSource_SecretSourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VolumeSource_SecretSourceMultiError) AllErrors() []error { return m }

// VolumeSource_SecretSourceValidationError is the validation error returned by
// VolumeSource_SecretSource.Validate if the designated constraints aren't met.
type VolumeSource_SecretSourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VolumeSource_SecretSourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VolumeSource_SecretSourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VolumeSource_SecretSourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VolumeSource_SecretSourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VolumeSource_SecretSourceValidationError) ErrorName() string {
	return "VolumeSource_SecretSourceValidationError"
}

// Error satisfies the builtin error interface
func (e VolumeSource_SecretSourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVolumeSource_SecretSource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VolumeSource_SecretSourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VolumeSource_SecretSourceValidationError{}
