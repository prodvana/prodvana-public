// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: prodvana/capability/capability.proto

package capability

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PerReleaseChannelCapabilityConfig with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *PerReleaseChannelCapabilityConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PerReleaseChannelCapabilityConfig
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// PerReleaseChannelCapabilityConfigMultiError, or nil if none found.
func (m *PerReleaseChannelCapabilityConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *PerReleaseChannelCapabilityConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetReleaseChannel()) < 1 {
		err := PerReleaseChannelCapabilityConfigValidationError{
			field:  "ReleaseChannel",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	oneofDefinitionOneofPresent := false
	switch v := m.DefinitionOneof.(type) {
	case *PerReleaseChannelCapabilityConfig_Inlined:
		if v == nil {
			err := PerReleaseChannelCapabilityConfigValidationError{
				field:  "DefinitionOneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofDefinitionOneofPresent = true

		if all {
			switch v := interface{}(m.GetInlined()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PerReleaseChannelCapabilityConfigValidationError{
						field:  "Inlined",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PerReleaseChannelCapabilityConfigValidationError{
						field:  "Inlined",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetInlined()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PerReleaseChannelCapabilityConfigValidationError{
					field:  "Inlined",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *PerReleaseChannelCapabilityConfig_Ref:
		if v == nil {
			err := PerReleaseChannelCapabilityConfigValidationError{
				field:  "DefinitionOneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofDefinitionOneofPresent = true

		if all {
			switch v := interface{}(m.GetRef()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PerReleaseChannelCapabilityConfigValidationError{
						field:  "Ref",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PerReleaseChannelCapabilityConfigValidationError{
						field:  "Ref",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRef()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PerReleaseChannelCapabilityConfigValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofDefinitionOneofPresent {
		err := PerReleaseChannelCapabilityConfigValidationError{
			field:  "DefinitionOneof",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PerReleaseChannelCapabilityConfigMultiError(errors)
	}

	return nil
}

// PerReleaseChannelCapabilityConfigMultiError is an error wrapping multiple
// validation errors returned by
// PerReleaseChannelCapabilityConfig.ValidateAll() if the designated
// constraints aren't met.
type PerReleaseChannelCapabilityConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PerReleaseChannelCapabilityConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PerReleaseChannelCapabilityConfigMultiError) AllErrors() []error { return m }

// PerReleaseChannelCapabilityConfigValidationError is the validation error
// returned by PerReleaseChannelCapabilityConfig.Validate if the designated
// constraints aren't met.
type PerReleaseChannelCapabilityConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PerReleaseChannelCapabilityConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PerReleaseChannelCapabilityConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PerReleaseChannelCapabilityConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PerReleaseChannelCapabilityConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PerReleaseChannelCapabilityConfigValidationError) ErrorName() string {
	return "PerReleaseChannelCapabilityConfigValidationError"
}

// Error satisfies the builtin error interface
func (e PerReleaseChannelCapabilityConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPerReleaseChannelCapabilityConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PerReleaseChannelCapabilityConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PerReleaseChannelCapabilityConfigValidationError{}

// Validate checks the field values on CapabilityConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CapabilityConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CapabilityConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CapabilityConfigMultiError, or nil if none found.
func (m *CapabilityConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *CapabilityConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CapabilityConfigValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetPerReleaseChannel() {
		_, _ = idx, item

		if item == nil {
			err := CapabilityConfigValidationError{
				field:  fmt.Sprintf("PerReleaseChannel[%v]", idx),
				reason: "value is required",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CapabilityConfigValidationError{
						field:  fmt.Sprintf("PerReleaseChannel[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CapabilityConfigValidationError{
						field:  fmt.Sprintf("PerReleaseChannel[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CapabilityConfigValidationError{
					field:  fmt.Sprintf("PerReleaseChannel[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CapabilityConfigMultiError(errors)
	}

	return nil
}

// CapabilityConfigMultiError is an error wrapping multiple validation errors
// returned by CapabilityConfig.ValidateAll() if the designated constraints
// aren't met.
type CapabilityConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CapabilityConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CapabilityConfigMultiError) AllErrors() []error { return m }

// CapabilityConfigValidationError is the validation error returned by
// CapabilityConfig.Validate if the designated constraints aren't met.
type CapabilityConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CapabilityConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CapabilityConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CapabilityConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CapabilityConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CapabilityConfigValidationError) ErrorName() string { return "CapabilityConfigValidationError" }

// Error satisfies the builtin error interface
func (e CapabilityConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCapabilityConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CapabilityConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CapabilityConfigValidationError{}

// Validate checks the field values on CapabilityInstanceConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CapabilityInstanceConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CapabilityInstanceConfig with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CapabilityInstanceConfigMultiError, or nil if none found.
func (m *CapabilityInstanceConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *CapabilityInstanceConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	{
		sorted_keys := make([]string, len(m.GetEnv()))
		i := 0
		for key := range m.GetEnv() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetEnv()[key]
			_ = val

			if val == nil {
				err := CapabilityInstanceConfigValidationError{
					field:  fmt.Sprintf("Env[%v]", key),
					reason: "value cannot be sparse, all pairs must be non-nil",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			if !_CapabilityInstanceConfig_Env_Pattern.MatchString(key) {
				err := CapabilityInstanceConfigValidationError{
					field:  fmt.Sprintf("Env[%v]", key),
					reason: "value does not match regex pattern \"^[a-zA-Z_]+[a-zA-Z0-9_]*$\"",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, CapabilityInstanceConfigValidationError{
							field:  fmt.Sprintf("Env[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, CapabilityInstanceConfigValidationError{
							field:  fmt.Sprintf("Env[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return CapabilityInstanceConfigValidationError{
						field:  fmt.Sprintf("Env[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	for idx, item := range m.GetPrePushTasks() {
		_, _ = idx, item

		if item == nil {
			err := CapabilityInstanceConfigValidationError{
				field:  fmt.Sprintf("PrePushTasks[%v]", idx),
				reason: "value is required",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CapabilityInstanceConfigValidationError{
						field:  fmt.Sprintf("PrePushTasks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CapabilityInstanceConfigValidationError{
						field:  fmt.Sprintf("PrePushTasks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CapabilityInstanceConfigValidationError{
					field:  fmt.Sprintf("PrePushTasks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CapabilityInstanceConfigMultiError(errors)
	}

	return nil
}

// CapabilityInstanceConfigMultiError is an error wrapping multiple validation
// errors returned by CapabilityInstanceConfig.ValidateAll() if the designated
// constraints aren't met.
type CapabilityInstanceConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CapabilityInstanceConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CapabilityInstanceConfigMultiError) AllErrors() []error { return m }

// CapabilityInstanceConfigValidationError is the validation error returned by
// CapabilityInstanceConfig.Validate if the designated constraints aren't met.
type CapabilityInstanceConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CapabilityInstanceConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CapabilityInstanceConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CapabilityInstanceConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CapabilityInstanceConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CapabilityInstanceConfigValidationError) ErrorName() string {
	return "CapabilityInstanceConfigValidationError"
}

// Error satisfies the builtin error interface
func (e CapabilityInstanceConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCapabilityInstanceConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CapabilityInstanceConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CapabilityInstanceConfigValidationError{}

var _CapabilityInstanceConfig_Env_Pattern = regexp.MustCompile("^[a-zA-Z_]+[a-zA-Z0-9_]*$")

// Validate checks the field values on CapabilityInstanceRef with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CapabilityInstanceRef) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CapabilityInstanceRef with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CapabilityInstanceRefMultiError, or nil if none found.
func (m *CapabilityInstanceRef) ValidateAll() error {
	return m.validate(true)
}

func (m *CapabilityInstanceRef) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CapabilityInstanceRefValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CapabilityInstanceRefMultiError(errors)
	}

	return nil
}

// CapabilityInstanceRefMultiError is an error wrapping multiple validation
// errors returned by CapabilityInstanceRef.ValidateAll() if the designated
// constraints aren't met.
type CapabilityInstanceRefMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CapabilityInstanceRefMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CapabilityInstanceRefMultiError) AllErrors() []error { return m }

// CapabilityInstanceRefValidationError is the validation error returned by
// CapabilityInstanceRef.Validate if the designated constraints aren't met.
type CapabilityInstanceRefValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CapabilityInstanceRefValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CapabilityInstanceRefValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CapabilityInstanceRefValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CapabilityInstanceRefValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CapabilityInstanceRefValidationError) ErrorName() string {
	return "CapabilityInstanceRefValidationError"
}

// Error satisfies the builtin error interface
func (e CapabilityInstanceRefValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCapabilityInstanceRef.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CapabilityInstanceRefValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CapabilityInstanceRefValidationError{}
