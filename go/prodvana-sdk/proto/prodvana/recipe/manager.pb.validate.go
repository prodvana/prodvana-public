// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: prodvana/recipe/manager.proto

package recipe

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	version "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/version"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = version.Source(0)
)

// Validate checks the field values on ConfigureRecipeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfigureRecipeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigureRecipeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfigureRecipeReqMultiError, or nil if none found.
func (m *ConfigureRecipeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigureRecipeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Source

	if all {
		switch v := interface{}(m.GetSourceMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfigureRecipeReqValidationError{
					field:  "SourceMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfigureRecipeReqValidationError{
					field:  "SourceMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSourceMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfigureRecipeReqValidationError{
				field:  "SourceMetadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRecipeConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfigureRecipeReqValidationError{
					field:  "RecipeConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfigureRecipeReqValidationError{
					field:  "RecipeConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRecipeConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfigureRecipeReqValidationError{
				field:  "RecipeConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ConfigureRecipeReqMultiError(errors)
	}

	return nil
}

// ConfigureRecipeReqMultiError is an error wrapping multiple validation errors
// returned by ConfigureRecipeReq.ValidateAll() if the designated constraints
// aren't met.
type ConfigureRecipeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigureRecipeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigureRecipeReqMultiError) AllErrors() []error { return m }

// ConfigureRecipeReqValidationError is the validation error returned by
// ConfigureRecipeReq.Validate if the designated constraints aren't met.
type ConfigureRecipeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigureRecipeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigureRecipeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigureRecipeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigureRecipeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigureRecipeReqValidationError) ErrorName() string {
	return "ConfigureRecipeReqValidationError"
}

// Error satisfies the builtin error interface
func (e ConfigureRecipeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigureRecipeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigureRecipeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigureRecipeReqValidationError{}

// Validate checks the field values on ConfigureRecipeResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfigureRecipeResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigureRecipeResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfigureRecipeRespMultiError, or nil if none found.
func (m *ConfigureRecipeResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigureRecipeResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RecipeId

	// no validation rules for Version

	if len(errors) > 0 {
		return ConfigureRecipeRespMultiError(errors)
	}

	return nil
}

// ConfigureRecipeRespMultiError is an error wrapping multiple validation
// errors returned by ConfigureRecipeResp.ValidateAll() if the designated
// constraints aren't met.
type ConfigureRecipeRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigureRecipeRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigureRecipeRespMultiError) AllErrors() []error { return m }

// ConfigureRecipeRespValidationError is the validation error returned by
// ConfigureRecipeResp.Validate if the designated constraints aren't met.
type ConfigureRecipeRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigureRecipeRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigureRecipeRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigureRecipeRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigureRecipeRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigureRecipeRespValidationError) ErrorName() string {
	return "ConfigureRecipeRespValidationError"
}

// Error satisfies the builtin error interface
func (e ConfigureRecipeRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigureRecipeResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigureRecipeRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigureRecipeRespValidationError{}

// Validate checks the field values on ValidateConfigureRecipeResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ValidateConfigureRecipeResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidateConfigureRecipeResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ValidateConfigureRecipeRespMultiError, or nil if none found.
func (m *ValidateConfigureRecipeResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidateConfigureRecipeResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCompiledConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ValidateConfigureRecipeRespValidationError{
					field:  "CompiledConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ValidateConfigureRecipeRespValidationError{
					field:  "CompiledConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCompiledConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ValidateConfigureRecipeRespValidationError{
				field:  "CompiledConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ValidateConfigureRecipeRespMultiError(errors)
	}

	return nil
}

// ValidateConfigureRecipeRespMultiError is an error wrapping multiple
// validation errors returned by ValidateConfigureRecipeResp.ValidateAll() if
// the designated constraints aren't met.
type ValidateConfigureRecipeRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidateConfigureRecipeRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidateConfigureRecipeRespMultiError) AllErrors() []error { return m }

// ValidateConfigureRecipeRespValidationError is the validation error returned
// by ValidateConfigureRecipeResp.Validate if the designated constraints
// aren't met.
type ValidateConfigureRecipeRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateConfigureRecipeRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateConfigureRecipeRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateConfigureRecipeRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateConfigureRecipeRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateConfigureRecipeRespValidationError) ErrorName() string {
	return "ValidateConfigureRecipeRespValidationError"
}

// Error satisfies the builtin error interface
func (e ValidateConfigureRecipeRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateConfigureRecipeResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateConfigureRecipeRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateConfigureRecipeRespValidationError{}

// Validate checks the field values on ListRecipesReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListRecipesReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRecipesReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListRecipesReqMultiError,
// or nil if none found.
func (m *ListRecipesReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRecipesReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	// no validation rules for PageSize

	switch v := m.Filter.(type) {
	case *ListRecipesReq_ServiceFilter:
		if v == nil {
			err := ListRecipesReqValidationError{
				field:  "Filter",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetServiceFilter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRecipesReqValidationError{
						field:  "ServiceFilter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRecipesReqValidationError{
						field:  "ServiceFilter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetServiceFilter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRecipesReqValidationError{
					field:  "ServiceFilter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ListRecipesReqMultiError(errors)
	}

	return nil
}

// ListRecipesReqMultiError is an error wrapping multiple validation errors
// returned by ListRecipesReq.ValidateAll() if the designated constraints
// aren't met.
type ListRecipesReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRecipesReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRecipesReqMultiError) AllErrors() []error { return m }

// ListRecipesReqValidationError is the validation error returned by
// ListRecipesReq.Validate if the designated constraints aren't met.
type ListRecipesReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRecipesReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRecipesReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRecipesReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRecipesReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRecipesReqValidationError) ErrorName() string { return "ListRecipesReqValidationError" }

// Error satisfies the builtin error interface
func (e ListRecipesReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRecipesReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRecipesReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRecipesReqValidationError{}

// Validate checks the field values on ListRecipesResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListRecipesResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRecipesResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRecipesRespMultiError, or nil if none found.
func (m *ListRecipesResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRecipesResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRecipes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRecipesRespValidationError{
						field:  fmt.Sprintf("Recipes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRecipesRespValidationError{
						field:  fmt.Sprintf("Recipes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRecipesRespValidationError{
					field:  fmt.Sprintf("Recipes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListRecipesRespMultiError(errors)
	}

	return nil
}

// ListRecipesRespMultiError is an error wrapping multiple validation errors
// returned by ListRecipesResp.ValidateAll() if the designated constraints
// aren't met.
type ListRecipesRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRecipesRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRecipesRespMultiError) AllErrors() []error { return m }

// ListRecipesRespValidationError is the validation error returned by
// ListRecipesResp.Validate if the designated constraints aren't met.
type ListRecipesRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRecipesRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRecipesRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRecipesRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRecipesRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRecipesRespValidationError) ErrorName() string { return "ListRecipesRespValidationError" }

// Error satisfies the builtin error interface
func (e ListRecipesRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRecipesResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRecipesRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRecipesRespValidationError{}

// Validate checks the field values on GetRecipeReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetRecipeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRecipeReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetRecipeReqMultiError, or
// nil if none found.
func (m *GetRecipeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRecipeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetRecipe()) < 1 {
		err := GetRecipeReqValidationError{
			field:  "Recipe",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetRecipeReqMultiError(errors)
	}

	return nil
}

// GetRecipeReqMultiError is an error wrapping multiple validation errors
// returned by GetRecipeReq.ValidateAll() if the designated constraints aren't met.
type GetRecipeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRecipeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRecipeReqMultiError) AllErrors() []error { return m }

// GetRecipeReqValidationError is the validation error returned by
// GetRecipeReq.Validate if the designated constraints aren't met.
type GetRecipeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRecipeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRecipeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRecipeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRecipeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRecipeReqValidationError) ErrorName() string { return "GetRecipeReqValidationError" }

// Error satisfies the builtin error interface
func (e GetRecipeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRecipeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRecipeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRecipeReqValidationError{}

// Validate checks the field values on GetRecipeResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetRecipeResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRecipeResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetRecipeRespMultiError, or
// nil if none found.
func (m *GetRecipeResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRecipeResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRecipe()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetRecipeRespValidationError{
					field:  "Recipe",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetRecipeRespValidationError{
					field:  "Recipe",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRecipe()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRecipeRespValidationError{
				field:  "Recipe",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetRecipeRespMultiError(errors)
	}

	return nil
}

// GetRecipeRespMultiError is an error wrapping multiple validation errors
// returned by GetRecipeResp.ValidateAll() if the designated constraints
// aren't met.
type GetRecipeRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRecipeRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRecipeRespMultiError) AllErrors() []error { return m }

// GetRecipeRespValidationError is the validation error returned by
// GetRecipeResp.Validate if the designated constraints aren't met.
type GetRecipeRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRecipeRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRecipeRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRecipeRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRecipeRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRecipeRespValidationError) ErrorName() string { return "GetRecipeRespValidationError" }

// Error satisfies the builtin error interface
func (e GetRecipeRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRecipeResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRecipeRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRecipeRespValidationError{}

// Validate checks the field values on GetRecipeConfigReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRecipeConfigReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRecipeConfigReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRecipeConfigReqMultiError, or nil if none found.
func (m *GetRecipeConfigReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRecipeConfigReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetRecipe()) < 1 {
		err := GetRecipeConfigReqValidationError{
			field:  "Recipe",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Version

	if len(errors) > 0 {
		return GetRecipeConfigReqMultiError(errors)
	}

	return nil
}

// GetRecipeConfigReqMultiError is an error wrapping multiple validation errors
// returned by GetRecipeConfigReq.ValidateAll() if the designated constraints
// aren't met.
type GetRecipeConfigReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRecipeConfigReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRecipeConfigReqMultiError) AllErrors() []error { return m }

// GetRecipeConfigReqValidationError is the validation error returned by
// GetRecipeConfigReq.Validate if the designated constraints aren't met.
type GetRecipeConfigReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRecipeConfigReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRecipeConfigReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRecipeConfigReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRecipeConfigReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRecipeConfigReqValidationError) ErrorName() string {
	return "GetRecipeConfigReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetRecipeConfigReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRecipeConfigReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRecipeConfigReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRecipeConfigReqValidationError{}

// Validate checks the field values on GetRecipeConfigResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRecipeConfigResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRecipeConfigResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRecipeConfigRespMultiError, or nil if none found.
func (m *GetRecipeConfigResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRecipeConfigResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInputConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetRecipeConfigRespValidationError{
					field:  "InputConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetRecipeConfigRespValidationError{
					field:  "InputConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInputConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRecipeConfigRespValidationError{
				field:  "InputConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCompiledConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetRecipeConfigRespValidationError{
					field:  "CompiledConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetRecipeConfigRespValidationError{
					field:  "CompiledConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCompiledConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRecipeConfigRespValidationError{
				field:  "CompiledConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Version

	if len(errors) > 0 {
		return GetRecipeConfigRespMultiError(errors)
	}

	return nil
}

// GetRecipeConfigRespMultiError is an error wrapping multiple validation
// errors returned by GetRecipeConfigResp.ValidateAll() if the designated
// constraints aren't met.
type GetRecipeConfigRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRecipeConfigRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRecipeConfigRespMultiError) AllErrors() []error { return m }

// GetRecipeConfigRespValidationError is the validation error returned by
// GetRecipeConfigResp.Validate if the designated constraints aren't met.
type GetRecipeConfigRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRecipeConfigRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRecipeConfigRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRecipeConfigRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRecipeConfigRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRecipeConfigRespValidationError) ErrorName() string {
	return "GetRecipeConfigRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetRecipeConfigRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRecipeConfigResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRecipeConfigRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRecipeConfigRespValidationError{}

// Validate checks the field values on ApplyRecipeParametersReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApplyRecipeParametersReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplyRecipeParametersReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApplyRecipeParametersReqMultiError, or nil if none found.
func (m *ApplyRecipeParametersReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplyRecipeParametersReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Source

	if all {
		switch v := interface{}(m.GetSourceMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApplyRecipeParametersReqValidationError{
					field:  "SourceMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApplyRecipeParametersReqValidationError{
					field:  "SourceMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSourceMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplyRecipeParametersReqValidationError{
				field:  "SourceMetadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetRecipe()) < 1 {
		err := ApplyRecipeParametersReqValidationError{
			field:  "Recipe",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetParameters() {
		_, _ = idx, item

		if item == nil {
			err := ApplyRecipeParametersReqValidationError{
				field:  fmt.Sprintf("Parameters[%v]", idx),
				reason: "value is required",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ApplyRecipeParametersReqValidationError{
						field:  fmt.Sprintf("Parameters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ApplyRecipeParametersReqValidationError{
						field:  fmt.Sprintf("Parameters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApplyRecipeParametersReqValidationError{
					field:  fmt.Sprintf("Parameters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ApplyRecipeParametersReqMultiError(errors)
	}

	return nil
}

// ApplyRecipeParametersReqMultiError is an error wrapping multiple validation
// errors returned by ApplyRecipeParametersReq.ValidateAll() if the designated
// constraints aren't met.
type ApplyRecipeParametersReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplyRecipeParametersReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplyRecipeParametersReqMultiError) AllErrors() []error { return m }

// ApplyRecipeParametersReqValidationError is the validation error returned by
// ApplyRecipeParametersReq.Validate if the designated constraints aren't met.
type ApplyRecipeParametersReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplyRecipeParametersReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplyRecipeParametersReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplyRecipeParametersReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplyRecipeParametersReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplyRecipeParametersReqValidationError) ErrorName() string {
	return "ApplyRecipeParametersReqValidationError"
}

// Error satisfies the builtin error interface
func (e ApplyRecipeParametersReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplyRecipeParametersReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplyRecipeParametersReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplyRecipeParametersReqValidationError{}

// Validate checks the field values on ApplyRecipeParametersResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApplyRecipeParametersResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplyRecipeParametersResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApplyRecipeParametersRespMultiError, or nil if none found.
func (m *ApplyRecipeParametersResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplyRecipeParametersResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetVersions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ApplyRecipeParametersRespValidationError{
						field:  fmt.Sprintf("Versions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ApplyRecipeParametersRespValidationError{
						field:  fmt.Sprintf("Versions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApplyRecipeParametersRespValidationError{
					field:  fmt.Sprintf("Versions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ApplyRecipeParametersRespMultiError(errors)
	}

	return nil
}

// ApplyRecipeParametersRespMultiError is an error wrapping multiple validation
// errors returned by ApplyRecipeParametersResp.ValidateAll() if the
// designated constraints aren't met.
type ApplyRecipeParametersRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplyRecipeParametersRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplyRecipeParametersRespMultiError) AllErrors() []error { return m }

// ApplyRecipeParametersRespValidationError is the validation error returned by
// ApplyRecipeParametersResp.Validate if the designated constraints aren't met.
type ApplyRecipeParametersRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplyRecipeParametersRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplyRecipeParametersRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplyRecipeParametersRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplyRecipeParametersRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplyRecipeParametersRespValidationError) ErrorName() string {
	return "ApplyRecipeParametersRespValidationError"
}

// Error satisfies the builtin error interface
func (e ApplyRecipeParametersRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplyRecipeParametersResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplyRecipeParametersRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplyRecipeParametersRespValidationError{}

// Validate checks the field values on Recipe with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Recipe) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Recipe with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RecipeMultiError, or nil if none found.
func (m *Recipe) ValidateAll() error {
	return m.validate(true)
}

func (m *Recipe) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMeta()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RecipeValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RecipeValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RecipeValidationError{
				field:  "Meta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RecipeValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RecipeValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RecipeValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RecipeMultiError(errors)
	}

	return nil
}

// RecipeMultiError is an error wrapping multiple validation errors returned by
// Recipe.ValidateAll() if the designated constraints aren't met.
type RecipeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecipeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecipeMultiError) AllErrors() []error { return m }

// RecipeValidationError is the validation error returned by Recipe.Validate if
// the designated constraints aren't met.
type RecipeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecipeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecipeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecipeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecipeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecipeValidationError) ErrorName() string { return "RecipeValidationError" }

// Error satisfies the builtin error interface
func (e RecipeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecipe.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecipeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecipeValidationError{}

// Validate checks the field values on ListRecipesReq_ByService with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRecipesReq_ByService) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRecipesReq_ByService with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRecipesReq_ByServiceMultiError, or nil if none found.
func (m *ListRecipesReq_ByService) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRecipesReq_ByService) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Application

	// no validation rules for Service

	if len(errors) > 0 {
		return ListRecipesReq_ByServiceMultiError(errors)
	}

	return nil
}

// ListRecipesReq_ByServiceMultiError is an error wrapping multiple validation
// errors returned by ListRecipesReq_ByService.ValidateAll() if the designated
// constraints aren't met.
type ListRecipesReq_ByServiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRecipesReq_ByServiceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRecipesReq_ByServiceMultiError) AllErrors() []error { return m }

// ListRecipesReq_ByServiceValidationError is the validation error returned by
// ListRecipesReq_ByService.Validate if the designated constraints aren't met.
type ListRecipesReq_ByServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRecipesReq_ByServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRecipesReq_ByServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRecipesReq_ByServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRecipesReq_ByServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRecipesReq_ByServiceValidationError) ErrorName() string {
	return "ListRecipesReq_ByServiceValidationError"
}

// Error satisfies the builtin error interface
func (e ListRecipesReq_ByServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRecipesReq_ByService.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRecipesReq_ByServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRecipesReq_ByServiceValidationError{}

// Validate checks the field values on ApplyRecipeParametersResp_ServiceVersion
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ApplyRecipeParametersResp_ServiceVersion) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ApplyRecipeParametersResp_ServiceVersion with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ApplyRecipeParametersResp_ServiceVersionMultiError, or nil if none found.
func (m *ApplyRecipeParametersResp_ServiceVersion) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplyRecipeParametersResp_ServiceVersion) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Service

	// no validation rules for ServiceId

	// no validation rules for ServiceVersion

	// no validation rules for Application

	// no validation rules for ApplicationId

	if len(errors) > 0 {
		return ApplyRecipeParametersResp_ServiceVersionMultiError(errors)
	}

	return nil
}

// ApplyRecipeParametersResp_ServiceVersionMultiError is an error wrapping
// multiple validation errors returned by
// ApplyRecipeParametersResp_ServiceVersion.ValidateAll() if the designated
// constraints aren't met.
type ApplyRecipeParametersResp_ServiceVersionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplyRecipeParametersResp_ServiceVersionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplyRecipeParametersResp_ServiceVersionMultiError) AllErrors() []error { return m }

// ApplyRecipeParametersResp_ServiceVersionValidationError is the validation
// error returned by ApplyRecipeParametersResp_ServiceVersion.Validate if the
// designated constraints aren't met.
type ApplyRecipeParametersResp_ServiceVersionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplyRecipeParametersResp_ServiceVersionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplyRecipeParametersResp_ServiceVersionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplyRecipeParametersResp_ServiceVersionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplyRecipeParametersResp_ServiceVersionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplyRecipeParametersResp_ServiceVersionValidationError) ErrorName() string {
	return "ApplyRecipeParametersResp_ServiceVersionValidationError"
}

// Error satisfies the builtin error interface
func (e ApplyRecipeParametersResp_ServiceVersionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplyRecipeParametersResp_ServiceVersion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplyRecipeParametersResp_ServiceVersionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplyRecipeParametersResp_ServiceVersionValidationError{}
