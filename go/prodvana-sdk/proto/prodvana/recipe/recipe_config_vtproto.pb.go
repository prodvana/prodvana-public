// Code generated by protoc-gen-go-vtproto. DO NOT EDIT.
// protoc-gen-go-vtproto version: v0.6.0
// source: prodvana/recipe/recipe_config.proto

package recipe

import (
	proto "google.golang.org/protobuf/proto"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

func (m *ServiceTarget) CloneVT() *ServiceTarget {
	if m == nil {
		return (*ServiceTarget)(nil)
	}
	r := new(ServiceTarget)
	r.Application = m.Application
	r.ApplicationId = m.ApplicationId
	r.Service = m.Service
	r.ServiceId = m.ServiceId
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ServiceTarget) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *Target) CloneVT() *Target {
	if m == nil {
		return (*Target)(nil)
	}
	r := new(Target)
	if m.Target != nil {
		r.Target = m.Target.(interface{ CloneVT() isTarget_Target }).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Target) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *Target_Service) CloneVT() isTarget_Target {
	if m == nil {
		return (*Target_Service)(nil)
	}
	r := new(Target_Service)
	r.Service = m.Service.CloneVT()
	return r
}

func (m *RecipeStage) CloneVT() *RecipeStage {
	if m == nil {
		return (*RecipeStage)(nil)
	}
	r := new(RecipeStage)
	if rhs := m.Targets; rhs != nil {
		tmpContainer := make([]*Target, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Targets = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RecipeStage) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RecipeConfig) CloneVT() *RecipeConfig {
	if m == nil {
		return (*RecipeConfig)(nil)
	}
	r := new(RecipeConfig)
	r.Name = m.Name
	r.Application = m.Application
	r.Strategy = m.Strategy
	if rhs := m.Stages; rhs != nil {
		tmpContainer := make([]*RecipeStage, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Stages = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RecipeConfig) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (this *ServiceTarget) StableEqualVT(that *ServiceTarget) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Application != that.Application {
		return false
	}
	if this.ApplicationId != that.ApplicationId {
		return false
	}
	if this.Service != that.Service {
		return false
	}
	if this.ServiceId != that.ServiceId {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ServiceTarget) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ServiceTarget)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ServiceTarget) EqualVT(that *ServiceTarget) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Application != that.Application {
		return false
	}
	if this.ApplicationId != that.ApplicationId {
		return false
	}
	if this.Service != that.Service {
		return false
	}
	if this.ServiceId != that.ServiceId {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ServiceTarget) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ServiceTarget)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Target) StableEqualVT(that *Target) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Target == nil && that.Target != nil {
		return false
	} else if this.Target != nil {
		if that.Target == nil {
			return false
		}
		if !this.Target.(interface{ StableEqualVT(isTarget_Target) bool }).StableEqualVT(that.Target) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Target) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Target)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *Target_Service) StableEqualVT(thatIface isTarget_Target) bool {
	that, ok := thatIface.(*Target_Service)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Service, that.Service; p != q {
		if p == nil {
			p = &ServiceTarget{}
		}
		if q == nil {
			q = &ServiceTarget{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Target) EqualVT(that *Target) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Target == nil && that.Target != nil {
		return false
	} else if this.Target != nil {
		if that.Target == nil {
			return false
		}
		if !this.Target.(interface{ EqualVT(isTarget_Target) bool }).EqualVT(that.Target) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Target) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Target)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Target_Service) EqualVT(thatIface isTarget_Target) bool {
	that, ok := thatIface.(*Target_Service)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Service, that.Service; p != q {
		if p == nil {
			p = &ServiceTarget{}
		}
		if q == nil {
			q = &ServiceTarget{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RecipeStage) StableEqualVT(that *RecipeStage) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Targets) != len(that.Targets) {
		return false
	}
	for i, vx := range this.Targets {
		vy := that.Targets[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Target{}
			}
			if q == nil {
				q = &Target{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RecipeStage) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RecipeStage)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *RecipeStage) EqualVT(that *RecipeStage) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Targets) != len(that.Targets) {
		return false
	}
	for i, vx := range this.Targets {
		vy := that.Targets[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Target{}
			}
			if q == nil {
				q = &Target{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RecipeStage) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RecipeStage)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RecipeConfig) StableEqualVT(that *RecipeConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	if this.Application != that.Application {
		return false
	}
	if len(this.Stages) != len(that.Stages) {
		return false
	}
	for i, vx := range this.Stages {
		vy := that.Stages[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &RecipeStage{}
			}
			if q == nil {
				q = &RecipeStage{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if this.Strategy != that.Strategy {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RecipeConfig) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RecipeConfig)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *RecipeConfig) EqualVT(that *RecipeConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	if this.Application != that.Application {
		return false
	}
	if len(this.Stages) != len(that.Stages) {
		return false
	}
	for i, vx := range this.Stages {
		vy := that.Stages[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &RecipeStage{}
			}
			if q == nil {
				q = &RecipeStage{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if this.Strategy != that.Strategy {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RecipeConfig) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RecipeConfig)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
