// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: prodvana/recipe/recipe_config.proto

package recipe

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ServiceTarget with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ServiceTarget) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServiceTarget with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ServiceTargetMultiError, or
// nil if none found.
func (m *ServiceTarget) ValidateAll() error {
	return m.validate(true)
}

func (m *ServiceTarget) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Application

	// no validation rules for ApplicationId

	// no validation rules for Service

	// no validation rules for ServiceId

	if len(errors) > 0 {
		return ServiceTargetMultiError(errors)
	}

	return nil
}

// ServiceTargetMultiError is an error wrapping multiple validation errors
// returned by ServiceTarget.ValidateAll() if the designated constraints
// aren't met.
type ServiceTargetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceTargetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceTargetMultiError) AllErrors() []error { return m }

// ServiceTargetValidationError is the validation error returned by
// ServiceTarget.Validate if the designated constraints aren't met.
type ServiceTargetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceTargetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceTargetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceTargetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceTargetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceTargetValidationError) ErrorName() string { return "ServiceTargetValidationError" }

// Error satisfies the builtin error interface
func (e ServiceTargetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceTarget.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceTargetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceTargetValidationError{}

// Validate checks the field values on Target with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Target) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Target with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TargetMultiError, or nil if none found.
func (m *Target) ValidateAll() error {
	return m.validate(true)
}

func (m *Target) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Target.(type) {
	case *Target_Service:
		if v == nil {
			err := TargetValidationError{
				field:  "Target",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetService()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TargetValidationError{
						field:  "Service",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TargetValidationError{
						field:  "Service",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetService()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TargetValidationError{
					field:  "Service",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return TargetMultiError(errors)
	}

	return nil
}

// TargetMultiError is an error wrapping multiple validation errors returned by
// Target.ValidateAll() if the designated constraints aren't met.
type TargetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TargetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TargetMultiError) AllErrors() []error { return m }

// TargetValidationError is the validation error returned by Target.Validate if
// the designated constraints aren't met.
type TargetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TargetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TargetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TargetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TargetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TargetValidationError) ErrorName() string { return "TargetValidationError" }

// Error satisfies the builtin error interface
func (e TargetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTarget.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TargetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TargetValidationError{}

// Validate checks the field values on RecipeStage with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RecipeStage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecipeStage with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RecipeStageMultiError, or
// nil if none found.
func (m *RecipeStage) ValidateAll() error {
	return m.validate(true)
}

func (m *RecipeStage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTargets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RecipeStageValidationError{
						field:  fmt.Sprintf("Targets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RecipeStageValidationError{
						field:  fmt.Sprintf("Targets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RecipeStageValidationError{
					field:  fmt.Sprintf("Targets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RecipeStageMultiError(errors)
	}

	return nil
}

// RecipeStageMultiError is an error wrapping multiple validation errors
// returned by RecipeStage.ValidateAll() if the designated constraints aren't met.
type RecipeStageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecipeStageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecipeStageMultiError) AllErrors() []error { return m }

// RecipeStageValidationError is the validation error returned by
// RecipeStage.Validate if the designated constraints aren't met.
type RecipeStageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecipeStageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecipeStageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecipeStageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecipeStageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecipeStageValidationError) ErrorName() string { return "RecipeStageValidationError" }

// Error satisfies the builtin error interface
func (e RecipeStageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecipeStage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecipeStageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecipeStageValidationError{}

// Validate checks the field values on RecipeConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RecipeConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecipeConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RecipeConfigMultiError, or
// nil if none found.
func (m *RecipeConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *RecipeConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 63 {
		err := RecipeConfigValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 63 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_RecipeConfig_Name_Pattern.MatchString(m.GetName()) {
		err := RecipeConfigValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[a-z]([a-z0-9-]*[a-z0-9]){0,1}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Application

	for idx, item := range m.GetStages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RecipeConfigValidationError{
						field:  fmt.Sprintf("Stages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RecipeConfigValidationError{
						field:  fmt.Sprintf("Stages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RecipeConfigValidationError{
					field:  fmt.Sprintf("Stages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Strategy

	if len(errors) > 0 {
		return RecipeConfigMultiError(errors)
	}

	return nil
}

// RecipeConfigMultiError is an error wrapping multiple validation errors
// returned by RecipeConfig.ValidateAll() if the designated constraints aren't met.
type RecipeConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecipeConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecipeConfigMultiError) AllErrors() []error { return m }

// RecipeConfigValidationError is the validation error returned by
// RecipeConfig.Validate if the designated constraints aren't met.
type RecipeConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecipeConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecipeConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecipeConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecipeConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecipeConfigValidationError) ErrorName() string { return "RecipeConfigValidationError" }

// Error satisfies the builtin error interface
func (e RecipeConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecipeConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecipeConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecipeConfigValidationError{}

var _RecipeConfig_Name_Pattern = regexp.MustCompile("^[a-z]([a-z0-9-]*[a-z0-9]){0,1}$")
