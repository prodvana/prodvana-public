// Code generated by protoc-gen-go-vtproto. DO NOT EDIT.
// protoc-gen-go-vtproto version: v0.6.0
// source: prodvana/fly/fly_config.proto

package fly

import (
	common_config "github.com/prodvana/prodvana-public/go/prodvana-sdk/proto/prodvana/common_config"
	proto "google.golang.org/protobuf/proto"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

func (m *FlyConfig) CloneVT() *FlyConfig {
	if m == nil {
		return (*FlyConfig)(nil)
	}
	r := new(FlyConfig)
	if m.TomlOneof != nil {
		r.TomlOneof = m.TomlOneof.(interface{ CloneVT() isFlyConfig_TomlOneof }).CloneVT()
	}
	if rhs := m.Regions; rhs != nil {
		tmpContainer := make([]string, len(rhs))
		copy(tmpContainer, rhs)
		r.Regions = tmpContainer
	}
	if rhs := m.ExcludeRegions; rhs != nil {
		tmpContainer := make([]string, len(rhs))
		copy(tmpContainer, rhs)
		r.ExcludeRegions = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *FlyConfig) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *FlyConfig_Inlined) CloneVT() isFlyConfig_TomlOneof {
	if m == nil {
		return (*FlyConfig_Inlined)(nil)
	}
	r := new(FlyConfig_Inlined)
	r.Inlined = m.Inlined
	return r
}

func (m *FlyConfig_Local) CloneVT() isFlyConfig_TomlOneof {
	if m == nil {
		return (*FlyConfig_Local)(nil)
	}
	r := new(FlyConfig_Local)
	r.Local = m.Local.CloneVT()
	return r
}

func (m *FlyConfig_Remote) CloneVT() isFlyConfig_TomlOneof {
	if m == nil {
		return (*FlyConfig_Remote)(nil)
	}
	r := new(FlyConfig_Remote)
	r.Remote = m.Remote.CloneVT()
	return r
}

func (this *FlyConfig) StableEqualVT(that *FlyConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.TomlOneof == nil && that.TomlOneof != nil {
		return false
	} else if this.TomlOneof != nil {
		if that.TomlOneof == nil {
			return false
		}
		if !this.TomlOneof.(interface {
			StableEqualVT(isFlyConfig_TomlOneof) bool
		}).StableEqualVT(that.TomlOneof) {
			return false
		}
	}
	if len(this.Regions) != len(that.Regions) {
		return false
	}
	for i, vx := range this.Regions {
		vy := that.Regions[i]
		if vx != vy {
			return false
		}
	}
	if len(this.ExcludeRegions) != len(that.ExcludeRegions) {
		return false
	}
	for i, vx := range this.ExcludeRegions {
		vy := that.ExcludeRegions[i]
		if vx != vy {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *FlyConfig) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*FlyConfig)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *FlyConfig_Inlined) StableEqualVT(thatIface isFlyConfig_TomlOneof) bool {
	that, ok := thatIface.(*FlyConfig_Inlined)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.Inlined != that.Inlined {
		return false
	}
	return true
}

func (this *FlyConfig_Local) StableEqualVT(thatIface isFlyConfig_TomlOneof) bool {
	that, ok := thatIface.(*FlyConfig_Local)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Local, that.Local; p != q {
		if p == nil {
			p = &common_config.LocalConfig{}
		}
		if q == nil {
			q = &common_config.LocalConfig{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *FlyConfig_Remote) StableEqualVT(thatIface isFlyConfig_TomlOneof) bool {
	that, ok := thatIface.(*FlyConfig_Remote)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Remote, that.Remote; p != q {
		if p == nil {
			p = &common_config.RemoteConfig{}
		}
		if q == nil {
			q = &common_config.RemoteConfig{}
		}
		if !p.StableEqualVT(q) {
			return false
		}
	}
	return true
}

func (this *FlyConfig) EqualVT(that *FlyConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.TomlOneof == nil && that.TomlOneof != nil {
		return false
	} else if this.TomlOneof != nil {
		if that.TomlOneof == nil {
			return false
		}
		if !this.TomlOneof.(interface {
			EqualVT(isFlyConfig_TomlOneof) bool
		}).EqualVT(that.TomlOneof) {
			return false
		}
	}
	if len(this.Regions) != len(that.Regions) {
		return false
	}
	for i, vx := range this.Regions {
		vy := that.Regions[i]
		if vx != vy {
			return false
		}
	}
	if len(this.ExcludeRegions) != len(that.ExcludeRegions) {
		return false
	}
	for i, vx := range this.ExcludeRegions {
		vy := that.ExcludeRegions[i]
		if vx != vy {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *FlyConfig) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*FlyConfig)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *FlyConfig_Inlined) EqualVT(thatIface isFlyConfig_TomlOneof) bool {
	that, ok := thatIface.(*FlyConfig_Inlined)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.Inlined != that.Inlined {
		return false
	}
	return true
}

func (this *FlyConfig_Local) EqualVT(thatIface isFlyConfig_TomlOneof) bool {
	that, ok := thatIface.(*FlyConfig_Local)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Local, that.Local; p != q {
		if p == nil {
			p = &common_config.LocalConfig{}
		}
		if q == nil {
			q = &common_config.LocalConfig{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *FlyConfig_Remote) EqualVT(thatIface isFlyConfig_TomlOneof) bool {
	that, ok := thatIface.(*FlyConfig_Remote)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Remote, that.Remote; p != q {
		if p == nil {
			p = &common_config.RemoteConfig{}
		}
		if q == nil {
			q = &common_config.RemoteConfig{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}
