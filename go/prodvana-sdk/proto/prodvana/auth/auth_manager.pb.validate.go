// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: prodvana/auth/auth_manager.proto

package auth

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetTokenRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTokenRequestMultiError, or nil if none found.
func (m *GetTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for RedirectUrl

	// no validation rules for ForCli

	// no validation rules for ProdvanaOnlyAdminOrg

	if len(errors) > 0 {
		return GetTokenRequestMultiError(errors)
	}

	return nil
}

// GetTokenRequestMultiError is an error wrapping multiple validation errors
// returned by GetTokenRequest.ValidateAll() if the designated constraints
// aren't met.
type GetTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTokenRequestMultiError) AllErrors() []error { return m }

// GetTokenRequestValidationError is the validation error returned by
// GetTokenRequest.Validate if the designated constraints aren't met.
type GetTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTokenRequestValidationError) ErrorName() string { return "GetTokenRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTokenRequestValidationError{}

// Validate checks the field values on GetAuthUrlResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAuthUrlResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAuthUrlResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAuthUrlResponseMultiError, or nil if none found.
func (m *GetAuthUrlResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAuthUrlResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AuthUrl

	if len(errors) > 0 {
		return GetAuthUrlResponseMultiError(errors)
	}

	return nil
}

// GetAuthUrlResponseMultiError is an error wrapping multiple validation errors
// returned by GetAuthUrlResponse.ValidateAll() if the designated constraints
// aren't met.
type GetAuthUrlResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAuthUrlResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAuthUrlResponseMultiError) AllErrors() []error { return m }

// GetAuthUrlResponseValidationError is the validation error returned by
// GetAuthUrlResponse.Validate if the designated constraints aren't met.
type GetAuthUrlResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAuthUrlResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAuthUrlResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAuthUrlResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAuthUrlResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAuthUrlResponseValidationError) ErrorName() string {
	return "GetAuthUrlResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAuthUrlResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAuthUrlResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAuthUrlResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAuthUrlResponseValidationError{}

// Validate checks the field values on GetAuthUrlRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAuthUrlRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAuthUrlRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAuthUrlRequestMultiError, or nil if none found.
func (m *GetAuthUrlRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAuthUrlRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for State

	// no validation rules for ForCli

	// no validation rules for Invitation

	// no validation rules for ProdvanaOnlyAdminOrg

	if len(errors) > 0 {
		return GetAuthUrlRequestMultiError(errors)
	}

	return nil
}

// GetAuthUrlRequestMultiError is an error wrapping multiple validation errors
// returned by GetAuthUrlRequest.ValidateAll() if the designated constraints
// aren't met.
type GetAuthUrlRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAuthUrlRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAuthUrlRequestMultiError) AllErrors() []error { return m }

// GetAuthUrlRequestValidationError is the validation error returned by
// GetAuthUrlRequest.Validate if the designated constraints aren't met.
type GetAuthUrlRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAuthUrlRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAuthUrlRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAuthUrlRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAuthUrlRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAuthUrlRequestValidationError) ErrorName() string {
	return "GetAuthUrlRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAuthUrlRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAuthUrlRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAuthUrlRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAuthUrlRequestValidationError{}

// Validate checks the field values on CliAuthReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CliAuthReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CliAuthReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CliAuthReqMultiError, or
// nil if none found.
func (m *CliAuthReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CliAuthReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CliAuthReqMultiError(errors)
	}

	return nil
}

// CliAuthReqMultiError is an error wrapping multiple validation errors
// returned by CliAuthReq.ValidateAll() if the designated constraints aren't met.
type CliAuthReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CliAuthReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CliAuthReqMultiError) AllErrors() []error { return m }

// CliAuthReqValidationError is the validation error returned by
// CliAuthReq.Validate if the designated constraints aren't met.
type CliAuthReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CliAuthReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CliAuthReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CliAuthReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CliAuthReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CliAuthReqValidationError) ErrorName() string { return "CliAuthReqValidationError" }

// Error satisfies the builtin error interface
func (e CliAuthReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCliAuthReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CliAuthReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CliAuthReqValidationError{}

// Validate checks the field values on CliAuthResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CliAuthResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CliAuthResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CliAuthRespMultiError, or
// nil if none found.
func (m *CliAuthResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CliAuthResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.RespOneof.(type) {
	case *CliAuthResp_UserPrompt_:
		if v == nil {
			err := CliAuthRespValidationError{
				field:  "RespOneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetUserPrompt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CliAuthRespValidationError{
						field:  "UserPrompt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CliAuthRespValidationError{
						field:  "UserPrompt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUserPrompt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CliAuthRespValidationError{
					field:  "UserPrompt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *CliAuthResp_Token:
		if v == nil {
			err := CliAuthRespValidationError{
				field:  "RespOneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetToken()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CliAuthRespValidationError{
						field:  "Token",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CliAuthRespValidationError{
						field:  "Token",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetToken()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CliAuthRespValidationError{
					field:  "Token",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return CliAuthRespMultiError(errors)
	}

	return nil
}

// CliAuthRespMultiError is an error wrapping multiple validation errors
// returned by CliAuthResp.ValidateAll() if the designated constraints aren't met.
type CliAuthRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CliAuthRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CliAuthRespMultiError) AllErrors() []error { return m }

// CliAuthRespValidationError is the validation error returned by
// CliAuthResp.Validate if the designated constraints aren't met.
type CliAuthRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CliAuthRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CliAuthRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CliAuthRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CliAuthRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CliAuthRespValidationError) ErrorName() string { return "CliAuthRespValidationError" }

// Error satisfies the builtin error interface
func (e CliAuthRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCliAuthResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CliAuthRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CliAuthRespValidationError{}

// Validate checks the field values on RefreshTokenReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RefreshTokenReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefreshTokenReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefreshTokenReqMultiError, or nil if none found.
func (m *RefreshTokenReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshTokenReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetToken()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RefreshTokenReqValidationError{
					field:  "Token",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RefreshTokenReqValidationError{
					field:  "Token",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetToken()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RefreshTokenReqValidationError{
				field:  "Token",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ForCli

	// no validation rules for ProdvanaOnlyAdminOrg

	if len(errors) > 0 {
		return RefreshTokenReqMultiError(errors)
	}

	return nil
}

// RefreshTokenReqMultiError is an error wrapping multiple validation errors
// returned by RefreshTokenReq.ValidateAll() if the designated constraints
// aren't met.
type RefreshTokenReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshTokenReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshTokenReqMultiError) AllErrors() []error { return m }

// RefreshTokenReqValidationError is the validation error returned by
// RefreshTokenReq.Validate if the designated constraints aren't met.
type RefreshTokenReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshTokenReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshTokenReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshTokenReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshTokenReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshTokenReqValidationError) ErrorName() string { return "RefreshTokenReqValidationError" }

// Error satisfies the builtin error interface
func (e RefreshTokenReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshTokenReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshTokenReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshTokenReqValidationError{}

// Validate checks the field values on GetAuthTokenResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAuthTokenResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAuthTokenResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAuthTokenRespMultiError, or nil if none found.
func (m *GetAuthTokenResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAuthTokenResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetToken()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAuthTokenRespValidationError{
					field:  "Token",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAuthTokenRespValidationError{
					field:  "Token",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetToken()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAuthTokenRespValidationError{
				field:  "Token",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAuthTokenRespValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAuthTokenRespValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAuthTokenRespValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAuthTokenRespMultiError(errors)
	}

	return nil
}

// GetAuthTokenRespMultiError is an error wrapping multiple validation errors
// returned by GetAuthTokenResp.ValidateAll() if the designated constraints
// aren't met.
type GetAuthTokenRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAuthTokenRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAuthTokenRespMultiError) AllErrors() []error { return m }

// GetAuthTokenRespValidationError is the validation error returned by
// GetAuthTokenResp.Validate if the designated constraints aren't met.
type GetAuthTokenRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAuthTokenRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAuthTokenRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAuthTokenRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAuthTokenRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAuthTokenRespValidationError) ErrorName() string { return "GetAuthTokenRespValidationError" }

// Error satisfies the builtin error interface
func (e GetAuthTokenRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAuthTokenResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAuthTokenRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAuthTokenRespValidationError{}

// Validate checks the field values on Empty with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Empty) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Empty with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EmptyMultiError, or nil if none found.
func (m *Empty) ValidateAll() error {
	return m.validate(true)
}

func (m *Empty) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EmptyMultiError(errors)
	}

	return nil
}

// EmptyMultiError is an error wrapping multiple validation errors returned by
// Empty.ValidateAll() if the designated constraints aren't met.
type EmptyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmptyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmptyMultiError) AllErrors() []error { return m }

// EmptyValidationError is the validation error returned by Empty.Validate if
// the designated constraints aren't met.
type EmptyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmptyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmptyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmptyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmptyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmptyValidationError) ErrorName() string { return "EmptyValidationError" }

// Error satisfies the builtin error interface
func (e EmptyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmpty.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmptyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmptyValidationError{}

// Validate checks the field values on LogoutReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogoutReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogoutReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogoutReqMultiError, or nil
// if none found.
func (m *LogoutReq) ValidateAll() error {
	return m.validate(true)
}

func (m *LogoutReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ForCli

	// no validation rules for RedirectUrl

	// no validation rules for ProdvanaOnlyAdminOrg

	if len(errors) > 0 {
		return LogoutReqMultiError(errors)
	}

	return nil
}

// LogoutReqMultiError is an error wrapping multiple validation errors returned
// by LogoutReq.ValidateAll() if the designated constraints aren't met.
type LogoutReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogoutReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogoutReqMultiError) AllErrors() []error { return m }

// LogoutReqValidationError is the validation error returned by
// LogoutReq.Validate if the designated constraints aren't met.
type LogoutReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogoutReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogoutReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogoutReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogoutReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogoutReqValidationError) ErrorName() string { return "LogoutReqValidationError" }

// Error satisfies the builtin error interface
func (e LogoutReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogoutReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogoutReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogoutReqValidationError{}

// Validate checks the field values on LogoutResp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogoutResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogoutResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogoutRespMultiError, or
// nil if none found.
func (m *LogoutResp) ValidateAll() error {
	return m.validate(true)
}

func (m *LogoutResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LogoutUrl

	if len(errors) > 0 {
		return LogoutRespMultiError(errors)
	}

	return nil
}

// LogoutRespMultiError is an error wrapping multiple validation errors
// returned by LogoutResp.ValidateAll() if the designated constraints aren't met.
type LogoutRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogoutRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogoutRespMultiError) AllErrors() []error { return m }

// LogoutRespValidationError is the validation error returned by
// LogoutResp.Validate if the designated constraints aren't met.
type LogoutRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogoutRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogoutRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogoutRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogoutRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogoutRespValidationError) ErrorName() string { return "LogoutRespValidationError" }

// Error satisfies the builtin error interface
func (e LogoutRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogoutResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogoutRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogoutRespValidationError{}

// Validate checks the field values on CreateOrgApiTokenReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrgApiTokenReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrgApiTokenReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrgApiTokenReqMultiError, or nil if none found.
func (m *CreateOrgApiTokenReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrgApiTokenReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetExpiresTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrgApiTokenReqValidationError{
					field:  "ExpiresTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrgApiTokenReqValidationError{
					field:  "ExpiresTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiresTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrgApiTokenReqValidationError{
				field:  "ExpiresTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOrgApiTokenReqMultiError(errors)
	}

	return nil
}

// CreateOrgApiTokenReqMultiError is an error wrapping multiple validation
// errors returned by CreateOrgApiTokenReq.ValidateAll() if the designated
// constraints aren't met.
type CreateOrgApiTokenReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrgApiTokenReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrgApiTokenReqMultiError) AllErrors() []error { return m }

// CreateOrgApiTokenReqValidationError is the validation error returned by
// CreateOrgApiTokenReq.Validate if the designated constraints aren't met.
type CreateOrgApiTokenReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrgApiTokenReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrgApiTokenReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrgApiTokenReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrgApiTokenReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrgApiTokenReqValidationError) ErrorName() string {
	return "CreateOrgApiTokenReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrgApiTokenReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrgApiTokenReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrgApiTokenReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrgApiTokenReqValidationError{}

// Validate checks the field values on CreateOrgApiTokenResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrgApiTokenResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrgApiTokenResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrgApiTokenRespMultiError, or nil if none found.
func (m *CreateOrgApiTokenResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrgApiTokenResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApiToken

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrgApiTokenRespValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrgApiTokenRespValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrgApiTokenRespValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOrgApiTokenRespMultiError(errors)
	}

	return nil
}

// CreateOrgApiTokenRespMultiError is an error wrapping multiple validation
// errors returned by CreateOrgApiTokenResp.ValidateAll() if the designated
// constraints aren't met.
type CreateOrgApiTokenRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrgApiTokenRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrgApiTokenRespMultiError) AllErrors() []error { return m }

// CreateOrgApiTokenRespValidationError is the validation error returned by
// CreateOrgApiTokenResp.Validate if the designated constraints aren't met.
type CreateOrgApiTokenRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrgApiTokenRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrgApiTokenRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrgApiTokenRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrgApiTokenRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrgApiTokenRespValidationError) ErrorName() string {
	return "CreateOrgApiTokenRespValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrgApiTokenRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrgApiTokenResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrgApiTokenRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrgApiTokenRespValidationError{}

// Validate checks the field values on DeleteOrgApiTokenReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOrgApiTokenReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOrgApiTokenReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOrgApiTokenReqMultiError, or nil if none found.
func (m *DeleteOrgApiTokenReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOrgApiTokenReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return DeleteOrgApiTokenReqMultiError(errors)
	}

	return nil
}

// DeleteOrgApiTokenReqMultiError is an error wrapping multiple validation
// errors returned by DeleteOrgApiTokenReq.ValidateAll() if the designated
// constraints aren't met.
type DeleteOrgApiTokenReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOrgApiTokenReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOrgApiTokenReqMultiError) AllErrors() []error { return m }

// DeleteOrgApiTokenReqValidationError is the validation error returned by
// DeleteOrgApiTokenReq.Validate if the designated constraints aren't met.
type DeleteOrgApiTokenReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOrgApiTokenReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOrgApiTokenReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOrgApiTokenReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOrgApiTokenReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOrgApiTokenReqValidationError) ErrorName() string {
	return "DeleteOrgApiTokenReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOrgApiTokenReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOrgApiTokenReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOrgApiTokenReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOrgApiTokenReqValidationError{}

// Validate checks the field values on DeleteOrgApiTokenResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOrgApiTokenResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOrgApiTokenResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOrgApiTokenRespMultiError, or nil if none found.
func (m *DeleteOrgApiTokenResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOrgApiTokenResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteOrgApiTokenRespMultiError(errors)
	}

	return nil
}

// DeleteOrgApiTokenRespMultiError is an error wrapping multiple validation
// errors returned by DeleteOrgApiTokenResp.ValidateAll() if the designated
// constraints aren't met.
type DeleteOrgApiTokenRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOrgApiTokenRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOrgApiTokenRespMultiError) AllErrors() []error { return m }

// DeleteOrgApiTokenRespValidationError is the validation error returned by
// DeleteOrgApiTokenResp.Validate if the designated constraints aren't met.
type DeleteOrgApiTokenRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOrgApiTokenRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOrgApiTokenRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOrgApiTokenRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOrgApiTokenRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOrgApiTokenRespValidationError) ErrorName() string {
	return "DeleteOrgApiTokenRespValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOrgApiTokenRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOrgApiTokenResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOrgApiTokenRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOrgApiTokenRespValidationError{}

// Validate checks the field values on ListOrgApiTokensReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrgApiTokensReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrgApiTokensReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrgApiTokensReqMultiError, or nil if none found.
func (m *ListOrgApiTokensReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrgApiTokensReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListOrgApiTokensReqMultiError(errors)
	}

	return nil
}

// ListOrgApiTokensReqMultiError is an error wrapping multiple validation
// errors returned by ListOrgApiTokensReq.ValidateAll() if the designated
// constraints aren't met.
type ListOrgApiTokensReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrgApiTokensReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrgApiTokensReqMultiError) AllErrors() []error { return m }

// ListOrgApiTokensReqValidationError is the validation error returned by
// ListOrgApiTokensReq.Validate if the designated constraints aren't met.
type ListOrgApiTokensReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrgApiTokensReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrgApiTokensReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrgApiTokensReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrgApiTokensReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrgApiTokensReqValidationError) ErrorName() string {
	return "ListOrgApiTokensReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrgApiTokensReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrgApiTokensReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrgApiTokensReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrgApiTokensReqValidationError{}

// Validate checks the field values on ListOrgApiTokensResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrgApiTokensResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrgApiTokensResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrgApiTokensRespMultiError, or nil if none found.
func (m *ListOrgApiTokensResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrgApiTokensResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTokens() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrgApiTokensRespValidationError{
						field:  fmt.Sprintf("Tokens[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrgApiTokensRespValidationError{
						field:  fmt.Sprintf("Tokens[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrgApiTokensRespValidationError{
					field:  fmt.Sprintf("Tokens[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOrgApiTokensRespMultiError(errors)
	}

	return nil
}

// ListOrgApiTokensRespMultiError is an error wrapping multiple validation
// errors returned by ListOrgApiTokensResp.ValidateAll() if the designated
// constraints aren't met.
type ListOrgApiTokensRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrgApiTokensRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrgApiTokensRespMultiError) AllErrors() []error { return m }

// ListOrgApiTokensRespValidationError is the validation error returned by
// ListOrgApiTokensResp.Validate if the designated constraints aren't met.
type ListOrgApiTokensRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrgApiTokensRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrgApiTokensRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrgApiTokensRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrgApiTokensRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrgApiTokensRespValidationError) ErrorName() string {
	return "ListOrgApiTokensRespValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrgApiTokensRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrgApiTokensResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrgApiTokensRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrgApiTokensRespValidationError{}

// Validate checks the field values on CliAuthResp_UserPrompt with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CliAuthResp_UserPrompt) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CliAuthResp_UserPrompt with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CliAuthResp_UserPromptMultiError, or nil if none found.
func (m *CliAuthResp_UserPrompt) ValidateAll() error {
	return m.validate(true)
}

func (m *CliAuthResp_UserPrompt) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserCode

	// no validation rules for VerificationUri

	// no validation rules for VerificationUriComplete

	if len(errors) > 0 {
		return CliAuthResp_UserPromptMultiError(errors)
	}

	return nil
}

// CliAuthResp_UserPromptMultiError is an error wrapping multiple validation
// errors returned by CliAuthResp_UserPrompt.ValidateAll() if the designated
// constraints aren't met.
type CliAuthResp_UserPromptMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CliAuthResp_UserPromptMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CliAuthResp_UserPromptMultiError) AllErrors() []error { return m }

// CliAuthResp_UserPromptValidationError is the validation error returned by
// CliAuthResp_UserPrompt.Validate if the designated constraints aren't met.
type CliAuthResp_UserPromptValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CliAuthResp_UserPromptValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CliAuthResp_UserPromptValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CliAuthResp_UserPromptValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CliAuthResp_UserPromptValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CliAuthResp_UserPromptValidationError) ErrorName() string {
	return "CliAuthResp_UserPromptValidationError"
}

// Error satisfies the builtin error interface
func (e CliAuthResp_UserPromptValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCliAuthResp_UserPrompt.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CliAuthResp_UserPromptValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CliAuthResp_UserPromptValidationError{}
