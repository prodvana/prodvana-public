// Code generated by protoc-gen-go-vtproto. DO NOT EDIT.
// protoc-gen-go-vtproto version: v0.6.0
// source: prodvana/auth/auth.proto

package auth

import (
	timestamppb1 "github.com/planetscale/vtprotobuf/types/known/timestamppb"
	proto "google.golang.org/protobuf/proto"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

func (m *AuthToken) CloneVT() *AuthToken {
	if m == nil {
		return (*AuthToken)(nil)
	}
	r := new(AuthToken)
	r.Token = m.Token
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *AuthToken) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *ApiTokenInfo) CloneVT() *ApiTokenInfo {
	if m == nil {
		return (*ApiTokenInfo)(nil)
	}
	r := new(ApiTokenInfo)
	r.Name = m.Name
	r.Description = m.Description
	r.ExpiresTimestamp = (*timestamppb.Timestamp)((*timestamppb1.Timestamp)(m.ExpiresTimestamp).CloneVT())
	r.CreationTimestamp = (*timestamppb.Timestamp)((*timestamppb1.Timestamp)(m.CreationTimestamp).CloneVT())
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ApiTokenInfo) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *AuthContext) CloneVT() *AuthContext {
	if m == nil {
		return (*AuthContext)(nil)
	}
	r := new(AuthContext)
	r.AuthToken = m.AuthToken.CloneVT()
	r.ApiToken = m.ApiToken
	r.Addr = m.Addr
	r.SkipTls = m.SkipTls
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *AuthContext) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *Session) CloneVT() *Session {
	if m == nil {
		return (*Session)(nil)
	}
	r := new(Session)
	r.CurrentContext = m.CurrentContext
	r.CurrentAdminContext = m.CurrentAdminContext
	if rhs := m.Contexts; rhs != nil {
		tmpContainer := make(map[string]*AuthContext, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Contexts = tmpContainer
	}
	if rhs := m.AdminContexts; rhs != nil {
		tmpContainer := make(map[string]*AuthContext, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.AdminContexts = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Session) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (this *AuthToken) StableEqualVT(that *AuthToken) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Token != that.Token {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *AuthToken) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*AuthToken)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *AuthToken) EqualVT(that *AuthToken) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Token != that.Token {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *AuthToken) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*AuthToken)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ApiTokenInfo) StableEqualVT(that *ApiTokenInfo) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	if this.Description != that.Description {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.ExpiresTimestamp).StableEqualVT((*timestamppb1.Timestamp)(that.ExpiresTimestamp)) {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.CreationTimestamp).StableEqualVT((*timestamppb1.Timestamp)(that.CreationTimestamp)) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ApiTokenInfo) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ApiTokenInfo)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *ApiTokenInfo) EqualVT(that *ApiTokenInfo) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	if this.Description != that.Description {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.ExpiresTimestamp).EqualVT((*timestamppb1.Timestamp)(that.ExpiresTimestamp)) {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.CreationTimestamp).EqualVT((*timestamppb1.Timestamp)(that.CreationTimestamp)) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ApiTokenInfo) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ApiTokenInfo)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *AuthContext) StableEqualVT(that *AuthContext) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.AuthToken.StableEqualVT(that.AuthToken) {
		return false
	}
	if this.ApiToken != that.ApiToken {
		return false
	}
	if this.Addr != that.Addr {
		return false
	}
	if this.SkipTls != that.SkipTls {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *AuthContext) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*AuthContext)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *AuthContext) EqualVT(that *AuthContext) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.AuthToken.EqualVT(that.AuthToken) {
		return false
	}
	if this.ApiToken != that.ApiToken {
		return false
	}
	if this.Addr != that.Addr {
		return false
	}
	if this.SkipTls != that.SkipTls {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *AuthContext) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*AuthContext)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Session) StableEqualVT(that *Session) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Contexts) != len(that.Contexts) {
		return false
	}
	for i, vx := range this.Contexts {
		vy, ok := that.Contexts[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &AuthContext{}
			}
			if q == nil {
				q = &AuthContext{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if this.CurrentContext != that.CurrentContext {
		return false
	}
	if len(this.AdminContexts) != len(that.AdminContexts) {
		return false
	}
	for i, vx := range this.AdminContexts {
		vy, ok := that.AdminContexts[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &AuthContext{}
			}
			if q == nil {
				q = &AuthContext{}
			}
			if !p.StableEqualVT(q) {
				return false
			}
		}
	}
	if this.CurrentAdminContext != that.CurrentAdminContext {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Session) StableEqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Session)
	if !ok {
		return false
	}
	return this.StableEqualVT(that)
}
func (this *Session) EqualVT(that *Session) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Contexts) != len(that.Contexts) {
		return false
	}
	for i, vx := range this.Contexts {
		vy, ok := that.Contexts[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &AuthContext{}
			}
			if q == nil {
				q = &AuthContext{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if this.CurrentContext != that.CurrentContext {
		return false
	}
	if len(this.AdminContexts) != len(that.AdminContexts) {
		return false
	}
	for i, vx := range this.AdminContexts {
		vy, ok := that.AdminContexts[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &AuthContext{}
			}
			if q == nil {
				q = &AuthContext{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if this.CurrentAdminContext != that.CurrentAdminContext {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Session) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Session)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
