{
  "swagger": "2.0",
  "info": {
    "title": "prodvana/agent/agent_interaction.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "prodvana.application.ApplicationManager"
    },
    {
      "name": "prodvana.auth.AuthManager"
    },
    {
      "name": "prodvana.auth.AuthSessionManager"
    },
    {
      "name": "prodvana.auth.ApiTokenManager"
    },
    {
      "name": "prodvana.blobs.BlobsManager"
    },
    {
      "name": "prodvana.delivery_extension.DeliveryExtensionManager"
    },
    {
      "name": "prodvana.deployment.DeploymentManager"
    },
    {
      "name": "prodvana.desired_state.DesiredStateManager"
    },
    {
      "name": "prodvana.environment.EnvironmentManager"
    },
    {
      "name": "prodvana.events.EventsManager"
    },
    {
      "name": "prodvana.managed_resource.ResourceManager"
    },
    {
      "name": "prodvana.object.ObjectManager"
    },
    {
      "name": "prodvana.organization.OrganizationManager"
    },
    {
      "name": "prodvana.protection.ProtectionManager"
    },
    {
      "name": "prodvana.release.ReleaseManager"
    },
    {
      "name": "prodvana.release_channel.ReleaseChannelManager"
    },
    {
      "name": "prodvana.environment.SecretsManager"
    },
    {
      "name": "prodvana.service.ServiceManager"
    },
    {
      "name": "prodvana.settings.organization.UsersSettingsManager"
    },
    {
      "name": "prodvana.workflow.WorkflowManager"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/applications": {
      "get": {
        "operationId": "ApplicationManager_ListApplications",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/applicationListApplicationsResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "detailed",
            "description": "if not set, only meta without version is returned",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "prodvana.application.ApplicationManager"
        ]
      }
    },
    "/v1/applications/configure": {
      "post": {
        "operationId": "ApplicationManager_ConfigureApplication",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/applicationConfigureApplicationResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/applicationConfigureApplicationReq"
            }
          }
        ],
        "tags": [
          "prodvana.application.ApplicationManager"
        ]
      }
    },
    "/v1/applications/configure/validate": {
      "post": {
        "operationId": "ApplicationManager_ValidateConfigureApplication",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/applicationValidateConfigureApplicationResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/applicationConfigureApplicationReq"
            }
          }
        ],
        "tags": [
          "prodvana.application.ApplicationManager"
        ]
      }
    },
    "/v1/applications/{application}": {
      "get": {
        "operationId": "ApplicationManager_GetApplication",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/applicationGetApplicationResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "prodvana.application.ApplicationManager"
        ]
      }
    },
    "/v1/applications/{application}/config": {
      "get": {
        "operationId": "ApplicationManager_GetApplicationConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/applicationGetApplicationConfigResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "version",
            "description": "omit to get latest version",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "prodvana.application.ApplicationManager"
        ]
      }
    },
    "/v1/applications/{application}/config/versions": {
      "get": {
        "operationId": "ApplicationManager_ListApplicationConfigVersions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/applicationListApplicationConfigVersionsResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "pageToken",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "prodvana.application.ApplicationManager"
        ]
      }
    },
    "/v1/applications/{application}/insights": {
      "get": {
        "operationId": "ApplicationManager_GetApplicationInsights",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/applicationGetApplicationInsightsResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "prodvana.application.ApplicationManager"
        ]
      }
    },
    "/v1/applications/{application}/insights/snooze": {
      "put": {
        "operationId": "ApplicationManager_SnoozeApplicationInsight",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/applicationSnoozeApplicationInsightResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "class",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN",
              "SUCCESSFUL_DEPLOYMENT_FREQUENCY_DECREASE",
              "DEPLOYMENT_FAILURE_RATE_INCREASE",
              "MEDIAN_SUCCESSFUL_DEPLOYMENT_DURATION_INCREASE",
              "MEDIAN_SUCCESSFUL_ROLLBACK_DURATION_INCREASE"
            ],
            "default": "UNKNOWN"
          },
          {
            "name": "duration",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "prodvana.application.ApplicationManager"
        ]
      }
    },
    "/v1/applications/{application}/metadata": {
      "get": {
        "summary": "Get application metadata, useful for constructing edit workflows for metadata",
        "operationId": "ApplicationManager_GetApplicationMetadata",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/applicationGetApplicationMetadataResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "prodvana.application.ApplicationManager"
        ]
      },
      "post": {
        "operationId": "ApplicationManager_SetApplicationMetadata",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/applicationSetApplicationMetadataResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "metadata": {
                  "$ref": "#/definitions/applicationApplicationUserMetadata"
                }
              }
            }
          }
        ],
        "tags": [
          "prodvana.application.ApplicationManager"
        ]
      }
    },
    "/v1/applications/{application}/metrics": {
      "get": {
        "operationId": "ApplicationManager_GetApplicationMetrics",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/applicationGetApplicationMetricsResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "startTimestamp",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endTimestamp",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "tags": [
          "prodvana.application.ApplicationManager"
        ]
      }
    },
    "/v1/applications/{application}/release-channels": {
      "get": {
        "operationId": "ReleaseChannelManager_ListReleaseChannels",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/release_channelListReleaseChannelsResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "prodvana.release_channel.ReleaseChannelManager"
        ]
      }
    },
    "/v1/applications/{application}/release-channels/configure": {
      "post": {
        "operationId": "ReleaseChannelManager_ConfigureReleaseChannel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/release_channelConfigureReleaseChannelResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "releaseChannel": {
                  "$ref": "#/definitions/release_channelReleaseChannelConfig"
                },
                "source": {
                  "$ref": "#/definitions/versionSource"
                },
                "sourceMetadata": {
                  "$ref": "#/definitions/versionSourceMetadata"
                }
              }
            }
          }
        ],
        "tags": [
          "prodvana.release_channel.ReleaseChannelManager"
        ]
      }
    },
    "/v1/applications/{application}/release-channels/{releaseChannel}": {
      "get": {
        "operationId": "ReleaseChannelManager_GetReleaseChannel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/release_channelGetReleaseChannelResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "releaseChannel",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "prodvana.release_channel.ReleaseChannelManager"
        ]
      }
    },
    "/v1/applications/{application}/release-channels/{releaseChannel}/config": {
      "get": {
        "operationId": "ReleaseChannelManager_GetReleaseChannelConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/release_channelGetReleaseChannelConfigResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "releaseChannel",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "version",
            "description": "omit to get latest version",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "prodvana.release_channel.ReleaseChannelManager"
        ]
      }
    },
    "/v1/applications/{application}/release-channels/{releaseChannel}/events": {
      "get": {
        "operationId": "ReleaseChannelManager_GetReleaseChannelEvents",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/release_channelGetReleaseChannelEventsResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "releaseChannel",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "pageToken",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "orderByDescTimestamp",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "prodvana.release_channel.ReleaseChannelManager"
        ]
      }
    },
    "/v1/applications/{application}/services": {
      "get": {
        "operationId": "ServiceManager_ListServices",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/serviceListServicesResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "detailed",
            "description": "if not set, only meta without version is returned",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "prodvana.service.ServiceManager"
        ]
      }
    },
    "/v1/applications/{application}/services/{service}": {
      "get": {
        "operationId": "ServiceManager_GetService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/serviceGetServiceResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "service",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "prodvana.service.ServiceManager"
        ]
      }
    },
    "/v1/applications/{application}/services/{service}/combined_releases": {
      "get": {
        "summary": "Like ListCombinedReleases, but accepts an application/service names/ids instead of entity ID",
        "operationId": "DesiredStateManager_ListServiceCombinedReleases",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/desired_stateListCombinedReleasesResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "service",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "descending",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "pageToken",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "prodvana.desired_state.DesiredStateManager"
        ]
      }
    },
    "/v1/applications/{application}/services/{service}/combined_releases/latest_desired_state": {
      "get": {
        "operationId": "DesiredStateManager_GetServiceLatestCombinedReleaseDesiredState",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/desired_stateGetLatestCombinedReleaseDesiredStateResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "service",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "prodvana.desired_state.DesiredStateManager"
        ]
      }
    },
    "/v1/applications/{application}/services/{service}/commits": {
      "get": {
        "operationId": "ServiceManager_ListCommits",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/serviceListCommitsResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "service",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "pageToken",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "prodvana.service.ServiceManager"
        ]
      }
    },
    "/v1/applications/{application}/services/{service}/convergence-mode": {
      "post": {
        "operationId": "ServiceManager_SetServiceConvergenceMode",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/serviceSetServiceConvergenceModeResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "service",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "convergenceMode": {
                  "$ref": "#/definitions/convergenceConvergenceMode"
                }
              }
            }
          }
        ],
        "tags": [
          "prodvana.service.ServiceManager"
        ]
      }
    },
    "/v1/applications/{application}/services/{service}/desired_state_id_history": {
      "get": {
        "operationId": "DesiredStateManager_GetServiceDesiredStateIdHistory",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/desired_stateGetServiceDesiredStateIdHistoryResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "service",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "pageToken",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "prodvana.desired_state.DesiredStateManager"
        ]
      }
    },
    "/v1/applications/{application}/services/{service}/desired_states": {
      "get": {
        "operationId": "DesiredStateManager_GetServiceDesiredStateHistory",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/desired_stateGetServiceDesiredStateHistoryResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "service",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "pageToken",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fastNoDeprecatedFields",
            "description": "unused",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "prodvana.desired_state.DesiredStateManager"
        ]
      }
    },
    "/v1/applications/{application}/services/{service}/image": {
      "get": {
        "operationId": "WorkflowManager_GetServiceImageInfo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/workflowGetServiceImageInfoResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "service",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "versions",
            "description": "omit to get just the latest version",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "prodvana.workflow.WorkflowManager"
        ]
      }
    },
    "/v1/applications/{application}/services/{service}/insights": {
      "get": {
        "operationId": "ServiceManager_GetServiceInsights",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/serviceGetServiceInsightsResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "service",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "prodvana.service.ServiceManager"
        ]
      }
    },
    "/v1/applications/{application}/services/{service}/insights/snooze": {
      "put": {
        "operationId": "ServiceManager_SnoozeServiceInsight",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/serviceSnoozeServiceInsightResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "service",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "class",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN",
              "SUCCESSFUL_DEPLOYMENT_FREQUENCY_DECREASE",
              "DEPLOYMENT_FAILURE_RATE_INCREASE",
              "MEDIAN_SUCCESSFUL_DEPLOYMENT_DURATION_INCREASE",
              "MEDIAN_SUCCESSFUL_ROLLBACK_DURATION_INCREASE"
            ],
            "default": "UNKNOWN"
          },
          {
            "name": "duration",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "prodvana.service.ServiceManager"
        ]
      }
    },
    "/v1/applications/{application}/services/{service}/last_converged": {
      "get": {
        "operationId": "DesiredStateManager_GetServiceLastConvergedStates",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/desired_stateGetServiceLastConvergedStateResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "service",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "prodvana.desired_state.DesiredStateManager"
        ]
      }
    },
    "/v1/applications/{application}/services/{service}/latest_desired_state": {
      "get": {
        "operationId": "DesiredStateManager_GetServiceDesiredStateConvergenceSummary",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/desired_stateGetServiceDesiredStateConvergenceSummaryResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "service",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "fastNoDeprecatedFields",
            "description": "unused",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "prodvana.desired_state.DesiredStateManager"
        ]
      }
    },
    "/v1/applications/{application}/services/{service}/latest_desired_state_id": {
      "get": {
        "operationId": "DesiredStateManager_GetServiceLatestDesiredStateId",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/desired_stateGetServiceLatestDesiredStateIdResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "service",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "prodvana.desired_state.DesiredStateManager"
        ]
      }
    },
    "/v1/applications/{application}/services/{service}/metadata": {
      "get": {
        "operationId": "ServiceManager_GetServiceMetadata",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/serviceGetServiceMetadataResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "service",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "prodvana.service.ServiceManager"
        ]
      },
      "post": {
        "operationId": "ServiceManager_SetServiceMetadata",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/serviceSetServiceMetadataResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "service",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "metadata": {
                  "$ref": "#/definitions/serviceServiceUserMetadata"
                }
              }
            }
          }
        ],
        "tags": [
          "prodvana.service.ServiceManager"
        ]
      }
    },
    "/v1/applications/{application}/services/{service}/metrics": {
      "get": {
        "operationId": "ServiceManager_GetServiceMetrics",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/serviceGetServiceMetricsResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "service",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "startTimestamp",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endTimestamp",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "includeCost",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "prodvana.service.ServiceManager"
        ]
      }
    },
    "/v1/applications/{application}/services/{service}/release-channels": {
      "get": {
        "operationId": "ServiceManager_ListServiceInstances",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/serviceListServiceInstancesResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "service",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "prodvana.service.ServiceManager"
        ]
      }
    },
    "/v1/applications/{application}/services/{service}/release-channels/{releaseChannel}": {
      "get": {
        "operationId": "ServiceManager_GetServiceInstance",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/serviceGetServiceInstanceResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "service",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "releaseChannel",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "prodvana.service.ServiceManager"
        ]
      }
    },
    "/v1/auth/api/create_org_token": {
      "post": {
        "summary": "Create an api token tied to the organization. This api token is not tied to the user in anyway,\ne.g. if the user is deleted, the token will continue to have access to the organization.\nThis token currently does not expire, so be very careful with storing them.",
        "operationId": "ApiTokenManager_CreateOrgApiToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/authCreateOrgApiTokenResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/authEmpty"
            }
          }
        ],
        "tags": [
          "prodvana.auth.ApiTokenManager"
        ]
      }
    },
    "/v1/auth/api/org_tokens": {
      "get": {
        "operationId": "ApiTokenManager_ListOrgApiTokens",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/authListOrgApiTokensResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "prodvana.auth.ApiTokenManager"
        ]
      }
    },
    "/v1/auth/api/org_tokens/create": {
      "post": {
        "operationId": "ApiTokenManager_CreateOrgApiToken2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/authCreateOrgApiTokenResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/authCreateOrgApiTokenReq"
            }
          }
        ],
        "tags": [
          "prodvana.auth.ApiTokenManager"
        ]
      }
    },
    "/v1/auth/api/org_tokens/{name}": {
      "delete": {
        "operationId": "ApiTokenManager_DeleteOrgApiToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/authDeleteOrgApiTokenResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "prodvana.auth.ApiTokenManager"
        ]
      }
    },
    "/v1/auth/get_auth_url": {
      "get": {
        "operationId": "AuthManager_GetAuthUrl",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/authGetAuthUrlResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "state",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "forCli",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "invitation",
            "description": "optional invitation id for the invite flow",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "prodvanaOnlyAdminOrg",
            "description": "prodvana internal use",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "prodvana.auth.AuthManager"
        ]
      }
    },
    "/v1/auth/get_token": {
      "get": {
        "summary": "web auth flow\nTODO(naphat) we should make this only available to our UI app",
        "operationId": "AuthManager_GetAuthToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/authGetAuthTokenResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "redirectUrl",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "forCli",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "prodvanaOnlyAdminOrg",
            "description": "prodvana internal use",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "prodvana.auth.AuthManager"
        ]
      }
    },
    "/v1/auth/refresh_auth_token": {
      "post": {
        "operationId": "AuthManager_RefreshToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/authGetAuthTokenResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/authRefreshTokenReq"
            }
          }
        ],
        "tags": [
          "prodvana.auth.AuthManager"
        ]
      }
    },
    "/v1/auth/session/check": {
      "get": {
        "summary": "check if user is authenticated and token is still valid",
        "operationId": "AuthSessionManager_Check",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/authEmpty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "prodvana.auth.AuthSessionManager"
        ]
      }
    },
    "/v1/auth/session/logout": {
      "post": {
        "operationId": "AuthSessionManager_Logout",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/authLogoutResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "forCli",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "redirectUrl",
            "description": "optional redirect url after logout",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "prodvanaOnlyAdminOrg",
            "description": "prodvana internal use",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "prodvana.auth.AuthSessionManager"
        ]
      }
    },
    "/v1/blobs/cas/{id}": {
      "get": {
        "operationId": "BlobsManager_GetCasBlob",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/blobsGetCasBlobResp"
                },
                "error": {
                  "$ref": "#/definitions/googlerpcStatus"
                }
              },
              "title": "Stream result of blobsGetCasBlobResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "prodvana.blobs.BlobsManager"
        ]
      }
    },
    "/v1/clusters/configure": {
      "post": {
        "operationId": "EnvironmentManager_ConfigureCluster",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/environmentConfigureClusterResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/environmentConfigureClusterReq"
            }
          }
        ],
        "tags": [
          "prodvana.environment.EnvironmentManager"
        ]
      }
    },
    "/v1/clusters/configure/validate": {
      "post": {
        "operationId": "EnvironmentManager_ValidateConfigureCluster",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/environmentValidateConfigureClusterResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/environmentConfigureClusterReq"
            }
          }
        ],
        "tags": [
          "prodvana.environment.EnvironmentManager"
        ]
      }
    },
    "/v1/clusters/get_auth": {
      "get": {
        "summary": "Deprecated.",
        "operationId": "EnvironmentManager_GetClusterAuth",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/environmentGetClusterAuthResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "prodvana.environment.EnvironmentManager"
        ]
      }
    },
    "/v1/clusters/get_status": {
      "get": {
        "operationId": "EnvironmentManager_GetClusterStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/environmentGetClusterStatusResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "prodvana.environment.EnvironmentManager"
        ]
      }
    },
    "/v1/clusters/link": {
      "post": {
        "operationId": "EnvironmentManager_LinkCluster",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/environmentLinkClusterResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/environmentLinkClusterReq"
            }
          }
        ],
        "tags": [
          "prodvana.environment.EnvironmentManager"
        ]
      }
    },
    "/v1/clusters/list": {
      "get": {
        "operationId": "EnvironmentManager_ListClusters",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/environmentListClustersResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "prodvana.environment.EnvironmentManager"
        ]
      }
    },
    "/v1/clusters/pause": {
      "post": {
        "operationId": "EnvironmentManager_PauseCluster",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/environmentPauseClusterResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/environmentPauseClusterReq"
            }
          }
        ],
        "tags": [
          "prodvana.environment.EnvironmentManager"
        ]
      }
    },
    "/v1/clusters/remove": {
      "post": {
        "operationId": "EnvironmentManager_RemoveCluster",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/environmentRemoveClusterResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/environmentRemoveClusterReq"
            }
          }
        ],
        "tags": [
          "prodvana.environment.EnvironmentManager"
        ]
      }
    },
    "/v1/clusters/resume": {
      "post": {
        "operationId": "EnvironmentManager_ResumeCluster",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/environmentResumeClusterResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/environmentResumeClusterReq"
            }
          }
        ],
        "tags": [
          "prodvana.environment.EnvironmentManager"
        ]
      }
    },
    "/v1/clusters/{name}/token": {
      "get": {
        "operationId": "EnvironmentManager_GetClusterAgentApiToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/environmentGetClusterAgentApiTokenResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "prodvana.environment.EnvironmentManager"
        ]
      }
    },
    "/v1/clusters/{runtimeName}/config": {
      "post": {
        "operationId": "EnvironmentManager_GetClusterConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/environmentGetClusterConfigResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "runtimeName",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "tags": [
          "prodvana.environment.EnvironmentManager"
        ]
      }
    },
    "/v1/clusters/{runtimeName}/detect-config": {
      "post": {
        "operationId": "EnvironmentManager_DetectClusterConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/environmentDetectClusterConfigResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "runtimeName",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "tags": [
          "prodvana.environment.EnvironmentManager"
        ]
      }
    },
    "/v1/clusters/{runtime}/get": {
      "get": {
        "operationId": "EnvironmentManager_GetCluster",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/environmentGetClusterResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "runtime",
            "description": "name or id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "includeAuth",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "prodvana.environment.EnvironmentManager"
        ]
      }
    },
    "/v1/delivery_extension/instance/{deliveryExtensionInstanceId}/config": {
      "get": {
        "operationId": "DeliveryExtensionManager_GetDeliveryExtensionInstanceConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/delivery_extensionGetDeliveryExtensionInstanceConfigResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "deliveryExtensionInstanceId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "version",
            "description": "omit to get latest version",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "prodvana.delivery_extension.DeliveryExtensionManager"
        ]
      }
    },
    "/v1/delivery_extension/{deliveryExtension}": {
      "get": {
        "operationId": "DeliveryExtensionManager_GetDeliveryExtension",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/delivery_extensionGetDeliveryExtensionResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "deliveryExtension",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "prodvana.delivery_extension.DeliveryExtensionManager"
        ]
      }
    },
    "/v1/delivery_extension/{deliveryExtension}/config": {
      "get": {
        "operationId": "DeliveryExtensionManager_GetDeliveryExtensionConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/delivery_extensionGetDeliveryExtensionConfigResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "deliveryExtension",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "version",
            "description": "omit to get latest version",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "prodvana.delivery_extension.DeliveryExtensionManager"
        ]
      }
    },
    "/v1/delivery_extensions": {
      "get": {
        "operationId": "DeliveryExtensionManager_ListDeliveryExtensions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/delivery_extensionListDeliveryExtensionsResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pageToken",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "prodvana.delivery_extension.DeliveryExtensionManager"
        ]
      }
    },
    "/v1/delivery_extensions/configure": {
      "post": {
        "operationId": "DeliveryExtensionManager_ConfigureDeliveryExtension",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/delivery_extensionConfigureDeliveryExtensionResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/delivery_extensionConfigureDeliveryExtensionReq"
            }
          }
        ],
        "tags": [
          "prodvana.delivery_extension.DeliveryExtensionManager"
        ]
      }
    },
    "/v1/delivery_extensions/configure/validate": {
      "post": {
        "operationId": "DeliveryExtensionManager_ValidateConfigureDeliveryExtension",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/delivery_extensionValidateConfigureDeliveryExtensionResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/delivery_extensionConfigureDeliveryExtensionReq"
            }
          }
        ],
        "tags": [
          "prodvana.delivery_extension.DeliveryExtensionManager"
        ]
      }
    },
    "/v1/deployments": {
      "get": {
        "operationId": "DeploymentManager_ListDeployments",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/deploymentListDeploymentsResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "filter.services",
            "description": "filters to deployments for join(join(services, OR), join(release_channels, OR), AND)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.releaseChannels",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.application",
            "description": "if set, the filters on services and deployment channels above will be limited to this app.\nOtherwise, there is no app filter (so e.g. release_channels=['staging'] will select\nstaging deployment channels across all apps.)",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.desiredStateId",
            "description": "desired_state_id filter is AND'ed with everything else in the same filter object",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.releaseId",
            "description": "release_id filter is AND'ed with everything else in the same filter object",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "startingDeploymentId",
            "description": "newer deployment, inclusive",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "endingDeploymentId",
            "description": "older deployment, exclusive",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageToken",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "prodvana.deployment.DeploymentManager"
        ]
      },
      "post": {
        "operationId": "DeploymentManager_RecordDeployment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/prodvanadeploymentRecordDeploymentResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/prodvanadeploymentRecordDeploymentReq"
            }
          }
        ],
        "tags": [
          "prodvana.deployment.DeploymentManager"
        ]
      }
    },
    "/v1/deployments/check_commit": {
      "get": {
        "operationId": "DeploymentManager_CheckCommitInDeployment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/deploymentCheckCommitInDeploymentResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "deploymentId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "deploymentServiceInstance.application",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "deploymentServiceInstance.service",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "deploymentServiceInstance.releaseChannel",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "repository",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "commit",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "prodvana.deployment.DeploymentManager"
        ]
      }
    },
    "/v1/deployments/compare": {
      "post": {
        "operationId": "DeploymentManager_CompareDeployment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/deploymentCompareDeploymentResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/deploymentCompareDeploymentReq"
            }
          }
        ],
        "tags": [
          "prodvana.deployment.DeploymentManager"
        ]
      }
    },
    "/v1/deployments/latest": {
      "get": {
        "summary": "returns the latest deployments for each (application, service, deployment channel) tuple.",
        "operationId": "DeploymentManager_GetLatestDeployments",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/deploymentGetLatestDeploymentsResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "filter.services",
            "description": "filters to deployments for join(join(services, OR), join(release_channels, OR), AND)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.releaseChannels",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.application",
            "description": "if set, the filters on services and deployment channels above will be limited to this app.\nOtherwise, there is no app filter (so e.g. release_channels=['staging'] will select\nstaging deployment channels across all apps.)",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.desiredStateId",
            "description": "desired_state_id filter is AND'ed with everything else in the same filter object",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.releaseId",
            "description": "release_id filter is AND'ed with everything else in the same filter object",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "description": "if set, only return deployments with this status",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN_STATUS",
              "PENDING",
              "SUCCEEDED",
              "FAILED",
              "PREVIEW"
            ],
            "default": "UNKNOWN_STATUS"
          },
          {
            "name": "pageToken",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "prodvana.deployment.DeploymentManager"
        ]
      }
    },
    "/v1/deployments/preview": {
      "post": {
        "operationId": "DeploymentManager_PreviewDeployment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/deploymentPreviewDeploymentResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/deploymentPreviewDeploymentReq"
            }
          }
        ],
        "tags": [
          "prodvana.deployment.DeploymentManager"
        ]
      }
    },
    "/v1/deployments/{deploymentId}/status": {
      "post": {
        "operationId": "DeploymentManager_UpdateDeploymentStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/deploymentUpdateDeploymentStatusResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "deploymentId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "$ref": "#/definitions/deploymentDeploymentStatus"
                }
              }
            }
          }
        ],
        "tags": [
          "prodvana.deployment.DeploymentManager"
        ]
      }
    },
    "/v1/desired_states": {
      "post": {
        "operationId": "DesiredStateManager_SetDesiredState",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/desired_stateSetDesiredStateResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/desired_stateSetDesiredStateReq"
            }
          }
        ],
        "tags": [
          "prodvana.desired_state.DesiredStateManager"
        ]
      }
    },
    "/v1/desired_states/approve_manual_condition": {
      "post": {
        "operationId": "DesiredStateManager_SetManualApproval",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/desired_stateSetManualApprovalResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/desired_stateSetManualApprovalReq"
            }
          }
        ],
        "tags": [
          "prodvana.desired_state.DesiredStateManager"
        ]
      }
    },
    "/v1/desired_states/bypass_protection": {
      "post": {
        "operationId": "DesiredStateManager_BypassProtection",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/desired_stateBypassProtectionResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/desired_stateBypassProtectionReq"
            }
          }
        ],
        "tags": [
          "prodvana.desired_state.DesiredStateManager"
        ]
      }
    },
    "/v1/desired_states/combined_releases": {
      "get": {
        "summary": "Get release history, where a release is either a Maestro Release or a Desired State from calling SetDesiredState",
        "operationId": "DesiredStateManager_ListCombinedReleases",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/desired_stateListCombinedReleasesResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "entityId.type",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN",
              "SERVICE",
              "SERVICE_INSTANCE",
              "SERVICE_GROUP",
              "RUNTIME_OBJECT",
              "MANUAL_APPROVAL",
              "CUSTOM_TASK",
              "PROTECTION_ATTACHMENT",
              "PROTECTION_LINK",
              "DELIVERY_EXTENSION"
            ],
            "default": "UNKNOWN"
          },
          {
            "name": "entityId.name",
            "description": "globally unique identifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "descending",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "pageToken",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "prodvana.desired_state.DesiredStateManager"
        ]
      }
    },
    "/v1/desired_states/combined_releases/latest_desired_state": {
      "get": {
        "summary": "get latest desired state that was set explicitly as part of a release, as defined by\nListCombinedReleases. This is a shortcut for ListCombinedReleases(descending=True, page_size=1),\nthen GetDesiredState or GetMaestroRelease depending on the type of release.",
        "operationId": "DesiredStateManager_GetLatestCombinedReleaseDesiredState",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/desired_stateGetLatestCombinedReleaseDesiredStateResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "entityId.type",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN",
              "SERVICE",
              "SERVICE_INSTANCE",
              "SERVICE_GROUP",
              "RUNTIME_OBJECT",
              "MANUAL_APPROVAL",
              "CUSTOM_TASK",
              "PROTECTION_ATTACHMENT",
              "PROTECTION_LINK",
              "DELIVERY_EXTENSION"
            ],
            "default": "UNKNOWN"
          },
          {
            "name": "entityId.name",
            "description": "globally unique identifier",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "prodvana.desired_state.DesiredStateManager"
        ]
      }
    },
    "/v1/desired_states/graph": {
      "post": {
        "operationId": "DesiredStateManager_GetDesiredStateGraph",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/desired_stateGetDesiredStateGraphResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/desired_stateGetDesiredStateGraphReq"
            }
          }
        ],
        "tags": [
          "prodvana.desired_state.DesiredStateManager"
        ]
      }
    },
    "/v1/desired_states/maestro_releases": {
      "get": {
        "operationId": "DesiredStateManager_ListMaestroReleases",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/desired_stateListMaestroReleasesResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "entityId.type",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN",
              "SERVICE",
              "SERVICE_INSTANCE",
              "SERVICE_GROUP",
              "RUNTIME_OBJECT",
              "MANUAL_APPROVAL",
              "CUSTOM_TASK",
              "PROTECTION_ATTACHMENT",
              "PROTECTION_LINK",
              "DELIVERY_EXTENSION"
            ],
            "default": "UNKNOWN"
          },
          {
            "name": "entityId.name",
            "description": "globally unique identifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "descending",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "startingReleaseId",
            "description": "optional, if not set:\n- with descending=false, return releases starting from the oldest unfinished release.\n- with descending=true, return releases starting from the newest release.\n\ninclusive",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageToken",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "prodvana.desired_state.DesiredStateManager"
        ]
      }
    },
    "/v1/desired_states/maestro_releases/{releaseId}": {
      "get": {
        "operationId": "DesiredStateManager_GetMaestroRelease",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/desired_stateGetMaestroReleaseResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "releaseId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "prodvana.desired_state.DesiredStateManager"
        ]
      }
    },
    "/v1/desired_states/preview": {
      "post": {
        "summary": "validate a SetDesiredState call and return a preview entity graph\nTODO(naphat) delete ValidateDesiredState and replace with this",
        "operationId": "DesiredStateManager_PreviewEntityGraph",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/desired_statePreviewEntityGraphResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/desired_stateSetDesiredStateReq"
            }
          }
        ],
        "tags": [
          "prodvana.desired_state.DesiredStateManager"
        ]
      }
    },
    "/v1/desired_states/promote_delivery": {
      "post": {
        "operationId": "DesiredStateManager_PromoteDelivery",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/desired_statePromoteDeliveryResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/desired_statePromoteDeliveryReq"
            }
          }
        ],
        "tags": [
          "prodvana.desired_state.DesiredStateManager"
        ]
      }
    },
    "/v1/desired_states/validate": {
      "post": {
        "operationId": "DesiredStateManager_ValidateDesiredState",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/desired_stateValidateDesiredStateResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/desired_stateValidateDesiredStateReq"
            }
          }
        ],
        "tags": [
          "prodvana.desired_state.DesiredStateManager"
        ]
      }
    },
    "/v1/desired_states/{desiredStateId}": {
      "get": {
        "operationId": "DesiredStateManager_GetDesiredState",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/desired_stateGetDesiredStateResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "desiredStateId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "prodvana.desired_state.DesiredStateManager"
        ]
      }
    },
    "/v1/desired_states/{desiredStateId}/summary": {
      "get": {
        "summary": "Get the convergence summary for a desired state id.\nIf the desired state id is pending, the returned summary will not have the entity_graph set but will have pending_set_desired_state set.\nThe status will be set to PENDING_SET_DESIRED_STATE.\nIf the desired state id was pending and failed to be set, the returned summary will not have the entity_graph set but will have pending_set_desired_state set.\nThe status will be set to FAILED.",
        "operationId": "DesiredStateManager_GetDesiredStateConvergenceSummary",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/desired_stateGetDesiredStateConvergenceSummaryResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "desiredStateId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "fastNoDeprecatedFields",
            "description": "unused",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "prodvana.desired_state.DesiredStateManager"
        ]
      }
    },
    "/v1/events": {
      "post": {
        "operationId": "EventsManager_GetEvents",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/eventsGetEventsResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/eventsGetEventsReq"
            }
          }
        ],
        "tags": [
          "prodvana.events.EventsManager"
        ]
      }
    },
    "/v1/integrations": {
      "get": {
        "operationId": "WorkflowManager_ListIntegrations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/workflowListIntegrationsResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "prodvana.workflow.WorkflowManager"
        ]
      }
    },
    "/v1/integrations/container-registry": {
      "get": {
        "operationId": "WorkflowManager_ListContainerRegistryIntegrations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/workflowListContainerRegistryIntegrationsResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "fetchStatus",
            "description": "if true, verifies connection to registry",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "prodvana.workflow.WorkflowManager"
        ]
      }
    },
    "/v1/integrations/container-registry/create": {
      "post": {
        "operationId": "WorkflowManager_CreateContainerRegistryIntegration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/workflowCreateContainerRegistryIntegrationRes"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/workflowCreateContainerRegistryIntegrationReq"
            }
          }
        ],
        "tags": [
          "prodvana.workflow.WorkflowManager"
        ]
      }
    },
    "/v1/integrations/container-registry/{registryName}": {
      "get": {
        "operationId": "WorkflowManager_GetContainerRegistryIntegration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/workflowGetContainerRegistryIntegrationResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "registryName",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "prodvana.workflow.WorkflowManager"
        ]
      },
      "delete": {
        "operationId": "WorkflowManager_DeleteContainerRegistryIntegration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/workflowDeleteContainerRegistryIntegrationResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "registryName",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "prodvana.workflow.WorkflowManager"
        ]
      }
    },
    "/v1/integrations/github/create": {
      "get": {
        "operationId": "WorkflowManager_CreateGitHubApp",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/workflowCreateGitHubAppResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "appId",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "privateKey",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "clientSecret",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "webhookSecret",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "githubOrganization",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "prodvana.workflow.WorkflowManager"
        ]
      }
    },
    "/v1/integrations/github/install": {
      "get": {
        "operationId": "WorkflowManager_InstallGitHub",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/workflowInstallGitHubResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "installationId",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "prodvana.workflow.WorkflowManager"
        ]
      }
    },
    "/v1/integrations/github/install-url": {
      "get": {
        "operationId": "WorkflowManager_GetInstallGitHubUrl",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/workflowGetInstallGitHubUrlResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "githubOrg",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "prodvana.workflow.WorkflowManager"
        ]
      }
    },
    "/v1/integrations/grafana": {
      "get": {
        "operationId": "WorkflowManager_GetGrafanaInstallation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/workflowGetGrafanaInstallationResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "prodvana.workflow.WorkflowManager"
        ]
      }
    },
    "/v1/integrations/grafana/install": {
      "post": {
        "operationId": "WorkflowManager_InstallGrafana",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/workflowInstallGrafanaResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/workflowInstallGrafanaReq"
            }
          }
        ],
        "tags": [
          "prodvana.workflow.WorkflowManager"
        ]
      }
    },
    "/v1/integrations/grafana/uninstall": {
      "delete": {
        "operationId": "WorkflowManager_UninstallGrafana",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/workflowUninstallGrafanaResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "prodvana.workflow.WorkflowManager"
        ]
      }
    },
    "/v1/integrations/honeycomb": {
      "delete": {
        "operationId": "WorkflowManager_UninstallHoneycomb",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/workflowUninstallHoneycombResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "prodvana.workflow.WorkflowManager"
        ]
      }
    },
    "/v1/integrations/honeycomb/environment": {
      "get": {
        "operationId": "WorkflowManager_ListHoneycombEnvironments",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/workflowListHoneycombEnvironmentsResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "prodvana.workflow.WorkflowManager"
        ]
      },
      "post": {
        "operationId": "WorkflowManager_AddHoneycombEnvironment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/workflowAddHoneycombEnvironmentResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/workflowAddHoneycombEnvironmentReq"
            }
          }
        ],
        "tags": [
          "prodvana.workflow.WorkflowManager"
        ]
      }
    },
    "/v1/integrations/honeycomb/environment/{name}": {
      "delete": {
        "operationId": "WorkflowManager_DeleteHoneycombEnvironment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/workflowDeleteHoneycombEnvironmentResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "prodvana.workflow.WorkflowManager"
        ]
      },
      "put": {
        "operationId": "WorkflowManager_UpdateHoneycombEnvironment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/workflowUpdateHoneycombEnvironmentResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "apiKey": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "tags": [
          "prodvana.workflow.WorkflowManager"
        ]
      }
    },
    "/v1/integrations/pagerduty/install": {
      "get": {
        "operationId": "WorkflowManager_InstallPagerDuty",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/workflowInstallPagerDutyResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "error",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "code",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "redirectUri",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "prodvana.workflow.WorkflowManager"
        ]
      }
    },
    "/v1/integrations/pagerduty/install-url": {
      "get": {
        "operationId": "WorkflowManager_GetInstallPagerDutyUrl",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/workflowGetInstallPagerDutyUrlResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "prodvana.workflow.WorkflowManager"
        ]
      }
    },
    "/v1/integrations/pagerduty/uninstall": {
      "delete": {
        "operationId": "WorkflowManager_UninstallPagerDuty",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/workflowUninstallPagerDutyResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "prodvana.workflow.WorkflowManager"
        ]
      }
    },
    "/v1/integrations/repo/commits": {
      "get": {
        "operationId": "WorkflowManager_ListRepoCommits",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/workflowListRepoCommitsResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "repository",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "startingRef",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageToken",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "prodvana.workflow.WorkflowManager"
        ]
      }
    },
    "/v1/integrations/slack/install": {
      "get": {
        "operationId": "WorkflowManager_InstallSlack",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/workflowInstallSlackResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "error",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "code",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "redirectUri",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "prodvana.workflow.WorkflowManager"
        ]
      }
    },
    "/v1/integrations/slack/install-url": {
      "get": {
        "operationId": "WorkflowManager_GetInstallSlackUrl",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/workflowGetInstallSlackUrlResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "prodvana.workflow.WorkflowManager"
        ]
      }
    },
    "/v1/integrations/slack/uninstall": {
      "delete": {
        "operationId": "WorkflowManager_UninstallSlack",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/workflowUninstallSlackResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "prodvana.workflow.WorkflowManager"
        ]
      }
    },
    "/v1/integrations/{integrationId}": {
      "delete": {
        "operationId": "WorkflowManager_DeleteIntegration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/workflowDeleteIntegrationResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "integrationId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "prodvana.workflow.WorkflowManager"
        ]
      }
    },
    "/v1/integrations/{integrationId}/image-commit-info": {
      "get": {
        "operationId": "WorkflowManager_GetImageCommitInfo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/workflowGetImageCommitInfoResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "integrationId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "repository",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "tag",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "image",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "prodvana.workflow.WorkflowManager"
        ]
      }
    },
    "/v1/integrations/{integrationId}/images": {
      "get": {
        "operationId": "WorkflowManager_GetContainerRegistryImages",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/workflowGetContainerRegistryImagesRes"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "integrationId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "imageRepository",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "skipRegistryCache",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "pageToken",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "prodvana.workflow.WorkflowManager"
        ]
      }
    },
    "/v1/integrations/{integrationId}/program-defaults": {
      "get": {
        "operationId": "WorkflowManager_GetProgramDefaults",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/workflowGetProgramDefaultsResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "integrationId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "repository",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "tag",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "image",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "skipRegistryCache",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "prodvana.workflow.WorkflowManager"
        ]
      }
    },
    "/v1/integrations/{integrationId}/repo/{repository}": {
      "get": {
        "operationId": "WorkflowManager_GetTrackedImageRepository",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/workflowGetTrackedImageRepositoryResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "integrationId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "prodvana.workflow.WorkflowManager"
        ]
      }
    },
    "/v1/integrations/{integrationId}/repos": {
      "get": {
        "operationId": "WorkflowManager_ListTrackedImageRepositories",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/workflowListTrackedImageRepositoriesResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "integrationId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "prodvana.workflow.WorkflowManager"
        ]
      }
    },
    "/v1/integrations/{integrationId}/repos/track": {
      "post": {
        "operationId": "WorkflowManager_TrackImageRepositories",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/workflowTrackImageRepositoriesResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "integrationId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "repositories": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "prodvana.workflow.WorkflowManager"
        ]
      }
    },
    "/v1/integrations/{integrationId}/repos/untrack": {
      "delete": {
        "operationId": "WorkflowManager_StopTrackingImageRepository",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/workflowStopTrackingImageRepositoryResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "integrationId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "repository",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "prodvana.workflow.WorkflowManager"
        ]
      }
    },
    "/v1/managed_resources": {
      "get": {
        "operationId": "ResourceManager_ListManagedResources",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/managed_resourceListManagedResourcesResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "prodvana.managed_resource.ResourceManager"
        ]
      }
    },
    "/v1/managed_resources/k8s/configure": {
      "post": {
        "operationId": "ResourceManager_ConfigureK8sCluster",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/managed_resourceConfigureK8sClusterResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/managed_resourceConfigureK8sClusterReq"
            }
          }
        ],
        "tags": [
          "prodvana.managed_resource.ResourceManager"
        ]
      }
    },
    "/v1/managed_resources/{managedResource}": {
      "get": {
        "operationId": "ResourceManager_GetManagedResource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/managed_resourceGetManagedResourceResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "managedResource",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "prodvana.managed_resource.ResourceManager"
        ]
      }
    },
    "/v1/managed_resources/{managedResource}/archive/archive/archive/archive": {
      "get": {
        "operationId": "ResourceManager_GetArchive",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/managed_resourceGetArchiveResp"
                },
                "error": {
                  "$ref": "#/definitions/googlerpcStatus"
                }
              },
              "title": "Stream result of managed_resourceGetArchiveResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "managedResource",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "version",
            "description": "default to latest version",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "prodvana.managed_resource.ResourceManager"
        ]
      }
    },
    "/v1/managed_resources/{managedResource}/delete": {
      "delete": {
        "operationId": "ResourceManager_DeleteManagedResource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/managed_resourceDeleteManagedResourceResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "managedResource",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "prodvana.managed_resource.ResourceManager"
        ]
      }
    },
    "/v1/objects/labels": {
      "get": {
        "operationId": "ObjectManager_GetLabels",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/objectGetLabelsResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN",
              "RUNTIME",
              "APPLICATION",
              "SERVICE",
              "RELEASE_CHANNEL",
              "PROTECTION",
              "DEPLOYMENT",
              "RELEASE"
            ],
            "default": "UNKNOWN"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "prodvana.object.ObjectManager"
        ]
      }
    },
    "/v1/objects/query": {
      "get": {
        "operationId": "ObjectManager_QueryObjects",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/objectQueryObjectResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "prodvana.object.ObjectManager"
        ]
      }
    },
    "/v1/organization": {
      "get": {
        "operationId": "OrganizationManager_GetOrganization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/organizationGetOrganizationResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "prodvana.organization.OrganizationManager"
        ]
      }
    },
    "/v1/organization/insights": {
      "get": {
        "operationId": "OrganizationManager_GetOrganizationInsights",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/organizationGetOrganizationInsightsResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "prodvana.organization.OrganizationManager"
        ]
      }
    },
    "/v1/organization/insights/snooze": {
      "put": {
        "operationId": "OrganizationManager_SnoozeOrganizationInsight",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/organizationSnoozeOrganizationInsightResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "class",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN",
              "SUCCESSFUL_DEPLOYMENT_FREQUENCY_DECREASE",
              "DEPLOYMENT_FAILURE_RATE_INCREASE",
              "MEDIAN_SUCCESSFUL_DEPLOYMENT_DURATION_INCREASE",
              "MEDIAN_SUCCESSFUL_ROLLBACK_DURATION_INCREASE"
            ],
            "default": "UNKNOWN"
          },
          {
            "name": "duration",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "prodvana.organization.OrganizationManager"
        ]
      }
    },
    "/v1/organization/metadata": {
      "get": {
        "summary": "Get org metadata, useful for constructing edit workflows for metadata",
        "operationId": "OrganizationManager_GetOrganizationMetadata",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/organizationGetOrganizationMetadataResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "prodvana.organization.OrganizationManager"
        ]
      },
      "post": {
        "operationId": "OrganizationManager_SetOrganizationMetadata",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/organizationSetOrganizationMetadataResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/organizationSetOrganizationMetadataReq"
            }
          }
        ],
        "tags": [
          "prodvana.organization.OrganizationManager"
        ]
      }
    },
    "/v1/organization/metrics": {
      "get": {
        "operationId": "OrganizationManager_GetOrganizationMetrics",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/organizationGetOrganizationMetricsResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "startTimestamp",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endTimestamp",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "tags": [
          "prodvana.organization.OrganizationManager"
        ]
      }
    },
    "/v1/organization/subscription/status": {
      "get": {
        "operationId": "OrganizationManager_GetOrganizationSubscriptionStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/organizationGetOrganizationSubscriptionStatusResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "orgId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "prodvana.organization.OrganizationManager"
        ]
      }
    },
    "/v1/organization/user/{userId}": {
      "get": {
        "summary": "Get a user in an organization, will return NOT_FOUND if the user is eitehr missing or not in an organization",
        "operationId": "OrganizationManager_GetUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/prodvanaorganizationGetUserResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "prodvana.organization.OrganizationManager"
        ]
      }
    },
    "/v1/protections": {
      "get": {
        "operationId": "ProtectionManager_ListProtections",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protectionListProtectionsResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pageToken",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "prodvana.protection.ProtectionManager"
        ]
      }
    },
    "/v1/protections/attachment/{attachmentId}/config": {
      "get": {
        "operationId": "ProtectionManager_GetProtectionAttachmentConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protectionGetProtectionAttachmentConfigResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "attachmentId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "version",
            "description": "omit to get latest version",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "prodvana.protection.ProtectionManager"
        ]
      }
    },
    "/v1/protections/configure": {
      "post": {
        "operationId": "ProtectionManager_ConfigureProtection",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protectionConfigureProtectionResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/protectionConfigureProtectionReq"
            }
          }
        ],
        "tags": [
          "prodvana.protection.ProtectionManager"
        ]
      }
    },
    "/v1/protections/configure/validate": {
      "post": {
        "operationId": "ProtectionManager_ValidateConfigureProtection",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protectionValidateConfigureProtectionResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/protectionConfigureProtectionReq"
            }
          }
        ],
        "tags": [
          "prodvana.protection.ProtectionManager"
        ]
      }
    },
    "/v1/protections/{protection}": {
      "get": {
        "operationId": "ProtectionManager_GetProtection",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protectionGetProtectionResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "protection",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "prodvana.protection.ProtectionManager"
        ]
      }
    },
    "/v1/protections/{protection}/config": {
      "get": {
        "operationId": "ProtectionManager_GetProtectionConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protectionGetProtectionConfigResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "protection",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "version",
            "description": "omit to get latest version",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "prodvana.protection.ProtectionManager"
        ]
      }
    },
    "/v1/release-channels/{releaseChannel}/delete": {
      "delete": {
        "operationId": "ReleaseChannelManager_DeleteReleaseChannel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/release_channelDeleteReleaseChannelResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "releaseChannel",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "application",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "source",
            "description": " - PRODVANA: this source indicates this version was provided by Prodvana\nthis is used for things like builtin Protections or other first party provided features\n - IAC: Infra as Code sources like Terraform and Pulumi",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN_SOURCE",
              "WEB",
              "INTERACTIVE_PVNCTL",
              "CONFIG_FILE",
              "REPO_FOLLOW",
              "PRODVANA",
              "IAC"
            ],
            "default": "UNKNOWN_SOURCE"
          },
          {
            "name": "sourceMetadata.repoUrl",
            "description": "full repo URL, like git@github.com:foo/bar.git or https://github.com/foo/bar",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sourceMetadata.filePath",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sourceMetadata.commit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sourceMetadata.userId",
            "description": "set internally, automatically, by Prodvana if the action was initiated by a user",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "prodvana.release_channel.ReleaseChannelManager"
        ]
      }
    },
    "/v1/releases": {
      "get": {
        "operationId": "ReleaseManager_ListReleases",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/deploymentListDeploymentsResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "filter.services",
            "description": "filters to deployments for join(join(services, OR), join(release_channels, OR), AND)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.releaseChannels",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.application",
            "description": "if set, the filters on services and deployment channels above will be limited to this app.\nOtherwise, there is no app filter (so e.g. release_channels=['staging'] will select\nstaging deployment channels across all apps.)",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.desiredStateId",
            "description": "desired_state_id filter is AND'ed with everything else in the same filter object",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.releaseId",
            "description": "release_id filter is AND'ed with everything else in the same filter object",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "startingDeploymentId",
            "description": "newer deployment, inclusive",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "endingDeploymentId",
            "description": "older deployment, exclusive",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageToken",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "prodvana.release.ReleaseManager"
        ]
      },
      "post": {
        "operationId": "ReleaseManager_RecordRelease",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/prodvanadeploymentRecordDeploymentResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/prodvanadeploymentRecordDeploymentReq"
            }
          }
        ],
        "tags": [
          "prodvana.release.ReleaseManager"
        ]
      }
    },
    "/v1/releases/check_commit": {
      "get": {
        "operationId": "ReleaseManager_CheckCommitInRelease",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/deploymentCheckCommitInDeploymentResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "deploymentId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "deploymentServiceInstance.application",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "deploymentServiceInstance.service",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "deploymentServiceInstance.releaseChannel",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "repository",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "commit",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "prodvana.release.ReleaseManager"
        ]
      }
    },
    "/v1/releases/compare": {
      "post": {
        "operationId": "ReleaseManager_CompareRelease",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/deploymentCompareDeploymentResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/deploymentCompareDeploymentReq"
            }
          }
        ],
        "tags": [
          "prodvana.release.ReleaseManager"
        ]
      }
    },
    "/v1/releases/latest": {
      "get": {
        "summary": "returns the latest releases for each (application, service, release channel) tuple.",
        "operationId": "ReleaseManager_GetLatestReleases",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/deploymentGetLatestDeploymentsResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "filter.services",
            "description": "filters to deployments for join(join(services, OR), join(release_channels, OR), AND)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.releaseChannels",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.application",
            "description": "if set, the filters on services and deployment channels above will be limited to this app.\nOtherwise, there is no app filter (so e.g. release_channels=['staging'] will select\nstaging deployment channels across all apps.)",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.desiredStateId",
            "description": "desired_state_id filter is AND'ed with everything else in the same filter object",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.releaseId",
            "description": "release_id filter is AND'ed with everything else in the same filter object",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "description": "if set, only return deployments with this status",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN_STATUS",
              "PENDING",
              "SUCCEEDED",
              "FAILED",
              "PREVIEW"
            ],
            "default": "UNKNOWN_STATUS"
          },
          {
            "name": "pageToken",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "prodvana.release.ReleaseManager"
        ]
      }
    },
    "/v1/releases/preview": {
      "post": {
        "operationId": "ReleaseManager_PreviewRelease",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/deploymentPreviewDeploymentResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/deploymentPreviewDeploymentReq"
            }
          }
        ],
        "tags": [
          "prodvana.release.ReleaseManager"
        ]
      }
    },
    "/v1/releases/{deploymentId}/status": {
      "post": {
        "operationId": "ReleaseManager_UpdateReleaseStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/deploymentUpdateDeploymentStatusResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "deploymentId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "$ref": "#/definitions/deploymentDeploymentStatus"
                }
              }
            }
          }
        ],
        "tags": [
          "prodvana.release.ReleaseManager"
        ]
      }
    },
    "/v1/secrets": {
      "post": {
        "operationId": "SecretsManager_SetSecret",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/environmentSetSecretResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/environmentSetSecretReq"
            }
          }
        ],
        "tags": [
          "prodvana.environment.SecretsManager"
        ]
      }
    },
    "/v1/secrets/list": {
      "get": {
        "operationId": "SecretsManager_ListSecrets",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/environmentListSecretsResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "prodvana.environment.SecretsManager"
        ]
      }
    },
    "/v1/secrets/{key}/delete": {
      "delete": {
        "operationId": "SecretsManager_DeleteSecret",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/environmentDeleteSecretResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "prodvana.environment.SecretsManager"
        ]
      }
    },
    "/v1/secrets/{key}/versions": {
      "get": {
        "operationId": "SecretsManager_ListSecretVersions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/environmentListSecretVersionsResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "prodvana.environment.SecretsManager"
        ]
      }
    },
    "/v1/secrets/{key}/versions/{version}/delete": {
      "delete": {
        "operationId": "SecretsManager_DeleteSecretVersion",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/environmentDeleteSecretVersionResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "prodvana.environment.SecretsManager"
        ]
      }
    },
    "/v1/settings/organization/roles": {
      "get": {
        "operationId": "UsersSettingsManager_ListRoles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/organizationListRolesResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "prodvana.settings.organization.UsersSettingsManager"
        ]
      }
    },
    "/v1/settings/organization/users": {
      "get": {
        "operationId": "UsersSettingsManager_ListUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/organizationListUsersResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pageToken",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "prodvana.settings.organization.UsersSettingsManager"
        ]
      }
    },
    "/v1/settings/organization/users/can_invite": {
      "get": {
        "operationId": "UsersSettingsManager_OrganizationSupportsInvites",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/organizationOrganizationSupportsInvitesResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "prodvana.settings.organization.UsersSettingsManager"
        ]
      }
    },
    "/v1/settings/organization/users/invite": {
      "post": {
        "operationId": "UsersSettingsManager_InviteUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/organizationInviteUsersResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/organizationInviteUsersReq"
            }
          }
        ],
        "tags": [
          "prodvana.settings.organization.UsersSettingsManager"
        ]
      }
    },
    "/v1/settings/organization/users/{userId}": {
      "get": {
        "operationId": "UsersSettingsManager_GetUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/prodvanasettingsorganizationGetUserResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "prodvana.settings.organization.UsersSettingsManager"
        ]
      },
      "delete": {
        "operationId": "UsersSettingsManager_RemoveUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/organizationRemoveUserResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "prodvana.settings.organization.UsersSettingsManager"
        ]
      }
    },
    "/v1/settings/organization/users/{userId}/roles": {
      "post": {
        "operationId": "UsersSettingsManager_SetRoles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/organizationSetRolesResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "roles",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "prodvana.settings.organization.UsersSettingsManager"
        ]
      }
    },
    "/v1/{application}/delete": {
      "delete": {
        "operationId": "ApplicationManager_DeleteApplication",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/applicationDeleteApplicationResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "prodvana.application.ApplicationManager"
        ]
      }
    },
    "/v1/{application}/services/apply-parameters": {
      "post": {
        "operationId": "ServiceManager_ApplyParameters",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/serviceApplyParametersResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "description": "application can be specified here or as part of service config",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "serviceConfig": {
                  "$ref": "#/definitions/serviceServiceConfig"
                },
                "serviceConfigVersion": {
                  "$ref": "#/definitions/serviceServiceConfigVersionReference"
                },
                "parameters": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/common_configParameterValue"
                  }
                },
                "perReleaseChannel": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/serviceApplyParametersReqPerReleaseChannel"
                  }
                },
                "testOnlySkipRegistryCheck": {
                  "type": "boolean",
                  "title": "skip any kind of attempts to contact container registry, e.g. to check if image exists or get program defaults"
                },
                "source": {
                  "$ref": "#/definitions/versionSource"
                },
                "sourceMetadata": {
                  "$ref": "#/definitions/versionSourceMetadata"
                },
                "bundleNameOverride": {
                  "type": "string"
                },
                "handleBundleNameDuplicate": {
                  "type": "boolean",
                  "title": "if the bundle name override exists already, handle duplicate by appending a number"
                },
                "skipRuntimeValidation": {
                  "type": "boolean",
                  "title": "skip talking to runtimes for validation, can be useful to speed up the validation at the cost of not actually fully validating the config"
                }
              }
            }
          }
        ],
        "tags": [
          "prodvana.service.ServiceManager"
        ]
      }
    },
    "/v1/{application}/services/apply-parameters/validate": {
      "post": {
        "operationId": "ServiceManager_ValidateApplyParameters",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/serviceValidateApplyParametersResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "description": "application can be specified here or as part of service config",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "serviceConfig": {
                  "$ref": "#/definitions/serviceServiceConfig"
                },
                "serviceConfigVersion": {
                  "$ref": "#/definitions/serviceServiceConfigVersionReference"
                },
                "parameters": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/common_configParameterValue"
                  }
                },
                "perReleaseChannel": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/serviceApplyParametersReqPerReleaseChannel"
                  }
                },
                "testOnlySkipRegistryCheck": {
                  "type": "boolean",
                  "title": "skip any kind of attempts to contact container registry, e.g. to check if image exists or get program defaults"
                },
                "source": {
                  "$ref": "#/definitions/versionSource"
                },
                "sourceMetadata": {
                  "$ref": "#/definitions/versionSourceMetadata"
                },
                "bundleNameOverride": {
                  "type": "string"
                },
                "handleBundleNameDuplicate": {
                  "type": "boolean",
                  "title": "if the bundle name override exists already, handle duplicate by appending a number"
                },
                "skipRuntimeValidation": {
                  "type": "boolean",
                  "title": "skip talking to runtimes for validation, can be useful to speed up the validation at the cost of not actually fully validating the config"
                }
              }
            }
          }
        ],
        "tags": [
          "prodvana.service.ServiceManager"
        ]
      }
    },
    "/v1/{application}/services/configure/validate": {
      "post": {
        "operationId": "ServiceManager_ValidateConfigureService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/serviceValidateConfigureServiceResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "serviceConfig": {
                  "$ref": "#/definitions/serviceServiceConfig"
                },
                "source": {
                  "$ref": "#/definitions/versionSource"
                },
                "sourceMetadata": {
                  "$ref": "#/definitions/versionSourceMetadata"
                },
                "bundleNameOverride": {
                  "type": "string"
                },
                "skipRuntimeValidation": {
                  "type": "boolean",
                  "title": "skip talking to runtimes for validation, can be useful to speed up the validation at the cost of not actually fully validating the config"
                }
              }
            }
          }
        ],
        "tags": [
          "prodvana.service.ServiceManager"
        ]
      }
    },
    "/v1/{application}/services/configure2": {
      "post": {
        "operationId": "ServiceManager_ConfigureService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/serviceConfigureServiceResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "serviceConfig": {
                  "$ref": "#/definitions/serviceServiceConfig"
                },
                "source": {
                  "$ref": "#/definitions/versionSource"
                },
                "sourceMetadata": {
                  "$ref": "#/definitions/versionSourceMetadata"
                },
                "bundleNameOverride": {
                  "type": "string"
                },
                "skipRuntimeValidation": {
                  "type": "boolean",
                  "title": "skip talking to runtimes for validation, can be useful to speed up the validation at the cost of not actually fully validating the config"
                }
              }
            }
          }
        ],
        "tags": [
          "prodvana.service.ServiceManager"
        ]
      }
    },
    "/v1/{application}/services/{service}/config": {
      "get": {
        "summary": "unparametrized configs",
        "operationId": "ServiceManager_GetServiceConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/serviceGetServiceConfigResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "service",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "configVersion",
            "description": "omit to get latest",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "prodvana.service.ServiceManager"
        ]
      }
    },
    "/v1/{application}/services/{service}/config/versions": {
      "get": {
        "operationId": "ServiceManager_ListServiceConfigVersions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/serviceListServiceConfigVersionsResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "service",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "pageToken",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "prodvana.service.ServiceManager"
        ]
      }
    },
    "/v1/{application}/services/{service}/delete": {
      "delete": {
        "operationId": "ServiceManager_DeleteService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/serviceDeleteServiceResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "service",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "prodvana.service.ServiceManager"
        ]
      }
    },
    "/v1/{application}/services/{service}/generate-version-name": {
      "post": {
        "operationId": "ServiceManager_GenerateVersionName",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/serviceGenerateVersionNameResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "service",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "serviceConfigVersion": {
                  "type": "string"
                },
                "parameters": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/common_configParameterValue"
                  }
                },
                "perReleaseChannel": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/serviceApplyParametersReqPerReleaseChannel"
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "prodvana.service.ServiceManager"
        ]
      }
    },
    "/v1/{application}/services/{service}/materialized/config": {
      "get": {
        "operationId": "ServiceManager_GetMaterializedConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/serviceGetMaterializedConfigResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "service",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "version",
            "description": "omit to get latest version",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "prodvana.service.ServiceManager"
        ]
      }
    },
    "/v1/{application}/services/{service}/materialized/config/versions": {
      "get": {
        "operationId": "ServiceManager_ListMaterializedConfigVersions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/serviceListMaterializedConfigVersionsResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "service",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "pageToken",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "prodvana.service.ServiceManager"
        ]
      }
    }
  },
  "definitions": {
    "AlertingConfigPagerDuty": {
      "type": "object",
      "properties": {
        "service": {
          "type": "string"
        }
      }
    },
    "AnalysisTemplateArgValue": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "SERVICE",
        "RELEASE_CHANNEL"
      ],
      "default": "UNKNOWN"
    },
    "AnnotationsConfigHoneycomb": {
      "type": "object",
      "properties": {
        "environment": {
          "type": "string"
        },
        "dataset": {
          "type": "string"
        }
      }
    },
    "ApplyDetailsApplyStatus": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "CONVERGED",
        "FAILED",
        "RETRYABLE"
      ],
      "default": "UNKNOWN"
    },
    "ApplyTargetStateEventApplyResult": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "SUCCEEDED",
        "FAILED",
        "RETRIABLE_FAILURE"
      ],
      "default": "UNKNOWN"
    },
    "ArgoRolloutsAnalysisTemplate": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "argMapping": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/AnalysisTemplateArgValue"
          },
          "title": "template argument name to prodvana value to inject"
        }
      },
      "title": "deprecated"
    },
    "AwsEcsConfigAccessKey": {
      "type": "object",
      "properties": {
        "awsAccessKeyId": {
          "type": "string"
        },
        "awsSecretAccessKey": {
          "$ref": "#/definitions/common_configSecretReferenceValue"
        }
      }
    },
    "AwsEcsConfigSpec": {
      "type": "object",
      "properties": {
        "inlined": {
          "type": "string"
        },
        "local": {
          "$ref": "#/definitions/common_configLocalConfig"
        }
      }
    },
    "CheckCommitInDeploymentRespResult": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "INCLUDED",
        "NO_RELATION",
        "NOT_INCLUDED"
      ],
      "default": "UNKNOWN"
    },
    "CliAuthRespUserPrompt": {
      "type": "object",
      "properties": {
        "userCode": {
          "type": "string"
        },
        "verificationUri": {
          "type": "string"
        },
        "verificationUriComplete": {
          "type": "string"
        }
      }
    },
    "ClusterAuthECSAuth": {
      "type": "object",
      "properties": {
        "accessKey": {
          "type": "string"
        },
        "secretKey": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "assumeRoleArn": {
          "type": "string"
        },
        "clusterArn": {
          "type": "string"
        }
      }
    },
    "ClusterAuthK8sAuth": {
      "type": "object",
      "properties": {
        "agentEnv": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "agentExternallyManaged": {
          "type": "boolean",
          "description": "The Prodvana agent lifecycle is handled by the user -- Prodvana will not install or update the agent."
        }
      }
    },
    "ClusterConfigALBIngress": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "ingressClass": {
          "type": "string"
        },
        "defaultBalancerAttributes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Attributes from https://docs.aws.amazon.com/elasticloadbalancing/latest/application/application-load-balancers.html#load-balancer-attributes\nthat are added to all Ingresses/LBs created in this runtime."
        }
      }
    },
    "ClusterConfigArgoRollouts": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "templates": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ArgoRolloutsAnalysisTemplate"
          },
          "title": "deprecated"
        }
      }
    },
    "ClusterConfigCloudProvider": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "EKS",
        "GKE",
        "AKS",
        "ONPREM",
        "OTHER_CLOUD"
      ],
      "default": "UNKNOWN"
    },
    "ClusterConfigDatadog": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "datadogNamespace": {
          "type": "string"
        },
        "apiKey": {
          "type": "string"
        },
        "site": {
          "type": "string"
        },
        "managed": {
          "type": "boolean",
          "title": "deprecated"
        }
      }
    },
    "ClusterConfigGKEIngress": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "containerNative": {
          "type": "boolean",
          "title": "Enables container native load balancing, allowing GCP LBs to target k8s pods directly.\nSee: https://cloud.google.com/kubernetes-engine/docs/how-to/container-native-load-balancing"
        }
      }
    },
    "ClusterConfigKubecost": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "kubecostNamespace": {
          "type": "string"
        },
        "managed": {
          "type": "boolean",
          "title": "deprecated"
        }
      }
    },
    "ClusterInfoEcsInfo": {
      "type": "object",
      "properties": {
        "region": {
          "type": "string"
        },
        "clusterArn": {
          "type": "string"
        }
      }
    },
    "CommitDefinitionRange": {
      "type": "object",
      "properties": {
        "startCommit": {
          "type": "string",
          "title": "older commit, exclusive"
        },
        "endCommit": {
          "type": "string",
          "title": "newer commit, inclusive"
        }
      }
    },
    "CommitDenylistProtectionConfigCommitDefinition": {
      "type": "object",
      "properties": {
        "commit": {
          "type": "string"
        },
        "range": {
          "$ref": "#/definitions/CommitDefinitionRange"
        }
      }
    },
    "CompiledExtensionCommandCompiledExtensionCommandExec": {
      "type": "object",
      "properties": {
        "taskConfig": {
          "$ref": "#/definitions/prodvanacommon_configTaskConfig"
        },
        "kubernetesConfig": {
          "$ref": "#/definitions/common_configKubernetesConfig"
        }
      }
    },
    "ConditionCustomTaskSuccessfulCondition": {
      "type": "object",
      "properties": {
        "customTaskName": {
          "type": "string"
        },
        "protection": {
          "$ref": "#/definitions/ConditionCustomTaskSuccessfulConditionProtection"
        }
      }
    },
    "ConditionCustomTaskSuccessfulConditionProtection": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "taskType": {
          "$ref": "#/definitions/modelCustomTaskType"
        }
      }
    },
    "ConditionReleaseChannelStableCondition": {
      "type": "object",
      "properties": {
        "application": {
          "type": "string"
        },
        "service": {
          "type": "string",
          "title": "service name or id"
        },
        "serviceId": {
          "type": "string",
          "title": "service id, normalized. Set internally by Prodvana"
        },
        "releaseChannel": {
          "type": "string",
          "title": "release channel name or id"
        },
        "releaseChannelId": {
          "type": "string",
          "title": "release channel id, normalized. Set internally by Prodvana"
        },
        "serviceVersion": {
          "type": "string"
        },
        "internalOnlySatisfiedInReplacedDesiredState": {
          "type": "boolean",
          "description": "Set internally by Prodvana. If true, this condition has already been satisfied, but the\ndependent release channel has been replaced with a new service version.\nIf set, this condition should be considered satisfied immediately."
        }
      },
      "title": "TODO(naphat) conditions need health"
    },
    "ConfigureK8sClusterReqEKSOptions": {
      "type": "object",
      "properties": {
        "accessKey": {
          "type": "string"
        },
        "secretKey": {
          "type": "string"
        },
        "accountId": {
          "type": "string"
        },
        "roleArn": {
          "type": "string"
        }
      }
    },
    "ConfigureK8sClusterReqGcpOptions": {
      "type": "object",
      "properties": {
        "project": {
          "type": "string"
        },
        "credentials": {
          "type": "string",
          "title": "TODO(naphat) there should be an integrations table for this and elevate to top level data model"
        }
      }
    },
    "ContainerOrchestrationRuntimeECS": {
      "type": "object",
      "properties": {
        "prefix": {
          "type": "string"
        }
      }
    },
    "ContainerOrchestrationRuntimeK8s": {
      "type": "object",
      "properties": {
        "namespace": {
          "type": "string",
          "description": "optionally set a custom namespace. If not set, Prodvana will create and manage the namespace.\nIf set, the namespace *must* already exist and Prodvana will not try to create or delete it."
        },
        "pvnManaged": {
          "type": "boolean",
          "description": "do not set this, this is used internally by Prodvana to keep track of if a namespace\nis managed by Prodvana or externally."
        }
      }
    },
    "CreateContainerRegistryIntegrationReqECROptions": {
      "type": "object",
      "properties": {
        "accessKey": {
          "type": "string"
        },
        "secretKey": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "roleArn": {
          "type": "string"
        }
      }
    },
    "CreateContainerRegistryIntegrationReqPublicRegistryOptions": {
      "type": "object"
    },
    "DeploymentMetricsDeltas": {
      "type": "object",
      "properties": {
        "totalDeployments": {
          "type": "number",
          "format": "double"
        },
        "successfulDeployments": {
          "type": "number",
          "format": "double"
        },
        "successfulDeploymentsPerDay": {
          "type": "number",
          "format": "double"
        },
        "failedDeployments": {
          "type": "number",
          "format": "double"
        },
        "medianSuccessfulDeploymentDuration": {
          "type": "number",
          "format": "double"
        },
        "deploymentFailureRate": {
          "type": "number",
          "format": "double"
        },
        "totalRollbacks": {
          "type": "number",
          "format": "double"
        },
        "successfulRollbacks": {
          "type": "number",
          "format": "double"
        },
        "medianSuccessfulRollbackDuration": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "DeploymentMetricsTimeseriesMetrics": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "successfulDeployments": {
          "type": "number",
          "format": "double"
        },
        "failedDeployments": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "DeploymentMetricsValues": {
      "type": "object",
      "properties": {
        "totalDeployments": {
          "type": "number",
          "format": "double"
        },
        "successfulDeployments": {
          "type": "number",
          "format": "double"
        },
        "successfulDeploymentsPerDay": {
          "type": "number",
          "format": "double"
        },
        "failedDeployments": {
          "type": "number",
          "format": "double"
        },
        "medianSuccessfulDeploymentDuration": {
          "type": "string"
        },
        "deploymentFailureRate": {
          "type": "number",
          "format": "double"
        },
        "totalRollbacks": {
          "type": "number",
          "format": "double"
        },
        "successfulRollbacks": {
          "type": "number",
          "format": "double"
        },
        "medianSuccessfulRollbackDuration": {
          "type": "string"
        },
        "lastSuccessfulDeploymentCompletionTime": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "EphemeralSourceMedium": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "DEFAULT",
        "MEMORY"
      ],
      "default": "UNKNOWN",
      "title": "- DEFAULT: for kubernetes, this the the node's default storage medium"
    },
    "ExternalLinkLinkType": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "DETAIL",
        "LOG"
      ],
      "default": "UNKNOWN"
    },
    "FakeClusterConfigCrashingProgramPatterns": {
      "type": "object",
      "properties": {
        "imageRegex": {
          "type": "string"
        },
        "cmdRegex": {
          "type": "string"
        },
        "logOutput": {
          "type": "string"
        }
      }
    },
    "FetchDetailsFetchStatus": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "DRIFTED",
        "CONVERGED",
        "FAILED"
      ],
      "default": "UNKNOWN"
    },
    "GetDesiredStateGraphReqDepthOverrideByStatus": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/desired_statemodelStatus"
        },
        "depth": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "GetDesiredStateGraphReqQueryByService": {
      "type": "object",
      "properties": {
        "application": {
          "type": "string"
        },
        "service": {
          "type": "string"
        }
      }
    },
    "GetServiceImageInfoRespProgramInfo": {
      "type": "object",
      "properties": {
        "imageUrl": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "GetServiceImageInfoRespVersionInfo": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "programInfos": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/GetServiceImageInfoRespProgramInfo"
          }
        },
        "perReleaseChannel": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/workflowGetServiceImageInfoRespPerReleaseChannel"
          }
        }
      }
    },
    "InsightSubject": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "KeyDeliveryDecisionEventDecision": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "ROLLBACK_INITIATED",
        "FAILED"
      ],
      "default": "UNKNOWN"
    },
    "KubernetesConfigEnvInjectionMode": {
      "type": "string",
      "enum": [
        "ENV_INJECT_UNKNOWN",
        "ENV_INJECT_DISABLED",
        "ENV_INJECT_NON_SECRET_ENV"
      ],
      "default": "ENV_INJECT_UNKNOWN",
      "title": "- ENV_INJECT_DISABLED: disables env injection entirely\n - ENV_INJECT_NON_SECRET_ENV: inject non-secret env values from the Release Channel"
    },
    "ListClustersRespClusterInfo": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "endpoint": {
          "type": "string"
        },
        "serviceAccount": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/environmentClusterType"
        },
        "ecs": {
          "$ref": "#/definitions/ClusterInfoEcsInfo"
        },
        "lastHeartbeatTimestamp": {
          "type": "string",
          "format": "date-time"
        },
        "config": {
          "$ref": "#/definitions/environmentClusterConfig"
        },
        "auth": {
          "$ref": "#/definitions/environmentClusterAuth"
        }
      }
    },
    "ListCombinedReleasesRespRelease": {
      "type": "object",
      "properties": {
        "desiredStateId": {
          "type": "string"
        },
        "releaseId": {
          "type": "string"
        },
        "creationTimestamp": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ListContainerRegistryIntegrationsRespContainerRegistryIntegrationInfo": {
      "type": "object",
      "properties": {
        "integrationId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "title": "Implicit from registry_info below"
        },
        "status": {
          "$ref": "#/definitions/workflowRegistryStatus"
        },
        "ecrInfo": {
          "$ref": "#/definitions/workflowListContainerRegistryIntegrationsRespECRInfo"
        }
      }
    },
    "ListHoneycombEnvironmentsRespHoneycombEnvironment": {
      "type": "object",
      "properties": {
        "integrationId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "ManagedResourceRun": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "terminal": {
          "type": "boolean"
        },
        "creationTimestamp": {
          "type": "string",
          "format": "date-time"
        },
        "lastUpdateTimestamp": {
          "type": "string",
          "format": "date-time"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "MetricAnalysisLatencyConfig": {
      "type": "object",
      "properties": {
        "maxLatency": {
          "type": "string"
        }
      }
    },
    "MetricAnalysisSuccessRateConfig": {
      "type": "object",
      "properties": {
        "minThresholdPercent": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "NotificationConfigSlack": {
      "type": "object",
      "properties": {
        "channel": {
          "type": "string"
        }
      }
    },
    "ParallelTaskTaskTrack": {
      "type": "object",
      "properties": {
        "tasks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pipelinesTask"
          }
        }
      }
    },
    "PermissionDeniedEventAction": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "READ",
        "WRITE"
      ],
      "default": "UNKNOWN"
    },
    "PortConfigProtocol": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "HTTP",
        "HTTP2",
        "GRPC",
        "TCP"
      ],
      "default": "UNKNOWN"
    },
    "PreconditionReleaseChannelStable": {
      "type": "object",
      "properties": {
        "releaseChannel": {
          "type": "string"
        },
        "selector": {
          "type": "string"
        },
        "allowEmpty": {
          "type": "boolean",
          "title": "if selector is used, allow selector to return an empty list of release channels"
        }
      }
    },
    "PreconditionSharedManualApproval": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "ProtectionLifecyclePostApproval": {
      "type": "object"
    },
    "ProtectionLifecyclePostDeployment": {
      "type": "object",
      "properties": {
        "delayCheckDuration": {
          "type": "string",
          "description": "How long after the deployment completes should we start checking status?\ne.g, delay health checks X minutes after deployment (if deployment is noisy)."
        },
        "checkDuration": {
          "type": "string",
          "title": "How long after starting should we check for?"
        }
      }
    },
    "ProtectionLifecyclePreApproval": {
      "type": "object"
    },
    "ProtectionLinkStateStopReason": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "LIFECYCLE_COMPLETED",
        "SUCCEEDED_ONCE",
        "SUCCEEDED_FOR_DURATION",
        "TIMED_OUT",
        "FAILED",
        "DELETED",
        "MANUALLY_BYPASSED"
      ],
      "default": "UNKNOWN"
    },
    "RuntimeObjectManagementStatus": {
      "type": "string",
      "enum": [
        "PVN_MANAGED",
        "UNMANAGED"
      ],
      "default": "PVN_MANAGED"
    },
    "RuntimeObjectRuntimeExtension": {
      "type": "object",
      "properties": {
        "apply": {
          "$ref": "#/definitions/environmentCompiledExtensionCommand",
          "description": "aggregate object will have all commands set. fetch and get_info will only have appropriate commands set."
        },
        "fetch": {
          "$ref": "#/definitions/environmentCompiledExtensionCommand"
        },
        "getInfo": {
          "$ref": "#/definitions/environmentCompiledExtensionCommand"
        },
        "fetchInterval": {
          "type": "string"
        },
        "fetchSteadyStateInterval": {
          "type": "string"
        },
        "getInfoInterval": {
          "type": "string"
        },
        "serviceId": {
          "type": "string"
        },
        "releaseChannelId": {
          "type": "string"
        },
        "parameters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/common_configParameterDefinition"
          }
        },
        "parameterValues": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/common_configParameterValue"
          }
        },
        "type": {
          "$ref": "#/definitions/environmentExtensionType"
        },
        "fetchOutput": {
          "$ref": "#/definitions/modelRuntimeExtensionFetchOutput"
        },
        "getInfoOutput": {
          "$ref": "#/definitions/modelRuntimeExtensionGetInfoOutput"
        },
        "applyOutput": {
          "$ref": "#/definitions/modelRuntimeExtensionApplyOutput"
        },
        "fetchRetryPolicy": {
          "$ref": "#/definitions/environmentRetryPolicy"
        },
        "applyRetryPolicy": {
          "$ref": "#/definitions/environmentRetryPolicy"
        },
        "getInfoRetryPolicy": {
          "$ref": "#/definitions/environmentRetryPolicy"
        },
        "applyRetryableExitCodes": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "fetchMode": {
          "$ref": "#/definitions/extensionsFetchMode"
        }
      }
    },
    "RuntimeSpecificConfigK8SConfig": {
      "type": "object",
      "properties": {
        "serviceAnnotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Annotations to add to the Kubernetes Service object"
        }
      }
    },
    "RuntimeUpdateEventRuntimeAction": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "CREATE_OR_UPDATE",
        "WAIT_HEALTHY"
      ],
      "default": "UNKNOWN"
    },
    "RuntimeUpdateEventRuntimeStatus": {
      "type": "string",
      "enum": [
        "RUNTIME_STATUS_UNKNOWN",
        "PENDING",
        "SUCCESS",
        "FAILURE"
      ],
      "default": "RUNTIME_STATUS_UNKNOWN"
    },
    "ServiceConfigParametersAutogen": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "NONE",
        "IMAGE",
        "IMAGE_AND_REPLICAS"
      ],
      "default": "UNKNOWN",
      "title": "- NONE: no autogen\n - IMAGE: autogen one parameter per program for the image\n - IMAGE_AND_REPLICAS: IMAGE + autogen a parameter for replicas count"
    },
    "TaskRunPhase": {
      "type": "string",
      "enum": [
        "RUNNING",
        "NOT_STARTED"
      ],
      "default": "RUNNING"
    },
    "VolumeSourceEphemeralSource": {
      "type": "object",
      "properties": {
        "medium": {
          "$ref": "#/definitions/EphemeralSourceMedium"
        }
      }
    },
    "VolumeSourceSecretSource": {
      "type": "object",
      "properties": {
        "secretName": {
          "type": "string"
        }
      }
    },
    "agentConfirmPushApprovalResp": {
      "type": "object",
      "properties": {
        "approved": {
          "type": "boolean"
        }
      }
    },
    "agentDebugInfo": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string",
          "title": "set only if there's any error running debug commands"
        },
        "tcptracerouteOut": {
          "type": "string"
        }
      }
    },
    "agentHeartbeatResp": {
      "type": "object"
    },
    "agentInformerAction": {
      "type": "string",
      "enum": [
        "ADD",
        "UPDATE",
        "DELETE"
      ],
      "default": "ADD"
    },
    "agentProxyAPIServerResp": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/agentProxyAPIServerRespType",
          "title": "Header"
        },
        "blob": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "agentProxyAPIServerRespType": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "PROXY_APISERVER"
      ],
      "default": "UNKNOWN",
      "title": "- PROXY_APISERVER: More operations like docker registry interactions"
    },
    "agentRecordNewUnknownPushResp": {
      "type": "object"
    },
    "agentRecordPodResp": {
      "type": "object"
    },
    "agentRecordPodsResp": {
      "type": "object"
    },
    "agentRecordPushCompleteReqType": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "SUCCEEDED",
        "ROLLED_BACK"
      ],
      "default": "UNKNOWN"
    },
    "agentRecordPushCompleteResp": {
      "type": "object"
    },
    "agentRecordPushOngoingResp": {
      "type": "object"
    },
    "agentRecordPushStartResp": {
      "type": "object"
    },
    "agentRecordRolloutResp": {
      "type": "object",
      "properties": {
        "pushTimestamp": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "agentReportClusterMetadataResp": {
      "type": "object"
    },
    "agentReportDebugInfoResp": {
      "type": "object"
    },
    "applicationApplication": {
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/objectObjectMeta"
        },
        "config": {
          "$ref": "#/definitions/applicationApplicationConfig"
        },
        "state": {
          "$ref": "#/definitions/applicationApplicationState"
        },
        "userMetadata": {
          "$ref": "#/definitions/applicationApplicationUserMetadata"
        }
      }
    },
    "applicationApplicationConfig": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "releaseChannels": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/release_channelReleaseChannelConfig"
          }
        },
        "releaseChannelGroups": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/release_channelReleaseChannelGroupGeneratorConfig"
          }
        },
        "notifications": {
          "$ref": "#/definitions/common_configNotificationConfig"
        },
        "alerts": {
          "$ref": "#/definitions/workflowAlertingConfig",
          "title": "deprecated"
        },
        "capabilities": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/capabilityCapabilityConfig"
          },
          "title": "deprecated"
        },
        "capabilityInstances": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/capabilityCapabilityInstanceConfig"
          },
          "title": "deprecated"
        }
      }
    },
    "applicationApplicationState": {
      "type": "object"
    },
    "applicationApplicationUserMetadata": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "links": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/common_configLink"
          }
        },
        "serviceLinks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/common_configLink"
          },
          "title": "Links that every service should get automatically"
        }
      }
    },
    "applicationConfigureApplicationReq": {
      "type": "object",
      "properties": {
        "applicationConfig": {
          "$ref": "#/definitions/applicationApplicationConfig"
        },
        "approvedDangerousActionIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "source": {
          "$ref": "#/definitions/versionSource"
        },
        "sourceMetadata": {
          "$ref": "#/definitions/versionSourceMetadata"
        },
        "baseVersion": {
          "type": "string",
          "title": "optional, if this is not a new application, this is the existing version of\nthis application config that this configuration was based on.\nthis can be used to avoid concurrent updates overwriting each other.\nNOTE: this will eventually be required for updates"
        }
      }
    },
    "applicationConfigureApplicationResp": {
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/objectObjectMeta"
        },
        "createdNewVersion": {
          "type": "boolean"
        }
      }
    },
    "applicationDeleteApplicationResp": {
      "type": "object"
    },
    "applicationGetApplicationConfigResp": {
      "type": "object",
      "properties": {
        "config": {
          "$ref": "#/definitions/applicationApplicationConfig",
          "title": "config as passed in by user"
        },
        "version": {
          "type": "string"
        },
        "compiledConfig": {
          "$ref": "#/definitions/applicationApplicationConfig",
          "title": "config with defaults applied"
        }
      }
    },
    "applicationGetApplicationInsightsResp": {
      "type": "object",
      "properties": {
        "insights": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/insightsInsight"
          }
        }
      }
    },
    "applicationGetApplicationMetadataResp": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/applicationApplicationUserMetadata",
          "title": "metadata with no variables substitution, no modifications from parents"
        }
      }
    },
    "applicationGetApplicationMetricsResp": {
      "type": "object",
      "properties": {
        "deploymentMetrics": {
          "$ref": "#/definitions/metricsDeploymentMetrics"
        }
      }
    },
    "applicationGetApplicationResp": {
      "type": "object",
      "properties": {
        "application": {
          "$ref": "#/definitions/applicationApplication"
        }
      }
    },
    "applicationListApplicationConfigVersionsResp": {
      "type": "object",
      "properties": {
        "versions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/applicationListApplicationConfigVersionsRespVersionMetadata"
          }
        },
        "nextPageToken": {
          "type": "string"
        }
      }
    },
    "applicationListApplicationConfigVersionsRespVersionMetadata": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "creationTimestamp": {
          "type": "string",
          "format": "date-time"
        },
        "source": {
          "$ref": "#/definitions/versionSource"
        },
        "sourceMetadata": {
          "$ref": "#/definitions/versionSourceMetadata"
        }
      }
    },
    "applicationListApplicationsResp": {
      "type": "object",
      "properties": {
        "applications": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/applicationApplication"
          }
        }
      }
    },
    "applicationSetApplicationMetadataResp": {
      "type": "object"
    },
    "applicationSnoozeApplicationInsightResp": {
      "type": "object"
    },
    "applicationValidateConfigureApplicationResp": {
      "type": "object",
      "properties": {
        "config": {
          "$ref": "#/definitions/applicationApplicationConfig",
          "title": "config as passed in by user"
        },
        "compiledConfig": {
          "$ref": "#/definitions/applicationApplicationConfig",
          "title": "config with defaults applied"
        },
        "dangerousActions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/common_configDangerousAction"
          }
        }
      }
    },
    "async_taskTaskResult": {
      "type": "object",
      "properties": {
        "log": {
          "type": "string",
          "format": "byte",
          "description": "Will be set if task failed, otherwise may be empty."
        }
      }
    },
    "async_taskTaskStatus": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "PENDING",
        "RUNNING",
        "SUCCESS",
        "FAILED"
      ],
      "default": "UNKNOWN"
    },
    "authApiTokenInfo": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "expiresTimestamp": {
          "type": "string",
          "format": "date-time"
        },
        "creationTimestamp": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "authAuthToken": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        }
      }
    },
    "authCliAuthResp": {
      "type": "object",
      "properties": {
        "userPrompt": {
          "$ref": "#/definitions/CliAuthRespUserPrompt"
        },
        "token": {
          "$ref": "#/definitions/authAuthToken"
        }
      }
    },
    "authCreateOrgApiTokenReq": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "expiresTimestamp": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "authCreateOrgApiTokenResp": {
      "type": "object",
      "properties": {
        "apiToken": {
          "type": "string"
        },
        "info": {
          "$ref": "#/definitions/authApiTokenInfo"
        }
      }
    },
    "authDeleteOrgApiTokenResp": {
      "type": "object"
    },
    "authEmpty": {
      "type": "object"
    },
    "authGetAuthTokenResp": {
      "type": "object",
      "properties": {
        "token": {
          "$ref": "#/definitions/authAuthToken"
        },
        "user": {
          "$ref": "#/definitions/prodvanausersUser"
        }
      }
    },
    "authGetAuthUrlResponse": {
      "type": "object",
      "properties": {
        "authUrl": {
          "type": "string"
        }
      }
    },
    "authListOrgApiTokensResp": {
      "type": "object",
      "properties": {
        "tokens": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/authApiTokenInfo"
          }
        }
      }
    },
    "authLogoutResp": {
      "type": "object",
      "properties": {
        "logoutUrl": {
          "type": "string"
        }
      }
    },
    "authRefreshTokenReq": {
      "type": "object",
      "properties": {
        "token": {
          "$ref": "#/definitions/authAuthToken"
        },
        "forCli": {
          "type": "boolean"
        },
        "prodvanaOnlyAdminOrg": {
          "type": "boolean",
          "title": "prodvana internal use"
        }
      }
    },
    "blobsGetCasBlobResp": {
      "type": "object",
      "properties": {
        "bytes": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "blobsUploadCasBlobResp": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "capabilityCapabilityConfig": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "perReleaseChannel": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/capabilityPerReleaseChannelCapabilityConfig"
          }
        }
      }
    },
    "capabilityCapabilityInstanceConfig": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "omit if inlined"
        },
        "env": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/common_configEnvValue"
          },
          "title": "env vars to inject"
        },
        "prePushTasks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pipelinesTask"
          },
          "description": "Tasks to inject in the pipeline, before the push of the service instance depending on this capability\nCustom tasks will automatically have env vars from `env` above injected.\nWhen multiple service instances reference the same capability instance, the tasks are deduped and injected\nbefore the push of the first service instance in the pipeline."
        }
      }
    },
    "capabilityCapabilityInstanceRef": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "capabilityPerReleaseChannelCapabilityConfig": {
      "type": "object",
      "properties": {
        "releaseChannel": {
          "type": "string"
        },
        "inlined": {
          "$ref": "#/definitions/capabilityCapabilityInstanceConfig",
          "title": "either inline capability config definition, or reference a CapabilityInstanceDefinition\non the top level application object"
        },
        "ref": {
          "$ref": "#/definitions/capabilityCapabilityInstanceRef"
        }
      }
    },
    "common_configAutoRollbackConfig": {
      "type": "object",
      "properties": {
        "disabled": {
          "type": "boolean"
        }
      }
    },
    "common_configBlobParameterDefinition": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "type": "string"
        }
      },
      "description": "A parameter pointing to a remote blob, stored inside Prodvana's BlobsManager interface.\nThe value of the template variable will be the blob ID.\nWhen combined with `pvn-wrapper exec --in`, this parameter type can be used to make files manifest\non disk."
    },
    "common_configBlobParameterValue": {
      "type": "object",
      "properties": {
        "inlined": {
          "type": "string"
        }
      }
    },
    "common_configCmdProbe": {
      "type": "object",
      "properties": {
        "command": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "common_configCommitParameterDefinition": {
      "type": "object",
      "properties": {
        "repository": {
          "type": "string"
        },
        "branch": {
          "type": "string",
          "title": "branch to pull commits from, defaults to `main`"
        }
      }
    },
    "common_configConstant": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "constant name, used in substitutions"
        },
        "string": {
          "$ref": "#/definitions/common_configStringConstant"
        }
      }
    },
    "common_configDangerousAction": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "explanation": {
          "type": "string"
        }
      }
    },
    "common_configDockerImageParameterDefinition": {
      "type": "object",
      "properties": {
        "defaultTag": {
          "type": "string",
          "title": "can be omitted if parameter is required"
        },
        "imageRegistryInfo": {
          "$ref": "#/definitions/common_configImageRegistryInfo"
        },
        "changes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/common_configDockerImageParameterDefinitionChanges"
          }
        }
      }
    },
    "common_configDockerImageParameterDefinitionChanges": {
      "type": "object",
      "properties": {
        "program": {
          "$ref": "#/definitions/common_configProgramChange"
        }
      }
    },
    "common_configEnvValue": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        },
        "rawSecret": {
          "type": "string",
          "description": "Raw secret value to be used for user-editable YAML and RPC calls."
        },
        "secret": {
          "$ref": "#/definitions/common_configSecret",
          "description": "Externally stored secret."
        },
        "kubernetesSecret": {
          "$ref": "#/definitions/common_configKubernetesSecret",
          "description": "Kubernetes secret, only works for Kubernetes runtimes."
        }
      }
    },
    "common_configExternalLink": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/ExternalLinkLinkType"
        },
        "url": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "common_configFixedReplicaChange": {
      "type": "object"
    },
    "common_configHealthCheck": {
      "type": "object",
      "properties": {
        "http": {
          "$ref": "#/definitions/common_configHttpProbe"
        },
        "cmd": {
          "$ref": "#/definitions/common_configCmdProbe"
        },
        "tcp": {
          "$ref": "#/definitions/common_configTcpProbe"
        },
        "delay": {
          "type": "string"
        },
        "period": {
          "type": "string"
        }
      }
    },
    "common_configHelmConfig": {
      "type": "object",
      "properties": {
        "remote": {
          "$ref": "#/definitions/common_configRemoteHelmChart"
        },
        "local": {
          "$ref": "#/definitions/common_configLocalConfig"
        },
        "helmTarballBlobId": {
          "type": "string"
        },
        "valuesOverrides": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/common_configHelmValuesOverrides"
          }
        },
        "releaseName": {
          "type": "string",
          "description": "optional release name, leave blank to have Prodvana generate one.\nMainly useful for migrating an existing helm release into Prodvana."
        },
        "namespace": {
          "type": "string",
          "description": "used internally by Prodvana, do not set."
        }
      }
    },
    "common_configHelmValuesOverrides": {
      "type": "object",
      "properties": {
        "inlined": {
          "type": "string"
        },
        "local": {
          "$ref": "#/definitions/common_configLocalConfig"
        },
        "map": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/common_configEnvValue"
          },
          "title": "treat this as part of the above oneof, even though proto does not allow us to"
        }
      }
    },
    "common_configHttpProbe": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        },
        "port": {
          "type": "integer",
          "format": "int32"
        },
        "tls": {
          "type": "boolean"
        }
      }
    },
    "common_configImageRegistryInfo": {
      "type": "object",
      "properties": {
        "containerRegistryId": {
          "type": "string",
          "title": "both container_registry_id and container_registry are supported, but only set one not both"
        },
        "containerRegistry": {
          "type": "string"
        },
        "imageRepository": {
          "type": "string",
          "title": "Not the URL, everything after: username/reponame\nleaving it as once field because the spec considers it 1 field\nin theory you can have no username, or nest the repo names"
        }
      }
    },
    "common_configIntParameterDefinition": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "type": "string",
          "format": "int64"
        },
        "changes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/common_configIntParameterDefinitionChanges"
          }
        }
      }
    },
    "common_configIntParameterDefinitionChanges": {
      "type": "object",
      "properties": {
        "fixedReplica": {
          "$ref": "#/definitions/common_configFixedReplicaChange"
        }
      }
    },
    "common_configKubernetesConfig": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/common_configKubernetesConfigType"
        },
        "inlined": {
          "type": "string"
        },
        "local": {
          "$ref": "#/definitions/common_configLocalConfig"
        },
        "remote": {
          "$ref": "#/definitions/common_configRemoteConfig"
        },
        "envInjectionMode": {
          "$ref": "#/definitions/KubernetesConfigEnvInjectionMode",
          "title": "Defaults to ENV_INJECT_NON_SECRET_ENV"
        }
      }
    },
    "common_configKubernetesConfigType": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "KUBERNETES",
        "KUSTOMIZE"
      ],
      "default": "UNKNOWN"
    },
    "common_configKubernetesSecret": {
      "type": "object",
      "properties": {
        "secretName": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "common_configLink": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        }
      }
    },
    "common_configLocalConfig": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "title": "Specify a path to a local file or directory"
        },
        "paths": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "cannot be set in conjunction with path or tarball_blob_id\nSpecify multiple paths. They will get concatenated."
        },
        "subPath": {
          "type": "string",
          "description": "A sub_path relative to path containing the actual config.\nsub_path value can be templated, e.g. `{{.Builtins.ReleaseChannel.Name}}`.\nif specified, path must also be specified and be a directory."
        },
        "excludePatterns": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Used in conjunction with sub_path to exclude sub paths from being tarball'ed and uploaded\nto Prodvana.\nFollows the same format as gitignore."
        }
      }
    },
    "common_configMaturity": {
      "type": "string",
      "enum": [
        "FAST_ITERATION",
        "PRELAUNCH",
        "LIVE"
      ],
      "default": "FAST_ITERATION",
      "title": "TODO(naphat) maturity likely should not be hardcoded but be flexible per organization"
    },
    "common_configNotification": {
      "type": "object",
      "properties": {
        "configOverride": {
          "$ref": "#/definitions/common_configNotificationConfig",
          "title": "will default to application's notification config"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "common_configNotificationConfig": {
      "type": "object",
      "properties": {
        "slack": {
          "$ref": "#/definitions/NotificationConfigSlack"
        }
      }
    },
    "common_configParameterDefinition": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "parameter name, used in substitutions"
        },
        "description": {
          "type": "string",
          "title": "optional description for display purposes"
        },
        "string": {
          "$ref": "#/definitions/common_configStringParameterDefinition"
        },
        "dockerImage": {
          "$ref": "#/definitions/common_configDockerImageParameterDefinition"
        },
        "int": {
          "$ref": "#/definitions/common_configIntParameterDefinition"
        },
        "secret": {
          "$ref": "#/definitions/common_configSecretParameterDefinition"
        },
        "commit": {
          "$ref": "#/definitions/common_configCommitParameterDefinition"
        },
        "blob": {
          "$ref": "#/definitions/common_configBlobParameterDefinition"
        },
        "required": {
          "type": "boolean",
          "title": "next: 10"
        }
      }
    },
    "common_configParameterValue": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "string": {
          "type": "string"
        },
        "int": {
          "type": "string",
          "format": "int64"
        },
        "dockerImageTag": {
          "type": "string"
        },
        "secret": {
          "$ref": "#/definitions/common_configSecretParameterValue"
        },
        "commit": {
          "type": "string"
        },
        "blob": {
          "$ref": "#/definitions/common_configBlobParameterValue"
        }
      }
    },
    "common_configPerReleaseChannelProgramConfig": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "must match a program in top-level program config"
        },
        "env": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/common_configEnvValue"
          }
        },
        "image": {
          "type": "string",
          "description": "If present, overrides main program config.\nTODO: If users need to enforce that different RCs require different images, add requires_separate_images option to ProgramConfig.\nThis will prevent accidentally undoing separate images via the UI or autopush."
        },
        "imageRegistryInfo": {
          "$ref": "#/definitions/common_configImageRegistryInfo",
          "title": "optional, not guaranteed to be compatible with `image` (e.g. if user decides to paste in a public image string)"
        },
        "imageTag": {
          "type": "string"
        }
      }
    },
    "common_configPortConfig": {
      "type": "object",
      "properties": {
        "port": {
          "type": "integer",
          "format": "int32"
        },
        "targetPort": {
          "type": "integer",
          "format": "int32",
          "title": "optional, default to the same value as `port`"
        },
        "external": {
          "type": "boolean",
          "title": "if this port should be exposed to the public internet"
        },
        "protocol": {
          "$ref": "#/definitions/PortConfigProtocol"
        },
        "tls": {
          "type": "boolean",
          "title": "if the connection should use TLS"
        }
      }
    },
    "common_configProgramChange": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "common_configProgramConfig": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "imageTag": {
          "type": "string"
        },
        "imageRegistryInfo": {
          "$ref": "#/definitions/common_configImageRegistryInfo",
          "title": "optional, not guaranteed to be compatible with `image` (e.g. if user decides to paste in a public image string)"
        },
        "cmd": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "entrypoint": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "env": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/common_configEnvValue"
          }
        },
        "resources": {
          "$ref": "#/definitions/common_configResourceRequirements"
        },
        "healthCheck": {
          "$ref": "#/definitions/common_configHealthCheck"
        },
        "ports": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/common_configPortConfig"
          },
          "title": "empty list is ok, default from docker image will be used"
        },
        "templateComplete": {
          "type": "boolean",
          "description": "Only set when this ServiceConfig represents a ServiceTemplate\nWhen set, this program will be added in whole to the target service's\nprograms in full, and will not partially apply to a program with the\nsame name in the target service's config."
        },
        "workingDirectory": {
          "type": "string",
          "title": "working directory, defaults to runtime's implementation (usually the default working directory in the docker image)"
        }
      },
      "description": "This ProgramConfig is used in multiple places, including service configuration and custom pipeline tasks.\nThe validations expressed here represent the lowest common denominator of the use cases."
    },
    "common_configRemoteConfig": {
      "type": "object",
      "properties": {
        "tarballBlobId": {
          "type": "string",
          "description": "A directory tarball blob id uploaded to prodvana.\n\nTODO(naphat) git repo support?"
        },
        "subPath": {
          "type": "string"
        }
      },
      "title": "a remote config, specified by a remote source and a subpath"
    },
    "common_configRemoteHelmChart": {
      "type": "object",
      "properties": {
        "repo": {
          "type": "string",
          "title": "TODO(naphat) add integration support for private repositories"
        },
        "chart": {
          "type": "string"
        },
        "chartVersion": {
          "type": "string"
        }
      }
    },
    "common_configResourceList": {
      "type": "object",
      "properties": {
        "memory": {
          "type": "string"
        },
        "cpu": {
          "type": "string"
        }
      }
    },
    "common_configResourceRequirements": {
      "type": "object",
      "properties": {
        "requests": {
          "$ref": "#/definitions/common_configResourceList"
        }
      }
    },
    "common_configRetryConfig": {
      "type": "object",
      "properties": {
        "maxRetryDuration": {
          "type": "string"
        },
        "retryForever": {
          "type": "boolean"
        },
        "firstFailureNotification": {
          "$ref": "#/definitions/common_configNotification"
        }
      }
    },
    "common_configSecret": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "common_configSecretParameterDefinition": {
      "type": "object"
    },
    "common_configSecretParameterValue": {
      "type": "object",
      "properties": {
        "rawSecret": {
          "type": "string",
          "title": "Raw secret value"
        },
        "secretRef": {
          "$ref": "#/definitions/common_configSecret",
          "description": "Existing secret reference."
        }
      }
    },
    "common_configSecretReferenceValue": {
      "type": "object",
      "properties": {
        "secret": {
          "$ref": "#/definitions/common_configSecret",
          "description": "Externally stored secret."
        },
        "kubernetesSecret": {
          "$ref": "#/definitions/common_configKubernetesSecret",
          "description": "Kubernetes secret, only works for Kubernetes runtimes."
        }
      }
    },
    "common_configServiceInstanceObjectMeta": {
      "type": "object",
      "properties": {
        "serviceMeta": {
          "$ref": "#/definitions/objectObjectMeta",
          "title": "These metas will only have versions set if service instance has been pushed before"
        },
        "releaseChannelMeta": {
          "$ref": "#/definitions/objectObjectMeta"
        }
      },
      "title": "HACK(naphat) service instances do not have their own id and names today"
    },
    "common_configStringConstant": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        }
      }
    },
    "common_configStringParameterDefinition": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "type": "string"
        }
      }
    },
    "common_configTaskLifecycle": {
      "type": "string",
      "enum": [
        "UNKNOWN_TASK_LIFECYCLE",
        "CONVERGENCE_START",
        "PRE_APPROVAL",
        "APPROVAL",
        "POST_APPROVAL",
        "DEPLOYMENT",
        "POST_DEPLOYMENT"
      ],
      "default": "UNKNOWN_TASK_LIFECYCLE",
      "description": " - PRE_APPROVAL: Runs before everything else. May wait for any dependent RCs to be stable.\n - APPROVAL: Approval tasks, manual or automated. Must wait for all PRE_APPROVAL_TASK to be satisfied.\n - POST_APPROVAL: Runs after approval, just before service push.\n - DEPLOYMENT: Runs as long as service push is in progress.\n - POST_DEPLOYMENT: Runs after service push succeeds (pods are replaced and healthy, ...), before declaring the service CONVERGED."
    },
    "common_configTcpProbe": {
      "type": "object",
      "properties": {
        "port": {
          "type": "integer",
          "format": "int32"
        },
        "host": {
          "type": "string"
        }
      }
    },
    "config_writebackConfigWritebackPath": {
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string",
          "description": "short, user-readable name of what this config is. May contain spaces."
        },
        "displayPath": {
          "type": "string",
          "title": "will be HTTP if apiserver is configured with a http display path, otherwise will be a git ssh/local path"
        }
      }
    },
    "convergenceConvergenceMode": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "CONVERGE",
        "OBSERVER"
      ],
      "default": "UNKNOWN",
      "title": "- UNKNOWN: Defaults to CONVERGE"
    },
    "deliveryCanaryProgress": {
      "type": "object",
      "properties": {
        "canaryWeight": {
          "type": "integer",
          "format": "int32",
          "title": "weight to advance canary to, percentage 0-100"
        },
        "duration": {
          "type": "string",
          "title": "duration to pause at this weight before advancing"
        }
      }
    },
    "deliveryDeliveryConfig": {
      "type": "object",
      "properties": {
        "canaryProgress": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/deliveryCanaryProgress"
          },
          "title": "progression of canary as delivery occurs"
        },
        "analysisTemplates": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "delivery_extensionCompiledDeliveryExtensionInstanceConfig": {
      "type": "object",
      "properties": {
        "definition": {
          "$ref": "#/definitions/prodvanadelivery_extensionDeliveryExtensionConfig"
        },
        "runtimeExecution": {
          "$ref": "#/definitions/runtimesRuntimeExecutionConfig"
        },
        "env": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/common_configEnvValue"
          },
          "description": "The compiled environment for this attachment's context, e.g.  Release Channel."
        },
        "parameterValues": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/common_configParameterValue"
          },
          "title": "compiled parameter values"
        }
      }
    },
    "delivery_extensionConfigureDeliveryExtensionReq": {
      "type": "object",
      "properties": {
        "deliveryExtensionConfig": {
          "$ref": "#/definitions/prodvanadelivery_extensionDeliveryExtensionConfig"
        },
        "source": {
          "$ref": "#/definitions/versionSource"
        },
        "sourceMetadata": {
          "$ref": "#/definitions/versionSourceMetadata"
        }
      }
    },
    "delivery_extensionConfigureDeliveryExtensionResp": {
      "type": "object",
      "properties": {
        "deliveryExtensionId": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "delivery_extensionDeliveryExtensionInstanceRef": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "parameters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/common_configParameterValue"
          }
        }
      }
    },
    "delivery_extensionGetDeliveryExtensionConfigResp": {
      "type": "object",
      "properties": {
        "inputConfig": {
          "$ref": "#/definitions/prodvanadelivery_extensionDeliveryExtensionConfig"
        },
        "compiledConfig": {
          "$ref": "#/definitions/prodvanadelivery_extensionDeliveryExtensionConfig"
        },
        "version": {
          "type": "string",
          "title": "next tag: 4"
        }
      }
    },
    "delivery_extensionGetDeliveryExtensionInstanceConfigResp": {
      "type": "object",
      "properties": {
        "config": {
          "$ref": "#/definitions/delivery_extensionCompiledDeliveryExtensionInstanceConfig"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "delivery_extensionGetDeliveryExtensionResp": {
      "type": "object",
      "properties": {
        "deliveryExtension": {
          "$ref": "#/definitions/prodvanadelivery_extensionDeliveryExtension"
        }
      }
    },
    "delivery_extensionListDeliveryExtensionsResp": {
      "type": "object",
      "properties": {
        "deliveryExtensions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/prodvanadelivery_extensionDeliveryExtension"
          }
        },
        "nextPageToken": {
          "type": "string"
        }
      }
    },
    "delivery_extensionValidateConfigureDeliveryExtensionResp": {
      "type": "object",
      "properties": {
        "inputConfig": {
          "$ref": "#/definitions/prodvanadelivery_extensionDeliveryExtensionConfig"
        },
        "compiledConfig": {
          "$ref": "#/definitions/prodvanadelivery_extensionDeliveryExtensionConfig"
        }
      }
    },
    "deploymentCheckCommitInDeploymentResp": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/CheckCommitInDeploymentRespResult"
        }
      }
    },
    "deploymentCommitAnalysis": {
      "type": "object",
      "properties": {
        "commitsAdded": {
          "type": "string",
          "format": "int64"
        },
        "commitsRemoved": {
          "type": "string",
          "format": "int64"
        },
        "impactAnalysis": {
          "$ref": "#/definitions/deploymentImpactAnalysisComparison"
        }
      }
    },
    "deploymentCompareDeploymentReq": {
      "type": "object",
      "properties": {
        "newDeployment": {
          "$ref": "#/definitions/deploymentDeploymentRef"
        },
        "prevDeployment": {
          "$ref": "#/definitions/deploymentDeploymentRef"
        }
      }
    },
    "deploymentCompareDeploymentResp": {
      "type": "object",
      "properties": {
        "comparison": {
          "$ref": "#/definitions/deploymentDeploymentComparison"
        }
      }
    },
    "deploymentDeploymentComparison": {
      "type": "object",
      "properties": {
        "prev": {
          "$ref": "#/definitions/objectObjectMeta"
        },
        "prevRepository": {
          "type": "string"
        },
        "newRepository": {
          "type": "string"
        },
        "prevCommitId": {
          "type": "string"
        },
        "newCommitId": {
          "type": "string"
        },
        "commitAnalysis": {
          "$ref": "#/definitions/deploymentCommitAnalysis",
          "title": "only set if the previous commit is set and is from the same repo, and the repo is linked to prodvana"
        },
        "prevServiceId": {
          "type": "string",
          "title": "only set for Prodvana managed deployments"
        },
        "prevReleaseChannelId": {
          "type": "string"
        },
        "prevServiceVersion": {
          "type": "string"
        },
        "newServiceId": {
          "type": "string"
        },
        "newReleaseChannelId": {
          "type": "string"
        },
        "newServiceVersion": {
          "type": "string"
        }
      }
    },
    "deploymentDeploymentConfig": {
      "type": "object",
      "properties": {
        "creationTimestamp": {
          "type": "string",
          "format": "date-time",
          "title": "must be unset on input"
        },
        "deploymentSystem": {
          "type": "string"
        },
        "service": {
          "type": "string",
          "title": "required when recording deployments from external systems"
        },
        "releaseChannel": {
          "type": "string",
          "title": "required when recording deployments from external systems"
        },
        "application": {
          "type": "string",
          "title": "required when recording deployments from external systems"
        },
        "repository": {
          "type": "string",
          "title": "e.g. github.com/foo/bar"
        },
        "commitId": {
          "type": "string",
          "title": "commit hash"
        },
        "user": {
          "type": "string",
          "title": "if known"
        },
        "applicationId": {
          "type": "string"
        },
        "serviceId": {
          "type": "string"
        },
        "releaseChannelId": {
          "type": "string"
        },
        "serviceVersion": {
          "type": "string"
        },
        "desiredStateId": {
          "type": "string"
        },
        "releaseId": {
          "type": "string",
          "title": "next tag: 15"
        }
      }
    },
    "deploymentDeploymentFilter": {
      "type": "object",
      "properties": {
        "services": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "filters to deployments for join(join(services, OR), join(release_channels, OR), AND)"
        },
        "releaseChannels": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "application": {
          "type": "string",
          "title": "if set, the filters on services and deployment channels above will be limited to this app.\nOtherwise, there is no app filter (so e.g. release_channels=['staging'] will select\nstaging deployment channels across all apps.)"
        },
        "desiredStateId": {
          "type": "string",
          "title": "desired_state_id filter is AND'ed with everything else in the same filter object"
        },
        "releaseId": {
          "type": "string",
          "title": "release_id filter is AND'ed with everything else in the same filter object"
        }
      }
    },
    "deploymentDeploymentRef": {
      "type": "object",
      "properties": {
        "deploymentId": {
          "type": "string"
        },
        "config": {
          "$ref": "#/definitions/deploymentDeploymentConfig"
        }
      }
    },
    "deploymentDeploymentServiceInstance": {
      "type": "object",
      "properties": {
        "application": {
          "type": "string"
        },
        "service": {
          "type": "string"
        },
        "releaseChannel": {
          "type": "string"
        }
      }
    },
    "deploymentDeploymentState": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/deploymentDeploymentStatus"
        },
        "lastUpdateTimestamp": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "deploymentDeploymentStatus": {
      "type": "string",
      "enum": [
        "UNKNOWN_STATUS",
        "PENDING",
        "SUCCEEDED",
        "FAILED",
        "PREVIEW"
      ],
      "default": "UNKNOWN_STATUS"
    },
    "deploymentGetLatestDeploymentsResp": {
      "type": "object",
      "properties": {
        "deployments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/prodvanadeploymentDeployment"
          }
        },
        "nextPageToken": {
          "type": "string"
        }
      }
    },
    "deploymentImpactAnalysisComparison": {
      "type": "object",
      "properties": {
        "relevantAddedCommits": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/repoCommit"
          },
          "title": "commits likely to be impactful, prev_commit_id and new_commit_id have a merge base"
        },
        "relevantRemovedCommits": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/repoCommit"
          }
        },
        "unanalyzedCommits": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "deploymentListDeploymentsResp": {
      "type": "object",
      "properties": {
        "deployments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/prodvanadeploymentDeployment"
          }
        },
        "nextPageToken": {
          "type": "string"
        }
      }
    },
    "deploymentPreviewDeploymentReq": {
      "type": "object",
      "properties": {
        "config": {
          "$ref": "#/definitions/deploymentDeploymentConfig"
        },
        "prevDeployment": {
          "$ref": "#/definitions/deploymentDeploymentRef",
          "title": "omit to use latest deployment from the same app/service/deployment channel"
        }
      }
    },
    "deploymentPreviewDeploymentResp": {
      "type": "object",
      "properties": {
        "deployment": {
          "$ref": "#/definitions/prodvanadeploymentDeployment"
        }
      }
    },
    "deploymentUpdateDeploymentStatusResp": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/deploymentDeploymentStatus"
        }
      }
    },
    "desired_stateBypassProtectionReq": {
      "type": "object",
      "properties": {
        "desiredStateId": {
          "type": "string"
        },
        "source": {
          "type": "string"
        }
      }
    },
    "desired_stateBypassProtectionResp": {
      "type": "object"
    },
    "desired_stateDebugLogs": {
      "type": "object",
      "properties": {
        "debugLogs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelDebugLog"
          }
        }
      }
    },
    "desired_stateDesiredStateSummary": {
      "type": "object",
      "properties": {
        "entityGraph": {
          "$ref": "#/definitions/modelEntityGraph"
        },
        "creationTimestamp": {
          "type": "string",
          "format": "date-time"
        },
        "lastUpdateTimestamp": {
          "type": "string",
          "format": "date-time"
        },
        "replacedTimestamp": {
          "type": "string",
          "format": "date-time",
          "title": "will only be set if desired state has been replaced"
        },
        "inputDesiredState": {
          "$ref": "#/definitions/modelState",
          "title": "uncompiled desired state originally passed as input to SetDesiredState"
        },
        "desiredState": {
          "$ref": "#/definitions/modelState",
          "title": "compiled desired state"
        },
        "startingState": {
          "$ref": "#/definitions/modelState"
        },
        "lastSeenState": {
          "$ref": "#/definitions/modelState"
        },
        "status": {
          "$ref": "#/definitions/desired_statemodelStatus"
        },
        "source": {
          "$ref": "#/definitions/versionSource",
          "title": "who set the desired state"
        },
        "sourceMetadata": {
          "$ref": "#/definitions/versionSourceMetadata"
        },
        "pendingSetDesiredState": {
          "$ref": "#/definitions/desired_statePendingSetDesiredState",
          "title": "the latest pending or failed set desired state request"
        },
        "setDesiredStateMetadata": {
          "$ref": "#/definitions/modelSetDesiredStateMetadata"
        },
        "statuses": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/desired_statemodelStatus"
          },
          "description": "fields below are deprecated\nstatus of the desired state, all its descendents, and the root desired state."
        },
        "preconditionStatuses": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/modelConditionState"
          },
          "description": "State of all preconditions involved in the desired state.\nKey format - \"{desired_state_id}-{index}\", e.g., \"des-0752d6c76a6943abbfcf0515634584ba-0\"."
        },
        "statusExplanations": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/desired_stateStatusExplanations"
          }
        },
        "debugLogs": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/desired_stateDebugLogs"
          }
        },
        "actionExplanations": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/modelActionExplanation"
          }
        },
        "lastUpdateTimestamps": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "date-time"
          },
          "title": "last_update_timestamp, last_fetched_timestamp, and last_applied_timestamp are only returned for the latest desired state"
        },
        "lastFetchedTimestamps": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "date-time"
          }
        },
        "lastAppliedTimestamps": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "date-time"
          }
        }
      }
    },
    "desired_stateDesiredStateTimestamps": {
      "type": "object",
      "properties": {
        "creationTimestamp": {
          "type": "string",
          "format": "date-time"
        },
        "lastUpdateTimestamp": {
          "type": "string",
          "format": "date-time"
        },
        "replacedTimestamp": {
          "type": "string",
          "format": "date-time",
          "title": "will only be set if desired state has been replaced"
        }
      }
    },
    "desired_stateGetDesiredStateConvergenceSummaryResp": {
      "type": "object",
      "properties": {
        "summary": {
          "$ref": "#/definitions/desired_stateDesiredStateSummary"
        }
      }
    },
    "desired_stateGetDesiredStateGraphReq": {
      "type": "object",
      "properties": {
        "desiredStateId": {
          "type": "string"
        },
        "queryByService": {
          "$ref": "#/definitions/GetDesiredStateGraphReqQueryByService"
        },
        "types": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/desired_statemodelType"
          },
          "description": "Which type of entities to find. Empty list to find all entities."
        },
        "requiredAnnotations": {
          "$ref": "#/definitions/modelAnnotations",
          "description": "Which annotations are required for an entity to be considered interesting."
        },
        "requiredEntityNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "depth": {
          "type": "integer",
          "format": "int32",
          "description": "For all interesting entities, also include all children up to the given depth. 0 means no children."
        },
        "depthOverridesByStatus": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/GetDesiredStateGraphReqDepthOverrideByStatus"
          }
        },
        "includeDesiredStateTimestamps": {
          "type": "boolean"
        }
      }
    },
    "desired_stateGetDesiredStateGraphResp": {
      "type": "object",
      "properties": {
        "entityGraph": {
          "$ref": "#/definitions/modelEntityGraph"
        },
        "pendingSetDesiredState": {
          "$ref": "#/definitions/desired_statePendingSetDesiredState",
          "title": "will only be set if DS was queried by service and there is a pending set desired state"
        },
        "timestamps": {
          "$ref": "#/definitions/desired_stateDesiredStateTimestamps"
        }
      }
    },
    "desired_stateGetDesiredStateResp": {
      "type": "object",
      "properties": {
        "desiredState": {
          "$ref": "#/definitions/modelState"
        },
        "compiledDesiredState": {
          "$ref": "#/definitions/modelState"
        },
        "setDesiredStateMetadata": {
          "$ref": "#/definitions/modelSetDesiredStateMetadata"
        },
        "creationTimestamp": {
          "type": "string",
          "format": "date-time"
        },
        "source": {
          "$ref": "#/definitions/versionSource",
          "title": "who set the desired state"
        },
        "sourceMetadata": {
          "$ref": "#/definitions/versionSourceMetadata"
        }
      }
    },
    "desired_stateGetLatestCombinedReleaseDesiredStateResp": {
      "type": "object",
      "properties": {
        "inputDesiredState": {
          "$ref": "#/definitions/modelState"
        },
        "compiledDesiredState": {
          "$ref": "#/definitions/modelState"
        },
        "setDesiredStateMetadata": {
          "$ref": "#/definitions/modelSetDesiredStateMetadata"
        },
        "creationTimestamp": {
          "type": "string",
          "format": "date-time"
        },
        "source": {
          "$ref": "#/definitions/versionSource",
          "title": "who set the desired state"
        },
        "sourceMetadata": {
          "$ref": "#/definitions/versionSourceMetadata"
        }
      }
    },
    "desired_stateGetMaestroReleaseResp": {
      "type": "object",
      "properties": {
        "maestroRelease": {
          "$ref": "#/definitions/maestroMaestroRelease"
        }
      }
    },
    "desired_stateGetServiceDesiredStateConvergenceSummaryResp": {
      "type": "object",
      "properties": {
        "summary": {
          "$ref": "#/definitions/desired_stateDesiredStateSummary"
        }
      }
    },
    "desired_stateGetServiceDesiredStateHistoryResp": {
      "type": "object",
      "properties": {
        "desiredStates": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/desired_stateDesiredStateSummary"
          }
        },
        "nextPageToken": {
          "type": "string"
        }
      }
    },
    "desired_stateGetServiceDesiredStateIdHistoryResp": {
      "type": "object",
      "properties": {
        "desiredStateIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "nextPageToken": {
          "type": "string"
        }
      }
    },
    "desired_stateGetServiceLastConvergedStateResp": {
      "type": "object",
      "properties": {
        "serviceInstanceStates": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/desired_statemodelServiceInstanceState"
          }
        }
      }
    },
    "desired_stateGetServiceLatestDesiredStateIdResp": {
      "type": "object",
      "properties": {
        "desiredStateId": {
          "type": "string"
        },
        "pendingSetDesiredState": {
          "$ref": "#/definitions/desired_statePendingSetDesiredState"
        }
      }
    },
    "desired_stateListCombinedReleasesResp": {
      "type": "object",
      "properties": {
        "releases": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ListCombinedReleasesRespRelease"
          }
        },
        "nextPageToken": {
          "type": "string"
        }
      }
    },
    "desired_stateListMaestroReleasesResp": {
      "type": "object",
      "properties": {
        "maestroReleases": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/maestroMaestroRelease"
          }
        },
        "nextPageToken": {
          "type": "string"
        }
      }
    },
    "desired_statePendingSetDesiredState": {
      "type": "object",
      "properties": {
        "desiredStateId": {
          "type": "string"
        },
        "compiledDesiredState": {
          "$ref": "#/definitions/modelState"
        },
        "taskStatus": {
          "$ref": "#/definitions/async_taskTaskStatus",
          "title": "will never contain SUCCESS, by definition, but may contain FAILED"
        },
        "taskResult": {
          "$ref": "#/definitions/async_taskTaskResult",
          "description": "next tag: 5",
          "title": "will only be set for FAILED"
        }
      }
    },
    "desired_statePreviewEntityGraphResp": {
      "type": "object",
      "properties": {
        "entityGraph": {
          "$ref": "#/definitions/modelEntityGraph"
        },
        "desiredStateId": {
          "type": "string",
          "title": "unique identifier the preview entity graph that was just created. This same ID can be used across any endpoints that inspect desired states, e.g. GetDesiredState"
        }
      }
    },
    "desired_statePromoteDeliveryReq": {
      "type": "object",
      "properties": {
        "desiredStateId": {
          "type": "string"
        },
        "stage": {
          "type": "string",
          "format": "int64"
        },
        "full": {
          "type": "boolean"
        },
        "source": {
          "type": "string"
        }
      }
    },
    "desired_statePromoteDeliveryResp": {
      "type": "object"
    },
    "desired_stateSetDesiredStateReq": {
      "type": "object",
      "properties": {
        "desiredState": {
          "$ref": "#/definitions/modelState"
        },
        "rollback": {
          "type": "boolean",
          "description": "set if this is a rollback, purely for metadata purposes."
        },
        "bypassPreconditionsAndProtections": {
          "type": "boolean",
          "title": "generate a desired state with faster preconditions"
        },
        "source": {
          "$ref": "#/definitions/versionSource"
        },
        "sourceMetadata": {
          "$ref": "#/definitions/versionSourceMetadata"
        },
        "forceAsyncSetDesiredState": {
          "type": "boolean",
          "title": "internal use only"
        },
        "maestroConfigOverride": {
          "$ref": "#/definitions/maestroMaestroConfig",
          "title": "optionally override maestro config for this service"
        }
      }
    },
    "desired_stateSetDesiredStateResp": {
      "type": "object",
      "properties": {
        "desiredStateId": {
          "type": "string",
          "title": "unique identifier for the desired state that was just set, unless maestro is used"
        },
        "releaseId": {
          "type": "string",
          "title": "release ID for maestro. If this is set, desired_state_id will not be set"
        }
      }
    },
    "desired_stateSetManualApprovalReq": {
      "type": "object",
      "properties": {
        "desiredStateId": {
          "type": "string"
        },
        "topic": {
          "type": "string",
          "title": "string application = 2 [(validate.rules).string.min_len = 1];\nstring service = 3 [(validate.rules).string.min_len = 1];\nstring release_channel = 4 [(validate.rules).string.min_len = 1];"
        },
        "reject": {
          "type": "boolean"
        },
        "signalType": {
          "type": "string"
        }
      }
    },
    "desired_stateSetManualApprovalResp": {
      "type": "object"
    },
    "desired_stateStatusExplanations": {
      "type": "object",
      "properties": {
        "statusExplanations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelStatusExplanation"
          }
        }
      }
    },
    "desired_stateValidateDesiredStateReq": {
      "type": "object",
      "properties": {
        "desiredState": {
          "$ref": "#/definitions/modelState"
        },
        "rollback": {
          "type": "boolean",
          "title": "set if this is a rollback, purely for metadata purposes"
        },
        "bypassPreconditionsAndProtections": {
          "type": "boolean",
          "title": "generate a desired state with faster preconditions"
        },
        "serviceInstanceConfigs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/serviceCompiledServiceInstanceConfig"
          },
          "title": "optional, if set, use these service configs instead of fetching from db. can be useful when doing a ValidateApplyParameters followed by a ValidateDesiredState"
        },
        "labelExpansionOnly": {
          "type": "boolean",
          "title": "only do label expansion instead of the full compilation, can be useful for speedup if the only desired outcome is to look at the materialized release channels"
        },
        "disregardServiceVersions": {
          "type": "boolean",
          "description": "assume service versions in the request are invalid and do not try to fetch them."
        }
      }
    },
    "desired_stateValidateDesiredStateResp": {
      "type": "object",
      "properties": {
        "desiredState": {
          "$ref": "#/definitions/modelState"
        },
        "compiledDesiredState": {
          "$ref": "#/definitions/modelState"
        }
      }
    },
    "desired_statemaestroStatus": {
      "type": "string",
      "enum": [
        "UNKNOWN_STATUS",
        "PENDING",
        "IN_PROGRESS",
        "SUCCEEDED",
        "FAILED",
        "SKIPPED"
      ],
      "default": "UNKNOWN_STATUS",
      "description": " - PENDING: Pending means this train entry has never been started and is waiting for dependencies to be met.\n - IN_PROGRESS: Dependencies have been met and this train entry has been promoted.\n - SUCCEEDED: Successfully converged.\n - FAILED: Promoted but failed to converge.\n - SKIPPED: This train entry was skipped - any dependencies on this entry can proceed."
    },
    "desired_statemodelDeliveryExtension": {
      "type": "object",
      "properties": {
        "instanceId": {
          "type": "string"
        },
        "lifecycle": {
          "$ref": "#/definitions/common_configTaskLifecycle"
        },
        "references": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelIdentifier"
          }
        }
      }
    },
    "desired_statemodelDeliveryExtensionState": {
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/desired_statemodelMetadata"
        },
        "versions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelVersion"
          }
        },
        "extensionId": {
          "type": "string"
        },
        "extensionInstanceId": {
          "type": "string"
        },
        "lifecycle": {
          "$ref": "#/definitions/common_configTaskLifecycle"
        },
        "lastCompletedTimestamp": {
          "type": "string",
          "format": "date-time"
        },
        "lastCompletedStatus": {
          "$ref": "#/definitions/modelSimpleStatus"
        },
        "lastCompletedStatusExplanations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelStatusExplanation"
          }
        },
        "lastCompletedAppliedVersion": {
          "type": "string"
        },
        "references": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelIdentifier"
          }
        },
        "status": {
          "$ref": "#/definitions/modelConditionStatus",
          "title": "next tag: 14"
        }
      }
    },
    "desired_statemodelMetadata": {
      "type": "object",
      "properties": {
        "preconditions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelCondition"
          }
        },
        "invariants": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelCondition"
          }
        },
        "self": {
          "$ref": "#/definitions/modelIdentifier"
        },
        "desiredStateId": {
          "type": "string"
        },
        "rootDesiredStateId": {
          "type": "string"
        },
        "releaseId": {
          "type": "string"
        },
        "protectionLinks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/desired_statemodelProtectionLink"
          }
        },
        "deliveryExtensions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/desired_statemodelDeliveryExtension"
          }
        },
        "convergenceProtectionAttachments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelProtectionAttachmentDefinition"
          }
        },
        "targetStateSetByParent": {
          "type": "boolean",
          "description": "if true, the entity does not set its own target state. instead, the target state will be set when the parent decides to set target state."
        },
        "requireApprovalBeforeApply": {
          "type": "boolean"
        },
        "appliesInObserverMode": {
          "type": "boolean"
        },
        "convergenceGracePeriod": {
          "type": "string",
          "description": "How long after apply ran the first time should it be restarted if the entity still has not converged.\nThis duration is computed from the *start* of apply run."
        }
      }
    },
    "desired_statemodelProtectionAttachment": {
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/desired_statemodelMetadata"
        },
        "versions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelVersion"
          }
        },
        "lastCompletedVersions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelVersion"
          }
        },
        "lastCompletedTimestamp": {
          "type": "string",
          "format": "date-time"
        },
        "lastCompletedStatus": {
          "$ref": "#/definitions/modelSimpleStatus"
        },
        "lastCompletedStatusExplanations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelStatusExplanation"
          }
        },
        "lastCompletedAppliedVersion": {
          "type": "string"
        },
        "protectionId": {
          "type": "string"
        },
        "attachmentId": {
          "type": "string",
          "title": "next tag: 9"
        }
      },
      "description": "TODO: Rename to ProtectionAttachmentState to be consistent with other entities."
    },
    "desired_statemodelProtectionLink": {
      "type": "object",
      "properties": {
        "lifecycle": {
          "$ref": "#/definitions/protectionProtectionLifecycle"
        },
        "attachmentId": {
          "type": "string"
        }
      }
    },
    "desired_statemodelRuntimeObject": {
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/desired_statemodelMetadata"
        },
        "objectType": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "generateName": {
          "type": "string",
          "title": "if set, this runtime object will have a name that is generated at creation time, by the runtime implementation"
        },
        "versions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelVersion"
          }
        },
        "fetchVersion": {
          "$ref": "#/definitions/modelVersion",
          "title": "if set, this is the version of the fetch command that resulted in the rest of this object"
        },
        "status": {
          "$ref": "#/definitions/modelRuntimeObjectStatus"
        },
        "rollbackVersion": {
          "$ref": "#/definitions/modelVersion"
        },
        "delivery": {
          "$ref": "#/definitions/modelDeliveryState"
        },
        "versionAgnostic": {
          "type": "boolean",
          "title": "This object just needs to exist - it doesn't change from version to version"
        },
        "desiredVersionDirtyOnly": {
          "type": "boolean",
          "description": "when checking for whether or not to apply, only use the desired version and check if it's active and not dirty. that is, active \u0026\u0026 at desired version \u0026\u0026 dirty = hasWork, no work otherwise."
        },
        "message": {
          "type": "string",
          "description": "Human readable message (typically for errors)."
        },
        "runtimeExtension": {
          "$ref": "#/definitions/RuntimeObjectRuntimeExtension",
          "title": "additional config if this runtime object belongs to a runtime extension"
        },
        "interval": {
          "type": "string",
          "title": "if set, runtime object is continuously applied instead of being done once when there is a version mismatch"
        },
        "steadyStateInterval": {
          "type": "string"
        },
        "outputBlobIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "if output is saved, this is the ID of the blob to retrieve it, only for run-to-completion objects.",
          "title": "output_blob_ids and exit_codes are in the same order, assuming output is saved"
        },
        "exitCodes": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "title": "exit codes, only for run-to-completion objects like jobs"
        },
        "requireApprovalBeforeApply": {
          "type": "boolean"
        },
        "rawConfig": {
          "type": "string",
          "title": "raw runtime-specific config, e.g. k8s yaml"
        },
        "managementStatus": {
          "$ref": "#/definitions/RuntimeObjectManagementStatus"
        },
        "lastCompletedTaskRun": {
          "$ref": "#/definitions/modelTaskRun",
          "title": "For entities that run jobs/tasks multiple times, what is the most recent status we have?"
        },
        "externalLinks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/common_configExternalLink"
          }
        },
        "externalObjects": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/extensionsExternalObject"
          },
          "title": "external objects tracked by this runtime, not represented in entity graph but useful to display to users"
        }
      }
    },
    "desired_statemodelServiceInstanceState": {
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/desired_statemodelMetadata"
        },
        "application": {
          "type": "string"
        },
        "service": {
          "type": "string"
        },
        "releaseChannel": {
          "type": "string"
        },
        "serviceId": {
          "type": "string",
          "title": "set internally by prodvana"
        },
        "releaseChannelId": {
          "type": "string",
          "title": "set internally by prodvana"
        },
        "versions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelVersion"
          }
        },
        "rollbackVersion": {
          "$ref": "#/definitions/modelVersion",
          "title": "set an explicit auto rollback version"
        },
        "computeRollbackVersion": {
          "type": "boolean",
          "title": "use the last converged version as the auto rollback version\nwill not do anything if the *latest* service config has auto rollback disabled"
        },
        "rollback": {
          "type": "boolean"
        },
        "delivery": {
          "$ref": "#/definitions/modelDeliveryState"
        }
      }
    },
    "desired_statemodelServiceState": {
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/desired_statemodelMetadata"
        },
        "application": {
          "type": "string"
        },
        "service": {
          "type": "string"
        },
        "serviceId": {
          "type": "string",
          "title": "set internally by prodvana"
        },
        "releaseChannels": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/desired_statemodelServiceInstanceState"
          }
        },
        "customTasks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelCustomTaskState"
          },
          "description": "Definitions for custom tasks used by this service. Must be empty if part of service group."
        },
        "deliveryExtensions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/desired_statemodelDeliveryExtensionState"
          }
        },
        "releaseChannelLabelSelectors": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelServiceInstanceLabelSelector"
          },
          "description": "in leau of listing out individual release channels, specify versions for release channels using label selectors instead.\nThis can only be used as input to SetDesiredState and will never be returned as output from a convergence summary."
        }
      }
    },
    "desired_statemodelStatus": {
      "type": "string",
      "enum": [
        "UNKNOWN_STATUS",
        "CONVERGING",
        "CONVERGED",
        "FAILED",
        "ROLLING_BACK",
        "ROLLED_BACK",
        "FAILED_ROLLBACK",
        "PAUSED",
        "CHILD_PAUSED",
        "WAITING_PRECONDITIONS",
        "REPLACED",
        "WAITING_MANUAL_APPROVAL",
        "DELETED",
        "PREVIEW",
        "PENDING_SET_DESIRED_STATE"
      ],
      "default": "UNKNOWN_STATUS",
      "title": "- CHILD_PAUSED: entity itself not paused, but one of its children is paused, so it is not making any progress\n - WAITING_PRECONDITIONS: Waiting for non-manual approval preconditions\n - WAITING_MANUAL_APPROVAL: Waiting only for manual approval\n - PREVIEW: status for all entities in a preview desired state. will never show up in a real desired state.\n - PENDING_SET_DESIRED_STATE: next tag: 15"
    },
    "desired_statemodelType": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "SERVICE",
        "SERVICE_INSTANCE",
        "SERVICE_GROUP",
        "RUNTIME_OBJECT",
        "MANUAL_APPROVAL",
        "CUSTOM_TASK",
        "PROTECTION_ATTACHMENT",
        "PROTECTION_LINK",
        "DELIVERY_EXTENSION"
      ],
      "default": "UNKNOWN"
    },
    "environmentClusterAuth": {
      "type": "object",
      "properties": {
        "ecs": {
          "$ref": "#/definitions/ClusterAuthECSAuth"
        },
        "k8s": {
          "$ref": "#/definitions/ClusterAuthK8sAuth"
        }
      }
    },
    "environmentClusterConfig": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "kubecost": {
          "$ref": "#/definitions/ClusterConfigKubecost"
        },
        "datadog": {
          "$ref": "#/definitions/ClusterConfigDatadog"
        },
        "albIngress": {
          "$ref": "#/definitions/ClusterConfigALBIngress"
        },
        "argoRollouts": {
          "$ref": "#/definitions/ClusterConfigArgoRollouts"
        },
        "gkeIngress": {
          "$ref": "#/definitions/ClusterConfigGKEIngress"
        },
        "selfManagedGkeIngress": {
          "$ref": "#/definitions/ClusterConfigGKEIngress",
          "title": "Self-Managed GKE Ingress - exposes configuration options for GKE Ingress\nbut does not create an ingress object for you"
        },
        "cloudProvider": {
          "$ref": "#/definitions/ClusterConfigCloudProvider"
        },
        "detectedClusterMetadata": {
          "$ref": "#/definitions/environmentClusterMetadata"
        },
        "userSuppliedClusterMetadata": {
          "$ref": "#/definitions/environmentClusterMetadata"
        },
        "fake": {
          "$ref": "#/definitions/environmentFakeClusterConfig",
          "title": "only used for fake runtimes"
        },
        "extension": {
          "$ref": "#/definitions/environmentExtensionClusterConfig",
          "title": "deprecated, use custom which means the same thing"
        },
        "custom": {
          "$ref": "#/definitions/environmentExtensionClusterConfig"
        },
        "terraformRunner": {
          "$ref": "#/definitions/environmentTerraformRunnerConfig",
          "title": "terraform runner is a runtime that runs terraform via k8s jobs"
        },
        "pulumiRunner": {
          "$ref": "#/definitions/environmentTerraformRunnerConfig",
          "title": "pulumi runner is a runtime that runs pulumi via k8s jobs"
        },
        "awsEcs": {
          "$ref": "#/definitions/prodvanaenvironmentAwsEcsConfig"
        },
        "googleCloudRun": {
          "$ref": "#/definitions/prodvanaenvironmentGoogleCloudRunConfig"
        },
        "labels": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/labelsLabelDefinition"
          }
        },
        "autoRollback": {
          "$ref": "#/definitions/common_configAutoRollbackConfig"
        }
      }
    },
    "environmentClusterMetadata": {
      "type": "object",
      "properties": {
        "gke": {
          "$ref": "#/definitions/environmentGKEClusterMetadata"
        }
      }
    },
    "environmentClusterType": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "K8S",
        "ECS",
        "FAKE",
        "EXTENSION",
        "TERRAFORM_RUNNER",
        "PULUMI_RUNNER",
        "AWS_ECS",
        "GOOGLE_CLOUD_RUN"
      ],
      "default": "UNKNOWN",
      "title": "- ECS: TODO(naphat) remove, this is legacy ecs implementation not based on runtime extension"
    },
    "environmentCompiledExtensionCommand": {
      "type": "object",
      "properties": {
        "namePrefix": {
          "type": "string"
        },
        "command": {
          "$ref": "#/definitions/CompiledExtensionCommandCompiledExtensionCommandExec",
          "title": "weird nesting for compatibility reasons, from before fetch and apply definitions were split"
        },
        "runtimeExecution": {
          "$ref": "#/definitions/runtimesRuntimeExecutionConfig"
        },
        "env": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/common_configEnvValue"
          }
        }
      }
    },
    "environmentConfigureClusterReq": {
      "type": "object",
      "properties": {
        "runtimeName": {
          "type": "string"
        },
        "config": {
          "$ref": "#/definitions/environmentClusterConfig"
        },
        "source": {
          "$ref": "#/definitions/versionSource"
        },
        "sourceMetadata": {
          "$ref": "#/definitions/versionSourceMetadata"
        }
      }
    },
    "environmentConfigureClusterResp": {
      "type": "object"
    },
    "environmentDeleteSecretResp": {
      "type": "object"
    },
    "environmentDeleteSecretVersionResp": {
      "type": "object"
    },
    "environmentDetectClusterConfigResp": {
      "type": "object",
      "properties": {
        "config": {
          "$ref": "#/definitions/environmentClusterConfig"
        }
      }
    },
    "environmentExtensionApplyCommand": {
      "type": "object",
      "properties": {
        "taskConfig": {
          "$ref": "#/definitions/prodvanacommon_configTaskConfig"
        },
        "kubernetesConfig": {
          "$ref": "#/definitions/common_configKubernetesConfig"
        },
        "timeout": {
          "type": "string",
          "title": "deprecated, not used"
        },
        "env": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/common_configEnvValue"
          },
          "title": "optional env variables to inject and override from exec_config"
        },
        "retryPolicy": {
          "$ref": "#/definitions/environmentRetryPolicy",
          "title": "used in conjunction with retryable_exit_codes, defaults to the convergence grace period"
        },
        "retryableExitCodes": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "description": "if set and the apply command returns these exit codes, retry the command without marking the result as failing."
        }
      }
    },
    "environmentExtensionClusterConfig": {
      "type": "object",
      "properties": {
        "apply": {
          "$ref": "#/definitions/environmentExtensionApplyCommand"
        },
        "fetch": {
          "$ref": "#/definitions/environmentExtensionFetchCommand"
        },
        "debug": {
          "$ref": "#/definitions/environmentExtensionGetInfoCommand",
          "title": "deprecated, set this as get_info instead"
        },
        "getInfo": {
          "$ref": "#/definitions/environmentExtensionGetInfoCommand"
        },
        "parameters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/common_configParameterDefinition"
          }
        },
        "proxyRuntime": {
          "$ref": "#/definitions/runtimesRuntimeExecutionConfig"
        },
        "type": {
          "$ref": "#/definitions/environmentExtensionType"
        },
        "requireApprovalBeforeApply": {
          "type": "boolean",
          "title": "Apply is potentially dangerous - require approval before each apply"
        },
        "convergenceGracePeriod": {
          "type": "string",
          "description": "How long after apply ran the first time should it be restarted if the service still has not converged.\nThis duration is computed from the *start* of apply run.\nDefaults to 10m.\n\nnext tag: 10"
        }
      }
    },
    "environmentExtensionFetchCommand": {
      "type": "object",
      "properties": {
        "taskConfig": {
          "$ref": "#/definitions/prodvanacommon_configTaskConfig"
        },
        "kubernetesConfig": {
          "$ref": "#/definitions/common_configKubernetesConfig"
        },
        "pollInterval": {
          "type": "string",
          "title": "customize intervals instead of using Prodvana default\nonly used for fetch\nhow often to run command after it succeeds"
        },
        "steadyStatePollInterval": {
          "type": "string",
          "title": "how often to fetch when in steady state (after the extension has converged)"
        },
        "timeout": {
          "type": "string",
          "title": "deprecated, not used"
        },
        "retryPolicy": {
          "$ref": "#/definitions/environmentRetryPolicy",
          "description": "retry policy for unexpected failures (this means exits other than 0 or 2 when fetch_mode = EXIT_CODE, or other than 0 for STRUCTURED_OUTPUT).\nif not set, regular, non-steady-state poll interval is used for fetches."
        },
        "env": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/common_configEnvValue"
          },
          "title": "optional env variables to inject and override from exec_config"
        },
        "fetchMode": {
          "$ref": "#/definitions/extensionsFetchMode",
          "title": "how to interpret the output of the command"
        }
      }
    },
    "environmentExtensionGetInfoCommand": {
      "type": "object",
      "properties": {
        "taskConfig": {
          "$ref": "#/definitions/prodvanacommon_configTaskConfig"
        },
        "kubernetesConfig": {
          "$ref": "#/definitions/common_configKubernetesConfig"
        },
        "pollInterval": {
          "type": "string",
          "title": "customize intervals instead of using Prodvana default\ndefaults to 5 minutes"
        },
        "retryPolicy": {
          "$ref": "#/definitions/environmentRetryPolicy",
          "title": "retry policy for unexpected failures.\ndefaults to fast retrying after 30s then backing off to 10 minutes"
        },
        "env": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/common_configEnvValue"
          },
          "title": "optional env variables to inject and override from exec_config"
        },
        "testOnlyDoNotRequirePvnWrapper": {
          "type": "boolean",
          "title": "exposed for internal testing. do not set"
        }
      }
    },
    "environmentExtensionType": {
      "type": "string",
      "enum": [
        "GENERIC",
        "TERRAFORM",
        "PULUMI",
        "AWS_ECS_EXTENSION",
        "GOOGLE_CLOUD_RUN_EXTENSION"
      ],
      "default": "GENERIC"
    },
    "environmentFakeClusterConfig": {
      "type": "object",
      "properties": {
        "crashingPrograms": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/FakeClusterConfigCrashingProgramPatterns"
          }
        }
      }
    },
    "environmentGKEClusterMetadata": {
      "type": "object",
      "properties": {
        "projectName": {
          "type": "string"
        },
        "clusterLocation": {
          "type": "string"
        },
        "clusterName": {
          "type": "string"
        }
      }
    },
    "environmentGetClusterAgentApiTokenResp": {
      "type": "object",
      "properties": {
        "apiToken": {
          "type": "string"
        }
      }
    },
    "environmentGetClusterAuthResp": {
      "type": "object",
      "properties": {
        "auth": {
          "$ref": "#/definitions/environmentClusterAuth"
        }
      }
    },
    "environmentGetClusterConfigResp": {
      "type": "object",
      "properties": {
        "config": {
          "$ref": "#/definitions/environmentClusterConfig"
        }
      }
    },
    "environmentGetClusterResp": {
      "type": "object",
      "properties": {
        "cluster": {
          "$ref": "#/definitions/ListClustersRespClusterInfo"
        }
      }
    },
    "environmentGetClusterStatusResp": {
      "type": "object",
      "properties": {
        "lastHeartbeatTimestamp": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "environmentIacRunnerCommand": {
      "type": "object",
      "properties": {
        "cmd": {
          "type": "string"
        }
      }
    },
    "environmentLinkClusterReq": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "auth": {
          "$ref": "#/definitions/environmentClusterAuth"
        },
        "type": {
          "$ref": "#/definitions/environmentClusterType"
        },
        "config": {
          "$ref": "#/definitions/environmentClusterConfig"
        },
        "source": {
          "$ref": "#/definitions/versionSource"
        },
        "sourceMetadata": {
          "$ref": "#/definitions/versionSourceMetadata"
        }
      }
    },
    "environmentLinkClusterResp": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "description": "LinkCluster will attempt to talk to the cluster to validate the\ncredentials. If it fails, want to communicate back what the failure was."
        },
        "msg": {
          "type": "string"
        },
        "clusterId": {
          "type": "string"
        },
        "k8sAgentUrl": {
          "type": "string",
          "title": "Magic URL to install agent"
        },
        "k8sAgentImage": {
          "type": "string",
          "title": "agent details broken out for externally constructing the agent configuration"
        },
        "k8sAgentArgs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "k8sAgentApiToken": {
          "type": "string"
        }
      }
    },
    "environmentListClustersResp": {
      "type": "object",
      "properties": {
        "clusters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ListClustersRespClusterInfo"
          }
        }
      }
    },
    "environmentListSecretVersionsResp": {
      "type": "object",
      "properties": {
        "versions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "environmentListSecretsResp": {
      "type": "object",
      "properties": {
        "secrets": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/common_configSecret"
          }
        }
      }
    },
    "environmentPauseClusterReq": {
      "type": "object",
      "properties": {
        "runtime": {
          "type": "string",
          "title": "name or id"
        }
      }
    },
    "environmentPauseClusterResp": {
      "type": "object"
    },
    "environmentRemoveClusterReq": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "TODO(mike): add an option to remove by cluster_id as well?"
        }
      }
    },
    "environmentRemoveClusterResp": {
      "type": "object"
    },
    "environmentResumeClusterReq": {
      "type": "object",
      "properties": {
        "runtime": {
          "type": "string",
          "title": "name or id"
        }
      }
    },
    "environmentResumeClusterResp": {
      "type": "object"
    },
    "environmentRetryPolicy": {
      "type": "object",
      "properties": {
        "baseInterval": {
          "type": "string"
        },
        "maxInterval": {
          "type": "string"
        }
      }
    },
    "environmentSetSecretReq": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "environmentSetSecretResp": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        }
      }
    },
    "environmentTerraformRunnerConfig": {
      "type": "object",
      "properties": {
        "proxyRuntime": {
          "$ref": "#/definitions/runtimesRuntimeExecutionConfig"
        },
        "env": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/common_configEnvValue"
          },
          "title": "optional env variables to pass to terraform commands, can be useful for passing secrets"
        },
        "volumes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/volumesVolume"
          },
          "title": "optional volumes to mount into terraform containers"
        },
        "preRun": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/environmentIacRunnerCommand"
          },
          "title": "commands that must run before terraform can run, e.g. gcloud auth login"
        },
        "pollInterval": {
          "type": "string",
          "description": "Poll interval for terraform plan when not converged, defaults to 5 minutes. Polling takes a lock on terraform state file, so increase this if you run terraform plan locally often."
        },
        "steadyStatePollInterval": {
          "type": "string",
          "description": "Poll interval for terraform plan in steady state (after it has converged), defaults to 1 hour. During steady state, polling is used for drift detection.\nThis is the min duration of time for which drift not being detected is OK."
        },
        "requireApprovalBeforeApply": {
          "type": "boolean",
          "description": "Require approval before every apply operation - this is on top of any release channel-level approvals."
        },
        "convergenceGracePeriod": {
          "type": "string"
        },
        "fetchRetryPolicy": {
          "$ref": "#/definitions/environmentRetryPolicy",
          "description": "override default retry policy. Default is min = 1m, max = 15m."
        },
        "applyRetryPolicy": {
          "$ref": "#/definitions/environmentRetryPolicy",
          "description": "override apply retry policy. Default is min = 30s, max = 5m."
        },
        "disableDriftDetection": {
          "type": "boolean",
          "description": "Skip drift detection. This is useful for faster convergence on updates, but can lead to drift going undetected.\nWhen enabled, steady state polling is turned off.\nNOTE: Only supported in Pulumi today.\n\nnext tag: 12"
        }
      }
    },
    "environmentValidateConfigureClusterResp": {
      "type": "object",
      "properties": {
        "inputConfig": {
          "$ref": "#/definitions/environmentClusterConfig"
        },
        "compiledConfig": {
          "$ref": "#/definitions/environmentClusterConfig"
        }
      }
    },
    "eventsApplicationHandle": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "eventsApplyTargetStateEvent": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/modelIdentifier"
        },
        "desiredStateId": {
          "type": "string"
        },
        "rootDesiredStateId": {
          "type": "string"
        },
        "target": {
          "$ref": "#/definitions/modelState",
          "title": "state that prodvana runtime will immediately converge towards"
        },
        "current": {
          "$ref": "#/definitions/modelState",
          "title": "current state for this entity before setting target state"
        },
        "isAutoRollback": {
          "type": "boolean",
          "title": "whether this is part of an automated rollback action"
        },
        "result": {
          "$ref": "#/definitions/ApplyTargetStateEventApplyResult"
        },
        "error": {
          "type": "string",
          "title": "set if result = FAILED"
        }
      }
    },
    "eventsAuditLogDebugEvent": {
      "type": "object",
      "properties": {
        "details": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "eventsCustomTaskExecutionEvent": {
      "type": "object",
      "properties": {
        "successful": {
          "type": "boolean"
        },
        "attempts": {
          "type": "integer",
          "format": "int32"
        },
        "reason": {
          "type": "string",
          "title": "Why did this job exit/fail?"
        }
      }
    },
    "eventsDeliveryManualPromotionEvent": {
      "type": "object",
      "properties": {
        "state": {
          "$ref": "#/definitions/modelDeliveryState"
        },
        "stage": {
          "type": "string",
          "format": "int64"
        },
        "full": {
          "type": "boolean"
        }
      }
    },
    "eventsDeliveryProgressEvent": {
      "type": "object",
      "properties": {
        "state": {
          "$ref": "#/definitions/modelDeliveryState"
        }
      }
    },
    "eventsDesiredStateStatusChangeEvent": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/modelIdentifier"
        },
        "desiredStateId": {
          "type": "string"
        },
        "rootDesiredStateId": {
          "type": "string"
        },
        "oldStatus": {
          "$ref": "#/definitions/desired_statemodelStatus"
        },
        "newStatus": {
          "$ref": "#/definitions/desired_statemodelStatus"
        },
        "desired": {
          "$ref": "#/definitions/modelState"
        },
        "target": {
          "$ref": "#/definitions/modelState"
        },
        "oldState": {
          "$ref": "#/definitions/modelState"
        },
        "newState": {
          "$ref": "#/definitions/modelState"
        },
        "statusExplanations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelStatusExplanation"
          }
        }
      }
    },
    "eventsEvent": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/eventsEventType"
        },
        "title": {
          "type": "string"
        },
        "details": {
          "$ref": "#/definitions/eventsEventDetails"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "relatedObjects": {
          "$ref": "#/definitions/eventsRelatedObjects"
        },
        "actor": {
          "type": "string"
        }
      }
    },
    "eventsEventDetails": {
      "type": "object",
      "properties": {
        "setDesiredState": {
          "$ref": "#/definitions/eventsSetDesiredStateEvent"
        },
        "setTargetState": {
          "$ref": "#/definitions/eventsSetTargetStateEvent"
        },
        "programExit": {
          "$ref": "#/definitions/eventsProgramExitEvent"
        },
        "applyTargetState": {
          "$ref": "#/definitions/eventsApplyTargetStateEvent"
        },
        "manualApproval": {
          "$ref": "#/definitions/eventsManualApprovalEvent"
        },
        "customTaskExecution": {
          "$ref": "#/definitions/eventsCustomTaskExecutionEvent"
        },
        "runtimeUpdate": {
          "$ref": "#/definitions/eventsRuntimeUpdateEvent"
        },
        "deliveryProgress": {
          "$ref": "#/definitions/eventsDeliveryProgressEvent"
        },
        "deliveryPromotion": {
          "$ref": "#/definitions/eventsDeliveryManualPromotionEvent"
        },
        "desiredStateStatusChange": {
          "$ref": "#/definitions/eventsDesiredStateStatusChangeEvent"
        },
        "keyDeliveryDecision": {
          "$ref": "#/definitions/eventsKeyDeliveryDecisionEvent"
        },
        "rpcCall": {
          "$ref": "#/definitions/eventsRpcCallEvent"
        },
        "permissionDenied": {
          "$ref": "#/definitions/eventsPermissionDeniedEvent"
        },
        "objectCreated": {
          "$ref": "#/definitions/eventsObjectCreatedEvent"
        },
        "objectDeleted": {
          "$ref": "#/definitions/eventsObjectDeletedEvent"
        },
        "objectModified": {
          "$ref": "#/definitions/eventsObjectModifiedEvent"
        },
        "kubectlCmd": {
          "$ref": "#/definitions/eventsKubectlCmdEvent"
        },
        "auditLogDebug": {
          "$ref": "#/definitions/eventsAuditLogDebugEvent"
        }
      }
    },
    "eventsEventType": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "SET_DESIRED_STATE",
        "SET_TARGET_STATE",
        "PROGRAM_EXIT",
        "APPLY_TARGET_STATE",
        "MANUAL_APPROVAL",
        "CUSTOM_TASK_EXECUTION",
        "RUNTIME_UPDATE",
        "DELIVERY_PROGRESS",
        "DELIVERY_MANUAL_PROMOTION",
        "DESIRED_STATE_STATUS_CHANGE",
        "KEY_DELIVERY_DECISION",
        "RPC_CALL",
        "PERMISSON_DENIED",
        "OBJECT_CREATED",
        "OBJECT_DELETED",
        "OBJECT_MODIFIED",
        "KUBECTL_CMD",
        "AUDIT_LOG_DEBUG"
      ],
      "default": "UNKNOWN",
      "description": " - SET_DESIRED_STATE: when a user sets a new desired state\n - SET_TARGET_STATE: when dyanmic delivery sets a new target state as part of convergence. A desired state convergence\ninvolves a series of SET_TARGET_STATE event, one per each entity managed as part of convergence.\n - APPLY_TARGET_STATE: When dynamic delivery materializes a target state to physical infrastructure as part of convergence.\nEach SET_TARGET_STATE is followed by one or more APPLY_TARGET_STATE, unless convergence is aborted.\n - RUNTIME_UPDATE: generic runtime events when more specific event types are not available.\n - AUDIT_LOG_DEBUG: a generic event type for submitting an audit log only event\nwithout creating an explicit event type for it.\nThis should only be used for short lived logs. If the log will\nbe around for a long time, it should be elevated to a proper event type."
    },
    "eventsGetEventsReq": {
      "type": "object",
      "properties": {
        "lookups": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/eventsLookup"
          }
        },
        "types": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/eventsEventType"
          },
          "title": "empty means to include all types"
        },
        "pageToken": {
          "type": "string"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "orderByAscTimestamp": {
          "type": "boolean"
        },
        "useOr": {
          "type": "boolean"
        },
        "beforeTimestamp": {
          "type": "string",
          "format": "date-time"
        },
        "afterTimestamp": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "eventsGetEventsResp": {
      "type": "object",
      "properties": {
        "events": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/eventsEvent"
          }
        },
        "nextPageToken": {
          "type": "string"
        }
      }
    },
    "eventsKeyDeliveryDecisionEvent": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/modelIdentifier"
        },
        "desiredStateId": {
          "type": "string"
        },
        "rootDesiredStateId": {
          "type": "string"
        },
        "decision": {
          "$ref": "#/definitions/KeyDeliveryDecisionEventDecision"
        },
        "explanation": {
          "type": "string",
          "title": "optional, may not always be set. when not set, the context should be obvious from status_explanations"
        },
        "status": {
          "$ref": "#/definitions/desired_statemodelStatus"
        },
        "desired": {
          "$ref": "#/definitions/modelState"
        },
        "target": {
          "$ref": "#/definitions/modelState"
        },
        "current": {
          "$ref": "#/definitions/modelState"
        },
        "statusExplanations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelStatusExplanation"
          }
        }
      }
    },
    "eventsKubectlCmdEvent": {
      "type": "object",
      "properties": {
        "runtime": {
          "type": "string"
        },
        "args": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "exitCode": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "eventsLookup": {
      "type": "object",
      "properties": {
        "rootDesiredStateId": {
          "type": "string"
        },
        "desiredStateId": {
          "type": "string"
        },
        "service": {
          "$ref": "#/definitions/eventsServiceLookup"
        },
        "releaseChannel": {
          "$ref": "#/definitions/eventsReleaseChannelLookup"
        },
        "releaseId": {
          "type": "string"
        }
      }
    },
    "eventsManualApprovalEvent": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/modelManualApprovalStatus",
          "title": "Approved/rejected?"
        },
        "topic": {
          "type": "string",
          "description": "Actor etc ..."
        }
      }
    },
    "eventsObjectCreatedEvent": {
      "type": "object",
      "properties": {
        "configVersion": {
          "type": "string"
        },
        "application": {
          "$ref": "#/definitions/eventsApplicationHandle"
        },
        "releaseChannel": {
          "$ref": "#/definitions/eventsReleaseChannelHandle"
        },
        "service": {
          "$ref": "#/definitions/eventsServiceHandle"
        },
        "runtime": {
          "$ref": "#/definitions/eventsRuntimeHandle"
        },
        "protection": {
          "$ref": "#/definitions/eventsProtectionHandle"
        }
      }
    },
    "eventsObjectDeletedEvent": {
      "type": "object",
      "properties": {
        "configVersion": {
          "type": "string"
        },
        "application": {
          "$ref": "#/definitions/eventsApplicationHandle"
        },
        "releaseChannel": {
          "$ref": "#/definitions/eventsReleaseChannelHandle"
        },
        "service": {
          "$ref": "#/definitions/eventsServiceHandle"
        },
        "runtime": {
          "$ref": "#/definitions/eventsRuntimeHandle"
        },
        "protection": {
          "$ref": "#/definitions/eventsProtectionHandle"
        }
      }
    },
    "eventsObjectModifiedEvent": {
      "type": "object",
      "properties": {
        "oldConfigVersion": {
          "type": "string"
        },
        "newConfigVersion": {
          "type": "string"
        },
        "application": {
          "$ref": "#/definitions/eventsApplicationHandle"
        },
        "releaseChannel": {
          "$ref": "#/definitions/eventsReleaseChannelHandle"
        },
        "service": {
          "$ref": "#/definitions/eventsServiceHandle"
        },
        "runtime": {
          "$ref": "#/definitions/eventsRuntimeHandle"
        },
        "protection": {
          "$ref": "#/definitions/eventsProtectionHandle"
        }
      }
    },
    "eventsPermissionDeniedEvent": {
      "type": "object",
      "properties": {
        "action": {
          "$ref": "#/definitions/PermissionDeniedEventAction"
        },
        "application": {
          "$ref": "#/definitions/eventsApplicationHandle"
        },
        "releaseChannel": {
          "$ref": "#/definitions/eventsReleaseChannelHandle"
        },
        "service": {
          "$ref": "#/definitions/eventsServiceHandle"
        },
        "runtime": {
          "$ref": "#/definitions/eventsRuntimeHandle"
        },
        "protection": {
          "$ref": "#/definitions/eventsProtectionHandle"
        }
      }
    },
    "eventsProgramExitEvent": {
      "type": "object",
      "properties": {
        "namespace": {
          "type": "string"
        },
        "pod": {
          "type": "string"
        },
        "program": {
          "type": "string",
          "title": "in k8s, this is container name"
        },
        "restartCount": {
          "type": "integer",
          "format": "int32"
        },
        "reason": {
          "type": "string",
          "title": "reason why process exited"
        },
        "killedReason": {
          "type": "string",
          "title": "if killed, this is the reason why it was killed (best effort)"
        },
        "exitCode": {
          "type": "integer",
          "format": "int32",
          "description": "if 0, this is a successful exit."
        },
        "signal": {
          "type": "integer",
          "format": "int32",
          "title": "signal used to terminate this process, if any"
        },
        "structuredOutput": {
          "$ref": "#/definitions/pvn_wrapperOutput",
          "title": "optional structured output, if the process exited with a schema compatible with pvn_wrapper's structured output"
        }
      }
    },
    "eventsProtectionHandle": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "eventsRelatedObjects": {
      "type": "object",
      "properties": {
        "applicationId": {
          "type": "string"
        },
        "serviceId": {
          "type": "string"
        },
        "releaseChannelId": {
          "type": "string"
        },
        "desiredStateId": {
          "type": "string"
        },
        "rootDesiredStateId": {
          "type": "string"
        },
        "releaseId": {
          "type": "string"
        },
        "runtimeId": {
          "type": "string"
        },
        "externalLogs": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "next tag: 9"
        }
      }
    },
    "eventsReleaseChannelHandle": {
      "type": "object",
      "properties": {
        "application": {
          "$ref": "#/definitions/eventsApplicationHandle"
        },
        "name": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "eventsReleaseChannelLookup": {
      "type": "object",
      "properties": {
        "application": {
          "type": "string"
        },
        "releaseChannel": {
          "type": "string"
        }
      }
    },
    "eventsRpcCallEvent": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/eventsRpcCallEventType"
        },
        "rpcService": {
          "type": "string"
        },
        "rpcMethod": {
          "type": "string"
        },
        "request": {
          "$ref": "#/definitions/protobufAny"
        },
        "response": {
          "$ref": "#/definitions/protobufAny"
        }
      }
    },
    "eventsRpcCallEventType": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "READ",
        "WRITE"
      ],
      "default": "UNKNOWN"
    },
    "eventsRuntimeHandle": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "eventsRuntimeUpdateEvent": {
      "type": "object",
      "properties": {
        "action": {
          "$ref": "#/definitions/RuntimeUpdateEventRuntimeAction"
        },
        "object": {
          "$ref": "#/definitions/prodvanaeventsRuntimeObject"
        },
        "status": {
          "$ref": "#/definitions/RuntimeUpdateEventRuntimeStatus"
        }
      }
    },
    "eventsServiceHandle": {
      "type": "object",
      "properties": {
        "application": {
          "$ref": "#/definitions/eventsApplicationHandle"
        },
        "releaseChannel": {
          "$ref": "#/definitions/eventsReleaseChannelHandle"
        },
        "name": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "eventsServiceLookup": {
      "type": "object",
      "properties": {
        "application": {
          "type": "string"
        },
        "service": {
          "type": "string"
        }
      }
    },
    "eventsSetDesiredStateEvent": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/modelIdentifier"
        },
        "desiredStateId": {
          "type": "string"
        },
        "rootDesiredStateId": {
          "type": "string"
        },
        "desired": {
          "$ref": "#/definitions/modelState"
        },
        "isRollback": {
          "type": "boolean"
        }
      }
    },
    "eventsSetTargetStateEvent": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/modelIdentifier"
        },
        "desiredStateId": {
          "type": "string"
        },
        "rootDesiredStateId": {
          "type": "string"
        },
        "target": {
          "$ref": "#/definitions/modelState",
          "title": "state that prodvana runtime will immediately converge towards"
        },
        "desired": {
          "$ref": "#/definitions/modelState",
          "title": "final desired state that this entity should eventually get to"
        },
        "current": {
          "$ref": "#/definitions/modelState",
          "title": "current state for this entity before setting target state"
        },
        "isAutoRollback": {
          "type": "boolean",
          "title": "whether this is part of an automated rollback action"
        },
        "status": {
          "$ref": "#/definitions/desired_statemodelStatus",
          "title": "status and explanations at the time of SetTargetState"
        },
        "statusExplanations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelStatusExplanation"
          }
        }
      }
    },
    "extensionsExternalObject": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "objectType": {
          "type": "string"
        },
        "versions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/extensionsExternalObjectVersion"
          }
        },
        "status": {
          "$ref": "#/definitions/extensionsExternalObjectStatus"
        },
        "externalLinks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/common_configExternalLink"
          }
        }
      }
    },
    "extensionsExternalObjectStatus": {
      "type": "string",
      "enum": [
        "PENDING",
        "SUCCEEDED",
        "FAILED"
      ],
      "default": "PENDING"
    },
    "extensionsExternalObjectVersion": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "replicas": {
          "type": "integer",
          "format": "int32",
          "title": "Created/running replicas, can be in any state"
        },
        "availableReplicas": {
          "type": "integer",
          "format": "int32",
          "description": "Replicas which have passed healthchecks for required duration."
        },
        "targetReplicas": {
          "type": "integer",
          "format": "int32",
          "title": "How many replicas are supposed to be spun up, if known"
        },
        "active": {
          "type": "boolean"
        },
        "drifted": {
          "type": "boolean",
          "title": "next tag: 7"
        }
      }
    },
    "extensionsFetchMode": {
      "type": "string",
      "enum": [
        "UNKNOWN_FETCH_MODE",
        "EXIT_CODE",
        "STRUCTURED_OUTPUT"
      ],
      "default": "UNKNOWN_FETCH_MODE",
      "title": "- EXIT_CODE: fetch will either exit 0 or 2 to indicate drift\n - STRUCTURED_OUTPUT: fetch will return structured output via stdout"
    },
    "googlerpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "impact_analysisImpactAnalysisResult": {
      "type": "object",
      "properties": {
        "category": {
          "$ref": "#/definitions/impact_analysisImpactCategory"
        },
        "incidentType": {
          "$ref": "#/definitions/impact_analysisIncidentType"
        },
        "impactScore": {
          "type": "number",
          "format": "double"
        },
        "impactReasoning": {
          "type": "string"
        },
        "likelihoodScore": {
          "type": "number",
          "format": "double"
        },
        "likelihoodReasoning": {
          "type": "string"
        },
        "overallScore": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "impact_analysisImpactCategory": {
      "type": "string",
      "enum": [
        "UNKNOWN_CATEGORY",
        "BACKEND",
        "FRONTEND",
        "DATA_INTEGRITY",
        "SECURITY",
        "COST",
        "PRODVANA_INTERNAL_ERROR"
      ],
      "default": "UNKNOWN_CATEGORY",
      "title": "- PRODVANA_INTERNAL_ERROR: Prodvana is having trouble determining the impact of this commit"
    },
    "impact_analysisIncidentType": {
      "type": "string",
      "enum": [
        "UNKNOWN_INCIDENT",
        "OUTAGE",
        "EXPENSE",
        "SECURITY_BREACH",
        "USER_ISSUE"
      ],
      "default": "UNKNOWN_INCIDENT"
    },
    "insightsClass": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "SUCCESSFUL_DEPLOYMENT_FREQUENCY_DECREASE",
        "DEPLOYMENT_FAILURE_RATE_INCREASE",
        "MEDIAN_SUCCESSFUL_DEPLOYMENT_DURATION_INCREASE",
        "MEDIAN_SUCCESSFUL_ROLLBACK_DURATION_INCREASE"
      ],
      "default": "UNKNOWN"
    },
    "insightsInsight": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "class": {
          "$ref": "#/definitions/insightsClass"
        },
        "service": {
          "$ref": "#/definitions/InsightSubject"
        },
        "application": {
          "$ref": "#/definitions/InsightSubject"
        },
        "organization": {
          "$ref": "#/definitions/InsightSubject"
        }
      }
    },
    "labelsLabelDefinition": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "maestroMaestroConfig": {
      "type": "object",
      "properties": {
        "strategy": {
          "$ref": "#/definitions/maestroStrategy"
        }
      }
    },
    "maestroMaestroRelease": {
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/objectObjectMeta"
        },
        "config": {
          "$ref": "#/definitions/maestroMaestroReleaseConfig"
        },
        "state": {
          "$ref": "#/definitions/maestroMaestroReleaseState"
        }
      }
    },
    "maestroMaestroReleaseConfig": {
      "type": "object",
      "properties": {
        "entityId": {
          "$ref": "#/definitions/modelIdentifier"
        },
        "maestroConfig": {
          "$ref": "#/definitions/maestroMaestroConfig"
        },
        "inputDesiredState": {
          "$ref": "#/definitions/modelState"
        },
        "compiledDesiredState": {
          "$ref": "#/definitions/modelState"
        },
        "creationTimestamp": {
          "type": "string",
          "format": "date-time"
        },
        "setDesiredStateMetadata": {
          "$ref": "#/definitions/modelSetDesiredStateMetadata",
          "title": "next tag: 7"
        }
      }
    },
    "maestroMaestroReleaseState": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/desired_statemaestroStatus"
        },
        "lastUpdateTimestamp": {
          "type": "string",
          "format": "date-time"
        },
        "releaseChannelStatuses": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/desired_statemaestroStatus"
          },
          "title": "status by release channel id"
        }
      }
    },
    "maestroStrategy": {
      "type": "string",
      "enum": [
        "UNKNOWN_STRATEGY",
        "OVERWRITE",
        "ON_STABLE",
        "MAESTRO_DISABLED"
      ],
      "default": "UNKNOWN_STRATEGY"
    },
    "managed_resourceConfigureK8sClusterReq": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "gcpOptions": {
          "$ref": "#/definitions/ConfigureK8sClusterReqGcpOptions"
        },
        "eksOptions": {
          "$ref": "#/definitions/ConfigureK8sClusterReqEKSOptions"
        },
        "instanceType": {
          "type": "string"
        },
        "nodepoolZones": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "nodeCountPerZone": {
          "type": "integer",
          "format": "int32"
        },
        "region": {
          "type": "string"
        }
      }
    },
    "managed_resourceConfigureK8sClusterResp": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "runId": {
          "type": "string",
          "format": "date-time"
        },
        "version": {
          "type": "string"
        },
        "archiveUrl": {
          "type": "string",
          "title": "TODO(naphat) delete archive_url once we automate pulumi runs"
        }
      }
    },
    "managed_resourceDeleteManagedResourceResp": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "resource ID and run ID, which can be used in conjunction with GetManagedResource to track\nstatus of deletion."
        },
        "runId": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "managed_resourceGetArchiveResp": {
      "type": "object",
      "properties": {
        "bytes": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "managed_resourceGetManagedResourceResp": {
      "type": "object",
      "properties": {
        "managedResource": {
          "$ref": "#/definitions/managed_resourceManagedResource"
        }
      }
    },
    "managed_resourceListManagedResourcesResp": {
      "type": "object",
      "properties": {
        "managedResources": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/managed_resourceManagedResource"
          }
        }
      }
    },
    "managed_resourceManagedResource": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "latestRun": {
          "$ref": "#/definitions/ManagedResourceRun"
        }
      }
    },
    "managed_resourceMarkRunDoneResp": {
      "type": "object"
    },
    "metricsCost": {
      "type": "object",
      "properties": {
        "configured": {
          "type": "boolean"
        },
        "cost": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "metricsDeploymentMetrics": {
      "type": "object",
      "properties": {
        "values": {
          "$ref": "#/definitions/DeploymentMetricsValues"
        },
        "timeseries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/DeploymentMetricsTimeseriesMetrics"
          }
        },
        "deltas": {
          "$ref": "#/definitions/DeploymentMetricsDeltas"
        }
      }
    },
    "modelActionExplanation": {
      "type": "object",
      "properties": {
        "ts": {
          "type": "string",
          "format": "date-time"
        },
        "actionType": {
          "$ref": "#/definitions/modelActionType"
        },
        "message": {
          "type": "string"
        }
      },
      "title": "What action is DD taking now?"
    },
    "modelActionType": {
      "type": "string",
      "enum": [
        "ACTION_TYPE_UNKNOWN",
        "ACTION_TYPE_APPLYING",
        "ACTION_TYPE_APPLIED",
        "ACTION_TYPE_COMPLETE"
      ],
      "default": "ACTION_TYPE_UNKNOWN",
      "description": " - ACTION_TYPE_APPLYING: DD is currently apply target state - if its doing this for too long, probably means apply is stuck.\n - ACTION_TYPE_APPLIED: DD has applied target state - waiting for object to converge.\n - ACTION_TYPE_COMPLETE: Reached terminal state - DD is doing nothing further."
    },
    "modelAnnotations": {
      "type": "object",
      "properties": {
        "annotations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelAnnotationsAnnotation"
          }
        }
      }
    },
    "modelAnnotationsAnnotation": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "modelApplyDetails": {
      "type": "object",
      "properties": {
        "startedTimestamp": {
          "type": "string",
          "format": "date-time",
          "title": "when the apply job started"
        },
        "completedTimestamp": {
          "type": "string",
          "format": "date-time",
          "title": "when the apply job completed"
        },
        "version": {
          "type": "string",
          "title": "the version of the service associated with this apply run"
        },
        "applyStatus": {
          "$ref": "#/definitions/ApplyDetailsApplyStatus"
        },
        "fetchDetails": {
          "$ref": "#/definitions/modelFetchDetails",
          "title": "the fetch details used for this particular apply, including any plan id"
        }
      }
    },
    "modelCanaryProgressState": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/modelCanaryProgressStateStatus"
        },
        "canaryWeight": {
          "type": "integer",
          "format": "int32",
          "title": "current canary weight"
        },
        "duration": {
          "type": "string",
          "title": "pause duration at this weight before advancing"
        },
        "pauseStartTimestamp": {
          "type": "string",
          "format": "date-time",
          "title": "when status = PAUSED this indicates when the pause started"
        }
      }
    },
    "modelCanaryProgressStateStatus": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "PENDING",
        "PAUSED",
        "COMPLETED"
      ],
      "default": "UNKNOWN"
    },
    "modelCondition": {
      "type": "object",
      "properties": {
        "rcCond": {
          "$ref": "#/definitions/ConditionReleaseChannelStableCondition"
        },
        "manualApproval": {
          "$ref": "#/definitions/modelConditionManualApproval"
        },
        "customTask": {
          "$ref": "#/definitions/ConditionCustomTaskSuccessfulCondition"
        },
        "desiredStateId": {
          "type": "string",
          "description": "Generated during SetDesiredState.\nDo not set as part of input unless reusing an existing precondition, e.g., patching an existing desired state without regenerating some preconditions."
        }
      }
    },
    "modelConditionManualApproval": {
      "type": "object",
      "properties": {
        "topic": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "modelConditionState": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/modelConditionStatus"
        }
      }
    },
    "modelConditionStatus": {
      "type": "string",
      "enum": [
        "CONDITION_UNKNOWN_STATUS",
        "CONDITION_PENDING",
        "CONDITION_SATISFIED",
        "CONDITION_MANUALLY_BYPASSED",
        "CONDITION_FAILED"
      ],
      "default": "CONDITION_UNKNOWN_STATUS"
    },
    "modelCustomTaskExecutionState": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/modelCustomTaskStatus"
        },
        "attempts": {
          "type": "string",
          "format": "int64"
        },
        "latestAttemptEndTimestamp": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "modelCustomTaskState": {
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/desired_statemodelMetadata"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "application": {
          "type": "string"
        },
        "applicationId": {
          "type": "string"
        },
        "releaseChannel": {
          "type": "string"
        },
        "releaseChannelId": {
          "type": "string"
        },
        "program": {
          "$ref": "#/definitions/common_configProgramConfig"
        },
        "taskState": {
          "$ref": "#/definitions/modelCustomTaskExecutionState"
        },
        "retryConfig": {
          "$ref": "#/definitions/common_configRetryConfig",
          "description": "if not set, the custom task will not be retried once it starts executing once."
        },
        "serviceIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "modelCustomTaskStatus": {
      "type": "string",
      "enum": [
        "CUSTOM_TASK_PENDING",
        "CUSTOM_TASK_SUCCESSFUL",
        "CUSTOM_TASK_RETRIES_EXHAUSTED",
        "CUSTOM_TASK_TIMED_OUT"
      ],
      "default": "CUSTOM_TASK_PENDING"
    },
    "modelCustomTaskType": {
      "type": "string",
      "enum": [
        "CUSTOM_TASK_TYPE_UNKNOWN",
        "PRE_APPROVAL_TASK",
        "APPROVAL",
        "POST_APPROVAL_TASK",
        "DEPLOYMENT_TASK",
        "POST_DEPLOYMENT_TASK"
      ],
      "default": "CUSTOM_TASK_TYPE_UNKNOWN",
      "description": " - PRE_APPROVAL_TASK: Runs before everything else. May wait for any dependent RCs to be stable.\n - APPROVAL: Approval tasks, manual or automated. Must wait for all PRE_APPROVAL_TASK to be satisfied.\n - POST_APPROVAL_TASK: Runs after approval, just before service push.\n - DEPLOYMENT_TASK: Runs as long as service push is in progress.\n - POST_DEPLOYMENT_TASK: Runs after service push succeeds (pods are replaced and healthy, ...), before declaring the service CONVERGED."
    },
    "modelDebugLog": {
      "type": "object",
      "properties": {
        "ts": {
          "type": "string",
          "format": "date-time"
        },
        "log": {
          "type": "string"
        }
      }
    },
    "modelDeliveryState": {
      "type": "object",
      "properties": {
        "desiredStateId": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/modelDeliveryStateStatus",
          "title": "overall delivery status"
        },
        "message": {
          "type": "string",
          "title": "human readable message from the delivery controller"
        },
        "canaryProgress": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelCanaryProgressState"
          },
          "title": "current state of all Canary progression"
        },
        "firstRun": {
          "type": "boolean"
        },
        "generation": {
          "type": "string",
          "description": "string unique to each PD controller convergence,\ne.g. when Argo Rollouts starts a new rollout, this will change."
        }
      }
    },
    "modelDeliveryStateStatus": {
      "type": "string",
      "enum": [
        "STATUS_UNKNOWN",
        "STATUS_PROGRESSING",
        "STATUS_PAUSED",
        "STATUS_HEALTHY",
        "STATUS_UNHEALTHY"
      ],
      "default": "STATUS_UNKNOWN"
    },
    "modelEntity": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/modelIdentifier"
        },
        "desiredStateId": {
          "type": "string"
        },
        "rootDesiredStateId": {
          "type": "string"
        },
        "annotations": {
          "$ref": "#/definitions/modelAnnotations"
        },
        "status": {
          "$ref": "#/definitions/desired_statemodelStatus"
        },
        "simpleStatus": {
          "$ref": "#/definitions/modelSimpleStatus"
        },
        "startingState": {
          "$ref": "#/definitions/modelState"
        },
        "lastSeenState": {
          "$ref": "#/definitions/modelState"
        },
        "desiredState": {
          "$ref": "#/definitions/modelState",
          "title": "the state we want to get to before calling convergence complete"
        },
        "targetState": {
          "$ref": "#/definitions/modelState",
          "title": "the state we are actually going to apply. when preconditions are met, target state = desired state, otherwise, target state = previous desired state"
        },
        "preconditionStatuses": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelConditionState"
          }
        },
        "statusExplanations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelStatusExplanation"
          }
        },
        "logs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelDebugLog"
          }
        },
        "actionExplanation": {
          "$ref": "#/definitions/modelActionExplanation"
        },
        "lastUpdateTimestamp": {
          "type": "string",
          "format": "date-time",
          "title": "when the entity state last changed"
        },
        "lastFetchedTimestamp": {
          "type": "string",
          "format": "date-time",
          "title": "when prodvana last fetched entity state, best effort"
        },
        "lastAppliedTimestamp": {
          "type": "string",
          "format": "date-time",
          "title": "when prodvana last applied state for this entity, best effort"
        },
        "dependencies": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelIdentifier"
          }
        },
        "lifecycle": {
          "$ref": "#/definitions/common_configTaskLifecycle"
        },
        "missingApproval": {
          "$ref": "#/definitions/modelMissingApproval",
          "title": "next tag: 21"
        }
      }
    },
    "modelEntityGraph": {
      "type": "object",
      "properties": {
        "root": {
          "$ref": "#/definitions/modelIdentifier"
        },
        "entities": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelEntity"
          }
        }
      }
    },
    "modelFetchDetails": {
      "type": "object",
      "properties": {
        "startedTimestamp": {
          "type": "string",
          "format": "date-time",
          "title": "when the fetch job started"
        },
        "completedTimestamp": {
          "type": "string",
          "format": "date-time",
          "title": "when the fetch job completed"
        },
        "fetchPlanBlobId": {
          "type": "string",
          "description": "optional",
          "title": "for fetch commands that return a plan, this is the plan blob id"
        },
        "fetchPlanExplanationBlobId": {
          "type": "string",
          "description": "optional",
          "title": "additionally, for fetch commands that return a plan with a separate explanation text, this is the explanation blob id"
        },
        "version": {
          "type": "string",
          "title": "the version of the service associated with this fetch run"
        },
        "fetchStatus": {
          "$ref": "#/definitions/FetchDetailsFetchStatus"
        },
        "fetcherDesiredStateId": {
          "type": "string"
        },
        "message": {
          "type": "string",
          "title": "freeform message from the convergence engine explaining the fetch result"
        },
        "fetchMode": {
          "$ref": "#/definitions/extensionsFetchMode"
        }
      }
    },
    "modelFetchTaskStartDetails": {
      "type": "object",
      "properties": {
        "fetchMode": {
          "$ref": "#/definitions/extensionsFetchMode"
        }
      },
      "title": "metadata about how a RuntimeExtension fetch task was started"
    },
    "modelIdentifier": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/desired_statemodelType"
        },
        "name": {
          "type": "string",
          "title": "globally unique identifier"
        }
      }
    },
    "modelManualApprovalState": {
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/desired_statemodelMetadata"
        },
        "status": {
          "$ref": "#/definitions/modelManualApprovalStatus"
        },
        "topic": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "modelManualApprovalStatus": {
      "type": "string",
      "enum": [
        "PENDING",
        "APPROVED",
        "REJECTED"
      ],
      "default": "PENDING"
    },
    "modelMissingApproval": {
      "type": "object",
      "properties": {
        "desiredStateId": {
          "type": "string"
        },
        "signalType": {
          "$ref": "#/definitions/modelSignalType"
        },
        "topic": {
          "type": "string"
        },
        "runtimeExtension": {
          "$ref": "#/definitions/modelRuntimeExtensionMetadata"
        },
        "current": {
          "type": "boolean"
        }
      }
    },
    "modelProtectionAttachmentDefinition": {
      "type": "object",
      "properties": {
        "protectionId": {
          "type": "string"
        },
        "attachmentId": {
          "type": "string"
        },
        "protectionVersion": {
          "type": "string",
          "title": "next tag: 4"
        }
      }
    },
    "modelProtectionLinkState": {
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/desired_statemodelMetadata"
        },
        "attachmentName": {
          "type": "string"
        },
        "lastSeenAttachmentStatus": {
          "$ref": "#/definitions/desired_statemodelStatus",
          "title": "status of the attachment, used to compute link status"
        },
        "status": {
          "$ref": "#/definitions/modelConditionStatus",
          "title": "status of the link"
        },
        "link": {
          "$ref": "#/definitions/desired_statemodelProtectionLink",
          "description": "Copy of ProtectionLink description. Used in FetchState to know retries, durations etc."
        },
        "startedTimestamp": {
          "type": "string",
          "format": "date-time",
          "description": "When did we start polling this protection? If not set, this protection has not started polling."
        },
        "stoppedTimestamp": {
          "type": "string",
          "format": "date-time",
          "description": "When did we stop polling this protection? If set, this protection will no longer change status (except to be manually bypassed)."
        },
        "stoppedReason": {
          "$ref": "#/definitions/ProtectionLinkStateStopReason"
        },
        "firstSuccessTimestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Will be set the first time this attachment returned success.\nUseful for time-based protections (post-push - check X succeeds for N mins). We make the ProtectionLink return CONVERGING till time expires."
        }
      }
    },
    "modelRuntimeExtensionApplyOutput": {
      "type": "object",
      "properties": {
        "ongoingApply": {
          "$ref": "#/definitions/modelApplyDetails",
          "title": "details of an actively executing apply, may be null if no apply is currently executing"
        },
        "lastApply": {
          "$ref": "#/definitions/modelApplyDetails",
          "title": "details of the last apply that completed, may be null if no apply has ever executed"
        }
      }
    },
    "modelRuntimeExtensionFetchOutput": {
      "type": "object",
      "properties": {
        "ongoingFetch": {
          "$ref": "#/definitions/modelFetchDetails",
          "title": "details of an actively executing fetch, may be null if no fetch is currently executing"
        },
        "lastSuccessfulFetch": {
          "$ref": "#/definitions/modelFetchDetails",
          "title": "details of the last fetch that completed successfully (as in, either DRIFTED or CONVERGED), may be null if no fetch has ever executed"
        },
        "lastFailedFetch": {
          "$ref": "#/definitions/modelFetchDetails",
          "description": "if the latest completed fetch is FAILED, then it is stored here.\nif the latest completed fetch is not FAILED, then this is null."
        }
      }
    },
    "modelRuntimeExtensionGetInfoDetails": {
      "type": "object",
      "properties": {
        "systemMessage": {
          "type": "string",
          "title": "system message generated by prodvana"
        },
        "contents": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelRuntimeExtensionGetInfoOutputContent"
          },
          "title": "output from user process"
        },
        "status": {
          "$ref": "#/definitions/modelRuntimeExtensionGetInfoDetailsStatus"
        },
        "startedTimestamp": {
          "type": "string",
          "format": "date-time",
          "title": "when the debug job started"
        },
        "completedTimestamp": {
          "type": "string",
          "format": "date-time",
          "title": "when the debug job completed"
        },
        "version": {
          "type": "string",
          "title": "the version of the service associated with this debug run"
        }
      }
    },
    "modelRuntimeExtensionGetInfoDetailsStatus": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "CONVERGED",
        "FAILED"
      ],
      "default": "UNKNOWN"
    },
    "modelRuntimeExtensionGetInfoOutput": {
      "type": "object",
      "properties": {
        "getInfoDetails": {
          "$ref": "#/definitions/modelRuntimeExtensionGetInfoDetails"
        }
      }
    },
    "modelRuntimeExtensionGetInfoOutputContent": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "blobId": {
          "type": "string"
        }
      }
    },
    "modelRuntimeExtensionMetadata": {
      "type": "object",
      "properties": {
        "output": {
          "$ref": "#/definitions/modelRuntimeExtensionFetchOutput",
          "title": "the plan this approval is for, if any"
        },
        "applyDesiredStateId": {
          "type": "string"
        }
      }
    },
    "modelRuntimeObjectStatus": {
      "type": "string",
      "enum": [
        "PENDING",
        "SUCCEEDED",
        "FAILED"
      ],
      "default": "PENDING"
    },
    "modelServiceGroupState": {
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/desired_statemodelMetadata"
        },
        "services": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/desired_statemodelServiceState"
          }
        },
        "customTasks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelCustomTaskState"
          },
          "description": "Definitions for custom tasks used by this service group."
        },
        "deliveryExtensions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/desired_statemodelDeliveryExtensionState"
          }
        }
      }
    },
    "modelServiceInstanceLabelSelector": {
      "type": "object",
      "properties": {
        "releaseChannelSelector": {
          "type": "string",
          "title": "release channel selector, automatically scoped to `@type=release-channel @application=\u003capp\u003e`"
        },
        "all": {
          "type": "boolean",
          "title": "target all release channels"
        },
        "versions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelVersion"
          }
        },
        "rollbackVersion": {
          "$ref": "#/definitions/modelVersion",
          "title": "set an explicit auto rollback version"
        },
        "computeRollbackVersion": {
          "type": "boolean",
          "title": "use the last converged version as the auto rollback version"
        },
        "materializedReleaseChannels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "set internally by Prodvana in compiled desired state to track what this selector evaluated to. This includes all release channels,\nincluding ones that would be overridden by something else."
        }
      }
    },
    "modelSetDesiredStateMetadata": {
      "type": "object",
      "properties": {
        "rollback": {
          "type": "boolean"
        },
        "bypassPreconditionsAndProtections": {
          "type": "boolean"
        }
      },
      "title": "metadata about the desired state, set at the time of SetDesiredState"
    },
    "modelSignalType": {
      "type": "string",
      "enum": [
        "SIGNAL_UNKNOWN",
        "DELIVERY_PROMOTION",
        "PROTECTION_BYPASS",
        "RUNTIME_EXTENSION_APPROVAL",
        "SIGNAL_MANUAL_APPROVAL"
      ],
      "default": "SIGNAL_UNKNOWN"
    },
    "modelSimpleStatus": {
      "type": "string",
      "enum": [
        "SS_UNKNOWN",
        "SS_CONVERGING",
        "SS_CONVERGED",
        "SS_FAILED",
        "SS_WAITING_FOR_APPROVAL"
      ],
      "default": "SS_UNKNOWN"
    },
    "modelState": {
      "type": "object",
      "properties": {
        "service": {
          "$ref": "#/definitions/desired_statemodelServiceState"
        },
        "serviceInstance": {
          "$ref": "#/definitions/desired_statemodelServiceInstanceState"
        },
        "serviceGroup": {
          "$ref": "#/definitions/modelServiceGroupState"
        },
        "runtimeObject": {
          "$ref": "#/definitions/desired_statemodelRuntimeObject"
        },
        "manualApproval": {
          "$ref": "#/definitions/modelManualApprovalState"
        },
        "customTask": {
          "$ref": "#/definitions/modelCustomTaskState"
        },
        "protectionAttachment": {
          "$ref": "#/definitions/desired_statemodelProtectionAttachment"
        },
        "protectionLink": {
          "$ref": "#/definitions/modelProtectionLinkState"
        },
        "deliveryExtension": {
          "$ref": "#/definitions/desired_statemodelDeliveryExtensionState"
        }
      }
    },
    "modelStatusExplanation": {
      "type": "object",
      "properties": {
        "subject": {
          "$ref": "#/definitions/modelIdentifier",
          "description": "the id of the object that resulted in this status. In the case of parent entities, this may be one of the child entities, or itself."
        },
        "reason": {
          "$ref": "#/definitions/modelStatusReason"
        },
        "message": {
          "type": "string",
          "title": "Optional freeform message to be shown to the user alongside reason.\nonly one of the two will be set"
        },
        "messages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "modelStatusReason": {
      "type": "string",
      "enum": [
        "REASON_UNKNOWN",
        "NO_CURRENT_STATE",
        "APPLY_FAILED",
        "UNHEALTHY_PODS",
        "UPDATING_PODS",
        "VERSION_MISMATCH",
        "RUNTIME_OBJECT_FAILED",
        "PRECONDITIONS_FAILED",
        "MANUAL_APPROVAL_REJECTED",
        "STUCK_ENTITY",
        "VERSION_DIRTY"
      ],
      "default": "REASON_UNKNOWN",
      "title": "- NO_CURRENT_STATE: Prodvana has not fetched the data it needs to act on the entity\n - APPLY_FAILED: the command to apply target state failed\n - UNHEALTHY_PODS: unhealthy pods detected\n - UPDATING_PODS: pods are being updated\n - VERSION_MISMATCH: no update in progress, but there are pods on the wrong version. This could be a transient state with the runtime, or something was updated out of band\n - RUNTIME_OBJECT_FAILED: after applying successfully, the object arrived at a failed state\n - PRECONDITIONS_FAILED: a precondition failed in an unrecoverable way\n - STUCK_ENTITY: Entity has not been updated in a long time\n - VERSION_DIRTY: the active version is explicitly marked as dirty"
    },
    "modelTaskRun": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/modelSimpleStatus"
        },
        "statusExplanations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelStatusExplanation"
          }
        },
        "version": {
          "type": "string"
        },
        "seenVersions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelVersion"
          }
        },
        "startedTimestamp": {
          "type": "string",
          "format": "date-time"
        },
        "completedTimestamp": {
          "type": "string",
          "format": "date-time"
        },
        "outputBlobIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "these fields are only populated for completed tasks"
        },
        "exitCodes": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "taskEntities": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelIdentifier"
          },
          "title": "all entities that make up the task"
        },
        "retryableExitCodes": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "description": "if there is any intersection between these and exit_codes, and the status is FAILED, then the retryable bit below will be\nset to true."
        },
        "retryable": {
          "type": "boolean"
        },
        "phase": {
          "$ref": "#/definitions/TaskRunPhase",
          "title": "tasks are created first in the NOT_STARTED phase"
        },
        "fetchDetails": {
          "$ref": "#/definitions/modelFetchDetails",
          "title": "for runtime extension aggregate objects only, the fetch details used to start the task (will contain plan id)"
        },
        "fetchTaskStartDetails": {
          "$ref": "#/definitions/modelFetchTaskStartDetails"
        }
      }
    },
    "modelVersion": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "replicas": {
          "type": "integer",
          "format": "int32",
          "title": "Created/running replicas, can be in any state"
        },
        "availableReplicas": {
          "type": "integer",
          "format": "int32",
          "description": "Replicas which have passed healthchecks for required duration."
        },
        "pushTimestamp": {
          "type": "string",
          "format": "date-time"
        },
        "active": {
          "type": "boolean",
          "description": "A version is active if it is the version in which the underlying object is converging to.\nA runtime object will have exactly one active version, while a service instance may have one or more\ndepending on if it maps to more than one runtime object."
        },
        "targetReplicas": {
          "type": "integer",
          "format": "int32"
        },
        "dirty": {
          "type": "boolean",
          "description": "A version is dirty if its state no longer matches desired state and must be fixed by a redeploy.\nFor example, a terraform version is dirty if its plan output returns differences.\nDD will only take action on dirty if the version is also active."
        }
      }
    },
    "objectGetLabelsResp": {
      "type": "object",
      "properties": {
        "labels": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/labelsLabelDefinition"
          }
        }
      }
    },
    "objectObjectMeta": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "configVersion": {
          "type": "string",
          "description": "only set for objects who has configurations with parametrization support. At the time of this writing, only services."
        },
        "source": {
          "$ref": "#/definitions/versionSource"
        },
        "sourceMetadata": {
          "$ref": "#/definitions/versionSourceMetadata"
        },
        "type": {
          "$ref": "#/definitions/objectObjectType"
        }
      }
    },
    "objectObjectType": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "RUNTIME",
        "APPLICATION",
        "SERVICE",
        "RELEASE_CHANNEL",
        "PROTECTION",
        "DEPLOYMENT",
        "RELEASE"
      ],
      "default": "UNKNOWN"
    },
    "objectQueryObjectResp": {
      "type": "object",
      "properties": {
        "objects": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/objectObjectMeta"
          }
        }
      }
    },
    "organizationGetOrganizationInsightsResp": {
      "type": "object",
      "properties": {
        "insights": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/insightsInsight"
          }
        }
      }
    },
    "organizationGetOrganizationMetadataResp": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/organizationOrganizationUserMetadata",
          "title": "metadata with no variables substitution, no modifications from parents"
        }
      }
    },
    "organizationGetOrganizationMetricsResp": {
      "type": "object",
      "properties": {
        "deploymentMetrics": {
          "$ref": "#/definitions/metricsDeploymentMetrics"
        }
      }
    },
    "organizationGetOrganizationResp": {
      "type": "object",
      "properties": {
        "organization": {
          "$ref": "#/definitions/organizationOrganizationInfo"
        }
      }
    },
    "organizationGetOrganizationSubscriptionStatusResp": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean"
        },
        "trial": {
          "type": "boolean"
        },
        "trialEndTimestamp": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "organizationInviteUsersReq": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/organizationUserInvite"
          }
        }
      }
    },
    "organizationInviteUsersResp": {
      "type": "object"
    },
    "organizationListRolesResp": {
      "type": "object",
      "properties": {
        "roles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/organizationRoleDefinition"
          }
        }
      }
    },
    "organizationListUsersResp": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/organizationSettingsUser"
          }
        },
        "nextPageToken": {
          "type": "string"
        }
      }
    },
    "organizationOrganizationInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "writebackConfig": {
          "$ref": "#/definitions/config_writebackConfigWritebackPath"
        },
        "slug": {
          "type": "string"
        },
        "userMetadata": {
          "$ref": "#/definitions/organizationOrganizationUserMetadata"
        }
      }
    },
    "organizationOrganizationSupportsInvitesResp": {
      "type": "object",
      "properties": {
        "supportsInvites": {
          "type": "boolean"
        }
      }
    },
    "organizationOrganizationUserMetadata": {
      "type": "object",
      "properties": {
        "applicationLinks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/common_configLink"
          },
          "title": "Links that every app should get automatically"
        },
        "serviceLinks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/common_configLink"
          },
          "title": "Links that every service should get automatically"
        },
        "links": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/common_configLink"
          }
        }
      }
    },
    "organizationRemoveUserResp": {
      "type": "object"
    },
    "organizationRoleDefinition": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "organizationSetOrganizationMetadataReq": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/organizationOrganizationUserMetadata"
        }
      }
    },
    "organizationSetOrganizationMetadataResp": {
      "type": "object"
    },
    "organizationSetRolesResp": {
      "type": "object"
    },
    "organizationSettingsUser": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/prodvanausersUser"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "organizationSnoozeOrganizationInsightResp": {
      "type": "object"
    },
    "organizationUserInvite": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "pipelinesManualApprovalTask": {
      "type": "object"
    },
    "pipelinesParallelTask": {
      "type": "object",
      "properties": {
        "tracks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ParallelTaskTaskTrack"
          }
        }
      }
    },
    "pipelinesPushTask": {
      "type": "object",
      "properties": {
        "serviceId": {
          "type": "string",
          "title": "when passing as input, only specify one of service or service_id, not both"
        },
        "service": {
          "type": "string"
        },
        "releaseChannelId": {
          "type": "string",
          "title": "when passing as input, only specify one of release_channel or release_channel_id, not both"
        },
        "releaseChannel": {
          "type": "string"
        },
        "rollback": {
          "type": "boolean",
          "title": "deprecated, set at pipeline level instead of task level"
        },
        "applicationId": {
          "type": "string"
        },
        "application": {
          "type": "string"
        }
      }
    },
    "pipelinesTask": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/pipelinesTaskMetadata"
        },
        "pushTask": {
          "$ref": "#/definitions/pipelinesPushTask"
        },
        "waitTask": {
          "$ref": "#/definitions/pipelinesWaitTask"
        },
        "parallelTask": {
          "$ref": "#/definitions/pipelinesParallelTask"
        },
        "manualApprovalTask": {
          "$ref": "#/definitions/pipelinesManualApprovalTask"
        },
        "customTask": {
          "$ref": "#/definitions/prodvanapipelinesCustomTask"
        }
      }
    },
    "pipelinesTaskMetadata": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        }
      },
      "description": "Metadata contains information generic to all task types.\nCompilation of a task can be done entirely with its metadata and specific task-type config."
    },
    "pipelinesWaitTask": {
      "type": "object",
      "properties": {
        "duration": {
          "type": "string"
        }
      }
    },
    "prodvanaagentRecordDeploymentResp": {
      "type": "object",
      "properties": {
        "pushTimestamp": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "prodvanacommon_configTaskConfig": {
      "type": "object",
      "properties": {
        "program": {
          "$ref": "#/definitions/common_configProgramConfig"
        },
        "volumes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/volumesVolume"
          }
        },
        "ttl": {
          "type": "string",
          "description": "TTL after the job completes, defaults to 1 hour."
        },
        "retryConfig": {
          "$ref": "#/definitions/common_configRetryConfig",
          "description": "If not set, the task will not be retried once it starts executing once."
        }
      }
    },
    "prodvanadelivery_extensionDeliveryExtension": {
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/objectObjectMeta"
        },
        "config": {
          "$ref": "#/definitions/prodvanadelivery_extensionDeliveryExtensionConfig"
        },
        "state": {
          "$ref": "#/definitions/prodvanadelivery_extensionDeliveryExtensionState"
        }
      }
    },
    "prodvanadelivery_extensionDeliveryExtensionConfig": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "taskConfig": {
          "$ref": "#/definitions/prodvanacommon_configTaskConfig"
        },
        "kubernetesConfig": {
          "$ref": "#/definitions/common_configKubernetesConfig"
        },
        "parameters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/common_configParameterDefinition"
          }
        },
        "env": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/common_configEnvValue"
          },
          "title": "optional env variables to inject and override from exec_config"
        }
      }
    },
    "prodvanadelivery_extensionDeliveryExtensionState": {
      "type": "object",
      "title": "TODO(naphat) list custom task instances?"
    },
    "prodvanadeploymentDeployment": {
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/objectObjectMeta"
        },
        "config": {
          "$ref": "#/definitions/deploymentDeploymentConfig"
        },
        "comparison": {
          "$ref": "#/definitions/deploymentDeploymentComparison",
          "title": "TODO(naphat) should this really be part of the proto here, or should it be a separate endpoint so we can request arbitrary comparison?"
        },
        "state": {
          "$ref": "#/definitions/deploymentDeploymentState"
        }
      }
    },
    "prodvanadeploymentRecordDeploymentReq": {
      "type": "object",
      "properties": {
        "config": {
          "$ref": "#/definitions/deploymentDeploymentConfig"
        },
        "pending": {
          "type": "boolean",
          "description": "If true, create deployment with pending status that is meant to be updated later to either success or failure.\nBy default, deployments are created with status SUCCEEDED."
        }
      }
    },
    "prodvanadeploymentRecordDeploymentResp": {
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/objectObjectMeta"
        }
      }
    },
    "prodvanaenvironmentAwsEcsConfig": {
      "type": "object",
      "properties": {
        "proxyRuntime": {
          "$ref": "#/definitions/runtimesRuntimeExecutionConfig"
        },
        "accessKey": {
          "$ref": "#/definitions/AwsEcsConfigAccessKey",
          "title": "TODO(naphat) assumeRole support"
        },
        "region": {
          "type": "string"
        },
        "ecsCluster": {
          "type": "string"
        }
      }
    },
    "prodvanaenvironmentGoogleCloudRunConfig": {
      "type": "object",
      "properties": {
        "proxyRuntime": {
          "$ref": "#/definitions/runtimesRuntimeExecutionConfig"
        },
        "serviceAccountJson": {
          "$ref": "#/definitions/common_configSecretReferenceValue",
          "title": "TODO(naphat) support for job service account name"
        },
        "project": {
          "type": "string"
        },
        "region": {
          "type": "string",
          "title": "next tag: 5"
        }
      }
    },
    "prodvanaeventsRuntimeObject": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "name of object as it appears in the runtime layer"
        },
        "kind": {
          "type": "string"
        },
        "namespace": {
          "type": "string",
          "title": "optional, depends on if runtime has support for it"
        },
        "url": {
          "type": "string",
          "description": "optional, depends on if there is a unique URL to view this object."
        }
      }
    },
    "prodvanaorganizationGetUserResp": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/prodvanausersUser"
        }
      }
    },
    "prodvanapipelinesCustomTask": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "title": "description used for displaying this task"
        },
        "program": {
          "$ref": "#/definitions/common_configProgramConfig"
        },
        "retryConfig": {
          "$ref": "#/definitions/common_configRetryConfig",
          "description": "if not set, the custom task will not be retried once it starts executing once."
        },
        "application": {
          "type": "string",
          "title": "TODO(naphat) is this the best interface, or do we just take runtime + namespace?"
        },
        "applicationId": {
          "type": "string"
        },
        "releaseChannel": {
          "type": "string"
        },
        "releaseChannelId": {
          "type": "string"
        },
        "finalCompiledProgram": {
          "type": "boolean",
          "title": "if set, treat the program as the final program, avoid any internal Prodvana compilation (e.g. setting default env from app config)"
        }
      }
    },
    "prodvanaprotectionProtection": {
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/objectObjectMeta"
        },
        "config": {
          "$ref": "#/definitions/protectionProtectionConfig"
        },
        "builtin": {
          "type": "boolean",
          "description": "indicates this protection is provided by Prodvana by default."
        }
      }
    },
    "prodvanaprotectionProtectionAttachment": {
      "type": "object",
      "properties": {
        "serviceInstance": {
          "$ref": "#/definitions/protectionServiceInstanceAttachment"
        },
        "releaseChannel": {
          "$ref": "#/definitions/protectionReleaseChannelAttachment"
        },
        "convergence": {
          "$ref": "#/definitions/protectionConvergenceAttachment"
        }
      }
    },
    "prodvanarepoUser": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        }
      }
    },
    "prodvanaserviceAwsEcsConfig": {
      "type": "object",
      "properties": {
        "ecsServiceNameOverride": {
          "type": "string",
          "title": "optional, defaults to Prodvana service name"
        },
        "taskDefinition": {
          "$ref": "#/definitions/AwsEcsConfigSpec"
        },
        "serviceDefinition": {
          "$ref": "#/definitions/AwsEcsConfigSpec"
        },
        "updateTaskDefinitionOnly": {
          "type": "boolean",
          "description": "Only update service's task definition, but do not try to update anything else about the service.\nThis means that something else is responsible for creating the service.\n\nif set, network_configuration cannot be set"
        }
      }
    },
    "prodvanaserviceDeliveryExtensionConfig": {
      "type": "object",
      "properties": {
        "inlined": {
          "$ref": "#/definitions/prodvanadelivery_extensionDeliveryExtensionConfig",
          "description": "Inline definition of a delivery extension."
        },
        "instance": {
          "type": "string",
          "description": "A delivery instance defined in this service config."
        },
        "ref": {
          "$ref": "#/definitions/delivery_extensionDeliveryExtensionInstanceRef",
          "description": "Reference to a delivery extension defined externally."
        },
        "lifecycle": {
          "$ref": "#/definitions/common_configTaskLifecycle"
        }
      }
    },
    "prodvanaserviceGoogleCloudRunConfig": {
      "type": "object",
      "properties": {
        "inlined": {
          "type": "string"
        },
        "local": {
          "$ref": "#/definitions/common_configLocalConfig"
        }
      }
    },
    "prodvanaserviceServiceInstanceState": {
      "type": "object",
      "properties": {
        "externalAddrs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/serviceExternalAddr"
          }
        },
        "protectionAttachments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/serviceServiceInstanceProtectionAttachment"
          }
        }
      }
    },
    "prodvanaserviceServiceState": {
      "type": "object",
      "properties": {
        "convergenceMode": {
          "$ref": "#/definitions/convergenceConvergenceMode"
        }
      }
    },
    "prodvanaserviceTaskConfig": {
      "type": "object",
      "properties": {
        "program": {
          "$ref": "#/definitions/common_configProgramConfig"
        },
        "baseProgram": {
          "$ref": "#/definitions/serviceProgramReference",
          "description": "optional base program to take configs from. If specified, `program` field will act\nlike an override instead."
        },
        "retryConfig": {
          "$ref": "#/definitions/common_configRetryConfig",
          "description": "if not set, the task will not be retried once it starts executing once."
        },
        "ref": {
          "$ref": "#/definitions/serviceTaskReference",
          "description": "Instead of defining a new task, reference an existing custom task and use that. This is meant\nto be used in conjunection with per_release_channel to allow multiple release channels to use\na single custom task. If set, the program definition is ignored except for program name."
        }
      }
    },
    "prodvanasettingsorganizationGetUserResp": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/organizationSettingsUser"
        }
      }
    },
    "prodvanausersUser": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "apiUser": {
          "type": "boolean",
          "title": "indicates if this user represents an api token"
        },
        "name": {
          "type": "string",
          "title": "user info, all optional"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "emails": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "protectionCommitDenylistProtectionConfig": {
      "type": "object",
      "properties": {
        "repository": {
          "type": "string"
        },
        "commits": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/CommitDenylistProtectionConfigCommitDefinition"
          }
        }
      }
    },
    "protectionCompiledProtectionAttachmentConfig": {
      "type": "object",
      "properties": {
        "config": {
          "$ref": "#/definitions/protectionProtectionConfig"
        },
        "attachment": {
          "$ref": "#/definitions/prodvanaprotectionProtectionAttachment",
          "title": "Protection source - where did this protection get attached from (service/app/org/...)?"
        },
        "runtimeExecution": {
          "$ref": "#/definitions/runtimesRuntimeExecutionConfig"
        },
        "env": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/common_configEnvValue"
          },
          "description": "The compiled environment for this attachment's context, e.g.  Release Channel."
        },
        "parameterValues": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/common_configParameterValue"
          },
          "title": "compiled parameter values"
        }
      }
    },
    "protectionConfigureProtectionReq": {
      "type": "object",
      "properties": {
        "protectionConfig": {
          "$ref": "#/definitions/protectionProtectionConfig"
        },
        "source": {
          "$ref": "#/definitions/versionSource"
        },
        "sourceMetadata": {
          "$ref": "#/definitions/versionSourceMetadata"
        }
      }
    },
    "protectionConfigureProtectionResp": {
      "type": "object",
      "properties": {
        "protectionId": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "protectionConvergenceAttachment": {
      "type": "object",
      "properties": {
        "desiredStateId": {
          "type": "string"
        }
      }
    },
    "protectionGetProtectionAttachmentConfigResp": {
      "type": "object",
      "properties": {
        "config": {
          "$ref": "#/definitions/protectionCompiledProtectionAttachmentConfig"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "protectionGetProtectionConfigResp": {
      "type": "object",
      "properties": {
        "inputConfig": {
          "$ref": "#/definitions/protectionProtectionConfig"
        },
        "compiledConfig": {
          "$ref": "#/definitions/protectionProtectionConfig"
        },
        "version": {
          "type": "string",
          "title": "next tag: 4"
        }
      }
    },
    "protectionGetProtectionResp": {
      "type": "object",
      "properties": {
        "protection": {
          "$ref": "#/definitions/prodvanaprotectionProtection"
        }
      }
    },
    "protectionListProtectionsResp": {
      "type": "object",
      "properties": {
        "protections": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/prodvanaprotectionProtection"
          }
        },
        "nextPageToken": {
          "type": "string"
        }
      }
    },
    "protectionProtectionAttachmentConfig": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "optional, default to protection name"
        },
        "ref": {
          "$ref": "#/definitions/protectionProtectionReference"
        },
        "lifecycle": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protectionProtectionLifecycle"
          },
          "description": "if set, the attachment is automatically used in all deployments for the subject of this attachment.\ne.g. for release channels, all service instances in that release channel will use the attachment."
        }
      }
    },
    "protectionProtectionConfig": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "taskConfig": {
          "$ref": "#/definitions/prodvanacommon_configTaskConfig",
          "description": "Inline task config with retry, template support."
        },
        "kubernetesConfig": {
          "$ref": "#/definitions/common_configKubernetesConfig"
        },
        "commitDenylist": {
          "$ref": "#/definitions/protectionCommitDenylistProtectionConfig"
        },
        "pollInterval": {
          "type": "string",
          "title": "customize intervals instead of using Prodvana default\nhow often to run check even if it succeeds"
        },
        "timeout": {
          "type": "string",
          "title": "deprecated, not used"
        },
        "parameters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/common_configParameterDefinition"
          }
        },
        "env": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/common_configEnvValue"
          },
          "title": "optional env variables to inject and override from exec_config"
        }
      }
    },
    "protectionProtectionLifecycle": {
      "type": "object",
      "properties": {
        "preApproval": {
          "$ref": "#/definitions/ProtectionLifecyclePreApproval",
          "title": "NOTE: Type here must match CustomTaskType"
        },
        "postApproval": {
          "$ref": "#/definitions/ProtectionLifecyclePostApproval",
          "title": "Approval approval = 2;"
        },
        "deployment": {
          "$ref": "#/definitions/protectionProtectionLifecycleDeployment"
        },
        "postDeployment": {
          "$ref": "#/definitions/ProtectionLifecyclePostDeployment"
        }
      }
    },
    "protectionProtectionLifecycleDeployment": {
      "type": "object"
    },
    "protectionProtectionReference": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "parameters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/common_configParameterValue"
          }
        }
      }
    },
    "protectionReleaseChannelAttachment": {
      "type": "object",
      "properties": {
        "application": {
          "type": "string"
        },
        "releaseChannel": {
          "type": "string"
        }
      }
    },
    "protectionServiceInstanceAttachment": {
      "type": "object",
      "properties": {
        "service": {
          "type": "string"
        },
        "releaseChannel": {
          "type": "string"
        },
        "application": {
          "type": "string"
        }
      }
    },
    "protectionValidateConfigureProtectionResp": {
      "type": "object",
      "properties": {
        "inputConfig": {
          "$ref": "#/definitions/protectionProtectionConfig"
        },
        "compiledConfig": {
          "$ref": "#/definitions/protectionProtectionConfig"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "pvn_wrapperOutput": {
      "type": "object",
      "properties": {
        "exitCode": {
          "type": "integer",
          "format": "int32",
          "description": "Exit code of wrapped process. -1 if process failed to execute."
        },
        "execError": {
          "type": "string",
          "description": "Internal error when trying to execute wrapped process."
        },
        "stdoutBlobId": {
          "type": "string"
        },
        "stderrBlobId": {
          "type": "string"
        },
        "version": {
          "type": "string",
          "description": "Wrapper version."
        },
        "startTimestampNs": {
          "type": "string",
          "format": "int64",
          "description": "Timestamp when the process began executing, in ns."
        },
        "durationNs": {
          "type": "string",
          "format": "int64",
          "description": "Total execution duration of the process, in ns."
        },
        "files": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pvn_wrapperOutputFile"
          }
        }
      }
    },
    "pvn_wrapperOutputFile": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "contentBlobId": {
          "type": "string"
        }
      }
    },
    "release_channelConfigureReleaseChannelResp": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string",
          "title": "application version"
        },
        "createdNewVersion": {
          "type": "boolean"
        }
      }
    },
    "release_channelDeleteReleaseChannelResp": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string",
          "title": "application version"
        }
      }
    },
    "release_channelGetReleaseChannelConfigResp": {
      "type": "object",
      "properties": {
        "config": {
          "$ref": "#/definitions/release_channelReleaseChannelConfig",
          "title": "config as passed in by user"
        },
        "version": {
          "type": "string"
        },
        "compiledConfig": {
          "$ref": "#/definitions/release_channelReleaseChannelConfig",
          "title": "config with defaults applied"
        }
      }
    },
    "release_channelGetReleaseChannelEventsResp": {
      "type": "object",
      "properties": {
        "events": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/eventsEvent"
          }
        },
        "nextPageToken": {
          "type": "string"
        }
      }
    },
    "release_channelGetReleaseChannelResp": {
      "type": "object",
      "properties": {
        "releaseChannel": {
          "$ref": "#/definitions/release_channelReleaseChannel"
        }
      }
    },
    "release_channelListReleaseChannelsResp": {
      "type": "object",
      "properties": {
        "releaseChannels": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/release_channelReleaseChannel"
          }
        }
      }
    },
    "release_channelPolicy": {
      "type": "object",
      "properties": {
        "defaultEnv": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/common_configEnvValue"
          }
        }
      }
    },
    "release_channelPrecondition": {
      "type": "object",
      "properties": {
        "releaseChannelStable": {
          "$ref": "#/definitions/PreconditionReleaseChannelStable"
        },
        "manualApproval": {
          "$ref": "#/definitions/release_channelPreconditionManualApproval"
        },
        "customTask": {
          "$ref": "#/definitions/release_channelPreconditionCustomTask"
        },
        "sharedManualApproval": {
          "$ref": "#/definitions/PreconditionSharedManualApproval"
        }
      }
    },
    "release_channelPreconditionCustomTask": {
      "type": "object",
      "properties": {
        "taskName": {
          "type": "string"
        },
        "customTask": {
          "$ref": "#/definitions/prodvanapipelinesCustomTask"
        }
      }
    },
    "release_channelPreconditionManualApproval": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "everyAction": {
          "type": "boolean",
          "description": "request approval on every apply action, not just the first.\nonly works for runtime extensions, will do nothing for kubernetes services."
        }
      }
    },
    "release_channelReleaseChannel": {
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/objectObjectMeta"
        },
        "config": {
          "$ref": "#/definitions/release_channelReleaseChannelConfig"
        },
        "state": {
          "$ref": "#/definitions/release_channelReleaseChannelState"
        }
      }
    },
    "release_channelReleaseChannelConfig": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "intentionally does not reference cluster - this allows us to copy release channels across clusters via the same config"
        },
        "group": {
          "type": "string",
          "description": "if specified, this release channel is part of a group. This can affect how release channels are rendered on the Prodvana web interface."
        },
        "order": {
          "type": "string",
          "format": "int64",
          "title": "deprecated"
        },
        "maturity": {
          "$ref": "#/definitions/common_configMaturity",
          "title": "deprecated"
        },
        "policy": {
          "$ref": "#/definitions/release_channelPolicy"
        },
        "runtimes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/release_channelReleaseChannelRuntimeConfig"
          }
        },
        "deployAnnotations": {
          "$ref": "#/definitions/workflowAnnotationsConfig"
        },
        "preconditions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/release_channelPrecondition"
          }
        },
        "protections": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protectionProtectionAttachmentConfig"
          }
        },
        "convergenceProtections": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protectionProtectionAttachmentConfig"
          }
        },
        "serviceInstanceProtections": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protectionProtectionAttachmentConfig"
          },
          "title": "protections that all service instances in this release channel should get"
        },
        "constants": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/common_configConstant"
          },
          "title": "constants made available in template substitutions"
        },
        "labels": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/labelsLabelDefinition"
          }
        },
        "disableAllProtections": {
          "type": "boolean",
          "description": "Disable all protections for this release channel - protections will not be created for any service instances in this release channel.\nThis is useful for release channels that are used for testing or are not yet in production (e.g., fast creation of new tenants)."
        }
      }
    },
    "release_channelReleaseChannelGroupGeneratorConfig": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "runtimeSelector": {
          "type": "string",
          "description": "label selector for runtimes to generate release channels for.\nOne release channel will be generated for each runtime that matches this selector.\nThe selector will automatically be intersected with \"@type=runtime\"."
        },
        "allowEmpty": {
          "type": "boolean",
          "description": "By default, if the runtime selector returns an empty list of runtimes, Prodvana will error out.\nSet allow_empty to true to explicitly allow the selector to return an empty list."
        },
        "template": {
          "$ref": "#/definitions/release_channelReleaseChannelConfig",
          "title": "optionally customize how the release channel will be generated.\nTemplate variables .Builtins.Group an d.Builtins.Runtime are available.\nAny value specified here will be merged with:\nname: {{.Builtins.Group}}-{{.Builtins.Runtime.Name}}\ngroup: {{.Builtins.Group}}\nruntimes:\n- runtime: {{Builtins.Runtime.Name}}"
        }
      }
    },
    "release_channelReleaseChannelProtectionAttachment": {
      "type": "object",
      "properties": {
        "protection": {
          "type": "string"
        },
        "attachment": {
          "type": "string"
        },
        "desiredStateId": {
          "type": "string"
        },
        "attachmentId": {
          "type": "string"
        }
      }
    },
    "release_channelReleaseChannelRuntimeConfig": {
      "type": "object",
      "properties": {
        "runtime": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Optional identifier for this runtime connection within this release channel,\nuseful if the release channel has multiple runtimes of the same type.\nDefaults to the value of `runtime``."
        },
        "containerOrchestration": {
          "$ref": "#/definitions/runtimesContainerOrchestrationRuntime"
        },
        "type": {
          "$ref": "#/definitions/release_channelRuntimeConnectionType",
          "description": "set internally by prodvana, overridden even if set manually."
        }
      }
    },
    "release_channelReleaseChannelState": {
      "type": "object",
      "properties": {
        "protectionAttachments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/release_channelReleaseChannelProtectionAttachment"
          }
        }
      }
    },
    "release_channelRuntimeConnectionType": {
      "type": "string",
      "enum": [
        "UNKNOWN_CONNECTION",
        "LONG_LIVED_COMPUTE",
        "EXTENSION",
        "AWS_ECS",
        "GOOGLE_CLOUD_RUN"
      ],
      "default": "UNKNOWN_CONNECTION"
    },
    "repoCommit": {
      "type": "object",
      "properties": {
        "commitId": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "author": {
          "$ref": "#/definitions/prodvanarepoUser"
        },
        "impactAnalysis": {
          "$ref": "#/definitions/impact_analysisImpactAnalysisResult",
          "title": "TODO: Other fields, like author, timestamps etc"
        }
      }
    },
    "runtimesContainerOrchestrationRuntime": {
      "type": "object",
      "properties": {
        "k8s": {
          "$ref": "#/definitions/ContainerOrchestrationRuntimeK8s"
        },
        "ecs": {
          "$ref": "#/definitions/ContainerOrchestrationRuntimeECS"
        }
      }
    },
    "runtimesRuntimeExecutionConfig": {
      "type": "object",
      "properties": {
        "runtime": {
          "type": "string"
        },
        "containerOrchestration": {
          "$ref": "#/definitions/runtimesContainerOrchestrationRuntime"
        }
      }
    },
    "serviceApplyParametersReqPerReleaseChannel": {
      "type": "object",
      "properties": {
        "releaseChannel": {
          "type": "string"
        },
        "parameters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/common_configParameterValue"
          },
          "title": "takes precedence over any parameters set at top level"
        }
      }
    },
    "serviceApplyParametersResp": {
      "type": "object",
      "properties": {
        "serviceId": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "efficiencyStat": {
          "$ref": "#/definitions/statEfficiencyStat",
          "title": "only set if compute_efficiency was set in request"
        }
      }
    },
    "serviceCapabilityReference": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "serviceCertificate": {
      "type": "object",
      "properties": {
        "tls": {
          "$ref": "#/definitions/serviceTLSCertificate"
        },
        "awsAcmCert": {
          "type": "string"
        }
      }
    },
    "serviceCompiledCapabilityConfig": {
      "type": "object",
      "properties": {
        "capability": {
          "$ref": "#/definitions/capabilityCapabilityConfig"
        }
      }
    },
    "serviceCompiledServiceInstanceConfig": {
      "type": "object",
      "properties": {
        "service": {
          "type": "string"
        },
        "application": {
          "type": "string"
        },
        "releaseChannel": {
          "type": "string"
        },
        "programs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/common_configProgramConfig"
          }
        },
        "replicas": {
          "$ref": "#/definitions/serviceReplicasConfig"
        },
        "maturity": {
          "$ref": "#/definitions/common_configMaturity"
        },
        "releaseStrategy": {
          "$ref": "#/definitions/serviceReleaseStrategyConfig"
        },
        "customHostnames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "cert": {
          "$ref": "#/definitions/serviceCertificate"
        },
        "runtime": {
          "$ref": "#/definitions/release_channelReleaseChannelRuntimeConfig"
        },
        "runtimeExecution": {
          "$ref": "#/definitions/runtimesRuntimeExecutionConfig"
        },
        "capabilities": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/serviceCompiledCapabilityConfig"
          }
        },
        "deliveryConfig": {
          "$ref": "#/definitions/deliveryDeliveryConfig"
        },
        "volumes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/volumesVolume"
          }
        },
        "deployAnnotations": {
          "$ref": "#/definitions/workflowAnnotationsConfig"
        },
        "prePushTasks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/prodvanaserviceTaskConfig"
          },
          "description": "DEPRECATED: Replace with delivery_extensions once its implemented."
        },
        "deliveryExtensions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/prodvanaserviceDeliveryExtensionConfig"
          }
        },
        "deliveryExtensionInstances": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/serviceDeliveryExtensionInstance"
          }
        },
        "runtimeSpecific": {
          "$ref": "#/definitions/serviceRuntimeSpecificConfig"
        },
        "parameters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/common_configParameterDefinition"
          }
        },
        "parameterValues": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/common_configParameterValue"
          }
        },
        "constants": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/common_configConstant"
          },
          "title": "constants made available in template substitutions"
        },
        "progressDeadline": {
          "type": "string",
          "title": "how long to wait before marking deployment as failed"
        },
        "customRuntime": {
          "$ref": "#/definitions/serviceRuntimeExtensionConfig"
        },
        "kubernetesConfig": {
          "$ref": "#/definitions/common_configKubernetesConfig"
        },
        "helm": {
          "$ref": "#/definitions/common_configHelmConfig"
        },
        "awsEcs": {
          "$ref": "#/definitions/prodvanaserviceAwsEcsConfig"
        },
        "googleCloudRun": {
          "$ref": "#/definitions/prodvanaserviceGoogleCloudRunConfig"
        },
        "env": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/common_configEnvValue"
          },
          "description": "The compiled environment for this instance's context, e.g.  Release Channel.\nThis is used to inject these values into external configs."
        },
        "noCleanupOnDelete": {
          "type": "boolean"
        },
        "protections": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protectionProtectionAttachmentConfig"
          }
        },
        "convergenceProtections": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protectionProtectionAttachmentConfig"
          }
        }
      },
      "title": "a compiled version of ServiceConfig specific to a service instance, with release-channel configs applied"
    },
    "serviceConfigureServiceResp": {
      "type": "object",
      "properties": {
        "serviceId": {
          "type": "string"
        },
        "configVersion": {
          "type": "string"
        },
        "createdNewVersion": {
          "type": "boolean"
        }
      }
    },
    "serviceDeleteServiceResp": {
      "type": "object"
    },
    "serviceDeliveryExtensionInstance": {
      "type": "object",
      "properties": {
        "inlined": {
          "$ref": "#/definitions/prodvanadelivery_extensionDeliveryExtensionConfig",
          "description": "Inline definition of the delivery extension."
        },
        "ref": {
          "$ref": "#/definitions/delivery_extensionDeliveryExtensionInstanceRef",
          "description": "Reference to a delivery extension defined externally."
        },
        "name": {
          "type": "string"
        },
        "lifecycle": {
          "$ref": "#/definitions/common_configTaskLifecycle"
        }
      }
    },
    "serviceExternalAddr": {
      "type": "object",
      "properties": {
        "addr": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/serviceExternalAddrType"
        }
      }
    },
    "serviceExternalAddrType": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "AUTO",
        "EXTERNAL",
        "RAW_IP",
        "RAW_HOSTNAME"
      ],
      "default": "UNKNOWN",
      "title": "- RAW_IP: RAW_* are generated by the underlying infrastructure, independent of Prodvana"
    },
    "serviceFollowContainerRepositorySettings": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        }
      }
    },
    "serviceGenerateVersionNameResp": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        }
      }
    },
    "serviceGetMaterializedConfigResp": {
      "type": "object",
      "properties": {
        "config": {
          "$ref": "#/definitions/serviceServiceConfig",
          "title": "config as passed in by user"
        },
        "version": {
          "type": "string"
        },
        "compiledConfig": {
          "$ref": "#/definitions/serviceServiceConfig",
          "title": "config with defaults applied"
        },
        "compiledServiceInstanceConfigs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/serviceCompiledServiceInstanceConfig"
          },
          "title": "compiled config per release channel, with per-release-channel overrides applied"
        },
        "versionMetadata": {
          "$ref": "#/definitions/serviceListMaterializedConfigVersionsRespVersionMetadata",
          "title": "next tag: 6"
        }
      }
    },
    "serviceGetServiceConfigResp": {
      "type": "object",
      "properties": {
        "config": {
          "$ref": "#/definitions/serviceServiceConfig",
          "title": "deprecated, same as compiled_config"
        },
        "inputConfig": {
          "$ref": "#/definitions/serviceServiceConfig",
          "title": "may be null because input config wasn't stored before 2023-09-25"
        },
        "compiledConfig": {
          "$ref": "#/definitions/serviceServiceConfig"
        },
        "configVersion": {
          "type": "string",
          "title": "deprecated, use config_version_metadata"
        },
        "configVersionMetadata": {
          "$ref": "#/definitions/serviceListServiceConfigVersionsRespVersionMetadata",
          "title": "next tag: 6"
        }
      }
    },
    "serviceGetServiceInsightsResp": {
      "type": "object",
      "properties": {
        "insights": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/insightsInsight"
          }
        }
      }
    },
    "serviceGetServiceInstanceResp": {
      "type": "object",
      "properties": {
        "serviceInstance": {
          "$ref": "#/definitions/serviceServiceInstance"
        }
      }
    },
    "serviceGetServiceMetadataResp": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/serviceServiceUserMetadata",
          "title": "metadata with no variables substitution, no modifications from parents"
        }
      }
    },
    "serviceGetServiceMetricsResp": {
      "type": "object",
      "properties": {
        "deploymentMetrics": {
          "$ref": "#/definitions/metricsDeploymentMetrics"
        },
        "cost": {
          "$ref": "#/definitions/metricsCost"
        }
      }
    },
    "serviceGetServiceResp": {
      "type": "object",
      "properties": {
        "service": {
          "$ref": "#/definitions/serviceService"
        }
      }
    },
    "serviceListCommitsResp": {
      "type": "object",
      "properties": {
        "commits": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/repoCommit"
          }
        },
        "nextPageToken": {
          "type": "string"
        }
      }
    },
    "serviceListMaterializedConfigVersionsResp": {
      "type": "object",
      "properties": {
        "versions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/serviceListMaterializedConfigVersionsRespVersionMetadata"
          }
        },
        "nextPageToken": {
          "type": "string"
        }
      }
    },
    "serviceListMaterializedConfigVersionsRespVersionMetadata": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "creationTimestamp": {
          "type": "string",
          "format": "date-time"
        },
        "configVersion": {
          "type": "string"
        },
        "parameters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/common_configParameterDefinition"
          }
        },
        "parameterValues": {
          "$ref": "#/definitions/serviceServiceParameterValues"
        },
        "source": {
          "$ref": "#/definitions/versionSource"
        },
        "sourceMetadata": {
          "$ref": "#/definitions/versionSourceMetadata"
        },
        "appVersion": {
          "type": "string",
          "title": "the app version that was used for compilation"
        }
      }
    },
    "serviceListServiceConfigVersionsResp": {
      "type": "object",
      "properties": {
        "versions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/serviceListServiceConfigVersionsRespVersionMetadata"
          }
        },
        "nextPageToken": {
          "type": "string"
        }
      }
    },
    "serviceListServiceConfigVersionsRespVersionMetadata": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "creationTimestamp": {
          "type": "string",
          "format": "date-time"
        },
        "source": {
          "$ref": "#/definitions/versionSource"
        },
        "sourceMetadata": {
          "$ref": "#/definitions/versionSourceMetadata"
        }
      }
    },
    "serviceListServiceInstancesResp": {
      "type": "object",
      "properties": {
        "serviceInstances": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/serviceServiceInstance"
          }
        }
      }
    },
    "serviceListServicesResp": {
      "type": "object",
      "properties": {
        "services": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/serviceService"
          }
        }
      }
    },
    "serviceMetricAnalysis": {
      "type": "object",
      "properties": {
        "successRate": {
          "$ref": "#/definitions/MetricAnalysisSuccessRateConfig"
        },
        "latencyP95": {
          "$ref": "#/definitions/MetricAnalysisLatencyConfig"
        }
      }
    },
    "servicePerReleaseChannelConfig": {
      "type": "object",
      "properties": {
        "releaseChannel": {
          "type": "string"
        },
        "customHostnames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "programs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/common_configPerReleaseChannelProgramConfig"
          }
        },
        "cert": {
          "$ref": "#/definitions/serviceCertificate"
        },
        "deliveryConfig": {
          "$ref": "#/definitions/deliveryDeliveryConfig"
        },
        "volumes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/volumesVolume"
          }
        },
        "replicas": {
          "$ref": "#/definitions/serviceReplicasConfig"
        },
        "prePushTasks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/prodvanaserviceTaskConfig"
          },
          "description": "DEPRECATED: Replace with delivery_extensions once its implemented."
        },
        "deliveryExtensions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/prodvanaserviceDeliveryExtensionConfig"
          }
        },
        "runtimeSpecific": {
          "$ref": "#/definitions/serviceRuntimeSpecificConfig"
        },
        "runtimeConnection": {
          "type": "string",
          "description": "which runtime connection to use in each release channel.\noptional if only one runtime makes sense for the service config."
        },
        "runtimeExtension": {
          "$ref": "#/definitions/serviceRuntimeExtensionConfig",
          "title": "deprecated, use custom_runtime"
        },
        "customRuntime": {
          "$ref": "#/definitions/serviceRuntimeExtensionConfig"
        },
        "kubernetesConfig": {
          "$ref": "#/definitions/common_configKubernetesConfig"
        },
        "externalConfig": {
          "$ref": "#/definitions/common_configKubernetesConfig",
          "title": "deprecated, pass this as kubernetes_config instead"
        },
        "helm": {
          "$ref": "#/definitions/common_configHelmConfig"
        },
        "awsEcs": {
          "$ref": "#/definitions/prodvanaserviceAwsEcsConfig"
        },
        "googleCloudRun": {
          "$ref": "#/definitions/prodvanaserviceGoogleCloudRunConfig"
        },
        "env": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/common_configEnvValue"
          },
          "description": "Additional env variables that are injected to the service.\nThis can be useful for injecting and/or overriding env variables from release channel\nconfigs for Kubernetes and runtime extension configs.\nNot supported for helm configs."
        },
        "constants": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/common_configConstant"
          },
          "title": "constants made available in template substitutions"
        },
        "protections": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protectionProtectionAttachmentConfig"
          }
        },
        "convergenceProtections": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protectionProtectionAttachmentConfig"
          },
          "title": "TODO: unused today, but will be used for per-service per-RC convergence protections in the future"
        }
      }
    },
    "servicePerReleaseChannelParameterValues": {
      "type": "object",
      "properties": {
        "releaseChannel": {
          "type": "string"
        },
        "parameters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/common_configParameterValue"
          }
        }
      }
    },
    "serviceProgramReference": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "serviceReleaseStrategyConfig": {
      "type": "object",
      "properties": {
        "individualStageDeadline": {
          "type": "string",
          "description": "deadline in each stage before the push is rolled back. Includes the time it takes for pods to be healthy. Defaults to 10 minutes."
        },
        "automatedTestingDuration": {
          "type": "string",
          "description": "duration of the automated testing phase, before manual approval. Defaults to 30m."
        },
        "metricsAnalysis": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/serviceMetricAnalysis"
          }
        },
        "manualApproval": {
          "type": "boolean"
        },
        "checkInterval": {
          "type": "string",
          "description": "advanced settings that do not typically need to be set. Exposed mainly for testing purposes.\n\ndefaults to 30s"
        },
        "failureThreshold": {
          "type": "integer",
          "format": "int32",
          "title": "defaults to 5"
        }
      }
    },
    "serviceReplicasConfig": {
      "type": "object",
      "properties": {
        "fixed": {
          "type": "integer",
          "format": "int32",
          "title": "no validations, server side has defaults"
        }
      }
    },
    "serviceRuntimeExtensionConfig": {
      "type": "object",
      "properties": {
        "parameterValues": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/common_configParameterValue"
          }
        },
        "clearOnPerReleaseChannelMerge": {
          "type": "boolean",
          "description": "can only be set on a PerReleaseChannel config. If set, parameter values will be replaced instead of joined."
        }
      }
    },
    "serviceRuntimeSpecificConfig": {
      "type": "object",
      "properties": {
        "k8s": {
          "$ref": "#/definitions/RuntimeSpecificConfigK8SConfig"
        }
      },
      "description": "RuntimeSpecificConfig contains Service level configuration options that only make sense for a\nspecific Runtime type. Configuration added here should only apply to a single Service; if the\nRuntime specific configuration relates to all services, it should be configured as at the\nRuntime cluster level (or as a runtime extension)."
    },
    "serviceService": {
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/objectObjectMeta"
        },
        "config": {
          "$ref": "#/definitions/serviceServiceConfig"
        },
        "state": {
          "$ref": "#/definitions/prodvanaserviceServiceState"
        },
        "userMetadata": {
          "$ref": "#/definitions/serviceServiceUserMetadata"
        }
      }
    },
    "serviceServiceConfig": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "application": {
          "type": "string"
        },
        "programs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/common_configProgramConfig"
          }
        },
        "replicas": {
          "$ref": "#/definitions/serviceReplicasConfig"
        },
        "releaseStrategy": {
          "$ref": "#/definitions/serviceReleaseStrategyConfig"
        },
        "perReleaseChannel": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/servicePerReleaseChannelConfig"
          }
        },
        "capabilities": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/serviceCapabilityReference"
          },
          "title": "deprecated"
        },
        "deliveryConfig": {
          "$ref": "#/definitions/deliveryDeliveryConfig"
        },
        "volumes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/volumesVolume"
          }
        },
        "deployAnnotations": {
          "$ref": "#/definitions/workflowAnnotationsConfig"
        },
        "prePushTasks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/prodvanaserviceTaskConfig"
          },
          "title": "DEPRECATED: Replace with delivery_extensions"
        },
        "deliveryExtensions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/prodvanaserviceDeliveryExtensionConfig"
          }
        },
        "deliveryExtensionInstances": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/serviceDeliveryExtensionInstance"
          }
        },
        "convergenceProtections": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protectionProtectionAttachmentConfig"
          },
          "description": "Convergence protections applied to all release channels."
        },
        "runtimeSpecific": {
          "$ref": "#/definitions/serviceRuntimeSpecificConfig"
        },
        "runtimeConnection": {
          "type": "string",
          "description": "which runtime connection to use in each release channel.\noptional if only one runtime makes sense for the service config."
        },
        "parameters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/common_configParameterDefinition"
          }
        },
        "parameterValues": {
          "$ref": "#/definitions/serviceServiceParameterValues",
          "title": "only valid to set in compiled configs by Prodvana"
        },
        "constants": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/common_configConstant"
          },
          "title": "constants made available in template substitutions"
        },
        "progressDeadline": {
          "type": "string",
          "title": "how long to wait before marking deployment as failed"
        },
        "runtimeExtension": {
          "$ref": "#/definitions/serviceRuntimeExtensionConfig",
          "title": "deprecated, use custom_runtime below"
        },
        "customRuntime": {
          "$ref": "#/definitions/serviceRuntimeExtensionConfig"
        },
        "kubernetesConfig": {
          "$ref": "#/definitions/common_configKubernetesConfig"
        },
        "externalConfig": {
          "$ref": "#/definitions/common_configKubernetesConfig",
          "title": "deprecated, pass this as kubernetes_config instead"
        },
        "helm": {
          "$ref": "#/definitions/common_configHelmConfig"
        },
        "awsEcs": {
          "$ref": "#/definitions/prodvanaserviceAwsEcsConfig"
        },
        "googleCloudRun": {
          "$ref": "#/definitions/prodvanaserviceGoogleCloudRunConfig"
        },
        "parametersAutogen": {
          "$ref": "#/definitions/ServiceConfigParametersAutogen",
          "description": "How to autogenerate parameters, defaults to IMAGE. Ignored for Kubernetes or Helm configs."
        },
        "autoRollback": {
          "$ref": "#/definitions/common_configAutoRollbackConfig"
        },
        "noCleanupOnDelete": {
          "type": "boolean",
          "title": "if set, do not attempt to delete the underlying runtime objects when deleting a service"
        },
        "env": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/common_configEnvValue"
          },
          "description": "Additional env variables that are injected to the service.\nThis can be useful for injecting and/or overriding env variables from release channel\nconfigs for Kubernetes and runtime extension configs.\nNot supported for helm configs."
        },
        "asyncSetDesiredState": {
          "type": "boolean",
          "title": "internal use"
        },
        "maestro": {
          "$ref": "#/definitions/maestroMaestroConfig"
        }
      }
    },
    "serviceServiceConfigVersionReference": {
      "type": "object",
      "properties": {
        "application": {
          "type": "string",
          "title": "TODO(naphat) unify with ApplyParametersReq below"
        },
        "service": {
          "type": "string"
        },
        "serviceConfigVersion": {
          "type": "string"
        }
      }
    },
    "serviceServiceInstance": {
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/common_configServiceInstanceObjectMeta"
        },
        "config": {
          "$ref": "#/definitions/serviceCompiledServiceInstanceConfig",
          "title": "will be empty if never pushed"
        },
        "state": {
          "$ref": "#/definitions/prodvanaserviceServiceInstanceState"
        }
      }
    },
    "serviceServiceInstanceProtectionAttachment": {
      "type": "object",
      "properties": {
        "protection": {
          "type": "string"
        },
        "attachment": {
          "type": "string"
        },
        "desiredStateId": {
          "type": "string"
        },
        "attachmentId": {
          "type": "string"
        }
      }
    },
    "serviceServiceParameterValues": {
      "type": "object",
      "properties": {
        "parameters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/common_configParameterValue"
          }
        },
        "perReleaseChannel": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/servicePerReleaseChannelParameterValues"
          }
        }
      }
    },
    "serviceServiceUserMetadata": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "links": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/common_configLink"
          }
        },
        "followRepository": {
          "$ref": "#/definitions/serviceFollowContainerRepositorySettings"
        }
      }
    },
    "serviceSetServiceConvergenceModeResp": {
      "type": "object"
    },
    "serviceSetServiceMetadataResp": {
      "type": "object"
    },
    "serviceSnoozeServiceInsightResp": {
      "type": "object"
    },
    "serviceTLSCertificate": {
      "type": "object",
      "properties": {
        "tlsCert": {
          "$ref": "#/definitions/serviceTLSSecret"
        },
        "tlsKey": {
          "$ref": "#/definitions/serviceTLSSecret"
        }
      }
    },
    "serviceTLSSecret": {
      "type": "object",
      "properties": {
        "rawSecret": {
          "type": "string",
          "description": "Raw secret value to be used for user-editable YAML and RPC calls."
        },
        "secret": {
          "$ref": "#/definitions/common_configSecret",
          "description": "Externally stored secret."
        }
      }
    },
    "serviceTaskReference": {
      "type": "object",
      "properties": {
        "releaseChannel": {
          "type": "string"
        }
      }
    },
    "serviceValidateApplyParametersResp": {
      "type": "object",
      "properties": {
        "config": {
          "$ref": "#/definitions/serviceServiceConfig",
          "title": "config as passed in by user"
        },
        "compiledConfig": {
          "$ref": "#/definitions/serviceServiceConfig",
          "title": "config with defaults applied"
        },
        "appVersion": {
          "type": "string",
          "title": "the app version that is used for validation"
        },
        "compiledServiceInstanceConfigs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/serviceCompiledServiceInstanceConfig"
          },
          "title": "compiled config per release channel, with per-release-channel overrides applied"
        }
      }
    },
    "serviceValidateConfigureServiceResp": {
      "type": "object",
      "properties": {
        "inputConfig": {
          "$ref": "#/definitions/serviceServiceConfig",
          "title": "config as passed in by user"
        },
        "compiledConfig": {
          "$ref": "#/definitions/serviceServiceConfig",
          "title": "config with defaults applied"
        }
      }
    },
    "statEfficiencyStat": {
      "type": "object",
      "properties": {
        "savedLines": {
          "type": "integer",
          "format": "int32",
          "title": "how many lines did Prodvana save you from writing? Computed by comparing materialized yaml to proto text format"
        },
        "materializedLines": {
          "type": "integer",
          "format": "int32",
          "title": "how many lines of materialized config was either added, modified, or deleted?"
        }
      }
    },
    "versionSource": {
      "type": "string",
      "enum": [
        "UNKNOWN_SOURCE",
        "WEB",
        "INTERACTIVE_PVNCTL",
        "CONFIG_FILE",
        "REPO_FOLLOW",
        "PRODVANA",
        "IAC"
      ],
      "default": "UNKNOWN_SOURCE",
      "title": "- PRODVANA: this source indicates this version was provided by Prodvana\nthis is used for things like builtin Protections or other first party provided features\n - IAC: Infra as Code sources like Terraform and Pulumi"
    },
    "versionSourceMetadata": {
      "type": "object",
      "properties": {
        "repoUrl": {
          "type": "string",
          "title": "full repo URL, like git@github.com:foo/bar.git or https://github.com/foo/bar"
        },
        "filePath": {
          "type": "string"
        },
        "commit": {
          "type": "string"
        },
        "userId": {
          "type": "string",
          "title": "set internally, automatically, by Prodvana if the action was initiated by a user"
        }
      },
      "description": "all of these fields are optional and only set if it makes sense for a given source."
    },
    "volumesVolume": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "source": {
          "$ref": "#/definitions/volumesVolumeSource"
        },
        "mount": {
          "$ref": "#/definitions/volumesVolumeMount"
        }
      }
    },
    "volumesVolumeMount": {
      "type": "object",
      "properties": {
        "mountPath": {
          "type": "string"
        },
        "readOnly": {
          "type": "boolean"
        }
      }
    },
    "volumesVolumeSource": {
      "type": "object",
      "properties": {
        "secret": {
          "$ref": "#/definitions/VolumeSourceSecretSource"
        },
        "ephemeral": {
          "$ref": "#/definitions/VolumeSourceEphemeralSource"
        }
      }
    },
    "workflowAddHoneycombEnvironmentReq": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "apiKey": {
          "type": "string"
        }
      }
    },
    "workflowAddHoneycombEnvironmentResp": {
      "type": "object",
      "properties": {
        "integrationId": {
          "type": "string"
        }
      }
    },
    "workflowAlertingConfig": {
      "type": "object",
      "properties": {
        "pagerduty": {
          "$ref": "#/definitions/AlertingConfigPagerDuty"
        }
      }
    },
    "workflowAnnotationsConfig": {
      "type": "object",
      "properties": {
        "honeycomb": {
          "$ref": "#/definitions/AnnotationsConfigHoneycomb"
        }
      }
    },
    "workflowContainerRegistryIntegration": {
      "type": "object",
      "properties": {
        "integrationId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "title": "Implicit from registry_info below"
        },
        "status": {
          "$ref": "#/definitions/workflowRegistryStatus"
        },
        "ecrInfo": {
          "$ref": "#/definitions/workflowContainerRegistryIntegrationECRInfo"
        },
        "repositories": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/workflowTrackedImageRepository"
          }
        }
      }
    },
    "workflowContainerRegistryIntegrationECRInfo": {
      "type": "object",
      "properties": {
        "region": {
          "type": "string"
        }
      }
    },
    "workflowCreateContainerRegistryIntegrationReq": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "readable name for this registry"
        },
        "url": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "secret": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/workflowRegistryType"
        },
        "ecrOptions": {
          "$ref": "#/definitions/CreateContainerRegistryIntegrationReqECROptions"
        },
        "publicRegistryOptions": {
          "$ref": "#/definitions/CreateContainerRegistryIntegrationReqPublicRegistryOptions"
        }
      }
    },
    "workflowCreateContainerRegistryIntegrationRes": {
      "type": "object",
      "properties": {
        "integrationId": {
          "type": "string"
        }
      }
    },
    "workflowCreateGitHubAppResp": {
      "type": "object",
      "properties": {
        "integrationId": {
          "type": "string"
        }
      }
    },
    "workflowDeleteContainerRegistryIntegrationResp": {
      "type": "object"
    },
    "workflowDeleteHoneycombEnvironmentResp": {
      "type": "object"
    },
    "workflowDeleteIntegrationResp": {
      "type": "object"
    },
    "workflowGetContainerRegistryImagesRes": {
      "type": "object",
      "properties": {
        "images": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/workflowRegistryImage"
          },
          "title": "will be sorted by creation time, descending"
        },
        "nextPageToken": {
          "type": "string"
        }
      }
    },
    "workflowGetContainerRegistryIntegrationResp": {
      "type": "object",
      "properties": {
        "registry": {
          "$ref": "#/definitions/workflowContainerRegistryIntegration"
        }
      }
    },
    "workflowGetGrafanaInstallationResp": {
      "type": "object",
      "properties": {
        "integrationId": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "workflowGetImageCommitInfoResp": {
      "type": "object",
      "properties": {
        "commit": {
          "$ref": "#/definitions/repoCommit",
          "title": "will be null if the image does not have any commit attached, or commit integration is not configured"
        },
        "repository": {
          "type": "string"
        }
      }
    },
    "workflowGetInstallGitHubUrlResp": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        },
        "manifest": {
          "type": "string"
        }
      }
    },
    "workflowGetInstallPagerDutyUrlResp": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        }
      }
    },
    "workflowGetInstallSlackUrlResp": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        }
      }
    },
    "workflowGetProgramDefaultsResp": {
      "type": "object",
      "properties": {
        "programDefaults": {
          "$ref": "#/definitions/workflowProgramDefaults"
        }
      }
    },
    "workflowGetServiceImageInfoResp": {
      "type": "object",
      "properties": {
        "serviceId": {
          "type": "string"
        },
        "serviceName": {
          "type": "string"
        },
        "versionInfos": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/GetServiceImageInfoRespVersionInfo"
          }
        }
      }
    },
    "workflowGetServiceImageInfoRespPerReleaseChannel": {
      "type": "object",
      "properties": {
        "releaseChannel": {
          "type": "string"
        },
        "programInfos": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/GetServiceImageInfoRespProgramInfo"
          }
        }
      }
    },
    "workflowGetTrackedImageRepositoryResp": {
      "type": "object",
      "properties": {
        "repository": {
          "$ref": "#/definitions/workflowTrackedImageRepository"
        }
      }
    },
    "workflowIndexStatus": {
      "type": "string",
      "enum": [
        "IS_UNKNOWN",
        "PENDING",
        "INDEXING",
        "INDEXED"
      ],
      "default": "IS_UNKNOWN",
      "title": "- PENDING: indexing requested but has not indexed before\n - INDEXING: indexing operation in progress\n - INDEXED: steady-state, has been indexed before but no ongoing operation"
    },
    "workflowInstallGitHubResp": {
      "type": "object"
    },
    "workflowInstallGrafanaReq": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        },
        "apiToken": {
          "type": "string"
        }
      }
    },
    "workflowInstallGrafanaResp": {
      "type": "object",
      "properties": {
        "integrationId": {
          "type": "string"
        }
      }
    },
    "workflowInstallPagerDutyResp": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "workflowInstallSlackResp": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "workflowIntegration": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "workflowListContainerRegistryIntegrationsResp": {
      "type": "object",
      "properties": {
        "containerRegistries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ListContainerRegistryIntegrationsRespContainerRegistryIntegrationInfo"
          }
        }
      }
    },
    "workflowListContainerRegistryIntegrationsRespECRInfo": {
      "type": "object",
      "properties": {
        "region": {
          "type": "string"
        }
      }
    },
    "workflowListHoneycombEnvironmentsResp": {
      "type": "object",
      "properties": {
        "environments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ListHoneycombEnvironmentsRespHoneycombEnvironment"
          }
        }
      }
    },
    "workflowListIntegrationsResp": {
      "type": "object",
      "properties": {
        "integrations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/workflowIntegration"
          }
        }
      }
    },
    "workflowListRepoCommitsResp": {
      "type": "object",
      "properties": {
        "commits": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/repoCommit"
          }
        },
        "nextPageToken": {
          "type": "string"
        }
      }
    },
    "workflowListTrackedImageRepositoriesResp": {
      "type": "object",
      "properties": {
        "repositories": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/workflowTrackedImageRepository"
          }
        }
      }
    },
    "workflowProgramDefaults": {
      "type": "object",
      "properties": {
        "cmd": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "entrypoint": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "env": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/common_configEnvValue"
          }
        },
        "ports": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/common_configPortConfig"
          }
        }
      },
      "title": "when updating this, make sure to also invalidate docker image cache warmer"
    },
    "workflowRegistryImage": {
      "type": "object",
      "properties": {
        "created": {
          "type": "string",
          "format": "date-time"
        },
        "url": {
          "type": "string"
        },
        "tag": {
          "type": "string"
        },
        "commit": {
          "$ref": "#/definitions/repoCommit"
        }
      }
    },
    "workflowRegistryStatus": {
      "type": "string",
      "enum": [
        "UNDEFINED",
        "CONNECTED",
        "FAILED",
        "RS_PENDING"
      ],
      "default": "UNDEFINED",
      "title": "- FAILED: Augment/replace with UNAUTHENTICATED, UNAVAILABLE, ... in the future"
    },
    "workflowRegistryType": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "DOCKER_REGISTRY",
        "ECR"
      ],
      "default": "UNKNOWN"
    },
    "workflowStopTrackingImageRepositoryResp": {
      "type": "object"
    },
    "workflowTrackImageRepositoriesResp": {
      "type": "object"
    },
    "workflowTrackedImageRepository": {
      "type": "object",
      "properties": {
        "repository": {
          "type": "string"
        },
        "lastIndex": {
          "type": "string",
          "format": "date-time"
        },
        "indexStatus": {
          "$ref": "#/definitions/workflowIndexStatus"
        }
      }
    },
    "workflowUninstallGrafanaResp": {
      "type": "object",
      "properties": {
        "integrationId": {
          "type": "string"
        }
      }
    },
    "workflowUninstallHoneycombResp": {
      "type": "object",
      "properties": {
        "integrationIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "workflowUninstallPagerDutyResp": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        }
      }
    },
    "workflowUninstallSlackResp": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        }
      }
    },
    "workflowUpdateHoneycombEnvironmentResp": {
      "type": "object"
    }
  }
}
