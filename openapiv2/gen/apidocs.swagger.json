{
  "swagger": "2.0",
  "info": {
    "title": "prodvana/agent/agent_interaction.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "prodvana.application.ApplicationManager"
    },
    {
      "name": "prodvana.auth.AuthManager"
    },
    {
      "name": "prodvana.auth.AuthSessionManager"
    },
    {
      "name": "prodvana.auth.ApiTokenManager"
    },
    {
      "name": "prodvana.blobs.BlobsManager"
    },
    {
      "name": "prodvana.delivery_extension.DeliveryExtensionManager"
    },
    {
      "name": "prodvana.desired_state.DesiredStateManager"
    },
    {
      "name": "prodvana.environment.EnvironmentManager"
    },
    {
      "name": "prodvana.events.EventsManager"
    },
    {
      "name": "prodvana.managed_resource.ResourceManager"
    },
    {
      "name": "prodvana.organization.OrganizationManager"
    },
    {
      "name": "prodvana.protection.ProtectionManager"
    },
    {
      "name": "prodvana.release_channel.ReleaseChannelManager"
    },
    {
      "name": "prodvana.environment.SecretsManager"
    },
    {
      "name": "prodvana.service.ServiceManager"
    },
    {
      "name": "prodvana.settings.organization.UsersSettingsManager"
    },
    {
      "name": "prodvana.workflow.WorkflowManager"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/applications": {
      "get": {
        "operationId": "ApplicationManager_ListApplications",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/applicationListApplicationsResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "detailed",
            "description": "if not set, only meta without version is returned",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "prodvana.application.ApplicationManager"
        ]
      }
    },
    "/v1/applications/configure": {
      "post": {
        "operationId": "ApplicationManager_ConfigureApplication",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/applicationConfigureApplicationResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/applicationConfigureApplicationReq"
            }
          }
        ],
        "tags": [
          "prodvana.application.ApplicationManager"
        ]
      }
    },
    "/v1/applications/configure/validate": {
      "post": {
        "operationId": "ApplicationManager_ValidateConfigureApplication",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/applicationValidateConfigureApplicationResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/applicationConfigureApplicationReq"
            }
          }
        ],
        "tags": [
          "prodvana.application.ApplicationManager"
        ]
      }
    },
    "/v1/applications/{application}": {
      "get": {
        "operationId": "ApplicationManager_GetApplication",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/applicationGetApplicationResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "prodvana.application.ApplicationManager"
        ]
      }
    },
    "/v1/applications/{application}/config": {
      "get": {
        "operationId": "ApplicationManager_GetApplicationConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/applicationGetApplicationConfigResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "version",
            "description": "omit to get latest version",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "prodvana.application.ApplicationManager"
        ]
      }
    },
    "/v1/applications/{application}/insights": {
      "get": {
        "operationId": "ApplicationManager_GetApplicationInsights",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/applicationGetApplicationInsightsResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "prodvana.application.ApplicationManager"
        ]
      }
    },
    "/v1/applications/{application}/insights/snooze": {
      "put": {
        "operationId": "ApplicationManager_SnoozeApplicationInsight",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/applicationSnoozeApplicationInsightResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "class",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN",
              "SUCCESSFUL_DEPLOYMENT_FREQUENCY_DECREASE",
              "DEPLOYMENT_FAILURE_RATE_INCREASE",
              "MEDIAN_SUCCESSFUL_DEPLOYMENT_DURATION_INCREASE",
              "MEDIAN_SUCCESSFUL_ROLLBACK_DURATION_INCREASE"
            ],
            "default": "UNKNOWN"
          },
          {
            "name": "duration",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "prodvana.application.ApplicationManager"
        ]
      }
    },
    "/v1/applications/{application}/metadata": {
      "get": {
        "summary": "Get application metadata, useful for constructing edit workflows for metadata",
        "operationId": "ApplicationManager_GetApplicationMetadata",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/applicationGetApplicationMetadataResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "prodvana.application.ApplicationManager"
        ]
      },
      "post": {
        "operationId": "ApplicationManager_SetApplicationMetadata",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/applicationSetApplicationMetadataResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "metadata": {
                  "$ref": "#/definitions/applicationApplicationUserMetadata"
                }
              }
            }
          }
        ],
        "tags": [
          "prodvana.application.ApplicationManager"
        ]
      }
    },
    "/v1/applications/{application}/metrics": {
      "get": {
        "operationId": "ApplicationManager_GetApplicationMetrics",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/applicationGetApplicationMetricsResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "startTimestamp",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endTimestamp",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "tags": [
          "prodvana.application.ApplicationManager"
        ]
      }
    },
    "/v1/applications/{application}/release-channels": {
      "get": {
        "operationId": "ReleaseChannelManager_ListReleaseChannels",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/release_channelListReleaseChannelsResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "prodvana.release_channel.ReleaseChannelManager"
        ]
      }
    },
    "/v1/applications/{application}/release-channels/{releaseChannel}": {
      "get": {
        "operationId": "ReleaseChannelManager_GetReleaseChannel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/release_channelGetReleaseChannelResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "releaseChannel",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "prodvana.release_channel.ReleaseChannelManager"
        ]
      }
    },
    "/v1/applications/{application}/release-channels/{releaseChannel}/events": {
      "get": {
        "operationId": "ReleaseChannelManager_GetReleaseChannelEvents",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/release_channelGetReleaseChannelEventsResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "releaseChannel",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "pageToken",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "orderByDescTimestamp",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "prodvana.release_channel.ReleaseChannelManager"
        ]
      }
    },
    "/v1/applications/{application}/services": {
      "get": {
        "operationId": "ServiceManager_ListServices",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/serviceListServicesResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "detailed",
            "description": "if not set, only meta without version is returned",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "prodvana.service.ServiceManager"
        ]
      }
    },
    "/v1/applications/{application}/services/{service}": {
      "get": {
        "operationId": "ServiceManager_GetService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/serviceGetServiceResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "service",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "prodvana.service.ServiceManager"
        ]
      }
    },
    "/v1/applications/{application}/services/{service}/commits": {
      "get": {
        "operationId": "ServiceManager_ListCommits",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/serviceListCommitsResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "service",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "pageToken",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "prodvana.service.ServiceManager"
        ]
      }
    },
    "/v1/applications/{application}/services/{service}/desired_states": {
      "get": {
        "operationId": "DesiredStateManager_GetServiceDesiredStateHistory",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/desired_stateGetServiceDesiredStateHistoryResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "service",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "pageToken",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "prodvana.desired_state.DesiredStateManager"
        ]
      }
    },
    "/v1/applications/{application}/services/{service}/image": {
      "get": {
        "operationId": "WorkflowManager_GetServiceImageInfo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/workflowGetServiceImageInfoResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "service",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "versions",
            "description": "omit to get just the latest version",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "prodvana.workflow.WorkflowManager"
        ]
      }
    },
    "/v1/applications/{application}/services/{service}/insights": {
      "get": {
        "operationId": "ServiceManager_GetServiceInsights",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/serviceGetServiceInsightsResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "service",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "prodvana.service.ServiceManager"
        ]
      }
    },
    "/v1/applications/{application}/services/{service}/insights/snooze": {
      "put": {
        "operationId": "ServiceManager_SnoozeServiceInsight",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/serviceSnoozeServiceInsightResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "service",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "class",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN",
              "SUCCESSFUL_DEPLOYMENT_FREQUENCY_DECREASE",
              "DEPLOYMENT_FAILURE_RATE_INCREASE",
              "MEDIAN_SUCCESSFUL_DEPLOYMENT_DURATION_INCREASE",
              "MEDIAN_SUCCESSFUL_ROLLBACK_DURATION_INCREASE"
            ],
            "default": "UNKNOWN"
          },
          {
            "name": "duration",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "prodvana.service.ServiceManager"
        ]
      }
    },
    "/v1/applications/{application}/services/{service}/last_converged": {
      "get": {
        "operationId": "DesiredStateManager_GetServiceLastConvergedStates",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/desired_stateGetServiceLastConvergedStateResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "service",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "prodvana.desired_state.DesiredStateManager"
        ]
      }
    },
    "/v1/applications/{application}/services/{service}/latest_desired_state": {
      "get": {
        "operationId": "DesiredStateManager_GetServiceDesiredStateConvergenceSummary",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/desired_stateGetServiceDesiredStateConvergenceSummaryResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "service",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "prodvana.desired_state.DesiredStateManager"
        ]
      }
    },
    "/v1/applications/{application}/services/{service}/metadata": {
      "get": {
        "operationId": "ServiceManager_GetServiceMetadata",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/serviceGetServiceMetadataResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "service",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "prodvana.service.ServiceManager"
        ]
      },
      "post": {
        "operationId": "ServiceManager_SetServiceMetadata",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/serviceSetServiceMetadataResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "service",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "metadata": {
                  "$ref": "#/definitions/serviceServiceUserMetadata"
                }
              }
            }
          }
        ],
        "tags": [
          "prodvana.service.ServiceManager"
        ]
      }
    },
    "/v1/applications/{application}/services/{service}/metrics": {
      "get": {
        "operationId": "ServiceManager_GetServiceMetrics",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/serviceGetServiceMetricsResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "service",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "startTimestamp",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endTimestamp",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "includeCost",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "prodvana.service.ServiceManager"
        ]
      }
    },
    "/v1/applications/{application}/services/{service}/release-channels": {
      "get": {
        "operationId": "ServiceManager_ListServiceInstances",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/serviceListServiceInstancesResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "service",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "prodvana.service.ServiceManager"
        ]
      }
    },
    "/v1/applications/{application}/services/{service}/release-channels/{releaseChannel}": {
      "get": {
        "operationId": "ServiceManager_GetServiceInstance",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/serviceGetServiceInstanceResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "service",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "releaseChannel",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "prodvana.service.ServiceManager"
        ]
      }
    },
    "/v1/auth/api/create_org_token": {
      "post": {
        "summary": "Create an api token tied to the organization. This api token is not tied to the user in anyway,\ne.g. if the user is deleted, the token will continue to have access to the organization.\nThis token currently does not expire, so be very careful with storing them.",
        "operationId": "ApiTokenManager_CreateOrgApiToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/authCreateOrgApiTokenResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/authEmpty"
            }
          }
        ],
        "tags": [
          "prodvana.auth.ApiTokenManager"
        ]
      }
    },
    "/v1/auth/api/org_tokens": {
      "get": {
        "operationId": "ApiTokenManager_ListOrgApiTokens",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/authListOrgApiTokensResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "prodvana.auth.ApiTokenManager"
        ]
      }
    },
    "/v1/auth/api/org_tokens/create": {
      "post": {
        "operationId": "ApiTokenManager_CreateOrgApiToken2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/authCreateOrgApiTokenResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/authCreateOrgApiTokenReq"
            }
          }
        ],
        "tags": [
          "prodvana.auth.ApiTokenManager"
        ]
      }
    },
    "/v1/auth/api/org_tokens/{name}": {
      "delete": {
        "operationId": "ApiTokenManager_DeleteOrgApiToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/authDeleteOrgApiTokenResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "prodvana.auth.ApiTokenManager"
        ]
      }
    },
    "/v1/auth/get_auth_url": {
      "get": {
        "operationId": "AuthManager_GetAuthUrl",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/authGetAuthUrlResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "state",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "forCli",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "invitation",
            "description": "optional invitation id for the invite flow",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "prodvanaOnlyAdminOrg",
            "description": "prodvana internal use",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "prodvana.auth.AuthManager"
        ]
      }
    },
    "/v1/auth/get_token": {
      "get": {
        "summary": "web auth flow\nTODO(naphat) we should make this only available to our UI app",
        "operationId": "AuthManager_GetAuthToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/authGetAuthTokenResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "redirectUrl",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "forCli",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "prodvanaOnlyAdminOrg",
            "description": "prodvana internal use",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "prodvana.auth.AuthManager"
        ]
      }
    },
    "/v1/auth/refresh_auth_token": {
      "post": {
        "operationId": "AuthManager_RefreshToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/authGetAuthTokenResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/authRefreshTokenReq"
            }
          }
        ],
        "tags": [
          "prodvana.auth.AuthManager"
        ]
      }
    },
    "/v1/auth/session/check": {
      "get": {
        "summary": "check if user is authenticated and token is still valid",
        "operationId": "AuthSessionManager_Check",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/authEmpty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "prodvana.auth.AuthSessionManager"
        ]
      }
    },
    "/v1/blobs/cas/{id}": {
      "get": {
        "operationId": "BlobsManager_GetCasBlob",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/blobsGetCasBlobResp"
                },
                "error": {
                  "$ref": "#/definitions/googlerpcStatus"
                }
              },
              "title": "Stream result of blobsGetCasBlobResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "prodvana.blobs.BlobsManager"
        ]
      }
    },
    "/v1/clusters/configure": {
      "post": {
        "operationId": "EnvironmentManager_ConfigureCluster",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/environmentConfigureClusterResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/environmentConfigureClusterReq"
            }
          }
        ],
        "tags": [
          "prodvana.environment.EnvironmentManager"
        ]
      }
    },
    "/v1/clusters/configure/validate": {
      "post": {
        "operationId": "EnvironmentManager_ValidateConfigureCluster",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/environmentValidateConfigureClusterResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/environmentConfigureClusterReq"
            }
          }
        ],
        "tags": [
          "prodvana.environment.EnvironmentManager"
        ]
      }
    },
    "/v1/clusters/get_auth": {
      "get": {
        "operationId": "EnvironmentManager_GetClusterAuth",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/environmentGetClusterAuthResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "prodvana.environment.EnvironmentManager"
        ]
      }
    },
    "/v1/clusters/get_status": {
      "get": {
        "operationId": "EnvironmentManager_GetClusterStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/environmentGetClusterStatusResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "prodvana.environment.EnvironmentManager"
        ]
      }
    },
    "/v1/clusters/link": {
      "post": {
        "operationId": "EnvironmentManager_LinkCluster",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/environmentLinkClusterResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/environmentLinkClusterReq"
            }
          }
        ],
        "tags": [
          "prodvana.environment.EnvironmentManager"
        ]
      }
    },
    "/v1/clusters/list": {
      "get": {
        "operationId": "EnvironmentManager_ListClusters",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/environmentListClustersResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "prodvana.environment.EnvironmentManager"
        ]
      }
    },
    "/v1/clusters/remove": {
      "post": {
        "operationId": "EnvironmentManager_RemoveCluster",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/environmentRemoveClusterResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/environmentRemoveClusterReq"
            }
          }
        ],
        "tags": [
          "prodvana.environment.EnvironmentManager"
        ]
      }
    },
    "/v1/clusters/{runtimeName}/config": {
      "post": {
        "operationId": "EnvironmentManager_GetClusterConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/environmentGetClusterConfigResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "runtimeName",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "tags": [
          "prodvana.environment.EnvironmentManager"
        ]
      }
    },
    "/v1/clusters/{runtimeName}/detect-config": {
      "post": {
        "operationId": "EnvironmentManager_DetectClusterConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/environmentDetectClusterConfigResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "runtimeName",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "tags": [
          "prodvana.environment.EnvironmentManager"
        ]
      }
    },
    "/v1/delivery_extension/{deliveryExtension}": {
      "get": {
        "operationId": "DeliveryExtensionManager_GetDeliveryExtension",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/delivery_extensionGetDeliveryExtensionResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "deliveryExtension",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "prodvana.delivery_extension.DeliveryExtensionManager"
        ]
      }
    },
    "/v1/delivery_extension/{deliveryExtension}/config": {
      "get": {
        "operationId": "DeliveryExtensionManager_GetDeliveryExtensionConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/delivery_extensionGetDeliveryExtensionConfigResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "deliveryExtension",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "version",
            "description": "omit to get latest version",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "prodvana.delivery_extension.DeliveryExtensionManager"
        ]
      }
    },
    "/v1/delivery_extensions": {
      "get": {
        "operationId": "DeliveryExtensionManager_ListDeliveryExtensions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/delivery_extensionListDeliveryExtensionsResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pageToken",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "prodvana.delivery_extension.DeliveryExtensionManager"
        ]
      }
    },
    "/v1/delivery_extensions/configure": {
      "post": {
        "operationId": "DeliveryExtensionManager_ConfigureDeliveryExtension",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/delivery_extensionConfigureDeliveryExtensionResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/delivery_extensionConfigureDeliveryExtensionReq"
            }
          }
        ],
        "tags": [
          "prodvana.delivery_extension.DeliveryExtensionManager"
        ]
      }
    },
    "/v1/delivery_extensions/configure/validate": {
      "post": {
        "operationId": "DeliveryExtensionManager_ValidateConfigureDeliveryExtension",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/delivery_extensionValidateConfigureDeliveryExtensionResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/delivery_extensionConfigureDeliveryExtensionReq"
            }
          }
        ],
        "tags": [
          "prodvana.delivery_extension.DeliveryExtensionManager"
        ]
      }
    },
    "/v1/desired_states": {
      "post": {
        "operationId": "DesiredStateManager_SetDesiredState",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/desired_stateSetDesiredStateResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/desired_stateSetDesiredStateReq"
            }
          }
        ],
        "tags": [
          "prodvana.desired_state.DesiredStateManager"
        ]
      }
    },
    "/v1/desired_states/approve_manual_condition": {
      "post": {
        "operationId": "DesiredStateManager_SetManualApproval",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/desired_stateSetManualApprovalResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/desired_stateSetManualApprovalReq"
            }
          }
        ],
        "tags": [
          "prodvana.desired_state.DesiredStateManager"
        ]
      }
    },
    "/v1/desired_states/bypass_protection": {
      "post": {
        "operationId": "DesiredStateManager_BypassProtection",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/desired_stateBypassProtectionResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/desired_stateBypassProtectionReq"
            }
          }
        ],
        "tags": [
          "prodvana.desired_state.DesiredStateManager"
        ]
      }
    },
    "/v1/desired_states/promote_delivery": {
      "post": {
        "operationId": "DesiredStateManager_PromoteDelivery",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/desired_statePromoteDeliveryResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/desired_statePromoteDeliveryReq"
            }
          }
        ],
        "tags": [
          "prodvana.desired_state.DesiredStateManager"
        ]
      }
    },
    "/v1/desired_states/validate": {
      "post": {
        "operationId": "DesiredStateManager_ValidateDesiredState",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/desired_stateValidateDesiredStateResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/desired_stateValidateDesiredStateReq"
            }
          }
        ],
        "tags": [
          "prodvana.desired_state.DesiredStateManager"
        ]
      }
    },
    "/v1/desired_states/{desiredStateId}": {
      "get": {
        "operationId": "DesiredStateManager_GetDesiredState",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/desired_stateGetDesiredStateResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "desiredStateId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "prodvana.desired_state.DesiredStateManager"
        ]
      }
    },
    "/v1/desired_states/{desiredStateId}/summary": {
      "get": {
        "operationId": "DesiredStateManager_GetDesiredStateConvergenceSummary",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/desired_stateGetDesiredStateConvergenceSummaryResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "desiredStateId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "prodvana.desired_state.DesiredStateManager"
        ]
      }
    },
    "/v1/events": {
      "post": {
        "operationId": "EventsManager_GetEvents",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/eventsGetEventsResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/eventsGetEventsReq"
            }
          }
        ],
        "tags": [
          "prodvana.events.EventsManager"
        ]
      }
    },
    "/v1/integrations": {
      "get": {
        "operationId": "WorkflowManager_ListIntegrations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/workflowListIntegrationsResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "prodvana.workflow.WorkflowManager"
        ]
      }
    },
    "/v1/integrations/container-registry": {
      "get": {
        "operationId": "WorkflowManager_ListContainerRegistryIntegrations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/workflowListContainerRegistryIntegrationsResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "fetchStatus",
            "description": "if true, verifies connection to registry",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "prodvana.workflow.WorkflowManager"
        ]
      }
    },
    "/v1/integrations/container-registry/create": {
      "post": {
        "operationId": "WorkflowManager_CreateContainerRegistryIntegration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/workflowCreateContainerRegistryIntegrationRes"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/workflowCreateContainerRegistryIntegrationReq"
            }
          }
        ],
        "tags": [
          "prodvana.workflow.WorkflowManager"
        ]
      }
    },
    "/v1/integrations/container-registry/{registryName}": {
      "get": {
        "operationId": "WorkflowManager_GetContainerRegistryIntegration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/workflowGetContainerRegistryIntegrationResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "registryName",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "prodvana.workflow.WorkflowManager"
        ]
      },
      "delete": {
        "operationId": "WorkflowManager_DeleteContainerRegistryIntegration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/workflowDeleteContainerRegistryIntegrationResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "registryName",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "prodvana.workflow.WorkflowManager"
        ]
      }
    },
    "/v1/integrations/github/create": {
      "get": {
        "operationId": "WorkflowManager_CreateGitHubApp",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/workflowCreateGitHubAppResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "appId",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "privateKey",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "clientSecret",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "webhookSecret",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "githubOrganization",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "prodvana.workflow.WorkflowManager"
        ]
      }
    },
    "/v1/integrations/github/install": {
      "get": {
        "operationId": "WorkflowManager_InstallGitHub",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/workflowInstallGitHubResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "installationId",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "prodvana.workflow.WorkflowManager"
        ]
      }
    },
    "/v1/integrations/grafana": {
      "get": {
        "operationId": "WorkflowManager_GetGrafanaInstallation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/workflowGetGrafanaInstallationResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "prodvana.workflow.WorkflowManager"
        ]
      }
    },
    "/v1/integrations/grafana/install": {
      "post": {
        "operationId": "WorkflowManager_InstallGrafana",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/workflowInstallGrafanaResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/workflowInstallGrafanaReq"
            }
          }
        ],
        "tags": [
          "prodvana.workflow.WorkflowManager"
        ]
      }
    },
    "/v1/integrations/grafana/uninstall": {
      "delete": {
        "operationId": "WorkflowManager_UninstallGrafana",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/workflowUninstallGrafanaResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "prodvana.workflow.WorkflowManager"
        ]
      }
    },
    "/v1/integrations/honeycomb": {
      "delete": {
        "operationId": "WorkflowManager_UninstallHoneycomb",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/workflowUninstallHoneycombResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "prodvana.workflow.WorkflowManager"
        ]
      }
    },
    "/v1/integrations/honeycomb/environment": {
      "get": {
        "operationId": "WorkflowManager_ListHoneycombEnvironments",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/workflowListHoneycombEnvironmentsResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "prodvana.workflow.WorkflowManager"
        ]
      },
      "post": {
        "operationId": "WorkflowManager_AddHoneycombEnvironment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/workflowAddHoneycombEnvironmentResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/workflowAddHoneycombEnvironmentReq"
            }
          }
        ],
        "tags": [
          "prodvana.workflow.WorkflowManager"
        ]
      }
    },
    "/v1/integrations/honeycomb/environment/{name}": {
      "delete": {
        "operationId": "WorkflowManager_DeleteHoneycombEnvironment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/workflowDeleteHoneycombEnvironmentResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "prodvana.workflow.WorkflowManager"
        ]
      },
      "put": {
        "operationId": "WorkflowManager_UpdateHoneycombEnvironment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/workflowUpdateHoneycombEnvironmentResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "apiKey": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "tags": [
          "prodvana.workflow.WorkflowManager"
        ]
      }
    },
    "/v1/integrations/pagerduty/install": {
      "get": {
        "operationId": "WorkflowManager_InstallPagerDuty",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/workflowInstallPagerDutyResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "error",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "code",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "redirectUri",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "prodvana.workflow.WorkflowManager"
        ]
      }
    },
    "/v1/integrations/pagerduty/install-url": {
      "get": {
        "operationId": "WorkflowManager_GetInstallPagerDutyUrl",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/workflowGetInstallPagerDutyUrlResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "prodvana.workflow.WorkflowManager"
        ]
      }
    },
    "/v1/integrations/pagerduty/uninstall": {
      "delete": {
        "operationId": "WorkflowManager_UninstallPagerDuty",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/workflowUninstallPagerDutyResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "prodvana.workflow.WorkflowManager"
        ]
      }
    },
    "/v1/integrations/slack/install": {
      "get": {
        "operationId": "WorkflowManager_InstallSlack",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/workflowInstallSlackResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "error",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "code",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "redirectUri",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "prodvana.workflow.WorkflowManager"
        ]
      }
    },
    "/v1/integrations/slack/install-url": {
      "get": {
        "operationId": "WorkflowManager_GetInstallSlackUrl",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/workflowGetInstallSlackUrlResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "prodvana.workflow.WorkflowManager"
        ]
      }
    },
    "/v1/integrations/slack/uninstall": {
      "delete": {
        "operationId": "WorkflowManager_UninstallSlack",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/workflowUninstallSlackResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "prodvana.workflow.WorkflowManager"
        ]
      }
    },
    "/v1/integrations/{integrationId}": {
      "delete": {
        "operationId": "WorkflowManager_DeleteIntegration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/workflowDeleteIntegrationResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "integrationId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "prodvana.workflow.WorkflowManager"
        ]
      }
    },
    "/v1/integrations/{integrationId}/image-commit-info": {
      "get": {
        "operationId": "WorkflowManager_GetImageCommitInfo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/workflowGetImageCommitInfoResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "integrationId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "repository",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "tag",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "image",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "prodvana.workflow.WorkflowManager"
        ]
      }
    },
    "/v1/integrations/{integrationId}/images": {
      "get": {
        "operationId": "WorkflowManager_GetContainerRegistryImages",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/workflowGetContainerRegistryImagesRes"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "integrationId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "imageRepository",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "skipRegistryCache",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "pageToken",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "prodvana.workflow.WorkflowManager"
        ]
      }
    },
    "/v1/integrations/{integrationId}/program-defaults": {
      "get": {
        "operationId": "WorkflowManager_GetProgramDefaults",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/workflowGetProgramDefaultsResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "integrationId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "repository",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "tag",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "image",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "skipRegistryCache",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "prodvana.workflow.WorkflowManager"
        ]
      }
    },
    "/v1/integrations/{integrationId}/repo/{repository}": {
      "get": {
        "operationId": "WorkflowManager_GetTrackedImageRepository",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/workflowGetTrackedImageRepositoryResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "integrationId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "prodvana.workflow.WorkflowManager"
        ]
      }
    },
    "/v1/integrations/{integrationId}/repos": {
      "get": {
        "operationId": "WorkflowManager_ListTrackedImageRepositories",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/workflowListTrackedImageRepositoriesResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "integrationId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "prodvana.workflow.WorkflowManager"
        ]
      }
    },
    "/v1/integrations/{integrationId}/repos/track": {
      "post": {
        "operationId": "WorkflowManager_TrackImageRepositories",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/workflowTrackImageRepositoriesResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "integrationId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "repositories": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "prodvana.workflow.WorkflowManager"
        ]
      }
    },
    "/v1/integrations/{integrationId}/repos/untrack": {
      "delete": {
        "operationId": "WorkflowManager_StopTrackingImageRepository",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/workflowStopTrackingImageRepositoryResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "integrationId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "repository",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "prodvana.workflow.WorkflowManager"
        ]
      }
    },
    "/v1/managed_resources": {
      "get": {
        "operationId": "ResourceManager_ListManagedResources",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/managed_resourceListManagedResourcesResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "prodvana.managed_resource.ResourceManager"
        ]
      }
    },
    "/v1/managed_resources/k8s/configure": {
      "post": {
        "operationId": "ResourceManager_ConfigureK8sCluster",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/managed_resourceConfigureK8sClusterResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/managed_resourceConfigureK8sClusterReq"
            }
          }
        ],
        "tags": [
          "prodvana.managed_resource.ResourceManager"
        ]
      }
    },
    "/v1/managed_resources/{managedResource}": {
      "get": {
        "operationId": "ResourceManager_GetManagedResource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/managed_resourceGetManagedResourceResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "managedResource",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "prodvana.managed_resource.ResourceManager"
        ]
      }
    },
    "/v1/managed_resources/{managedResource}/archive/archive/archive/archive": {
      "get": {
        "operationId": "ResourceManager_GetArchive",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/managed_resourceGetArchiveResp"
                },
                "error": {
                  "$ref": "#/definitions/googlerpcStatus"
                }
              },
              "title": "Stream result of managed_resourceGetArchiveResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "managedResource",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "version",
            "description": "default to latest version",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "prodvana.managed_resource.ResourceManager"
        ]
      }
    },
    "/v1/managed_resources/{managedResource}/delete": {
      "delete": {
        "operationId": "ResourceManager_DeleteManagedResource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/managed_resourceDeleteManagedResourceResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "managedResource",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "prodvana.managed_resource.ResourceManager"
        ]
      }
    },
    "/v1/organization": {
      "get": {
        "operationId": "OrganizationManager_GetOrganization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/organizationGetOrganizationResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "prodvana.organization.OrganizationManager"
        ]
      }
    },
    "/v1/organization/insights": {
      "get": {
        "operationId": "OrganizationManager_GetOrganizationInsights",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/organizationGetOrganizationInsightsResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "prodvana.organization.OrganizationManager"
        ]
      }
    },
    "/v1/organization/insights/snooze": {
      "put": {
        "operationId": "OrganizationManager_SnoozeOrganizationInsight",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/organizationSnoozeOrganizationInsightResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "class",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN",
              "SUCCESSFUL_DEPLOYMENT_FREQUENCY_DECREASE",
              "DEPLOYMENT_FAILURE_RATE_INCREASE",
              "MEDIAN_SUCCESSFUL_DEPLOYMENT_DURATION_INCREASE",
              "MEDIAN_SUCCESSFUL_ROLLBACK_DURATION_INCREASE"
            ],
            "default": "UNKNOWN"
          },
          {
            "name": "duration",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "prodvana.organization.OrganizationManager"
        ]
      }
    },
    "/v1/organization/metadata": {
      "get": {
        "summary": "Get org metadata, useful for constructing edit workflows for metadata",
        "operationId": "OrganizationManager_GetOrganizationMetadata",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/organizationGetOrganizationMetadataResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "prodvana.organization.OrganizationManager"
        ]
      },
      "post": {
        "operationId": "OrganizationManager_SetOrganizationMetadata",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/organizationSetOrganizationMetadataResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/organizationSetOrganizationMetadataReq"
            }
          }
        ],
        "tags": [
          "prodvana.organization.OrganizationManager"
        ]
      }
    },
    "/v1/organization/metrics": {
      "get": {
        "operationId": "OrganizationManager_GetOrganizationMetrics",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/organizationGetOrganizationMetricsResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "startTimestamp",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endTimestamp",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "tags": [
          "prodvana.organization.OrganizationManager"
        ]
      }
    },
    "/v1/organization/user/{userId}": {
      "get": {
        "summary": "Get a user in an organization, will return NOT_FOUND if the user is eitehr missing or not in an organization",
        "operationId": "OrganizationManager_GetUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/prodvanaorganizationGetUserResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "prodvana.organization.OrganizationManager"
        ]
      }
    },
    "/v1/protections": {
      "get": {
        "operationId": "ProtectionManager_ListProtections",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protectionListProtectionsResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pageToken",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "prodvana.protection.ProtectionManager"
        ]
      }
    },
    "/v1/protections/configure": {
      "post": {
        "operationId": "ProtectionManager_ConfigureProtection",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protectionConfigureProtectionResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/protectionConfigureProtectionReq"
            }
          }
        ],
        "tags": [
          "prodvana.protection.ProtectionManager"
        ]
      }
    },
    "/v1/protections/configure/validate": {
      "post": {
        "operationId": "ProtectionManager_ValidateConfigureProtection",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protectionValidateConfigureProtectionResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/protectionConfigureProtectionReq"
            }
          }
        ],
        "tags": [
          "prodvana.protection.ProtectionManager"
        ]
      }
    },
    "/v1/protections/{protection}": {
      "get": {
        "operationId": "ProtectionManager_GetProtection",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protectionGetProtectionResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "protection",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "prodvana.protection.ProtectionManager"
        ]
      }
    },
    "/v1/protections/{protection}/config": {
      "get": {
        "operationId": "ProtectionManager_GetProtectionConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protectionGetProtectionConfigResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "protection",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "version",
            "description": "omit to get latest version",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "prodvana.protection.ProtectionManager"
        ]
      }
    },
    "/v1/release-channels/configure": {
      "post": {
        "operationId": "ReleaseChannelManager_ConfigureReleaseChannel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/release_channelConfigureReleaseChannelResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/release_channelConfigureReleaseChannelReq"
            }
          }
        ],
        "tags": [
          "prodvana.release_channel.ReleaseChannelManager"
        ]
      }
    },
    "/v1/release-channels/{releaseChannel}/delete": {
      "delete": {
        "operationId": "ReleaseChannelManager_DeleteReleaseChannel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/release_channelDeleteReleaseChannelResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "releaseChannel",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "prodvana.release_channel.ReleaseChannelManager"
        ]
      }
    },
    "/v1/secrets": {
      "post": {
        "operationId": "SecretsManager_SetSecret",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/environmentSetSecretResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/environmentSetSecretReq"
            }
          }
        ],
        "tags": [
          "prodvana.environment.SecretsManager"
        ]
      }
    },
    "/v1/secrets/list": {
      "get": {
        "operationId": "SecretsManager_ListSecrets",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/environmentListSecretsResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "prodvana.environment.SecretsManager"
        ]
      }
    },
    "/v1/secrets/{key}/delete": {
      "delete": {
        "operationId": "SecretsManager_DeleteSecret",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/environmentDeleteSecretResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "prodvana.environment.SecretsManager"
        ]
      }
    },
    "/v1/secrets/{key}/versions": {
      "get": {
        "operationId": "SecretsManager_ListSecretVersions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/environmentListSecretVersionsResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "prodvana.environment.SecretsManager"
        ]
      }
    },
    "/v1/secrets/{key}/versions/{version}/delete": {
      "delete": {
        "operationId": "SecretsManager_DeleteSecretVersion",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/environmentDeleteSecretVersionResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "prodvana.environment.SecretsManager"
        ]
      }
    },
    "/v1/settings/organization/roles": {
      "get": {
        "operationId": "UsersSettingsManager_ListRoles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/organizationListRolesResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "prodvana.settings.organization.UsersSettingsManager"
        ]
      }
    },
    "/v1/settings/organization/users": {
      "get": {
        "operationId": "UsersSettingsManager_ListUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/organizationListUsersResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pageToken",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "prodvana.settings.organization.UsersSettingsManager"
        ]
      }
    },
    "/v1/settings/organization/users/{userId}": {
      "get": {
        "operationId": "UsersSettingsManager_GetUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/prodvanasettingsorganizationGetUserResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "prodvana.settings.organization.UsersSettingsManager"
        ]
      }
    },
    "/v1/settings/organization/users/{userId}/roles": {
      "post": {
        "operationId": "UsersSettingsManager_SetRoles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/organizationSetRolesResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "roles",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "prodvana.settings.organization.UsersSettingsManager"
        ]
      }
    },
    "/v1/{application}/delete": {
      "delete": {
        "operationId": "ApplicationManager_DeleteApplication",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/applicationDeleteApplicationResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "prodvana.application.ApplicationManager"
        ]
      }
    },
    "/v1/{application}/services/apply-parameters": {
      "post": {
        "operationId": "ServiceManager_ApplyParameters",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/serviceApplyParametersResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "description": "application can be specified here or as part of service config",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "serviceConfig": {
                  "$ref": "#/definitions/serviceServiceConfig"
                },
                "serviceConfigVersion": {
                  "$ref": "#/definitions/serviceServiceConfigVersionReference"
                },
                "parameters": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/common_configParameterValue"
                  }
                },
                "perReleaseChannel": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/serviceApplyParametersReqPerReleaseChannel"
                  }
                },
                "testOnlySkipRegistryCheck": {
                  "type": "boolean",
                  "title": "skip any kind of attempts to contact container registry, e.g. to check if image exists or get program defaults"
                },
                "source": {
                  "$ref": "#/definitions/versionSource"
                },
                "sourceMetadata": {
                  "$ref": "#/definitions/versionSourceMetadata"
                }
              }
            }
          }
        ],
        "tags": [
          "prodvana.service.ServiceManager"
        ]
      }
    },
    "/v1/{application}/services/apply-parameters/validate": {
      "post": {
        "operationId": "ServiceManager_ValidateApplyParameters",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/serviceValidateApplyParametersResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "description": "application can be specified here or as part of service config",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "serviceConfig": {
                  "$ref": "#/definitions/serviceServiceConfig"
                },
                "serviceConfigVersion": {
                  "$ref": "#/definitions/serviceServiceConfigVersionReference"
                },
                "parameters": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/common_configParameterValue"
                  }
                },
                "perReleaseChannel": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/serviceApplyParametersReqPerReleaseChannel"
                  }
                },
                "testOnlySkipRegistryCheck": {
                  "type": "boolean",
                  "title": "skip any kind of attempts to contact container registry, e.g. to check if image exists or get program defaults"
                },
                "source": {
                  "$ref": "#/definitions/versionSource"
                },
                "sourceMetadata": {
                  "$ref": "#/definitions/versionSourceMetadata"
                }
              }
            }
          }
        ],
        "tags": [
          "prodvana.service.ServiceManager"
        ]
      }
    },
    "/v1/{application}/services/configure2": {
      "post": {
        "operationId": "ServiceManager_ConfigureService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/serviceConfigureServiceResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "serviceConfig": {
                  "$ref": "#/definitions/serviceServiceConfig"
                },
                "source": {
                  "$ref": "#/definitions/versionSource"
                },
                "sourceMetadata": {
                  "$ref": "#/definitions/versionSourceMetadata"
                }
              }
            }
          }
        ],
        "tags": [
          "prodvana.service.ServiceManager"
        ]
      }
    },
    "/v1/{application}/services/{service}/config": {
      "get": {
        "summary": "unparametrized configs",
        "operationId": "ServiceManager_GetServiceConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/serviceGetServiceConfigResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "service",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "configVersion",
            "description": "omit to get latest",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "prodvana.service.ServiceManager"
        ]
      }
    },
    "/v1/{application}/services/{service}/config/versions": {
      "get": {
        "operationId": "ServiceManager_ListServiceConfigVersions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/serviceListServiceConfigVersionsResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "service",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "pageToken",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "prodvana.service.ServiceManager"
        ]
      }
    },
    "/v1/{application}/services/{service}/delete": {
      "delete": {
        "operationId": "ServiceManager_DeleteService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/serviceDeleteServiceResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "service",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "prodvana.service.ServiceManager"
        ]
      }
    },
    "/v1/{application}/services/{service}/materialized/config": {
      "get": {
        "operationId": "ServiceManager_GetMaterializedConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/serviceGetMaterializedConfigResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "service",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "version",
            "description": "omit to get latest version",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "prodvana.service.ServiceManager"
        ]
      }
    },
    "/v1/{application}/services/{service}/materialized/config/versions": {
      "get": {
        "operationId": "ServiceManager_ListMaterializedConfigVersions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/serviceListMaterializedConfigVersionsResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "service",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "pageToken",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "prodvana.service.ServiceManager"
        ]
      }
    }
  },
  "definitions": {
    "AlertingConfigPagerDuty": {
      "type": "object",
      "properties": {
        "service": {
          "type": "string"
        }
      }
    },
    "AnalysisTemplateArgValue": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "SERVICE",
        "RELEASE_CHANNEL"
      ],
      "default": "UNKNOWN"
    },
    "AnnotationsConfigHoneycomb": {
      "type": "object",
      "properties": {
        "environment": {
          "type": "string"
        },
        "dataset": {
          "type": "string"
        }
      }
    },
    "ApplyTargetStateEventApplyResult": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "SUCCEEDED",
        "FAILED"
      ],
      "default": "UNKNOWN"
    },
    "ArgoRolloutsAnalysisTemplate": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "argMapping": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/AnalysisTemplateArgValue"
          },
          "title": "template argument name to prodvana value to inject"
        }
      }
    },
    "CliAuthRespUserPrompt": {
      "type": "object",
      "properties": {
        "userCode": {
          "type": "string"
        },
        "verificationUri": {
          "type": "string"
        },
        "verificationUriComplete": {
          "type": "string"
        }
      }
    },
    "ClusterAuthECSAuth": {
      "type": "object",
      "properties": {
        "accessKey": {
          "type": "string"
        },
        "secretKey": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "assumeRoleArn": {
          "type": "string"
        },
        "clusterArn": {
          "type": "string"
        }
      }
    },
    "ClusterAuthK8sAuth": {
      "type": "object",
      "properties": {
        "agentEnv": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ClusterConfigALBIngress": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "ingressClass": {
          "type": "string"
        },
        "defaultBalancerAttributes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Attributes from https://docs.aws.amazon.com/elasticloadbalancing/latest/application/application-load-balancers.html#load-balancer-attributes\nthat are added to all Ingresses/LBs created in this runtime."
        }
      }
    },
    "ClusterConfigArgoRollouts": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "templates": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ArgoRolloutsAnalysisTemplate"
          }
        }
      }
    },
    "ClusterConfigCloudProvider": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "EKS",
        "GKE",
        "AKS",
        "ONPREM",
        "OTHER_CLOUD"
      ],
      "default": "UNKNOWN"
    },
    "ClusterConfigDatadog": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "managed": {
          "type": "boolean"
        },
        "datadogNamespace": {
          "type": "string"
        },
        "apiKey": {
          "type": "string"
        },
        "site": {
          "type": "string"
        }
      }
    },
    "ClusterConfigGKEIngress": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "containerNative": {
          "type": "boolean",
          "title": "Enables container native load balancing, allowing GCP LBs to target k8s pods directly.\nSee: https://cloud.google.com/kubernetes-engine/docs/how-to/container-native-load-balancing"
        }
      }
    },
    "ClusterConfigKubecost": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "managed": {
          "type": "boolean"
        },
        "kubecostNamespace": {
          "type": "string"
        }
      }
    },
    "ClusterInfoEcsInfo": {
      "type": "object",
      "properties": {
        "region": {
          "type": "string"
        },
        "clusterArn": {
          "type": "string"
        }
      }
    },
    "ClusterOrigin": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "PRODVANA",
        "EXTERNAL"
      ],
      "default": "UNKNOWN",
      "description": "Origin specifies where the cluster came from.\n\n - PRODVANA: our infra created it\n - EXTERNAL: created externally and added"
    },
    "ConditionCustomTaskSuccessfulCondition": {
      "type": "object",
      "properties": {
        "customTaskName": {
          "type": "string"
        },
        "protection": {
          "$ref": "#/definitions/ConditionCustomTaskSuccessfulConditionProtection"
        }
      }
    },
    "ConditionCustomTaskSuccessfulConditionProtection": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "taskType": {
          "$ref": "#/definitions/modelCustomTaskType"
        }
      }
    },
    "ConditionReleaseChannelStableCondition": {
      "type": "object",
      "properties": {
        "application": {
          "type": "string"
        },
        "service": {
          "type": "string",
          "title": "service name or id"
        },
        "serviceId": {
          "type": "string",
          "title": "service id, normalized. Set internally by Prodvana"
        },
        "releaseChannel": {
          "type": "string",
          "title": "release channel name or id"
        },
        "releaseChannelId": {
          "type": "string",
          "title": "release channel id, normalized. Set internally by Prodvana"
        },
        "serviceVersion": {
          "type": "string"
        }
      },
      "title": "TODO(naphat) conditions need health"
    },
    "ConfigureK8sClusterReqEKSOptions": {
      "type": "object",
      "properties": {
        "accessKey": {
          "type": "string"
        },
        "secretKey": {
          "type": "string"
        },
        "accountId": {
          "type": "string"
        },
        "roleArn": {
          "type": "string"
        }
      }
    },
    "ConfigureK8sClusterReqGcpOptions": {
      "type": "object",
      "properties": {
        "project": {
          "type": "string"
        },
        "credentials": {
          "type": "string",
          "title": "TODO(naphat) there should be an integrations table for this and elevate to top level data model"
        }
      }
    },
    "ContainerOrchestrationRuntimeECS": {
      "type": "object",
      "properties": {
        "prefix": {
          "type": "string"
        }
      }
    },
    "ContainerOrchestrationRuntimeK8s": {
      "type": "object",
      "properties": {
        "namespace": {
          "type": "string",
          "description": "optionally set a custom namespace. If not set, Prodvana will create and manage the namespace.\nIf set, the namespace *must* already exist and Prodvana will not try to create or delete it."
        },
        "pvnManaged": {
          "type": "boolean",
          "description": "do not set this, this is used internally by Prodvana to keep track of if a namespace\nis managed by Prodvana or externally."
        }
      }
    },
    "CreateContainerRegistryIntegrationReqECROptions": {
      "type": "object",
      "properties": {
        "accessKey": {
          "type": "string"
        },
        "secretKey": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "roleArn": {
          "type": "string"
        }
      }
    },
    "CreateContainerRegistryIntegrationReqPublicRegistryOptions": {
      "type": "object"
    },
    "DeploymentMetricsDeltas": {
      "type": "object",
      "properties": {
        "totalDeployments": {
          "type": "number",
          "format": "double"
        },
        "successfulDeployments": {
          "type": "number",
          "format": "double"
        },
        "successfulDeploymentsPerDay": {
          "type": "number",
          "format": "double"
        },
        "failedDeployments": {
          "type": "number",
          "format": "double"
        },
        "medianSuccessfulDeploymentDuration": {
          "type": "number",
          "format": "double"
        },
        "deploymentFailureRate": {
          "type": "number",
          "format": "double"
        },
        "totalRollbacks": {
          "type": "number",
          "format": "double"
        },
        "successfulRollbacks": {
          "type": "number",
          "format": "double"
        },
        "medianSuccessfulRollbackDuration": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "DeploymentMetricsTimeseriesMetrics": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "successfulDeployments": {
          "type": "number",
          "format": "double"
        },
        "failedDeployments": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "DeploymentMetricsValues": {
      "type": "object",
      "properties": {
        "totalDeployments": {
          "type": "number",
          "format": "double"
        },
        "successfulDeployments": {
          "type": "number",
          "format": "double"
        },
        "successfulDeploymentsPerDay": {
          "type": "number",
          "format": "double"
        },
        "failedDeployments": {
          "type": "number",
          "format": "double"
        },
        "medianSuccessfulDeploymentDuration": {
          "type": "string"
        },
        "deploymentFailureRate": {
          "type": "number",
          "format": "double"
        },
        "totalRollbacks": {
          "type": "number",
          "format": "double"
        },
        "successfulRollbacks": {
          "type": "number",
          "format": "double"
        },
        "medianSuccessfulRollbackDuration": {
          "type": "string"
        },
        "lastSuccessfulDeploymentCompletionTime": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "EphemeralSourceMedium": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "DEFAULT",
        "MEMORY"
      ],
      "default": "UNKNOWN",
      "title": "- DEFAULT: for kubernetes, this the the node's default storage medium"
    },
    "FakeClusterConfigCrashingProgramPatterns": {
      "type": "object",
      "properties": {
        "imageRegex": {
          "type": "string"
        },
        "cmdRegex": {
          "type": "string"
        },
        "logOutput": {
          "type": "string"
        }
      }
    },
    "GetServiceImageInfoRespProgramInfo": {
      "type": "object",
      "properties": {
        "imageUrl": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "GetServiceImageInfoRespVersionInfo": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "programInfos": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/GetServiceImageInfoRespProgramInfo"
          }
        },
        "perReleaseChannel": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/workflowGetServiceImageInfoRespPerReleaseChannel"
          }
        }
      }
    },
    "InsightSubject": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "KeyDeliveryDecisionEventDecision": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "ROLLBACK_INITIATED",
        "FAILED"
      ],
      "default": "UNKNOWN"
    },
    "KubernetesConfigEnvInjectionMode": {
      "type": "string",
      "enum": [
        "ENV_INJECT_UNKNOWN",
        "ENV_INJECT_DISABLED",
        "ENV_INJECT_NON_SECRET_ENV"
      ],
      "default": "ENV_INJECT_UNKNOWN",
      "title": "- ENV_INJECT_DISABLED: disables env injection entirely\n - ENV_INJECT_NON_SECRET_ENV: inject non-secret env values from the Release Channel"
    },
    "ListClustersRespClusterInfo": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "origin": {
          "$ref": "#/definitions/ClusterOrigin"
        },
        "endpoint": {
          "type": "string"
        },
        "serviceAccount": {
          "type": "string"
        },
        "writebackConfig": {
          "$ref": "#/definitions/config_writebackConfigWritebackPath"
        },
        "type": {
          "$ref": "#/definitions/environmentClusterType"
        },
        "ecs": {
          "$ref": "#/definitions/ClusterInfoEcsInfo"
        },
        "lastHeartbeatTimestamp": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ListContainerRegistryIntegrationsRespContainerRegistryIntegrationInfo": {
      "type": "object",
      "properties": {
        "integrationId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "title": "Implicit from registry_info below"
        },
        "status": {
          "$ref": "#/definitions/workflowRegistryStatus"
        },
        "ecrInfo": {
          "$ref": "#/definitions/workflowListContainerRegistryIntegrationsRespECRInfo"
        }
      }
    },
    "ListHoneycombEnvironmentsRespHoneycombEnvironment": {
      "type": "object",
      "properties": {
        "integrationId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "ManagedResourceRun": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "terminal": {
          "type": "boolean"
        },
        "creationTimestamp": {
          "type": "string",
          "format": "date-time"
        },
        "lastUpdateTimestamp": {
          "type": "string",
          "format": "date-time"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "MetricAnalysisLatencyConfig": {
      "type": "object",
      "properties": {
        "maxLatency": {
          "type": "string"
        }
      }
    },
    "MetricAnalysisSuccessRateConfig": {
      "type": "object",
      "properties": {
        "minThresholdPercent": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "NotificationConfigSlack": {
      "type": "object",
      "properties": {
        "channel": {
          "type": "string"
        }
      }
    },
    "ParallelTaskTaskTrack": {
      "type": "object",
      "properties": {
        "tasks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pipelinesTask"
          }
        }
      }
    },
    "PortConfigProtocol": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "HTTP",
        "HTTP2",
        "GRPC",
        "TCP"
      ],
      "default": "UNKNOWN"
    },
    "PreconditionReleaseChannelStable": {
      "type": "object",
      "properties": {
        "releaseChannel": {
          "type": "string"
        },
        "duration": {
          "type": "string"
        }
      }
    },
    "ProtectionLifecycleDeployment": {
      "type": "object"
    },
    "ProtectionLifecyclePostApproval": {
      "type": "object"
    },
    "ProtectionLifecyclePostDeployment": {
      "type": "object",
      "properties": {
        "delayCheckDuration": {
          "type": "string",
          "description": "How long after the deployment completes should we start checking status?\ne.g, delay health checks X minutes after deployment (if deployment is noisy)."
        },
        "checkDuration": {
          "type": "string",
          "title": "How long after starting should we check for?"
        }
      }
    },
    "ProtectionLifecyclePreApproval": {
      "type": "object"
    },
    "ProtectionLinkStateStopReason": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "LIFECYCLE_COMPLETED",
        "SUCCEEDED_ONCE",
        "SUCCEEDED_FOR_DURATION",
        "TIMED_OUT",
        "FAILED",
        "DELETED",
        "MANUALLY_BYPASSED"
      ],
      "default": "UNKNOWN"
    },
    "RuntimeObjectRuntimeExtension": {
      "type": "object",
      "properties": {
        "fetch": {
          "$ref": "#/definitions/environmentCompiledExtensionCommand"
        },
        "serviceId": {
          "type": "string"
        }
      }
    },
    "RuntimeSpecificConfigK8SConfig": {
      "type": "object",
      "properties": {
        "serviceAnnotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Annotations to add to the Kubernetes Service object"
        }
      }
    },
    "RuntimeUpdateEventRuntimeAction": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "CREATE_OR_UPDATE",
        "WAIT_HEALTHY"
      ],
      "default": "UNKNOWN"
    },
    "RuntimeUpdateEventRuntimeStatus": {
      "type": "string",
      "enum": [
        "RUNTIME_STATUS_UNKNOWN",
        "PENDING",
        "SUCCESS",
        "FAILURE"
      ],
      "default": "RUNTIME_STATUS_UNKNOWN"
    },
    "ServiceConfigParametersAutogen": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "NONE",
        "IMAGE",
        "IMAGE_AND_REPLICAS"
      ],
      "default": "UNKNOWN",
      "title": "- NONE: no autogen\n - IMAGE: autogen one parameter per program for the image\n - IMAGE_AND_REPLICAS: IMAGE + autogen a parameter for replicas count"
    },
    "VolumeSourceEphemeralSource": {
      "type": "object",
      "properties": {
        "medium": {
          "$ref": "#/definitions/EphemeralSourceMedium"
        }
      }
    },
    "VolumeSourceSecretSource": {
      "type": "object",
      "properties": {
        "secretName": {
          "type": "string"
        }
      }
    },
    "agentConfirmPushApprovalResp": {
      "type": "object",
      "properties": {
        "approved": {
          "type": "boolean"
        }
      }
    },
    "agentDebugInfo": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string",
          "title": "set only if there's any error running debug commands"
        },
        "tcptracerouteOut": {
          "type": "string"
        }
      }
    },
    "agentHeartbeatResp": {
      "type": "object"
    },
    "agentInformerAction": {
      "type": "string",
      "enum": [
        "ADD",
        "UPDATE",
        "DELETE"
      ],
      "default": "ADD"
    },
    "agentProxyAPIServerResp": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/agentProxyAPIServerRespType",
          "title": "Header"
        },
        "blob": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "agentProxyAPIServerRespType": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "PROXY_APISERVER"
      ],
      "default": "UNKNOWN",
      "title": "- PROXY_APISERVER: More operations like docker registry interactions"
    },
    "agentRecordDeploymentResp": {
      "type": "object",
      "properties": {
        "pushTimestamp": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "agentRecordNewUnknownPushResp": {
      "type": "object"
    },
    "agentRecordPodResp": {
      "type": "object"
    },
    "agentRecordPodsResp": {
      "type": "object"
    },
    "agentRecordPushCompleteReqType": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "SUCCEEDED",
        "ROLLED_BACK"
      ],
      "default": "UNKNOWN"
    },
    "agentRecordPushCompleteResp": {
      "type": "object"
    },
    "agentRecordPushOngoingResp": {
      "type": "object"
    },
    "agentRecordPushStartResp": {
      "type": "object"
    },
    "agentRecordRolloutResp": {
      "type": "object",
      "properties": {
        "pushTimestamp": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "agentReportDebugInfoResp": {
      "type": "object"
    },
    "applicationApplication": {
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/objectObjectMeta"
        },
        "config": {
          "$ref": "#/definitions/applicationApplicationConfig"
        },
        "state": {
          "$ref": "#/definitions/applicationApplicationState"
        },
        "userMetadata": {
          "$ref": "#/definitions/applicationApplicationUserMetadata"
        }
      }
    },
    "applicationApplicationConfig": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "releaseChannels": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/release_channelReleaseChannelConfig"
          }
        },
        "notifications": {
          "$ref": "#/definitions/common_configNotificationConfig"
        },
        "alerts": {
          "$ref": "#/definitions/workflowAlertingConfig"
        },
        "capabilities": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/capabilityCapabilityConfig"
          },
          "title": "capabilities are dependencies that services in this applications can use"
        },
        "capabilityInstances": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/capabilityCapabilityInstanceConfig"
          },
          "description": "optional capability instances that can be referenced by `capabilities`, useful to deduplication.\nfor example, you may choose to have two database capability instances, staging and prod,\nand use them across release channels staging, beta, and prod, where beta and prod use the prod db."
        },
        "serviceTemplates": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/templateServiceTemplate"
          },
          "description": "service templates are sets of service configurations that can be used as the base of a service.\nthis is useful for setting default values that are kept in sync when the templates change."
        },
        "enableCustomTasksDynamicDelivery": {
          "type": "boolean",
          "description": "if set and use_dynamic_delivery is set, transform custom tasks to DD preconditions for all services.\nOnly used for safely migrating prime capabilities to DD.\nUNUSED: Remove from proto once the flag has been removed from all persisted configs."
        }
      }
    },
    "applicationApplicationState": {
      "type": "object"
    },
    "applicationApplicationUserMetadata": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "links": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/common_configLink"
          }
        },
        "serviceLinks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/common_configLink"
          },
          "title": "Links that every service should get automatically"
        }
      }
    },
    "applicationConfigureApplicationReq": {
      "type": "object",
      "properties": {
        "applicationConfig": {
          "$ref": "#/definitions/applicationApplicationConfig"
        },
        "approvedDangerousActionIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "source": {
          "$ref": "#/definitions/versionSource"
        },
        "sourceMetadata": {
          "$ref": "#/definitions/versionSourceMetadata"
        }
      }
    },
    "applicationConfigureApplicationResp": {
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/objectObjectMeta"
        }
      }
    },
    "applicationDeleteApplicationResp": {
      "type": "object"
    },
    "applicationGetApplicationConfigResp": {
      "type": "object",
      "properties": {
        "config": {
          "$ref": "#/definitions/applicationApplicationConfig",
          "title": "config as passed in by user"
        },
        "version": {
          "type": "string"
        },
        "compiledConfig": {
          "$ref": "#/definitions/applicationApplicationConfig",
          "title": "config with defaults applied"
        }
      }
    },
    "applicationGetApplicationInsightsResp": {
      "type": "object",
      "properties": {
        "insights": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/insightsInsight"
          }
        }
      }
    },
    "applicationGetApplicationMetadataResp": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/applicationApplicationUserMetadata",
          "title": "metadata with no variables substitution, no modifications from parents"
        }
      }
    },
    "applicationGetApplicationMetricsResp": {
      "type": "object",
      "properties": {
        "deploymentMetrics": {
          "$ref": "#/definitions/metricsDeploymentMetrics"
        }
      }
    },
    "applicationGetApplicationResp": {
      "type": "object",
      "properties": {
        "application": {
          "$ref": "#/definitions/applicationApplication"
        }
      }
    },
    "applicationListApplicationsResp": {
      "type": "object",
      "properties": {
        "applications": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/applicationApplication"
          }
        }
      }
    },
    "applicationSetApplicationMetadataResp": {
      "type": "object"
    },
    "applicationSnoozeApplicationInsightResp": {
      "type": "object"
    },
    "applicationValidateConfigureApplicationResp": {
      "type": "object",
      "properties": {
        "config": {
          "$ref": "#/definitions/applicationApplicationConfig",
          "title": "config as passed in by user"
        },
        "compiledConfig": {
          "$ref": "#/definitions/applicationApplicationConfig",
          "title": "config with defaults applied"
        },
        "dangerousActions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/common_configDangerousAction"
          }
        }
      }
    },
    "authApiTokenInfo": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "expiresTimestamp": {
          "type": "string",
          "format": "date-time"
        },
        "creationTimestamp": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "authAuthToken": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        }
      }
    },
    "authCliAuthResp": {
      "type": "object",
      "properties": {
        "userPrompt": {
          "$ref": "#/definitions/CliAuthRespUserPrompt"
        },
        "token": {
          "$ref": "#/definitions/authAuthToken"
        }
      }
    },
    "authCreateOrgApiTokenReq": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "expiresTimestamp": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "authCreateOrgApiTokenResp": {
      "type": "object",
      "properties": {
        "apiToken": {
          "type": "string"
        },
        "info": {
          "$ref": "#/definitions/authApiTokenInfo"
        }
      }
    },
    "authDeleteOrgApiTokenResp": {
      "type": "object"
    },
    "authEmpty": {
      "type": "object"
    },
    "authGetAuthTokenResp": {
      "type": "object",
      "properties": {
        "token": {
          "$ref": "#/definitions/authAuthToken"
        },
        "user": {
          "$ref": "#/definitions/prodvanausersUser"
        }
      }
    },
    "authGetAuthUrlResponse": {
      "type": "object",
      "properties": {
        "authUrl": {
          "type": "string"
        }
      }
    },
    "authListOrgApiTokensResp": {
      "type": "object",
      "properties": {
        "tokens": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/authApiTokenInfo"
          }
        }
      }
    },
    "authRefreshTokenReq": {
      "type": "object",
      "properties": {
        "token": {
          "$ref": "#/definitions/authAuthToken"
        },
        "forCli": {
          "type": "boolean"
        },
        "prodvanaOnlyAdminOrg": {
          "type": "boolean",
          "title": "prodvana internal use"
        }
      }
    },
    "blobsGetCasBlobResp": {
      "type": "object",
      "properties": {
        "bytes": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "capabilityCapabilityConfig": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "perReleaseChannel": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/capabilityPerReleaseChannelCapabilityConfig"
          }
        }
      }
    },
    "capabilityCapabilityInstanceConfig": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "omit if inlined"
        },
        "env": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/common_configEnvValue"
          },
          "title": "env vars to inject"
        },
        "prePushTasks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pipelinesTask"
          },
          "description": "Tasks to inject in the pipeline, before the push of the service instance depending on this capability\nCustom tasks will automatically have env vars from `env` above injected.\nWhen multiple service instances reference the same capability instance, the tasks are deduped and injected\nbefore the push of the first service instance in the pipeline."
        }
      }
    },
    "capabilityCapabilityInstanceRef": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "capabilityPerReleaseChannelCapabilityConfig": {
      "type": "object",
      "properties": {
        "releaseChannel": {
          "type": "string"
        },
        "inlined": {
          "$ref": "#/definitions/capabilityCapabilityInstanceConfig",
          "title": "either inline capability config definition, or reference a CapabilityInstanceDefinition\non the top level application object"
        },
        "ref": {
          "$ref": "#/definitions/capabilityCapabilityInstanceRef"
        }
      }
    },
    "common_configCmdProbe": {
      "type": "object",
      "properties": {
        "command": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "common_configDangerousAction": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "explanation": {
          "type": "string"
        }
      }
    },
    "common_configDockerImageParameterDefinition": {
      "type": "object",
      "properties": {
        "defaultTag": {
          "type": "string",
          "title": "empty not a valid value"
        },
        "imageRegistryInfo": {
          "$ref": "#/definitions/common_configImageRegistryInfo"
        },
        "changes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/common_configDockerImageParameterDefinitionChanges"
          }
        }
      }
    },
    "common_configDockerImageParameterDefinitionChanges": {
      "type": "object",
      "properties": {
        "program": {
          "$ref": "#/definitions/common_configProgramChange"
        }
      }
    },
    "common_configEnvValue": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        },
        "rawSecret": {
          "type": "string",
          "description": "Raw secret value to be used for user-editable YAML and RPC calls."
        },
        "secret": {
          "$ref": "#/definitions/common_configSecret",
          "description": "Externally stored secret."
        }
      }
    },
    "common_configFixedReplicaChange": {
      "type": "object"
    },
    "common_configHealthCheck": {
      "type": "object",
      "properties": {
        "http": {
          "$ref": "#/definitions/common_configHttpProbe"
        },
        "cmd": {
          "$ref": "#/definitions/common_configCmdProbe"
        },
        "tcp": {
          "$ref": "#/definitions/common_configTcpProbe"
        },
        "delay": {
          "type": "string"
        },
        "period": {
          "type": "string"
        }
      }
    },
    "common_configHelmConfig": {
      "type": "object",
      "properties": {
        "remote": {
          "$ref": "#/definitions/common_configRemoteHelmChart",
          "title": "TODO(naphat) chart archive support, local charts"
        },
        "valuesOverrides": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/common_configHelmValuesOverrides"
          }
        },
        "releaseName": {
          "type": "string",
          "description": "optional release name, leave blank to have Prodvana generate one.\nMainly useful for migrating an existing helm release into Prodvana."
        },
        "namespace": {
          "type": "string",
          "description": "used internally by Prodvana, do not set."
        }
      }
    },
    "common_configHelmValuesOverrides": {
      "type": "object",
      "properties": {
        "inlined": {
          "type": "string"
        },
        "local": {
          "$ref": "#/definitions/common_configLocalConfig"
        },
        "map": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/common_configEnvValue"
          },
          "title": "treat this as part of the above oneof, even though proto does not allow us to"
        }
      }
    },
    "common_configHttpProbe": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        },
        "port": {
          "type": "integer",
          "format": "int32"
        },
        "tls": {
          "type": "boolean"
        }
      }
    },
    "common_configImageRegistryInfo": {
      "type": "object",
      "properties": {
        "containerRegistryId": {
          "type": "string",
          "title": "both container_registry_id and container_registry are supported, but only set one not both"
        },
        "containerRegistry": {
          "type": "string"
        },
        "imageRepository": {
          "type": "string",
          "title": "Not the URL, everything after: username/reponame\nleaving it as once field because the spec considers it 1 field\nin theory you can have no username, or nest the repo names"
        }
      }
    },
    "common_configIntParameterDefinition": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "type": "string",
          "format": "int64"
        },
        "changes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/common_configIntParameterDefinitionChanges"
          }
        }
      }
    },
    "common_configIntParameterDefinitionChanges": {
      "type": "object",
      "properties": {
        "fixedReplica": {
          "$ref": "#/definitions/common_configFixedReplicaChange"
        }
      }
    },
    "common_configKubernetesConfig": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/common_configKubernetesConfigType"
        },
        "inlined": {
          "type": "string"
        },
        "local": {
          "$ref": "#/definitions/common_configLocalConfig"
        },
        "envInjectionMode": {
          "$ref": "#/definitions/KubernetesConfigEnvInjectionMode",
          "title": "Defaults to ENV_INJECT_NON_SECRET_ENV"
        }
      }
    },
    "common_configKubernetesConfigType": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "KUBERNETES",
        "KUSTOMIZE"
      ],
      "default": "UNKNOWN"
    },
    "common_configLink": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        }
      }
    },
    "common_configLocalConfig": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        }
      }
    },
    "common_configMaturity": {
      "type": "string",
      "enum": [
        "FAST_ITERATION",
        "PRELAUNCH",
        "LIVE"
      ],
      "default": "FAST_ITERATION",
      "title": "TODO(naphat) maturity likely should not be hardcoded but be flexible per organization"
    },
    "common_configNotification": {
      "type": "object",
      "properties": {
        "configOverride": {
          "$ref": "#/definitions/common_configNotificationConfig",
          "title": "will default to application's notification config"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "common_configNotificationConfig": {
      "type": "object",
      "properties": {
        "slack": {
          "$ref": "#/definitions/NotificationConfigSlack"
        }
      }
    },
    "common_configParameterDefinition": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "parameter name, used in substitutions"
        },
        "description": {
          "type": "string",
          "title": "optional description for display purposes"
        },
        "string": {
          "$ref": "#/definitions/common_configStringParameterDefinition"
        },
        "dockerImage": {
          "$ref": "#/definitions/common_configDockerImageParameterDefinition"
        },
        "int": {
          "$ref": "#/definitions/common_configIntParameterDefinition"
        },
        "secret": {
          "$ref": "#/definitions/common_configSecretParameterDefinition"
        },
        "required": {
          "type": "boolean",
          "title": "next: 8"
        }
      }
    },
    "common_configParameterValue": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "string": {
          "type": "string"
        },
        "int": {
          "type": "string",
          "format": "int64"
        },
        "dockerImageTag": {
          "type": "string"
        },
        "secret": {
          "$ref": "#/definitions/common_configSecretParameterValue"
        }
      }
    },
    "common_configPerReleaseChannelProgramConfig": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "must match a program in top-level program config"
        },
        "env": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/common_configEnvValue"
          }
        },
        "image": {
          "type": "string",
          "description": "If present, overrides main program config.\nTODO: If users need to enforce that different RCs require different images, add requires_separate_images option to ProgramConfig.\nThis will prevent accidentally undoing separate images via the UI or autopush."
        },
        "imageRegistryInfo": {
          "$ref": "#/definitions/common_configImageRegistryInfo",
          "title": "optional, not guaranteed to be compatible with `image` (e.g. if user decides to paste in a public image string)"
        },
        "imageTag": {
          "type": "string"
        }
      }
    },
    "common_configPortConfig": {
      "type": "object",
      "properties": {
        "port": {
          "type": "integer",
          "format": "int32"
        },
        "targetPort": {
          "type": "integer",
          "format": "int32",
          "title": "optional, default to the same value as `port`"
        },
        "external": {
          "type": "boolean",
          "title": "if this port should be exposed to the public internet"
        },
        "protocol": {
          "$ref": "#/definitions/PortConfigProtocol"
        },
        "tls": {
          "type": "boolean",
          "title": "if the connection should use TLS"
        }
      }
    },
    "common_configProgramChange": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "common_configProgramConfig": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "imageTag": {
          "type": "string"
        },
        "imageRegistryInfo": {
          "$ref": "#/definitions/common_configImageRegistryInfo",
          "title": "optional, not guaranteed to be compatible with `image` (e.g. if user decides to paste in a public image string)"
        },
        "cmd": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "entrypoint": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "env": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/common_configEnvValue"
          }
        },
        "resources": {
          "$ref": "#/definitions/common_configResourceRequirements"
        },
        "healthCheck": {
          "$ref": "#/definitions/common_configHealthCheck"
        },
        "ports": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/common_configPortConfig"
          },
          "title": "empty list is ok, default from docker image will be used"
        },
        "templateComplete": {
          "type": "boolean",
          "description": "Only set when this ServiceConfig represents a ServiceTemplate\nWhen set, this program will be added in whole to the target service's\nprograms in full, and will not partially apply to a program with the\nsame name in the target service's config."
        }
      },
      "description": "This ProgramConfig is used in multiple places, including service configuration and custom pipeline tasks.\nThe validations expressed here represent the lowest common denominator of the use cases."
    },
    "common_configRemoteHelmChart": {
      "type": "object",
      "properties": {
        "repo": {
          "type": "string",
          "title": "TODO(naphat) add integration support for private repositories"
        },
        "chart": {
          "type": "string"
        },
        "chartVersion": {
          "type": "string"
        }
      }
    },
    "common_configResourceList": {
      "type": "object",
      "properties": {
        "memory": {
          "type": "string"
        },
        "cpu": {
          "type": "string"
        }
      }
    },
    "common_configResourceRequirements": {
      "type": "object",
      "properties": {
        "requests": {
          "$ref": "#/definitions/common_configResourceList"
        }
      }
    },
    "common_configRetryConfig": {
      "type": "object",
      "properties": {
        "maxRetryDuration": {
          "type": "string"
        },
        "retryForever": {
          "type": "boolean"
        },
        "firstFailureNotification": {
          "$ref": "#/definitions/common_configNotification"
        }
      }
    },
    "common_configSecret": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "common_configSecretParameterDefinition": {
      "type": "object"
    },
    "common_configSecretParameterValue": {
      "type": "object",
      "properties": {
        "rawSecret": {
          "type": "string",
          "title": "Raw secret value"
        },
        "secretRef": {
          "$ref": "#/definitions/common_configSecret",
          "description": "Existing secret reference."
        }
      }
    },
    "common_configServiceInstanceObjectMeta": {
      "type": "object",
      "properties": {
        "serviceMeta": {
          "$ref": "#/definitions/objectObjectMeta",
          "title": "These metas will only have versions set if service instance has been pushed before"
        },
        "releaseChannelMeta": {
          "$ref": "#/definitions/objectObjectMeta"
        }
      },
      "title": "HACK(naphat) service instances do not have their own id and names today"
    },
    "common_configServiceTemplateRef": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "common_configStringParameterDefinition": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "type": "string"
        }
      }
    },
    "common_configTaskLifecycle": {
      "type": "string",
      "enum": [
        "UNKNOWN_TASK_LIFECYCLE",
        "CONVERGENCE_START",
        "PRE_APPROVAL",
        "APPROVAL",
        "POST_APPROVAL",
        "DEPLOYMENT",
        "POST_DEPLOYMENT"
      ],
      "default": "UNKNOWN_TASK_LIFECYCLE",
      "description": " - PRE_APPROVAL: Runs before everything else. May wait for any dependent RCs to be stable.\n - APPROVAL: Approval tasks, manual or automated. Must wait for all PRE_APPROVAL_TASK to be satisfied.\n - POST_APPROVAL: Runs after approval, just before service push.\n - DEPLOYMENT: Runs as long as service push is in progress.\n - POST_DEPLOYMENT: Runs after service push succeeds (pods are replaced and healthy, ...), before declaring the service CONVERGED."
    },
    "common_configTcpProbe": {
      "type": "object",
      "properties": {
        "port": {
          "type": "integer",
          "format": "int32"
        },
        "host": {
          "type": "string"
        }
      }
    },
    "config_writebackConfigWritebackPath": {
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string",
          "description": "short, user-readable name of what this config is. May contain spaces."
        },
        "displayPath": {
          "type": "string",
          "title": "will be HTTP if apiserver is configured with a http display path, otherwise will be a git ssh/local path"
        }
      }
    },
    "deliveryCanaryProgress": {
      "type": "object",
      "properties": {
        "canaryWeight": {
          "type": "integer",
          "format": "int32",
          "title": "weight to advance canary to, percentage 0-100"
        },
        "duration": {
          "type": "string",
          "title": "duration to pause at this weight before advancing"
        }
      }
    },
    "deliveryDeliveryConfig": {
      "type": "object",
      "properties": {
        "canaryProgress": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/deliveryCanaryProgress"
          },
          "title": "progression of canary as delivery occurs"
        },
        "analysisTemplates": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "delivery_extensionConfigureDeliveryExtensionReq": {
      "type": "object",
      "properties": {
        "deliveryExtensionConfig": {
          "$ref": "#/definitions/prodvanadelivery_extensionDeliveryExtensionConfig"
        },
        "source": {
          "$ref": "#/definitions/versionSource"
        },
        "sourceMetadata": {
          "$ref": "#/definitions/versionSourceMetadata"
        }
      }
    },
    "delivery_extensionConfigureDeliveryExtensionResp": {
      "type": "object",
      "properties": {
        "deliveryExtensionId": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "delivery_extensionGetDeliveryExtensionConfigResp": {
      "type": "object",
      "properties": {
        "config": {
          "$ref": "#/definitions/prodvanadelivery_extensionDeliveryExtensionConfig"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "delivery_extensionGetDeliveryExtensionResp": {
      "type": "object",
      "properties": {
        "deliveryExtension": {
          "$ref": "#/definitions/prodvanadelivery_extensionDeliveryExtension"
        }
      }
    },
    "delivery_extensionListDeliveryExtensionsResp": {
      "type": "object",
      "properties": {
        "deliveryExtensions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/prodvanadelivery_extensionDeliveryExtension"
          }
        },
        "nextPageToken": {
          "type": "string"
        }
      }
    },
    "delivery_extensionValidateConfigureDeliveryExtensionResp": {
      "type": "object"
    },
    "desired_stateBypassProtectionReq": {
      "type": "object",
      "properties": {
        "desiredStateId": {
          "type": "string"
        },
        "source": {
          "type": "string"
        }
      }
    },
    "desired_stateBypassProtectionResp": {
      "type": "object"
    },
    "desired_stateDebugLogs": {
      "type": "object",
      "properties": {
        "debugLogs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelDebugLog"
          }
        }
      }
    },
    "desired_stateDesiredStateSummary": {
      "type": "object",
      "properties": {
        "entityGraph": {
          "$ref": "#/definitions/modelEntityGraph"
        },
        "startingState": {
          "$ref": "#/definitions/modelState",
          "title": "fields below are deprecated"
        },
        "lastSeenState": {
          "$ref": "#/definitions/modelState"
        },
        "desiredState": {
          "$ref": "#/definitions/modelState"
        },
        "statuses": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/desired_statemodelStatus"
          },
          "description": "status of the desired state, all its descendents, and the root desired state."
        },
        "creationTimestamp": {
          "type": "string",
          "format": "date-time"
        },
        "lastUpdateTimestamp": {
          "type": "string",
          "format": "date-time"
        },
        "replacedTimestamp": {
          "type": "string",
          "format": "date-time",
          "title": "will only be set if desired state has been replaced"
        },
        "preconditionStatuses": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/modelConditionState"
          },
          "description": "State of all preconditions involved in the desired state.\nKey format - \"{desired_state_id}-{index}\", e.g., \"des-0752d6c76a6943abbfcf0515634584ba-0\"."
        },
        "statusExplanations": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/desired_stateStatusExplanations"
          }
        },
        "debugLogs": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/desired_stateDebugLogs"
          }
        },
        "actionExplanations": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/modelActionExplanation"
          }
        },
        "lastUpdateTimestamps": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "date-time"
          },
          "title": "last_update_timestamp, last_fetched_timestamp, and last_applied_timestamp are only returned for the latest desired state"
        },
        "lastFetchedTimestamps": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "date-time"
          }
        },
        "lastAppliedTimestamps": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "date-time"
          }
        }
      }
    },
    "desired_stateGetDesiredStateConvergenceSummaryResp": {
      "type": "object",
      "properties": {
        "summary": {
          "$ref": "#/definitions/desired_stateDesiredStateSummary"
        }
      }
    },
    "desired_stateGetDesiredStateResp": {
      "type": "object",
      "properties": {
        "desiredState": {
          "$ref": "#/definitions/modelState"
        },
        "compiledDesiredState": {
          "$ref": "#/definitions/modelState"
        }
      }
    },
    "desired_stateGetServiceDesiredStateConvergenceSummaryResp": {
      "type": "object",
      "properties": {
        "summary": {
          "$ref": "#/definitions/desired_stateDesiredStateSummary"
        }
      }
    },
    "desired_stateGetServiceDesiredStateHistoryResp": {
      "type": "object",
      "properties": {
        "desiredStates": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/desired_stateDesiredStateSummary"
          }
        },
        "nextPageToken": {
          "type": "string"
        }
      }
    },
    "desired_stateGetServiceLastConvergedStateResp": {
      "type": "object",
      "properties": {
        "serviceInstanceStates": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/desired_statemodelServiceInstanceState"
          }
        }
      }
    },
    "desired_statePromoteDeliveryReq": {
      "type": "object",
      "properties": {
        "desiredStateId": {
          "type": "string"
        },
        "stage": {
          "type": "string",
          "format": "int64"
        },
        "full": {
          "type": "boolean"
        },
        "source": {
          "type": "string"
        }
      }
    },
    "desired_statePromoteDeliveryResp": {
      "type": "object"
    },
    "desired_stateSetDesiredStateReq": {
      "type": "object",
      "properties": {
        "desiredState": {
          "$ref": "#/definitions/modelState"
        },
        "rollback": {
          "type": "boolean",
          "title": "set if this is a rollback, which will generate a desired state with faster preconditions"
        }
      }
    },
    "desired_stateSetDesiredStateResp": {
      "type": "object",
      "properties": {
        "desiredStateId": {
          "type": "string",
          "title": "unique identifier for the desired state that was just set"
        }
      }
    },
    "desired_stateSetManualApprovalReq": {
      "type": "object",
      "properties": {
        "desiredStateId": {
          "type": "string"
        },
        "topic": {
          "type": "string",
          "title": "string application = 2 [(validate.rules).string.min_len = 1];\nstring service = 3 [(validate.rules).string.min_len = 1];\nstring release_channel = 4 [(validate.rules).string.min_len = 1];"
        },
        "reject": {
          "type": "boolean"
        }
      }
    },
    "desired_stateSetManualApprovalResp": {
      "type": "object"
    },
    "desired_stateStatusExplanations": {
      "type": "object",
      "properties": {
        "statusExplanations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelStatusExplanation"
          }
        }
      }
    },
    "desired_stateValidateDesiredStateReq": {
      "type": "object",
      "properties": {
        "desiredState": {
          "$ref": "#/definitions/modelState"
        },
        "rollback": {
          "type": "boolean",
          "title": "set if this is a rollback, which will generate a desired state with faster preconditions"
        },
        "serviceInstanceConfigs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/serviceCompiledServiceInstanceConfig"
          },
          "title": "optional, if set, use these service configs instead of fetching from db. can be useful when doing a ValidateApplyParameters followed by a ValidateDesiredState"
        }
      }
    },
    "desired_stateValidateDesiredStateResp": {
      "type": "object",
      "properties": {
        "desiredState": {
          "$ref": "#/definitions/modelState"
        },
        "compiledDesiredState": {
          "$ref": "#/definitions/modelState"
        }
      }
    },
    "desired_statemodelDeliveryExtension": {
      "type": "object",
      "properties": {
        "instanceId": {
          "type": "string"
        },
        "lifecycle": {
          "$ref": "#/definitions/common_configTaskLifecycle"
        },
        "references": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelIdentifier"
          }
        }
      }
    },
    "desired_statemodelDeliveryExtensionState": {
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/desired_statemodelMetadata"
        },
        "versions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelVersion"
          }
        },
        "extensionId": {
          "type": "string"
        },
        "extensionInstanceId": {
          "type": "string"
        },
        "lifecycle": {
          "$ref": "#/definitions/common_configTaskLifecycle"
        },
        "lastCompletedTimestamp": {
          "type": "string",
          "format": "date-time"
        },
        "lastCompletedStatus": {
          "$ref": "#/definitions/modelSimpleStatus"
        },
        "lastCompletedStatusExplanations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelStatusExplanation"
          }
        },
        "lastCompletedAppliedVersion": {
          "type": "string"
        },
        "references": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelIdentifier"
          }
        },
        "status": {
          "$ref": "#/definitions/modelConditionStatus",
          "title": "next tag: 14"
        }
      }
    },
    "desired_statemodelMetadata": {
      "type": "object",
      "properties": {
        "preconditions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelCondition"
          }
        },
        "invariants": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelCondition"
          }
        },
        "self": {
          "$ref": "#/definitions/modelIdentifier"
        },
        "desiredStateId": {
          "type": "string"
        },
        "rootDesiredStateId": {
          "type": "string"
        },
        "protectionLinks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/desired_statemodelProtectionLink"
          }
        },
        "deliveryExtensions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/desired_statemodelDeliveryExtension"
          }
        }
      }
    },
    "desired_statemodelProtectionAttachment": {
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/desired_statemodelMetadata"
        },
        "versions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelVersion"
          }
        },
        "lastCompletedVersions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelVersion"
          }
        },
        "lastCompletedTimestamp": {
          "type": "string",
          "format": "date-time"
        },
        "lastCompletedStatus": {
          "$ref": "#/definitions/modelSimpleStatus"
        },
        "lastCompletedStatusExplanations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelStatusExplanation"
          }
        },
        "lastCompletedAppliedVersion": {
          "type": "string"
        },
        "protectionId": {
          "type": "string"
        },
        "attachmentId": {
          "type": "string",
          "title": "next tag: 9"
        }
      }
    },
    "desired_statemodelProtectionLink": {
      "type": "object",
      "properties": {
        "lifecycle": {
          "$ref": "#/definitions/protectionProtectionLifecycle"
        },
        "attachmentId": {
          "type": "string"
        }
      }
    },
    "desired_statemodelRuntimeObject": {
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/desired_statemodelMetadata"
        },
        "objectType": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "versions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelVersion"
          }
        },
        "status": {
          "$ref": "#/definitions/modelRuntimeObjectStatus"
        },
        "rollbackVersion": {
          "$ref": "#/definitions/modelVersion"
        },
        "delivery": {
          "$ref": "#/definitions/modelDeliveryState"
        },
        "versionAgnostic": {
          "type": "boolean",
          "title": "This object just needs to exist - it doesn't change from version to version"
        },
        "message": {
          "type": "string",
          "description": "Human readable message (typically for errors)."
        },
        "runtimeExtension": {
          "$ref": "#/definitions/RuntimeObjectRuntimeExtension",
          "title": "additional config if this runtime object belongs to a runtime extension"
        },
        "outputBlobIds": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "if output is saved, this is the ID of the blob to retrieve it, by container name"
        },
        "interval": {
          "type": "string",
          "title": "if set, runtime object is continuously applied instead of being done once when there is a version mismatch"
        },
        "timeout": {
          "type": "string",
          "description": "if set, runtime object is recreated when this timeout is hit if it has not converged by then."
        }
      }
    },
    "desired_statemodelServiceInstanceState": {
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/desired_statemodelMetadata"
        },
        "application": {
          "type": "string"
        },
        "service": {
          "type": "string"
        },
        "releaseChannel": {
          "type": "string"
        },
        "serviceId": {
          "type": "string",
          "title": "set internally by prodvana"
        },
        "releaseChannelId": {
          "type": "string",
          "title": "set internally by prodvana"
        },
        "versions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelVersion"
          }
        },
        "rollbackVersion": {
          "$ref": "#/definitions/modelVersion"
        },
        "rollback": {
          "type": "boolean"
        },
        "delivery": {
          "$ref": "#/definitions/modelDeliveryState"
        }
      }
    },
    "desired_statemodelServiceState": {
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/desired_statemodelMetadata"
        },
        "application": {
          "type": "string"
        },
        "service": {
          "type": "string"
        },
        "serviceId": {
          "type": "string",
          "title": "set internally by prodvana"
        },
        "releaseChannels": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/desired_statemodelServiceInstanceState"
          }
        },
        "customTasks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelCustomTaskState"
          },
          "description": "Definitions for custom tasks used by this service. Must be empty if part of service group."
        },
        "deliveryExtensions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/desired_statemodelDeliveryExtensionState"
          }
        }
      }
    },
    "desired_statemodelStatus": {
      "type": "string",
      "enum": [
        "UNKNOWN_STATUS",
        "CONVERGING",
        "CONVERGED",
        "FAILED",
        "ROLLING_BACK",
        "ROLLED_BACK",
        "FAILED_ROLLBACK",
        "PAUSED",
        "CHILD_PAUSED",
        "WAITING_PRECONDITIONS",
        "REPLACED",
        "WAITING_MANUAL_APPROVAL",
        "DELETED"
      ],
      "default": "UNKNOWN_STATUS",
      "title": "- CHILD_PAUSED: entity itself not paused, but one of its children is paused, so it is not making any progress\n - WAITING_PRECONDITIONS: Waiting for non-manual approval preconditions\n - WAITING_MANUAL_APPROVAL: Waiting only for manual approval\n - DELETED: next tag: 13"
    },
    "desired_statemodelType": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "SERVICE",
        "SERVICE_INSTANCE",
        "SERVICE_GROUP",
        "RUNTIME_OBJECT",
        "MANUAL_APPROVAL",
        "CUSTOM_TASK",
        "PROTECTION_ATTACHMENT",
        "PROTECTION_LINK",
        "DELIVERY_EXTENSION"
      ],
      "default": "UNKNOWN"
    },
    "environmentClusterAuth": {
      "type": "object",
      "properties": {
        "endpoint": {
          "type": "string"
        },
        "caCert": {
          "type": "string"
        },
        "token": {
          "type": "string"
        },
        "serviceAccount": {
          "type": "string"
        },
        "ecs": {
          "$ref": "#/definitions/ClusterAuthECSAuth"
        },
        "k8s": {
          "$ref": "#/definitions/ClusterAuthK8sAuth"
        },
        "k8sAgentAuth": {
          "type": "boolean"
        }
      }
    },
    "environmentClusterConfig": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "disableFlagger": {
          "type": "boolean"
        },
        "disableIstio": {
          "type": "boolean"
        },
        "kubecost": {
          "$ref": "#/definitions/ClusterConfigKubecost"
        },
        "datadog": {
          "$ref": "#/definitions/ClusterConfigDatadog"
        },
        "albIngress": {
          "$ref": "#/definitions/ClusterConfigALBIngress"
        },
        "argoRollouts": {
          "$ref": "#/definitions/ClusterConfigArgoRollouts"
        },
        "gkeIngress": {
          "$ref": "#/definitions/ClusterConfigGKEIngress"
        },
        "selfManagedGkeIngress": {
          "$ref": "#/definitions/ClusterConfigGKEIngress",
          "title": "Self-Managed GKE Ingress - exposes configuration options for GKE Ingress\nbut does not create an ingress object for you"
        },
        "cloudProvider": {
          "$ref": "#/definitions/ClusterConfigCloudProvider"
        },
        "fake": {
          "$ref": "#/definitions/environmentFakeClusterConfig",
          "title": "only used for fake runtimes"
        },
        "extension": {
          "$ref": "#/definitions/environmentExtensionClusterConfig"
        }
      }
    },
    "environmentClusterType": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "K8S",
        "ECS",
        "FAKE",
        "EXTENSION"
      ],
      "default": "UNKNOWN"
    },
    "environmentCompiledExtensionCommand": {
      "type": "object",
      "properties": {
        "namePrefix": {
          "type": "string"
        },
        "command": {
          "$ref": "#/definitions/environmentExtensionCommand"
        },
        "runtimeExecution": {
          "$ref": "#/definitions/runtimesRuntimeExecutionConfig"
        },
        "env": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/common_configEnvValue"
          }
        }
      }
    },
    "environmentConfigureClusterReq": {
      "type": "object",
      "properties": {
        "runtimeName": {
          "type": "string"
        },
        "config": {
          "$ref": "#/definitions/environmentClusterConfig"
        },
        "source": {
          "$ref": "#/definitions/versionSource"
        },
        "sourceMetadata": {
          "$ref": "#/definitions/versionSourceMetadata"
        }
      }
    },
    "environmentConfigureClusterResp": {
      "type": "object"
    },
    "environmentDeleteSecretResp": {
      "type": "object"
    },
    "environmentDeleteSecretVersionResp": {
      "type": "object"
    },
    "environmentDetectClusterConfigResp": {
      "type": "object",
      "properties": {
        "config": {
          "$ref": "#/definitions/environmentClusterConfig"
        }
      }
    },
    "environmentExtensionClusterConfig": {
      "type": "object",
      "properties": {
        "apply": {
          "$ref": "#/definitions/environmentExtensionCommand"
        },
        "fetch": {
          "$ref": "#/definitions/environmentExtensionCommand"
        },
        "parameters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/common_configParameterDefinition"
          }
        },
        "proxyRuntime": {
          "$ref": "#/definitions/runtimesRuntimeExecutionConfig"
        }
      }
    },
    "environmentExtensionCommand": {
      "type": "object",
      "properties": {
        "taskConfig": {
          "$ref": "#/definitions/prodvanacommon_configTaskConfig"
        },
        "kubernetesConfig": {
          "$ref": "#/definitions/common_configKubernetesConfig"
        },
        "pollInterval": {
          "type": "string",
          "title": "customize intervals instead of using Prodvana default\nonly used for fetch\nhow often to run command after it succeeds"
        },
        "timeout": {
          "type": "string",
          "title": "how long after a run has started to try another run if it has not completed yet"
        }
      }
    },
    "environmentFakeClusterConfig": {
      "type": "object",
      "properties": {
        "crashingPrograms": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/FakeClusterConfigCrashingProgramPatterns"
          }
        }
      }
    },
    "environmentGetClusterAuthResp": {
      "type": "object",
      "properties": {
        "auth": {
          "$ref": "#/definitions/environmentClusterAuth"
        }
      }
    },
    "environmentGetClusterConfigResp": {
      "type": "object",
      "properties": {
        "config": {
          "$ref": "#/definitions/environmentClusterConfig"
        }
      }
    },
    "environmentGetClusterStatusResp": {
      "type": "object",
      "properties": {
        "lastHeartbeatTimestamp": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "environmentLinkClusterReq": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "auth": {
          "$ref": "#/definitions/environmentClusterAuth"
        },
        "prodvanaManaged": {
          "type": "boolean",
          "description": "HACK(naphat) this should never be set by users. delete once pulumi runner no longer relies on this endpoint."
        },
        "disableIstio": {
          "type": "boolean"
        },
        "disableFlagger": {
          "type": "boolean"
        },
        "type": {
          "$ref": "#/definitions/environmentClusterType"
        },
        "source": {
          "$ref": "#/definitions/versionSource"
        },
        "sourceMetadata": {
          "$ref": "#/definitions/versionSourceMetadata"
        }
      }
    },
    "environmentLinkClusterResp": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "description": "LinkCluster will attempt to talk to the cluster to validate the\ncredentials. If it fails, want to communicate back what the failure was."
        },
        "msg": {
          "type": "string"
        },
        "clusterId": {
          "type": "string"
        },
        "k8sAgentUrl": {
          "type": "string",
          "title": "Magic URL to install agent"
        }
      }
    },
    "environmentListClustersResp": {
      "type": "object",
      "properties": {
        "clusters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ListClustersRespClusterInfo"
          }
        }
      }
    },
    "environmentListSecretVersionsResp": {
      "type": "object",
      "properties": {
        "versions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "environmentListSecretsResp": {
      "type": "object",
      "properties": {
        "secrets": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/common_configSecret"
          }
        }
      }
    },
    "environmentRemoveClusterReq": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "TODO(mike): add an option to remove by cluster_id as well?"
        }
      }
    },
    "environmentRemoveClusterResp": {
      "type": "object"
    },
    "environmentSetSecretReq": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "environmentSetSecretResp": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        }
      }
    },
    "environmentValidateConfigureClusterResp": {
      "type": "object"
    },
    "eventsApplyTargetStateEvent": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/modelIdentifier"
        },
        "desiredStateId": {
          "type": "string"
        },
        "rootDesiredStateId": {
          "type": "string"
        },
        "target": {
          "$ref": "#/definitions/modelState",
          "title": "state that prodvana runtime will immediately converge towards"
        },
        "current": {
          "$ref": "#/definitions/modelState",
          "title": "current state for this entity before setting target state"
        },
        "isAutoRollback": {
          "type": "boolean",
          "title": "whether this is part of an automated rollback action"
        },
        "result": {
          "$ref": "#/definitions/ApplyTargetStateEventApplyResult"
        },
        "error": {
          "type": "string",
          "title": "set if result = FAILED"
        }
      }
    },
    "eventsCustomTaskExecutionEvent": {
      "type": "object",
      "properties": {
        "successful": {
          "type": "boolean"
        },
        "attempts": {
          "type": "integer",
          "format": "int32"
        },
        "reason": {
          "type": "string",
          "title": "Why did this job exit/fail?"
        }
      }
    },
    "eventsDeliveryManualPromotionEvent": {
      "type": "object",
      "properties": {
        "state": {
          "$ref": "#/definitions/modelDeliveryState"
        },
        "stage": {
          "type": "string",
          "format": "int64"
        },
        "full": {
          "type": "boolean"
        }
      }
    },
    "eventsDeliveryProgressEvent": {
      "type": "object",
      "properties": {
        "state": {
          "$ref": "#/definitions/modelDeliveryState"
        }
      }
    },
    "eventsDesiredStateStatusChangeEvent": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/modelIdentifier"
        },
        "desiredStateId": {
          "type": "string"
        },
        "rootDesiredStateId": {
          "type": "string"
        },
        "oldStatus": {
          "$ref": "#/definitions/desired_statemodelStatus"
        },
        "newStatus": {
          "$ref": "#/definitions/desired_statemodelStatus"
        },
        "desired": {
          "$ref": "#/definitions/modelState"
        },
        "target": {
          "$ref": "#/definitions/modelState"
        },
        "oldState": {
          "$ref": "#/definitions/modelState"
        },
        "newState": {
          "$ref": "#/definitions/modelState"
        },
        "statusExplanations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelStatusExplanation"
          }
        }
      }
    },
    "eventsEvent": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/eventsEventType"
        },
        "title": {
          "type": "string"
        },
        "details": {
          "$ref": "#/definitions/eventsEventDetails"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "relatedObjects": {
          "$ref": "#/definitions/eventsRelatedObjects"
        }
      }
    },
    "eventsEventDetails": {
      "type": "object",
      "properties": {
        "setDesiredState": {
          "$ref": "#/definitions/eventsSetDesiredStateEvent"
        },
        "setTargetState": {
          "$ref": "#/definitions/eventsSetTargetStateEvent"
        },
        "programExit": {
          "$ref": "#/definitions/eventsProgramExitEvent"
        },
        "applyTargetState": {
          "$ref": "#/definitions/eventsApplyTargetStateEvent"
        },
        "manualApproval": {
          "$ref": "#/definitions/eventsManualApprovalEvent"
        },
        "customTaskExecution": {
          "$ref": "#/definitions/eventsCustomTaskExecutionEvent"
        },
        "runtimeUpdate": {
          "$ref": "#/definitions/eventsRuntimeUpdateEvent"
        },
        "deliveryProgress": {
          "$ref": "#/definitions/eventsDeliveryProgressEvent"
        },
        "deliveryPromotion": {
          "$ref": "#/definitions/eventsDeliveryManualPromotionEvent"
        },
        "desiredStateStatusChange": {
          "$ref": "#/definitions/eventsDesiredStateStatusChangeEvent"
        },
        "keyDeliveryDecision": {
          "$ref": "#/definitions/eventsKeyDeliveryDecisionEvent"
        }
      }
    },
    "eventsEventType": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "SET_DESIRED_STATE",
        "SET_TARGET_STATE",
        "PROGRAM_EXIT",
        "APPLY_TARGET_STATE",
        "MANUAL_APPROVAL",
        "CUSTOM_TASK_EXECUTION",
        "RUNTIME_UPDATE",
        "DELIVERY_PROGRESS",
        "DELIVERY_MANUAL_PROMOTION",
        "DESIRED_STATE_STATUS_CHANGE",
        "KEY_DELIVERY_DECISION"
      ],
      "default": "UNKNOWN",
      "description": " - SET_DESIRED_STATE: when a user sets a new desired state\n - SET_TARGET_STATE: when dyanmic delivery sets a new target state as part of convergence. A desired state convergence\ninvolves a series of SET_TARGET_STATE event, one per each entity managed as part of convergence.\n - APPLY_TARGET_STATE: When dynamic delivery materializes a target state to physical infrastructure as part of convergence.\nEach SET_TARGET_STATE is followed by one or more APPLY_TARGET_STATE, unless convergence is aborted.\n - RUNTIME_UPDATE: generic runtime events when more specific event types are not available."
    },
    "eventsGetEventsReq": {
      "type": "object",
      "properties": {
        "lookups": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/eventsLookup"
          }
        },
        "types": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/eventsEventType"
          },
          "title": "empty means to include all types"
        },
        "pageToken": {
          "type": "string"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "orderByAscTimestamp": {
          "type": "boolean"
        },
        "useOr": {
          "type": "boolean"
        }
      }
    },
    "eventsGetEventsResp": {
      "type": "object",
      "properties": {
        "events": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/eventsEvent"
          }
        },
        "nextPageToken": {
          "type": "string"
        }
      }
    },
    "eventsKeyDeliveryDecisionEvent": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/modelIdentifier"
        },
        "desiredStateId": {
          "type": "string"
        },
        "rootDesiredStateId": {
          "type": "string"
        },
        "decision": {
          "$ref": "#/definitions/KeyDeliveryDecisionEventDecision"
        },
        "explanation": {
          "type": "string",
          "title": "optional, may not always be set. when not set, the context should be obvious from status_explanations"
        },
        "status": {
          "$ref": "#/definitions/desired_statemodelStatus"
        },
        "desired": {
          "$ref": "#/definitions/modelState"
        },
        "target": {
          "$ref": "#/definitions/modelState"
        },
        "current": {
          "$ref": "#/definitions/modelState"
        },
        "statusExplanations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelStatusExplanation"
          }
        }
      }
    },
    "eventsLookup": {
      "type": "object",
      "properties": {
        "rootDesiredStateId": {
          "type": "string"
        },
        "desiredStateId": {
          "type": "string"
        },
        "service": {
          "$ref": "#/definitions/eventsServiceLookup"
        },
        "releaseChannel": {
          "$ref": "#/definitions/eventsReleaseChannelLookup"
        }
      }
    },
    "eventsManualApprovalEvent": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/modelManualApprovalStatus",
          "title": "Approved/rejected?"
        },
        "topic": {
          "type": "string",
          "description": "Actor etc ..."
        }
      }
    },
    "eventsProgramExitEvent": {
      "type": "object",
      "properties": {
        "namespace": {
          "type": "string"
        },
        "pod": {
          "type": "string"
        },
        "program": {
          "type": "string",
          "title": "in k8s, this is container name"
        },
        "restartCount": {
          "type": "integer",
          "format": "int32"
        },
        "reason": {
          "type": "string",
          "title": "reason why process exited"
        },
        "killedReason": {
          "type": "string",
          "title": "if killed, this is the reason why it was killed (best effort)"
        },
        "exitCode": {
          "type": "integer",
          "format": "int32",
          "description": "if 0, this is a successful exit."
        },
        "signal": {
          "type": "integer",
          "format": "int32",
          "title": "signal used to terminate this process, if any"
        }
      }
    },
    "eventsRelatedObjects": {
      "type": "object",
      "properties": {
        "applicationId": {
          "type": "string"
        },
        "serviceId": {
          "type": "string"
        },
        "releaseChannelId": {
          "type": "string"
        },
        "desiredStateId": {
          "type": "string"
        },
        "rootDesiredStateId": {
          "type": "string"
        },
        "runtimeId": {
          "type": "string"
        },
        "externalLogs": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "eventsReleaseChannelLookup": {
      "type": "object",
      "properties": {
        "application": {
          "type": "string"
        },
        "releaseChannel": {
          "type": "string"
        }
      }
    },
    "eventsRuntimeUpdateEvent": {
      "type": "object",
      "properties": {
        "action": {
          "$ref": "#/definitions/RuntimeUpdateEventRuntimeAction"
        },
        "object": {
          "$ref": "#/definitions/prodvanaeventsRuntimeObject"
        },
        "status": {
          "$ref": "#/definitions/RuntimeUpdateEventRuntimeStatus"
        }
      }
    },
    "eventsServiceLookup": {
      "type": "object",
      "properties": {
        "application": {
          "type": "string"
        },
        "service": {
          "type": "string"
        }
      }
    },
    "eventsSetDesiredStateEvent": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/modelIdentifier"
        },
        "desiredStateId": {
          "type": "string"
        },
        "rootDesiredStateId": {
          "type": "string"
        },
        "desired": {
          "$ref": "#/definitions/modelState"
        },
        "isRollback": {
          "type": "boolean"
        }
      }
    },
    "eventsSetTargetStateEvent": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/modelIdentifier"
        },
        "desiredStateId": {
          "type": "string"
        },
        "rootDesiredStateId": {
          "type": "string"
        },
        "target": {
          "$ref": "#/definitions/modelState",
          "title": "state that prodvana runtime will immediately converge towards"
        },
        "desired": {
          "$ref": "#/definitions/modelState",
          "title": "final desired state that this entity should eventually get to"
        },
        "current": {
          "$ref": "#/definitions/modelState",
          "title": "current state for this entity before setting target state"
        },
        "isAutoRollback": {
          "type": "boolean",
          "title": "whether this is part of an automated rollback action"
        },
        "status": {
          "$ref": "#/definitions/desired_statemodelStatus",
          "title": "status and explanations at the time of SetTargetState"
        },
        "statusExplanations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelStatusExplanation"
          }
        }
      }
    },
    "googlerpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "insightsClass": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "SUCCESSFUL_DEPLOYMENT_FREQUENCY_DECREASE",
        "DEPLOYMENT_FAILURE_RATE_INCREASE",
        "MEDIAN_SUCCESSFUL_DEPLOYMENT_DURATION_INCREASE",
        "MEDIAN_SUCCESSFUL_ROLLBACK_DURATION_INCREASE"
      ],
      "default": "UNKNOWN"
    },
    "insightsInsight": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "class": {
          "$ref": "#/definitions/insightsClass"
        },
        "service": {
          "$ref": "#/definitions/InsightSubject"
        },
        "application": {
          "$ref": "#/definitions/InsightSubject"
        },
        "organization": {
          "$ref": "#/definitions/InsightSubject"
        }
      }
    },
    "managed_resourceConfigureK8sClusterReq": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "gcpOptions": {
          "$ref": "#/definitions/ConfigureK8sClusterReqGcpOptions"
        },
        "eksOptions": {
          "$ref": "#/definitions/ConfigureK8sClusterReqEKSOptions"
        },
        "instanceType": {
          "type": "string"
        },
        "nodepoolZones": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "nodeCountPerZone": {
          "type": "integer",
          "format": "int32"
        },
        "region": {
          "type": "string"
        }
      }
    },
    "managed_resourceConfigureK8sClusterResp": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "runId": {
          "type": "string",
          "format": "date-time"
        },
        "version": {
          "type": "string"
        },
        "archiveUrl": {
          "type": "string",
          "title": "TODO(naphat) delete archive_url once we automate pulumi runs"
        }
      }
    },
    "managed_resourceDeleteManagedResourceResp": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "resource ID and run ID, which can be used in conjunction with GetManagedResource to track\nstatus of deletion."
        },
        "runId": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "managed_resourceGetArchiveResp": {
      "type": "object",
      "properties": {
        "bytes": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "managed_resourceGetManagedResourceResp": {
      "type": "object",
      "properties": {
        "managedResource": {
          "$ref": "#/definitions/managed_resourceManagedResource"
        }
      }
    },
    "managed_resourceListManagedResourcesResp": {
      "type": "object",
      "properties": {
        "managedResources": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/managed_resourceManagedResource"
          }
        }
      }
    },
    "managed_resourceManagedResource": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "latestRun": {
          "$ref": "#/definitions/ManagedResourceRun"
        }
      }
    },
    "managed_resourceMarkRunDoneResp": {
      "type": "object"
    },
    "metricsCost": {
      "type": "object",
      "properties": {
        "configured": {
          "type": "boolean"
        },
        "cost": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "metricsDeploymentMetrics": {
      "type": "object",
      "properties": {
        "values": {
          "$ref": "#/definitions/DeploymentMetricsValues"
        },
        "timeseries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/DeploymentMetricsTimeseriesMetrics"
          }
        },
        "deltas": {
          "$ref": "#/definitions/DeploymentMetricsDeltas"
        }
      }
    },
    "modelActionExplanation": {
      "type": "object",
      "properties": {
        "ts": {
          "type": "string",
          "format": "date-time"
        },
        "actionType": {
          "$ref": "#/definitions/modelActionType"
        },
        "message": {
          "type": "string"
        }
      },
      "title": "What action is DD taking now?"
    },
    "modelActionType": {
      "type": "string",
      "enum": [
        "ACTION_TYPE_UNKNOWN",
        "ACTION_TYPE_APPLYING",
        "ACTION_TYPE_APPLIED",
        "ACTION_TYPE_COMPLETE"
      ],
      "default": "ACTION_TYPE_UNKNOWN",
      "description": " - ACTION_TYPE_APPLYING: DD is currently apply target state - if its doing this for too long, probably means apply is stuck.\n - ACTION_TYPE_APPLIED: DD has applied target state - waiting for object to converge.\n - ACTION_TYPE_COMPLETE: Reached terminal state - DD is doing nothing further."
    },
    "modelAnnotations": {
      "type": "object",
      "properties": {
        "annotations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelAnnotationsAnnotation"
          }
        }
      }
    },
    "modelAnnotationsAnnotation": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "modelCanaryProgressState": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/modelCanaryProgressStateStatus"
        },
        "canaryWeight": {
          "type": "integer",
          "format": "int32",
          "title": "current canary weight"
        },
        "duration": {
          "type": "string",
          "title": "pause duration at this weight before advancing"
        },
        "pauseStartTimestamp": {
          "type": "string",
          "format": "date-time",
          "title": "when status = PAUSED this indicates when the pause started"
        }
      }
    },
    "modelCanaryProgressStateStatus": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "PENDING",
        "PAUSED",
        "COMPLETED"
      ],
      "default": "UNKNOWN"
    },
    "modelCondition": {
      "type": "object",
      "properties": {
        "rcCond": {
          "$ref": "#/definitions/ConditionReleaseChannelStableCondition"
        },
        "manualApproval": {
          "$ref": "#/definitions/modelConditionManualApproval"
        },
        "customTask": {
          "$ref": "#/definitions/ConditionCustomTaskSuccessfulCondition"
        },
        "desiredStateId": {
          "type": "string",
          "description": "Generated during SetDesiredState.\nDo not set as part of input unless reusing an existing precondition, e.g., patching an existing desired state without regenerating some preconditions."
        }
      }
    },
    "modelConditionManualApproval": {
      "type": "object",
      "properties": {
        "topic": {
          "type": "string"
        }
      }
    },
    "modelConditionState": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/modelConditionStatus"
        }
      }
    },
    "modelConditionStatus": {
      "type": "string",
      "enum": [
        "CONDITION_UNKNOWN_STATUS",
        "CONDITION_PENDING",
        "CONDITION_SATISFIED",
        "CONDITION_MANUALLY_BYPASSED",
        "CONDITION_FAILED"
      ],
      "default": "CONDITION_UNKNOWN_STATUS"
    },
    "modelCustomTaskExecutionState": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/modelCustomTaskStatus"
        },
        "attempts": {
          "type": "string",
          "format": "int64"
        },
        "latestAttemptEndTimestamp": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "modelCustomTaskState": {
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/desired_statemodelMetadata"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "application": {
          "type": "string"
        },
        "applicationId": {
          "type": "string"
        },
        "releaseChannel": {
          "type": "string"
        },
        "releaseChannelId": {
          "type": "string"
        },
        "program": {
          "$ref": "#/definitions/common_configProgramConfig"
        },
        "taskState": {
          "$ref": "#/definitions/modelCustomTaskExecutionState"
        },
        "retryConfig": {
          "$ref": "#/definitions/common_configRetryConfig",
          "description": "if not set, the custom task will not be retried once it starts executing once."
        },
        "serviceIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "modelCustomTaskStatus": {
      "type": "string",
      "enum": [
        "CUSTOM_TASK_PENDING",
        "CUSTOM_TASK_SUCCESSFUL",
        "CUSTOM_TASK_RETRIES_EXHAUSTED",
        "CUSTOM_TASK_TIMED_OUT"
      ],
      "default": "CUSTOM_TASK_PENDING"
    },
    "modelCustomTaskType": {
      "type": "string",
      "enum": [
        "CUSTOM_TASK_TYPE_UNKNOWN",
        "PRE_APPROVAL_TASK",
        "APPROVAL",
        "POST_APPROVAL_TASK",
        "DEPLOYMENT_TASK",
        "POST_DEPLOYMENT_TASK"
      ],
      "default": "CUSTOM_TASK_TYPE_UNKNOWN",
      "description": " - PRE_APPROVAL_TASK: Runs before everything else. May wait for any dependent RCs to be stable.\n - APPROVAL: Approval tasks, manual or automated. Must wait for all PRE_APPROVAL_TASK to be satisfied.\n - POST_APPROVAL_TASK: Runs after approval, just before service push.\n - DEPLOYMENT_TASK: Runs as long as service push is in progress.\n - POST_DEPLOYMENT_TASK: Runs after service push succeeds (pods are replaced and healthy, ...), before declaring the service CONVERGED."
    },
    "modelDebugLog": {
      "type": "object",
      "properties": {
        "ts": {
          "type": "string",
          "format": "date-time"
        },
        "log": {
          "type": "string"
        }
      }
    },
    "modelDeliveryState": {
      "type": "object",
      "properties": {
        "desiredStateId": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/modelDeliveryStateStatus",
          "title": "overall delivery status"
        },
        "message": {
          "type": "string",
          "title": "human readable message from the delivery controller"
        },
        "canaryProgress": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelCanaryProgressState"
          },
          "title": "current state of all Canary progression"
        },
        "firstRun": {
          "type": "boolean"
        },
        "generation": {
          "type": "string",
          "description": "string unique to each PD controller convergence,\ne.g. when Argo Rollouts starts a new rollout, this will change."
        }
      }
    },
    "modelDeliveryStateStatus": {
      "type": "string",
      "enum": [
        "STATUS_UNKNOWN",
        "STATUS_PROGRESSING",
        "STATUS_PAUSED",
        "STATUS_HEALTHY",
        "STATUS_UNHEALTHY"
      ],
      "default": "STATUS_UNKNOWN"
    },
    "modelEntity": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/modelIdentifier"
        },
        "desiredStateId": {
          "type": "string"
        },
        "rootDesiredStateId": {
          "type": "string"
        },
        "annotations": {
          "$ref": "#/definitions/modelAnnotations"
        },
        "status": {
          "$ref": "#/definitions/desired_statemodelStatus"
        },
        "simpleStatus": {
          "$ref": "#/definitions/modelSimpleStatus"
        },
        "startingState": {
          "$ref": "#/definitions/modelState"
        },
        "lastSeenState": {
          "$ref": "#/definitions/modelState"
        },
        "desiredState": {
          "$ref": "#/definitions/modelState"
        },
        "preconditionStatuses": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelConditionState"
          }
        },
        "statusExplanations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelStatusExplanation"
          }
        },
        "logs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelDebugLog"
          }
        },
        "actionExplanation": {
          "$ref": "#/definitions/modelActionExplanation"
        },
        "lastUpdateTimestamp": {
          "type": "string",
          "format": "date-time",
          "title": "when the entity state last changed"
        },
        "lastFetchedTimestamp": {
          "type": "string",
          "format": "date-time",
          "title": "when prodvana last fetched entity state, best effort"
        },
        "lastAppliedTimestamp": {
          "type": "string",
          "format": "date-time",
          "title": "when prodvana last applied state for this entity, best effort"
        },
        "dependencies": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelIdentifier"
          }
        },
        "lifecycle": {
          "$ref": "#/definitions/common_configTaskLifecycle",
          "title": "next tag: 19"
        }
      }
    },
    "modelEntityGraph": {
      "type": "object",
      "properties": {
        "root": {
          "$ref": "#/definitions/modelIdentifier"
        },
        "entities": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelEntity"
          }
        }
      }
    },
    "modelIdentifier": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/desired_statemodelType"
        },
        "name": {
          "type": "string",
          "title": "globally unique identifier"
        }
      }
    },
    "modelManualApprovalState": {
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/desired_statemodelMetadata"
        },
        "status": {
          "$ref": "#/definitions/modelManualApprovalStatus"
        },
        "topic": {
          "type": "string"
        }
      }
    },
    "modelManualApprovalStatus": {
      "type": "string",
      "enum": [
        "PENDING",
        "APPROVED",
        "REJECTED"
      ],
      "default": "PENDING"
    },
    "modelProtectionLinkState": {
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/desired_statemodelMetadata"
        },
        "status": {
          "$ref": "#/definitions/modelConditionStatus"
        },
        "link": {
          "$ref": "#/definitions/desired_statemodelProtectionLink",
          "description": "Copy of ProtectionLink description. Used in FetchState to know retries, durations etc."
        },
        "startedTimestamp": {
          "type": "string",
          "format": "date-time",
          "description": "When did we start polling this protection? If not set, this protection has not started polling."
        },
        "stoppedTimestamp": {
          "type": "string",
          "format": "date-time",
          "description": "When did we stop polling this protection? If set, this protection will no longer change status (except to be manually bypassed)."
        },
        "stoppedReason": {
          "$ref": "#/definitions/ProtectionLinkStateStopReason"
        },
        "firstSuccessTimestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Will be set the first time this attachment returned success.\nUseful for time-based protections (post-push - check X succeeds for N mins). We make the ProtectionLink return CONVERGING till time expires."
        }
      }
    },
    "modelRuntimeObjectStatus": {
      "type": "string",
      "enum": [
        "PENDING",
        "SUCCEEDED",
        "FAILED"
      ],
      "default": "PENDING"
    },
    "modelServiceGroupState": {
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/desired_statemodelMetadata"
        },
        "services": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/desired_statemodelServiceState"
          }
        },
        "customTasks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelCustomTaskState"
          },
          "description": "Definitions for custom tasks used by this service group."
        },
        "deliveryExtensions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/desired_statemodelDeliveryExtensionState"
          }
        }
      }
    },
    "modelSimpleStatus": {
      "type": "string",
      "enum": [
        "SS_UNKNOWN",
        "SS_CONVERGING",
        "SS_CONVERGED",
        "SS_FAILED"
      ],
      "default": "SS_UNKNOWN"
    },
    "modelState": {
      "type": "object",
      "properties": {
        "service": {
          "$ref": "#/definitions/desired_statemodelServiceState"
        },
        "serviceInstance": {
          "$ref": "#/definitions/desired_statemodelServiceInstanceState"
        },
        "serviceGroup": {
          "$ref": "#/definitions/modelServiceGroupState"
        },
        "runtimeObject": {
          "$ref": "#/definitions/desired_statemodelRuntimeObject"
        },
        "manualApproval": {
          "$ref": "#/definitions/modelManualApprovalState"
        },
        "customTask": {
          "$ref": "#/definitions/modelCustomTaskState"
        },
        "protectionAttachment": {
          "$ref": "#/definitions/desired_statemodelProtectionAttachment"
        },
        "protectionLink": {
          "$ref": "#/definitions/modelProtectionLinkState"
        },
        "deliveryExtension": {
          "$ref": "#/definitions/desired_statemodelDeliveryExtensionState"
        }
      }
    },
    "modelStatusExplanation": {
      "type": "object",
      "properties": {
        "subject": {
          "$ref": "#/definitions/modelIdentifier",
          "description": "the id of the object that resulted in this status. In the case of parent entities, this may be one of the child entities, or itself."
        },
        "reason": {
          "$ref": "#/definitions/modelStatusReason"
        },
        "message": {
          "type": "string",
          "title": "Optional freeform message to be shown to the user alongside reason.\nonly one of the two will be set"
        },
        "messages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "modelStatusReason": {
      "type": "string",
      "enum": [
        "REASON_UNKNOWN",
        "NO_CURRENT_STATE",
        "APPLY_FAILED",
        "UNHEALTHY_PODS",
        "UPDATING_PODS",
        "VERSION_MISMATCH",
        "RUNTIME_OBJECT_FAILED",
        "PRECONDITIONS_FAILED",
        "MANUAL_APPROVAL_REJECTED",
        "STUCK_ENTITY"
      ],
      "default": "REASON_UNKNOWN",
      "title": "- NO_CURRENT_STATE: Prodvana has not fetched the data it needs to act on the entity\n - APPLY_FAILED: the command to apply target state failed\n - UNHEALTHY_PODS: unhealthy pods detected\n - UPDATING_PODS: pods are being updated\n - VERSION_MISMATCH: no update in progress, but there are pods on the wrong version. This could be a transient state with the runtime, or something was updated out of band\n - RUNTIME_OBJECT_FAILED: after applying successfully, the object arrived at a failed state\n - PRECONDITIONS_FAILED: a precondition failed in an unrecoverable way\n - STUCK_ENTITY: Entity has not been updated in a long time"
    },
    "modelVersion": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "replicas": {
          "type": "integer",
          "format": "int32",
          "title": "Created/running replicas, can be in any state"
        },
        "availableReplicas": {
          "type": "integer",
          "format": "int32",
          "description": "Replicas which have passed healthchecks for required duration."
        },
        "pushTimestamp": {
          "type": "string",
          "format": "date-time"
        },
        "active": {
          "type": "boolean",
          "description": "A version is active if it is the version in which the underlying object is converging to.\nA runtime object will have exactly one active version, while a service instance may have one or more\ndepending on if it maps to more than one runtime object."
        },
        "targetReplicas": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "objectObjectMeta": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "configVersion": {
          "type": "string",
          "description": "only set for objects who has configurations with parametrization support. At the time of this writing, only services."
        },
        "source": {
          "$ref": "#/definitions/versionSource"
        },
        "sourceMetadata": {
          "$ref": "#/definitions/versionSourceMetadata"
        }
      }
    },
    "organizationGetOrganizationInsightsResp": {
      "type": "object",
      "properties": {
        "insights": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/insightsInsight"
          }
        }
      }
    },
    "organizationGetOrganizationMetadataResp": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/organizationOrganizationUserMetadata",
          "title": "metadata with no variables substitution, no modifications from parents"
        }
      }
    },
    "organizationGetOrganizationMetricsResp": {
      "type": "object",
      "properties": {
        "deploymentMetrics": {
          "$ref": "#/definitions/metricsDeploymentMetrics"
        }
      }
    },
    "organizationGetOrganizationResp": {
      "type": "object",
      "properties": {
        "organization": {
          "$ref": "#/definitions/organizationOrganizationInfo"
        }
      }
    },
    "organizationListRolesResp": {
      "type": "object",
      "properties": {
        "roles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/organizationRoleDefinition"
          }
        }
      }
    },
    "organizationListUsersResp": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/organizationSettingsUser"
          }
        },
        "nextPageToken": {
          "type": "string"
        }
      }
    },
    "organizationOrganizationInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "writebackConfig": {
          "$ref": "#/definitions/config_writebackConfigWritebackPath"
        },
        "slug": {
          "type": "string"
        },
        "userMetadata": {
          "$ref": "#/definitions/organizationOrganizationUserMetadata"
        }
      }
    },
    "organizationOrganizationUserMetadata": {
      "type": "object",
      "properties": {
        "applicationLinks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/common_configLink"
          },
          "title": "Links that every app should get automatically"
        },
        "serviceLinks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/common_configLink"
          },
          "title": "Links that every service should get automatically"
        },
        "links": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/common_configLink"
          }
        }
      }
    },
    "organizationRoleDefinition": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "organizationSetOrganizationMetadataReq": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/organizationOrganizationUserMetadata"
        }
      }
    },
    "organizationSetOrganizationMetadataResp": {
      "type": "object"
    },
    "organizationSetRolesResp": {
      "type": "object"
    },
    "organizationSettingsUser": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/prodvanausersUser"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "organizationSnoozeOrganizationInsightResp": {
      "type": "object"
    },
    "pipelinesManualApprovalTask": {
      "type": "object"
    },
    "pipelinesParallelTask": {
      "type": "object",
      "properties": {
        "tracks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ParallelTaskTaskTrack"
          }
        }
      }
    },
    "pipelinesPushTask": {
      "type": "object",
      "properties": {
        "serviceId": {
          "type": "string",
          "title": "when passing as input, only specify one of service or service_id, not both"
        },
        "service": {
          "type": "string"
        },
        "releaseChannelId": {
          "type": "string",
          "title": "when passing as input, only specify one of release_channel or release_channel_id, not both"
        },
        "releaseChannel": {
          "type": "string"
        },
        "rollback": {
          "type": "boolean",
          "title": "deprecated, set at pipeline level instead of task level"
        },
        "applicationId": {
          "type": "string"
        },
        "application": {
          "type": "string"
        }
      }
    },
    "pipelinesTask": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/pipelinesTaskMetadata"
        },
        "pushTask": {
          "$ref": "#/definitions/pipelinesPushTask"
        },
        "waitTask": {
          "$ref": "#/definitions/pipelinesWaitTask"
        },
        "parallelTask": {
          "$ref": "#/definitions/pipelinesParallelTask"
        },
        "manualApprovalTask": {
          "$ref": "#/definitions/pipelinesManualApprovalTask"
        },
        "customTask": {
          "$ref": "#/definitions/prodvanapipelinesCustomTask"
        }
      }
    },
    "pipelinesTaskMetadata": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        }
      },
      "description": "Metadata contains information generic to all task types.\nCompilation of a task can be done entirely with its metadata and specific task-type config."
    },
    "pipelinesWaitTask": {
      "type": "object",
      "properties": {
        "duration": {
          "type": "string"
        }
      }
    },
    "prodvanacommon_configTaskConfig": {
      "type": "object",
      "properties": {
        "program": {
          "$ref": "#/definitions/common_configProgramConfig"
        },
        "retryConfig": {
          "$ref": "#/definitions/common_configRetryConfig",
          "description": "If not set, the task will not be retried once it starts executing once."
        }
      }
    },
    "prodvanadelivery_extensionDeliveryExtension": {
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/objectObjectMeta"
        },
        "config": {
          "$ref": "#/definitions/prodvanadelivery_extensionDeliveryExtensionConfig"
        },
        "state": {
          "$ref": "#/definitions/prodvanadelivery_extensionDeliveryExtensionState"
        }
      }
    },
    "prodvanadelivery_extensionDeliveryExtensionConfig": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "taskConfig": {
          "$ref": "#/definitions/prodvanacommon_configTaskConfig"
        },
        "kubernetesConfig": {
          "$ref": "#/definitions/common_configKubernetesConfig"
        },
        "parameters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/common_configParameterDefinition"
          }
        }
      }
    },
    "prodvanadelivery_extensionDeliveryExtensionState": {
      "type": "object",
      "title": "TODO(naphat) list custom task instances?"
    },
    "prodvanaeventsRuntimeObject": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "name of object as it appears in the runtime layer"
        },
        "kind": {
          "type": "string"
        },
        "namespace": {
          "type": "string",
          "title": "optional, depends on if runtime has support for it"
        },
        "url": {
          "type": "string",
          "description": "optional, depends on if there is a unique URL to view this object."
        }
      }
    },
    "prodvanaorganizationGetUserResp": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/prodvanausersUser"
        }
      }
    },
    "prodvanapipelinesCustomTask": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "title": "description used for displaying this task"
        },
        "program": {
          "$ref": "#/definitions/common_configProgramConfig"
        },
        "retryConfig": {
          "$ref": "#/definitions/common_configRetryConfig",
          "description": "if not set, the custom task will not be retried once it starts executing once."
        },
        "application": {
          "type": "string",
          "title": "TODO(naphat) is this the best interface, or do we just take runtime + namespace?"
        },
        "applicationId": {
          "type": "string"
        },
        "releaseChannel": {
          "type": "string"
        },
        "releaseChannelId": {
          "type": "string"
        },
        "finalCompiledProgram": {
          "type": "boolean",
          "title": "if set, treat the program as the final program, avoid any internal Prodvana compilation (e.g. setting default env from app config)"
        }
      }
    },
    "prodvanaprotectionProtection": {
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/objectObjectMeta"
        },
        "config": {
          "$ref": "#/definitions/protectionProtectionConfig"
        },
        "builtin": {
          "type": "boolean",
          "description": "indicates this protection is provided by Prodvana by default."
        }
      }
    },
    "prodvanaprotectionProtectionConvergenceAttachment": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "optional, default to protection name"
        },
        "ref": {
          "$ref": "#/definitions/protectionProtectionReference"
        },
        "lifecycle": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protectionProtectionLifecycle"
          }
        }
      },
      "description": "Protections attached to convergence. The desired state ID of the convergence is passed to the protection\nand its lifecycle is tied to the convergence itself."
    },
    "prodvanarepoUser": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        }
      }
    },
    "prodvanaserviceDeliveryExtensionConfig": {
      "type": "object",
      "properties": {
        "inlined": {
          "$ref": "#/definitions/prodvanadelivery_extensionDeliveryExtensionConfig"
        },
        "lifecycle": {
          "$ref": "#/definitions/common_configTaskLifecycle"
        }
      }
    },
    "prodvanaserviceServiceInstanceState": {
      "type": "object",
      "properties": {
        "externalAddrs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/serviceExternalAddr"
          }
        }
      }
    },
    "prodvanaserviceServiceState": {
      "type": "object"
    },
    "prodvanaserviceTaskConfig": {
      "type": "object",
      "properties": {
        "program": {
          "$ref": "#/definitions/common_configProgramConfig"
        },
        "baseProgram": {
          "$ref": "#/definitions/serviceProgramReference",
          "description": "optional base program to take configs from. If specified, `program` field will act\nlike an override instead."
        },
        "retryConfig": {
          "$ref": "#/definitions/common_configRetryConfig",
          "description": "if not set, the task will not be retried once it starts executing once."
        },
        "ref": {
          "$ref": "#/definitions/serviceTaskReference",
          "description": "Instead of defining a new task, reference an existing custom task and use that. This is meant\nto be used in conjunection with per_release_channel to allow multiple release channels to use\na single custom task. If set, the program definition is ignored except for program name."
        }
      }
    },
    "prodvanasettingsorganizationGetUserResp": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/organizationSettingsUser"
        }
      }
    },
    "prodvanausersUser": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "title": "user info, all optional"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "emails": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "protectionConfigureProtectionReq": {
      "type": "object",
      "properties": {
        "protectionConfig": {
          "$ref": "#/definitions/protectionProtectionConfig"
        },
        "source": {
          "$ref": "#/definitions/versionSource"
        },
        "sourceMetadata": {
          "$ref": "#/definitions/versionSourceMetadata"
        }
      }
    },
    "protectionConfigureProtectionResp": {
      "type": "object",
      "properties": {
        "protectionId": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "protectionGetProtectionConfigResp": {
      "type": "object",
      "properties": {
        "config": {
          "$ref": "#/definitions/protectionProtectionConfig"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "protectionGetProtectionResp": {
      "type": "object",
      "properties": {
        "protection": {
          "$ref": "#/definitions/prodvanaprotectionProtection"
        }
      }
    },
    "protectionListProtectionsResp": {
      "type": "object",
      "properties": {
        "protections": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/prodvanaprotectionProtection"
          }
        },
        "nextPageToken": {
          "type": "string"
        }
      }
    },
    "protectionProtectionConfig": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "taskConfig": {
          "$ref": "#/definitions/prodvanacommon_configTaskConfig",
          "description": "Inline task config with retry, template support."
        },
        "kubernetesConfig": {
          "$ref": "#/definitions/common_configKubernetesConfig"
        },
        "pollInterval": {
          "type": "string",
          "title": "customize intervals instead of using Prodvana default\nhow often to run check even if it succeeds"
        },
        "timeout": {
          "type": "string",
          "title": "how long after a run has started to try another run if it has not completed yet"
        },
        "parameters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/common_configParameterDefinition"
          }
        }
      }
    },
    "protectionProtectionLifecycle": {
      "type": "object",
      "properties": {
        "preApproval": {
          "$ref": "#/definitions/ProtectionLifecyclePreApproval",
          "title": "NOTE: Type here must match CustomTaskType"
        },
        "postApproval": {
          "$ref": "#/definitions/ProtectionLifecyclePostApproval",
          "title": "Approval approval = 2;"
        },
        "deployment": {
          "$ref": "#/definitions/ProtectionLifecycleDeployment"
        },
        "postDeployment": {
          "$ref": "#/definitions/ProtectionLifecyclePostDeployment"
        }
      }
    },
    "protectionProtectionReference": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "parameters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/common_configParameterValue"
          }
        }
      }
    },
    "protectionValidateConfigureProtectionResp": {
      "type": "object"
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "release_channelConfigureReleaseChannelReq": {
      "type": "object",
      "properties": {
        "releaseChannel": {
          "$ref": "#/definitions/release_channelReleaseChannelConfig"
        },
        "clusterId": {
          "type": "string",
          "description": "optional if there is only one cluster. If set, cluster_name should be empty."
        },
        "clusterName": {
          "type": "string",
          "description": "optional if there is only one cluster. If set, cluster_id should be empty."
        }
      }
    },
    "release_channelConfigureReleaseChannelResp": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        }
      }
    },
    "release_channelDeleteReleaseChannelResp": {
      "type": "object"
    },
    "release_channelGetReleaseChannelEventsResp": {
      "type": "object",
      "properties": {
        "events": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/eventsEvent"
          }
        },
        "nextPageToken": {
          "type": "string"
        }
      }
    },
    "release_channelGetReleaseChannelResp": {
      "type": "object",
      "properties": {
        "releaseChannel": {
          "$ref": "#/definitions/release_channelReleaseChannel"
        }
      }
    },
    "release_channelListReleaseChannelsResp": {
      "type": "object",
      "properties": {
        "releaseChannels": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/release_channelReleaseChannel"
          }
        }
      }
    },
    "release_channelPolicy": {
      "type": "object",
      "properties": {
        "defaultEnv": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/common_configEnvValue"
          }
        }
      }
    },
    "release_channelPrecondition": {
      "type": "object",
      "properties": {
        "releaseChannelStable": {
          "$ref": "#/definitions/PreconditionReleaseChannelStable"
        },
        "manualApproval": {
          "$ref": "#/definitions/release_channelPreconditionManualApproval"
        },
        "customTask": {
          "$ref": "#/definitions/release_channelPreconditionCustomTask"
        }
      }
    },
    "release_channelPreconditionCustomTask": {
      "type": "object",
      "properties": {
        "taskName": {
          "type": "string"
        },
        "customTask": {
          "$ref": "#/definitions/prodvanapipelinesCustomTask"
        }
      }
    },
    "release_channelPreconditionManualApproval": {
      "type": "object"
    },
    "release_channelProtectionReleaseChannelAttachment": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "optional, default to protection name"
        },
        "ref": {
          "$ref": "#/definitions/protectionProtectionReference"
        },
        "lifecycle": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protectionProtectionLifecycle"
          },
          "title": "if set, this protection is automatically used as part of service pushes in this release channel"
        }
      }
    },
    "release_channelReleaseChannel": {
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/objectObjectMeta"
        },
        "config": {
          "$ref": "#/definitions/release_channelReleaseChannelConfig"
        },
        "state": {
          "$ref": "#/definitions/release_channelReleaseChannelState"
        }
      }
    },
    "release_channelReleaseChannelConfig": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "intentionally does not reference cluster - this allows us to copy release channels across clusters via the same config"
        },
        "order": {
          "type": "string",
          "format": "int64"
        },
        "maturity": {
          "$ref": "#/definitions/common_configMaturity",
          "title": "deprecated"
        },
        "policy": {
          "$ref": "#/definitions/release_channelPolicy"
        },
        "runtimes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/release_channelReleaseChannelRuntimeConfig"
          }
        },
        "deployAnnotations": {
          "$ref": "#/definitions/workflowAnnotationsConfig"
        },
        "preconditions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/release_channelPrecondition"
          }
        },
        "protections": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/release_channelProtectionReleaseChannelAttachment"
          }
        },
        "convergenceProtections": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/prodvanaprotectionProtectionConvergenceAttachment"
          }
        }
      }
    },
    "release_channelReleaseChannelProtectionAttachment": {
      "type": "object",
      "properties": {
        "protection": {
          "type": "string"
        },
        "attachment": {
          "type": "string"
        },
        "desiredStateId": {
          "type": "string"
        },
        "attachmentId": {
          "type": "string"
        }
      }
    },
    "release_channelReleaseChannelRuntimeConfig": {
      "type": "object",
      "properties": {
        "runtime": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Optional identifier for this runtime connection within this release channel,\nuseful if the release channel has multiple runtimes of the same type.\nDefaults to the value of `runtime``."
        },
        "containerOrchestration": {
          "$ref": "#/definitions/runtimesContainerOrchestrationRuntime"
        },
        "type": {
          "$ref": "#/definitions/release_channelRuntimeConnectionType"
        }
      }
    },
    "release_channelReleaseChannelState": {
      "type": "object",
      "properties": {
        "protectionAttachments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/release_channelReleaseChannelProtectionAttachment"
          }
        }
      }
    },
    "release_channelRuntimeConnectionType": {
      "type": "string",
      "enum": [
        "UNKNOWN_CONNECTION",
        "LONG_LIVED_COMPUTE",
        "EXTENSION"
      ],
      "default": "UNKNOWN_CONNECTION"
    },
    "repoCommit": {
      "type": "object",
      "properties": {
        "commitId": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "author": {
          "$ref": "#/definitions/prodvanarepoUser",
          "title": "TODO: Other fields, like author, timestamps etc"
        }
      }
    },
    "runtimesContainerOrchestrationRuntime": {
      "type": "object",
      "properties": {
        "k8s": {
          "$ref": "#/definitions/ContainerOrchestrationRuntimeK8s"
        },
        "ecs": {
          "$ref": "#/definitions/ContainerOrchestrationRuntimeECS"
        }
      }
    },
    "runtimesRuntimeExecutionConfig": {
      "type": "object",
      "properties": {
        "runtime": {
          "type": "string"
        },
        "containerOrchestration": {
          "$ref": "#/definitions/runtimesContainerOrchestrationRuntime"
        }
      }
    },
    "serviceApplyParametersReqPerReleaseChannel": {
      "type": "object",
      "properties": {
        "releaseChannel": {
          "type": "string"
        },
        "parameters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/common_configParameterValue"
          },
          "title": "takes precedence over any parameters set at top level"
        }
      }
    },
    "serviceApplyParametersResp": {
      "type": "object",
      "properties": {
        "serviceId": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "efficiencyStat": {
          "$ref": "#/definitions/statEfficiencyStat",
          "title": "only set if compute_efficiency was set in request"
        }
      }
    },
    "serviceAutoRollbackConfig": {
      "type": "object",
      "properties": {
        "disabled": {
          "type": "boolean"
        }
      }
    },
    "serviceCapabilityReference": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "serviceCertificate": {
      "type": "object",
      "properties": {
        "tls": {
          "$ref": "#/definitions/serviceTLSCertificate"
        },
        "awsAcmCert": {
          "type": "string"
        }
      }
    },
    "serviceCompiledCapabilityConfig": {
      "type": "object",
      "properties": {
        "capability": {
          "$ref": "#/definitions/capabilityCapabilityConfig"
        }
      }
    },
    "serviceCompiledServiceInstanceConfig": {
      "type": "object",
      "properties": {
        "service": {
          "type": "string"
        },
        "application": {
          "type": "string"
        },
        "releaseChannel": {
          "type": "string"
        },
        "programs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/common_configProgramConfig"
          }
        },
        "replicas": {
          "$ref": "#/definitions/serviceReplicasConfig"
        },
        "maturity": {
          "$ref": "#/definitions/common_configMaturity"
        },
        "releaseStrategy": {
          "$ref": "#/definitions/serviceReleaseStrategyConfig"
        },
        "customHostnames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "cert": {
          "$ref": "#/definitions/serviceCertificate"
        },
        "runtime": {
          "$ref": "#/definitions/release_channelReleaseChannelRuntimeConfig"
        },
        "runtimeExecution": {
          "$ref": "#/definitions/runtimesRuntimeExecutionConfig"
        },
        "capabilities": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/serviceCompiledCapabilityConfig"
          }
        },
        "deliveryConfig": {
          "$ref": "#/definitions/deliveryDeliveryConfig"
        },
        "volumes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/volumesVolume"
          }
        },
        "deployAnnotations": {
          "$ref": "#/definitions/workflowAnnotationsConfig"
        },
        "baseTemplate": {
          "$ref": "#/definitions/common_configServiceTemplateRef"
        },
        "prePushTasks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/prodvanaserviceTaskConfig"
          },
          "description": "DEPRECATED: Replace with delivery_extensions once its implemented."
        },
        "deliveryExtensions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/prodvanaserviceDeliveryExtensionConfig"
          }
        },
        "runtimeSpecific": {
          "$ref": "#/definitions/serviceRuntimeSpecificConfig"
        },
        "parameters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/common_configParameterDefinition"
          }
        },
        "parameterValues": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/common_configParameterValue"
          }
        },
        "progressDeadline": {
          "type": "string",
          "title": "how long to wait before marking deployment as failed"
        },
        "runtimeExtension": {
          "$ref": "#/definitions/serviceRuntimeExtensionConfig"
        },
        "kubernetesConfig": {
          "$ref": "#/definitions/common_configKubernetesConfig"
        },
        "helm": {
          "$ref": "#/definitions/common_configHelmConfig"
        },
        "env": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/common_configEnvValue"
          },
          "description": "The compiled environment for this instance's context, e.g.  Release Channel.\nThis is used to inject these values into external configs."
        }
      },
      "title": "a compiled version of ServiceConfig specific to a service instance, with release-channel configs applied"
    },
    "serviceConfigureServiceResp": {
      "type": "object",
      "properties": {
        "serviceId": {
          "type": "string"
        },
        "configVersion": {
          "type": "string"
        }
      }
    },
    "serviceDeleteServiceResp": {
      "type": "object"
    },
    "serviceExternalAddr": {
      "type": "object",
      "properties": {
        "addr": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/serviceExternalAddrType"
        }
      }
    },
    "serviceExternalAddrType": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "AUTO",
        "EXTERNAL",
        "RAW_IP",
        "RAW_HOSTNAME"
      ],
      "default": "UNKNOWN",
      "title": "- RAW_IP: RAW_* are generated by the underlying infrastructure, independent of Prodvana"
    },
    "serviceFollowContainerRepositorySettings": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        }
      }
    },
    "serviceGetMaterializedConfigResp": {
      "type": "object",
      "properties": {
        "config": {
          "$ref": "#/definitions/serviceServiceConfig",
          "title": "config as passed in by user"
        },
        "version": {
          "type": "string"
        },
        "compiledConfig": {
          "$ref": "#/definitions/serviceServiceConfig",
          "title": "config with defaults applied"
        },
        "compiledServiceInstanceConfigs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/serviceCompiledServiceInstanceConfig"
          },
          "title": "compiled config per release channel, with per-release-channel overrides applied"
        },
        "versionMetadata": {
          "$ref": "#/definitions/serviceListMaterializedConfigVersionsRespVersionMetadata"
        }
      }
    },
    "serviceGetServiceConfigResp": {
      "type": "object",
      "properties": {
        "config": {
          "$ref": "#/definitions/serviceServiceConfig"
        },
        "configVersion": {
          "type": "string",
          "title": "deprecated, use config_version_metadata"
        },
        "configVersionMetadata": {
          "$ref": "#/definitions/serviceListServiceConfigVersionsRespVersionMetadata"
        }
      }
    },
    "serviceGetServiceInsightsResp": {
      "type": "object",
      "properties": {
        "insights": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/insightsInsight"
          }
        }
      }
    },
    "serviceGetServiceInstanceResp": {
      "type": "object",
      "properties": {
        "serviceInstance": {
          "$ref": "#/definitions/serviceServiceInstance"
        }
      }
    },
    "serviceGetServiceMetadataResp": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/serviceServiceUserMetadata",
          "title": "metadata with no variables substitution, no modifications from parents"
        }
      }
    },
    "serviceGetServiceMetricsResp": {
      "type": "object",
      "properties": {
        "deploymentMetrics": {
          "$ref": "#/definitions/metricsDeploymentMetrics"
        },
        "cost": {
          "$ref": "#/definitions/metricsCost"
        }
      }
    },
    "serviceGetServiceResp": {
      "type": "object",
      "properties": {
        "service": {
          "$ref": "#/definitions/serviceService"
        }
      }
    },
    "serviceListCommitsResp": {
      "type": "object",
      "properties": {
        "commits": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/repoCommit"
          }
        },
        "nextPageToken": {
          "type": "string"
        }
      }
    },
    "serviceListMaterializedConfigVersionsResp": {
      "type": "object",
      "properties": {
        "versions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/serviceListMaterializedConfigVersionsRespVersionMetadata"
          }
        },
        "nextPageToken": {
          "type": "string"
        }
      }
    },
    "serviceListMaterializedConfigVersionsRespVersionMetadata": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "creationTimestamp": {
          "type": "string",
          "format": "date-time"
        },
        "configVersion": {
          "type": "string"
        },
        "parameters": {
          "$ref": "#/definitions/serviceServiceParameterValues"
        },
        "source": {
          "$ref": "#/definitions/versionSource"
        },
        "sourceMetadata": {
          "$ref": "#/definitions/versionSourceMetadata"
        }
      }
    },
    "serviceListServiceConfigVersionsResp": {
      "type": "object",
      "properties": {
        "versions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/serviceListServiceConfigVersionsRespVersionMetadata"
          }
        },
        "nextPageToken": {
          "type": "string"
        }
      }
    },
    "serviceListServiceConfigVersionsRespVersionMetadata": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "creationTimestamp": {
          "type": "string",
          "format": "date-time"
        },
        "source": {
          "$ref": "#/definitions/versionSource"
        },
        "sourceMetadata": {
          "$ref": "#/definitions/versionSourceMetadata"
        }
      }
    },
    "serviceListServiceInstancesResp": {
      "type": "object",
      "properties": {
        "serviceInstances": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/serviceServiceInstance"
          }
        }
      }
    },
    "serviceListServicesResp": {
      "type": "object",
      "properties": {
        "services": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/serviceService"
          }
        }
      }
    },
    "serviceMetricAnalysis": {
      "type": "object",
      "properties": {
        "successRate": {
          "$ref": "#/definitions/MetricAnalysisSuccessRateConfig"
        },
        "latencyP95": {
          "$ref": "#/definitions/MetricAnalysisLatencyConfig"
        }
      }
    },
    "servicePerReleaseChannelConfig": {
      "type": "object",
      "properties": {
        "releaseChannel": {
          "type": "string"
        },
        "customHostnames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "programs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/common_configPerReleaseChannelProgramConfig"
          }
        },
        "cert": {
          "$ref": "#/definitions/serviceCertificate"
        },
        "deliveryConfig": {
          "$ref": "#/definitions/deliveryDeliveryConfig"
        },
        "volumes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/volumesVolume"
          }
        },
        "replicas": {
          "$ref": "#/definitions/serviceReplicasConfig"
        },
        "prePushTasks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/prodvanaserviceTaskConfig"
          },
          "description": "DEPRECATED: Replace with delivery_extensions once its implemented."
        },
        "deliveryExtensions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/prodvanaserviceDeliveryExtensionConfig"
          }
        },
        "runtimeSpecific": {
          "$ref": "#/definitions/serviceRuntimeSpecificConfig"
        },
        "runtimeConnection": {
          "type": "string",
          "description": "which runtime connection to use in each release channel.\noptional if only one runtime makes sense for the service config."
        },
        "runtimeExtension": {
          "$ref": "#/definitions/serviceRuntimeExtensionConfig"
        },
        "kubernetesConfig": {
          "$ref": "#/definitions/common_configKubernetesConfig"
        },
        "externalConfig": {
          "$ref": "#/definitions/common_configKubernetesConfig",
          "title": "deprecated, pass this as kubernetes_config instead"
        },
        "helm": {
          "$ref": "#/definitions/common_configHelmConfig"
        }
      }
    },
    "servicePerReleaseChannelParameterValues": {
      "type": "object",
      "properties": {
        "releaseChannel": {
          "type": "string"
        },
        "parameters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/common_configParameterValue"
          }
        }
      }
    },
    "serviceProgramReference": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "serviceReleaseStrategyConfig": {
      "type": "object",
      "properties": {
        "individualStageDeadline": {
          "type": "string",
          "description": "deadline in each stage before the push is rolled back. Includes the time it takes for pods to be healthy. Defaults to 10 minutes."
        },
        "automatedTestingDuration": {
          "type": "string",
          "description": "duration of the automated testing phase, before manual approval. Defaults to 30m."
        },
        "metricsAnalysis": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/serviceMetricAnalysis"
          }
        },
        "manualApproval": {
          "type": "boolean"
        },
        "checkInterval": {
          "type": "string",
          "description": "advanced settings that do not typically need to be set. Exposed mainly for testing purposes.\n\ndefaults to 30s"
        },
        "failureThreshold": {
          "type": "integer",
          "format": "int32",
          "title": "defaults to 5"
        }
      }
    },
    "serviceReplicasConfig": {
      "type": "object",
      "properties": {
        "fixed": {
          "type": "integer",
          "format": "int32",
          "title": "no validations, server side has defaults"
        }
      }
    },
    "serviceRuntimeExtensionConfig": {
      "type": "object",
      "properties": {
        "parameterValues": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/common_configParameterValue"
          }
        }
      }
    },
    "serviceRuntimeSpecificConfig": {
      "type": "object",
      "properties": {
        "k8s": {
          "$ref": "#/definitions/RuntimeSpecificConfigK8SConfig"
        }
      },
      "description": "RuntimeSpecificConfig contains Service level configuration options that only make sense for a\nspecific Runtime type. Configuration added here should only apply to a single Service; if the\nRuntime specific configuration relates to all services, it should be configured as at the\nRuntime cluster level (or as a runtime extension)."
    },
    "serviceService": {
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/objectObjectMeta"
        },
        "config": {
          "$ref": "#/definitions/serviceServiceConfig"
        },
        "state": {
          "$ref": "#/definitions/prodvanaserviceServiceState"
        },
        "userMetadata": {
          "$ref": "#/definitions/serviceServiceUserMetadata"
        }
      }
    },
    "serviceServiceConfig": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "application": {
          "type": "string"
        },
        "programs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/common_configProgramConfig"
          }
        },
        "replicas": {
          "$ref": "#/definitions/serviceReplicasConfig"
        },
        "releaseStrategy": {
          "$ref": "#/definitions/serviceReleaseStrategyConfig"
        },
        "perReleaseChannel": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/servicePerReleaseChannelConfig"
          }
        },
        "capabilities": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/serviceCapabilityReference"
          }
        },
        "deliveryConfig": {
          "$ref": "#/definitions/deliveryDeliveryConfig"
        },
        "volumes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/volumesVolume"
          }
        },
        "deployAnnotations": {
          "$ref": "#/definitions/workflowAnnotationsConfig"
        },
        "baseTemplate": {
          "$ref": "#/definitions/common_configServiceTemplateRef"
        },
        "prePushTasks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/prodvanaserviceTaskConfig"
          },
          "description": "DEPRECATED: Replace with delivery_extensions once its implemented."
        },
        "deliveryExtensions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/prodvanaserviceDeliveryExtensionConfig"
          }
        },
        "runtimeSpecific": {
          "$ref": "#/definitions/serviceRuntimeSpecificConfig"
        },
        "runtimeConnection": {
          "type": "string",
          "description": "which runtime connection to use in each release channel.\noptional if only one runtime makes sense for the service config."
        },
        "parameters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/common_configParameterDefinition"
          }
        },
        "parameterValues": {
          "$ref": "#/definitions/serviceServiceParameterValues",
          "title": "only valid to set in compiled configs by Prodvana"
        },
        "progressDeadline": {
          "type": "string",
          "title": "how long to wait before marking deployment as failed"
        },
        "runtimeExtension": {
          "$ref": "#/definitions/serviceRuntimeExtensionConfig"
        },
        "kubernetesConfig": {
          "$ref": "#/definitions/common_configKubernetesConfig"
        },
        "externalConfig": {
          "$ref": "#/definitions/common_configKubernetesConfig",
          "title": "deprecated, pass this as kubernetes_config instead"
        },
        "helm": {
          "$ref": "#/definitions/common_configHelmConfig"
        },
        "parametersAutogen": {
          "$ref": "#/definitions/ServiceConfigParametersAutogen",
          "title": "How to autogenerate parameters, defaults to IMAGE"
        },
        "autoRollback": {
          "$ref": "#/definitions/serviceAutoRollbackConfig"
        }
      }
    },
    "serviceServiceConfigVersionReference": {
      "type": "object",
      "properties": {
        "application": {
          "type": "string",
          "title": "TODO(naphat) unify with ApplyParametersReq below"
        },
        "service": {
          "type": "string"
        },
        "serviceConfigVersion": {
          "type": "string"
        }
      }
    },
    "serviceServiceInstance": {
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/common_configServiceInstanceObjectMeta"
        },
        "config": {
          "$ref": "#/definitions/serviceCompiledServiceInstanceConfig",
          "title": "will be empty if never pushed"
        },
        "state": {
          "$ref": "#/definitions/prodvanaserviceServiceInstanceState"
        }
      }
    },
    "serviceServiceParameterValues": {
      "type": "object",
      "properties": {
        "parameters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/common_configParameterValue"
          }
        },
        "perReleaseChannel": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/servicePerReleaseChannelParameterValues"
          }
        }
      }
    },
    "serviceServiceUserMetadata": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "links": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/common_configLink"
          }
        },
        "followRepository": {
          "$ref": "#/definitions/serviceFollowContainerRepositorySettings"
        }
      }
    },
    "serviceSetServiceMetadataResp": {
      "type": "object"
    },
    "serviceSnoozeServiceInsightResp": {
      "type": "object"
    },
    "serviceTLSCertificate": {
      "type": "object",
      "properties": {
        "tlsCert": {
          "$ref": "#/definitions/serviceTLSSecret"
        },
        "tlsKey": {
          "$ref": "#/definitions/serviceTLSSecret"
        }
      }
    },
    "serviceTLSSecret": {
      "type": "object",
      "properties": {
        "rawSecret": {
          "type": "string",
          "description": "Raw secret value to be used for user-editable YAML and RPC calls."
        },
        "secret": {
          "$ref": "#/definitions/common_configSecret",
          "description": "Externally stored secret."
        }
      }
    },
    "serviceTaskReference": {
      "type": "object",
      "properties": {
        "releaseChannel": {
          "type": "string"
        }
      }
    },
    "serviceValidateApplyParametersResp": {
      "type": "object",
      "properties": {
        "config": {
          "$ref": "#/definitions/serviceServiceConfig",
          "title": "config as passed in by user"
        },
        "compiledConfig": {
          "$ref": "#/definitions/serviceServiceConfig",
          "title": "config with defaults applied"
        },
        "appVersion": {
          "type": "string",
          "title": "the app version that is used for validation"
        },
        "compiledServiceInstanceConfigs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/serviceCompiledServiceInstanceConfig"
          },
          "title": "compiled config per release channel, with per-release-channel overrides applied"
        }
      }
    },
    "statEfficiencyStat": {
      "type": "object",
      "properties": {
        "savedLines": {
          "type": "integer",
          "format": "int32",
          "title": "how many lines did Prodvana save you from writing? Computed by comparing materialized yaml to proto text format"
        },
        "materializedLines": {
          "type": "integer",
          "format": "int32",
          "title": "how many lines of materialized config was either added, modified, or deleted?"
        }
      }
    },
    "templateServiceTemplate": {
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/objectObjectMeta"
        },
        "lastUpdateTimestamp": {
          "type": "string",
          "format": "date-time"
        },
        "serviceConfig": {
          "$ref": "#/definitions/serviceServiceConfig"
        }
      }
    },
    "versionSource": {
      "type": "string",
      "enum": [
        "UNKNOWN_SOURCE",
        "WEB",
        "INTERACTIVE_PVNCTL",
        "CONFIG_FILE",
        "REPO_FOLLOW",
        "PRODVANA"
      ],
      "default": "UNKNOWN_SOURCE",
      "title": "- PRODVANA: this source indicates this version was provided by Prodvana\nthis is used for things like builtin Protections or other first party provided features"
    },
    "versionSourceMetadata": {
      "type": "object",
      "properties": {
        "repoUrl": {
          "type": "string",
          "title": "full repo URL, like git@github.com:foo/bar.git or https://github.com/foo/bar"
        },
        "filePath": {
          "type": "string"
        },
        "commit": {
          "type": "string"
        },
        "userId": {
          "type": "string",
          "title": "set internally, automatically, by Prodvana if the action was initiated by a user"
        }
      },
      "description": "all of these fields are optional and only set if it makes sense for a given source."
    },
    "volumesVolume": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "source": {
          "$ref": "#/definitions/volumesVolumeSource"
        },
        "mount": {
          "$ref": "#/definitions/volumesVolumeMount"
        }
      }
    },
    "volumesVolumeMount": {
      "type": "object",
      "properties": {
        "mountPath": {
          "type": "string"
        },
        "readOnly": {
          "type": "boolean"
        }
      }
    },
    "volumesVolumeSource": {
      "type": "object",
      "properties": {
        "secret": {
          "$ref": "#/definitions/VolumeSourceSecretSource"
        },
        "ephemeral": {
          "$ref": "#/definitions/VolumeSourceEphemeralSource"
        }
      }
    },
    "workflowAddHoneycombEnvironmentReq": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "apiKey": {
          "type": "string"
        }
      }
    },
    "workflowAddHoneycombEnvironmentResp": {
      "type": "object",
      "properties": {
        "integrationId": {
          "type": "string"
        }
      }
    },
    "workflowAlertingConfig": {
      "type": "object",
      "properties": {
        "pagerduty": {
          "$ref": "#/definitions/AlertingConfigPagerDuty"
        }
      }
    },
    "workflowAnnotationsConfig": {
      "type": "object",
      "properties": {
        "honeycomb": {
          "$ref": "#/definitions/AnnotationsConfigHoneycomb"
        }
      }
    },
    "workflowContainerRegistryIntegration": {
      "type": "object",
      "properties": {
        "integrationId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "title": "Implicit from registry_info below"
        },
        "status": {
          "$ref": "#/definitions/workflowRegistryStatus"
        },
        "ecrInfo": {
          "$ref": "#/definitions/workflowContainerRegistryIntegrationECRInfo"
        },
        "repositories": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/workflowTrackedImageRepository"
          }
        }
      }
    },
    "workflowContainerRegistryIntegrationECRInfo": {
      "type": "object",
      "properties": {
        "region": {
          "type": "string"
        }
      }
    },
    "workflowCreateContainerRegistryIntegrationReq": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "readable name for this registry"
        },
        "url": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "secret": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/workflowRegistryType"
        },
        "ecrOptions": {
          "$ref": "#/definitions/CreateContainerRegistryIntegrationReqECROptions"
        },
        "publicRegistryOptions": {
          "$ref": "#/definitions/CreateContainerRegistryIntegrationReqPublicRegistryOptions"
        }
      }
    },
    "workflowCreateContainerRegistryIntegrationRes": {
      "type": "object",
      "properties": {
        "integrationId": {
          "type": "string"
        }
      }
    },
    "workflowCreateGitHubAppResp": {
      "type": "object",
      "properties": {
        "integrationId": {
          "type": "string"
        }
      }
    },
    "workflowDeleteContainerRegistryIntegrationResp": {
      "type": "object"
    },
    "workflowDeleteHoneycombEnvironmentResp": {
      "type": "object"
    },
    "workflowDeleteIntegrationResp": {
      "type": "object"
    },
    "workflowGetContainerRegistryImagesRes": {
      "type": "object",
      "properties": {
        "images": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/workflowRegistryImage"
          },
          "title": "will be sorted by creation time, descending"
        },
        "nextPageToken": {
          "type": "string"
        }
      }
    },
    "workflowGetContainerRegistryIntegrationResp": {
      "type": "object",
      "properties": {
        "registry": {
          "$ref": "#/definitions/workflowContainerRegistryIntegration"
        }
      }
    },
    "workflowGetGrafanaInstallationResp": {
      "type": "object",
      "properties": {
        "integrationId": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "workflowGetImageCommitInfoResp": {
      "type": "object",
      "properties": {
        "commit": {
          "$ref": "#/definitions/repoCommit",
          "title": "will be null if the image does not have any commit attached, or commit integration is not configured"
        }
      }
    },
    "workflowGetInstallPagerDutyUrlResp": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        }
      }
    },
    "workflowGetInstallSlackUrlResp": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        }
      }
    },
    "workflowGetProgramDefaultsResp": {
      "type": "object",
      "properties": {
        "programDefaults": {
          "$ref": "#/definitions/workflowProgramDefaults"
        }
      }
    },
    "workflowGetServiceImageInfoResp": {
      "type": "object",
      "properties": {
        "serviceId": {
          "type": "string"
        },
        "serviceName": {
          "type": "string"
        },
        "versionInfos": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/GetServiceImageInfoRespVersionInfo"
          }
        }
      }
    },
    "workflowGetServiceImageInfoRespPerReleaseChannel": {
      "type": "object",
      "properties": {
        "releaseChannel": {
          "type": "string"
        },
        "programInfos": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/GetServiceImageInfoRespProgramInfo"
          }
        }
      }
    },
    "workflowGetTrackedImageRepositoryResp": {
      "type": "object",
      "properties": {
        "repository": {
          "$ref": "#/definitions/workflowTrackedImageRepository"
        }
      }
    },
    "workflowIndexStatus": {
      "type": "string",
      "enum": [
        "IS_UNKNOWN",
        "PENDING",
        "INDEXING",
        "INDEXED"
      ],
      "default": "IS_UNKNOWN",
      "title": "- PENDING: indexing requested but has not indexed before\n - INDEXING: indexing operation in progress\n - INDEXED: steady-state, has been indexed before but no ongoing operation"
    },
    "workflowInstallGitHubResp": {
      "type": "object"
    },
    "workflowInstallGrafanaReq": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        },
        "apiToken": {
          "type": "string"
        }
      }
    },
    "workflowInstallGrafanaResp": {
      "type": "object",
      "properties": {
        "integrationId": {
          "type": "string"
        }
      }
    },
    "workflowInstallPagerDutyResp": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "workflowInstallSlackResp": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "workflowIntegration": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "workflowListContainerRegistryIntegrationsResp": {
      "type": "object",
      "properties": {
        "containerRegistries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ListContainerRegistryIntegrationsRespContainerRegistryIntegrationInfo"
          }
        }
      }
    },
    "workflowListContainerRegistryIntegrationsRespECRInfo": {
      "type": "object",
      "properties": {
        "region": {
          "type": "string"
        }
      }
    },
    "workflowListHoneycombEnvironmentsResp": {
      "type": "object",
      "properties": {
        "environments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ListHoneycombEnvironmentsRespHoneycombEnvironment"
          }
        }
      }
    },
    "workflowListIntegrationsResp": {
      "type": "object",
      "properties": {
        "integrations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/workflowIntegration"
          }
        }
      }
    },
    "workflowListTrackedImageRepositoriesResp": {
      "type": "object",
      "properties": {
        "repositories": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/workflowTrackedImageRepository"
          }
        }
      }
    },
    "workflowProgramDefaults": {
      "type": "object",
      "properties": {
        "cmd": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "entrypoint": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "env": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/common_configEnvValue"
          }
        },
        "ports": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/common_configPortConfig"
          }
        }
      },
      "title": "when updating this, make sure to also invalidate docker image cache warmer"
    },
    "workflowRegistryImage": {
      "type": "object",
      "properties": {
        "created": {
          "type": "string",
          "format": "date-time"
        },
        "url": {
          "type": "string"
        },
        "tag": {
          "type": "string"
        },
        "commit": {
          "$ref": "#/definitions/repoCommit"
        }
      }
    },
    "workflowRegistryStatus": {
      "type": "string",
      "enum": [
        "UNDEFINED",
        "CONNECTED",
        "FAILED",
        "RS_PENDING"
      ],
      "default": "UNDEFINED",
      "title": "- FAILED: Augment/replace with UNAUTHENTICATED, UNAVAILABLE, ... in the future"
    },
    "workflowRegistryType": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "DOCKER_REGISTRY",
        "ECR"
      ],
      "default": "UNKNOWN"
    },
    "workflowStopTrackingImageRepositoryResp": {
      "type": "object"
    },
    "workflowTrackImageRepositoriesResp": {
      "type": "object"
    },
    "workflowTrackedImageRepository": {
      "type": "object",
      "properties": {
        "repository": {
          "type": "string"
        },
        "lastIndex": {
          "type": "string",
          "format": "date-time"
        },
        "indexStatus": {
          "$ref": "#/definitions/workflowIndexStatus"
        }
      }
    },
    "workflowUninstallGrafanaResp": {
      "type": "object",
      "properties": {
        "integrationId": {
          "type": "string"
        }
      }
    },
    "workflowUninstallHoneycombResp": {
      "type": "object",
      "properties": {
        "integrationIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "workflowUninstallPagerDutyResp": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        }
      }
    },
    "workflowUninstallSlackResp": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        }
      }
    },
    "workflowUpdateHoneycombEnvironmentResp": {
      "type": "object"
    }
  }
}
